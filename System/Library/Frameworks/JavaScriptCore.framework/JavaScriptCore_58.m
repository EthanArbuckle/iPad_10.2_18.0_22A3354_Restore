uint64_t jit_heap_config_specialized_local_allocator_try_allocate_medium_segregated_with_free_bits(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
LABEL_2:
    v3 = __clz(__rbit64(v1));
    *(_QWORD *)(a1 + 40) = v1 & ~(1 << v3);
    return v2 + v3;
  }
  else if (*(_BYTE *)(a1 + 5) == 2
         && (v6 = *(unsigned int *)(a1 + 32), v5 = *(_DWORD *)(a1 + 36), v6 < v5))
  {
    v7 = a1 + 8 * v6;
    *(_QWORD *)(v7 + 56) = 0;
    v8 = (unint64_t *)(v7 + 64);
    v9 = v5 - 1 - v6;
    while (v9)
    {
      v2 += 64;
      v10 = *v8++;
      v1 = v10;
      LODWORD(v6) = v6 + 1;
      --v9;
      if (v10)
      {
        *(_DWORD *)(a1 + 32) = v6;
        *(_QWORD *)(a1 + 24) = v2;
        goto LABEL_2;
      }
    }
    *(_DWORD *)(a1 + 32) = v5;
    return 0;
  }
  else
  {
    return 0;
  }
}

uint64_t jit_heap_config_specialized_local_allocator_try_allocate_inline_cases(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    *(_DWORD *)(a1 + 16) = v1 - *(_DWORD *)(a1 + 20);
    return *(_QWORD *)(a1 + 8) - v1;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
LABEL_4:
      v5 = __clz(v3);
      *(_QWORD *)(a1 + 40) = v3 & ~(0x8000000000000000 >> v5);
      return v4 + 16 * v5;
    }
    else if (*(_BYTE *)(a1 + 5) == 10
           && (v6 = *(unsigned int *)(a1 + 32), v7 = *(_DWORD *)(a1 + 36), v6 < v7))
    {
      v8 = a1 + 8 * v6;
      *(_QWORD *)(v8 + 56) = 0;
      v9 = (unint64_t *)(v8 + 64);
      v10 = v7 - 1 - v6;
      while (v10)
      {
        v4 += 1024;
        v12 = *v9++;
        v11 = v12;
        LODWORD(v6) = v6 + 1;
        --v10;
        if (v12)
        {
          v3 = __rbit64(v11);
          *(_DWORD *)(a1 + 32) = v6;
          *(_QWORD *)(a1 + 24) = v4;
          goto LABEL_4;
        }
      }
      *(_DWORD *)(a1 + 32) = v7;
      return 0;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t jit_heap_config_specialized_local_allocator_try_allocate_slow(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _BOOL8))
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inline_cases;
  _BOOL8 v20;

  if (*(_BYTE *)(a1 + 3) != 2)
    pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)a1, 0);
  while (1)
  {
    v10 = *(unsigned __int8 *)(a1 + 5);
    if (v10 == 11)
    {
      v13 = jit_small_segregated_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(a1);
      v14 = (v15 & 1) == 0;
      if (v14 != 1)
        goto LABEL_17;
      goto LABEL_11;
    }
    if (v10 != 17)
      break;
    *(_WORD *)(a1 + 1) = 256;
    v16 = jit_medium_bitfit_page_config_specialized_allocator_try_allocate((uint64_t *)(a1 + 56), a1, a2, a3);
    v13 = v17;
    v14 = v16;
    if (v16 != 1)
      goto LABEL_17;
LABEL_11:
    if ((*(_BYTE *)(a1 + 5) - 4) > 7u)
      v18 = 0;
    else
      v18 = qword_19919FC60[(char)(*(_BYTE *)(a1 + 5) - 4)];
    (*((void (**)(uint64_t, uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v18) + 26))(a1, a5);
    if (!*(_QWORD *)(a1 + 24))
    {
      inline_cases = 0;
      v20 = 0;
      goto LABEL_21;
    }
    inline_cases = jit_heap_config_specialized_local_allocator_try_allocate_inline_cases(a1);
    if (v20)
      goto LABEL_21;
  }
  if (v10 != 16)
    goto LABEL_11;
  *(_WORD *)(a1 + 1) = 256;
  v11 = jit_small_bitfit_page_config_specialized_allocator_try_allocate(a1 + 56, a1, a2, a3);
  v13 = v12;
  v14 = v11;
  if (v11 == 1)
    goto LABEL_11;
LABEL_17:
  v20 = v14 == 0;
  if (v14)
    inline_cases = 0;
  else
    inline_cases = v13;
LABEL_21:
  *(_BYTE *)a1 = 0;
  return a6(inline_cases, v20);
}

uint64_t jit_heap_config_specialized_try_allocate_common_impl_slow(uint64_t *a1, int a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  BOOL v20;
  unint64_t StatusReg;
  unsigned int v22;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t os_unfair_lock_opaque;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  os_unfair_lock_t v35;
  unsigned int v36;
  os_unfair_lock_s *v38;
  unsigned int v39;
  unint64_t v41;
  char v42;
  char v43;
  int v44;
  unsigned int v45;
  os_unfair_lock_t v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  int v50;
  unsigned int v51;
  unint64_t v53;
  unsigned int v54;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t small_segregated_slow;
  char v66;
  os_unfair_lock_t v67;
  os_unfair_lock_t lock;
  unint64_t v69;
  _BYTE *v70;
  os_unfair_lock_s *v71;
  unint64_t v72;
  unint64_t v73;

  v8 = a8;
  if (a4 <= 1)
    v13 = 1;
  else
    v13 = a4;
  v14 = a1[1];
  if (!v14)
    v14 = pas_ensure_heap_slow(a1, a2, (uint64_t)&jit_heap_config, a6);
  if (a2 == 1)
    v15 = (unsigned int *)(a1 + 3);
  else
    v15 = 0;
  v16 = (a3 + 3) >> 2;
  if ((v16 >= *(unsigned int *)(v14 + 36)
     || (v17 = *(_QWORD *)(v14 + 16)) == 0
     || ((v18 = *(unsigned int *)(v17 + 4 * v16),
          v19 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v18),
          (_DWORD)v18)
       ? (v20 = v19 == 0)
       : (v20 = 1),
         v20))
    && (v19 = (unsigned int *)pas_segregated_heap_size_directory_for_index_slow(v14, v16, v15, &jit_heap_config)) == 0
    || 1 << ((unint64_t)v19[6] >> 27) < v13)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v22 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v22, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_23;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_23:
    v24 = pas_segregated_heap_ensure_size_directory_for_size(v14, a3, v13, v8, (uint64_t)&jit_heap_config, v15, 1);
    v19 = (unsigned int *)v24;
    v25 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v26 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v26 != v25)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      {
        if (v24)
          goto LABEL_27;
        goto LABEL_34;
      }
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
    if (v19)
      goto LABEL_27;
LABEL_34:
    v35 = 0;
    v67 = 0;
    lock = 0;
    do
    {
      if (v35)
      {
        v36 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&v35->_os_unfair_lock_opaque))
        {
          if (!__stxr(v36, &v35->_os_unfair_lock_opaque))
            goto LABEL_44;
        }
        __clrex();
        os_unfair_lock_lock(v35);
LABEL_44:
        v38 = v67;
        v67 = 0;
        lock = v38;
      }
      v39 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v39, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_50;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_50:
      v72 = v13;
      v73 = a3;
      v41 = allocate_impl(v14 + 40, &v73, &v72, (uint64_t)&jit_heap_config, (uint64_t)&v67);
      v33 = v41;
      v43 = v42;
      if ((v42 & 1) != 0)
      {
        v69 = v41;
        v70 = (_BYTE *)(v73 + v41);
        v71 = (os_unfair_lock_s *)(v14 + 40);
        pas_large_map_add(&v69);
      }
      v44 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v45 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v45 != v44)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        {
          v46 = lock;
          if (!lock)
            goto LABEL_37;
          goto LABEL_58;
        }
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
      v46 = lock;
      if (!lock)
        goto LABEL_37;
LABEL_58:
      v47 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v48 = __ldxr(&v46->_os_unfair_lock_opaque);
        if (v48 != v47)
          break;
        if (!__stlxr(0, &v46->_os_unfair_lock_opaque))
          goto LABEL_36;
      }
      __clrex();
      os_unfair_lock_unlock(v46);
LABEL_36:
      lock = 0;
LABEL_37:
      v35 = v67;
    }
    while (v67);
    pas_scavenger_notify_eligibility_if_needed();
    if (*MEMORY[0x1E0C83EB8])
      return pas_msl_malloc_logging_slow(a3, v33, v43);
    return v33;
  }
LABEL_27:
  if (v19[9]
    && (*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752)
     || !pthread_self_is_exiting_np()
     && pas_msl_is_enabled_flag_value
     && (pas_msl_is_enabled_flag_value != 2
      || (pthread_once(&pas_compute_msl_is_enabled_key, (void (*)(void))compute_msl_status),
          pas_msl_is_enabled_flag_value))))
  {
    pas_segregated_size_directory_get_allocator_from_tlc((uint64_t)v19, a3, v8, (uint64_t)&jit_heap_config, v15, &v69);
    v27 = (uint64_t)v70;
    v28 = v71;
    *v70 = 1;
    os_unfair_lock_opaque = *(unsigned int *)(v27 + 16);
    if ((_DWORD)os_unfair_lock_opaque)
      goto LABEL_68;
  }
  else
  {
    v49 = v19[7] & 0x7FLL;
    if (v49 <= 0x1F)
    {
      v53 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      do
      {
        v28 = (os_unfair_lock_s *)(pas_baseline_allocator_table + 320 * v49);
        v54 = *(_DWORD *)(v53 + 24);
        while (!__ldaxr(&v28->_os_unfair_lock_opaque))
        {
          if (!__stxr(v54, &v28->_os_unfair_lock_opaque))
          {
            if ((v19[7] & 0x7F) == v49)
              goto LABEL_67;
            goto LABEL_85;
          }
        }
        __clrex();
        os_unfair_lock_lock(v28);
        if ((v19[7] & 0x7F) == v49)
          goto LABEL_67;
LABEL_85:
        v56 = *(_DWORD *)(v53 + 24);
        while (1)
        {
          v57 = __ldxr(&v28->_os_unfair_lock_opaque);
          if (v57 != v56)
            break;
          if (!__stlxr(0, &v28->_os_unfair_lock_opaque))
            goto LABEL_78;
        }
        __clrex();
        os_unfair_lock_unlock(v28);
LABEL_78:
        v49 = v19[7] & 0x7FLL;
      }
      while (v49 <= 0x1F);
    }
    v28 = pas_segregated_size_directory_select_allocator_slow((uint64_t)v19);
LABEL_67:
    v27 = (uint64_t)&v28[2];
    LOBYTE(v28[2]._os_unfair_lock_opaque) = 1;
    os_unfair_lock_opaque = v28[6]._os_unfair_lock_opaque;
    if ((_DWORD)os_unfair_lock_opaque)
    {
LABEL_68:
      *(_DWORD *)(v27 + 16) = os_unfair_lock_opaque - *(_DWORD *)(v27 + 20);
      v33 = *(_QWORD *)(v27 + 8) - os_unfair_lock_opaque;
      *(_BYTE *)v27 = 0;
      v34 = 1;
      if (!v28)
        goto LABEL_74;
      goto LABEL_69;
    }
  }
  v30 = *(_QWORD *)(v27 + 40);
  v31 = *(_QWORD *)(v27 + 24);
  if (v30)
  {
LABEL_31:
    v32 = __clz(v30);
    *(_QWORD *)(v27 + 40) = v30 & ~(0x8000000000000000 >> v32);
    v33 = v31 + 16 * v32;
    *(_BYTE *)v27 = 0;
    v34 = 1;
    if (!v28)
      goto LABEL_74;
    goto LABEL_69;
  }
  if (*(_BYTE *)(v27 + 5) == 10)
  {
    v58 = *(unsigned int *)(v27 + 32);
    v59 = *(_DWORD *)(v27 + 36);
    if (v58 < v59)
    {
      v60 = v27 + 8 * v58;
      *(_QWORD *)(v60 + 56) = 0;
      v61 = (unint64_t *)(v60 + 64);
      v62 = v59 - 1 - v58;
      while (v62)
      {
        v31 += 1024;
        v64 = *v61++;
        v63 = v64;
        LODWORD(v58) = v58 + 1;
        --v62;
        if (v64)
        {
          v30 = __rbit64(v63);
          *(_DWORD *)(v27 + 32) = v58;
          *(_QWORD *)(v27 + 24) = v31;
          goto LABEL_31;
        }
      }
      *(_DWORD *)(v27 + 32) = v59;
    }
    small_segregated_slow = jit_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v27, v16, a3, (uint64_t)pas_allocation_result_identity_2, a5, a6, a7, a8);
  }
  else
  {
    small_segregated_slow = jit_heap_config_specialized_local_allocator_try_allocate_slow_171(v27, a3, v13, a7);
  }
  v33 = small_segregated_slow;
  v34 = v66;
  if (v28)
  {
LABEL_69:
    v50 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v51 = __ldxr(&v28->_os_unfair_lock_opaque);
      if (v51 != v50)
        break;
      if (!__stlxr(0, &v28->_os_unfair_lock_opaque))
        goto LABEL_74;
    }
    __clrex();
    os_unfair_lock_unlock(v28);
  }
LABEL_74:
  if (!*MEMORY[0x1E0C83EB8])
    return v33;
  return pas_msl_malloc_logging_slow(a3, v33, v34);
}

uint64_t jit_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  _QWORD *v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  const os_unfair_lock *v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int128 *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unint64_t v40;
  _DWORD *v41;
  int v42;
  unsigned int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _BYTE *v48;
  int v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  char *v60;
  _QWORD *v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;

  if ((_DWORD)a4 != 2)
  {
    if (*MEMORY[0x1E0C83EB8])
    {
      v70 = a1;
      pas_msl_free_logging_slow(a2);
      a1 = v70;
      v40 = a2 & 0xFFFFFFFFFFFFC000;
      v41 = off_1EE342948;
      if (!off_1EE342948)
        goto LABEL_48;
    }
    else
    {
      v40 = a2 & 0xFFFFFFFFFFFFC000;
      v41 = off_1EE342948;
      if (!off_1EE342948)
        goto LABEL_48;
    }
    v42 = (a2 >> 14) ^ ((a2 >> 14) >> 4);
    v43 = ((v42 ^ 0xDEADBEEF) + 32 * v42) ^ (((v42 ^ 0xDEADBEEF) + 32 * v42) >> 11);
    v44 = (char *)(v41 + 8);
    v45 = v41[3] & v43;
    v46 = *(_QWORD *)&v41[4 * v45 + 8];
    if (v46 == v40)
    {
LABEL_47:
      v48 = *(_BYTE **)&v44[16 * v45 + 8];
      if (v48)
      {
LABEL_54:
        v26 = 0;
        switch(*v48)
        {
          case 1:
            v55 = (a2 >> 14) ^ ((a2 >> 14) >> 4);
            v56 = ((v55 ^ 0xDEADBEEF) + 32 * v55) ^ (((v55 ^ 0xDEADBEEF) + 32 * v55) >> 11);
            v57 = (char *)off_1EE342948 + 32;
            v58 = *((_DWORD *)off_1EE342948 + 3) & v56;
            if (*((_QWORD *)off_1EE342948 + 2 * v58 + 4) != v40)
            {
              v59 = v56 + 1;
              do
                v58 = *((_DWORD *)off_1EE342948 + 3) & v59++;
              while (*(_QWORD *)&v57[16 * v58] != v40);
            }
            v60 = &v57[16 * v58];
            v61 = (_QWORD *)*((_QWORD *)v60 + 1);
            v62 = (os_unfair_lock_s *)v61[1];
            if (v62)
              v20 = pas_segregated_page_switch_lock_slow(*((_QWORD *)v60 + 1), 0, v62);
            else
              v20 = 0;
            v63 = 4 * ((a2 >> 9) & 0x1F);
            v64 = *(_DWORD *)((_BYTE *)v61 + v63 + 44) & ~(1 << (a2 >> 4));
            *(_DWORD *)((char *)v61 + v63 + 44) = v64;
            v65 = *(unsigned int *)((v61[4] & 0xFFFFFFFFFFFFFFF8) + v63 + 20);
            if ((_DWORD)v65)
              v66 = pas_compact_heap_reservation_base + 8 * v65;
            else
              v66 = 0;
            if ((*(_BYTE *)(v66 + 19) & 4) != 0)
            {
              if (v64)
                goto LABEL_65;
            }
            else
            {
              pas_segregated_partial_view_note_eligibility(v66, (uint64_t)v61);
              if (v64)
              {
LABEL_65:
                if (!v20)
                  return 1;
                goto LABEL_66;
              }
            }
            if (v61[3] == 1)
            {
              pas_segregated_page_note_emptiness((uint64_t)v61, 0);
              if (!v20)
                return 1;
            }
            else
            {
              --v61[3];
              if (!v20)
                return 1;
            }
LABEL_66:
            v67 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
            do
            {
              v68 = __ldxr(&v20->_os_unfair_lock_opaque);
              if (v68 != v67)
                goto LABEL_71;
            }
            while (__stlxr(0, &v20->_os_unfair_lock_opaque));
            return 1;
          case 2:
            v69 = *(unsigned int *)(a1 + 8000);
            if (v69 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(a1, a2, (os_unfair_lock_s *)9, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(a1 + 8 * v69) = a2 | 0x9000000000000;
              *(_DWORD *)(a1 + 8000) = v69 + 1;
            }
            return 1;
          case 5:
            jit_small_bitfit_page_config_specialized_page_deallocate_with_page((uint64_t)v48, a2);
            return 1;
          case 6:
            jit_medium_bitfit_page_config_specialized_page_deallocate_with_page((uint64_t)v48, a2);
            return 1;
          default:
            return v26;
        }
      }
    }
    else
    {
      v47 = v43 + 1;
      while (v46 != -1)
      {
        v45 = v41[3] & v47;
        v46 = *(_QWORD *)&v44[16 * v45];
        ++v47;
        if (v46 == v40)
          goto LABEL_47;
      }
    }
LABEL_48:
    if (!off_1EE342918)
      goto LABEL_72;
    v49 = (a2 >> 17) ^ ((a2 >> 17) >> 4);
    v50 = ((v49 ^ 0xDEADBEEF) + 32 * v49) ^ (((v49 ^ 0xDEADBEEF) + 32 * v49) >> 11);
    v51 = (char *)off_1EE342918 + 32;
    v52 = *((_DWORD *)off_1EE342918 + 3) & v50;
    v53 = *((_QWORD *)off_1EE342918 + 2 * v52 + 4);
    if (v53 != (a2 & 0xFFFFFFFFFFFE0000))
    {
      v54 = v50 + 1;
      while (v53 != -1)
      {
        v52 = *((_DWORD *)off_1EE342918 + 3) & v54;
        v53 = *(_QWORD *)&v51[16 * v52];
        ++v54;
        if (v53 == (a2 & 0xFFFFFFFFFFFE0000))
          goto LABEL_53;
      }
LABEL_72:
      if (a2)
        return pas_try_deallocate_known_large(a2, (uint64_t)&jit_heap_config, a3);
      return 1;
    }
LABEL_53:
    v48 = *(_BYTE **)&v51[16 * v52 + 8];
    if (!v48)
      goto LABEL_72;
    goto LABEL_54;
  }
  v9 = a2 & 0xFFFFFFFFFFFFC000;
  v10 = (a2 >> 14) ^ ((a2 >> 14) >> 4);
  v11 = ((v10 ^ 0xDEADBEEF) + 32 * v10) ^ (((v10 ^ 0xDEADBEEF) + 32 * v10) >> 11);
  v12 = *((_QWORD *)off_1EE342948 + 2 * (*((_DWORD *)off_1EE342948 + 3) & v11) + 4);
  if (v12 != (a2 & 0xFFFFFFFFFFFFC000))
  {
    v13 = v11 + 1;
    do
    {
      if (v12 == -1)
        break;
      v12 = *((_QWORD *)off_1EE342948 + 2 * (*((_DWORD *)off_1EE342948 + 3) & v13++) + 4);
    }
    while (v12 != v9);
  }
  v14 = (char *)off_1EE342948 + 32;
  v15 = *((_DWORD *)off_1EE342948 + 3) & v11;
  if (*((_QWORD *)off_1EE342948 + 2 * v15 + 4) != v9)
  {
    v16 = v11 + 1;
    do
      v15 = *((_DWORD *)off_1EE342948 + 3) & v16++;
    while (*(_QWORD *)&v14[16 * v15] != v9);
  }
  v17 = &v14[16 * v15];
  v18 = (_QWORD *)*((_QWORD *)v17 + 1);
  v19 = (os_unfair_lock_s *)v18[1];
  if (v19)
    v20 = pas_segregated_page_switch_lock_slow(*((_QWORD *)v17 + 1), 0, v19);
  else
    v20 = 0;
  v21 = 4 * ((a2 >> 9) & 0x1F);
  v22 = *(_DWORD *)((_BYTE *)v18 + v21 + 44) & ~(1 << (a2 >> 4));
  *(_DWORD *)((char *)v18 + v21 + 44) = v22;
  v23 = *(unsigned int *)((v18[4] & 0xFFFFFFFFFFFFFFF8) + v21 + 20);
  if ((_DWORD)v23)
    v24 = pas_compact_heap_reservation_base + 8 * v23;
  else
    v24 = 0;
  v25 = *(_BYTE *)(v24 + 19);
  if ((v25 & 4) == 0)
  {
    v28 = (const os_unfair_lock *)v18[1];
    if (v28)
    {
      os_unfair_lock_assert_owner(v28);
      v25 = *(_BYTE *)(v24 + 19);
    }
    if ((v25 & 1) != 0)
    {
      *(_BYTE *)(v24 + 19) = v25 | 6;
      if (!v22)
        goto LABEL_28;
    }
    else
    {
      if ((v24 & 3) != 0)
        v29 = 0;
      else
        v29 = *(unsigned __int8 *)((v24 & 0xFFFFFFFFFFFFFFF8) + 16);
      pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v24 + 7)) | ((unint64_t)*(unsigned __int8 *)(v24 + 9) << 19))+ pas_compact_heap_reservation_base, v29);
      *(_BYTE *)(v24 + 19) |= 4u;
      if (!v22)
        goto LABEL_28;
    }
LABEL_16:
    if (!v20)
      return 1;
LABEL_37:
    v37 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v38 = __ldxr(&v20->_os_unfair_lock_opaque);
      if (v38 != v37)
        break;
      if (!__stlxr(0, &v20->_os_unfair_lock_opaque))
        return 1;
    }
LABEL_71:
    __clrex();
    os_unfair_lock_unlock(v20);
    return 1;
  }
  if (v22)
    goto LABEL_16;
LABEL_28:
  if (v18[3] != 1)
  {
    --v18[3];
    if (v20)
      goto LABEL_37;
    return 1;
  }
  v30 = (unsigned int *)timebase_info_ptr;
  if (!timebase_info_ptr)
  {
    get_timebase_info_slow();
    v31 = mach_approximate_time();
    v33 = timebase_info;
    v32 = *(unsigned int *)algn_1ECF57B54;
    if ((pas_get_epoch_first & 1) != 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  v31 = mach_approximate_time();
  v33 = *v30;
  v32 = v30[1];
  if ((pas_get_epoch_first & 1) == 0)
LABEL_33:
    pas_get_epoch_first = 1;
LABEL_34:
  v34 = v31 * v33;
  v35 = (unsigned __int128 *)(v18 + 2);
  v36 = v34 / v32;
  do
    __ldxp(v35);
  while (__stxp(v36, v35));
  pas_segregated_view_note_emptiness(v18[4], (uint64_t)v18);
  if (v20)
    goto LABEL_37;
  return 1;
}

unint64_t page_provider(unint64_t a1, unint64_t a2, unint64_t a3)
{
  int64x2_t v7;
  double (*v8)@<D0>(uint64_t@<X8>);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v7 = vdupq_n_s64(1uLL);
  v8 = fresh_memory_aligned_allocator;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  return try_allocate_without_fixing(jit_fresh_memory_heap, a1, a2, a3, (unint64_t *)&v7);
}

double fresh_memory_aligned_allocator@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t jit_heap_config_specialized_local_allocator_try_allocate_slow_171(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;

  if (*(_BYTE *)(a1 + 3) != 2)
    pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)a1, 0);
  while (1)
  {
    v8 = *(unsigned __int8 *)(a1 + 5);
    if (v8 == 11)
    {
      v11 = jit_small_segregated_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(a1);
      v12 = (v13 & 1) == 0;
      if (v12 != 1)
        goto LABEL_17;
      goto LABEL_11;
    }
    if (v8 != 17)
      break;
    *(_WORD *)(a1 + 1) = 256;
    v14 = jit_medium_bitfit_page_config_specialized_allocator_try_allocate((uint64_t *)(a1 + 56), a1, a2, a3);
    v11 = v15;
    v12 = v14;
    if (v14 != 1)
      goto LABEL_17;
LABEL_11:
    if ((*(_BYTE *)(a1 + 5) - 4) > 7u)
      v16 = 0;
    else
      v16 = qword_19919FC60[(char)(*(_BYTE *)(a1 + 5) - 4)];
    (*((void (**)(uint64_t, uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v16) + 26))(a1, a4);
    if (!*(_QWORD *)(a1 + 24))
    {
      result = 0;
      goto LABEL_21;
    }
    result = jit_heap_config_specialized_local_allocator_try_allocate_inline_cases(a1);
    if ((v18 & 1) != 0)
      goto LABEL_21;
  }
  if (v8 != 16)
    goto LABEL_11;
  *(_WORD *)(a1 + 1) = 256;
  v9 = jit_small_bitfit_page_config_specialized_allocator_try_allocate(a1 + 56, a1, a2, a3);
  v11 = v10;
  v12 = v9;
  if (v9 == 1)
    goto LABEL_11;
LABEL_17:
  if (v12)
    result = 0;
  else
    result = v11;
LABEL_21:
  *(_BYTE *)a1 = 0;
  return result;
}

uint64_t pas_all_heaps_for_each_segregated_directory(unsigned int (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t);
  uint64_t v31;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = a1;
  v31 = a2;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v4 = pas_compact_heap_reservation_base + 8 * dword_1ECF426A0;
  if (dword_1ECF426A0)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
LABEL_11:
    if (pas_utility_heap_config_for_each_shared_page_directory())
    {
      os_unfair_lock_assert_owner(&pas_heap_lock);
      v8 = pas_heap_config_kind_for_config_table[byte_1ECF324C3 & 0x3F];
      if (dword_1ECF32488 && (v9 = pas_compact_heap_reservation_base + 8 * dword_1ECF32488) != 0)
      {
        while (a1(v9, a2))
        {
          v10 = *(unsigned int *)(v9 + 44);
          v9 = pas_compact_heap_reservation_base + 8 * v10;
          if ((_DWORD)v10)
            v11 = v9 == 0;
          else
            v11 = 1;
          if (v11)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        if ((*(unsigned int (**)(_UNKNOWN **, BOOL (*)(unint64_t, uint64_t), unint64_t *))(v8 + 1064))(&bmalloc_common_primitive_heap, for_each_segregated_directory_shared_page_directory_callback, &v27))
        {
          v12 = pas_heap_config_kind_for_config_table[byte_1EE3428CB & 0x3F];
          if (dword_1EE342890 && (v13 = pas_compact_heap_reservation_base + 8 * dword_1EE342890) != 0)
          {
            while (v30(v13, v31))
            {
              v14 = *(unsigned int *)(v13 + 44);
              v13 = pas_compact_heap_reservation_base + 8 * v14;
              if ((_DWORD)v14)
                v15 = v13 == 0;
              else
                v15 = 1;
              if (v15)
                goto LABEL_29;
            }
          }
          else
          {
LABEL_29:
            if ((*(unsigned int (**)(_UNKNOWN **, BOOL (*)(unint64_t, uint64_t), unint64_t *))(v12 + 1064))(&jit_common_primitive_heap, for_each_segregated_directory_shared_page_directory_callback, &v27))
            {
              os_unfair_lock_assert_owner(&pas_heap_lock);
              v16 = pas_all_heaps_first_heap;
              if (!pas_all_heaps_first_heap)
              {
                v24 = 1;
                goto LABEL_47;
              }
              v17 = pas_compact_heap_reservation_base;
              while (1)
              {
                v18 = pas_heap_config_kind_for_config_table[*(_BYTE *)(v16 + 83) & 0x3F];
                v19 = *(unsigned int *)(v16 + 24);
                v20 = v17 + 8 * v19;
                if ((_DWORD)v19 && v20 != 0)
                  break;
LABEL_42:
                v24 = (*(uint64_t (**)(uint64_t, BOOL (*)(unint64_t, uint64_t), unint64_t *))(v18 + 1064))(v16, for_each_segregated_directory_shared_page_directory_callback, &v27);
                if ((_DWORD)v24)
                {
                  v25 = *(unsigned __int16 *)(v16 + 80) | ((unint64_t)*(unsigned __int8 *)(v16 + 82) << 16);
                  if (v25)
                  {
                    v17 = pas_compact_heap_reservation_base;
                    v16 = pas_compact_heap_reservation_base + 8 * v25;
                    if (v16)
                      continue;
                  }
                }
                goto LABEL_47;
              }
              while (v30(v20, v31))
              {
                v22 = *(unsigned int *)(v20 + 44);
                v20 = pas_compact_heap_reservation_base + 8 * v22;
                if ((_DWORD)v22)
                  v23 = v20 == 0;
                else
                  v23 = 1;
                if (v23)
                  goto LABEL_42;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    while (a1(v4, a2))
    {
      v6 = *(unsigned int *)(v4 + 44);
      v4 = pas_compact_heap_reservation_base + 8 * v6;
      if ((_DWORD)v6)
        v7 = v4 == 0;
      else
        v7 = 1;
      if (v7)
        goto LABEL_11;
    }
  }
  v24 = 0;
LABEL_47:
  pas_large_utility_free_heap_deallocate_for_allocation_config(v27, 8 * v28);
  return v24;
}

uint64_t compute_total_non_utility_segregated_summary_directory_callback(unsigned int *a1, int64x2_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  uint64_t v28;

  if (*((_BYTE *)a1 + 12) == 1)
  {
    v3 = *a1;
    v4 = pas_compact_heap_reservation_base;
    v5 = v3 >= 8 ? pas_compact_heap_reservation_base : 0;
    if (v5 + v3)
    {
      v7 = a1[1];
      v8 = 1;
      if (!(_DWORD)v7
        || (v9 = pas_compact_heap_reservation_base + 8 * v7) == 0
        || (v10 = *(_DWORD *)(v9 + 48), v8 = (v10 + 1), v10 != -1))
      {
        v12 = 4 * v8 - 8;
        do
        {
          v16 = a1;
          if (--v8)
          {
            v17 = *(unsigned int *)(v4 + 8 * a1[1] + 44);
            if ((_DWORD)v17)
              v18 = v4 + 8 * v17;
            else
              v18 = 0;
            v16 = (unsigned int *)(v18 + v12);
          }
          v19 = *v16;
          if (v19 >= 8)
            v20 = v4;
          else
            v20 = 0;
          v21 = v20 + v19;
          if ((v21 & 7) != 4)
          {
            v22 = v21 & 7;
            if (v22 < 2)
            {
              pas_segregated_exclusive_view_compute_summary(v21 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v23);
            }
            else if (v22 == 2)
            {
              pas_segregated_shared_view_compute_summary();
            }
            else if (v22 == 4)
            {
              pas_segregated_partial_view_compute_summary(v21 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v23);
            }
            else
            {
              v28 = 0;
              v26 = 0u;
              v27 = 0u;
              v24 = 0u;
              v25 = 0u;
              v23 = 0u;
            }
            v13 = vaddq_s64(v24, a2[1]);
            *a2 = vaddq_s64(v23, *a2);
            a2[1] = v13;
            v14 = vaddq_s64(v26, a2[3]);
            v15 = v28 + a2[5].i64[0];
            a2[2] = vaddq_s64(v25, a2[2]);
            a2[3] = v14;
            a2[4] = vaddq_s64(v27, a2[4]);
            a2[5].i64[0] = v15;
            v4 = pas_compact_heap_reservation_base;
          }
          v12 -= 4;
        }
        while (v8);
      }
    }
  }
  return 1;
}

uint64_t compute_total_non_utility_bitfit_summary_heap_callback(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int64x2_t v6;
  int64x2_t v7;
  uint64_t v8;
  int64x2_t v10[5];
  uint64_t v11;

  v2 = *(unsigned int *)(a1 + 32);
  v3 = pas_compact_heap_reservation_base + 8 * v2;
  if ((_DWORD)v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    pas_bitfit_heap_compute_summary(v3, (uint64_t)v10);
    v6 = vaddq_s64(v10[1], a2[1]);
    *a2 = vaddq_s64(v10[0], *a2);
    a2[1] = v6;
    v7 = vaddq_s64(v10[3], a2[3]);
    v8 = v11 + a2[5].i64[0];
    a2[2] = vaddq_s64(v10[2], a2[2]);
    a2[3] = v7;
    a2[4] = vaddq_s64(v10[4], a2[4]);
    a2[5].i64[0] = v8;
  }
  return 1;
}

void pas_all_heaps_compute_total_non_utility_large_summary(int64x2_t *a1@<X8>)
{
  uint64_t (*v2)(__int128 *, uint64_t);
  uint64_t v3;
  uint64_t (*v4)(__int128 *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t (*v16)(__int128 *, uint64_t);
  int64x2_t v17;
  int64x2_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  uint64_t v36;
  void *v37;
  uint64_t (*v38)(uint64_t, unint64_t, unint64_t, int64x2_t *);
  int64x2_t *v39;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v31 = 0u;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v37 = &unk_1ECF32498;
  v38 = compute_summary_live_object_callback;
  v39 = &v31;
  pas_large_map_for_each_entry((uint64_t (*)(_QWORD *, uint64_t))for_each_live_object_entry_callback, (uint64_t)&v37);
  if (*(_BYTE *)(pas_heap_config_kind_for_config_table[byte_1ECF324C3 & 0x3F] + 1024))
    v2 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback;
  else
    v2 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback_without_physical_sharing;
  pas_fast_large_free_heap_for_each_free((uint64_t)&unk_1ECF32498, v2, (uint64_t)&v31);
  v3 = v31.i64[1];
  v21 = v31.i64[0];
  v22 = v32.i64[1];
  v23 = v32.i64[0];
  v24 = v33.i64[1];
  v25 = v33.i64[0];
  v26 = v34.i64[1];
  v27 = v34.i64[0];
  v28 = v35.i64[1];
  v29 = v35.i64[0];
  v30 = v36;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v31 = 0u;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v37 = &unk_1EE3428A0;
  v38 = compute_summary_live_object_callback;
  v39 = &v31;
  pas_large_map_for_each_entry((uint64_t (*)(_QWORD *, uint64_t))for_each_live_object_entry_callback, (uint64_t)&v37);
  if (*(_BYTE *)(pas_heap_config_kind_for_config_table[byte_1EE3428CB & 0x3F] + 1024))
    v4 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback;
  else
    v4 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback_without_physical_sharing;
  pas_fast_large_free_heap_for_each_free((uint64_t)&unk_1EE3428A0, v4, (uint64_t)&v31);
  v5 = v3 + v31.i64[1];
  v6 = v23 + v32.i64[0];
  v7 = v22 + v32.i64[1];
  v8 = v25 + v33.i64[0];
  v9 = v24 + v33.i64[1];
  v10 = v27 + v34.i64[0];
  v11 = v26 + v34.i64[1];
  v12 = v29 + v35.i64[0];
  v13 = v28 + v35.i64[1];
  v14 = v30 + v36;
  a1->i64[0] = v31.i64[0] + v21;
  a1->i64[1] = v5;
  a1[1].i64[0] = v6;
  a1[1].i64[1] = v7;
  a1[2].i64[0] = v8;
  a1[2].i64[1] = v9;
  a1[3].i64[0] = v10;
  a1[3].i64[1] = v11;
  a1[4].i64[0] = v12;
  a1[4].i64[1] = v13;
  a1[5].i64[0] = v14;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  for (i = pas_all_heaps_first_heap; i; i = pas_compact_heap_reservation_base + 8 * v20)
  {
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v36 = 0;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v37 = (void *)(i + 40);
    v38 = compute_summary_live_object_callback;
    v39 = &v31;
    pas_large_map_for_each_entry((uint64_t (*)(_QWORD *, uint64_t))for_each_live_object_entry_callback, (uint64_t)&v37);
    if (*(_BYTE *)(pas_heap_config_kind_for_config_table[*(_BYTE *)(i + 83) & 0x3F] + 1024))
      v16 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback;
    else
      v16 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback_without_physical_sharing;
    pas_fast_large_free_heap_for_each_free(i + 40, v16, (uint64_t)&v31);
    v17 = vaddq_s64(v32, a1[1]);
    *a1 = vaddq_s64(v31, *a1);
    a1[1] = v17;
    v18 = vaddq_s64(v34, a1[3]);
    v19 = v36 + a1[5].i64[0];
    a1[2] = vaddq_s64(v33, a1[2]);
    a1[3] = v18;
    a1[4] = vaddq_s64(v35, a1[4]);
    v20 = *(unsigned __int16 *)(i + 80) | ((unint64_t)*(unsigned __int8 *)(i + 82) << 16);
    a1[5].i64[0] = v19;
    if (!v20)
      break;
  }
}

BOOL for_each_segregated_directory_shared_page_directory_callback(unint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t j;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 <= 2 * (*(_DWORD *)(a2 + 20) + v4))
  {
    if (6 * v4 >= 2 * v5)
      v6 = 2 * v5;
    else
      v6 = *(_DWORD *)(a2 + 8);
    if (v5)
      v7 = v6;
    else
      v7 = 16;
    v8 = v7 - 1;
    v9 = (_QWORD *)pas_large_utility_free_heap_allocate_for_allocation_config(8 * v7, (uint64_t)"pas_ptr_hash_set/table");
    v10 = v9;
    if (v7)
      memset(v9, 255, 8 * v7);
    v11 = *(_QWORD *)a2;
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12)
    {
      for (i = 0; i != v12; ++i)
      {
        v14 = *(_QWORD *)(v11 + 8 * i);
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v15 = (v14 ^ (v14 >> 4) ^ 0xDEADBEEF) + 32 * (v14 ^ (v14 >> 4));
          v16 = ((v14 >> 36) ^ HIDWORD(v14) ^ 0xDEADBEEF) + 32 * ((v14 >> 36) ^ HIDWORD(v14));
          v17 = v15 ^ ((v16 ^ v15) >> 11) ^ v16;
          do
            v18 = v17++ & v8;
          while (v10[v18] < 0xFFFFFFFFFFFFFFFELL);
          v10[v18] = v14;
        }
      }
      v19 = 8 * v12;
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)a2 = v10;
    *(_DWORD *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 12) = v8;
    *(_DWORD *)(a2 + 20) = 0;
    pas_large_utility_free_heap_deallocate_for_allocation_config(v11, v19);
  }
  v20 = 0;
  v21 = (a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4));
  v22 = ((a1 >> 36) ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * ((a1 >> 36) ^ HIDWORD(a1));
  v23 = v21 ^ ((v22 ^ v21) >> 11) ^ v22;
  v24 = *(_DWORD *)(a2 + 12);
  v25 = *(_QWORD *)a2;
  v26 = (unint64_t *)(*(_QWORD *)a2 + 8 * (v23 & v24));
  for (j = *v26; *v26 == -2; j = *v26)
  {
LABEL_21:
    if (!v20)
      v20 = v26;
    v26 = (unint64_t *)(v25 + 8 * (++v23 & v24));
  }
  while (j != -1)
  {
    if (j == a1)
    {
      *v26 = a1;
      return 1;
    }
    v26 = (unint64_t *)(v25 + 8 * (++v23 & v24));
    j = *v26;
    if (*v26 == -2)
      goto LABEL_21;
  }
  if (v20)
  {
    --*(_DWORD *)(a2 + 20);
    v26 = v20;
  }
  ++*(_DWORD *)(a2 + 16);
  *v26 = a1;
  return ((*(uint64_t (**)(unint64_t, _QWORD))(a2 + 24))(a1, *(_QWORD *)(a2 + 32)) & 1) != 0;
}

void initialize()
{
  unint64_t StatusReg;
  unsigned int v1;
  unint64_t v3;
  int v4;
  unsigned int v5;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v1 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v1, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_6:
  v3 = pas_immortal_heap_allocate(0x2800uLL, (uint64_t)"pas_baseline_allocator_table", 0);
  *(_QWORD *)(v3 + 9920) = 0;
  *(_DWORD *)(v3 + 9927) = 0;
  *(_BYTE *)(v3 + 9931) = 2;
  *(_DWORD *)(v3 + 10236) = 0;
  *(_OWORD *)(v3 + 9948) = 0u;
  *(_OWORD *)(v3 + 9964) = 0u;
  *(_OWORD *)(v3 + 9980) = 0u;
  *(_OWORD *)(v3 + 9996) = 0u;
  *(_OWORD *)(v3 + 10012) = 0u;
  *(_OWORD *)(v3 + 10028) = 0u;
  *(_OWORD *)(v3 + 10044) = 0u;
  *(_OWORD *)(v3 + 10060) = 0u;
  *(_OWORD *)(v3 + 10076) = 0u;
  *(_OWORD *)(v3 + 10092) = 0u;
  *(_OWORD *)(v3 + 10108) = 0u;
  *(_OWORD *)(v3 + 10124) = 0u;
  *(_OWORD *)(v3 + 10140) = 0u;
  *(_OWORD *)(v3 + 10156) = 0u;
  *(_OWORD *)(v3 + 10172) = 0u;
  *(_OWORD *)(v3 + 9932) = 0u;
  *(_OWORD *)(v3 + 10188) = 0u;
  *(_OWORD *)(v3 + 10204) = 0u;
  *(_OWORD *)(v3 + 10220) = 0u;
  *(_DWORD *)(v3 + 9607) = 0;
  *(_QWORD *)(v3 + 9600) = 0;
  *(_BYTE *)(v3 + 9611) = 2;
  *(_OWORD *)(v3 + 9628) = 0u;
  *(_OWORD *)(v3 + 9644) = 0u;
  *(_OWORD *)(v3 + 9660) = 0u;
  *(_OWORD *)(v3 + 9676) = 0u;
  *(_OWORD *)(v3 + 9692) = 0u;
  *(_OWORD *)(v3 + 9708) = 0u;
  *(_OWORD *)(v3 + 9724) = 0u;
  *(_OWORD *)(v3 + 9740) = 0u;
  *(_OWORD *)(v3 + 9756) = 0u;
  *(_OWORD *)(v3 + 9772) = 0u;
  *(_OWORD *)(v3 + 9788) = 0u;
  *(_OWORD *)(v3 + 9804) = 0u;
  *(_OWORD *)(v3 + 9820) = 0u;
  *(_OWORD *)(v3 + 9836) = 0u;
  *(_OWORD *)(v3 + 9852) = 0u;
  *(_DWORD *)(v3 + 9916) = 0;
  *(_OWORD *)(v3 + 9612) = 0u;
  *(_OWORD *)(v3 + 9868) = 0u;
  *(_OWORD *)(v3 + 9884) = 0u;
  *(_OWORD *)(v3 + 9900) = 0u;
  *(_DWORD *)(v3 + 9287) = 0;
  *(_QWORD *)(v3 + 9280) = 0;
  *(_BYTE *)(v3 + 9291) = 2;
  *(_OWORD *)(v3 + 9308) = 0u;
  *(_OWORD *)(v3 + 9324) = 0u;
  *(_OWORD *)(v3 + 9340) = 0u;
  *(_OWORD *)(v3 + 9356) = 0u;
  *(_OWORD *)(v3 + 9372) = 0u;
  *(_OWORD *)(v3 + 9388) = 0u;
  *(_OWORD *)(v3 + 9404) = 0u;
  *(_OWORD *)(v3 + 9420) = 0u;
  *(_OWORD *)(v3 + 9436) = 0u;
  *(_OWORD *)(v3 + 9452) = 0u;
  *(_OWORD *)(v3 + 9468) = 0u;
  *(_OWORD *)(v3 + 9484) = 0u;
  *(_OWORD *)(v3 + 9500) = 0u;
  *(_OWORD *)(v3 + 9516) = 0u;
  *(_OWORD *)(v3 + 9532) = 0u;
  *(_DWORD *)(v3 + 9596) = 0;
  *(_OWORD *)(v3 + 9292) = 0u;
  *(_OWORD *)(v3 + 9548) = 0u;
  *(_OWORD *)(v3 + 9564) = 0u;
  *(_OWORD *)(v3 + 9580) = 0u;
  *(_DWORD *)(v3 + 8967) = 0;
  *(_QWORD *)(v3 + 8960) = 0;
  *(_BYTE *)(v3 + 8971) = 2;
  *(_OWORD *)(v3 + 8988) = 0u;
  *(_OWORD *)(v3 + 9004) = 0u;
  *(_OWORD *)(v3 + 9020) = 0u;
  *(_OWORD *)(v3 + 9036) = 0u;
  *(_OWORD *)(v3 + 9052) = 0u;
  *(_OWORD *)(v3 + 9068) = 0u;
  *(_OWORD *)(v3 + 9084) = 0u;
  *(_OWORD *)(v3 + 9100) = 0u;
  *(_OWORD *)(v3 + 9116) = 0u;
  *(_OWORD *)(v3 + 9132) = 0u;
  *(_OWORD *)(v3 + 9148) = 0u;
  *(_OWORD *)(v3 + 9164) = 0u;
  *(_OWORD *)(v3 + 9180) = 0u;
  *(_OWORD *)(v3 + 9196) = 0u;
  *(_OWORD *)(v3 + 9212) = 0u;
  *(_DWORD *)(v3 + 9276) = 0;
  *(_OWORD *)(v3 + 8972) = 0u;
  *(_OWORD *)(v3 + 9228) = 0u;
  *(_OWORD *)(v3 + 9244) = 0u;
  *(_OWORD *)(v3 + 9260) = 0u;
  *(_DWORD *)(v3 + 8647) = 0;
  *(_QWORD *)(v3 + 8640) = 0;
  *(_BYTE *)(v3 + 8651) = 2;
  *(_OWORD *)(v3 + 8668) = 0u;
  *(_OWORD *)(v3 + 8684) = 0u;
  *(_OWORD *)(v3 + 8700) = 0u;
  *(_OWORD *)(v3 + 8716) = 0u;
  *(_OWORD *)(v3 + 8732) = 0u;
  *(_OWORD *)(v3 + 8748) = 0u;
  *(_OWORD *)(v3 + 8764) = 0u;
  *(_OWORD *)(v3 + 8780) = 0u;
  *(_OWORD *)(v3 + 8796) = 0u;
  *(_OWORD *)(v3 + 8812) = 0u;
  *(_OWORD *)(v3 + 8828) = 0u;
  *(_OWORD *)(v3 + 8844) = 0u;
  *(_OWORD *)(v3 + 8860) = 0u;
  *(_OWORD *)(v3 + 8876) = 0u;
  *(_OWORD *)(v3 + 8892) = 0u;
  *(_DWORD *)(v3 + 8956) = 0;
  *(_OWORD *)(v3 + 8652) = 0u;
  *(_OWORD *)(v3 + 8908) = 0u;
  *(_OWORD *)(v3 + 8924) = 0u;
  *(_OWORD *)(v3 + 8940) = 0u;
  *(_DWORD *)(v3 + 8327) = 0;
  *(_QWORD *)(v3 + 8320) = 0;
  *(_BYTE *)(v3 + 8331) = 2;
  *(_OWORD *)(v3 + 8348) = 0u;
  *(_OWORD *)(v3 + 8364) = 0u;
  *(_OWORD *)(v3 + 8380) = 0u;
  *(_OWORD *)(v3 + 8396) = 0u;
  *(_OWORD *)(v3 + 8412) = 0u;
  *(_OWORD *)(v3 + 8428) = 0u;
  *(_OWORD *)(v3 + 8444) = 0u;
  *(_OWORD *)(v3 + 8460) = 0u;
  *(_OWORD *)(v3 + 8476) = 0u;
  *(_OWORD *)(v3 + 8492) = 0u;
  *(_OWORD *)(v3 + 8508) = 0u;
  *(_OWORD *)(v3 + 8524) = 0u;
  *(_OWORD *)(v3 + 8540) = 0u;
  *(_OWORD *)(v3 + 8556) = 0u;
  *(_OWORD *)(v3 + 8572) = 0u;
  *(_DWORD *)(v3 + 8636) = 0;
  *(_OWORD *)(v3 + 8332) = 0u;
  *(_OWORD *)(v3 + 8588) = 0u;
  *(_OWORD *)(v3 + 8604) = 0u;
  *(_OWORD *)(v3 + 8620) = 0u;
  *(_DWORD *)(v3 + 8007) = 0;
  *(_QWORD *)(v3 + 8000) = 0;
  *(_BYTE *)(v3 + 8011) = 2;
  *(_OWORD *)(v3 + 8028) = 0u;
  *(_OWORD *)(v3 + 8044) = 0u;
  *(_OWORD *)(v3 + 8060) = 0u;
  *(_OWORD *)(v3 + 8076) = 0u;
  *(_OWORD *)(v3 + 8092) = 0u;
  *(_OWORD *)(v3 + 8108) = 0u;
  *(_OWORD *)(v3 + 8124) = 0u;
  *(_OWORD *)(v3 + 8140) = 0u;
  *(_OWORD *)(v3 + 8156) = 0u;
  *(_OWORD *)(v3 + 8172) = 0u;
  *(_OWORD *)(v3 + 8188) = 0u;
  *(_OWORD *)(v3 + 8204) = 0u;
  *(_OWORD *)(v3 + 8220) = 0u;
  *(_OWORD *)(v3 + 8236) = 0u;
  *(_OWORD *)(v3 + 8252) = 0u;
  *(_DWORD *)(v3 + 8316) = 0;
  *(_OWORD *)(v3 + 8012) = 0u;
  *(_OWORD *)(v3 + 8268) = 0u;
  *(_OWORD *)(v3 + 8284) = 0u;
  *(_OWORD *)(v3 + 8300) = 0u;
  *(_DWORD *)(v3 + 7687) = 0;
  *(_QWORD *)(v3 + 7680) = 0;
  *(_BYTE *)(v3 + 7691) = 2;
  *(_OWORD *)(v3 + 7708) = 0u;
  *(_OWORD *)(v3 + 7724) = 0u;
  *(_OWORD *)(v3 + 7740) = 0u;
  *(_OWORD *)(v3 + 7756) = 0u;
  *(_OWORD *)(v3 + 7772) = 0u;
  *(_OWORD *)(v3 + 7788) = 0u;
  *(_OWORD *)(v3 + 7804) = 0u;
  *(_OWORD *)(v3 + 7820) = 0u;
  *(_OWORD *)(v3 + 7836) = 0u;
  *(_OWORD *)(v3 + 7852) = 0u;
  *(_OWORD *)(v3 + 7868) = 0u;
  *(_OWORD *)(v3 + 7884) = 0u;
  *(_OWORD *)(v3 + 7900) = 0u;
  *(_OWORD *)(v3 + 7916) = 0u;
  *(_OWORD *)(v3 + 7932) = 0u;
  *(_DWORD *)(v3 + 7996) = 0;
  *(_OWORD *)(v3 + 7692) = 0u;
  *(_OWORD *)(v3 + 7948) = 0u;
  *(_OWORD *)(v3 + 7964) = 0u;
  *(_OWORD *)(v3 + 7980) = 0u;
  *(_DWORD *)(v3 + 7367) = 0;
  *(_QWORD *)(v3 + 7360) = 0;
  *(_BYTE *)(v3 + 7371) = 2;
  *(_OWORD *)(v3 + 7388) = 0u;
  *(_OWORD *)(v3 + 7404) = 0u;
  *(_OWORD *)(v3 + 7420) = 0u;
  *(_OWORD *)(v3 + 7436) = 0u;
  *(_OWORD *)(v3 + 7452) = 0u;
  *(_OWORD *)(v3 + 7468) = 0u;
  *(_OWORD *)(v3 + 7484) = 0u;
  *(_OWORD *)(v3 + 7500) = 0u;
  *(_OWORD *)(v3 + 7516) = 0u;
  *(_OWORD *)(v3 + 7532) = 0u;
  *(_OWORD *)(v3 + 7548) = 0u;
  *(_OWORD *)(v3 + 7564) = 0u;
  *(_OWORD *)(v3 + 7580) = 0u;
  *(_OWORD *)(v3 + 7596) = 0u;
  *(_OWORD *)(v3 + 7612) = 0u;
  *(_DWORD *)(v3 + 7676) = 0;
  *(_OWORD *)(v3 + 7372) = 0u;
  *(_OWORD *)(v3 + 7628) = 0u;
  *(_OWORD *)(v3 + 7644) = 0u;
  *(_OWORD *)(v3 + 7660) = 0u;
  *(_DWORD *)(v3 + 7047) = 0;
  *(_QWORD *)(v3 + 7040) = 0;
  *(_BYTE *)(v3 + 7051) = 2;
  *(_OWORD *)(v3 + 7068) = 0u;
  *(_OWORD *)(v3 + 7084) = 0u;
  *(_OWORD *)(v3 + 7100) = 0u;
  *(_OWORD *)(v3 + 7116) = 0u;
  *(_OWORD *)(v3 + 7132) = 0u;
  *(_OWORD *)(v3 + 7148) = 0u;
  *(_OWORD *)(v3 + 7164) = 0u;
  *(_OWORD *)(v3 + 7180) = 0u;
  *(_OWORD *)(v3 + 7196) = 0u;
  *(_OWORD *)(v3 + 7212) = 0u;
  *(_OWORD *)(v3 + 7228) = 0u;
  *(_OWORD *)(v3 + 7244) = 0u;
  *(_OWORD *)(v3 + 7260) = 0u;
  *(_OWORD *)(v3 + 7276) = 0u;
  *(_OWORD *)(v3 + 7292) = 0u;
  *(_DWORD *)(v3 + 7356) = 0;
  *(_OWORD *)(v3 + 7052) = 0u;
  *(_OWORD *)(v3 + 7308) = 0u;
  *(_OWORD *)(v3 + 7324) = 0u;
  *(_OWORD *)(v3 + 7340) = 0u;
  *(_DWORD *)(v3 + 6727) = 0;
  *(_QWORD *)(v3 + 6720) = 0;
  *(_BYTE *)(v3 + 6731) = 2;
  *(_OWORD *)(v3 + 6748) = 0u;
  *(_OWORD *)(v3 + 6764) = 0u;
  *(_OWORD *)(v3 + 6780) = 0u;
  *(_OWORD *)(v3 + 6796) = 0u;
  *(_OWORD *)(v3 + 6812) = 0u;
  *(_OWORD *)(v3 + 6828) = 0u;
  *(_OWORD *)(v3 + 6844) = 0u;
  *(_OWORD *)(v3 + 6860) = 0u;
  *(_OWORD *)(v3 + 6876) = 0u;
  *(_OWORD *)(v3 + 6892) = 0u;
  *(_OWORD *)(v3 + 6908) = 0u;
  *(_OWORD *)(v3 + 6924) = 0u;
  *(_OWORD *)(v3 + 6940) = 0u;
  *(_OWORD *)(v3 + 6956) = 0u;
  *(_OWORD *)(v3 + 6972) = 0u;
  *(_DWORD *)(v3 + 7036) = 0;
  *(_OWORD *)(v3 + 6732) = 0u;
  *(_OWORD *)(v3 + 6988) = 0u;
  *(_OWORD *)(v3 + 7004) = 0u;
  *(_OWORD *)(v3 + 7020) = 0u;
  *(_DWORD *)(v3 + 6407) = 0;
  *(_QWORD *)(v3 + 6400) = 0;
  *(_BYTE *)(v3 + 6411) = 2;
  *(_OWORD *)(v3 + 6428) = 0u;
  *(_OWORD *)(v3 + 6444) = 0u;
  *(_OWORD *)(v3 + 6460) = 0u;
  *(_OWORD *)(v3 + 6476) = 0u;
  *(_OWORD *)(v3 + 6492) = 0u;
  *(_OWORD *)(v3 + 6508) = 0u;
  *(_OWORD *)(v3 + 6524) = 0u;
  *(_OWORD *)(v3 + 6540) = 0u;
  *(_OWORD *)(v3 + 6556) = 0u;
  *(_OWORD *)(v3 + 6572) = 0u;
  *(_OWORD *)(v3 + 6588) = 0u;
  *(_OWORD *)(v3 + 6604) = 0u;
  *(_OWORD *)(v3 + 6620) = 0u;
  *(_OWORD *)(v3 + 6636) = 0u;
  *(_OWORD *)(v3 + 6652) = 0u;
  *(_DWORD *)(v3 + 6716) = 0;
  *(_OWORD *)(v3 + 6412) = 0u;
  *(_OWORD *)(v3 + 6668) = 0u;
  *(_OWORD *)(v3 + 6684) = 0u;
  *(_OWORD *)(v3 + 6700) = 0u;
  *(_DWORD *)(v3 + 6087) = 0;
  *(_QWORD *)(v3 + 6080) = 0;
  *(_BYTE *)(v3 + 6091) = 2;
  *(_OWORD *)(v3 + 6108) = 0u;
  *(_OWORD *)(v3 + 6124) = 0u;
  *(_OWORD *)(v3 + 6140) = 0u;
  *(_OWORD *)(v3 + 6156) = 0u;
  *(_OWORD *)(v3 + 6172) = 0u;
  *(_OWORD *)(v3 + 6188) = 0u;
  *(_OWORD *)(v3 + 6204) = 0u;
  *(_OWORD *)(v3 + 6220) = 0u;
  *(_OWORD *)(v3 + 6236) = 0u;
  *(_OWORD *)(v3 + 6252) = 0u;
  *(_OWORD *)(v3 + 6268) = 0u;
  *(_OWORD *)(v3 + 6284) = 0u;
  *(_OWORD *)(v3 + 6300) = 0u;
  *(_OWORD *)(v3 + 6316) = 0u;
  *(_OWORD *)(v3 + 6332) = 0u;
  *(_DWORD *)(v3 + 6396) = 0;
  *(_OWORD *)(v3 + 6092) = 0u;
  *(_OWORD *)(v3 + 6348) = 0u;
  *(_OWORD *)(v3 + 6364) = 0u;
  *(_OWORD *)(v3 + 6380) = 0u;
  *(_DWORD *)(v3 + 5767) = 0;
  *(_QWORD *)(v3 + 5760) = 0;
  *(_BYTE *)(v3 + 5771) = 2;
  *(_OWORD *)(v3 + 5788) = 0u;
  *(_OWORD *)(v3 + 5804) = 0u;
  *(_OWORD *)(v3 + 5820) = 0u;
  *(_OWORD *)(v3 + 5836) = 0u;
  *(_OWORD *)(v3 + 5852) = 0u;
  *(_OWORD *)(v3 + 5868) = 0u;
  *(_OWORD *)(v3 + 5884) = 0u;
  *(_OWORD *)(v3 + 5900) = 0u;
  *(_OWORD *)(v3 + 5916) = 0u;
  *(_OWORD *)(v3 + 5932) = 0u;
  *(_OWORD *)(v3 + 5948) = 0u;
  *(_OWORD *)(v3 + 5964) = 0u;
  *(_OWORD *)(v3 + 5980) = 0u;
  *(_OWORD *)(v3 + 5996) = 0u;
  *(_OWORD *)(v3 + 6012) = 0u;
  *(_DWORD *)(v3 + 6076) = 0;
  *(_OWORD *)(v3 + 5772) = 0u;
  *(_OWORD *)(v3 + 6028) = 0u;
  *(_OWORD *)(v3 + 6044) = 0u;
  *(_OWORD *)(v3 + 6060) = 0u;
  *(_DWORD *)(v3 + 5447) = 0;
  *(_QWORD *)(v3 + 5440) = 0;
  *(_BYTE *)(v3 + 5451) = 2;
  *(_OWORD *)(v3 + 5468) = 0u;
  *(_OWORD *)(v3 + 5484) = 0u;
  *(_OWORD *)(v3 + 5500) = 0u;
  *(_OWORD *)(v3 + 5516) = 0u;
  *(_OWORD *)(v3 + 5532) = 0u;
  *(_OWORD *)(v3 + 5548) = 0u;
  *(_OWORD *)(v3 + 5564) = 0u;
  *(_OWORD *)(v3 + 5580) = 0u;
  *(_OWORD *)(v3 + 5596) = 0u;
  *(_OWORD *)(v3 + 5612) = 0u;
  *(_OWORD *)(v3 + 5628) = 0u;
  *(_OWORD *)(v3 + 5644) = 0u;
  *(_OWORD *)(v3 + 5660) = 0u;
  *(_OWORD *)(v3 + 5676) = 0u;
  *(_OWORD *)(v3 + 5692) = 0u;
  *(_DWORD *)(v3 + 5756) = 0;
  *(_OWORD *)(v3 + 5452) = 0u;
  *(_OWORD *)(v3 + 5708) = 0u;
  *(_OWORD *)(v3 + 5724) = 0u;
  *(_OWORD *)(v3 + 5740) = 0u;
  *(_DWORD *)(v3 + 5127) = 0;
  *(_QWORD *)(v3 + 5120) = 0;
  *(_BYTE *)(v3 + 5131) = 2;
  *(_OWORD *)(v3 + 5148) = 0u;
  *(_OWORD *)(v3 + 5164) = 0u;
  *(_OWORD *)(v3 + 5180) = 0u;
  *(_OWORD *)(v3 + 5196) = 0u;
  *(_OWORD *)(v3 + 5212) = 0u;
  *(_OWORD *)(v3 + 5228) = 0u;
  *(_OWORD *)(v3 + 5244) = 0u;
  *(_OWORD *)(v3 + 5260) = 0u;
  *(_OWORD *)(v3 + 5276) = 0u;
  *(_OWORD *)(v3 + 5292) = 0u;
  *(_OWORD *)(v3 + 5308) = 0u;
  *(_OWORD *)(v3 + 5324) = 0u;
  *(_OWORD *)(v3 + 5340) = 0u;
  *(_OWORD *)(v3 + 5356) = 0u;
  *(_OWORD *)(v3 + 5372) = 0u;
  *(_DWORD *)(v3 + 5436) = 0;
  *(_OWORD *)(v3 + 5132) = 0u;
  *(_OWORD *)(v3 + 5388) = 0u;
  *(_OWORD *)(v3 + 5404) = 0u;
  *(_OWORD *)(v3 + 5420) = 0u;
  *(_DWORD *)(v3 + 4807) = 0;
  *(_QWORD *)(v3 + 4800) = 0;
  *(_BYTE *)(v3 + 4811) = 2;
  *(_OWORD *)(v3 + 4828) = 0u;
  *(_OWORD *)(v3 + 4844) = 0u;
  *(_OWORD *)(v3 + 4860) = 0u;
  *(_OWORD *)(v3 + 4876) = 0u;
  *(_OWORD *)(v3 + 4892) = 0u;
  *(_OWORD *)(v3 + 4908) = 0u;
  *(_OWORD *)(v3 + 4924) = 0u;
  *(_OWORD *)(v3 + 4940) = 0u;
  *(_OWORD *)(v3 + 4956) = 0u;
  *(_OWORD *)(v3 + 4972) = 0u;
  *(_OWORD *)(v3 + 4988) = 0u;
  *(_OWORD *)(v3 + 5004) = 0u;
  *(_OWORD *)(v3 + 5020) = 0u;
  *(_OWORD *)(v3 + 5036) = 0u;
  *(_OWORD *)(v3 + 5052) = 0u;
  *(_DWORD *)(v3 + 5116) = 0;
  *(_OWORD *)(v3 + 4812) = 0u;
  *(_OWORD *)(v3 + 5068) = 0u;
  *(_OWORD *)(v3 + 5084) = 0u;
  *(_OWORD *)(v3 + 5100) = 0u;
  *(_DWORD *)(v3 + 4487) = 0;
  *(_QWORD *)(v3 + 4480) = 0;
  *(_BYTE *)(v3 + 4491) = 2;
  *(_OWORD *)(v3 + 4508) = 0u;
  *(_OWORD *)(v3 + 4524) = 0u;
  *(_OWORD *)(v3 + 4540) = 0u;
  *(_OWORD *)(v3 + 4556) = 0u;
  *(_OWORD *)(v3 + 4572) = 0u;
  *(_OWORD *)(v3 + 4588) = 0u;
  *(_OWORD *)(v3 + 4604) = 0u;
  *(_OWORD *)(v3 + 4620) = 0u;
  *(_OWORD *)(v3 + 4636) = 0u;
  *(_OWORD *)(v3 + 4652) = 0u;
  *(_OWORD *)(v3 + 4668) = 0u;
  *(_OWORD *)(v3 + 4684) = 0u;
  *(_OWORD *)(v3 + 4700) = 0u;
  *(_OWORD *)(v3 + 4716) = 0u;
  *(_OWORD *)(v3 + 4732) = 0u;
  *(_DWORD *)(v3 + 4796) = 0;
  *(_OWORD *)(v3 + 4492) = 0u;
  *(_OWORD *)(v3 + 4748) = 0u;
  *(_OWORD *)(v3 + 4764) = 0u;
  *(_OWORD *)(v3 + 4780) = 0u;
  *(_DWORD *)(v3 + 4167) = 0;
  *(_QWORD *)(v3 + 4160) = 0;
  *(_BYTE *)(v3 + 4171) = 2;
  *(_OWORD *)(v3 + 4188) = 0u;
  *(_OWORD *)(v3 + 4204) = 0u;
  *(_OWORD *)(v3 + 4220) = 0u;
  *(_OWORD *)(v3 + 4236) = 0u;
  *(_OWORD *)(v3 + 4252) = 0u;
  *(_OWORD *)(v3 + 4268) = 0u;
  *(_OWORD *)(v3 + 4284) = 0u;
  *(_OWORD *)(v3 + 4300) = 0u;
  *(_OWORD *)(v3 + 4316) = 0u;
  *(_OWORD *)(v3 + 4332) = 0u;
  *(_OWORD *)(v3 + 4348) = 0u;
  *(_OWORD *)(v3 + 4364) = 0u;
  *(_OWORD *)(v3 + 4380) = 0u;
  *(_OWORD *)(v3 + 4396) = 0u;
  *(_OWORD *)(v3 + 4412) = 0u;
  *(_DWORD *)(v3 + 4476) = 0;
  *(_OWORD *)(v3 + 4172) = 0u;
  *(_OWORD *)(v3 + 4428) = 0u;
  *(_OWORD *)(v3 + 4444) = 0u;
  *(_OWORD *)(v3 + 4460) = 0u;
  *(_DWORD *)(v3 + 3847) = 0;
  *(_QWORD *)(v3 + 3840) = 0;
  *(_BYTE *)(v3 + 3851) = 2;
  *(_OWORD *)(v3 + 3868) = 0u;
  *(_OWORD *)(v3 + 3884) = 0u;
  *(_OWORD *)(v3 + 3900) = 0u;
  *(_OWORD *)(v3 + 3916) = 0u;
  *(_OWORD *)(v3 + 3932) = 0u;
  *(_OWORD *)(v3 + 3948) = 0u;
  *(_OWORD *)(v3 + 3964) = 0u;
  *(_OWORD *)(v3 + 3980) = 0u;
  *(_OWORD *)(v3 + 3996) = 0u;
  *(_OWORD *)(v3 + 4012) = 0u;
  *(_OWORD *)(v3 + 4028) = 0u;
  *(_OWORD *)(v3 + 4044) = 0u;
  *(_OWORD *)(v3 + 4060) = 0u;
  *(_OWORD *)(v3 + 4076) = 0u;
  *(_OWORD *)(v3 + 4092) = 0u;
  *(_DWORD *)(v3 + 4156) = 0;
  *(_OWORD *)(v3 + 3852) = 0u;
  *(_OWORD *)(v3 + 4108) = 0u;
  *(_OWORD *)(v3 + 4124) = 0u;
  *(_OWORD *)(v3 + 4140) = 0u;
  *(_DWORD *)(v3 + 3527) = 0;
  *(_QWORD *)(v3 + 3520) = 0;
  *(_BYTE *)(v3 + 3531) = 2;
  *(_OWORD *)(v3 + 3548) = 0u;
  *(_OWORD *)(v3 + 3564) = 0u;
  *(_OWORD *)(v3 + 3580) = 0u;
  *(_OWORD *)(v3 + 3596) = 0u;
  *(_OWORD *)(v3 + 3612) = 0u;
  *(_OWORD *)(v3 + 3628) = 0u;
  *(_OWORD *)(v3 + 3644) = 0u;
  *(_OWORD *)(v3 + 3660) = 0u;
  *(_OWORD *)(v3 + 3676) = 0u;
  *(_OWORD *)(v3 + 3692) = 0u;
  *(_OWORD *)(v3 + 3708) = 0u;
  *(_OWORD *)(v3 + 3724) = 0u;
  *(_OWORD *)(v3 + 3740) = 0u;
  *(_OWORD *)(v3 + 3756) = 0u;
  *(_OWORD *)(v3 + 3772) = 0u;
  *(_DWORD *)(v3 + 3836) = 0;
  *(_OWORD *)(v3 + 3532) = 0u;
  *(_OWORD *)(v3 + 3788) = 0u;
  *(_OWORD *)(v3 + 3804) = 0u;
  *(_OWORD *)(v3 + 3820) = 0u;
  *(_DWORD *)(v3 + 3207) = 0;
  *(_QWORD *)(v3 + 3200) = 0;
  *(_BYTE *)(v3 + 3211) = 2;
  *(_OWORD *)(v3 + 3228) = 0u;
  *(_OWORD *)(v3 + 3244) = 0u;
  *(_OWORD *)(v3 + 3260) = 0u;
  *(_OWORD *)(v3 + 3276) = 0u;
  *(_OWORD *)(v3 + 3292) = 0u;
  *(_OWORD *)(v3 + 3308) = 0u;
  *(_OWORD *)(v3 + 3324) = 0u;
  *(_OWORD *)(v3 + 3340) = 0u;
  *(_OWORD *)(v3 + 3356) = 0u;
  *(_OWORD *)(v3 + 3372) = 0u;
  *(_OWORD *)(v3 + 3388) = 0u;
  *(_OWORD *)(v3 + 3404) = 0u;
  *(_OWORD *)(v3 + 3420) = 0u;
  *(_OWORD *)(v3 + 3436) = 0u;
  *(_OWORD *)(v3 + 3452) = 0u;
  *(_OWORD *)(v3 + 3212) = 0u;
  *(_DWORD *)(v3 + 3516) = 0;
  *(_OWORD *)(v3 + 3468) = 0u;
  *(_OWORD *)(v3 + 3484) = 0u;
  *(_OWORD *)(v3 + 3500) = 0u;
  *(_DWORD *)(v3 + 2887) = 0;
  *(_QWORD *)(v3 + 2880) = 0;
  *(_BYTE *)(v3 + 2891) = 2;
  *(_OWORD *)(v3 + 2908) = 0u;
  *(_OWORD *)(v3 + 2924) = 0u;
  *(_OWORD *)(v3 + 2940) = 0u;
  *(_OWORD *)(v3 + 2956) = 0u;
  *(_OWORD *)(v3 + 2972) = 0u;
  *(_OWORD *)(v3 + 2988) = 0u;
  *(_OWORD *)(v3 + 3004) = 0u;
  *(_OWORD *)(v3 + 3020) = 0u;
  *(_OWORD *)(v3 + 3036) = 0u;
  *(_OWORD *)(v3 + 3052) = 0u;
  *(_OWORD *)(v3 + 3068) = 0u;
  *(_OWORD *)(v3 + 3084) = 0u;
  *(_OWORD *)(v3 + 3100) = 0u;
  *(_OWORD *)(v3 + 3116) = 0u;
  *(_OWORD *)(v3 + 3132) = 0u;
  *(_DWORD *)(v3 + 3196) = 0;
  *(_OWORD *)(v3 + 2892) = 0u;
  *(_OWORD *)(v3 + 3148) = 0u;
  *(_OWORD *)(v3 + 3164) = 0u;
  *(_OWORD *)(v3 + 3180) = 0u;
  *(_DWORD *)(v3 + 2567) = 0;
  *(_QWORD *)(v3 + 2560) = 0;
  *(_BYTE *)(v3 + 2571) = 2;
  *(_OWORD *)(v3 + 2588) = 0u;
  *(_OWORD *)(v3 + 2604) = 0u;
  *(_OWORD *)(v3 + 2620) = 0u;
  *(_OWORD *)(v3 + 2636) = 0u;
  *(_OWORD *)(v3 + 2652) = 0u;
  *(_OWORD *)(v3 + 2668) = 0u;
  *(_OWORD *)(v3 + 2684) = 0u;
  *(_OWORD *)(v3 + 2700) = 0u;
  *(_OWORD *)(v3 + 2716) = 0u;
  *(_OWORD *)(v3 + 2732) = 0u;
  *(_OWORD *)(v3 + 2748) = 0u;
  *(_OWORD *)(v3 + 2764) = 0u;
  *(_OWORD *)(v3 + 2780) = 0u;
  *(_OWORD *)(v3 + 2796) = 0u;
  *(_OWORD *)(v3 + 2812) = 0u;
  *(_DWORD *)(v3 + 2876) = 0;
  *(_OWORD *)(v3 + 2572) = 0u;
  *(_OWORD *)(v3 + 2828) = 0u;
  *(_OWORD *)(v3 + 2844) = 0u;
  *(_OWORD *)(v3 + 2860) = 0u;
  *(_DWORD *)(v3 + 2247) = 0;
  *(_QWORD *)(v3 + 2240) = 0;
  *(_BYTE *)(v3 + 2251) = 2;
  *(_OWORD *)(v3 + 2268) = 0u;
  *(_OWORD *)(v3 + 2284) = 0u;
  *(_OWORD *)(v3 + 2300) = 0u;
  *(_OWORD *)(v3 + 2316) = 0u;
  *(_OWORD *)(v3 + 2332) = 0u;
  *(_OWORD *)(v3 + 2348) = 0u;
  *(_OWORD *)(v3 + 2364) = 0u;
  *(_OWORD *)(v3 + 2380) = 0u;
  *(_OWORD *)(v3 + 2396) = 0u;
  *(_OWORD *)(v3 + 2412) = 0u;
  *(_OWORD *)(v3 + 2428) = 0u;
  *(_OWORD *)(v3 + 2444) = 0u;
  *(_OWORD *)(v3 + 2460) = 0u;
  *(_OWORD *)(v3 + 2476) = 0u;
  *(_OWORD *)(v3 + 2492) = 0u;
  *(_DWORD *)(v3 + 2556) = 0;
  *(_OWORD *)(v3 + 2252) = 0u;
  *(_OWORD *)(v3 + 2508) = 0u;
  *(_OWORD *)(v3 + 2524) = 0u;
  *(_OWORD *)(v3 + 2540) = 0u;
  *(_DWORD *)(v3 + 1927) = 0;
  *(_QWORD *)(v3 + 1920) = 0;
  *(_BYTE *)(v3 + 1931) = 2;
  *(_OWORD *)(v3 + 1948) = 0u;
  *(_OWORD *)(v3 + 1964) = 0u;
  *(_OWORD *)(v3 + 1980) = 0u;
  *(_OWORD *)(v3 + 1996) = 0u;
  *(_OWORD *)(v3 + 2012) = 0u;
  *(_OWORD *)(v3 + 2028) = 0u;
  *(_OWORD *)(v3 + 2044) = 0u;
  *(_OWORD *)(v3 + 2060) = 0u;
  *(_OWORD *)(v3 + 2076) = 0u;
  *(_OWORD *)(v3 + 2092) = 0u;
  *(_OWORD *)(v3 + 2108) = 0u;
  *(_OWORD *)(v3 + 2124) = 0u;
  *(_OWORD *)(v3 + 2140) = 0u;
  *(_OWORD *)(v3 + 2156) = 0u;
  *(_OWORD *)(v3 + 2172) = 0u;
  *(_DWORD *)(v3 + 2236) = 0;
  *(_OWORD *)(v3 + 1932) = 0u;
  *(_OWORD *)(v3 + 2188) = 0u;
  *(_OWORD *)(v3 + 2204) = 0u;
  *(_OWORD *)(v3 + 2220) = 0u;
  *(_DWORD *)(v3 + 1607) = 0;
  *(_QWORD *)(v3 + 1600) = 0;
  *(_BYTE *)(v3 + 1611) = 2;
  *(_OWORD *)(v3 + 1628) = 0u;
  *(_OWORD *)(v3 + 1644) = 0u;
  *(_OWORD *)(v3 + 1660) = 0u;
  *(_OWORD *)(v3 + 1676) = 0u;
  *(_OWORD *)(v3 + 1692) = 0u;
  *(_OWORD *)(v3 + 1708) = 0u;
  *(_OWORD *)(v3 + 1724) = 0u;
  *(_OWORD *)(v3 + 1740) = 0u;
  *(_OWORD *)(v3 + 1756) = 0u;
  *(_OWORD *)(v3 + 1772) = 0u;
  *(_OWORD *)(v3 + 1788) = 0u;
  *(_OWORD *)(v3 + 1804) = 0u;
  *(_OWORD *)(v3 + 1820) = 0u;
  *(_OWORD *)(v3 + 1836) = 0u;
  *(_OWORD *)(v3 + 1852) = 0u;
  *(_DWORD *)(v3 + 1916) = 0;
  *(_OWORD *)(v3 + 1612) = 0u;
  *(_OWORD *)(v3 + 1868) = 0u;
  *(_OWORD *)(v3 + 1884) = 0u;
  *(_OWORD *)(v3 + 1900) = 0u;
  *(_DWORD *)(v3 + 1287) = 0;
  *(_QWORD *)(v3 + 1280) = 0;
  *(_BYTE *)(v3 + 1291) = 2;
  *(_OWORD *)(v3 + 1308) = 0u;
  *(_OWORD *)(v3 + 1324) = 0u;
  *(_OWORD *)(v3 + 1340) = 0u;
  *(_OWORD *)(v3 + 1356) = 0u;
  *(_OWORD *)(v3 + 1372) = 0u;
  *(_OWORD *)(v3 + 1388) = 0u;
  *(_OWORD *)(v3 + 1404) = 0u;
  *(_OWORD *)(v3 + 1420) = 0u;
  *(_OWORD *)(v3 + 1436) = 0u;
  *(_OWORD *)(v3 + 1452) = 0u;
  *(_OWORD *)(v3 + 1468) = 0u;
  *(_OWORD *)(v3 + 1484) = 0u;
  *(_OWORD *)(v3 + 1500) = 0u;
  *(_OWORD *)(v3 + 1516) = 0u;
  *(_OWORD *)(v3 + 1532) = 0u;
  *(_OWORD *)(v3 + 1292) = 0u;
  *(_DWORD *)(v3 + 1596) = 0;
  *(_OWORD *)(v3 + 1548) = 0u;
  *(_OWORD *)(v3 + 1564) = 0u;
  *(_OWORD *)(v3 + 1580) = 0u;
  *(_DWORD *)(v3 + 967) = 0;
  *(_QWORD *)(v3 + 960) = 0;
  *(_BYTE *)(v3 + 971) = 2;
  *(_OWORD *)(v3 + 988) = 0u;
  *(_OWORD *)(v3 + 1004) = 0u;
  *(_OWORD *)(v3 + 1020) = 0u;
  *(_OWORD *)(v3 + 1036) = 0u;
  *(_OWORD *)(v3 + 1052) = 0u;
  *(_OWORD *)(v3 + 1068) = 0u;
  *(_OWORD *)(v3 + 1084) = 0u;
  *(_OWORD *)(v3 + 1100) = 0u;
  *(_OWORD *)(v3 + 1116) = 0u;
  *(_OWORD *)(v3 + 1132) = 0u;
  *(_OWORD *)(v3 + 1148) = 0u;
  *(_OWORD *)(v3 + 1164) = 0u;
  *(_OWORD *)(v3 + 1180) = 0u;
  *(_OWORD *)(v3 + 1196) = 0u;
  *(_OWORD *)(v3 + 1212) = 0u;
  *(_DWORD *)(v3 + 1276) = 0;
  *(_OWORD *)(v3 + 972) = 0u;
  *(_OWORD *)(v3 + 1228) = 0u;
  *(_OWORD *)(v3 + 1244) = 0u;
  *(_OWORD *)(v3 + 1260) = 0u;
  *(_DWORD *)(v3 + 647) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  *(_BYTE *)(v3 + 651) = 2;
  *(_OWORD *)(v3 + 668) = 0u;
  *(_OWORD *)(v3 + 684) = 0u;
  *(_OWORD *)(v3 + 700) = 0u;
  *(_OWORD *)(v3 + 716) = 0u;
  *(_OWORD *)(v3 + 732) = 0u;
  *(_OWORD *)(v3 + 748) = 0u;
  *(_OWORD *)(v3 + 764) = 0u;
  *(_OWORD *)(v3 + 780) = 0u;
  *(_OWORD *)(v3 + 796) = 0u;
  *(_OWORD *)(v3 + 812) = 0u;
  *(_OWORD *)(v3 + 828) = 0u;
  *(_OWORD *)(v3 + 844) = 0u;
  *(_OWORD *)(v3 + 860) = 0u;
  *(_OWORD *)(v3 + 876) = 0u;
  *(_OWORD *)(v3 + 892) = 0u;
  *(_DWORD *)(v3 + 956) = 0;
  *(_OWORD *)(v3 + 652) = 0u;
  *(_OWORD *)(v3 + 908) = 0u;
  *(_OWORD *)(v3 + 924) = 0u;
  *(_OWORD *)(v3 + 940) = 0u;
  *(_DWORD *)(v3 + 327) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_BYTE *)(v3 + 331) = 2;
  *(_OWORD *)(v3 + 348) = 0u;
  *(_OWORD *)(v3 + 364) = 0u;
  *(_OWORD *)(v3 + 380) = 0u;
  *(_OWORD *)(v3 + 396) = 0u;
  *(_OWORD *)(v3 + 412) = 0u;
  *(_OWORD *)(v3 + 428) = 0u;
  *(_OWORD *)(v3 + 444) = 0u;
  *(_OWORD *)(v3 + 460) = 0u;
  *(_OWORD *)(v3 + 476) = 0u;
  *(_OWORD *)(v3 + 492) = 0u;
  *(_OWORD *)(v3 + 508) = 0u;
  *(_OWORD *)(v3 + 524) = 0u;
  *(_OWORD *)(v3 + 540) = 0u;
  *(_OWORD *)(v3 + 556) = 0u;
  *(_OWORD *)(v3 + 572) = 0u;
  *(_DWORD *)(v3 + 636) = 0;
  *(_OWORD *)(v3 + 332) = 0u;
  *(_OWORD *)(v3 + 588) = 0u;
  *(_OWORD *)(v3 + 604) = 0u;
  *(_OWORD *)(v3 + 620) = 0u;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 11) = 2;
  *(_OWORD *)(v3 + 28) = 0u;
  *(_OWORD *)(v3 + 44) = 0u;
  *(_OWORD *)(v3 + 60) = 0u;
  *(_OWORD *)(v3 + 76) = 0u;
  *(_OWORD *)(v3 + 92) = 0u;
  *(_OWORD *)(v3 + 108) = 0u;
  *(_OWORD *)(v3 + 124) = 0u;
  *(_OWORD *)(v3 + 140) = 0u;
  *(_OWORD *)(v3 + 156) = 0u;
  *(_OWORD *)(v3 + 172) = 0u;
  *(_OWORD *)(v3 + 188) = 0u;
  *(_OWORD *)(v3 + 204) = 0u;
  *(_OWORD *)(v3 + 220) = 0u;
  *(_OWORD *)(v3 + 236) = 0u;
  *(_OWORD *)(v3 + 252) = 0u;
  *(_DWORD *)(v3 + 316) = 0;
  *(_OWORD *)(v3 + 12) = 0u;
  *(_OWORD *)(v3 + 268) = 0u;
  *(_OWORD *)(v3 + 284) = 0u;
  *(_OWORD *)(v3 + 300) = 0u;
  __dmb(0xAu);
  pas_baseline_allocator_table = v3;
  v4 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v5 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v5 != v4)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
}

uint64_t pas_basic_heap_config_enumerator_data_add_page_header_table(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  int8x8_t v11;
  int8x8_t *v12;
  int8x8_t v13;
  int8x8_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int32x2_t v35;
  int32x2_t v36;
  unsigned __int32 v37;
  int v38;
  int8x8_t *v39;
  int8x8_t v40;
  int8x8_t v41;
  BOOL v42;
  int8x8_t *v44;
  unsigned __int32 v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;

  if (!a3)
    return 0;
  v5 = *(_QWORD *)(a3 + 8);
  if (!v5)
    return 1;
  v7 = *(_QWORD *)(a2 + 40);
  if (v7 > v5 || v5 >= *(_QWORD *)(a2 + 56) + v7)
  {
    result = (*(uint64_t (**)(uint64_t))(a2 + 96))(a2);
  }
  else
  {
    if (v5 < 8)
      goto LABEL_11;
    result = v5 - v7 + *(_QWORD *)(a2 + 48);
  }
  if (!result)
    return result;
  v5 = *(_QWORD *)(a3 + 8);
  v7 = *(_QWORD *)(a2 + 40);
LABEL_11:
  if (v7 > v5 || v5 >= *(_QWORD *)(a2 + 56) + v7)
  {
    v5 = (*(uint64_t (**)(uint64_t))(a2 + 96))(a2);
  }
  else if (v5 >= 8)
  {
    v5 = v5 - v7 + *(_QWORD *)(a2 + 48);
  }
  if (v5)
  {
    v9 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v9)
    {
      v10 = v5 + 32;
      v11 = (int8x8_t)vdup_n_s32(0xDEADBEEF);
      while (1)
      {
        --v9;
        v12 = (int8x8_t *)(v10 + 16 * v9);
        v13 = *v12;
        if (*v12 != -1)
          break;
LABEL_21:
        if (!v9)
          return 1;
      }
      v14 = v12[1];
      v15 = *((_DWORD *)a1 + 4);
      v16 = *((_DWORD *)a1 + 2);
      if (v16 > 2 * (*((_DWORD *)a1 + 5) + v15))
      {
LABEL_50:
        v35 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v13, 4uLL), v13);
        v36 = vadd_s32((int32x2_t)veor_s8((int8x8_t)v35, v11), vshl_n_s32(v35, 5uLL));
        v37 = v36.i32[0] ^ ((v36.i32[1] ^ v36.i32[0]) >> 11) ^ v36.i32[1];
        v38 = *((_DWORD *)a1 + 3);
        v39 = (int8x8_t *)(*a1 + 16 * (v38 & v37));
        v40 = *v39;
        v41 = v39[1];
        v42 = *v39 == -1;
        if (*v39 != -1 || *(_QWORD *)&v41 != 0)
        {
          v44 = 0;
          v45 = v37 + 1;
          do
          {
            if (v42 && *(_QWORD *)&v41 == 1)
            {
              if (!v44)
                v44 = v39;
            }
            else if (*(_QWORD *)&v40 == *(_QWORD *)&v13)
            {
              goto LABEL_20;
            }
            v39 = (int8x8_t *)(*a1 + 16 * (v45 & v38));
            v40 = *v39;
            v41 = v39[1];
            v42 = *v39 == -1;
            ++v45;
          }
          while (*v39 != -1 || *(_QWORD *)&v41 != 0);
          if (v44)
          {
            --*((_DWORD *)a1 + 5);
            v39 = v44;
          }
        }
        ++*((_DWORD *)a1 + 4);
LABEL_20:
        *v39 = v13;
        v39[1] = v14;
        goto LABEL_21;
      }
      if (6 * v15 >= 2 * v16)
        v17 = 2 * v16;
      else
        v17 = *((_DWORD *)a1 + 2);
      if (v16)
        v18 = v17;
      else
        v18 = 16;
      v19 = v18 - 1;
      v20 = (*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(a2 + 8))(16 * v18, "pas_ptr_hash_map/table", 0, *(_QWORD *)(a2 + 24));
      if ((_DWORD)v18)
      {
        if (v18 < 0x24
          || ((v21 = v20 + 16 * (v18 - 1), v20 <= v21) ? (v22 = v20 + 8 > v21 + 8) : (v22 = 1), v22))
        {
          v47 = v18;
        }
        else
        {
          v47 = v18 & 3;
          v48 = v20 - 24;
          v49 = v18 + 4294967293;
          v50 = v18 & 0xFFFFFFFC;
          do
          {
            v51 = v48 + 16 * (v49 + 2);
            *(_OWORD *)(v51 + 24) = xmmword_199154590;
            *(_OWORD *)(v51 + 8) = xmmword_199154590;
            v52 = v48 + 16 * v49;
            *(_OWORD *)(v52 + 24) = xmmword_199154590;
            *(_OWORD *)(v52 + 8) = xmmword_199154590;
            v49 -= 4;
            v50 -= 4;
          }
          while (v50);
          if ((v18 & 0xFFFFFFFC) == v18)
            goto LABEL_40;
        }
        v23 = v47 - 1;
        do
          *(_OWORD *)(v20 + 16 * v23) = xmmword_199154590;
        while ((unint64_t)v23--);
      }
LABEL_40:
      v25 = *a1;
      v26 = *((unsigned int *)a1 + 2);
      if ((_DWORD)v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v28 = (unint64_t *)(v25 + 16 * i);
          v29 = *v28;
          if (*v28 != -1)
          {
            v30 = (v29 ^ (v29 >> 4) ^ 0xDEADBEEF) + 32 * (v29 ^ (v29 >> 4));
            v31 = ((v29 >> 36) ^ HIDWORD(v29) ^ 0xDEADBEEF) + 32 * ((v29 >> 36) ^ HIDWORD(v29));
            v32 = v30 ^ ((v31 ^ v30) >> 11) ^ v31;
            do
              v33 = v32++ & v19;
            while (*(_QWORD *)(v20 + 16 * v33) != -1);
            *(_OWORD *)(v20 + 16 * v33) = *(_OWORD *)v28;
          }
        }
        v34 = 16 * v26;
      }
      else
      {
        v34 = 0;
      }
      *a1 = v20;
      *((_DWORD *)a1 + 2) = v18;
      *((_DWORD *)a1 + 3) = v19;
      *((_DWORD *)a1 + 5) = 0;
      (*(void (**)(unint64_t, uint64_t, _QWORD, _QWORD))(a2 + 16))(v25, v34, 0, *(_QWORD *)(a2 + 24));
      goto LABEL_50;
    }
    return 1;
  }
  return 0;
}

uint64_t pas_bitfit_allocator_commit_view(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *p_os_unfair_lock_opaque;
  unint64_t StatusReg;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  _BOOL4 v25;
  BOOL v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v35;
  unsigned int *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  os_unfair_lock_t v43;
  unsigned int v44;
  os_unfair_lock_s *v46;
  unsigned int v47;
  unsigned int v49;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  os_unfair_lock_t v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  os_unfair_lock_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v77;
  int v78;
  unsigned int v79;
  os_unfair_lock_t lock;
  os_unfair_lock_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;

  v6 = LOWORD(a1[2]._os_unfair_lock_opaque) | ((unint64_t)BYTE2(a1[2]._os_unfair_lock_opaque) << 16);
  if ((_DWORD)v6)
    v7 = pas_compact_heap_reservation_base + 8 * v6;
  else
    v7 = 0;
  v8 = *(_QWORD *)(v7 + 48);
  if (a3)
    goto LABEL_61;
  p_os_unfair_lock_opaque = &a1[4]._os_unfair_lock_opaque;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v12 = __ldxr(p_os_unfair_lock_opaque);
    if (v12 != v11)
      break;
    if (!__stlxr(0, p_os_unfair_lock_opaque))
    {
      if (!pas_physical_page_sharing_pool_balancing_enabled)
        goto LABEL_56;
      goto LABEL_11;
    }
  }
  __clrex();
  os_unfair_lock_unlock(a1 + 4);
  if (!pas_physical_page_sharing_pool_balancing_enabled)
    goto LABEL_56;
LABEL_11:
  v13 = *(_QWORD *)(a2 + 32);
  if (!*(_DWORD *)(a2 + 24) && *(_DWORD *)(a2 + 100) == 1)
  {
    if (!pas_physical_page_sharing_pool_balancing_enabled_for_utility)
      goto LABEL_56;
    while (1)
    {
      v14 = pas_physical_page_sharing_pool_balance;
      v15 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v15 != v14)
        break;
      if (__stlxr(pas_physical_page_sharing_pool_balance - v13, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_18;
      }
      v16 = 1;
LABEL_19:
      __dmb(0xBu);
      if (v16)
        goto LABEL_56;
    }
    __clrex();
LABEL_18:
    v16 = 0;
    goto LABEL_19;
  }
  do
  {
    while (1)
    {
      v19 = pas_physical_page_sharing_pool_balance;
      if (pas_physical_page_sharing_pool_balance < 0 || pas_physical_page_sharing_pool_balance < v13)
        break;
      v20 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v20 != pas_physical_page_sharing_pool_balance)
      {
        __clrex();
LABEL_34:
        v21 = 0;
        goto LABEL_35;
      }
      if (__stlxr(pas_physical_page_sharing_pool_balance - v13, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_34;
      }
      v21 = 1;
LABEL_35:
      __dmb(0xBu);
      if (v21)
        goto LABEL_56;
    }
    v17 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
    if (v17 == pas_physical_page_sharing_pool_balance)
    {
      if (!__stlxr(0, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        v18 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      __clrex();
    }
    v18 = 0;
LABEL_27:
    __dmb(0xBu);
  }
  while (!v18);
  v22 = v13 - v19;
  if (v13 != v19)
  {
    bzero(&lock, 0x440uLL);
    while (1)
    {
      v23 = v85;
      if (v85 >= v22)
        break;
      v24 = pas_page_sharing_pool_take_least_recently_used((uint64_t)pas_physical_page_sharing_pool, &lock, 0, 0);
      if (v24 != 3)
      {
        v23 = v85;
        v25 = v24 != 2;
        goto LABEL_43;
      }
    }
    v25 = 1;
LABEL_43:
    v26 = v23 >= v22;
    v27 = v23 - v22;
    v28 = !v26;
    if ((v25 & v28) != 0)
      v29 = 0;
    else
      v29 = v27;
    decommit_all((uint64_t)&lock, 1);
    pas_bootstrap_free_heap_hold_lock_and_deallocate_for_config(v83, 32 * v84, 0);
    while (2)
    {
      v30 = pas_physical_page_sharing_pool_balance;
      v31 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v31 == v30)
      {
        if (!__stlxr(pas_physical_page_sharing_pool_balance + v29, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        {
          v32 = 1;
          goto LABEL_55;
        }
      }
      else
      {
        __clrex();
      }
      v32 = 0;
LABEL_55:
      __dmb(0xBu);
      if (v32)
        break;
      continue;
    }
  }
LABEL_56:
  v33 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(p_os_unfair_lock_opaque))
  {
    if (!__stxr(v33, p_os_unfair_lock_opaque))
      goto LABEL_61;
  }
  __clrex();
  os_unfair_lock_lock(a1 + 4);
LABEL_61:
  v35 = &a1[4]._os_unfair_lock_opaque;
  v36 = &a1[5]._os_unfair_lock_opaque;
  v37 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    while (1)
    {
LABEL_62:
      if (HIBYTE(a1[2]._os_unfair_lock_opaque))
        goto LABEL_159;
      v38 = *(_QWORD *)&a1->_os_unfair_lock_opaque;
      v39 = *(_DWORD *)(v37 + 24);
      while (1)
      {
        v40 = __ldxr(v35);
        if (v40 != v39)
          break;
        if (!__stlxr(0, v35))
          goto LABEL_68;
      }
      __clrex();
      os_unfair_lock_unlock(a1 + 4);
LABEL_68:
      if (v38)
        break;
      v43 = 0;
      lock = 0;
      v82 = 0;
      while (1)
      {
        if (v43)
        {
          v44 = *(_DWORD *)(v37 + 24);
          while (!__ldaxr(&v43->_os_unfair_lock_opaque))
          {
            if (!__stxr(v44, &v43->_os_unfair_lock_opaque))
              goto LABEL_83;
          }
          __clrex();
          os_unfair_lock_lock(v43);
LABEL_83:
          v46 = lock;
          lock = 0;
          v82 = v46;
        }
        v47 = *(_DWORD *)(v37 + 24);
        while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
        {
          if (!__stxr(v47, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_89;
        }
        __clrex();
        os_unfair_lock_lock(&pas_heap_lock);
LABEL_89:
        v49 = *(_DWORD *)(v37 + 24);
        while (!__ldaxr(v35))
        {
          if (!__stxr(v49, v35))
            goto LABEL_94;
        }
        __clrex();
        os_unfair_lock_lock(a1 + 4);
LABEL_94:
        if (*(_QWORD *)&a1->_os_unfair_lock_opaque)
          break;
        v51 = (*(uint64_t (**)(uint64_t, os_unfair_lock_t *))(a2 + 120))(v8, &lock);
        v52 = v51;
        *(_QWORD *)&a1->_os_unfair_lock_opaque = v51;
        if (v51)
        {
          v53 = *(_DWORD *)(a2 + 96);
          if (v53 >= 3)
            v54 = 1;
          else
            v54 = v53 + 5;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 80))(v51, v54, 1);
        }
        v55 = *(_DWORD *)(v37 + 24);
        while (1)
        {
          v56 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v56 != v55)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_105;
        }
        __clrex();
        os_unfair_lock_unlock(&pas_heap_lock);
LABEL_105:
        v57 = v82;
        if (v82)
        {
          v58 = *(_DWORD *)(v37 + 24);
          while (1)
          {
            v59 = __ldxr(&v57->_os_unfair_lock_opaque);
            if (v59 != v58)
              break;
            if (!__stlxr(0, &v57->_os_unfair_lock_opaque))
              goto LABEL_111;
          }
          __clrex();
          os_unfair_lock_unlock(v57);
LABEL_111:
          v82 = 0;
        }
        if (!lock)
        {
          if (v52)
          {
            HIBYTE(a1[2]._os_unfair_lock_opaque) = 1;
            v64 = (*(uint64_t (**)(_QWORD))(a2 + 56))(*(_QWORD *)&a1->_os_unfair_lock_opaque);
            pas_bitfit_page_construct(v64, a1, a2);
            v65 = 1;
          }
          else
          {
            v65 = 0;
          }
          return v65 & 1;
        }
        v60 = *(_DWORD *)(v37 + 24);
        while (1)
        {
          v61 = __ldxr(v35);
          if (v61 != v60)
            break;
          if (!__stlxr(0, v35))
            goto LABEL_76;
        }
        __clrex();
        os_unfair_lock_unlock(a1 + 4);
LABEL_76:
        v43 = lock;
      }
      v62 = *(_DWORD *)(v37 + 24);
      while (1)
      {
        v63 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v63 != v62)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_138;
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
LABEL_138:
      v70 = v82;
      if (v82)
      {
        v71 = *(_DWORD *)(v37 + 24);
        while (1)
        {
          v72 = __ldxr(&v70->_os_unfair_lock_opaque);
          if (v72 != v71)
            break;
          if (!__stlxr(0, &v70->_os_unfair_lock_opaque))
            goto LABEL_62;
        }
        __clrex();
        os_unfair_lock_unlock(v70);
      }
    }
    if (!a3)
    {
      v41 = *(_DWORD *)(v37 + 24);
      while (!__ldaxr(v36))
      {
        if (!__stxr(v41, v36))
          goto LABEL_124;
      }
      __clrex();
      os_unfair_lock_lock(a1 + 5);
    }
LABEL_124:
    if (!HIBYTE(a1[2]._os_unfair_lock_opaque))
      break;
    if (!a3)
    {
      v66 = *(_DWORD *)(v37 + 24);
      while (1)
      {
        v67 = __ldxr(v36);
        if (v67 != v66)
          break;
        if (!__stlxr(0, v36))
          goto LABEL_131;
      }
      __clrex();
      os_unfair_lock_unlock(a1 + 5);
    }
LABEL_131:
    v68 = *(_DWORD *)(v37 + 24);
    while (!__ldaxr(v35))
    {
      if (!__stxr(v68, v35))
        goto LABEL_62;
    }
    __clrex();
    os_unfair_lock_lock(a1 + 4);
  }
  v73 = *(_DWORD *)(a2 + 96);
  if (v73 >= 3)
    v74 = 1;
  else
    v74 = v73 + 5;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(a2 + 80))(*(_QWORD *)&a1->_os_unfair_lock_opaque, v74, 0);
  v75 = *(_DWORD *)(v37 + 24);
  while (!__ldaxr(v35))
  {
    if (!__stxr(v75, v35))
      goto LABEL_153;
  }
  __clrex();
  os_unfair_lock_lock(a1 + 4);
LABEL_153:
  v65 = 1;
  HIBYTE(a1[2]._os_unfair_lock_opaque) = 1;
  v77 = (*(uint64_t (**)(_QWORD))(a2 + 56))(*(_QWORD *)&a1->_os_unfair_lock_opaque);
  pas_bitfit_page_construct(v77, a1, a2);
  if (!a3)
  {
    v78 = *(_DWORD *)(v37 + 24);
    while (1)
    {
      v79 = __ldxr(v36);
      if (v79 != v78)
        break;
      if (!__stlxr(0, v36))
        return v65 & 1;
    }
    __clrex();
    os_unfair_lock_unlock(a1 + 5);
LABEL_159:
    v65 = 1;
  }
  return v65 & 1;
}

unint64_t pas_bitfit_allocator_finish_failing(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int128 v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v31;
  unsigned int v32;

  v11 = (os_unfair_lock_s *)(a2 + 16);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a2 + 16));
  v13 = *a1;
  v12 = a1[1];
  v14 = (unsigned int *)(((8 * *(unsigned __int16 *)(*a1 + 24)) | ((unint64_t)*(unsigned __int8 *)(*a1 + 26) << 19))
                       + pas_compact_heap_reservation_base);
  v15 = *(unsigned int *)(a2 + 12);
  v16 = v12 == a2 || v12 == 0;
  if (v16 && *(unsigned int *)(v13 + 16) > a5)
  {
    a1[1] = 0;
    *(_BYTE *)((*(uint64_t (**)(_QWORD))(a6 + 56))(*(_QWORD *)a2) + 1) = 0;
    v17 = a5 >> *(_BYTE *)(a6 + 28);
    v18 = v14[17];
    v19 = v15 & 0x7F;
    if ((_DWORD)v18)
      v20 = pas_compact_heap_reservation_base + 8 * v18;
    else
      v20 = 0;
    v21 = *(unsigned int *)(v20 + ((v15 >> 5) & 0x7FFFFFC));
    if ((_DWORD)v21)
      v22 = pas_compact_heap_reservation_base + 8 * v21;
    else
      v22 = 0;
    if (*(unsigned __int8 *)(v22 + v19) == 255)
      pas_log("%p:%zu: found empty when setting max_free\n", v14, v15);
    *(_BYTE *)(v22 + v19) = v17;
    while (1)
    {
      v23 = *(unsigned int *)(v13 + 20);
      v13 = pas_compact_heap_reservation_base + 8 * v23;
      if (!(_DWORD)v23 || v13 == 0)
        break;
      if (*(unsigned int *)(v13 + 16) <= a5)
      {
        while (1)
        {
          if (*(_QWORD *)v13 <= v15)
          {
LABEL_22:
            v25 = *(unsigned int *)(v13 + 20);
            if (!(_DWORD)v25)
              goto LABEL_40;
            v13 = pas_compact_heap_reservation_base + 8 * v25;
            goto LABEL_24;
          }
          if (*(_QWORD *)(v13 + 8) != -1)
            break;
LABEL_24:
          if (!v13)
            goto LABEL_40;
        }
        v26 = __ldxp((unsigned __int128 *)v13);
        if (v26 == *(_OWORD *)v13)
        {
          if (!__stlxp(__PAIR128__((*(_QWORD *)(v13 + 8) & 1uLL) + *(_QWORD *)(v13 + 8), v15), (unsigned __int128 *)v13))
          {
            v27 = 1;
            goto LABEL_32;
          }
        }
        else
        {
          __clrex();
        }
        v27 = 0;
LABEL_32:
        __dmb(0xBu);
        if (v27)
          goto LABEL_22;
        goto LABEL_24;
      }
    }
LABEL_40:
    v31 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v32 = __ldxr(&v11->_os_unfair_lock_opaque);
      if (v32 != v31)
        break;
      if (!__stlxr(0, &v11->_os_unfair_lock_opaque))
        return 0;
    }
    __clrex();
    os_unfair_lock_unlock(v11);
    return 0;
  }
  else
  {
    v28 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v29 = __ldxr(&v11->_os_unfair_lock_opaque);
      if (v29 != v28)
        break;
      if (!__stlxr(0, &v11->_os_unfair_lock_opaque))
        return pas_bitfit_directory_get_first_free_view((uint64_t)v14, (int)v15 + 1, a3, a6);
    }
    __clrex();
    os_unfair_lock_unlock(v11);
    return pas_bitfit_directory_get_first_free_view((uint64_t)v14, (int)v15 + 1, a3, a6);
  }
}

unint64_t pas_bitfit_directory_get_first_free_view(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t StatusReg;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned __int128 *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unsigned __int128 v47;
  unsigned int v48;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int128 v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  unsigned int v76;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  unsigned int v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _OWORD *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  _OWORD *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  const void *v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  _QWORD *v142;
  void *__src;
  uint64_t v144;
  void *v145;
  unint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD *v152;
  unint64_t v153;
  _DWORD *v154;
  unsigned int *v155;
  unsigned int *v156;
  uint64_t v157;

  v5 = (unint64_t)a2 >> 7;
  v6 = a2 & 0x7F;
  v7 = a2 & 0xFFFFFF80;
  v8 = &unk_1ECF57000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_2:
  while (2)
  {
    v10 = *(unsigned int *)(a1 + 72);
    v11 = a1;
    v12 = (unsigned int *)(a1 + 68);
    v14 = (_DWORD *)(a1 + 72);
    v13 = v10;
    v15 = *(unsigned int *)(a1 + 68);
    v16 = v8[317];
    if ((_DWORD)v15)
      v17 = v16 + 8 * v15;
    else
      v17 = 0;
    v18 = v10 - v7;
    if (v10 > v7)
    {
      v19 = v7;
      v20 = v5;
      v21 = v6;
      do
      {
        v22 = v18 - 128;
        if (v18 >= 0x80)
          v18 = 128;
        v23 = *(unsigned int *)(v17 + 4 * v20);
        if ((_DWORD)v23)
          v24 = v16 + 8 * v23;
        else
          v24 = 0;
        v25 = v10 - v19;
        if (v10 - v19 >= 0x80)
          v25 = 128;
        if (v21 < v25)
        {
          do
          {
            v26 = *(unsigned __int8 *)(v24 + v21);
            if (v26 != 255 && a3 >> *(_BYTE *)(a4 + 28) <= v26)
            {
              v13 = v19 + v21;
              goto LABEL_76;
            }
            ++v21;
          }
          while (v18 != v21);
        }
        v21 = 0;
        ++v20;
        v19 += 128;
        v18 = v22;
      }
      while (v19 < v10);
    }
    v28 = (unsigned __int128 *)(a1 + 16);
    while (1)
    {
      v29 = *(_QWORD *)(a1 + 24);
      v30 = *(_QWORD *)v28;
      if ((v29 & 1) != 0)
        break;
      v31 = __ldxp(v28);
      if ((unint64_t)v31 ^ v30 | *((_QWORD *)&v31 + 1) ^ v29)
      {
        __clrex();
LABEL_30:
        v32 = 0;
        goto LABEL_31;
      }
      if (__stlxp(__PAIR128__(v29 + 1, v30), v28))
        goto LABEL_30;
      v32 = 1;
LABEL_31:
      __dmb(0xBu);
      if (v32)
      {
        ++v29;
        break;
      }
    }
    v33 = v30 >> 7;
    v34 = *v14;
    v35 = *v12;
    v36 = v8[317];
    v37 = v36 + 8 * v35;
    if (!(_DWORD)v35)
      v37 = 0;
    v38 = v33 << 7;
    v39 = v34 - (v33 << 7);
    if (v34 <= v33 << 7)
    {
LABEL_49:
      v45 = v10;
      if (v30 < v10 && v29 != -1)
      {
        while (1)
        {
          v47 = __ldxp(v28);
          if ((unint64_t)v47 ^ v30 | *((_QWORD *)&v47 + 1) ^ v29)
            break;
          if (!__stlxp(__PAIR128__(v29 + 2, v10), v28))
            goto LABEL_57;
        }
        __clrex();
LABEL_57:
        __dmb(0xBu);
      }
      v48 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v48, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_63;
      }
      __clrex();
      v147 = v10;
      v150 = a1;
      v152 = (_DWORD *)(a1 + 72);
      v155 = (unsigned int *)(a1 + 68);
      v50 = a1;
      v51 = StatusReg;
      v52 = v8;
      v53 = a4;
      v54 = a3;
      v55 = v7;
      v56 = v6;
      v57 = v5;
      os_unfair_lock_lock(&pas_heap_lock);
      v5 = v57;
      v6 = v56;
      v7 = v55;
      a3 = v54;
      a4 = v53;
      v8 = v52;
      StatusReg = v51;
      a1 = v50;
      v45 = v147;
      v11 = v150;
      v14 = v152;
      v12 = v155;
LABEL_63:
      if (v45 != *v14)
      {
        v58 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v59 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v59 != v58)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          {
            a1 = v11;
            goto LABEL_2;
          }
        }
        __clrex();
        v60 = v8;
        v61 = a4;
        v62 = a3;
        v63 = v5;
        os_unfair_lock_unlock(&pas_heap_lock);
        v5 = v63;
        a3 = v62;
        a4 = v61;
        v8 = v60;
        a1 = v11;
        continue;
      }
      v97 = *(_DWORD *)(a1 + 80);
      v98 = *(unsigned int *)(a1 + 84);
      v151 = (_DWORD *)(a1 + 84);
      v99 = (v98 + 7) >> 3;
      v100 = v98 >> 3;
      v101 = v8[317] + 8 * v97;
      if (!v97)
        v101 = 0;
      v102 = *(unsigned int *)(a1 + 88);
      v146 = StatusReg;
      if (v100 >= v102)
      {
        __src = (void *)v101;
        v144 = 2 * v102 + 2;
        v153 = v98 >> 3;
        v148 = *(_DWORD *)(a1 + 84);
        v98 = (v98 + 7) >> 3;
        v156 = v12;
        v103 = (char *)pas_immortal_heap_allocate_with_heap_lock_hold_mode(4 * v144, (uint64_t)"pas_bitfit_directory_view_vector/spine", 0, 1);
        memcpy(v103, __src, 4 * v98);
        bzero(&v103[4 * v98], 4 * (v144 - v98));
        v99 = v98;
        LOBYTE(v98) = v148;
        v100 = v153;
        v8 = &unk_1ECF57000;
        __dmb(0xBu);
        v104 = (unint64_t)&v103[-pas_compact_heap_reservation_base] >> 3;
        if (!v103)
          LODWORD(v104) = 0;
        *(_DWORD *)(a1 + 80) = v104;
        __dmb(0xBu);
        *(_DWORD *)(a1 + 88) = v144;
        v101 = (uint64_t)v103;
        v12 = v156;
      }
      if ((_DWORD)v100 == v99)
      {
        v105 = v101;
        v106 = v8;
        v107 = v100;
        v108 = (_OWORD *)pas_immortal_heap_allocate_with_alignment_and_heap_lock_hold_mode(0x20uLL, 4uLL, (uint64_t)"pas_bitfit_directory_view_vector/segment", 0, 1);
        v8 = v106;
        *v108 = 0u;
        v108[1] = 0u;
        __dmb(0xBu);
        v109 = ((unint64_t)v108 - v106[317]) >> 3;
        if (!v108)
          LODWORD(v109) = 0;
        *(_DWORD *)(v105 + 4 * v107) = v109;
      }
      else
      {
        LODWORD(v109) = *(_DWORD *)(v101 + 4 * v100);
      }
      if ((_DWORD)v109)
        v110 = v8[317] + 8 * v109;
      else
        v110 = 0;
      *(_DWORD *)(v110 + 4 * (v98 & 7)) = 0;
      __dmb(0xBu);
      ++*v151;
      v111 = *v14;
      v112 = (v111 + 127) >> 7;
      v113 = v111 >> 7;
      v114 = *v12;
      v115 = v8[317] + 8 * v114;
      if (!(_DWORD)v114)
        v115 = 0;
      if (v113 >= *(_DWORD *)(a1 + 76))
      {
        v149 = 2 * *(unsigned int *)(a1 + 76) + 2;
        v145 = (void *)v115;
        v154 = v14;
        v116 = v12;
        v117 = (char *)pas_immortal_heap_allocate_with_heap_lock_hold_mode(4 * v149, (uint64_t)"pas_bitfit_directory_max_free_vector/spine", 0, 1);
        memcpy(v117, v145, 4 * ((v111 + 127) >> 7));
        bzero(&v117[4 * ((v111 + 127) >> 7)], 4 * (v149 - v112));
        v113 = v111 >> 7;
        v8 = &unk_1ECF57000;
        __dmb(0xBu);
        v118 = (unint64_t)&v117[-pas_compact_heap_reservation_base] >> 3;
        if (!v117)
          LODWORD(v118) = 0;
        *v116 = v118;
        v14 = v154;
        __dmb(0xBu);
        *(_DWORD *)(a1 + 76) = v149;
        v115 = (uint64_t)v117;
      }
      if ((_DWORD)v113 == (_DWORD)v112)
      {
        v119 = v115;
        v120 = v8;
        v121 = v113;
        v122 = (_OWORD *)pas_immortal_heap_allocate_with_alignment_and_heap_lock_hold_mode(0x80uLL, 1uLL, (uint64_t)"pas_bitfit_directory_max_free_vector/segment", 0, 1);
        v8 = v120;
        *v122 = 0u;
        v122[1] = 0u;
        v122[2] = 0u;
        v122[3] = 0u;
        v122[4] = 0u;
        v122[5] = 0u;
        v122[6] = 0u;
        v122[7] = 0u;
        __dmb(0xBu);
        v123 = ((unint64_t)v122 - v120[317]) >> 3;
        if (!v122)
          LODWORD(v123) = 0;
        *(_DWORD *)(v119 + 4 * v121) = v123;
      }
      else
      {
        LODWORD(v123) = *(_DWORD *)(v115 + 4 * v113);
      }
      v124 = v146;
      if ((_DWORD)v123)
        v125 = v8[317] + 8 * v123;
      else
        v125 = 0;
      *(_BYTE *)(v125 + (v111 & 0x7F)) = -1;
      __dmb(0xBu);
      ++*v14;
      v126 = (_DWORD *)(a1 + 60);
      v127 = *(unsigned int *)(a1 + 60);
      if (*(_DWORD *)(a1 + 60) != (*v151 + 31) >> 5)
      {
        v128 = *(_DWORD *)(a1 + 56);
        v129 = (v127 + 3) >> 2;
        v130 = v127 >> 2;
        v131 = v8[317] + 8 * v128;
        if (v128)
          v132 = (const void *)v131;
        else
          v132 = 0;
        v133 = *(unsigned int *)(a1 + 64);
        if (v130 >= v133)
        {
          v157 = 2 * v133 + 2;
          v134 = (char *)pas_immortal_heap_allocate_with_heap_lock_hold_mode(4 * v157, (uint64_t)"pas_bitfit_directory_segmented_bitvectors/spine", 0, 1);
          memcpy(v134, v132, 4 * ((v127 + 3) >> 2));
          bzero(&v134[4 * ((v127 + 3) >> 2)], 4 * (v157 - ((v127 + 3) >> 2)));
          v129 = (v127 + 3) >> 2;
          v130 = v127 >> 2;
          v8 = &unk_1ECF57000;
          __dmb(0xBu);
          v135 = (unint64_t)&v134[-pas_compact_heap_reservation_base] >> 3;
          if (!v134)
            LODWORD(v135) = 0;
          *(_DWORD *)(a1 + 56) = v135;
          __dmb(0xBu);
          *(_DWORD *)(a1 + 64) = v157;
          v132 = v134;
          v124 = v146;
        }
        if ((_DWORD)v130 == v129)
        {
          v136 = v8;
          v137 = (_QWORD *)pas_immortal_heap_allocate_with_alignment_and_heap_lock_hold_mode(0x10uLL, 4uLL, (uint64_t)"pas_bitfit_directory_segmented_bitvectors/segment", 0, 1);
          v8 = v136;
          *v137 = 0;
          v137[1] = 0;
          __dmb(0xBu);
          v138 = ((unint64_t)v137 - v136[317]) >> 3;
          if (!v137)
            LODWORD(v138) = 0;
          *((_DWORD *)v132 + v130) = v138;
        }
        else
        {
          LODWORD(v138) = *((_DWORD *)v132 + v130);
        }
        if ((_DWORD)v138)
          v139 = v8[317] + 8 * v138;
        else
          v139 = 0;
        *(_DWORD *)(v139 + 4 * (v127 & 3)) = 0;
        __dmb(0xBu);
        ++*v126;
      }
      v140 = *(_DWORD *)(v124 + 24);
      while (1)
      {
        v141 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v141 != v140)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_76;
      }
      __clrex();
      v142 = v8;
      os_unfair_lock_unlock(&pas_heap_lock);
      v8 = v142;
    }
    else
    {
      v40 = v30 & 0x7F;
      while (1)
      {
        v41 = v39 - 128;
        if (v39 >= 0x80)
          v39 = 128;
        v42 = *(unsigned int *)(v37 + 4 * v33);
        if ((_DWORD)v42)
          v43 = v36 + 8 * v42;
        else
          v43 = 0;
        v44 = v34 - v38;
        if (v34 - v38 >= 0x80)
          v44 = 128;
        if (v40 < v44)
          break;
LABEL_37:
        v40 = 0;
        ++v33;
        v38 += 128;
        v39 = v41;
        if (v38 >= v34)
          goto LABEL_49;
      }
      while (*(unsigned __int8 *)(v43 + v40) != 255)
      {
        if (v39 == ++v40)
          goto LABEL_37;
      }
      v13 = v38 + v40;
      if (v30 < v38 + v40 && v29 != -1)
      {
        while (1)
        {
          v64 = __ldxp(v28);
          if ((unint64_t)v64 ^ v30 | *((_QWORD *)&v64 + 1) ^ v29)
            break;
          if (!__stlxp(__PAIR128__(v29 + 2, v13), v28))
            goto LABEL_75;
        }
        __clrex();
LABEL_75:
        __dmb(0xBu);
      }
    }
    break;
  }
LABEL_76:
  v65 = *(unsigned int *)(v11 + 80);
  v66 = v13 >> 3;
  v67 = v13 & 7;
  v68 = v8[317];
  if ((_DWORD)v65)
    v69 = v68 + 8 * v65;
  else
    v69 = 0;
  v70 = *(unsigned int *)(v69 + 4 * v66);
  if ((_DWORD)v70)
    v71 = v68 + 8 * v70;
  else
    v71 = 0;
  v72 = *(unsigned int *)(v71 + 4 * v67);
  v73 = v68 + 8 * v72;
  if ((_DWORD)v72)
    v74 = v73 == 0;
  else
    v74 = 1;
  if (v74)
  {
    v75 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v76 = *(_DWORD *)(v75 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v76, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_92;
    }
    __clrex();
    v78 = v8;
    os_unfair_lock_lock(&pas_heap_lock);
    v8 = v78;
LABEL_92:
    v79 = *(unsigned int *)(v11 + 80);
    v80 = v8[317];
    if ((_DWORD)v79)
      v81 = v80 + 8 * v79;
    else
      v81 = 0;
    v82 = *(unsigned int *)(v81 + 4 * v66);
    if ((_DWORD)v82)
      v83 = v80 + 8 * v82;
    else
      v83 = 0;
    v84 = *(unsigned int *)(v83 + 4 * v67);
    v73 = v80 + 8 * v84;
    if ((_DWORD)v84)
      v85 = v73 == 0;
    else
      v85 = 1;
    if (v85)
    {
      v86 = v8;
      v87 = pas_immortal_heap_allocate(0x18uLL, (uint64_t)"pas_bitfit_view", 0);
      v73 = v87;
      *(_QWORD *)v87 = 0;
      v88 = v11 - v86[317];
      *(_BYTE *)(v87 + 8) = v88 >> 3;
      *(_BYTE *)(v87 + 9) = v88 >> 11;
      *(_BYTE *)(v87 + 10) = v88 >> 19;
      *(_BYTE *)(v87 + 11) = 0;
      *(_QWORD *)(v87 + 16) = 0;
      *(_DWORD *)(v87 + 12) = v13;
      __dmb(0xAu);
      v89 = *(unsigned int *)(v11 + 80);
      v90 = v86[317];
      if ((_DWORD)v89)
        v91 = v90 + 8 * v89;
      else
        v91 = 0;
      v92 = *(unsigned int *)(v91 + 4 * v66);
      if ((_DWORD)v92)
        v93 = v90 + 8 * v92;
      else
        v93 = 0;
      *(_DWORD *)(v93 + 4 * v67) = (v87 - v90) >> 3;
    }
    v94 = *(_DWORD *)(v75 + 24);
    while (1)
    {
      v95 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v95 != v94)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return v73;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
  return v73;
}

void pas_bitfit_directory_compute_summary(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64x2_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26[5];
  uint64_t v27;

  *(_QWORD *)(a2 + 80) = 0;
  v3 = 0uLL;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = pas_compact_heap_reservation_base;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    do
    {
      v13 = *(unsigned int *)(a1 + 80);
      if ((_DWORD)v13)
        v14 = v8 + 8 * v13;
      else
        v14 = 0;
      v15 = *(unsigned int *)(v14 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFFCLL));
      if ((_DWORD)v15)
        v16 = v8 + 8 * v15;
      else
        v16 = 0;
      v17 = *(unsigned int *)(v16 + 4 * (v7 & 7));
      v18 = v8 + 8 * v17;
      if ((_DWORD)v17)
        v19 = v18 == 0;
      else
        v19 = 1;
      if (!v19)
      {
        v22 = v9;
        v23 = v3;
        v21 = v10;
        v24 = v12;
        v25 = v11;
        pas_bitfit_view_compute_summary(v18, (uint64_t)v26);
        v3 = vaddq_s64(v26[0], v23);
        v9 = vaddq_s64(v26[1], v22);
        v20 = v26[3];
        v10 = vaddq_s64(v26[2], v21);
        v6 += v27;
        *(int64x2_t *)a2 = v3;
        *(int64x2_t *)(a2 + 16) = v9;
        v11 = vaddq_s64(v20, v25);
        *(int64x2_t *)(a2 + 32) = v10;
        *(int64x2_t *)(a2 + 48) = v11;
        v12 = vaddq_s64(v26[4], v24);
        *(int64x2_t *)(a2 + 64) = v12;
        *(_QWORD *)(a2 + 80) = v6;
        v8 = pas_compact_heap_reservation_base;
        v4 = *(unsigned int *)(a1 + 84);
      }
      ++v7;
    }
    while (v7 < v4);
  }
}

uint64_t pas_bitfit_directory_get_use_epoch(uint64_t a1)
{
  unint64_t v1;
  uint64_t (*v3)(_QWORD);
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v3 = *(uint64_t (**)(_QWORD))(pas_bitfit_page_config_kind_for_config_table[*(unsigned __int8 *)(a1 + 124)]
                                        + 56);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    --v1;
    v5 = *(unsigned int *)(a1 + 56);
    v6 = (_DWORD)v5 ? pas_compact_heap_reservation_base + 8 * v5 : 0;
    v7 = *(unsigned int *)(v6 + ((v1 >> 5) & 0x7FFFFFFFFFFFFFCLL));
    v8 = (_DWORD)v7 ? pas_compact_heap_reservation_base + 8 * v7 : 0;
    if (((*(_DWORD *)(v8 + 4 * ((v1 >> 5) & 3)) >> v1) & 1) != 0)
    {
      v9 = *(unsigned int *)(a1 + 80);
      v10 = (_DWORD)v9 ? pas_compact_heap_reservation_base + 8 * v9 : 0;
      v11 = *(unsigned int *)(v10 + ((v1 >> 1) & 0x7FFFFFFFFFFFFFFCLL));
      v12 = (_DWORD)v11 ? pas_compact_heap_reservation_base + 8 * v11 : 0;
      v13 = *(unsigned int *)(v12 + 4 * (v1 & 7));
      v14 = pas_compact_heap_reservation_base + 8 * v13;
      if ((_DWORD)v13 && v14 != 0)
      {
        v16 = (os_unfair_lock_s *)(v14 + 16);
        v17 = *(_DWORD *)(StatusReg + 24);
        do
        {
          if (__ldaxr(&v16->_os_unfair_lock_opaque))
          {
            __clrex();
            os_unfair_lock_lock((os_unfair_lock_t)(v14 + 16));
            if (*(_BYTE *)(v14 + 11))
              goto LABEL_29;
            goto LABEL_30;
          }
        }
        while (__stxr(v17, &v16->_os_unfair_lock_opaque));
        if (!*(_BYTE *)(v14 + 11))
          goto LABEL_30;
LABEL_29:
        v19 = v3(*(_QWORD *)v14);
        if (*(_WORD *)(v19 + 2))
        {
LABEL_30:
          v20 = 0;
          goto LABEL_32;
        }
        v20 = *(_QWORD *)(v19 + 8);
LABEL_32:
        v21 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v22 = __ldxr(&v16->_os_unfair_lock_opaque);
          if (v22 != v21)
            break;
          if (!__stlxr(0, &v16->_os_unfair_lock_opaque))
            goto LABEL_4;
        }
        __clrex();
        os_unfair_lock_unlock(v16);
LABEL_4:
        if (v20)
          return v20;
      }
    }
    if (!v1)
      return 0;
  }
}

unint64_t *pas_bitfit_directory_view_did_become_empty_at_index(unint64_t *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned __int128 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = *((unsigned int *)result + 14);
  if ((_DWORD)v2)
    v3 = pas_compact_heap_reservation_base + 8 * v2;
  else
    v3 = 0;
  v4 = *(unsigned int *)(v3 + ((a2 >> 5) & 0x7FFFFFFFFFFFFFCLL));
  if ((_DWORD)v4)
    v5 = pas_compact_heap_reservation_base + 8 * v4;
  else
    v5 = 0;
  v6 = (unsigned int *)(v5 + 4 * ((a2 >> 5) & 3));
  do
  {
    v7 = *v6 | (1 << a2);
    if (*v6 == v7)
      return result;
    v8 = __ldxr(v6);
    if (v8 == *v6)
    {
      if (!__stlxr(v7, v6))
      {
        v9 = 1;
        goto LABEL_14;
      }
    }
    else
    {
      __clrex();
    }
    v9 = 0;
LABEL_14:
    __dmb(0xBu);
  }
  while (!v9);
  v10 = (unsigned __int128 *)(result + 4);
  v11 = a2 + 1;
  do
  {
    do
    {
      v15 = result[5];
      v16 = *(_QWORD *)v10;
      if (*(_QWORD *)v10 <= v11)
        v17 = a2 + 1;
      else
        v17 = *(_QWORD *)v10;
    }
    while (v15 == -1);
    if ((v15 & 1) != 0)
    {
      v12 = v15 + 1;
      goto LABEL_17;
    }
    v12 = result[5];
    if (v16 >= v11)
      break;
LABEL_17:
    v13 = __ldxp(v10);
    if ((unint64_t)v13 ^ v16 | *((_QWORD *)&v13 + 1) ^ v15)
    {
      __clrex();
LABEL_21:
      v14 = 0;
      goto LABEL_22;
    }
    if (__stlxp(__PAIR128__(v12, v17), v10))
      goto LABEL_21;
    v14 = 1;
LABEL_22:
    __dmb(0xBu);
  }
  while (!v14);
  if (!v16 && *(unsigned __int8 *)(*(_QWORD *)result[6] + 1) << 8 == 512)
    return pas_page_sharing_pool_did_create_delta(pas_physical_page_sharing_pool, (unint64_t)result | 3);
  return result;
}

uint64_t pas_bitfit_directory_take_last_empty(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  unsigned int v33;
  uint64_t v35;
  os_unfair_lock_s *v36;
  unsigned int v37;
  uint64_t v39;
  unsigned __int16 *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  unsigned __int16 *v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  os_unfair_lock_s *v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v75;
  uint64_t result;
  os_unfair_lock_s **v77;
  unsigned __int128 v78;
  int v79;
  unsigned int v80;
  unsigned __int16 *v81;
  __n128 v82;
  unsigned __int16 *v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unsigned __int128 v89;
  unsigned __int16 *v90;
  os_unfair_lock_s *v91;
  unint64_t StatusReg;
  int v93;
  int v94;
  unint64_t v95;
  uint64_t v97;
  unint64_t v98;
  _QWORD v99[4];
  _OWORD v100[2];
  __int128 v101;

  v5 = (unsigned __int128 *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
  {
LABEL_116:
    if (v6 != -1)
    {
      if ((v6 & 1) != 0)
      {
        v75 = v6 + 1;
      }
      else
      {
        v75 = v6;
        if (!v7)
          return 0;
      }
      result = 0;
      v78 = __ldxp(v5);
      if ((unint64_t)v78 ^ v7 | *((_QWORD *)&v78 + 1) ^ v6)
        __clrex();
      else
        __stlxp(__PAIR128__(v75, 0), v5);
      __dmb(0xBu);
      return result;
    }
    return 0;
  }
  v97 = pas_bitfit_page_config_kind_for_config_table[*(unsigned __int8 *)(a1 + 124)];
  v95 = *(_QWORD *)(v97 + 32) / *(_QWORD *)(v97 + 40);
  v8 = (_QWORD *)&unk_1ECF57000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v98 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = v7;
LABEL_5:
  --v9;
  v10 = *(unsigned int *)(a1 + 56);
  v11 = v9 >> 7;
  v12 = v8[317];
  if ((_DWORD)v10)
    v13 = v12 + 8 * v10;
  else
    v13 = 0;
  v14 = *(unsigned int *)(v13 + 4 * v11);
  v15 = v12 + 8 * v14;
  if ((_DWORD)v14)
    v16 = v15;
  else
    v16 = 0;
  v17 = (unsigned int *)(v16 + 4 * ((v9 >> 5) & 3));
  do
  {
    v18 = *v17 & ~(1 << v9);
    if (*v17 == v18)
    {
LABEL_4:
      if (!v9)
        goto LABEL_116;
      goto LABEL_5;
    }
    v19 = __ldxr(v17);
    if (v19 == *v17)
    {
      if (!__stlxr(v18, v17))
      {
        v20 = 1;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    v20 = 0;
LABEL_18:
    __dmb(0xBu);
  }
  while (!v20);
  v21 = *(unsigned int *)(a1 + 80);
  v22 = v8[317];
  if ((_DWORD)v21)
    v23 = v22 + 8 * v21;
  else
    v23 = 0;
  v24 = *(unsigned int *)(v23 + ((v9 >> 1) & 0x7FFFFFFFFFFFFFFCLL));
  if ((_DWORD)v24)
    v25 = v22 + 8 * v24;
  else
    v25 = 0;
  v26 = *(unsigned int *)(v25 + 4 * (v9 & 7));
  v27 = (os_unfair_lock_s *)(v22 + 8 * v26);
  if ((_DWORD)v26)
    v28 = v27;
  else
    v28 = 0;
  v29 = v28 + 5;
  v30 = a2[134];
  v31 = v30 - 1;
  while (v31 != -1)
  {
    v32 = *(os_unfair_lock_s **)(a2[133] + 8 * v31--);
    if (v32 == v29)
      goto LABEL_43;
  }
  if (v29 == (os_unfair_lock_s *)&pas_virtual_range_common_lock)
  {
    v35 = a2[132];
    if (v35)
    {
LABEL_42:
      a2[132] = v35 + 1;
      goto LABEL_43;
    }
  }
  if (!a3 && !v30 && !*a2)
  {
    v73 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v29->_os_unfair_lock_opaque))
    {
      if (!__stxr(v73, &v29->_os_unfair_lock_opaque))
        goto LABEL_39;
    }
    __clrex();
    os_unfair_lock_lock(v28 + 5);
LABEL_39:
    if (v29 == (os_unfair_lock_s *)&pas_virtual_range_common_lock)
    {
      v35 = a2[132];
      goto LABEL_42;
    }
LABEL_43:
    v36 = v28 + 4;
    v37 = *(_DWORD *)(v98 + 24);
    while (!__ldaxr(&v36->_os_unfair_lock_opaque))
    {
      if (!__stxr(v37, &v36->_os_unfair_lock_opaque))
      {
        if (HIBYTE(v28[2]._os_unfair_lock_opaque))
          goto LABEL_47;
LABEL_58:
        v48 = *(_DWORD *)(v98 + 24);
        while (1)
        {
          v49 = __ldxr(&v36->_os_unfair_lock_opaque);
          if (v49 != v48)
            break;
          if (!__stlxr(0, &v36->_os_unfair_lock_opaque))
            goto LABEL_67;
        }
        __clrex();
        os_unfair_lock_unlock(v28 + 4);
LABEL_67:
        v51 = a2[134] - 1;
        v8 = &unk_1ECF57000;
        while (v51 != -1)
        {
          v52 = *(os_unfair_lock_s **)(a2[133] + 8 * v51--);
          if (v52 == v29)
            goto LABEL_4;
        }
        v53 = *(_DWORD *)(v98 + 24);
        while (1)
        {
          v54 = __ldxr(&v29->_os_unfair_lock_opaque);
          if (v54 != v53)
            break;
          if (!__stlxr(0, &v29->_os_unfair_lock_opaque))
            goto LABEL_4;
        }
LABEL_3:
        __clrex();
        os_unfair_lock_unlock(v29);
        goto LABEL_4;
      }
    }
    __clrex();
    os_unfair_lock_lock(v28 + 4);
    if (!HIBYTE(v28[2]._os_unfair_lock_opaque))
      goto LABEL_58;
LABEL_47:
    v91 = v28;
    v39 = *(_QWORD *)&v28->_os_unfair_lock_opaque;
    v40 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(v97 + 56))(v39);
    v41 = v40[1];
    v42 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v42)
      v43 = pas_compact_heap_reservation_base + 8 * v42;
    else
      v43 = 0;
    v44 = *(unsigned int *)(v43 + 4 * v11);
    if ((_DWORD)v44)
      v45 = pas_compact_heap_reservation_base + 8 * v44;
    else
      v45 = 0;
    v46 = *(unsigned __int8 *)(v45 + (v9 & 0x7F));
    if (v40[1])
    {
      if (v46 == 255)
      {
        v55 = v40[1];
        v56 = v40;
        pas_log("%p:%zu: found empty page that is not dead when taking last empty.\n", v40, v9);
        v41 = v55;
        v40 = v56;
        v47 = v95;
        if (v95 <= 1)
          goto LABEL_98;
      }
      else
      {
        v47 = v95;
        if (v95 < 2)
        {
LABEL_98:
          v67 = *(_DWORD *)(v98 + 24);
          while (1)
          {
            v68 = __ldxr(&v36->_os_unfair_lock_opaque);
            if (v68 != v67)
              break;
            if (!__stlxr(0, &v36->_os_unfair_lock_opaque))
              goto LABEL_103;
          }
          __clrex();
          os_unfair_lock_unlock(v36);
LABEL_103:
          v69 = a2[134] - 1;
          v8 = (_QWORD *)&unk_1ECF57000;
          while (v69 != -1)
          {
            v70 = *(os_unfair_lock_s **)(a2[133] + 8 * v69--);
            if (v70 == v29)
              goto LABEL_4;
          }
          v71 = *(_DWORD *)(v98 + 24);
          while (1)
          {
            v72 = __ldxr(&v29->_os_unfair_lock_opaque);
            if (v72 != v71)
              goto LABEL_3;
            if (!__stlxr(0, &v29->_os_unfair_lock_opaque))
              goto LABEL_4;
          }
        }
      }
    }
    else
    {
      if (v46 != 255)
      {
        v50 = v40;
        pas_log("%p:%zu: found non-empty page that is dead when taking last empty.\n", v40, v9);
        v41 = 0;
        v40 = v50;
      }
      v47 = v95;
      if (v95 <= 1)
      {
        v94 = v41;
        v83 = v40;
        HIBYTE(v91[2]._os_unfair_lock_opaque) = 0;
        v84 = *(_DWORD *)(v98 + 24);
        while (1)
        {
          v85 = __ldxr(&v36->_os_unfair_lock_opaque);
          if (v85 != v84)
            break;
          if (!__stlxr(0, &v36->_os_unfair_lock_opaque))
            goto LABEL_142;
        }
        __clrex();
        os_unfair_lock_unlock(v36);
LABEL_142:
        v86 = *(_QWORD *)(v97 + 32) + v39;
        v87 = *(_DWORD *)(*(_QWORD *)(v97 + 8) + 1040);
        v99[0] = v39;
        v99[1] = v86;
        v99[2] = v29;
        v99[3] = v87;
        v82 = pas_deferred_decommit_log_add_already_locked((uint64_t)a2, v99, a3);
        goto LABEL_143;
      }
    }
    v57 = 0;
    v58 = 0;
    v59 = (unint64_t)&v40[8 * ((unint64_t)((*(_QWORD *)(v97 + 32) >> *(_BYTE *)(v97 + 28)) + 63) >> 6)
                               + 8];
    memset(v100, 0, sizeof(v100));
    v101 = 0u;
    v60 = v47;
    do
    {
      while (1)
      {
        --v60;
        if (*(_BYTE *)(v59 + v60))
          break;
        *(_DWORD *)((char *)v100 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v60;
        ++v57;
        *(_BYTE *)(v59 + v60) = -1;
        if (!v60)
          goto LABEL_82;
      }
      if (*(unsigned __int8 *)(v59 + v60) == 255)
        ++v58;
    }
    while (v60);
LABEL_82:
    *(_QWORD *)&v101 = v57;
    *((_QWORD *)&v101 + 1) = v58;
    if ((v41 == 0) == (v57 + v58 != v47))
    {
      v93 = v41;
      v90 = v40;
      pas_log("page_is_dead = %d\n", v41 == 0);
      pas_log("free_granules.num_free_granules = %zu\n", v57);
      pas_log("free_granules.num_already_decommitted_granules = %zu\n", v58);
      v41 = v93;
      v40 = v90;
    }
    if (!v57)
    {
      v61 = *(_DWORD *)(v98 + 24);
      while (1)
      {
        v62 = __ldxr(&v36->_os_unfair_lock_opaque);
        if (v62 != v61)
          break;
        if (!__stlxr(0, &v36->_os_unfair_lock_opaque))
          goto LABEL_90;
      }
      __clrex();
      os_unfair_lock_unlock(v36);
LABEL_90:
      v63 = a2[134] - 1;
      v8 = (_QWORD *)&unk_1ECF57000;
      while (v63 != -1)
      {
        v64 = *(os_unfair_lock_s **)(a2[133] + 8 * v63--);
        if (v64 == v29)
          goto LABEL_4;
      }
      v65 = *(_DWORD *)(v98 + 24);
      while (1)
      {
        v66 = __ldxr(&v29->_os_unfair_lock_opaque);
        if (v66 != v65)
          goto LABEL_3;
        if (!__stlxr(0, &v29->_os_unfair_lock_opaque))
          goto LABEL_4;
      }
    }
    v94 = v41;
    if (!v41)
      HIBYTE(v91[2]._os_unfair_lock_opaque) = 0;
    v79 = *(_DWORD *)(v98 + 24);
    while (1)
    {
      v80 = __ldxr(&v36->_os_unfair_lock_opaque);
      if (v80 != v79)
        break;
      if (!__stlxr(0, &v36->_os_unfair_lock_opaque))
        goto LABEL_137;
    }
    __clrex();
    v81 = v40;
    os_unfair_lock_unlock(v36);
    v40 = v81;
LABEL_137:
    v83 = v40;
    v82.n128_f64[0] = pas_free_granules_decommit_after_locking_range((uint64_t)v100, (uint64_t)v40, (uint64_t)a2, (uint64_t)v29, v97, a3);
LABEL_143:
    if (v6 != -1)
    {
      if ((v6 & 1) != 0)
      {
        v88 = v6 + 1;
      }
      else
      {
        v88 = v6;
        if (v7 == v9)
          goto LABEL_152;
      }
      v89 = __ldxp(v5);
      if ((unint64_t)v89 ^ v7 | *((_QWORD *)&v89 + 1) ^ v6)
        __clrex();
      else
        __stlxp(__PAIR128__(v88, v9), v5);
      __dmb(0xBu);
    }
LABEL_152:
    if (!v94)
      (*(void (**)(unsigned __int16 *, _QWORD, __n128))(v97 + 88))(v83, a3, v82);
    pas_page_sharing_pool_did_create_delta(pas_physical_page_sharing_pool, a1 | 3);
    return 3;
  }
  v33 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v29->_os_unfair_lock_opaque))
  {
    if (!__stxr(v33, &v29->_os_unfair_lock_opaque))
      goto LABEL_39;
  }
  __clrex();
  v77 = (os_unfair_lock_s **)a2[135];
  if (v77 && !*v77)
    *v77 = v29;
  pas_bitfit_directory_view_did_become_empty_at_index((unint64_t *)a1, v9);
  return 2;
}

unint64_t pas_bitfit_heap_create(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;

  v4 = pas_immortal_heap_allocate_with_alignment(0x180uLL, 0x10uLL, (uint64_t)"pas_bitfit_heap", 0);
  v5 = v4;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 68) = 0;
  *(_DWORD *)(v4 + 76) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 88) = 0;
  *(_DWORD *)(v4 + 120) = 0;
  LOBYTE(v6) = *(_BYTE *)(a2 + 504);
  if ((_BYTE)v6)
    v6 = *(_DWORD *)(a2 + 604);
  *(_BYTE *)(v4 + 124) = v6;
  *(_QWORD *)(v4 + 48) = a1;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  if (*(_BYTE *)(a2 + 504) && *(unsigned __int8 *)(*(_QWORD *)a1 + 1) << 8 == 512)
    pas_page_sharing_pool_add_at_index((uint64_t *)pas_physical_page_sharing_pool, v4 | 3, dword_1ECF57BA0);
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_QWORD *)(v5 + 196) = 0;
  *(_DWORD *)(v5 + 204) = 0;
  *(_QWORD *)(v5 + 208) = 0;
  *(_DWORD *)(v5 + 216) = 0;
  *(_DWORD *)(v5 + 248) = 0;
  LOBYTE(v7) = *(_BYTE *)(a2 + 664);
  if ((_BYTE)v7)
    v7 = *(_DWORD *)(a2 + 764);
  *(_BYTE *)(v5 + 252) = v7;
  *(_QWORD *)(v5 + 176) = a1;
  *(_QWORD *)(v5 + 184) = 0;
  *(_DWORD *)(v5 + 192) = 0;
  *(_QWORD *)(v5 + 232) = 0;
  *(_QWORD *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 224) = 0;
  if (*(_BYTE *)(a2 + 664) && *(unsigned __int8 *)(*(_QWORD *)a1 + 1) << 8 == 512)
    pas_page_sharing_pool_add_at_index((uint64_t *)pas_physical_page_sharing_pool, (v5 + 128) | 3, dword_1ECF57BA0);
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_DWORD *)(v5 + 332) = 0;
  *(_QWORD *)(v5 + 324) = 0;
  *(_QWORD *)(v5 + 336) = 0;
  *(_DWORD *)(v5 + 344) = 0;
  *(_DWORD *)(v5 + 376) = 0;
  LOBYTE(v8) = *(_BYTE *)(a2 + 824);
  if ((_BYTE)v8)
    v8 = *(_DWORD *)(a2 + 924);
  *(_BYTE *)(v5 + 380) = v8;
  *(_QWORD *)(v5 + 304) = a1;
  *(_QWORD *)(v5 + 312) = 0;
  *(_DWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  *(_QWORD *)(v5 + 368) = 0;
  *(_QWORD *)(v5 + 352) = 0;
  if (*(_BYTE *)(a2 + 824) && *(unsigned __int8 *)(*(_QWORD *)a1 + 1) << 8 == 512)
    pas_page_sharing_pool_add_at_index((uint64_t *)pas_physical_page_sharing_pool, (v5 + 256) | 3, dword_1ECF57BA0);
  return v5;
}

uint64_t pas_bitfit_heap_select_variant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char v13;
  int v14;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;

  v3 = a1 - 1;
  v4 = *(_BYTE *)(a2 + 532);
  v5 = *(_QWORD *)(a2 + 552);
  if (!pas_marge_bitfit_page_config_variant_is_enabled_override)
  {
    if (*(_BYTE *)(a2 + 504) && *(_DWORD *)(a3 + 20))
    {
      v10 = *(_DWORD *)(a2 + 600);
      if (v10)
      {
        if (v10 != 1 || !pas_medium_bitfit_page_config_variant_is_enabled_override)
          goto LABEL_53;
      }
      else if (!pas_small_bitfit_page_config_variant_is_enabled_override)
      {
        goto LABEL_53;
      }
      v6 = ((1 << v4) + v3) & -(1 << v4);
      if (v6 <= v5)
        return v6;
    }
LABEL_53:
    if (*(_BYTE *)(a2 + 664) && *(_DWORD *)(a3 + 20))
    {
      v16 = *(_DWORD *)(a2 + 760);
      if (v16)
      {
        if (v16 != 1 || !pas_medium_bitfit_page_config_variant_is_enabled_override)
          goto LABEL_62;
      }
      else if (!pas_small_bitfit_page_config_variant_is_enabled_override)
      {
        goto LABEL_62;
      }
      v7 = ((1 << *(_BYTE *)(a2 + 692)) + v3) & -(1 << *(_BYTE *)(a2 + 692));
      if (v7 <= *(_QWORD *)(a2 + 712))
        return v7 | 0x100000000;
    }
LABEL_62:
    if (!*(_BYTE *)(a2 + 824) || !*(_DWORD *)(a3 + 20))
      return 0;
    v13 = *(_BYTE *)(a2 + 852);
    v8 = *(_QWORD *)(a2 + 872);
    v17 = *(_DWORD *)(a2 + 920);
    if (v17)
    {
      if (v17 != 1 || !pas_medium_bitfit_page_config_variant_is_enabled_override)
        return 0;
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (!pas_medium_bitfit_page_config_variant_is_enabled_override)
  {
    if (*(_BYTE *)(a2 + 504))
    {
      if (*(_DWORD *)(a3 + 20))
      {
        v11 = *(_DWORD *)(a2 + 600);
        if (v11 == 2 || !v11 && pas_small_bitfit_page_config_variant_is_enabled_override)
        {
          v6 = ((1 << v4) + v3) & -(1 << v4);
          if (v6 <= v5)
            return v6;
        }
      }
    }
    if (*(_BYTE *)(a2 + 664))
    {
      if (*(_DWORD *)(a3 + 20))
      {
        v12 = *(_DWORD *)(a2 + 760);
        if (v12 == 2 || !v12 && pas_small_bitfit_page_config_variant_is_enabled_override)
        {
          v7 = ((1 << *(_BYTE *)(a2 + 692)) + v3) & -(1 << *(_BYTE *)(a2 + 692));
          if (v7 <= *(_QWORD *)(a2 + 712))
            return v7 | 0x100000000;
        }
      }
    }
    if (!*(_BYTE *)(a2 + 824) || !*(_DWORD *)(a3 + 20))
      return 0;
    v13 = *(_BYTE *)(a2 + 852);
    v8 = *(_QWORD *)(a2 + 872);
    v14 = *(_DWORD *)(a2 + 920);
    if (v14 == 2)
    {
LABEL_70:
      v9 = 1 << v13;
      goto LABEL_71;
    }
    if (v14)
      return 0;
LABEL_69:
    if (!pas_small_bitfit_page_config_variant_is_enabled_override)
      return 0;
    goto LABEL_70;
  }
  if (!pas_small_bitfit_page_config_variant_is_enabled_override)
  {
    if (*(_BYTE *)(a2 + 504))
    {
      if (*(_DWORD *)(a3 + 20))
      {
        if ((*(_DWORD *)(a2 + 600) - 1) <= 1)
        {
          v6 = ((1 << v4) + v3) & -(1 << v4);
          if (v6 <= v5)
            return v6;
        }
      }
    }
    if (!*(_BYTE *)(a2 + 664)
      || !*(_DWORD *)(a3 + 20)
      || (*(_DWORD *)(a2 + 760) - 1) > 1
      || (v7 = ((1 << *(_BYTE *)(a2 + 692)) + v3) & -(1 << *(_BYTE *)(a2 + 692)), v7 > *(_QWORD *)(a2 + 712)))
    {
      if (*(_BYTE *)(a2 + 824))
      {
        if (*(_DWORD *)(a3 + 20))
        {
          if ((*(_DWORD *)(a2 + 920) - 1) <= 1)
            goto LABEL_15;
          return 0;
        }
        return 0;
      }
      return 0;
    }
    return v7 | 0x100000000;
  }
  if (*(_BYTE *)(a2 + 504))
  {
    if (*(_DWORD *)(a3 + 20))
    {
      if (*(_DWORD *)(a2 + 600) <= 2u)
      {
        v6 = ((1 << v4) + v3) & -(1 << v4);
        if (v6 <= v5)
          return v6;
      }
    }
  }
  if (*(_BYTE *)(a2 + 664))
  {
    if (*(_DWORD *)(a3 + 20))
    {
      if (*(_DWORD *)(a2 + 760) <= 2u)
      {
        v7 = ((1 << *(_BYTE *)(a2 + 692)) + v3) & -(1 << *(_BYTE *)(a2 + 692));
        if (v7 <= *(_QWORD *)(a2 + 712))
          return v7 | 0x100000000;
      }
    }
  }
  if (!*(_BYTE *)(a2 + 824))
    return 0;
  if (!*(_DWORD *)(a3 + 20))
    return 0;
  if (*(_DWORD *)(a2 + 920) > 2u)
    return 0;
LABEL_15:
  v8 = *(_QWORD *)(a2 + 872);
  v9 = 1 << *(_BYTE *)(a2 + 852);
LABEL_71:
  v18 = (v9 + v3) & -v9;
  v19 = (unint64_t)(v18 <= v8) << 33;
  if (v18 <= v8)
    v20 = v18;
  else
    v20 = 0;
  return v20 | v19;
}

void pas_bitfit_heap_construct_and_insert_size_class(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;

  v7 = pas_bitfit_heap_select_variant(a3, a4, a5);
  v8 = v7;
  v9 = HIDWORD(v7);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v10 = a1 + (v9 << 7);
  v12 = *(_DWORD *)(v10 + 120);
  v11 = (_DWORD *)(v10 + 120);
  v13 = pas_compact_heap_reservation_base + 8 * v12;
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14 && *(_DWORD *)(v13 + 16) > v8)
  {
    do
    {
      v15 = v13;
      v16 = *(unsigned int *)(v13 + 20);
      v13 = pas_compact_heap_reservation_base + 8 * v16;
      if ((_DWORD)v16)
        v17 = v13 == 0;
      else
        v17 = 1;
    }
    while (!v17 && *(_DWORD *)(v13 + 16) > v8);
    v11 = (_DWORD *)(v15 + 20);
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v18 = pas_compact_heap_reservation_base;
  v19 = (unint64_t)(v10 - pas_compact_heap_reservation_base) >> 3;
  if (!a1)
    LODWORD(v19) = 0;
  *(_WORD *)(a2 + 24) = v19;
  *(_BYTE *)(a2 + 26) = BYTE2(v19);
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 20) = 0;
  v20 = *v11;
  if ((_DWORD)v20)
    v21 = v18 + 8 * v20;
  else
    v21 = 0;
  if (v21)
    v22 = (unint64_t)(v21 - v18) >> 3;
  else
    v22 = 0;
  *(_DWORD *)(a2 + 20) = v22;
  v23 = (unint64_t)(a2 - v18) >> 3;
  if (!a2)
    LODWORD(v23) = 0;
  *v11 = v23;
}

int64x2_t pas_bitfit_heap_compute_summary@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int64x2_t result;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;

  pas_bitfit_directory_compute_summary(a1, (uint64_t)&v21);
  v4 = v21;
  v15 = v23;
  v17 = v22;
  v11 = v25;
  v13 = v24;
  v19 = v26;
  pas_bitfit_directory_compute_summary(a1 + 128, (uint64_t)&v21);
  v5 = v21 + v4;
  v16 = vaddq_s64(v15, v23);
  v18 = vaddq_s64(v17, v22);
  v12 = vaddq_s64(v11, v25);
  v14 = vaddq_s64(v13, v24);
  v20 = vaddq_s64(v19, v26);
  pas_bitfit_directory_compute_summary(a1 + 256, (uint64_t)&v21);
  result = vaddq_s64(v18, v22);
  v7 = vaddq_s64(v16, v23);
  v8 = vaddq_s64(v14, v24);
  v9 = vaddq_s64(v12, v25);
  v10 = vaddq_s64(v20, v26);
  *(_QWORD *)a2 = v5 + v21;
  *(int64x2_t *)(a2 + 8) = result;
  *(int64x2_t *)(a2 + 24) = v7;
  *(int64x2_t *)(a2 + 40) = v8;
  *(int64x2_t *)(a2 + 56) = v9;
  *(int64x2_t *)(a2 + 72) = v10;
  return result;
}

void pas_bitfit_page_construct(uint64_t a1, const os_unfair_lock *a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t i;

  v5 = *(_BYTE *)(a3 + 28);
  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(a3 + 40);
  v8 = *(_DWORD *)(a3 + 96);
  v9 = *(_QWORD *)(a3 + 104);
  v10 = *(_QWORD *)(a3 + 112);
  os_unfair_lock_assert_owner(a2 + 4);
  v11 = v8 + 5;
  if (v8 >= 3)
    v11 = 1;
  *(_BYTE *)a1 = v11;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 1) = 0;
  *(_WORD *)(a1 + 2) = 0;
  v12 = ((unint64_t)a2 - pas_compact_heap_reservation_base) >> 3;
  if (!a2)
    LODWORD(v12) = 0;
  *(_DWORD *)(a1 + 4) = v12;
  v13 = a1 + 16;
  v14 = v6 >> v5;
  v15 = (((v6 >> v5) + 63) >> 2) & 0x3FFFFFFFFFFFFFF0;
  bzero((void *)(a1 + 16), v15);
  v16 = ((v9 - 1 + (1 << v5)) & (unint64_t)-(1 << v5)) >> v5;
  v17 = v16 >> 6;
  v18 = v6 >> v5 >> 6;
  v19 = v14 & 0x3F;
  v20 = v16 & 0x3F;
  if (v20)
    *(_QWORD *)(v13 + 8 * v17++) |= -1 << v20;
  if (v18 > v17)
    memset((void *)(a1 + 8 * v17 + 16), 255, 8 * (v18 - v17));
  if (v19)
    *(_QWORD *)(v13 + 8 * v18) |= ~(-1 << v19);
  if (v6 != v7)
  {
    v21 = v13 + v15;
    bzero((void *)(v13 + v15), v6 / v7);
    v22 = v10 + v9;
    if (v9)
    {
      v23 = 0;
      do
        ++*(_BYTE *)(v21 + v23++);
      while (v23 <= (v9 - 1) / v7);
    }
    if (v22 != v6)
    {
      v24 = v22 / v7;
      for (i = (v6 - 1) / v7; v24 <= i; ++v24)
        ++*(_BYTE *)(v21 + v24);
    }
  }
}

uint64_t pas_bitfit_page_log_bits(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;

  v6 = pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a1 + 4);
  v7 = pas_bitfit_page_config_kind_for_config_table[*(unsigned __int8 *)(((8 * *(unsigned __int16 *)(v6 + 8)) | ((unint64_t)*(unsigned __int8 *)(v6 + 10) << 19))
                                                                       + pas_compact_heap_reservation_base
                                                                       + 124)];
  v8 = *(_BYTE *)(v7 + 28);
  v9 = *(_QWORD *)(v7 + 32);
  pas_log("free bits: ");
  if (v9)
  {
    v10 = 0;
    v11 = a1 + 16;
    v12 = 1 << v8;
    do
    {
      pas_log("%d", (*(_DWORD *)(v11 + ((v10 >> v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> (v10 >> v8)) & 1);
      v10 += v12;
    }
    while (v10 < v9);
    pas_log("\n");
    pas_log(" end bits: ");
    v13 = 0;
    v14 = v11 + 8 * (((v9 >> v8) + 63) >> 6);
    do
    {
      pas_log("%d", (*(_DWORD *)(v14 + ((v13 >> v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> (v13 >> v8)) & 1);
      v13 += v12;
    }
    while (v13 < v9);
    result = pas_log("\n");
    if (a2 == a3)
      return result;
  }
  else
  {
    pas_log("\n");
    pas_log(" end bits: ");
    result = pas_log("\n");
    if (a2 == a3)
      return result;
  }
  pas_log("           ");
  if (v9)
  {
    v16 = 0;
    v17 = 1 << v8;
    do
    {
      if (v16 < a3 && v16 >= a2)
        pas_log("^");
      else
        pas_log(" ");
      v16 += v17;
    }
    while (v16 < v9);
  }
  return pas_log("\n");
}

void pas_bitfit_page_deallocation_did_fail(const void *a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  pthread_t v10;
  char *string;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  pas_start_crash_logging();
  v10 = pthread_self();
  pas_log("Thread %p encountered bitfit alloaction error.\n", v10);
  string = pas_bitfit_page_config_kind_get_string(a2);
  pas_log("Bits for page %p (%s):\n", a1, string);
  pas_bitfit_page_log_bits((uint64_t)a1, a4, a4 + 1);
  pas_deallocation_did_fail(a5, a3, v12, v13, v14, v15, v16, v17);
}

char *pas_bitfit_page_config_kind_get_string(unsigned int a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E35BECE8[a1];
}

unint64_t pas_bitfit_size_class_get_first_free_view(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int128 v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t result;
  unint64_t v15;
  unsigned __int128 v18;
  unsigned __int128 v20;

  v4 = ((8 * *((unsigned __int16 *)a1 + 12)) | ((unint64_t)*((unsigned __int8 *)a1 + 26) << 19))
     + pas_compact_heap_reservation_base;
  do
  {
    v5 = a1[1];
    v6 = *a1;
    if ((v5 & 1) != 0)
      goto LABEL_10;
    v7 = __ldxp((unsigned __int128 *)a1);
    if ((unint64_t)v7 ^ v6 | *((_QWORD *)&v7 + 1) ^ v5)
    {
      __clrex();
    }
    else if (!__stlxp(__PAIR128__(v5 + 1, v6), (unsigned __int128 *)a1))
    {
      v8 = 1;
      goto LABEL_8;
    }
    v8 = 0;
LABEL_8:
    __dmb(0xBu);
  }
  while (!v8);
  ++v5;
LABEL_10:
  while (1)
  {
    v9 = *(_QWORD *)(v4 + 8);
    v10 = *(_QWORD *)v4;
    if ((v9 & 1) != 0)
      break;
    v11 = __ldxp((unsigned __int128 *)v4);
    if ((unint64_t)v11 ^ v10 | *((_QWORD *)&v11 + 1) ^ v9)
    {
      __clrex();
LABEL_15:
      v12 = 0;
      goto LABEL_16;
    }
    if (__stlxp(__PAIR128__(v9 + 1, v10), (unsigned __int128 *)v4))
      goto LABEL_15;
    v12 = 1;
LABEL_16:
    __dmb(0xBu);
    if (v12)
    {
      ++v9;
      break;
    }
  }
  if (v6 >= v10)
    v13 = v10;
  else
    v13 = v6;
  result = pas_bitfit_directory_get_first_free_view(v4, v13, *((unsigned int *)a1 + 4), a2);
  if (v6 >= v15 || v5 == -1)
  {
    if (v10 < v15 && v9 != -1)
    {
LABEL_40:
      while (1)
      {
        v20 = __ldxp((unsigned __int128 *)v4);
        if ((unint64_t)v20 ^ v10 | *((_QWORD *)&v20 + 1) ^ v9)
          break;
        if (!__stlxp(__PAIR128__(v9 + 2, v15), (unsigned __int128 *)v4))
          goto LABEL_44;
      }
      __clrex();
LABEL_44:
      __dmb(0xBu);
    }
  }
  else
  {
    while (1)
    {
      v18 = __ldxp((unsigned __int128 *)a1);
      if ((unint64_t)v18 ^ v6 | *((_QWORD *)&v18 + 1) ^ v5)
        break;
      if (!__stlxp(__PAIR128__(v5 + 2, v15), (unsigned __int128 *)a1))
        goto LABEL_36;
    }
    __clrex();
LABEL_36:
    __dmb(0xBu);
    if (v10 < v15 && v9 != -1)
      goto LABEL_40;
  }
  return result;
}

uint64_t pas_bitfit_view_note_full_emptiness(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 *v17;
  unint64_t v18;
  unsigned __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v4 = (unsigned int *)timebase_info_ptr;
  if (!timebase_info_ptr)
  {
    get_timebase_info_slow();
    v5 = mach_approximate_time();
    v6 = timebase_info;
    v7 = *(unsigned int *)algn_1ECF57B54;
    if ((pas_get_epoch_first & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = mach_approximate_time();
  v6 = *v4;
  v7 = v4[1];
  if ((pas_get_epoch_first & 1) == 0)
LABEL_3:
    pas_get_epoch_first = 1;
LABEL_4:
  *(_QWORD *)(a2 + 8) = v5 * v6 / v7;
  v9 = *(unsigned __int16 *)(a1 + 8);
  v8 = (unsigned __int16 *)(a1 + 8);
  result = (uint64_t)pas_bitfit_directory_view_did_become_empty_at_index((unint64_t *)(((8 * v9) | ((unint64_t)*((unsigned __int8 *)v8 + 2) << 19))+ pas_compact_heap_reservation_base), *((unsigned int *)v8 + 1));
  v11 = ((8 * *v8) | ((unint64_t)*((unsigned __int8 *)v8 + 2) << 19)) + pas_compact_heap_reservation_base;
  v12 = *((unsigned int *)v8 + 1);
  v13 = *(unsigned int *)(v11 + 68);
  if ((_DWORD)v13)
    v14 = pas_compact_heap_reservation_base + 8 * v13;
  else
    v14 = 0;
  v15 = *(unsigned int *)(v14 + ((v12 >> 5) & 0x7FFFFFC));
  v16 = pas_compact_heap_reservation_base + 8 * v15;
  if (!(_DWORD)v15)
    v16 = 0;
  *(_BYTE *)(v16 + (v12 & 0x7F)) = -1;
  v17 = (unsigned __int128 *)(v11 + 16);
  do
  {
    do
    {
      v20 = *(_QWORD *)(v11 + 24);
      v21 = *(_QWORD *)v17;
      if (*(_QWORD *)v17 >= v12)
        v22 = v12;
      else
        v22 = *(_QWORD *)v17;
    }
    while (v20 == -1);
    if ((v20 & 1) != 0)
    {
      v18 = v20 + 1;
      goto LABEL_11;
    }
    v18 = *(_QWORD *)(v11 + 24);
    if (v21 <= v12)
      break;
LABEL_11:
    v19 = __ldxp(v17);
    if ((unint64_t)v19 ^ v21 | *((_QWORD *)&v19 + 1) ^ v20)
    {
      __clrex();
LABEL_15:
      result = 0;
      goto LABEL_16;
    }
    if (__stlxp(__PAIR128__(v18, v22), v17))
      goto LABEL_15;
    result = 1;
LABEL_16:
    __dmb(0xBu);
  }
  while (!result);
  return result;
}

uint64_t pas_bitfit_view_note_max_free(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = ((8 * *(unsigned __int16 *)(result + 8)) | ((unint64_t)*(unsigned __int8 *)(result + 10) << 19))
     + pas_compact_heap_reservation_base;
  v2 = *(unsigned int *)(result + 12);
  v3 = *(unsigned int *)(v1 + 68);
  v4 = v2 & 0x7F;
  if ((_DWORD)v3)
    v5 = pas_compact_heap_reservation_base + 8 * v3;
  else
    v5 = 0;
  v6 = *(unsigned int *)(v5 + ((v2 >> 5) & 0x7FFFFFC));
  if ((_DWORD)v6)
    v7 = pas_compact_heap_reservation_base + 8 * v6;
  else
    v7 = 0;
  if (*(unsigned __int8 *)(v7 + v4) == 255)
    result = pas_log("%p:%zu: found empty when setting max_free\n", (const void *)(((8 * *(unsigned __int16 *)(result + 8)) | ((unint64_t)*(unsigned __int8 *)(result + 10) << 19))+ pas_compact_heap_reservation_base), v2);
  *(_BYTE *)(v7 + v4) = -2;
  do
  {
    do
    {
      v11 = *(_QWORD *)(v1 + 8);
      v12 = *(_QWORD *)v1;
      if (*(_QWORD *)v1 >= v2)
        v13 = v2;
      else
        v13 = *(_QWORD *)v1;
    }
    while (v11 == -1);
    if ((v11 & 1) != 0)
    {
      v8 = v11 + 1;
      goto LABEL_11;
    }
    v8 = *(_QWORD *)(v1 + 8);
    if (v12 <= v2)
      break;
LABEL_11:
    v9 = __ldxp((unsigned __int128 *)v1);
    if ((unint64_t)v9 ^ v12 | *((_QWORD *)&v9 + 1) ^ v11)
    {
      __clrex();
LABEL_15:
      v10 = 0;
      goto LABEL_16;
    }
    if (__stlxp(__PAIR128__(v8, v13), (unsigned __int128 *)v1))
      goto LABEL_15;
    v10 = 1;
LABEL_16:
    __dmb(0xBu);
  }
  while (!v10);
  return result;
}

void pas_bitfit_view_compute_summary(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v4;
  unint64_t StatusReg;
  unsigned int v6;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = (os_unfair_lock_s *)(a1 + 16);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v4->_os_unfair_lock_opaque))
  {
    if (!__stxr(v6, &v4->_os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
LABEL_6:
  v8 = pas_bitfit_page_config_kind_for_config_table[*(unsigned __int8 *)(((8 * *(unsigned __int16 *)(a1 + 8)) | ((unint64_t)*(unsigned __int8 *)(a1 + 10) << 19))
                                                                       + pas_compact_heap_reservation_base
                                                                       + 124)];
  v9 = *(_BYTE *)(v8 + 28);
  v10 = *(_QWORD *)(v8 + 32);
  v11 = *(uint64_t (**)(_QWORD))(v8 + 56);
  v12 = *(_QWORD *)(v8 + 104);
  v13 = *(_QWORD *)(v8 + 112);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  if (*(_BYTE *)(a1 + 11))
  {
    v14 = (unsigned __int8 *)v11(*(_QWORD *)a1);
    pas_page_base_compute_committed_when_owned(v14, (uint64_t)&v23);
    v15 = 1 << v9;
    v16 = -(1 << v9);
    v17 = ((1 << v9) + v12 - 1) & v16;
    v18 = (v13 + v12) & v16;
    pas_page_base_add_free_range(v14, &v23, 0, v17, 1);
    pas_page_base_add_free_range(v14, &v23, v18, v10, 1);
    for (; v17 < v18; v17 += v15)
    {
      while (((*(_DWORD *)&v14[((v17 >> v9 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 16] >> (v17 >> v9)) & 1) == 0)
      {
        *((_QWORD *)&v23 + 1) += v15;
        v17 += v15;
        if (v17 >= v18)
          goto LABEL_14;
      }
      pas_page_base_add_free_range(v14, &v23, v17, v17 + v15, 0);
    }
  }
  else
  {
    *(_QWORD *)&v25 = v10;
    *(_QWORD *)&v23 = ((v13 + v12) & -(1 << v9)) - (((1 << v9) + v12 - 1) & -(1 << v9));
    *((_QWORD *)&v26 + 1) = v23;
  }
LABEL_14:
  v19 = v26;
  *(_OWORD *)(a2 + 32) = v25;
  *(_OWORD *)(a2 + 48) = v19;
  *(_OWORD *)(a2 + 64) = v27;
  *(_QWORD *)(a2 + 80) = v28;
  v20 = v24;
  *(_OWORD *)a2 = v23;
  *(_OWORD *)(a2 + 16) = v20;
  v21 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v22 = __ldxr(&v4->_os_unfair_lock_opaque);
    if (v22 != v21)
      break;
    if (!__stlxr(0, &v4->_os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(v4);
}

uint64_t pas_bootstrap_free_heap_try_allocate_with_alignment(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  int64x2_t v16;
  void (*v17)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, _QWORD *@<X8>);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 <= 8)
    v9 = 8;
  else
    v9 = a2;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v16 = vdupq_n_s64(1uLL);
  v17 = bootstrap_source_allocate_aligned;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v10 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, a1, v9, a3, &v16);
  v11 = v10;
  v13 = v12;
  if (v10 && pas_allocation_callback)
    pas_allocation_callback(v10, a1, 0, a4, a5);
  if (!(_DWORD)a5 && (v13 & 1) != 0)
  {
    pas_bootstrap_free_heap_num_allocated_object_bytes += a1;
    v14 = pas_bootstrap_free_heap_num_allocated_object_bytes;
    if (pas_bootstrap_free_heap_num_allocated_object_bytes <= (unint64_t)pas_bootstrap_free_heap_num_allocated_object_bytes_peak)
      v14 = pas_bootstrap_free_heap_num_allocated_object_bytes_peak;
    pas_bootstrap_free_heap_num_allocated_object_bytes_peak = v14;
  }
  return v11;
}

int64x2_t initialize_config(int64x2_t *a1)
{
  int64x2_t result;

  result = vdupq_n_s64(1uLL);
  *a1 = result;
  a1[1].i64[0] = (uint64_t)bootstrap_source_allocate_aligned;
  a1[1].i64[1] = 0;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  return result;
}

uint64_t pas_bootstrap_free_heap_hold_lock_and_allocate_for_config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int64x2_t v17;
  void (*v18)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, _QWORD *@<X8>);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v7, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_6:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v17 = vdupq_n_s64(1uLL);
  v18 = bootstrap_source_allocate_aligned;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v9 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, a1, 8, 0, &v17);
  v10 = v9;
  v12 = v11;
  if (v9 && pas_allocation_callback)
    pas_allocation_callback(v9, a1, 0, a2, a3);
  if (!(_DWORD)a3 && (v12 & 1) != 0)
  {
    pas_bootstrap_free_heap_num_allocated_object_bytes += a1;
    v13 = pas_bootstrap_free_heap_num_allocated_object_bytes;
    if (pas_bootstrap_free_heap_num_allocated_object_bytes <= (unint64_t)pas_bootstrap_free_heap_num_allocated_object_bytes_peak)
      v13 = pas_bootstrap_free_heap_num_allocated_object_bytes_peak;
    pas_bootstrap_free_heap_num_allocated_object_bytes_peak = v13;
  }
  v14 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v15 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v15 != v14)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v10;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v10;
}

void pas_bootstrap_free_heap_hold_lock_and_deallocate_for_config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg;
  unsigned int v7;
  int v9;
  unsigned int v10;
  int64x2_t v11;
  void (*v12)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, _QWORD *@<X8>);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v7 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v7, &pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!a2)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
    if (!a2)
      goto LABEL_12;
LABEL_8:
    if (pas_deallocation_callback)
      pas_deallocation_callback(a1, a2, 0, a3);
    v11 = vdupq_n_s64(1uLL);
    v12 = bootstrap_source_allocate_aligned;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    pas_simple_large_free_heap_deallocate(&pas_bootstrap_free_heap, a1, a1 + a2, 0, &v11);
    if (!(_DWORD)a3)
      pas_bootstrap_free_heap_num_allocated_object_bytes -= a2;
LABEL_12:
    v9 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v10 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v10 != v9)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

uint64_t pas_bootstrap_free_heap_allocate_simple_for_config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  int64x2_t v12;
  void (*v13)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, _QWORD *@<X8>);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v12 = vdupq_n_s64(1uLL);
  v13 = bootstrap_source_allocate_aligned;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v6 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, a1, 8, 0, &v12);
  v7 = v6;
  v9 = v8;
  if (v6 && pas_allocation_callback)
    pas_allocation_callback(v6, a1, 0, a2, a3);
  if (!(_DWORD)a3 && (v9 & 1) != 0)
  {
    pas_bootstrap_free_heap_num_allocated_object_bytes += a1;
    v10 = pas_bootstrap_free_heap_num_allocated_object_bytes;
    if (pas_bootstrap_free_heap_num_allocated_object_bytes <= (unint64_t)pas_bootstrap_free_heap_num_allocated_object_bytes_peak)
      v10 = pas_bootstrap_free_heap_num_allocated_object_bytes_peak;
    pas_bootstrap_free_heap_num_allocated_object_bytes_peak = v10;
  }
  return v7;
}

void pas_bootstrap_free_heap_deallocate_for_config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int64x2_t v6;
  void (*v7)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, _QWORD *@<X8>);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v3 = a3;
    if (a1 && pas_deallocation_callback)
      pas_deallocation_callback(a1, a2, 0, a3);
    v6 = vdupq_n_s64(1uLL);
    v7 = bootstrap_source_allocate_aligned;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    pas_simple_large_free_heap_deallocate(&pas_bootstrap_free_heap, a1, a1 + a2, 0, &v6);
    if (!v3)
      pas_bootstrap_free_heap_num_allocated_object_bytes -= a2;
  }
}

void bootstrap_source_allocate_aligned(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  pas_page_malloc_try_allocate_without_deallocating_padding(a1, a2, a3, (uint64_t)a4);
  if (*a4)
    pas_enumerable_range_list_append(pas_enumerable_page_malloc_page_list, a4[2], a4[5] + a4[4]);
}

uint64_t pas_bootstrap_heap_page_provider(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v11[3];

  memset(&v11[1], 0, 32);
  if (a2 <= 8)
    v7 = 8;
  else
    v7 = a2;
  v11[0] = 0uLL;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  initialize_config(v11);
  v8 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, a1, v7, a3, v11);
  v9 = v8;
  if (v8 && pas_allocation_callback)
    pas_allocation_callback(v8, a1, 0, a4, 1);
  return v9;
}

BOOL pas_coalign(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;

  if (a3 > a1)
    v4 = a1;
  else
    v4 = a3;
  if (a3 > a1)
    v5 = a2;
  else
    v5 = a4;
  if (a3 > a1)
    v6 = a4;
  else
    v6 = a2;
  if (a3 > a1)
    v7 = a3;
  else
    v7 = a1;
  v8 = v7 - v4;
  v9 = v8 % v6;
  if (v6 == 1)
  {
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v10 = v5;
    v11 = v6;
    if (v5)
    {
      v10 = v5;
      v11 = v5;
      if (v5 != 1)
      {
        v12 = 0;
        v13 = 1;
        v14 = v5;
        v15 = v6;
        do
        {
          v11 = v14;
          v10 = v13;
          v16 = v15 / v14;
          v14 = v15 % v14;
          v13 = v12 - v16 * v10;
          v15 = v11;
          v12 = v10;
        }
        while (v14);
      }
    }
  }
  if (v9 % v11)
    return 0;
  v18 = v6 * v5 / v11;
  v19 = (((v18 / v5) & (((uint64_t)(v9 / v11 * v10) % (uint64_t)(v18 / v5)) >> 63))
       + (uint64_t)(v9 / v11 * v10) % (uint64_t)(v18 / v5))
      * v5;
  return !__CFADD__(v19 + (v18 + v8 + ~v19) / v18 * v18, v4);
}

double initialize_config_0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_OWORD *)a1 = xmmword_19919FCA0;
  *(_QWORD *)(a1 + 16) = compact_bootstrap_source_allocate_aligned;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

double compact_bootstrap_source_allocate_aligned@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  double result;
  uint64_t v16[7];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = pas_compact_heap_reservation_base;
  if (pas_compact_heap_reservation_base)
  {
    v7 = pas_compact_heap_reservation_available_size;
    v8 = pas_compact_heap_reservation_bump;
  }
  else
  {
    pas_page_malloc_try_allocate_without_deallocating_padding(pas_compact_heap_reservation_size, 1, 0, (uint64_t)v16);
    v8 = pas_compact_heap_reservation_guard_size;
    v6 = v16[0] - pas_compact_heap_reservation_guard_size;
    pas_compact_heap_reservation_base = v16[0] - pas_compact_heap_reservation_guard_size;
    v7 = pas_compact_heap_reservation_size - pas_compact_heap_reservation_guard_size;
    pas_compact_heap_reservation_available_size = pas_compact_heap_reservation_size
                                                - pas_compact_heap_reservation_guard_size;
    pas_compact_heap_reservation_bump = pas_compact_heap_reservation_guard_size;
  }
  v9 = v6 + v7;
  v10 = v6 + v8;
  v11 = (a2 + v10 - 1) & -a2;
  v13 = v9 >= v11;
  v12 = v9 - v11;
  v13 = v13 && v11 >= v10;
  if (v13 && v12 >= a1)
  {
    pas_compact_heap_reservation_bump = v11 + a1 - v6;
    *a3 = v11;
    a3[1] = a1;
    a3[2] = v10;
    a3[3] = v11 - v10;
    a3[4] = v11 + a1;
    a3[5] = 0;
    *(_QWORD *)&result = 1;
    a3[6] = 1;
  }
  else
  {
    a3[6] = 0;
    result = 0.0;
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t pas_compact_expendable_memory_allocate(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _OWORD v9[3];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = pas_compact_expendable_memory_payload;
  if (!pas_compact_expendable_memory_payload)
  {
    memset(v9, 0, sizeof(v9));
    os_unfair_lock_assert_owner(&pas_heap_lock);
    initialize_config_0((uint64_t)v9);
    v7 = try_allocate_without_fixing(&pas_compact_bootstrap_free_heap, 0x1400000uLL, 0x4000uLL, 0, (unint64_t *)v9);
    v6 = v7;
    if (v7 && pas_allocation_callback)
      pas_allocation_callback(v7, 20971520, 1, "pas_large_expendable_memory", 1);
    pas_compact_expendable_memory_payload = v6;
    pas_compact_expendable_memory_header = 0x140000000000000;
    memset_pattern16(&dword_1ECF551E8, &memset_pattern_5, 0x2800uLL);
  }
  return pas_expendable_memory_try_allocate((unsigned int *)&pas_compact_expendable_memory_header, v6, a1, a2, 5, a3);
}

uint64_t pas_compact_expendable_memory_commit_if_necessary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v4 = pas_compact_expendable_memory_payload;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v5 = (unint64_t)(a1 - v4 - 8) >> 14;
  v6 = (unint64_t)(a2 + a1 - v4 - 1) >> 14;
  v7 = *(_QWORD *)(a1 - 8);
  v8 = &pas_compact_expendable_memory_header[v5];
  v10 = v8[1];
  v9 = v8 + 1;
  v11 = v10 >> 3;
  if (v5 == v6
    || (v14 = &pas_compact_expendable_memory_header[v6], v17 = v14[1], v16 = v14 + 1, v15 = v17, (v17 & 7) == 1))
  {
    if (v11 != v7)
    {
      os_unfair_lock_assert_owner(&pas_heap_lock);
      v13 = ++pas_expendable_memory_version_counter;
      *v9 = (8 * pas_expendable_memory_version_counter) | 2;
      *(_QWORD *)(a1 - 8) = v13;
      return 1;
    }
    return 0;
  }
  v18 = v15 >> 3;
  if (v11 == v7 && v18 == v7)
    return 0;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v20 = ++pas_expendable_memory_version_counter;
  v21 = (8 * pas_expendable_memory_version_counter) | 2;
  *v9 = v21;
  *v16 = v21;
  *(_QWORD *)(a1 - 8) = v20;
  return 1;
}

uint64_t pas_compute_summary_live_object_callback(unint64_t a1, unint64_t a2, int64x2_t *a3)
{
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  uint64_t v10;
  int64x2_t v12[5];
  uint64_t v13;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  pas_large_sharing_pool_compute_summary(a1, a2, 1, 1, v12[0].i64);
  v6 = vaddq_s64(a3[1], v12[1]);
  v7 = vaddq_s64(a3[2], v12[2]);
  v8 = vaddq_s64(a3[3], v12[3]);
  v9 = vaddq_s64(a3[4], v12[4]);
  v10 = a3[5].i64[0] + v13;
  *a3 = vaddq_s64(*a3, v12[0]);
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v8;
  a3[4] = v9;
  a3[5].i64[0] = v10;
  return 1;
}

uint64_t pas_compute_summary_live_object_callback_without_physical_sharing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = *(_QWORD *)(a3 + 24) + a2 - a1;
  *(_QWORD *)(a3 + 8) += a2 - a1;
  *(_QWORD *)(a3 + 24) = v6;
  return 1;
}

uint64_t pas_compute_summary_dead_object_callback(_QWORD *a1, int64x2_t *a2)
{
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  uint64_t v8;
  int64x2_t v10[5];
  uint64_t v11;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  pas_large_sharing_pool_compute_summary(*a1 & 0xFFFFFFFFFFFFLL, a1[1] & 0xFFFFFFFFFFFFLL, 2, 1, v10[0].i64);
  v4 = vaddq_s64(a2[1], v10[1]);
  v5 = vaddq_s64(a2[2], v10[2]);
  v6 = vaddq_s64(a2[3], v10[3]);
  v7 = vaddq_s64(a2[4], v10[4]);
  v8 = a2[5].i64[0] + v11;
  *a2 = vaddq_s64(*a2, v10[0]);
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  a2[5].i64[0] = v8;
  return 1;
}

uint64_t pas_compute_summary_dead_object_callback_without_physical_sharing(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v4 = (a1[1] & 0xFFFFFFFFFFFFLL) - (*a1 & 0xFFFFFFFFFFFFLL);
  v5 = v4 + *a2;
  v6 = v4 + a2[3];
  v7 = a2[5] + v4;
  *a2 = v5;
  a2[3] = v6;
  a2[5] = v7;
  return 1;
}

unint64_t pas_create_basic_heap_page_caches_with_reserved_memory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg;
  unsigned int v7;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int64x2_t v14;
  double (*v15)@<D0>(uint64_t@<X8>);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v7, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_6:
  v9 = pas_immortal_heap_allocate(0x20uLL, (uint64_t)"pas_reserved_memory_provider", 0);
  v14 = vdupq_n_s64(1uLL);
  v15 = null_aligned_allocator;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  pas_simple_large_free_heap_deallocate((uint64_t *)v9, a2, a3, 1u, &v14);
  v10 = pas_immortal_heap_allocate(0xE0uLL, (uint64_t)"pas_basic_heap_page_caches", 0);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 32) = pas_reserved_memory_provider_try_allocate;
  *(_QWORD *)(v10 + 40) = v9;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 80) = allocate_from_large;
  *(_QWORD *)(v10 + 88) = 0;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_QWORD *)(v10 + 144) = allocate_from_large;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_QWORD *)(v10 + 184) = 0;
  *(_QWORD *)(v10 + 192) = allocate_from_large;
  *(_QWORD *)(v10 + 200) = 0;
  *(_DWORD *)(v10 + 96) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 96);
  *(_DWORD *)(v10 + 100) = 2;
  *(_QWORD *)(v10 + 104) = 0;
  *(_DWORD *)(v10 + 208) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 208);
  *(_DWORD *)(v10 + 212) = 2;
  *(_QWORD *)(v10 + 216) = 0;
  v11 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v12 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v12 != v11)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v10;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v10;
}

unint64_t allocate_from_large(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;

  v6 = pas_heap_config_kind_for_config_table[*(_BYTE *)(a5 + 83) & 0x3F];
  v8 = a2;
  v9 = a1;
  return allocate_impl(a5 + 40, &v9, &v8, v6, a6);
}

uint64_t pas_try_deallocate_known_large(unint64_t a1, uint64_t a2, int a3)
{
  unint64_t StatusReg;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v18;
  unsigned int v19;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_DWORD *)(StatusReg + 24);
  do
  {
    if (__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
      if ((pas_large_heap_try_deallocate(a1, a2) & 1) != 0)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  while (__stxr(v7, &pas_heap_lock._os_unfair_lock_opaque));
  if ((pas_large_heap_try_deallocate(a1, a2) & 1) != 0)
    goto LABEL_9;
LABEL_7:
  if (a3)
  {
    if (a3 == 1)
      pas_deallocation_did_fail((uint64_t)"Large heap did not find object", a1, v9, v10, v11, v12, v13, v14);
LABEL_9:
    v15 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v16 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v16 != v15)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_14;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
LABEL_14:
    pas_scavenger_notify_eligibility_if_needed();
    return 1;
  }
  v18 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v19 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v19 != v18)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return 0;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return 0;
}

uint64_t pas_try_deallocate_pgm_large(unint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int v4;
  unsigned int v7;
  int v8;
  unsigned int i;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  if (!*(_BYTE *)(a2 + 1136))
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v4, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_8;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_8:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (!pas_pgm_hash_map)
  {
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  v7 = (a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4));
  v8 = ((a1 >> 36) ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * ((a1 >> 36) ^ HIDWORD(a1));
  for (i = v7 ^ ((v8 ^ v7) >> 11) ^ v8; ; ++i)
  {
    v10 = i & dword_1EE3451DC;
    v11 = (_QWORD *)(pas_pgm_hash_map + 16 * v10);
    if (*v11 != -1)
      break;
    if (v11[1] != 1)
      goto LABEL_16;
LABEL_11:
    ;
  }
  if (*v11 != a1)
    goto LABEL_11;
  if (!*(_QWORD *)(pas_pgm_hash_map + 16 * v10 + 8))
    goto LABEL_16;
  pas_probabilistic_guard_malloc_deallocate(a1);
  v12 = 1;
LABEL_17:
  v13 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v14 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v14 != v13)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v12;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v12;
}

void pas_deallocate_known_large(unint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v5, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_6:
  if ((pas_large_heap_try_deallocate(a1, a2) & 1) == 0)
    pas_deallocation_did_fail((uint64_t)"Large heap did not find object", a1, v7, v8, v9, v10, v11, v12);
  v13 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v14 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v14 != v13)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_10;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_10:
  pas_scavenger_notify_eligibility_if_needed();
}

uint64_t pas_try_deallocate_slow_no_cache(unint64_t ptr, uint64_t a2, int a3)
{
  int v6;
  unint64_t StatusReg;
  unsigned int v9;
  _BYTE *SlowCase;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int i;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  void (*v31)(void);

  v6 = *(_DWORD *)(a2 + 8);
  if (v6 != 1 && v6 != 3)
  {
    if (v6 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x198FBF8DCLL);
    }
    if (bmalloc::debugHeapCache != 1)
    {
      if (bmalloc::debugHeapCache)
      {
LABEL_27:
        pas_debug_heap_free((void *)ptr);
        return 1;
      }
      SlowCase = (_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
      if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
        SlowCase = (_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
      if (*SlowCase)
      {
        v12 = bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
        if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
          v12 = bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
        bmalloc::debugHeapCache = v12;
        if (!v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198FBF8E4);
        }
        goto LABEL_27;
      }
      bmalloc::debugHeapCache = 1;
    }
  }
  if (*MEMORY[0x1E0C83EB8])
  {
    pas_msl_free_logging_slow(ptr);
    if (!pthread_self_is_exiting_np())
    {
LABEL_8:
      if (pas_msl_is_enabled_flag_value)
      {
        if (pas_msl_is_enabled_flag_value != 2
          || (pthread_once(&pas_compute_msl_is_enabled_key, (void (*)(void))compute_msl_status),
              pas_msl_is_enabled_flag_value))
        {
          if (!*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752))
            pas_thread_local_cache_get_slow(a2, 0);
        }
      }
    }
  }
  else if (!pthread_self_is_exiting_np())
  {
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a2 + 1136))
  {
LABEL_43:
    v22 = (*(uint64_t (**)(unint64_t))(a2 + 992))(ptr);
    if (!v22)
      goto LABEL_49;
LABEL_44:
    if (v22 != 2)
    {
      if (v22 == 1)
      {
LABEL_46:
        v23 = a2 + 56;
LABEL_47:
        deallocate_segregated(ptr, v23, 1);
        return 1;
      }
      return 0;
    }
    if (*(_BYTE *)(a2 + 504) && *(_BYTE *)(a2 + 1001))
    {
      v27 = *(unsigned __int8 *)(a2 + 1000);
      v28 = *(unsigned __int8 *)(a2 + 56);
      v29 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(a2 + 560))(-*(_QWORD *)(a2 + 536) & ptr);
      if (!v28 || !v27 || (v30 = *v29, v30 == 5))
      {
LABEL_62:
        v31 = *(void (**)(void))(a2 + 640);
LABEL_63:
        v31();
        return 1;
      }
      if (v30 != 1)
        return 0;
    }
    else
    {
      (*(void (**)(unint64_t))(a2 + 112))(-*(_QWORD *)(a2 + 88) & ptr);
    }
LABEL_60:
    v26 = a2 + 56;
LABEL_61:
    deallocate_segregated(ptr, v26, 0);
    return 1;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v9, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_29;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_29:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (!pas_pgm_hash_map)
    goto LABEL_40;
  v13 = (ptr ^ (ptr >> 4) ^ 0xDEADBEEF) + 32 * (ptr ^ (ptr >> 4));
  v14 = ((ptr >> 36) ^ HIDWORD(ptr) ^ 0xDEADBEEF) + 32 * ((ptr >> 36) ^ HIDWORD(ptr));
  for (i = v13 ^ ((v14 ^ v13) >> 11) ^ v14; ; ++i)
  {
    v16 = i & dword_1EE3451DC;
    v17 = (_QWORD *)(pas_pgm_hash_map + 16 * v16);
    if (*v17 != -1)
      break;
    if (v17[1] != 1)
      goto LABEL_40;
LABEL_32:
    ;
  }
  if (*v17 != ptr)
    goto LABEL_32;
  if (*(_QWORD *)(pas_pgm_hash_map + 16 * v16 + 8))
  {
    pas_probabilistic_guard_malloc_deallocate(ptr);
    v18 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v19 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v19 != v18)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return 1;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
    return 1;
  }
LABEL_40:
  v20 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v21 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v21 != v20)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_43;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  v22 = (*(uint64_t (**)(unint64_t))(a2 + 992))(ptr);
  if (v22)
    goto LABEL_44;
LABEL_49:
  v25 = (_BYTE *)(*(uint64_t (**)(unint64_t))(a2 + 1008))(ptr);
  if (v25)
  {
    switch(*v25)
    {
      case 1:
        goto LABEL_60;
      case 2:
        goto LABEL_46;
      case 3:
        v26 = a2 + 280;
        goto LABEL_61;
      case 4:
        v23 = a2 + 280;
        goto LABEL_47;
      case 5:
        goto LABEL_62;
      case 6:
        v31 = *(void (**)(void))(a2 + 800);
        goto LABEL_63;
      case 7:
        v31 = *(void (**)(void))(a2 + 960);
        goto LABEL_63;
      default:
        return 0;
    }
  }
  if (!ptr)
    return 1;
  return pas_try_deallocate_known_large(ptr, a2, a3);
}

void deallocate_segregated(unint64_t a1, uint64_t a2, int a3)
{
  char v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_t v21;
  unint64_t v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  const os_unfair_lock *v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int128 *v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  char v62;

  v5 = *(_BYTE *)(a2 + 28);
  v7 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v8 = *(_DWORD *)(a2 + 100);
  v62 = *(_BYTE *)(a2 + 112);
  v61 = *(_QWORD *)(a2 + 120);
  v9 = *(unsigned __int8 *)(a2 + 169);
  v10 = *(unsigned __int8 *)(a2 + 170);
  v11 = *(unsigned __int8 *)(a2 + 171);
  v12 = (*(uint64_t (**)(unint64_t))(a2 + 56))(-(uint64_t)v7 & a1);
  v20 = v12;
  if (v8 == 1)
  {
    v21 = 0;
  }
  else
  {
    v14 = *(os_unfair_lock_s **)(v12 + 8);
    if (v14)
      v21 = pas_segregated_page_switch_lock_slow(v12, 0, v14);
    else
      v21 = 0;
  }
  v22 = v20 + 4 * (((v7 >> (v5 + 5)) - 1) & (a1 >> (v5 + 5)));
  v25 = *(_DWORD *)(v22 + 44);
  v24 = (int *)(v22 + 44);
  v23 = v25;
  v26 = 1 << (a1 >> v5);
  if (v9 && (v23 & v26) == 0)
    pas_segregated_page_deallocation_did_fail(a1, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
  v27 = v23 & ~v26;
  *v24 = v27;
  if (a3)
  {
    if (a3 != 1)
    {
      v28 = v27 != 0;
      goto LABEL_14;
    }
    v10 = v11;
  }
  v28 = v27 != 0;
  if (v10 && v27)
  {
    v28 = 1;
    goto LABEL_34;
  }
LABEL_14:
  v29 = *(_QWORD *)(v20 + 32);
  if (a3)
  {
    if (a3 == 1 && (v29 & 7) != 0)
    {
      v30 = v29 & 0xFFFFFFFFFFFFFFF8;
      if (*(_BYTE *)(v20 + 1))
        *(_BYTE *)(v20 + 2) = 1;
      else
        pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v30 + 8)) | ((unint64_t)*(unsigned __int8 *)(v30 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v30 + 12));
      *(_QWORD *)(v20 + 32) = v30;
    }
  }
  else
  {
    v31 = *(unsigned int *)((v29 & 0xFFFFFFFFFFFFFFF8) + 4 * (((v7 - 1) & a1) >> v5 >> v62) + 20);
    if ((_DWORD)v31)
      v32 = pas_compact_heap_reservation_base + 8 * v31;
    else
      v32 = 0;
    v33 = *(_BYTE *)(v32 + 19);
    if ((v33 & 4) == 0)
    {
      v34 = *(const os_unfair_lock **)(v20 + 8);
      if (v34)
      {
        os_unfair_lock_assert_owner(v34);
        v33 = *(_BYTE *)(v32 + 19);
      }
      if ((v33 & 1) != 0)
      {
        v36 = v33 | 2;
      }
      else
      {
        if ((v32 & 3) != 0)
          v35 = 0;
        else
          v35 = *(unsigned __int8 *)((v32 & 0xFFFFFFFFFFFFFFF8) + 16);
        pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v32 + 7)) | ((unint64_t)*(unsigned __int8 *)(v32 + 9) << 19))+ pas_compact_heap_reservation_base, v35);
        v36 = *(_BYTE *)(v32 + 19);
      }
      *(_BYTE *)(v32 + 19) = v36 | 4;
    }
  }
LABEL_34:
  if (v7 <= v6)
    goto LABEL_50;
  v37 = (v7 - 1) & a1;
  v38 = *(_QWORD *)(v20 + 32);
  if ((v38 & 6) != 0)
  {
    v39 = *(unsigned int *)((v38 & 0xFFFFFFFFFFFFFFF8) + 4 * (v37 >> v5 >> v62) + 20);
    if ((_DWORD)v39)
      v40 = pas_compact_heap_reservation_base + 8 * v39;
    else
      v40 = 0;
    v41 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v40 + 7)) | ((unint64_t)*(unsigned __int8 *)(v40 + 9) << 19))
                    + pas_compact_heap_reservation_base
                    + 24) & 0x7FFFFFF;
    if (!v41)
    {
LABEL_43:
      v44 = 1;
      if (!pas_segregated_page_deallocate_should_verify_granules)
        goto LABEL_45;
      goto LABEL_44;
    }
  }
  else
  {
    v41 = *(_DWORD *)(v20 + 4);
    if (!v41)
      goto LABEL_43;
  }
  v42 = v37 / v6;
  v43 = (v37 + v41 - 1) / v6;
  if (v42 > v43)
    goto LABEL_43;
  v58 = 0;
  v59 = v20 + 4 * ((unint64_t)(v61 + 31) >> 5) + 44;
  do
  {
    v60 = *(_BYTE *)(v59 + v42) - 1;
    *(_BYTE *)(v59 + v42) = v60;
    if (!v60)
      v58 = 1;
    ++v42;
  }
  while (v42 <= v43);
  v44 = v58 == 0;
  if (pas_segregated_page_deallocate_should_verify_granules)
LABEL_44:
    pas_segregated_page_verify_granules((unsigned __int8 *)v20);
LABEL_45:
  if (v44)
    goto LABEL_50;
  v45 = (unsigned int *)timebase_info_ptr;
  if (!timebase_info_ptr)
  {
    get_timebase_info_slow();
    v46 = mach_approximate_time();
    v47 = timebase_info;
    v48 = *(unsigned int *)algn_1ECF57B54;
    if ((pas_get_epoch_first & 1) != 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  v46 = mach_approximate_time();
  v47 = *v45;
  v48 = v45[1];
  if ((pas_get_epoch_first & 1) == 0)
LABEL_48:
    pas_get_epoch_first = 1;
LABEL_49:
  *(_QWORD *)(v20 + 16) = v46 * v47 / v48;
  pas_segregated_view_note_emptiness(*(_QWORD *)(v20 + 32), v20);
LABEL_50:
  if (v28)
    goto LABEL_53;
  if (*(_QWORD *)(v20 + 24) == 1)
  {
    v49 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v50 = mach_approximate_time();
      v52 = *v49;
      v51 = v49[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_58:
        v53 = v50 * v52;
        v54 = (unsigned __int128 *)(v20 + 16);
        v55 = v53 / v51;
        do
          __ldxp(v54);
        while (__stxp(v55, v54));
        pas_segregated_view_note_emptiness(*(_QWORD *)(v20 + 32), v20);
        if (!v21)
          return;
        goto LABEL_61;
      }
    }
    else
    {
      get_timebase_info_slow();
      v50 = mach_approximate_time();
      v52 = timebase_info;
      v51 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_58;
    }
    pas_get_epoch_first = 1;
    goto LABEL_58;
  }
  --*(_QWORD *)(v20 + 24);
LABEL_53:
  if (!v21)
    return;
LABEL_61:
  v56 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v57 = __ldxr(&v21->_os_unfair_lock_opaque);
    if (v57 != v56)
      break;
    if (!__stlxr(0, &v21->_os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(v21);
}

uint64_t pas_deferred_decommit_log_add(_QWORD *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  unsigned int v10;
  uint64_t v12;
  _QWORD *v13;
  os_unfair_lock_s **v14;
  uint64_t result;
  unsigned int v16;
  __int128 v18;
  _OWORD v19[2];

  v6 = *(os_unfair_lock_s **)(a2 + 16);
  if (!v6)
    goto LABEL_28;
  v7 = a1[134];
  v8 = v7 - 1;
  while (v8 != -1)
  {
    v9 = *(os_unfair_lock_s **)(a1[133] + 8 * v8--);
    if (v9 == v6)
      goto LABEL_28;
  }
  if (v6 == (os_unfair_lock_s *)&pas_virtual_range_common_lock)
  {
    v12 = a1[132];
    if (v12)
    {
      v13 = a1 + 132;
LABEL_27:
      *v13 = v12 + 1;
LABEL_28:
      v18 = *(_OWORD *)(a2 + 16);
      v19[0] = *(_OWORD *)a2;
      v19[1] = v18;
      pas_deferred_decommit_log_add_already_locked((uint64_t)a1, v19, a3);
      return 1;
    }
  }
  if (!a3 && !v7 && !*a1)
  {
    v16 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&v6->_os_unfair_lock_opaque))
    {
      if (!__stxr(v16, &v6->_os_unfair_lock_opaque))
        goto LABEL_25;
    }
    __clrex();
    os_unfair_lock_lock(v6);
LABEL_25:
    if (v6 != (os_unfair_lock_s *)&pas_virtual_range_common_lock)
      goto LABEL_28;
    v13 = a1 + 132;
    v12 = a1[132];
    goto LABEL_27;
  }
  v10 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (!__ldaxr(&v6->_os_unfair_lock_opaque))
  {
    if (!__stxr(v10, &v6->_os_unfair_lock_opaque))
      goto LABEL_25;
  }
  __clrex();
  v14 = (os_unfair_lock_s **)a1[135];
  if (!v14 || *v14)
    return 0;
  result = 0;
  *v14 = v6;
  return result;
}

__n128 pas_deferred_decommit_log_add_already_locked(uint64_t a1, _QWORD *a2, int a3)
{
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __n128 result;
  __n128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  *(_QWORD *)(a1 + 1048) += a2[1] - *a2;
  if (a3)
  {
    if (a3 == 1)
    {
      v4 = pas_bootstrap_free_heap_deallocate_for_config;
      v5 = pas_bootstrap_free_heap_allocate_simple_for_config;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
  }
  else
  {
    v4 = pas_bootstrap_free_heap_hold_lock_and_deallocate_for_config;
    v5 = pas_bootstrap_free_heap_hold_lock_and_allocate_for_config;
  }
  v6 = *a2;
  v25 = *(__n128 *)(a2 + 1);
  v26 = a2[3];
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 1040);
  if (*(_QWORD *)a1 >= (unint64_t)(v8 + 32))
  {
    if ((unint64_t)(2 * v8) <= 4)
      v9 = 4;
    else
      v9 = 2 * v8;
    v10 = (void *)v5(32 * v9, (uint64_t)"pas_virtual_range_min_heap/outline_array", 0);
    bzero(v10, 32 * v9);
    memcpy(v10, *(const void **)(a1 + 1032), 32 * v7 - 1024);
    v4(*(_QWORD *)(a1 + 1032), 32 * v8, 0);
    *(_QWORD *)(a1 + 1032) = v10;
    *(_QWORD *)(a1 + 1040) = v9;
  }
  v11 = v7 + 1;
  if (v7 > 0x1F)
  {
    v13 = *(_QWORD *)(a1 + 1032) + 32 * v7;
    *(_OWORD *)(v13 - 1024) = 0u;
    *(_OWORD *)(v13 - 1008) = 0u;
    *(_QWORD *)a1 = v11;
    if (v11 < 2)
      goto LABEL_25;
  }
  else
  {
    v12 = (_OWORD *)(a1 + 32 * v7 + 8);
    *v12 = 0u;
    v12[1] = 0u;
    *(_QWORD *)a1 = v11;
    if (v11 < 2)
      goto LABEL_25;
  }
  v14 = a1 + 8;
  while (1)
  {
    v17 = v11 >> 1;
    v18 = (v11 >> 1) - 1;
    v19 = v18 > 0x1F ? *(_QWORD *)(a1 + 1032) + 32 * v18 - 1024 : v14 + 32 * v18;
    v20 = *(_QWORD *)v19;
    v27 = *(_OWORD *)(v19 + 8);
    v28 = *(_QWORD *)(v19 + 24);
    if (v6 >= *(_QWORD *)v19)
      break;
    v21 = v11 - 1;
    if (v11 > 0x20)
      v15 = *(_QWORD *)(a1 + 1032) + 32 * v21 - 1024;
    else
      v15 = v14 + 32 * v21;
    *(_QWORD *)v15 = v20;
    *(_OWORD *)(v15 + 8) = v27;
    *(_QWORD *)(v15 + 24) = v28;
    v16 = v11 > 3;
    v11 >>= 1;
    if (!v16)
      goto LABEL_26;
  }
LABEL_25:
  v17 = v11;
LABEL_26:
  v22 = v17 - 1;
  if (v17 - 1 > 0x1F)
    v23 = *(_QWORD *)(a1 + 1032) + 32 * v22 - 1024;
  else
    v23 = a1 + 32 * v22 + 8;
  *(_QWORD *)v23 = v6;
  result = v25;
  *(__n128 *)(v23 + 8) = v25;
  *(_QWORD *)(v23 + 24) = v26;
  return result;
}

void decommit_all(uint64_t a1, char a2)
{
  unint64_t v3;
  __int128 *v4;
  unint64_t v5;
  __int128 *v6;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  size_t v44;
  unint64_t StatusReg;
  unint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_88;
  v4 = (__int128 *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  while (2)
  {
    v55 = *v4;
    v56 = *(_OWORD *)(a1 + 24);
    v7 = v5 - 1;
    if (v5 > 0x20)
    {
      v10 = *(_QWORD *)(a1 + 1032) + 32 * v7;
      v8 = (__int128 *)(v10 - 1024);
      v9 = v10 - 1016;
    }
    else
    {
      v8 = &v4[2 * v7];
      v9 = (uint64_t)v8 + 8;
    }
    v11 = *(_QWORD *)v8;
    v58 = *(_OWORD *)v9;
    v60 = *(_QWORD *)(v9 + 16);
    *v8 = 0uLL;
    v8[1] = 0uLL;
    *v4 = 0uLL;
    *(_OWORD *)(a1 + 24) = 0uLL;
    *(_QWORD *)a1 = v7;
    if (v5 == 1)
    {
      v57 = v55;
      v59 = v56;
      v6 = (__int128 *)(a1 + 8);
      goto LABEL_4;
    }
    for (i = 1; ; i = v15)
    {
      v16 = 2 * i;
      v15 = (2 * i) | 1;
      v63 = 0uLL;
      v64 = 0;
      if (v15 <= v7)
      {
        if (v16 > 0x1F)
          v21 = *(_QWORD *)(a1 + 1032) + (i << 6) - 1024;
        else
          v21 = (uint64_t)&v4[4 * i];
        v17 = *(_QWORD *)v21;
        v63 = *(_OWORD *)(v21 + 8);
        v64 = *(_QWORD *)(v21 + 24);
        v18 = v11 <= v17;
        v19 = v16 - 1;
        if (v16 - 1 > 0x1F)
          goto LABEL_16;
      }
      else
      {
        if (v16 > v7)
          goto LABEL_35;
        v17 = 0;
        v18 = 1;
        v19 = v16 - 1;
        if (v16 - 1 > 0x1F)
        {
LABEL_16:
          v20 = *(_QWORD *)(a1 + 1032) + 32 * v19 - 1024;
          goto LABEL_22;
        }
      }
      v20 = (uint64_t)&v4[2 * v19];
LABEL_22:
      v22 = *(_QWORD *)v20;
      v61 = *(_OWORD *)(v20 + 8);
      v62 = *(_QWORD *)(v20 + 24);
      if (v18)
        break;
      if (v11 > v22 && v17 >= v22)
        goto LABEL_31;
      v24 = i - 1;
      if ((unint64_t)(i - 1) > 0x1F)
        v13 = *(_QWORD *)(a1 + 1032) + 32 * v24 - 1024;
      else
        v13 = (uint64_t)&v4[2 * v24];
      *(_QWORD *)v13 = v17;
      v14 = &v63;
LABEL_12:
      *(_OWORD *)(v13 + 8) = *v14;
      *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 2);
    }
    if (v11 > v22)
    {
LABEL_31:
      v25 = i - 1;
      if ((unint64_t)(i - 1) > 0x1F)
        v13 = *(_QWORD *)(a1 + 1032) + 32 * v25 - 1024;
      else
        v13 = (uint64_t)&v4[2 * v25];
      *(_QWORD *)v13 = v22;
      v14 = &v61;
      v15 = v16;
      goto LABEL_12;
    }
LABEL_35:
    v26 = i - 1;
    if ((unint64_t)(i - 1) > 0x1F)
      v27 = *(_QWORD *)(a1 + 1032) + 32 * v26 - 1024;
    else
      v27 = (uint64_t)&v4[2 * v26];
    *(_QWORD *)v27 = v11;
    *(_OWORD *)(v27 + 8) = v58;
    *(_QWORD *)(v27 + 24) = v60;
    v28 = *(_QWORD *)a1;
    v57 = v55;
    v59 = v56;
    if (*(_QWORD *)a1 > 0x1FuLL)
      v6 = (__int128 *)(*(_QWORD *)(a1 + 1032) + 32 * v28 - 1024);
    else
      v6 = &v4[2 * v28];
LABEL_4:
    *v6 = v57;
    v6[1] = v59;
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      continue;
    break;
  }
  *(_QWORD *)a1 = v3;
  if ((a2 & 1) != 0)
  {
    do
    {
      v38 = v3 - 1;
      if (v3 >= 0x21)
        v39 = *(_QWORD *)(a1 + 1032) + 32 * v38 - 1024;
      else
        v39 = (uint64_t)&v4[2 * v38];
      v40 = *(void **)v39;
      v41 = 32 * v3 - 1088;
      v42 = v3;
      while (1)
      {
        v3 = v38;
        v43 = *(_QWORD *)(v39 + 8);
        if (!v38)
          break;
        --v38;
        if (v3 - 1 < 0x20)
        {
          v39 = (uint64_t)&v4[2 * v42 - 4];
          v41 -= 32;
          --v42;
          if (*(_QWORD *)v39 != v43)
            break;
        }
        else
        {
          v39 = *(_QWORD *)(a1 + 1032) + v41;
          v41 -= 32;
          --v42;
          if (*(_QWORD *)v39 != v43)
            break;
        }
      }
      v44 = v43 - (_QWORD)v40;
      while (madvise(v40, v44, 7) == -1 && *__error() == 35)
        ;
    }
    while (v3);
    v3 = *(_QWORD *)a1;
  }
  else
  {
    v29 = v3;
LABEL_43:
    v30 = v29 - 1;
    if (v29 > 0x20)
      v31 = *(_QWORD *)(a1 + 1032) + 32 * v30 - 1024;
    else
      v31 = (uint64_t)&v4[2 * v30];
    v32 = 32 * v29 - 1088;
    v33 = v29;
    while (1)
    {
      v29 = v33 - 1;
      if (v33 == 1)
        break;
      v37 = v33 - 2;
      if (v37 > 0x1F)
        v34 = (uint64_t *)(*(_QWORD *)(a1 + 1032) + v32);
      else
        v34 = (uint64_t *)&v4[2 * v37];
      v35 = *(_QWORD *)(v31 + 8);
      v36 = *v34;
      v32 -= 32;
      v31 = (uint64_t)v34;
      v33 = v29;
      if (v36 != v35)
        goto LABEL_43;
    }
  }
  if (v3)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v46 = v3--;
      if (v46 > 0x20)
      {
        v47 = *(os_unfair_lock_s **)(*(_QWORD *)(a1 + 1032) + 32 * v3 - 1008);
        if (!v47)
          continue;
      }
      else
      {
        v47 = *(os_unfair_lock_s **)&v4[2 * v3 + 1];
        if (!v47)
          continue;
      }
      v48 = *(_QWORD *)(a1 + 1072) - 1;
      while (v48 != -1)
      {
        v49 = *(os_unfair_lock_s **)(*(_QWORD *)(a1 + 1064) + 8 * v48--);
        if (v49 == v47)
          goto LABEL_69;
      }
      if (v47 == (os_unfair_lock_s *)&pas_virtual_range_common_lock)
      {
        v52 = *(_QWORD *)(a1 + 1056) - 1;
        *(_QWORD *)(a1 + 1056) = v52;
        if (v52)
          continue;
        v53 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v54 = __ldxr(&pas_virtual_range_common_lock);
          if (v54 != v53)
            break;
          if (!__stlxr(0, &pas_virtual_range_common_lock))
            goto LABEL_69;
        }
      }
      else
      {
        v50 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v51 = __ldxr(&v47->_os_unfair_lock_opaque);
          if (v51 != v50)
            break;
          if (!__stlxr(0, &v47->_os_unfair_lock_opaque))
            goto LABEL_69;
        }
      }
      __clrex();
      os_unfair_lock_unlock(v47);
LABEL_69:
      ;
    }
    while (v3);
  }
LABEL_88:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 1048) = 0;
}

void pas_designated_intrinsic_heap_initialize(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;

  v4 = *(_BYTE *)(a2 + 84);
  v5 = *(_QWORD *)(a2 + 176);
  v6 = *(_QWORD *)(a2 + 400);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v54 = a1;
  v55 = a2;
  if (((v5 + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x80)
    v7 = 9;
  else
    v7 = (((unint64_t)(v5 + 63) >> 3) + 56) >> 3;
  if (((v6 + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x80)
    v8 = 9;
  else
    v8 = (((unint64_t)(v6 + 63) >> 3) + 56) >> 3;
  if (v7 <= v8)
    v7 = v8;
  v56 = v7;
  v57 = 0;
  v9 = 1 << v4;
  if (1 << v4 == 32)
  {
    set_up_range((uint64_t)&v54, 0, 1u, 0x20uLL);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v22 = v56;
    v23 = 2 * v56;
    pas_thread_local_cache_layout_next_allocator_index = 2 * v56 + 7;
    v25 = v54;
    v24 = v55;
    v26 = pas_segregated_heap_ensure_size_directory_for_size(v54, 0x40uLL, 1uLL, 1, v55, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v26);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = v23 + v22 + 7;
    v27 = pas_segregated_heap_ensure_size_directory_for_size(v25, 0x60uLL, 1uLL, 1, v24, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v27);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 4 * v22 + 7;
    v28 = pas_segregated_heap_ensure_size_directory_for_size(v25, 0x80uLL, 1uLL, 1, v24, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v28);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 5 * v22 + 7;
    v29 = pas_segregated_heap_ensure_size_directory_for_size(v25, 0xA0uLL, 1uLL, 1, v24, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v29);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 6 * v22 + 7;
    v30 = pas_segregated_heap_ensure_size_directory_for_size(v25, 0xC0uLL, 1uLL, 1, v24, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v30);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 7 * v22 + 7;
    v31 = pas_segregated_heap_ensure_size_directory_for_size(v25, 0xE0uLL, 1uLL, 1, v24, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v31);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = (8 * v22) | 7;
    v32 = pas_segregated_heap_ensure_size_directory_for_size(v25, 0x100uLL, 1uLL, 1, v24, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v32);
    v57 = 9;
    set_up_range((uint64_t)&v54, 9u, 0xAu, 0x140uLL);
    set_up_range((uint64_t)&v54, 0xBu, 0xCu, 0x180uLL);
    v19 = 13;
    v20 = 14;
    v21 = 448;
    goto LABEL_15;
  }
  if (v9 == 16)
  {
    set_up_range((uint64_t)&v54, 0, 1u, 0x10uLL);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v33 = v56;
    v34 = 2 * v56;
    pas_thread_local_cache_layout_next_allocator_index = 2 * v56 + 7;
    v36 = v54;
    v35 = v55;
    v37 = pas_segregated_heap_ensure_size_directory_for_size(v54, 0x20uLL, 1uLL, 1, v55, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v37);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = v34 + v33 + 7;
    v38 = pas_segregated_heap_ensure_size_directory_for_size(v36, 0x30uLL, 1uLL, 1, v35, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v38);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 4 * v33 + 7;
    v39 = pas_segregated_heap_ensure_size_directory_for_size(v36, 0x40uLL, 1uLL, 1, v35, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v39);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 5 * v33 + 7;
    v40 = pas_segregated_heap_ensure_size_directory_for_size(v36, 0x50uLL, 1uLL, 1, v35, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v40);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 6 * v33 + 7;
    v41 = pas_segregated_heap_ensure_size_directory_for_size(v36, 0x60uLL, 1uLL, 1, v35, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v41);
    v57 = 7;
    set_up_range((uint64_t)&v54, 7u, 8u, 0x80uLL);
    set_up_range((uint64_t)&v54, 9u, 0xAu, 0xA0uLL);
    set_up_range((uint64_t)&v54, 0xBu, 0xCu, 0xC0uLL);
    set_up_range((uint64_t)&v54, 0xDu, 0xEu, 0xE0uLL);
    set_up_range((uint64_t)&v54, 0xFu, 0x10u, 0x100uLL);
    set_up_range((uint64_t)&v54, 0x11u, 0x13u, 0x130uLL);
    set_up_range((uint64_t)&v54, 0x14u, 0x16u, 0x160uLL);
    v19 = 23;
    v20 = 26;
    v21 = 416;
    goto LABEL_15;
  }
  if (v9 == 8)
  {
    set_up_range((uint64_t)&v54, 0, 1u, 8uLL);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v10 = v56;
    v11 = 2 * v56;
    pas_thread_local_cache_layout_next_allocator_index = 2 * v56 + 7;
    v13 = v54;
    v12 = v55;
    v14 = pas_segregated_heap_ensure_size_directory_for_size(v54, 0x10uLL, 1uLL, 1, v55, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v14);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = v11 + v10 + 7;
    v15 = pas_segregated_heap_ensure_size_directory_for_size(v13, 0x18uLL, 1uLL, 1, v12, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v15);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 4 * v10 + 7;
    v16 = pas_segregated_heap_ensure_size_directory_for_size(v13, 0x20uLL, 1uLL, 1, v12, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v16);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 5 * v10 + 7;
    v17 = pas_segregated_heap_ensure_size_directory_for_size(v13, 0x28uLL, 1uLL, 1, v12, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v17);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_thread_local_cache_layout_next_allocator_index = 6 * v10 + 7;
    v18 = pas_segregated_heap_ensure_size_directory_for_size(v13, 0x30uLL, 1uLL, 1, v12, 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v18);
    v57 = 7;
    set_up_range((uint64_t)&v54, 7u, 8u, 0x40uLL);
    set_up_range((uint64_t)&v54, 9u, 0xAu, 0x50uLL);
    set_up_range((uint64_t)&v54, 0xBu, 0xCu, 0x60uLL);
    set_up_range((uint64_t)&v54, 0xDu, 0x10u, 0x80uLL);
    set_up_range((uint64_t)&v54, 0x11u, 0x14u, 0xA0uLL);
    set_up_range((uint64_t)&v54, 0x15u, 0x18u, 0xC0uLL);
    set_up_range((uint64_t)&v54, 0x19u, 0x1Cu, 0xE0uLL);
    set_up_range((uint64_t)&v54, 0x1Du, 0x20u, 0x100uLL);
    v19 = 33;
    v20 = 38;
    v21 = 304;
LABEL_15:
    set_up_range((uint64_t)&v54, v19, v20, v21);
  }
  v42 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
  if (pas_thread_local_cache_layout_first_segment)
  {
    v43 = *(unsigned int *)pas_thread_local_cache_layout_first_segment;
    v44 = pas_compact_heap_reservation_base;
    if (v43 < 8)
      v44 = 0;
    v45 = v44 + v43;
    if (v45)
    {
      v46 = 0;
      do
      {
        if ((v45 & 3) != 0)
          goto LABEL_26;
        v47 = v45 & 0xFFFFFFFFFFFFFFFCLL;
        v48 = *(uint64_t **)((v45 & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v49 = *v48;
        if (*(_DWORD *)(*v48 + 8))
        {
          if (!*(_DWORD *)(v49 + 4))
            goto LABEL_35;
        }
        else
        {
          pas_segregated_size_directory_create_tlc_allocator(v47);
          v49 = *v48;
          if (!*(_DWORD *)(*v48 + 4))
          {
LABEL_35:
            pas_segregated_size_directory_enable_exclusive_views(v47);
            if (*(_DWORD *)(*v48 + 12))
              goto LABEL_26;
            goto LABEL_36;
          }
        }
        if (*(_DWORD *)(v49 + 12))
          goto LABEL_26;
LABEL_36:
        pas_segregated_size_directory_create_tlc_view_cache(v47);
LABEL_26:
        v50 = v42[++v46];
        v51 = pas_compact_heap_reservation_base;
        if (v50 >= 8)
          v52 = pas_compact_heap_reservation_base;
        else
          v52 = 0;
        v45 = v52 + v50;
        if (!v45)
        {
          v42 = (unsigned int *)*((_QWORD *)v42 + 129);
          if (!v42)
            return;
          v46 = 0;
          v53 = *v42;
          if (v53 < 8)
            v51 = 0;
          v45 = v51 + v53;
        }
      }
      while (v45);
    }
  }
}

void set_up_range(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (a3 >= a2)
  {
    pas_thread_local_cache_layout_next_allocator_index = *(_DWORD *)(a1 + 16) * a2 + 7;
    v8 = pas_segregated_heap_ensure_size_directory_for_size(*(_QWORD *)a1, a4, 1uLL, 1, *(_QWORD *)(a1 + 8), 0, 0);
    pas_segregated_size_directory_create_tlc_allocator(v8);
    while (a3 != a2)
    {
      ++a2;
      pas_thread_local_cache_layout_next_allocator_index = *(_DWORD *)(a1 + 16) * a2 + 7;
      v9 = pas_redundant_local_allocator_node_create(v8);
      pas_thread_local_cache_layout_add_node(v9 | 1);
      os_unfair_lock_assert_owner(&pas_heap_lock);
    }
  }
  *(_DWORD *)(a1 + 20) = a3 + 1;
}

unint64_t pas_ensure_heap_forced_into_reserved_memory(uint64_t *a1, char a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  unint64_t basic_heap_page_caches_with_reserved_memory;

  basic_heap_page_caches_with_reserved_memory = pas_create_basic_heap_page_caches_with_reserved_memory((uint64_t)a4, a5, a6);
  return pas_ensure_heap_with_page_caches(a1, a2, a3, a4, basic_heap_page_caches_with_reserved_memory);
}

unint64_t pas_ensure_heap_with_page_caches(uint64_t *a1, char a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  unint64_t StatusReg;
  unsigned int v11;
  unint64_t v13;
  int v14;
  unsigned int v15;
  __int128 v16;
  unint64_t result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v11, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_6:
  v13 = pas_immortal_heap_allocate(0x28uLL, (uint64_t)"pas_basic_heap_runtime_config", 0);
  v14 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v15 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v15 != v14)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_11;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_11:
  v16 = a4[1];
  *(_OWORD *)v13 = *a4;
  *(_OWORD *)(v13 + 16) = v16;
  *(_QWORD *)(v13 + 32) = a5;
  result = a1[1];
  if (!result)
    return pas_ensure_heap_slow(a1, a2, a3, v13);
  return result;
}

void pas_enumerable_range_list_append(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  BOOL v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (a2 != a3)
  {
    v6 = *a1;
    v7 = (_DWORD *)(pas_compact_heap_reservation_base + 8 * v6);
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (v8)
    {
      v7 = (_DWORD *)pas_immortal_heap_allocate(0xA8uLL, (uint64_t)"pas_enumerable_range_list_chunk", 0);
      *v7 = 0;
    }
    else
    {
      v9 = v7[1];
      if (v9 < 0xA)
      {
LABEL_11:
        v11 = &v7[4 * v9];
        *((_QWORD *)v11 + 1) = a2;
        *((_QWORD *)v11 + 2) = a3;
        ++v7[1];
        return;
      }
      v10 = (_DWORD *)pas_immortal_heap_allocate(0xA8uLL, (uint64_t)"pas_enumerable_range_list_chunk", 0);
      *v10 = ((unint64_t)v7 - pas_compact_heap_reservation_base) >> 3;
      v7 = v10;
    }
    v7[1] = 0;
    *a1 = ((unint64_t)v7 - pas_compact_heap_reservation_base) >> 3;
    v9 = v7[1];
    goto LABEL_11;
  }
}

uint64_t enumerate_bitfit_heap_callback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t i;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  BOOL v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;

  v2 = *(unsigned int *)(a2 + 32);
  if (!(_DWORD)v2)
    return 1;
  v65 = *(_QWORD *)(a1 + 48) + 8 * v2;
  v4 = 1;
  if (v65)
  {
    v5 = 0;
    v70 = a1 + 80;
    while (1)
    {
      v66 = v5;
      v8 = v65 + (v5 << 7);
      v9 = *(unsigned int *)(v8 + 80);
      if ((_DWORD)v9)
      {
        v71 = *(_QWORD *)(a1 + 48) + 8 * v9;
        v7 = v66;
        v10 = *(unsigned int *)(v8 + 84);
        if (!(_DWORD)v10)
          goto LABEL_6;
      }
      else
      {
        v71 = 0;
        v7 = v66;
        v10 = *(unsigned int *)(v8 + 84);
        if (!(_DWORD)v10)
          goto LABEL_6;
      }
      v6 = 0;
      v11 = 0;
      v12 = 0;
      v78 = (unsigned __int8 *)(v65 + (v7 << 7) + 124);
      v67 = (v10 - 1) >> 3;
      v68 = v10;
      v13 = v10;
      do
      {
        v14 = v13 - 8;
        if (v13 >= 8)
          v15 = 8;
        else
          v15 = v13;
        v16 = *(unsigned int *)(v71 + 4 * v12);
        v69 = v6;
        v72 = v14;
        v73 = v12;
        if (!(_DWORD)v16)
        {
          v17 = 0;
          v19 = v10 - v11;
          if (v19 >= 8)
            v19 = 8;
          if (!v19)
            goto LABEL_12;
LABEL_24:
          v20 = 0;
          v74 = v15;
          v75 = v17;
LABEL_26:
          v80 = v20;
          v21 = *(unsigned int *)(v17 + 4 * v20);
          if ((_DWORD)v21)
          {
            v22 = *(_QWORD *)(a1 + 48) + 8 * v21;
            if (v22)
            {
              v23 = *(_QWORD *)v22;
              v24 = pas_bitfit_page_config_kind_for_config_table[*v78];
              if (*(_QWORD *)v22)
              {
                v25 = *(_QWORD *)(v24 + 32);
                if (v25)
                {
                  for (i = 0; i < v25; i += *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200))
                    pas_enumerator_exclude_accounted_page(a1, i + v23);
                }
              }
              v79 = v23;
              if (*(_BYTE *)(v22 + 11))
              {
                v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 72))(a1, v23);
                v28 = v27;
                v29 = *(_BYTE *)(v24 + 28);
                v31 = *(_QWORD *)(v24 + 32);
                v30 = *(_QWORD *)(v24 + 40);
                v32 = v31 / v30 + 7;
                if (v31 / v30 == 1)
                  v32 = 1;
                v33 = *(_QWORD *)(a1 + 40);
                if (v33 > v27 || v27 >= *(_QWORD *)(a1 + 56) + v33)
                {
                  v34 = (((v31 >> v29) + 63) >> 2) & 0x3FFFFFFFFFFFFFF0;
                  if (((v32 + v34) & 0xFFFFFFFFFFFFFFF8) != 0xFFFFFFFFFFFFFFF0)
                  {
                    v28 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 96))(a1, v27);
                    goto LABEL_41;
                  }
                  v28 = v70;
                }
                else
                {
                  if (v27 >= 8)
                    v28 = v27 - v33 + *(_QWORD *)(a1 + 48);
LABEL_41:
                  if (!v28)
                  {
                    v6 = v69;
                    break;
                  }
                  v29 = *(_BYTE *)(v24 + 28);
                  v31 = *(_QWORD *)(v24 + 32);
                  v30 = *(_QWORD *)(v24 + 40);
                  v34 = (((v31 >> v29) + 63) >> 2) & 0x3FFFFFFFFFFFFFF0;
                }
                v35 = 1 << v29;
                v36 = *(_QWORD *)(v24 + 104);
                v37 = *(_QWORD *)(v24 + 112);
                v38 = v36 + v35 - 1;
                v39 = -v35;
                v40 = v28 + 16;
                if (v31 == v30)
                  v41 = 0;
                else
                  v41 = (unsigned __int8 *)(v28 + 16 + v34);
                v42 = v38 & v39;
                if ((v38 & v39) != 0 && *(_DWORD *)(a1 + 128))
                {
                  v76 = v30;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 112))(a1, v79, v38 & v39, 0, *(_QWORD *)(a1 + 120));
                  v30 = v76;
                }
                v43 = (v37 + v36) & v39;
                if (v31 != v43 && *(_DWORD *)(a1 + 128))
                {
                  v44 = v30;
                  (*(void (**)(uint64_t, unint64_t, unint64_t, _QWORD, _QWORD))(a1 + 112))(a1, v43 + v79, v31 - v43, 0, *(_QWORD *)(a1 + 120));
                  v30 = v44;
                }
                v17 = v75;
                if (*(_DWORD *)(a1 + 132))
                {
                  if (v31 == v30)
                  {
                    v45 = v43 - v42;
                    if (v43 != v42)
                    {
                      v46 = v42 + v79;
                      goto LABEL_77;
                    }
                  }
                  else if (v30 <= v31)
                  {
                    v47 = v31 / v30 <= 1 ? 1 : v31 / v30;
                    v48 = v30;
                    v49 = v42;
                    v50 = v42;
                    v77 = v30;
                    do
                    {
                      v51 = v50;
                      v52 = v49;
                      if (v48 <= v42)
                        v53 = v42;
                      else
                        v53 = v48;
                      if (v53 >= v43)
                        v50 = v43;
                      else
                        v50 = v53;
                      v54 = *v41++;
                      if (v54 == 255)
                      {
                        v49 = v50;
                        if (v51 != v52)
                        {
                          v49 = v50;
                          if (*(_DWORD *)(a1 + 132))
                          {
                            (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, _QWORD))(a1 + 112))(a1, v52 + v79, v51 - v52, 1, *(_QWORD *)(a1 + 120));
                            v30 = v77;
                            v49 = v50;
                          }
                        }
                      }
                      else
                      {
                        v49 = v52;
                      }
                      v48 += v30;
                      --v47;
                    }
                    while (v47);
                    v45 = v50 - v49;
                    v55 = v50 == v49;
                    v17 = v75;
                    if (!v55)
                    {
                      if (*(_DWORD *)(a1 + 132))
                      {
                        v46 = v49 + v79;
LABEL_77:
                        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 112))(a1, v46, v45, 1, *(_QWORD *)(a1 + 120));
                      }
                    }
                  }
                }
                v15 = v74;
                if (v43 > v42 && *(_DWORD *)(a1 + 136))
                {
                  v56 = *(_BYTE *)(v24 + 28);
                  do
                  {
                    if (v42 >= v43
                      || ((1 << (v42 >> v56)) & *(_DWORD *)(v40 + ((v42 >> v56 >> 3) & 0x1FFFFFFFFFFFFFFCLL))) != 0)
                    {
                      v57 = v42;
                    }
                    else
                    {
                      v58 = 0;
                      v59 = 1 << v56;
                      do
                      {
                        v57 = v42 + v58;
                        v60 = (v42 + v58) >> v56;
                        v61 = v60 >> 5;
                        v62 = *(_DWORD *)(v40 + 4 * (v60 >> 5));
                        v63 = 1 << v60;
                        if ((v63 & v62) != 0)
                          break;
                        if ((*(_DWORD *)(v40
                                        + 8 * ((unint64_t)((*(_QWORD *)(v24 + 32) >> v56) + 63) >> 6)
                                        + 4 * v61) & v63) != 0)
                        {
                          v57 = v42 + v58;
                          if (v59 + v58 && *(_DWORD *)(a1 + 136))
                          {
                            (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD))(a1 + 112))(a1, v42 + v79, v59 + v58, 2, *(_QWORD *)(a1 + 120));
                            v56 = *(_BYTE *)(v24 + 28);
                          }
                          break;
                        }
                        v58 += v59;
                        v57 = v42 + v58;
                      }
                      while (v42 + v58 < v43);
                    }
                    v42 = v57 + (1 << v56);
                  }
                  while (v42 < v43);
                }
              }
            }
          }
          v20 = v80 + 1;
          if (v80 + 1 == v15)
            goto LABEL_12;
          goto LABEL_26;
        }
        v17 = *(_QWORD *)(a1 + 48) + 8 * v16;
        v18 = v10 - v11;
        if (v18 >= 8)
          v18 = 8;
        if (v18)
          goto LABEL_24;
LABEL_12:
        v13 = v72;
        v11 = 8 * (v73 + 1);
        v10 = v68;
        v6 = v11 >= v68;
        v12 = v73 + 1;
      }
      while (v73 != v67);
      v7 = v66;
      if (!v6)
        return 0;
LABEL_6:
      v5 = v7 + 1;
      if (v5 == 3)
        return 1;
    }
  }
  return v4;
}

uint64_t pas_enumerate_initially_unaccounted_pages(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t i;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  if (v2 > (unint64_t)v3 || (unint64_t)v3 >= *(_QWORD *)(a1 + 56) + v2)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 8, *(_QWORD *)(a1 + 104));
    if (v3)
      goto LABEL_6;
  }
  else
  {
    if ((unint64_t)v3 >= 8)
      v3 = (_QWORD *)((char *)v3 + *(_QWORD *)(a1 + 48) - v2);
    if (v3)
    {
LABEL_6:
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 40);
      if (v4 > (unint64_t)v5 || (unint64_t)v5 >= *(_QWORD *)(a1 + 56) + v4)
      {
        v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), 8, *(_QWORD *)(a1 + 104));
        if (!v5)
          return 0;
      }
      else
      {
        if ((unint64_t)v5 >= 8)
          v5 = (_QWORD *)((char *)v5 + *(_QWORD *)(a1 + 48) - v4);
        if (!v5)
          return 0;
      }
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 24);
      if (v7 > (unint64_t)v8 || (unint64_t)v8 >= *(_QWORD *)(a1 + 56) + v7)
      {
        v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
        if (!v8)
          return 0;
      }
      else
      {
        if ((unint64_t)v8 >= 8)
          v8 = (_QWORD *)((char *)v8 + *(_QWORD *)(a1 + 48) - v7);
        if (!v8)
          return 0;
      }
      pas_enumerator_add_unaccounted_pages(a1, *v3 + *v8, (*v5 + *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200) + ~*v8) & -*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 48);
      if (v9 > (unint64_t)v10 || (unint64_t)v10 >= *(_QWORD *)(a1 + 56) + v9)
      {
        v10 = (unsigned int *)(*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
      }
      else if ((unint64_t)v10 >= 8)
      {
        v10 = (unsigned int *)((char *)v10 + *(_QWORD *)(a1 + 48) - v9);
      }
      if (v10)
      {
        for (i = *v10; (_DWORD)i; i = *v14)
        {
          v14 = (unsigned int *)(*(_QWORD *)(a1 + 48) + 8 * i);
          if (!v14)
            break;
          v15 = v14[1];
          if ((_DWORD)v15)
          {
            v16 = 4 * v15;
            do
            {
              pas_enumerator_add_unaccounted_pages(a1, *(_QWORD *)&v14[v16 - 2], *(_QWORD *)&v14[v16] - *(_QWORD *)&v14[v16 - 2]);
              v16 -= 4;
            }
            while (v16 * 4);
          }
        }
        v12 = *(_QWORD *)(a1 + 40);
        v13 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 64);
        if (v12 > (unint64_t)v13 || (unint64_t)v13 >= *(_QWORD *)(a1 + 56) + v12)
        {
          v13 = (unsigned int *)(*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
        }
        else if ((unint64_t)v13 >= 8)
        {
          v13 = (unsigned int *)((char *)v13 + *(_QWORD *)(a1 + 48) - v12);
        }
        if (v13)
        {
          for (j = *v13; (_DWORD)j; j = *v20)
          {
            v20 = (unsigned int *)(*(_QWORD *)(a1 + 48) + 8 * j);
            if (!v20)
              break;
            v21 = v20[1];
            if ((_DWORD)v21)
            {
              do
              {
                --v21;
                v22 = &v20[4 * v21];
                v24 = *((_QWORD *)v22 + 1);
                v23 = *((_QWORD *)v22 + 2);
                v25 = v23 - v24;
                if (v23 != v24)
                {
                  v26 = 0;
                  do
                  {
                    pas_enumerator_exclude_accounted_page(a1, v26 + v24);
                    v26 += *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200);
                  }
                  while (v26 < v25);
                }
              }
              while (v21);
            }
          }
          v18 = *(_QWORD *)(a1 + 40);
          v19 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 184);
          if (v18 > (unint64_t)v19 || (unint64_t)v19 >= *(_QWORD *)(a1 + 56) + v18)
          {
            v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184), 4, *(_QWORD *)(a1 + 104));
          }
          else if ((unint64_t)v19 >= 8)
          {
            v19 = (unsigned int *)((char *)v19 + *(_QWORD *)(a1 + 48) - v18);
          }
          if (v19)
          {
            v27 = *(_QWORD *)(a1 + 40);
            v28 = *(unint64_t **)(*(_QWORD *)(a1 + 32) + 192);
            if (v27 > (unint64_t)v28 || (unint64_t)v28 >= *(_QWORD *)(a1 + 56) + v27)
            {
              v28 = (unint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192), 24, *(_QWORD *)(a1 + 104));
            }
            else if ((unint64_t)v28 >= 8)
            {
              v28 = (unint64_t *)((char *)v28 + *(_QWORD *)(a1 + 48) - v27);
            }
            if (v28)
            {
              v43 = 0u;
              v44 = 0u;
              v42 = 0u;
              v29 = *v19;
              if ((_DWORD)v29)
                v30 = *(_QWORD *)(a1 + 48) + 8 * v29;
              else
                v30 = 0;
              pas_ptr_worklist_push((uint64_t *)&v42, v30, a1 + 8);
              v31 = *v28;
              if (*v28 >= 8)
              {
                pas_ptr_worklist_push((uint64_t *)&v42, *(_QWORD *)(a1 + 48) + v31 - *(_QWORD *)(a1 + 40), a1 + 8);
                v32 = v28[1];
                if (v32 < 8)
                {
LABEL_70:
                  pas_ptr_worklist_push((uint64_t *)&v42, v32, a1 + 8);
                  v33 = v28[2];
                  if (v33 < 8)
                    goto LABEL_71;
LABEL_75:
                  pas_ptr_worklist_push((uint64_t *)&v42, *(_QWORD *)(a1 + 48) + v33 - *(_QWORD *)(a1 + 40), a1 + 8);
                  v34 = v44;
                  if (!(_QWORD)v44)
                    return 1;
                  while (1)
                  {
LABEL_79:
                    *(_QWORD *)&v44 = v34 - 1;
                    v36 = *(unsigned int **)(*((_QWORD *)&v43 + 1) + 8 * (v34 - 1));
                    if (!v36)
                      return 1;
                    if ((v36[3] & 1) == 0 && !*((_QWORD *)v36 + 5))
                    {
                      v38 = *((_QWORD *)v36 + 2);
                      v37 = *((_QWORD *)v36 + 3);
                      v39 = v37 - v38;
                      if (v37 != v38)
                      {
                        v40 = 0;
                        do
                        {
                          pas_enumerator_exclude_accounted_page(a1, v40 + v38);
                          v40 += *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200);
                        }
                        while (v40 < v39);
                      }
                    }
                    v41 = *v36;
                    if ((_DWORD)v41)
                    {
                      pas_ptr_worklist_push((uint64_t *)&v42, *(_QWORD *)(a1 + 48) + 8 * v41, a1 + 8);
                      v35 = v36[1];
                      if (!(_DWORD)v35)
                        goto LABEL_87;
LABEL_78:
                      pas_ptr_worklist_push((uint64_t *)&v42, *(_QWORD *)(a1 + 48) + 8 * v35, a1 + 8);
                      v34 = v44;
                      result = 1;
                      if (!(_QWORD)v44)
                        return result;
                    }
                    else
                    {
                      pas_ptr_worklist_push((uint64_t *)&v42, 0, a1 + 8);
                      v35 = v36[1];
                      if ((_DWORD)v35)
                        goto LABEL_78;
LABEL_87:
                      pas_ptr_worklist_push((uint64_t *)&v42, 0, a1 + 8);
                      v34 = v44;
                      result = 1;
                      if (!(_QWORD)v44)
                        return result;
                    }
                  }
                }
              }
              else
              {
                pas_ptr_worklist_push((uint64_t *)&v42, v31, a1 + 8);
                v32 = v28[1];
                if (v32 < 8)
                  goto LABEL_70;
              }
              pas_ptr_worklist_push((uint64_t *)&v42, *(_QWORD *)(a1 + 48) + v32 - *(_QWORD *)(a1 + 40), a1 + 8);
              v33 = v28[2];
              if (v33 < 8)
              {
LABEL_71:
                pas_ptr_worklist_push((uint64_t *)&v42, v33, a1 + 8);
                v34 = v44;
                if ((_QWORD)v44)
                  goto LABEL_79;
                return 1;
              }
              goto LABEL_75;
            }
          }
        }
      }
      return 0;
    }
  }
  return 0;
}

uint64_t pas_enumerate_large_heaps(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, const char *, _QWORD, uint64_t);
  uint64_t v27;
  void *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  char *v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  BOOL v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  BOOL v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  BOOL v101;
  char *v102;
  char *v103;
  uint64_t result;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  void *__src[2];
  uint64_t v119;

  v1 = a1;
  v119 = 0;
  v117 = 0u;
  *(_OWORD *)__src = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v108 = 0u;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 56);
  if (v2 > (unint64_t)v3 || (unint64_t)v3 >= *(_QWORD *)(a1 + 56) + v2)
  {
    v3 = (unsigned int *)(*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    if (v3)
      goto LABEL_6;
    return 0;
  }
  if ((unint64_t)v3 >= 8)
    v3 = (unsigned int *)((char *)v3 + *(_QWORD *)(a1 + 48) - v2);
  if (!v3)
    return 0;
LABEL_6:
  v4 = *v3;
  if ((_DWORD)v4)
  {
    v5 = (unsigned int *)(*(_QWORD *)(v1 + 48) + 8 * v4);
    if (v5)
    {
      v106 = v1;
      v6 = v1;
      do
      {
        v7 = v5[1];
        if ((_DWORD)v7)
        {
          v105 = v5;
          do
          {
            --v7;
            v18 = &v5[4 * v7];
            v20 = *((_QWORD *)v18 + 1);
            v19 = *((_QWORD *)v18 + 2);
            v21 = v108;
            v22 = v119;
            v23 = 16 * v108;
            if ((unint64_t)v108 >= v119 + 10)
            {
              if ((unint64_t)(2 * v119) <= 4)
                v25 = 4;
              else
                v25 = 2 * v119;
              v26 = *(uint64_t (**)(uint64_t, const char *, _QWORD, uint64_t))(v6 + 8);
              v27 = *(_QWORD *)(v6 + 24);
              v107 = v19;
              v24 = (char *)v26(16 * v25, "pas_range_begin_min_heap/outline_array", 0, v27);
              bzero(v24, 16 * v25);
              v28 = __src[1];
              memcpy(v24, __src[1], v23 - 160);
              (*(void (**)(void *, uint64_t, _QWORD, _QWORD))(v6 + 16))(v28, 16 * v22, 0, *(_QWORD *)(v6 + 24));
              v19 = v107;
              v5 = v105;
              __src[1] = v24;
              v119 = v25;
            }
            else
            {
              v24 = (char *)__src[1];
            }
            v29 = v21 + 1;
            v30 = (char *)&v108 + v23 + 8;
            if (v21 >= 0xA)
              v30 = &v24[v23 - 160];
            *(_QWORD *)v30 = 0;
            *((_QWORD *)v30 + 1) = 0;
            *(_QWORD *)&v108 = v21 + 1;
            if (v29 >= 2)
            {
              while (1)
              {
                v8 = v29 >> 1;
                v31 = (v29 >> 1) - 1;
                v32 = (char *)__src[1] + 16 * v31;
                v33 = v32 - 160;
                if (v31 < 0xA)
                  v33 = (char *)&v108 + 16 * v31 + 8;
                v34 = *(_QWORD *)v33;
                if (v20 >= v34)
                  break;
                v35 = v32 - 152;
                if (v31 >= 0xA)
                  v36 = v35;
                else
                  v36 = (char *)(&v108 + v31 + 1);
                v37 = *(_QWORD *)v36;
                v38 = 16 * v29 - 16;
                v39 = (char *)&v108 + v38 + 8;
                v40 = (char *)__src[1] + v38;
                v41 = (unint64_t *)((char *)__src[1] + v38 - 160);
                v42 = v40 - 152;
                if (v29 < 0xB)
                  v41 = (unint64_t *)v39;
                *v41 = v34;
                if (v29 < 0xB)
                  v42 = v39 + 8;
                *(_QWORD *)v42 = v37;
                v43 = v29 > 3;
                v29 >>= 1;
                if (!v43)
                  goto LABEL_12;
              }
            }
            v8 = v29;
LABEL_12:
            v9 = v8 - 1;
            v10 = 16 * (v8 - 1);
            v11 = (char *)&v108 + v10 + 8;
            v12 = (char *)__src[1] + v10;
            v13 = v12 - 160;
            v14 = v12 - 152;
            v15 = v9 >= 0xA;
            if (v9 >= 0xA)
              v16 = v13;
            else
              v16 = v11;
            *(_QWORD *)v16 = v20;
            v17 = v11 + 8;
            if (v15)
              v17 = v14;
            *(_QWORD *)v17 = v19;
          }
          while (v7);
        }
        v44 = *v5;
        v1 = v106;
        if (!(_DWORD)v44)
          break;
        v5 = (unsigned int *)(*(_QWORD *)(v106 + 48) + 8 * v44);
      }
      while (v5);
      v45 = v108;
      if ((_QWORD)v108)
      {
        v46 = 0;
        v47 = 0;
        while (1)
        {
          v48 = 16 * (v45 - 1);
          v49 = (char *)&v108 + v48 + 8;
          v50 = (char *)&v108 + v48 + 16;
          v51 = (char *)__src[1] + v48;
          v52 = v51 - 160;
          v53 = v51 - 152;
          if (v45 >= 0xB)
          {
            v54 = v52;
          }
          else
          {
            v53 = v50;
            v54 = v49;
          }
          v55 = *((_QWORD *)&v108 + 1);
          v56 = v109;
          v57 = *(_QWORD *)v54;
          v58 = *(_QWORD *)v53;
          *(_QWORD *)v54 = 0;
          *((_QWORD *)v54 + 1) = 0;
          *(_QWORD *)&v109 = 0;
          v59 = v45 - 1;
          v108 = v59;
          if (v59)
            break;
LABEL_89:
          if (v55 != v56)
          {
            for (; v55 < v56; v47 = v55)
            {
              while ((pas_enumerator_exclude_accounted_page(v106, v55) & 1) == 0)
              {
                v55 += *(_QWORD *)(*(_QWORD *)(v106 + 32) + 200);
                if (v55 >= v56)
                  goto LABEL_44;
              }
              if (v55 != v47)
              {
                record_span(v106, v46, v47);
                v46 = v55;
              }
              v55 += *(_QWORD *)(*(_QWORD *)(v106 + 32) + 200);
            }
LABEL_44:
            v45 = v108;
            if ((_QWORD)v108)
              continue;
          }
          goto LABEL_101;
        }
        v60 = 1;
        v61 = 2;
        v62 = 3;
        if (v59 >= 3)
        {
LABEL_50:
          v63 = (char *)__src[1];
          v64 = (char *)__src[1] + 16 * v61;
          v65 = v64 - 152;
          if (v61 >= 0xA)
            v66 = v64 - 160;
          else
            v66 = (char *)&v108 + 16 * v61 + 8;
          v67 = *(_QWORD *)v66;
          v68 = (char *)(&v108 + v61 + 1);
          if (v61 >= 0xA)
            v68 = v65;
          v69 = *(_QWORD *)v68;
          v70 = v57 <= v67;
          goto LABEL_65;
        }
        while (1)
        {
          v63 = (char *)__src[1];
          if (v61 > v59)
          {
LABEL_82:
            v95 = v60 - 1;
            v96 = 16 * (v60 - 1);
            v97 = (char *)&v108 + v96 + 8;
            v98 = &v63[v96];
            v99 = v98 - 160;
            v100 = v98 - 152;
            v101 = v95 >= 0xA;
            if (v95 >= 0xA)
              v102 = v99;
            else
              v102 = v97;
            *(_QWORD *)v102 = v57;
            v103 = v97 + 8;
            if (v101)
              v103 = v100;
            *(_QWORD *)v103 = v58;
            goto LABEL_89;
          }
          v67 = 0;
          v69 = 0;
          v70 = 1;
LABEL_65:
          v78 = 16 * (v61 - 1);
          v79 = (char *)&v108 + v78 + 8;
          v80 = &v63[v78];
          v81 = v80 - 160;
          v82 = v80 - 152;
          if (v61 - 1 >= 0xA)
            v83 = v81;
          else
            v83 = v79;
          v84 = *(_QWORD *)v83;
          v85 = v79 + 8;
          if (v61 - 1 < 0xA)
            v82 = v85;
          v86 = *(_QWORD *)v82;
          if (v70)
            break;
          if (v57 > v84 && v67 >= v84)
          {
LABEL_57:
            v71 = v60 - 1;
            v72 = (char *)&v108 + 16 * v71 + 8;
            v73 = &v63[16 * v71];
            v74 = v73 - 160;
            v75 = v73 - 152;
            v76 = v71 >= 0xA;
            if (v71 >= 0xA)
              v77 = v74;
            else
              v77 = (char *)&v108 + 16 * v71 + 8;
            if (!v76)
              v75 = v72 + 8;
            *(_QWORD *)v77 = v84;
            *(_QWORD *)v75 = v86;
            v60 = v61;
            v61 *= 2;
            v62 = (2 * v60) | 1;
            if (v62 <= v59)
              goto LABEL_50;
          }
          else
          {
            v88 = v60 - 1;
            v89 = (char *)&v108 + 16 * v88 + 8;
            v90 = &v63[16 * v88];
            v91 = v90 - 160;
            v92 = v90 - 152;
            v93 = v88 >= 0xA;
            if (v88 >= 0xA)
              v94 = v91;
            else
              v94 = (char *)&v108 + 16 * v88 + 8;
            if (!v93)
              v92 = v89 + 8;
            *(_QWORD *)v94 = v67;
            *(_QWORD *)v92 = v69;
            v60 = v62;
            v61 = 2 * v62;
            v62 = (2 * v62) | 1;
            if (v62 <= v59)
              goto LABEL_50;
          }
        }
        if (v57 <= v84)
          goto LABEL_82;
        goto LABEL_57;
      }
    }
  }
  v47 = 0;
  v46 = 0;
LABEL_101:
  record_span(v1, v46, v47);
  if (!*(_DWORD *)(v1 + 136))
    return 1;
  result = enumerate_large_map(v1);
  if ((_DWORD)result)
  {
    result = enumerate_small_large_map(v1);
    if ((_DWORD)result)
    {
      result = enumerate_tiny_large_map(v1);
      if ((_DWORD)result)
      {
        result = enumerate_pgm_map(v1);
        if ((_DWORD)result)
          return 1;
      }
    }
  }
  return result;
}

uint64_t record_span(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 != a2)
  {
    if (*(_DWORD *)(result + 132))
      return (*(uint64_t (**)(void))(result + 112))();
  }
  return result;
}

uint64_t enumerate_large_map(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v3 + 112);
  v4 = *(_QWORD **)(v3 + 120);
  if (v2 > (unint64_t)v4 || (unint64_t)v4 >= *(_QWORD *)(a1 + 56) + v2)
  {
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(a1 + 96))(a1, v4, 32, *(_QWORD *)(a1 + 104));
    if (!v4)
      return 0;
  }
  else
  {
    if ((unint64_t)v4 >= 8)
      v4 = (_QWORD *)((char *)v4 + *(_QWORD *)(a1 + 48) - v2);
    if (!v4)
      return 0;
  }
  if (*v4 != v5)
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6 <= v5 && v5 < *(_QWORD *)(a1 + 56) + v6)
    {
      if (v5 >= 8)
        v5 = v5 - v6 + *(_QWORD *)(a1 + 48);
      if (!v5)
        return 0;
LABEL_16:
      v7 = *(unsigned int *)(v5 + 8);
      if (!*(_DWORD *)(v5 + 8))
        return 1;
LABEL_19:
      v8 = *(_QWORD *)v5;
      v9 = *(_QWORD *)(a1 + 40);
      if (v9 > *(_QWORD *)v5 || v8 >= *(_QWORD *)(a1 + 56) + v9)
      {
        if (!(24 * v7))
        {
          v8 = a1 + 80;
          goto LABEL_28;
        }
        v8 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
      }
      else if (v8 >= 8)
      {
        v8 = v8 - v9 + *(_QWORD *)(a1 + 48);
      }
      if (!v8)
        return 0;
LABEL_28:
      v11 = (_QWORD *)(v8 + 24 * v7 - 24);
      do
      {
        if (v11 != (_QWORD *)v4[3])
        {
          v12 = v11[1];
          if (v12)
          {
            if (v12 != *v11)
            {
              if (*(_DWORD *)(a1 + 136))
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(a1 + 112))(a1, *v11, v12 - *v11, 2, *(_QWORD *)(a1 + 120));
            }
          }
        }
        v11 -= 3;
        --v7;
      }
      while (v7);
      return 1;
    }
    v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v5, 24, *(_QWORD *)(a1 + 104));
    if (v5)
      goto LABEL_16;
    return 0;
  }
  v5 = (unint64_t)(v4 + 1);
  v7 = v4[2];
  if (v7)
    goto LABEL_19;
  return 1;
}

uint64_t enumerate_small_large_map(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  BOOL v12;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v3 + 128);
  v4 = *(_QWORD **)(v3 + 136);
  if (v2 > (unint64_t)v4 || (unint64_t)v4 >= *(_QWORD *)(a1 + 56) + v2)
  {
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(a1 + 96))(a1, v4, 32, *(_QWORD *)(a1 + 104));
    if (!v4)
      return 0;
  }
  else
  {
    if ((unint64_t)v4 >= 8)
      v4 = (_QWORD *)((char *)v4 + *(_QWORD *)(a1 + 48) - v2);
    if (!v4)
      return 0;
  }
  if (*v4 != v5)
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6 <= v5 && v5 < *(_QWORD *)(a1 + 56) + v6)
    {
      if (v5 >= 8)
        v5 = v5 - v6 + *(_QWORD *)(a1 + 48);
      if (!v5)
        return 0;
LABEL_16:
      v7 = *(unsigned int *)(v5 + 8);
      if (!*(_DWORD *)(v5 + 8))
        return 1;
LABEL_19:
      v8 = *(_QWORD *)v5;
      v9 = *(_QWORD *)(a1 + 40);
      if (v9 > *(_QWORD *)v5 || v8 >= *(_QWORD *)(a1 + 56) + v9)
      {
        if (!(12 * v7))
        {
          v8 = a1 + 80;
          goto LABEL_28;
        }
        v8 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
      }
      else if (v8 >= 8)
      {
        v8 = v8 - v9 + *(_QWORD *)(a1 + 48);
      }
      if (!v8)
        return 0;
LABEL_28:
      v11 = (_QWORD *)(v8 + 12 * v7 - 12);
      do
      {
        if (v11 != (_QWORD *)v4[3])
        {
          if (HIDWORD(*v11))
            v12 = ((*v11 >> 28) & 0xFFFFFFFF0) == 0;
          else
            v12 = 1;
          if (!v12)
          {
            if (*(_DWORD *)(a1 + 136))
              (*(void (**)(uint64_t, uint64_t))(a1 + 112))(a1, 16 * *v11);
          }
        }
        v11 = (_QWORD *)((char *)v11 - 12);
        --v7;
      }
      while (v7);
      return 1;
    }
    v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v5, 24, *(_QWORD *)(a1 + 104));
    if (v5)
      goto LABEL_16;
    return 0;
  }
  v5 = (unint64_t)(v4 + 1);
  v7 = v4[2];
  if (v7)
    goto LABEL_19;
  return 1;
}

uint64_t enumerate_tiny_large_map(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v21;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v3 + 144);
  v4 = *(_QWORD **)(v3 + 152);
  if (v2 > (unint64_t)v4 || (unint64_t)v4 >= *(_QWORD *)(a1 + 56) + v2)
  {
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(a1 + 96))(a1, v4, 32, *(_QWORD *)(a1 + 104));
    if (!v4)
      return 0;
  }
  else
  {
    if ((unint64_t)v4 >= 8)
      v4 = (_QWORD *)((char *)v4 + *(_QWORD *)(a1 + 48) - v2);
    if (!v4)
      return 0;
  }
  if (*v4 != v5)
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6 > v5 || v5 >= *(_QWORD *)(a1 + 56) + v6)
    {
      v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v5, 24, *(_QWORD *)(a1 + 104));
      if (!v5)
        return 0;
    }
    else
    {
      if (v5 >= 8)
        v5 = v5 - v6 + *(_QWORD *)(a1 + 48);
      if (!v5)
        return 0;
    }
    v7 = *(unsigned int *)(v5 + 8);
    if (!*(_DWORD *)(v5 + 8))
      return 1;
LABEL_19:
    v8 = *(_QWORD *)v5;
    v9 = *(_QWORD *)(a1 + 40);
    if (v9 <= v8 && v8 < *(_QWORD *)(a1 + 56) + v9)
    {
      if (v8 >= 8)
        v8 = v8 - v9 + *(_QWORD *)(a1 + 48);
      if (v8)
        goto LABEL_30;
      return 0;
    }
    if (!(16 * v7))
    {
      v8 = a1 + 80;
      goto LABEL_30;
    }
    v8 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v8, 16 * v7, *(_QWORD *)(a1 + 104));
    if (!v8)
      return 0;
    while (1)
    {
LABEL_30:
      --v7;
      v11 = (uint64_t *)(v8 + 16 * v7);
      if (v11 == (uint64_t *)v4[3])
        goto LABEL_29;
      v12 = v11[1];
      if (!v12)
        goto LABEL_29;
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 160);
      v15 = *v11;
      if (v13 > (unint64_t)v14 || (unint64_t)v14 >= *(_QWORD *)(a1 + 56) + v13)
      {
        v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160), 32, *(_QWORD *)(a1 + 104));
      }
      else if ((unint64_t)v14 >= 8)
      {
        v14 = (_QWORD *)((char *)v14 + *(_QWORD *)(a1 + 48) - v13);
      }
      if (!v14)
        return 0;
      if (*v14 == v12)
        break;
      v16 = *(_QWORD *)(a1 + 40);
      if (v16 > v12 || *(_QWORD *)(a1 + 56) + v16 <= v12)
      {
        v12 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v12, 24, *(_QWORD *)(a1 + 104));
      }
      else if (v12 >= 8)
      {
        v12 = v12 - v16 + *(_QWORD *)(a1 + 48);
      }
      if (!v12)
        return 0;
      v17 = *(unsigned int *)(v12 + 8);
      if (*(_DWORD *)(v12 + 8))
        goto LABEL_48;
LABEL_29:
      if (!v7)
        return 1;
    }
    v12 = (unint64_t)(v14 + 1);
    v17 = v14[2];
    if (!v17)
      goto LABEL_29;
LABEL_48:
    v18 = *(_QWORD *)v12;
    v19 = *(_QWORD *)(a1 + 40);
    if (v19 > *(_QWORD *)v12 || v18 >= *(_QWORD *)(a1 + 56) + v19)
    {
      v18 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    }
    else if (v18 >= 8)
    {
      v18 = v18 - v19 + *(_QWORD *)(a1 + 48);
    }
    if (!v18)
      return 0;
    v20 = (unsigned int *)(v18 + 5 * v17 - 5);
    do
    {
      if (v20 != (unsigned int *)v14[3])
      {
        v21 = *v20 | ((unint64_t)*((unsigned __int8 *)v20 + 4) << 32);
        if ((v21 > 0xFF || (*v20 & 0xFELL) != 0) && ((v21 >> 8) & 0xFFF0) != 0)
        {
          if (*(_DWORD *)(a1 + 136))
            (*(void (**)(uint64_t, uint64_t))(a1 + 112))(a1, 16 * (*v20 & 0xFFFLL) + v15);
        }
      }
      v20 = (unsigned int *)((char *)v20 - 5);
      --v17;
    }
    while (v17);
    goto LABEL_29;
  }
  v5 = (unint64_t)(v4 + 1);
  v7 = v4[2];
  if (v7)
    goto LABEL_19;
  return 1;
}

uint64_t enumerate_pgm_map(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *i;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v3 + 224);
  v4 = *(_QWORD **)(v3 + 232);
  if (v2 > (unint64_t)v4 || (unint64_t)v4 >= *(_QWORD *)(a1 + 56) + v2)
  {
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(a1 + 96))(a1, v4, 32, *(_QWORD *)(a1 + 104));
    if (!v4)
      return 0;
  }
  else
  {
    if ((unint64_t)v4 >= 8)
      v4 = (_QWORD *)((char *)v4 + *(_QWORD *)(a1 + 48) - v2);
    if (!v4)
      return 0;
  }
  if (*v4 != v5)
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6 <= v5 && v5 < *(_QWORD *)(a1 + 56) + v6)
    {
      if (v5 >= 8)
        v5 = v5 - v6 + *(_QWORD *)(a1 + 48);
      if (!v5)
        return 0;
LABEL_16:
      v7 = *(unsigned int *)(v5 + 8);
      if (!*(_DWORD *)(v5 + 8))
        return 1;
LABEL_19:
      v8 = *(_QWORD *)v5;
      v9 = *(_QWORD *)(a1 + 40);
      if (v9 > *(_QWORD *)v5 || v8 >= *(_QWORD *)(a1 + 56) + v9)
      {
        if (!(16 * v7))
        {
          v8 = a1 + 80;
LABEL_28:
          for (i = (uint64_t *)(v8 + 16 * v7 - 16); ; i -= 2)
          {
            if (i == (uint64_t *)v4[3])
              goto LABEL_29;
            v12 = *i;
            if (*i == -1)
              goto LABEL_29;
            v13 = (uint64_t *)i[1];
            v14 = *((unsigned __int16 *)v13 + 13);
            v15 = *v13;
            v16 = *((unsigned __int16 *)v13 + 12);
            v17 = pas_page_malloc_cached_alignment;
            if (pas_page_malloc_cached_alignment)
            {
              if (v15 + 2 * v14 + v16)
                goto LABEL_36;
            }
            else
            {
              v17 = pas_page_malloc_alignment_slow();
              pas_page_malloc_cached_alignment = v17;
              if (v15 + 2 * v14 + v16)
              {
LABEL_36:
                if (*(_DWORD *)(a1 + 136))
                  (*(void (**)(uint64_t, uint64_t))(a1 + 112))(a1, v12 - v16 - v17);
              }
            }
            if (*(_DWORD *)(a1 + 128))
              (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 112))(a1, i[1], 40, 0, *(_QWORD *)(a1 + 120));
LABEL_29:
            if (!--v7)
              return 1;
          }
        }
        v8 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
      }
      else if (v8 >= 8)
      {
        v8 = v8 - v9 + *(_QWORD *)(a1 + 48);
      }
      if (!v8)
        return 0;
      goto LABEL_28;
    }
    v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v5, 24, *(_QWORD *)(a1 + 104));
    if (v5)
      goto LABEL_16;
    return 0;
  }
  v5 = (unint64_t)(v4 + 1);
  v7 = v4[2];
  if (v7)
    goto LABEL_19;
  return 1;
}

uint64_t pas_enumerate_segregated_heaps(unint64_t a1)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unsigned int **v5;
  unint64_t i;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t j;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t k;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = 0;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unint64_t **)(*(_QWORD *)(a1 + 32) + 72);
  if (v2 > (unint64_t)v3 || (unint64_t)v3 >= *(_QWORD *)(a1 + 56) + v2)
  {
    v3 = (unint64_t *)(*(uint64_t (**)(unint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), 8, *(_QWORD *)(a1 + 104));
    if (!v3)
      return 0;
  }
  else
  {
    if ((unint64_t)v3 >= 8)
      v3 = (unint64_t *)((char *)v3 + *(_QWORD *)(a1 + 48) - v2);
    if (!v3)
      return 0;
  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int ***)(*(_QWORD *)(a1 + 32) + 80);
  if (v4 > (unint64_t)v5 || (unint64_t)v5 >= *(_QWORD *)(a1 + 56) + v4)
  {
    v5 = (unsigned int **)(*(uint64_t (**)(unint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80), 8, *(_QWORD *)(a1 + 104));
    if (!v5)
      return 0;
  }
  else
  {
    if ((unint64_t)v5 >= 8)
      v5 = (unsigned int **)((char *)v5 + *(_QWORD *)(a1 + 48) - v4);
    if (!v5)
      return 0;
  }
  for (i = *v3; i; i = *(_QWORD *)(i + 8))
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (v7 > i || i >= *(_QWORD *)(a1 + 56) + v7)
    {
      i = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, i, 32, *(_QWORD *)(a1 + 104));
    }
    else
    {
      if (i < 8)
        goto LABEL_24;
      i = i - v7 + *(_QWORD *)(a1 + 48);
    }
    if (!i)
      return 0;
LABEL_24:
    v8 = *(_QWORD *)(i + 24);
    if (!v8)
      continue;
    v9 = pas_page_malloc_cached_alignment;
    if (pas_page_malloc_cached_alignment)
    {
      v10 = *(_QWORD *)(a1 + 40);
      if (v10 > v8)
        goto LABEL_32;
    }
    else
    {
      v9 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v9;
      v10 = *(_QWORD *)(a1 + 40);
      if (v10 > v8)
        goto LABEL_32;
    }
    if (v8 < *(_QWORD *)(a1 + 56) + v10)
    {
      v11 = v8;
      if (v8 < 8)
        goto LABEL_36;
      v11 = v8 - v10 + *(_QWORD *)(a1 + 48);
      goto LABEL_34;
    }
LABEL_32:
    v11 = a1 + 80;
    v12 = (v9 + 8063) & -v9;
    if (!v12)
      goto LABEL_36;
    v11 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v8, v12, *(_QWORD *)(a1 + 104));
LABEL_34:
    if (!v11)
      return 0;
    v9 = pas_page_malloc_cached_alignment;
LABEL_36:
    v13 = *(_QWORD *)(i + 24);
    v14 = *(_DWORD *)(v11 + 8056);
    if (v9)
    {
      v15 = *(_QWORD *)(a1 + 40);
      if (v15 > v13)
        goto LABEL_43;
    }
    else
    {
      v9 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v9;
      v15 = *(_QWORD *)(a1 + 40);
      if (v15 > v13)
        goto LABEL_43;
    }
    if (v13 < *(_QWORD *)(a1 + 56) + v15)
    {
      if (v13 >= 8)
        v13 = v13 - v15 + *(_QWORD *)(a1 + 48);
      goto LABEL_45;
    }
LABEL_43:
    v16 = (8 * v14) + v9 + 8063;
    v17 = a1 + 80;
    v18 = v16 & -v9;
    if (!v18)
      goto LABEL_46;
    v13 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v13, v18, *(_QWORD *)(a1 + 104));
LABEL_45:
    v17 = v13;
    if (!v13)
      return 0;
LABEL_46:
    for (j = 7992; j != -8; j -= 8)
    {
      v20 = *(_QWORD *)(v17 + j) & 0xFFC0FFFFFFFFFFFFLL;
      if (v20)
        pas_ptr_hash_set_set(&v55, v20, a1 + 8);
    }
    v21 = *v5;
    if (*v5)
    {
      v22 = *(_QWORD *)(a1 + 40);
      if (v22 <= (unint64_t)v21 && (unint64_t)v21 < *(_QWORD *)(a1 + 56) + v22)
      {
        if ((unint64_t)v21 >= 8)
        {
          v21 = (unsigned int *)((char *)v21 + *(_QWORD *)(a1 + 48) - v22);
          goto LABEL_56;
        }
        goto LABEL_57;
      }
      v21 = (unsigned int *)(*(uint64_t (**)(unint64_t))(a1 + 96))(a1);
LABEL_56:
      if (!v21)
        return 0;
LABEL_57:
      v23 = *v21;
      if (v23 >= 8)
        v23 += *(_QWORD *)(a1 + 48);
      v24 = 0;
      v25 = v5;
LABEL_60:
      if (v23)
      {
        v26 = v23 & 3;
        if (v26 != 1)
          goto LABEL_62;
LABEL_82:
        v27 = *(unsigned int *)((v23 & 0xFFFFFFFFFFFFFFFCLL) + 4);
        if (!(_DWORD)v27)
          continue;
LABEL_83:
        if (v27 >= *(_DWORD *)(v17 + 8052))
          continue;
        consider_allocator(a1, (uint64_t *)&v52, v17 + 8064 + 8 * v27);
        goto LABEL_85;
      }
      v25 = (_QWORD *)(*v25 + 1032);
      v28 = *(_QWORD *)(a1 + 40);
      if (v28 > (unint64_t)v25 || (unint64_t)v25 >= *(_QWORD *)(a1 + 56) + v28)
      {
        v25 = (_QWORD *)(*(uint64_t (**)(unint64_t, _QWORD *, uint64_t, _QWORD))(a1 + 96))(a1, v25, 8, *(_QWORD *)(a1 + 104));
        goto LABEL_70;
      }
      if ((unint64_t)v25 >= 8)
      {
        v25 = (_QWORD *)((char *)v25 + *(_QWORD *)(a1 + 48) - v28);
LABEL_70:
        if (!v25)
          return 0;
      }
      v29 = (unsigned int *)*v25;
      if (!*v25)
        continue;
      v30 = *(_QWORD *)(a1 + 40);
      if (v30 <= (unint64_t)v29 && (unint64_t)v29 < *(_QWORD *)(a1 + 56) + v30)
      {
        if ((unint64_t)v29 >= 8)
        {
          v29 = (unsigned int *)((char *)v29 + *(_QWORD *)(a1 + 48) - v30);
LABEL_77:
          if (!v29)
            return 0;
        }
        v23 = *v29;
        if (v23 >= 8)
          v23 += *(_QWORD *)(a1 + 48);
        if (!v23)
          continue;
        v24 = 0;
        v26 = v23 & 3;
        if (v26 == 1)
          goto LABEL_82;
LABEL_62:
        if (!v26)
        {
          v27 = *(unsigned int *)((v23 & 0xFFFFFFFFFFFFFFFCLL) + 36);
          if (!(_DWORD)v27)
            continue;
          goto LABEL_83;
        }
LABEL_85:
        ++v24;
        v31 = (unsigned int *)(*v25 + 4 * v24);
        v32 = *(_QWORD *)(a1 + 40);
        if (v32 > (unint64_t)v31 || (unint64_t)v31 >= *(_QWORD *)(a1 + 56) + v32)
        {
          v31 = (unsigned int *)(*(uint64_t (**)(unint64_t))(a1 + 96))(a1);
        }
        else if ((unint64_t)v31 >= 8)
        {
          v31 = (unsigned int *)((char *)v31 + *(_QWORD *)(a1 + 48) - v32);
        }
        if (!v31)
          return 0;
        v23 = *v31;
        if (v23 >= 8)
          v23 += *(_QWORD *)(a1 + 48);
        goto LABEL_60;
      }
      v29 = (unsigned int *)(*(uint64_t (**)(unint64_t))(a1 + 96))(a1);
      goto LABEL_77;
    }
  }
  v33 = *(_QWORD *)(a1 + 40);
  v34 = *(unint64_t **)(*(_QWORD *)(a1 + 32) + 208);
  if (v33 > (unint64_t)v34 || (unint64_t)v34 >= *(_QWORD *)(a1 + 56) + v33)
  {
    v34 = (unint64_t *)(*(uint64_t (**)(unint64_t))(a1 + 96))(a1);
  }
  else if ((unint64_t)v34 >= 8)
  {
    v34 = (unint64_t *)((char *)v34 + *(_QWORD *)(a1 + 48) - v33);
  }
  if (!v34)
    return 0;
  v35 = *v34;
  if (!v35)
    goto LABEL_114;
  v36 = *(_QWORD *)(a1 + 40);
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216);
  if (v36 <= v35 && v35 < *(_QWORD *)(a1 + 56) + v36)
  {
    if (v35 < 8)
      goto LABEL_111;
    v35 = v35 - v36 + *(_QWORD *)(a1 + 48);
LABEL_106:
    if (v35)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216);
      goto LABEL_111;
    }
    return 0;
  }
  if (320 * v37)
  {
    v35 = (*(uint64_t (**)(unint64_t))(a1 + 96))(a1);
    goto LABEL_106;
  }
  v35 = a1 + 80;
LABEL_111:
  if (v37)
  {
    v39 = v35 + 320 * v37 - 312;
    do
    {
      --v37;
      consider_allocator(a1, (uint64_t *)&v52, v39);
      v39 -= 320;
    }
    while (v37);
  }
LABEL_114:
  result = pas_enumerator_for_each_heap(a1, (unsigned int (*)(uint64_t, uint64_t, uint64_t))collect_shared_page_directories_heap_callback, (uint64_t)&v52);
  if ((_DWORD)result)
  {
    v40 = v54;
    if ((_DWORD)v54)
    {
      do
      {
        --v40;
        v41 = *(unsigned int **)(*((_QWORD *)&v53 + 1) + 8 * v40);
        if ((unint64_t)v41 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v42 = *v41;
          if (v42 >= 8)
            v42 += *(_QWORD *)(a1 + 48);
          if (v42)
          {
            result = shared_page_directory_view_callback(a1, v42, *((_WORD *)v41 + 6));
            if (!(_DWORD)result)
              return result;
            v43 = v41[1];
            if ((_DWORD)v43)
            {
              v44 = *(_QWORD *)(a1 + 48);
              v45 = v44 + 8 * v43;
              if (v45)
              {
                v47 = *(unsigned int *)(v45 + 44);
                v46 = *(unsigned int *)(v45 + 48);
                v48 = v44 + 8 * v47;
                v49 = (_DWORD)v47 ? v48 : 0;
                if ((_DWORD)v46)
                {
                  for (k = 0; k < v46; ++k)
                  {
                    v51 = *(unsigned int *)(v49 + 4 * k);
                    if (v51 >= 8)
                      v51 += *(_QWORD *)(a1 + 48);
                    if (v51)
                    {
                      result = shared_page_directory_view_callback(a1, v51, *((_WORD *)v41 + 6));
                      if (!(_DWORD)result)
                        return result;
                      v46 = *(unsigned int *)(v45 + 48);
                    }
                  }
                }
              }
            }
          }
        }
      }
      while (v40);
    }
    return pas_enumerator_for_each_heap(a1, (unsigned int (*)(uint64_t, uint64_t, uint64_t))enumerate_segregated_heap_callback, (uint64_t)&v52);
  }
  return result;
}

_DWORD *pas_ptr_hash_set_set(_DWORD *result, unint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t j;

  v4 = result;
  v5 = result[4];
  v6 = result[2];
  if (v6 <= 2 * (result[5] + v5))
  {
    if (6 * v5 >= 2 * v6)
      v8 = 2 * v6;
    else
      v8 = result[2];
    if (v6)
      v9 = v8;
    else
      v9 = 16;
    v10 = v9 - 1;
    v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))a3)(8 * v9, "pas_ptr_hash_set/table", 0, *(_QWORD *)(a3 + 16));
    v12 = v11;
    if (v9)
      memset(v11, 255, 8 * v9);
    v13 = *(_QWORD *)v4;
    v14 = v4[2];
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(_QWORD *)(v13 + 8 * i);
        if (v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = (v16 ^ (v16 >> 4) ^ 0xDEADBEEF) + 32 * (v16 ^ (v16 >> 4));
          v18 = ((v16 >> 36) ^ HIDWORD(v16) ^ 0xDEADBEEF) + 32 * ((v16 >> 36) ^ HIDWORD(v16));
          v19 = v17 ^ ((v18 ^ v17) >> 11) ^ v18;
          do
            v20 = v19++ & v10;
          while (v12[v20] < 0xFFFFFFFFFFFFFFFELL);
          v12[v20] = v16;
        }
      }
    }
    *(_QWORD *)v4 = v12;
    v4[2] = v9;
    v4[3] = v10;
    v4[5] = 0;
    result = (_DWORD *)(*(uint64_t (**)(void))(a3 + 8))();
  }
  v21 = 0;
  v22 = (a2 ^ (a2 >> 4) ^ 0xDEADBEEF) + 32 * (a2 ^ (a2 >> 4));
  v23 = ((a2 >> 36) ^ HIDWORD(a2) ^ 0xDEADBEEF) + 32 * ((a2 >> 36) ^ HIDWORD(a2));
  v24 = v22 ^ ((v23 ^ v22) >> 11) ^ v23;
  v25 = v4[3];
  v26 = *(_QWORD *)v4;
  v27 = (unint64_t *)(*(_QWORD *)v4 + 8 * (v24 & v25));
  for (j = *v27; *v27 == -2; j = *v27)
  {
LABEL_19:
    if (!v21)
      v21 = v27;
    v27 = (unint64_t *)(v26 + 8 * (++v24 & v25));
  }
  while (j != -1)
  {
    if (j == a2)
      goto LABEL_29;
    v27 = (unint64_t *)(v26 + 8 * (++v24 & v25));
    j = *v27;
    if (*v27 == -2)
      goto LABEL_19;
  }
  if (v21)
  {
    --v4[5];
    v27 = v21;
  }
  ++v4[4];
LABEL_29:
  *v27 = a2;
  return result;
}

unint64_t consider_allocator(unint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t j;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[7];

  v3 = *(_QWORD *)(a3 + 24);
  if (v3)
  {
    v6 = result;
    if ((*(_BYTE *)(a3 + 5) - 4) > 7u)
      v7 = 0;
    else
      v7 = qword_19919FCC0[(char)(*(_BYTE *)(a3 + 5) - 4)];
    v8 = v3 & -*((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v7) + 4);
    v9 = *((_DWORD *)a2 + 4);
    v10 = *((_DWORD *)a2 + 2);
    if (v10 <= 2 * (*((_DWORD *)a2 + 5) + v9))
    {
      if (6 * v9 >= 2 * v10)
        v11 = 2 * v10;
      else
        v11 = *((_DWORD *)a2 + 2);
      if (v10)
        v12 = v11;
      else
        v12 = 16;
      v13 = v12 - 1;
      v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(result + 8))(16 * v12, "local_allocator_map/table", 0, *(_QWORD *)(result + 24));
      v15 = v14;
      if (v12)
        bzero(v14, 16 * v12);
      v16 = *a2;
      v17 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v17)
      {
        for (i = 0; i != v17; ++i)
        {
          v19 = (unint64_t *)(v16 + 16 * i);
          v20 = *v19;
          if (*v19 >= 2)
          {
            v21 = (v20 ^ (v20 >> 4) ^ 0xDEADBEEF) + 32 * (v20 ^ (v20 >> 4));
            v22 = ((v20 >> 36) ^ HIDWORD(v20) ^ 0xDEADBEEF) + 32 * ((v20 >> 36) ^ HIDWORD(v20));
            v23 = v21 ^ ((v22 ^ v21) >> 11) ^ v22;
            do
              v24 = v23++ & v13;
            while (v15[2 * v24] > 1uLL);
            *(_OWORD *)&v15[2 * v24] = *(_OWORD *)v19;
          }
        }
      }
      *a2 = (uint64_t)v15;
      *((_DWORD *)a2 + 2) = v12;
      *((_DWORD *)a2 + 3) = v13;
      *((_DWORD *)a2 + 5) = 0;
      result = (*(uint64_t (**)(void))(v6 + 16))();
    }
    v25 = 0;
    v26 = (v8 ^ (v8 >> 4) ^ 0xDEADBEEF) + 32 * (v8 ^ (v8 >> 4));
    v27 = ((v8 >> 36) ^ HIDWORD(v8) ^ 0xDEADBEEF) + 32 * ((v8 >> 36) ^ HIDWORD(v8));
    v28 = v26 ^ ((v27 ^ v26) >> 11) ^ v27;
    v29 = *((_DWORD *)a2 + 3);
    v30 = *a2;
    v31 = (unint64_t *)(*a2 + 16 * (v28 & v29));
    for (j = *v31; *v31 == 1; j = *v31)
    {
LABEL_23:
      if (!v25)
        v25 = v31;
      v31 = (unint64_t *)(v30 + 16 * (++v28 & v29));
    }
    while (j)
    {
      if (j == v8)
        goto LABEL_33;
      v31 = (unint64_t *)(v30 + 16 * (++v28 & v29));
      j = *v31;
      if (*v31 == 1)
        goto LABEL_23;
    }
    if (v25)
    {
      --*((_DWORD *)a2 + 5);
      v31 = v25;
    }
    ++*((_DWORD *)a2 + 4);
    *v31 = v8;
    v31[1] = 0;
LABEL_33:
    v33 = *(_QWORD *)v6;
    if (!*(_QWORD *)v6 || (v34 = *(_QWORD *)(v33 + 16), (unint64_t)(*(_QWORD *)(v33 + 8) - v34) <= 0xF))
    {
      result = pas_page_malloc_try_allocate_without_deallocating_padding(40, 1, 0, (uint64_t)v38);
      v34 = 0;
      v35 = v38[0];
      v36 = v38[1] + v38[5] - 24;
      *(_QWORD *)v38[0] = v33;
      *(_QWORD *)(v35 + 8) = v36;
      *(_QWORD *)(v35 + 16) = 0;
      *(_QWORD *)v6 = v35;
      v33 = v35;
    }
    v37 = v33 + v34;
    *(_QWORD *)(v33 + 16) = v34 + 16;
    *(_QWORD *)(v37 + 24) = v31[1];
    *(_QWORD *)(v37 + 32) = a3;
    v31[1] = v33 + v34 + 24;
  }
  return result;
}

uint64_t collect_shared_page_directories_heap_callback(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(pas_heap_config_kind_for_config_table[*(_BYTE *)(a2 + 83) & 0x3F] + 1072))();
}

uint64_t shared_page_directory_view_callback(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + a3);
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 1) == 0)
    goto LABEL_5;
  v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) >= 8)
    v7 = (uint64_t *)((char *)v7 + *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40));
  v6 = *v7;
  if ((*(_DWORD *)(v4 + 16) & 0x80000000) != 0)
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 72))(a1, v6);
    v8 = v15;
    v16 = *(_QWORD *)(v5 + 32) / *(_QWORD *)(v5 + 40);
    v17 = v16 + 7;
    if (v16 == 1)
      v17 = 4;
    v18 = *(_QWORD *)(a1 + 40);
    if (v18 > v15 || v15 >= *(_QWORD *)(a1 + 56) + v18)
    {
      v8 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, _QWORD))(a1 + 96))(a1, v15, ((v17 + 4 * ((unint64_t)(*(_QWORD *)(v5 + 120) + 31) >> 5)) & 0xFFFFFFFFFFFFFFF8) + 44, *(_QWORD *)(a1 + 104));
    }
    else if (v15 >= 8)
    {
      v8 = v15 - v18 + *(_QWORD *)(a1 + 48);
    }
    if (!v8)
      return 0;
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  if (v6)
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (v9)
    {
      for (i = 0; i < v9; i += *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200))
        pas_enumerator_exclude_accounted_page(a1, i + v6);
    }
    if ((*(_DWORD *)(v4 + 16) & 0x80000000) != 0)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v5 + 32);
      v13 = *(_QWORD *)(v5 + 40);
      if (v12 != v13)
        v11 = (unsigned __int8 *)(v8 + 4 * ((unint64_t)(*(_QWORD *)(v5 + 120) + 31) >> 5) + 44);
      pas_enumerator_record_page_payload_and_meta(a1, v6, v12, v13, v11, (*(_QWORD *)(v5 + 128) + (1 << *(_BYTE *)(v5 + 28)) - 1) & -(1 << *(_BYTE *)(v5 + 28)), *(_QWORD *)(v5 + 144) + *(_QWORD *)(v5 + 128));
    }
  }
  return 1;
}

uint64_t enumerate_segregated_heap_callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t j;
  uint64_t v17;
  uint64_t v18;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3)
  {
    v5 = *(_QWORD *)(a1 + 48);
    for (i = (unsigned int *)(v5 + 8 * v3); i; i = (unsigned int *)(v5 + 8 * v18))
    {
      v8 = *i;
      if (v8 < 8)
        v5 = 0;
      if (v5 + v8)
      {
        if (size_directory_view_callback(a1, v5 + v8, a3))
        {
          v9 = i[1];
          if ((_DWORD)v9)
          {
            v10 = *(_QWORD *)(a1 + 48);
            v11 = v10 + 8 * v9;
            if (v11)
            {
              v13 = *(unsigned int *)(v11 + 44);
              v12 = *(unsigned int *)(v11 + 48);
              v14 = v10 + 8 * v13;
              v15 = (_DWORD)v13 ? v14 : 0;
              if ((_DWORD)v12)
              {
                for (j = 0; j < v12; ++j)
                {
                  v17 = *(unsigned int *)(v15 + 4 * j);
                  if (v17 >= 8)
                    v17 += *(_QWORD *)(a1 + 48);
                  if (v17)
                  {
                    if (!size_directory_view_callback(a1, v17, a3))
                      break;
                    v12 = *(unsigned int *)(v11 + 48);
                  }
                }
              }
            }
          }
        }
      }
      v18 = i[11];
      if (!(_DWORD)v18)
        break;
      v5 = *(_QWORD *)(a1 + 48);
    }
  }
  return 1;
}

uint64_t collect_shared_page_directories_shared_page_directory_callback(uint64_t a1, unint64_t a2, uint64_t a3)
{
  pas_ptr_hash_set_set((_DWORD *)(a3 + 24), a2, a1 + 8);
  return 1;
}

uint64_t size_directory_view_callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  int v51;
  uint64_t remote;
  int v53;
  int v54;

  v5 = "shared_view";
  switch(a2 & 7)
  {
    case 0:
    case 1:
      v6 = a2 & 0xFFFFFFFFFFFFFFF8;
      v7 = ((8 * *(unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8)) | ((unint64_t)*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 10) << 19))
         + *(_QWORD *)(a1 + 48);
      v8 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v7 + 12));
      v9 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
      v10 = *(_QWORD *)(v8 + 32);
      if (v10)
      {
        for (i = 0; i < v10; i += *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200))
          pas_enumerator_exclude_accounted_page(a1, i + v9);
      }
      if (!*(_BYTE *)(v6 + 11))
        return 1;
      v12 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v12)
        v13 = (unsigned int *)(*(_QWORD *)(a1 + 48) + 8 * v12);
      else
        v13 = 0;
      v25 = (*(uint64_t (**)(uint64_t, unint64_t))(v8 + 72))(a1, v9);
      v20 = v25;
      v26 = *(_QWORD *)(v8 + 32) / *(_QWORD *)(v8 + 40);
      v27 = v26 + 7;
      if (v26 == 1)
        v27 = 4;
      v28 = *(_QWORD *)(a1 + 40);
      if (v28 > v25 || v25 >= *(_QWORD *)(a1 + 56) + v28)
      {
        v20 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, _QWORD))(a1 + 96))(a1, v25, ((v27 + 4 * ((unint64_t)(*(_QWORD *)(v8 + 120) + 31) >> 5)) & 0xFFFFFFFFFFFFFFF8) + 44, *(_QWORD *)(a1 + 104));
      }
      else if (v25 >= 8)
      {
        v20 = v25 - v28 + *(_QWORD *)(a1 + 48);
      }
      if (!v20)
        return 0;
      v29 = *(_QWORD *)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_49;
      v30 = (v9 ^ (v9 >> 4) ^ 0xDEADBEEF) + 32 * (v9 ^ (v9 >> 4));
      v31 = ((v9 >> 36) ^ HIDWORD(v9) ^ 0xDEADBEEF) + 32 * ((v9 >> 36) ^ HIDWORD(v9));
      v32 = v30 ^ ((v31 ^ v30) >> 11) ^ v31;
      v33 = *(_DWORD *)(a3 + 12);
      while (1)
      {
        v34 = *(_QWORD *)(v29 + 16 * (v32 & v33));
        if (v34 > 1)
        {
          if (v34 == v9)
          {
            v35 = *(_QWORD *)(v29 + 16 * (v32 & v33) + 8);
            if (v35)
            {
              v36 = *(_QWORD *)(v35 + 8);
              v37 = *v13;
              v38 = v13[1];
              v39 = *(_QWORD *)(v8 + 32);
              v40 = *(_QWORD *)(v8 + 40);
              if (v39 != v40)
                goto LABEL_45;
LABEL_50:
              pas_enumerator_record_page_payload_and_meta(a1, v9, v39, v40, 0, v37, v38);
              v41 = *(unsigned int *)((char *)v13 + 9);
              if (v41 < 8)
                goto LABEL_47;
            }
            else
            {
LABEL_49:
              v36 = 0;
              v37 = *v13;
              v38 = v13[1];
              v39 = *(_QWORD *)(v8 + 32);
              v40 = *(_QWORD *)(v8 + 40);
              if (v39 == v40)
                goto LABEL_50;
LABEL_45:
              pas_enumerator_record_page_payload_and_meta(a1, v9, v39, v40, (unsigned __int8 *)(v20 + 4 * ((unint64_t)(*(_QWORD *)(v8 + 120) + 31) >> 5) + 44), v37, v38);
              v41 = *(unsigned int *)((char *)v13 + 9);
              if (v41 < 8)
              {
LABEL_47:
                remote = v41;
                v42 = (unint64_t)(*(_QWORD *)(v8 + 120) + 31) >> 5;
                v53 = 0;
                v54 = v42;
                goto LABEL_48;
              }
            }
            v41 += *(_QWORD *)(a1 + 48);
            goto LABEL_47;
          }
        }
        else if (v34 != 1)
        {
          goto LABEL_49;
        }
        ++v32;
      }
    case 2:
      goto LABEL_24;
    case 3:
      v5 = "shared_handle";
      goto LABEL_24;
    case 4:
      v14 = a2 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 19) & 0x10) == 0)
        return 1;
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(unsigned __int16 *)(v14 + 4) | ((unint64_t)*(unsigned __int8 *)(v14 + 6) << 16);
      v17 = (_DWORD)v16 ? v15 + 8 * v16 : 0;
      if ((*(_DWORD *)(v17 + 16) & 0x80000000) == 0)
        return 1;
      v7 = ((8 * *(unsigned __int16 *)(v14 + 7)) | ((unint64_t)*(unsigned __int8 *)(v14 + 9) << 19)) + v15;
      v8 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v7 + 12));
      v18 = (unint64_t *)(*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFELL);
      if ((unint64_t)v18 >= 8)
        v18 = (unint64_t *)((char *)v18 + v15 - *(_QWORD *)(a1 + 40));
      v9 = *v18;
      v19 = (*(uint64_t (**)(uint64_t, unint64_t))(v8 + 72))(a1, *v18);
      v20 = v19;
      v21 = *(_QWORD *)(v8 + 32) / *(_QWORD *)(v8 + 40);
      v22 = v21 + 7;
      if (v21 == 1)
        v22 = 4;
      v23 = *(_QWORD *)(a1 + 40);
      if (v23 > v19 || v19 >= *(_QWORD *)(a1 + 56) + v23)
      {
        v20 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, _QWORD))(a1 + 96))(a1, v19, ((v22 + 4 * ((unint64_t)(*(_QWORD *)(v8 + 120) + 31) >> 5)) & 0xFFFFFFFFFFFFFFF8) + 44, *(_QWORD *)(a1 + 104));
      }
      else if (v19 >= 8)
      {
        v20 = v19 - v23 + *(_QWORD *)(a1 + 48);
      }
      if (!v20)
        return 0;
      v43 = *(_QWORD *)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_67;
      v44 = (v9 ^ (v9 >> 4) ^ 0xDEADBEEF) + 32 * (v9 ^ (v9 >> 4));
      v45 = ((v9 >> 36) ^ HIDWORD(v9) ^ 0xDEADBEEF) + 32 * ((v9 >> 36) ^ HIDWORD(v9));
      v46 = v44 ^ ((v45 ^ v44) >> 11) ^ v45;
      v47 = *(_DWORD *)(a3 + 12);
      while (2)
      {
        v48 = *(_QWORD *)(v43 + 16 * (v46 & v47));
        if (v48 <= 1)
        {
          if (v48 != 1)
            goto LABEL_67;
LABEL_57:
          ++v46;
          continue;
        }
        break;
      }
      if (v48 != v9)
        goto LABEL_57;
      v49 = *(_QWORD **)(v43 + 16 * (v46 & v47) + 8);
      if (!v49)
      {
LABEL_67:
        v36 = 0;
        goto LABEL_68;
      }
      while (1)
      {
        v36 = v49[1];
        v50 = *(_QWORD *)(v36 + 48);
        if (v50 >= 8)
          v50 = *(_QWORD *)(a1 + 48) + v50 - *(_QWORD *)(a1 + 40);
        if ((v50 & 0xFFFFFFFFFFFFFFF8) == v14)
          break;
        v49 = (_QWORD *)*v49;
        if (!v49)
          goto LABEL_67;
      }
LABEL_68:
      remote = pas_lenient_compact_unsigned_ptr_load_remote(a1, (unsigned int *)(v14 + 12), ((unint64_t)(*(_QWORD *)(v8 + 120) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      v51 = *(unsigned __int8 *)(v14 + 17) + *(unsigned __int8 *)(v14 + 18);
      v53 = *(unsigned __int8 *)(v14 + 18);
      v54 = v51;
LABEL_48:
      record_page_objects(a1, a3, v7, v8, v9, v20, v36, (uint64_t)&remote);
      return 1;
    case 5:
      v5 = "size_directory";
      goto LABEL_24;
    default:
      v5 = 0;
LABEL_24:
      pas_log("Invalid view kind in size directory: %s\n", v5);
      return 1;
  }
}

uint64_t record_page_objects(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int i;
  unint64_t v28;
  uint64_t v29;

  if (*(_DWORD *)(result + 136))
  {
    v9 = *(_DWORD *)(a8 + 12);
    v10 = (32 * *(_DWORD *)(a8 + 8));
    if (v10 < 32 * v9)
    {
      v16 = result;
      v17 = a6 + 44;
      v29 = a7 + 56;
      do
      {
        v18 = v10 >> 5;
        v19 = 1 << v10;
        if (((1 << v10) & *(_DWORD *)(*(_QWORD *)a8 + 4 * (v10 >> 5))) != 0 && (*(_DWORD *)(v17 + 4 * v18) & v19) != 0)
        {
          v20 = (v10 << *(_BYTE *)(a4 + 28)) + a5;
          if (!a7)
            goto LABEL_18;
          v21 = *(_QWORD *)(a7 + 8);
          if (v20 >= v21 || v20 < v21 - *(unsigned int *)(a7 + 16))
          {
            v22 = *(unsigned int *)(a7 + 32);
            if (*(_DWORD *)(a7 + 36) <= v22)
              goto LABEL_18;
            if (v22 == v10 >> 6 && !*(_DWORD *)(a4 + 96) && *(_BYTE *)(a7 + 6))
            {
              v23 = *(_QWORD *)(a7 + 40);
              if (*(_BYTE *)(a4 + 168))
                v23 = __rbit64(v23);
              if (((v23 >> v10) & 1) == 0)
              {
LABEL_18:
                v24 = *(_QWORD *)(a2 + 48);
                if (v24)
                {
                  v25 = (v20 ^ (v20 >> 4) ^ 0xDEADBEEF) + 32 * (v20 ^ (v20 >> 4));
                  v26 = ((v20 >> 36) ^ HIDWORD(v20) ^ 0xDEADBEEF) + 32 * ((v20 >> 36) ^ HIDWORD(v20));
                  for (i = v25 ^ ((v26 ^ v25) >> 11) ^ v26; ; ++i)
                  {
                    v28 = *(_QWORD *)(v24 + 8 * (i & *(_DWORD *)(a2 + 60)));
                    if (v28 < 0xFFFFFFFFFFFFFFFELL)
                    {
                      if (v28 == v20)
                        goto LABEL_5;
                    }
                    else if (v28 != -2)
                    {
                      break;
                    }
                  }
                }
                if ((*(_DWORD *)(a3 + 24) & 0x7FFFFFF) != 0)
                {
                  if (*(_DWORD *)(v16 + 136))
                  {
                    result = (*(uint64_t (**)(uint64_t, unint64_t))(v16 + 112))(v16, v20);
                    v9 = *(_DWORD *)(a8 + 12);
                  }
                }
              }
            }
            else if ((*(_DWORD *)(v29 + 4 * v18) & v19) == 0)
            {
              goto LABEL_18;
            }
          }
        }
LABEL_5:
        ++v10;
      }
      while (v10 < (32 * v9));
    }
  }
  return result;
}

uint64_t pas_enumerate_unaccounted_pages_as_meta(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v43;
  char *v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  _OWORD v53[5];
  void *__src[2];
  uint64_t v55;

  if (*(_DWORD *)(a1 + 128))
  {
    v55 = 0;
    *(_OWORD *)__src = 0u;
    memset(v53, 0, sizeof(v53));
    v2 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      do
      {
        while (1)
        {
          --v2;
          v5 = *(_QWORD *)(**(_QWORD **)(a1 + 88) + 8 * v2);
          if (v5 <= 0xFFFFFFFFFFFFFFFDLL)
            break;
          v4 = v3;
          if (!v2)
            goto LABEL_29;
        }
        v6 = v55;
        v7 = 8 * v3;
        if (v3 >= v55 + 10)
        {
          if ((unint64_t)(2 * v55) <= 4)
            v9 = 4;
          else
            v9 = 2 * v55;
          v8 = (char *)(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(a1 + 8))(8 * v9, "pas_ptr_min_heap/outline_array", 0, *(_QWORD *)(a1 + 24));
          bzero(v8, 8 * v9);
          v10 = __src[1];
          memcpy(v8, __src[1], v7 - 80);
          (*(void (**)(void *, uint64_t, _QWORD, _QWORD))(a1 + 16))(v10, 8 * v6, 0, *(_QWORD *)(a1 + 24));
          __src[1] = v8;
          v55 = v9;
        }
        else
        {
          v8 = (char *)__src[1];
        }
        v4 = v3 + 1;
        v11 = (char *)v53 + v7 + 8;
        if (v3 >= 0xA)
          v11 = &v8[v7 - 80];
        *(_QWORD *)v11 = 0;
        *(_QWORD *)&v53[0] = v3 + 1;
        v12 = v3 + 1;
        if (v4 >= 2)
        {
          v13 = v3 + 1;
          while (1)
          {
            v12 = v13 >> 1;
            v14 = (v13 >> 1) - 1;
            v15 = v14 >= 0xA ? (char *)__src[1] + 8 * v14 - 80 : (char *)v53 + 8 * v14 + 8;
            v16 = *(_QWORD *)v15;
            if (v16 <= v5)
              break;
            v17 = 8 * v13 - 8;
            v18 = (char *)__src[1] + v17 - 80;
            if (v13 < 0xB)
              v18 = (char *)v53 + v17 + 8;
            *(_QWORD *)v18 = v16;
            v19 = v13 > 3;
            v13 >>= 1;
            if (!v19)
              goto LABEL_25;
          }
          v12 = v13;
        }
LABEL_25:
        v20 = v12 - 1;
        if (v20 >= 0xA)
          v21 = (char *)__src[1] + 8 * v20 - 80;
        else
          v21 = (char *)v53 + 8 * v20 + 8;
        *(_QWORD *)v21 = v5;
        ++v3;
      }
      while (v2);
LABEL_29:
      if (v4)
      {
        v22 = 0;
        v23 = 0;
        do
        {
          v24 = 8 * (v4 - 1);
          v25 = (unint64_t *)((char *)v53 + v24 + 8);
          v26 = *((_QWORD *)&v53[0] + 1);
          v27 = (char *)__src[1] + v24 - 80;
          if (v4 >= 0xB)
            v25 = (unint64_t *)v27;
          v28 = *v25;
          *v25 = 0;
          v53[0] = --v4;
          if (v4)
          {
            v29 = 1;
            v30 = 2;
            v31 = 3;
            if (v4 >= 3)
              goto LABEL_42;
LABEL_54:
            v34 = (char *)__src[1];
            if (v30 <= v4)
            {
              v43 = 8 * (v30 - 1);
              v44 = (char *)v53 + v43 + 8;
              v45 = (char *)__src[1] + v43 - 80;
              if (v30 - 1 >= 0xA)
                v46 = (unint64_t *)v45;
              else
                v46 = (unint64_t *)v44;
              v41 = *v46;
              while (v28 > v41)
              {
LABEL_60:
                v47 = v29 - 1;
                v48 = (uint64_t)&v34[8 * v47 - 80];
                if (v47 >= 0xA)
                  v49 = (_QWORD *)v48;
                else
                  v49 = (_QWORD *)v53 + v47 + 1;
                *v49 = v41;
                v29 = v30;
                v30 *= 2;
                v31 = (2 * v29) | 1;
                if (v31 > v4)
                  goto LABEL_54;
                while (1)
                {
LABEL_42:
                  v34 = (char *)__src[1];
                  v35 = (char *)__src[1] + 8 * v30 - 80;
                  if (v30 < 0xA)
                    v35 = (char *)v53 + 8 * v30 + 8;
                  v36 = *(_QWORD *)v35;
                  v37 = 8 * (v30 - 1);
                  v38 = (char *)v53 + v37 + 8;
                  v39 = (char *)__src[1] + v37 - 80;
                  v40 = v30 - 1 >= 0xA ? v39 : v38;
                  v41 = *(_QWORD *)v40;
                  if (v28 <= v36)
                    break;
                  if (v28 > v41 && v36 >= v41)
                    goto LABEL_60;
                  v32 = v29 - 1;
                  if (v32 >= 0xA)
                    v33 = (char *)__src[1] + 8 * v32 - 80;
                  else
                    v33 = (char *)v53 + 8 * v32 + 8;
                  *(_QWORD *)v33 = v36;
                  v29 = v31;
                  v30 = 2 * v31;
                  v31 = (2 * v31) | 1;
                  if (v31 > v4)
                    goto LABEL_54;
                }
              }
            }
            v50 = v29 - 1;
            if (v50 >= 0xA)
              v51 = &v34[8 * v50 - 80];
            else
              v51 = (char *)v53 + 8 * v50 + 8;
            *(_QWORD *)v51 = v28;
          }
          if (!v26)
            break;
          if (v22 != v26)
          {
            if (v22 != v23 && *(_DWORD *)(a1 + 128))
            {
              (*(void (**)(uint64_t))(a1 + 112))(a1);
              v4 = *(_QWORD *)&v53[0];
            }
            v23 = v26;
          }
          v22 = v26 + *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200);
        }
        while (v4);
        if (v22 != v23 && *(_DWORD *)(a1 + 128))
          (*(void (**)(uint64_t))(a1 + 112))(a1);
      }
    }
  }
  return 1;
}

_QWORD *pas_enumerator_create(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _OWORD *v53;
  _UNKNOWN **v54;
  uint64_t (*v55)(uint64_t);
  _UNKNOWN **v56;
  unint64_t *(*v57)(uint64_t);
  _UNKNOWN **v58;
  unint64_t *(*v59)(uint64_t);
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _OWORD v67[2];
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  pas_page_malloc_try_allocate_without_deallocating_padding(168, 1, 0, (uint64_t)v67);
  v14 = *(_QWORD *)&v67[0];
  v15 = *((_QWORD *)&v67[0] + 1) + v68;
  v16 = *((_QWORD *)&v67[0] + 1) + v68 - 24;
  **(_QWORD **)&v67[0] = 0;
  *(_QWORD *)(v14 + 8) = v16;
  v17 = (_QWORD *)(v14 + 24);
  v18 = 144;
  *(_QWORD *)(v14 + 16) = 144;
  *(_QWORD *)(v14 + 24) = v14;
  *(_QWORD *)(v14 + 32) = allocate;
  *(_QWORD *)(v14 + 40) = deallocate;
  *(_QWORD *)(v14 + 48) = v14 + 24;
  v19 = v15 - 168;
  v20 = v14;
  if (v19 <= 0x1F)
  {
    pas_page_malloc_try_allocate_without_deallocating_padding(56, 1, 0, (uint64_t)v67);
    v18 = 0;
    v20 = *(_QWORD *)&v67[0];
    v21 = *((_QWORD *)&v67[0] + 1) + v68 - 24;
    **(_QWORD **)&v67[0] = v14;
    *(_QWORD *)(v20 + 8) = v21;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v14 + 24) = v20;
  }
  v22 = v20 + v18;
  *(_QWORD *)(v20 + 16) = v18 | 0x20;
  *(_QWORD *)(v14 + 96) = v20 + v18 + 24;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  v23 = a2(v14 + 24, a1, 240, a3);
  if (!v23)
    goto LABEL_23;
  v24 = (__int128 *)v23;
  v25 = *(_QWORD *)(v14 + 16);
  v26 = v14;
  if ((unint64_t)(*(_QWORD *)(v14 + 8) - v25) <= 0xEF)
  {
    pas_page_malloc_try_allocate_without_deallocating_padding(264, 1, 0, (uint64_t)v67);
    v25 = 0;
    v26 = *(_QWORD *)&v67[0];
    v27 = *((_QWORD *)&v67[0] + 1) + v68 - 24;
    **(_QWORD **)&v67[0] = v14;
    *(_QWORD *)(v26 + 8) = v27;
    *(_QWORD *)(v26 + 16) = 0;
  }
  v28 = v26 + v25;
  *(_QWORD *)(v26 + 16) = v25 + 240;
  *(_QWORD *)(v14 + 56) = v26 + v25 + 24;
  v29 = *v24;
  v30 = v24[1];
  *(_OWORD *)(v28 + 56) = v24[2];
  *(_OWORD *)(v28 + 40) = v30;
  *(_OWORD *)(v28 + 24) = v29;
  v31 = v24[3];
  v32 = v24[4];
  v33 = v24[5];
  *(_OWORD *)(v28 + 120) = v24[6];
  *(_OWORD *)(v28 + 104) = v33;
  *(_OWORD *)(v28 + 88) = v32;
  *(_OWORD *)(v28 + 72) = v31;
  v34 = v24[7];
  v35 = v24[8];
  v36 = v24[9];
  *(_OWORD *)(v28 + 184) = v24[10];
  *(_OWORD *)(v28 + 168) = v36;
  *(_OWORD *)(v28 + 152) = v35;
  *(_OWORD *)(v28 + 136) = v34;
  v37 = v24[11];
  v38 = v24[12];
  v39 = v24[13];
  *(_OWORD *)(v28 + 248) = v24[14];
  *(_OWORD *)(v28 + 232) = v39;
  *(_OWORD *)(v28 + 216) = v38;
  *(_OWORD *)(v28 + 200) = v37;
  v40 = (uint64_t *)a2(v14 + 24, *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8), 8, a3);
  if (!v40)
    goto LABEL_23;
  v41 = *v40;
  v42 = (uint64_t *)a2(v14 + 24, *(_QWORD *)(*(_QWORD *)(v14 + 56) + 16), 8, a3);
  if (!v42)
    goto LABEL_23;
  v43 = *v42;
  v44 = (uint64_t *)a2(v14 + 24, *(_QWORD *)(*(_QWORD *)(v14 + 56) + 24), 8, a3);
  if (!v44)
    goto LABEL_23;
  v45 = *v44;
  *(_QWORD *)(v14 + 64) = v41;
  v46 = a2(v14 + 24, v45 + v41, v43, a3);
  *(_QWORD *)(v14 + 72) = v46 - v45;
  if (v46 == v45)
    goto LABEL_23;
  *(_QWORD *)(v14 + 80) = v43;
  *(_QWORD *)(v14 + 88) = v45;
  v47 = *(_QWORD *)(v14 + 24);
  if (!v47 || (v48 = *(_QWORD *)(v47 + 16), (unint64_t)(*(_QWORD *)(v47 + 8) - v48) <= 0x17))
  {
    pas_page_malloc_try_allocate_without_deallocating_padding(48, 1, 0, (uint64_t)v67);
    v48 = 0;
    v49 = *(_QWORD *)&v67[0];
    v50 = *((_QWORD *)&v67[0] + 1) + v68 - 24;
    **(_QWORD **)&v67[0] = v47;
    *(_QWORD *)(v49 + 8) = v50;
    *(_QWORD *)(v49 + 16) = 0;
    *v17 = v49;
    v47 = v49;
  }
  v51 = v48 + 24;
  v52 = (_QWORD *)(v51 + v47);
  *(_QWORD *)(v47 + 16) = v51;
  *(_QWORD *)(v14 + 112) = v51 + v47;
  *v52 = 0;
  v52[1] = 0;
  v52[2] = 0;
  *(_QWORD *)(v14 + 120) = a2;
  *(_QWORD *)(v14 + 128) = a3;
  *(_QWORD *)(v14 + 136) = a4;
  *(_QWORD *)(v14 + 144) = a5;
  *(_DWORD *)(v14 + 152) = a6;
  *(_DWORD *)(v14 + 156) = a7;
  *(_DWORD *)(v14 + 160) = a8;
  v53 = (_OWORD *)a2(v14 + 24, *(_QWORD *)(*(_QWORD *)(v14 + 56) + 168), 32, a3);
  if (!v53)
    goto LABEL_23;
  v67[0] = *v53;
  v67[1] = v53[1];
  v54 = off_1EE3429C0[0];
  if (!a2(v14 + 24, *((_QWORD *)v67 + *((unsigned int *)off_1EE3429C0[0] + 2)), 1144, a3))
    goto LABEL_23;
  v55 = (uint64_t (*)(uint64_t))v54[132];
  if (v55)
  {
    *(_QWORD *)(*(_QWORD *)(v14 + 96) + 8) = v55(v14 + 24);
    if (!*(_QWORD *)(*(_QWORD *)(v14 + 96) + 8))
      goto LABEL_23;
  }
  if ((v56 = off_1EE3429C8[0], !a2(v14 + 24, *((_QWORD *)v67 + *((unsigned int *)off_1EE3429C8[0] + 2)), 1144, a3))
    || (v57 = (unint64_t *(*)(uint64_t))v56[132]) != 0
    && (*(_QWORD *)(*(_QWORD *)(v14 + 96) + 16) = v57(v14 + 24)) == 0
    || (v58 = off_1EE3429D0, !a2(v14 + 24, *((_QWORD *)v67 + *((unsigned int *)off_1EE3429D0 + 2)), 1144, a3))
    || (v59 = (unint64_t *(*)(uint64_t))v58[132]) != 0
    && (*(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) = v59(v14 + 24)) == 0)
  {
LABEL_23:
    v60 = (_QWORD *)*v17;
    if (*v17)
    {
      do
      {
        v62 = (_QWORD *)*v60;
        v61 = v60[1];
        v63 = v61 + 24;
        if (v61 != -24)
        {
          munmap(v60, v61 + 24);
          pas_page_malloc_num_allocated_bytes -= v63;
        }
        v60 = v62;
      }
      while (v62);
    }
    return 0;
  }
  return v17;
}

uint64_t allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[7];

  v5 = (a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *a4;
  if (!*a4 || (v7 = *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 8) - v7 < v5))
  {
    pas_page_malloc_try_allocate_without_deallocating_padding(v5 + 24, 1, 0, (uint64_t)v11);
    v7 = 0;
    v8 = v11[0];
    v9 = v11[1] + v11[5] - 24;
    *(_QWORD *)v11[0] = v6;
    *(_QWORD *)(v8 + 8) = v9;
    *(_QWORD *)(v8 + 16) = 0;
    *a4 = v8;
    v6 = v8;
  }
  result = v6 + v7 + 24;
  *(_QWORD *)(v6 + 16) = v7 + v5;
  return result;
}

uint64_t pas_enumerator_add_unaccounted_pages(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t i;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t k;

  if (a3)
  {
    v5 = result;
    for (i = 0; i < a3; i += *(_QWORD *)(*(_QWORD *)(v5 + 32) + 200))
    {
      v7 = *(uint64_t **)(v5 + 88);
      v8 = *((_DWORD *)v7 + 4);
      v9 = *((_DWORD *)v7 + 2);
      if (v9 <= 2 * (*((_DWORD *)v7 + 5) + v8))
      {
        if (6 * v8 >= 2 * v9)
          v10 = 2 * v9;
        else
          v10 = *((_DWORD *)v7 + 2);
        if (v9)
          v11 = v10;
        else
          v11 = 16;
        v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(v5 + 8))(8 * v11, "pas_ptr_hash_set/table", 0, *(_QWORD *)(v5 + 24));
        v13 = v12;
        if (v11)
          memset(v12, 255, 8 * v11);
        v14 = v11 - 1;
        v15 = *v7;
        v16 = *((unsigned int *)v7 + 2);
        if ((_DWORD)v16)
        {
          for (j = 0; j != v16; ++j)
          {
            v18 = *(_QWORD *)(v15 + 8 * j);
            if (v18 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v19 = (v18 ^ (v18 >> 4) ^ 0xDEADBEEF) + 32 * (v18 ^ (v18 >> 4));
              v20 = ((v18 >> 36) ^ HIDWORD(v18) ^ 0xDEADBEEF) + 32 * ((v18 >> 36) ^ HIDWORD(v18));
              v21 = v19 ^ ((v20 ^ v19) >> 11) ^ v20;
              do
                v22 = v21++ & v14;
              while (v13[v22] < 0xFFFFFFFFFFFFFFFELL);
              v13[v22] = v18;
            }
          }
        }
        *v7 = (uint64_t)v13;
        *((_DWORD *)v7 + 2) = v11;
        *((_DWORD *)v7 + 3) = v14;
        *((_DWORD *)v7 + 5) = 0;
        result = (*(uint64_t (**)(void))(v5 + 16))();
      }
      v23 = 0;
      v24 = i + a2;
      v25 = ((i + a2) ^ ((i + a2) >> 4) ^ 0xDEADBEEF) + 32 * ((i + a2) ^ ((i + a2) >> 4));
      v26 = ((i + a2) >> 36) ^ ((i + a2) >> 32);
      v27 = v25 ^ ((((v26 ^ 0xDEADBEEF) + 32 * v26) ^ v25) >> 11) ^ ((v26 ^ 0xDEADBEEF) + 32 * v26);
      v28 = *((_DWORD *)v7 + 3);
      v29 = *v7;
      v30 = (_QWORD *)(*v7 + 8 * (v27 & v28));
      for (k = *v30; *v30 == -2; k = *v30)
      {
LABEL_23:
        if (!v23)
          v23 = v30;
        v30 = (_QWORD *)(v29 + 8 * (++v27 & v28));
      }
      while (k != -1)
      {
        if (k == v24)
          goto LABEL_4;
        v30 = (_QWORD *)(v29 + 8 * (++v27 & v28));
        k = *v30;
        if (*v30 == -2)
          goto LABEL_23;
      }
      if (v23)
      {
        --*((_DWORD *)v7 + 5);
        v30 = v23;
      }
      ++*((_DWORD *)v7 + 4);
LABEL_4:
      *v30 = v24;
    }
  }
  return result;
}

uint64_t pas_enumerator_exclude_accounted_page(uint64_t a1, unint64_t a2)
{
  int32x2_t *v2;
  int32x2_t v3;
  unsigned int v5;
  int v6;
  unsigned int i;
  uint64_t v8;
  unint64_t v9;
  int32x2_t v11;
  unint64_t v12;
  unint64_t v14;
  int v15;
  size_t v16;
  void *v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t j;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;

  v2 = *(int32x2_t **)(a1 + 88);
  v3 = *v2;
  if (!*(_QWORD *)v2)
    return 0;
  v5 = (a2 ^ (a2 >> 4) ^ 0xDEADBEEF) + 32 * (a2 ^ (a2 >> 4));
  v6 = ((a2 >> 36) ^ HIDWORD(a2) ^ 0xDEADBEEF) + 32 * ((a2 >> 36) ^ HIDWORD(a2));
  for (i = v5 ^ ((v6 ^ v5) >> 11) ^ v6; ; ++i)
  {
    v8 = i & v2[1].i32[1];
    v9 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v8);
    if (v9 < 0xFFFFFFFFFFFFFFFELL)
      break;
    if (v9 != -2)
      return 0;
LABEL_4:
    ;
  }
  if (v9 != a2)
    goto LABEL_4;
  *(_QWORD *)(*(_QWORD *)&v3 + 8 * v8) = -2;
  v11 = vadd_s32(v2[2], (int32x2_t)0x1FFFFFFFFLL);
  v2[2] = v11;
  v12 = v2[1].u32[0];
  if (6 * v11.i32[0] < v12 && v12 >= 0x11)
  {
    v14 = v12 >> 1;
    v15 = ((unsigned __int32)v2[1].i32[0] >> 1) - 1;
    v16 = 8 * (v12 >> 1);
    v17 = (void *)(*(uint64_t (**)(size_t, const char *, _QWORD, _QWORD))(a1 + 8))(v16, "pas_ptr_hash_set/table", 0, *(_QWORD *)(a1 + 24));
    memset(v17, 255, v16);
    v18 = *v2;
    v19 = v2[1].u32[0];
    if ((_DWORD)v19)
    {
      for (j = 0; j != v19; ++j)
      {
        v21 = *(_QWORD *)(*(_QWORD *)&v18 + 8 * j);
        if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v22 = (v21 ^ (v21 >> 4) ^ 0xDEADBEEF) + 32 * (v21 ^ (v21 >> 4));
          v23 = ((v21 >> 36) ^ HIDWORD(v21) ^ 0xDEADBEEF) + 32 * ((v21 >> 36) ^ HIDWORD(v21));
          v24 = v22 ^ ((v23 ^ v22) >> 11) ^ v23;
          do
            v25 = v24++ & v15;
          while (*((_QWORD *)v17 + v25) < 0xFFFFFFFFFFFFFFFELL);
          *((_QWORD *)v17 + v25) = v21;
        }
      }
    }
    *v2 = (int32x2_t)v17;
    v2[1].i32[0] = v14;
    v2[1].i32[1] = v15;
    v2[2].i32[1] = 0;
    (*(void (**)(void))(a1 + 16))();
  }
  return 1;
}

uint64_t pas_enumerator_record_page_payload_and_meta(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6, unint64_t a7)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;

  v13 = result;
  if (a6 && *(_DWORD *)(result + 128))
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))(result + 112))(result, a2, a6, 0, *(_QWORD *)(result + 120));
  if (a3 != a7 && *(_DWORD *)(v13 + 128))
    result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, _QWORD, _QWORD))(v13 + 112))(v13, a7 + a2, a3 - a7, 0, *(_QWORD *)(v13 + 120));
  if (*(_DWORD *)(v13 + 132))
  {
    if (a3 == a4)
    {
      v14 = a7 - a6;
      if (a7 == a6)
        return result;
      v15 = a6 + a2;
      return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD))(v13 + 112))(v13, v15, v14, 1, *(_QWORD *)(v13 + 120));
    }
    if (a4 <= a3)
    {
      v16 = a3 / a4 <= 1 ? 1 : a3 / a4;
      v17 = a4;
      v18 = a6;
      v19 = a6;
      do
      {
        v20 = v19;
        v21 = v18;
        if (v17 <= a6)
          v22 = a6;
        else
          v22 = v17;
        if (v22 >= a7)
          v19 = a7;
        else
          v19 = v22;
        v23 = *a5++;
        if (v23 == 255)
        {
          v18 = v19;
          if (v20 != v21)
          {
            v18 = v19;
            if (*(_DWORD *)(v13 + 132))
            {
              result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, _QWORD))(v13 + 112))(v13, v21 + a2, v20 - v21, 1, *(_QWORD *)(v13 + 120));
              v18 = v19;
            }
          }
        }
        else
        {
          v18 = v21;
        }
        v17 += a4;
        --v16;
      }
      while (v16);
      v14 = v19 - v18;
      if (v19 != v18)
      {
        if (*(_DWORD *)(v13 + 132))
        {
          v15 = v18 + a2;
          return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD))(v13 + 112))(v13, v15, v14, 1, *(_QWORD *)(v13 + 120));
        }
      }
    }
  }
  return result;
}

BOOL pas_enumerator_for_each_heap(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 88);
  if (v6 > (unint64_t)v7 || (unint64_t)v7 >= *(_QWORD *)(a1 + 56) + v6)
  {
    v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    if (!v7)
      return 0;
  }
  else
  {
    if ((unint64_t)v7 >= 8)
      v7 = (uint64_t *)((char *)v7 + *(_QWORD *)(a1 + 48) - v6);
    if (!v7)
      return 0;
  }
  v8 = *v7;
  if ((unint64_t)*v7 >= 8)
    v8 = *(_QWORD *)(a1 + 48) + v8 - *(_QWORD *)(a1 + 40);
  if (v8)
  {
    while (a2(a1, v8, a3))
    {
      v9 = *(unsigned __int16 *)(v8 + 80) | (*(unsigned __int8 *)(v8 + 82) << 16);
      if (v9)
      {
        v8 = *(_QWORD *)(a1 + 48) + 8 * v9;
        if (v8)
          continue;
      }
      goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(v11 + 96);
  v13 = *(_QWORD *)(v11 + 104);
  if (v10 <= v12 && v12 < *(_QWORD *)(a1 + 56) + v10)
  {
    if (v12 >= 8)
      v12 = v12 - v10 + *(_QWORD *)(a1 + 48);
    if (v12)
      goto LABEL_17;
    return 0;
  }
  if (8 * v13)
  {
    v12 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    if (v12)
    {
LABEL_17:
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104);
      goto LABEL_24;
    }
    return 0;
  }
  v12 = a1 + 80;
LABEL_24:
  v15 = v12 - 8;
  do
  {
    v16 = v13 == 0;
    if (!v13)
      break;
    v17 = *(_QWORD *)(v15 + 8 * v13);
    v18 = *(_QWORD *)(a1 + 40);
    if (v18 > v17 || v17 >= *(_QWORD *)(a1 + 56) + v18)
    {
      v17 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    }
    else if (v17 >= 8)
    {
      v17 = v17 - v18 + *(_QWORD *)(a1 + 48);
    }
    if (!v17)
      break;
    --v13;
  }
  while ((((uint64_t (*)(uint64_t, unint64_t, uint64_t))a2)(a1, v17, a3) & 1) != 0);
  return v16;
}

uint64_t pas_expendable_memory_try_allocate(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64x2_t v28;
  int64x2_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (!a3)
    return 0;
  v12 = *a1;
  v13 = a1[1];
  v14 = 0;
  if (v12 < v13 && v13 - v12 >= 8)
  {
    v16 = (a4 + v12 + 7) & -a4;
    v17 = v13 > v16;
    v18 = v13 - v16;
    if (v17 && v18 >= a3)
    {
      v20 = (v16 - 8) >> 14;
      v21 = (v16 + a3 - 1) >> 14;
      v22 = a1 + 2;
      v23 = *(_QWORD *)&a1[2 * v20 + 2] >> 3;
      if (v23 <= *(_QWORD *)&a1[2 * v21 + 2] >> 3)
        v23 = *(_QWORD *)&a1[2 * v21 + 2] >> 3;
      v24 = (8 * v23) | 2;
      *(_QWORD *)&v22[2 * v20] = v24;
      *(_QWORD *)&v22[2 * v21] = v24;
      v25 = v20 + 1;
      if (v20 + 1 < v21)
      {
        v26 = (8 * v23) | 1;
        v27 = v21 + ~v20;
        if (v27 < 4)
          goto LABEL_19;
        v25 += v27 & 0xFFFFFFFFFFFFFFFCLL;
        v28 = vdupq_n_s64(v26);
        v29 = (int64x2_t *)&a1[2 * v20 + 8];
        v30 = v27 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v29[-1] = v28;
          *v29 = v28;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v27 != (v27 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_19:
          v31 = v21 - v25;
          v32 = (unint64_t *)&a1[2 * v25 + 2];
          do
          {
            *v32++ = v26;
            --v31;
          }
          while (v31);
        }
      }
      *a1 = v16 + a3;
      v14 = a2 + v16;
      *(_QWORD *)(a2 + v16 - 8) = v23;
      if (a2 && pas_allocation_callback)
        pas_allocation_callback(v14, a3, a5, a6, 0);
      __dmb(0xAu);
    }
  }
  return v14;
}

uint64_t pas_expendable_memory_scavenge(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  size_t v25;
  unint64_t v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = ++pas_expendable_memory_version_counter;
  v7 = *a1;
  v8 = (unint64_t)(v7 + 0x3FFF) >> 14;
  if (a3)
  {
    if ((_DWORD)v7)
    {
      v9 = 8 * v6;
      if (a3 == 2)
      {
        v10 = 0;
        v11 = a1 + 2;
        do
        {
          if ((*(_QWORD *)&a1[2 * v10 + 2] & 6) != 0)
          {
            if (v10 < v8)
            {
              do
              {
                v12 = *(_QWORD *)&v11[2 * v10] & 7;
                if ((_DWORD)v12 != 1)
                {
                  if (!(_DWORD)v12)
                    goto LABEL_6;
                  *(_QWORD *)&v11[2 * v10] = v9;
                }
                ++v10;
              }
              while (v8 != v10);
              v10 = v8;
            }
LABEL_6:
            __dmb(0xAu);
            --v10;
          }
          ++v10;
        }
        while (v10 < v8);
      }
      else
      {
        v26 = 0;
        v27 = a1 + 2;
        do
        {
          if ((*(_QWORD *)&a1[2 * v26 + 2] & 6) != 0)
          {
            v28 = v26;
            if (v26 < v8)
            {
              v28 = v26;
              do
              {
                v29 = *(_QWORD *)&v27[2 * v28] & 7;
                if ((_DWORD)v29 != 1)
                {
                  if (!(_DWORD)v29)
                    goto LABEL_46;
                  *(_QWORD *)&v27[2 * v28] = v9;
                }
                ++v28;
              }
              while (v8 != v28);
              v28 = v8;
            }
LABEL_46:
            __dmb(0xAu);
            v30 = (void *)(a2 + (v26 << 14));
            v31 = (v28 - v26) << 14;
            while (madvise(v30, v31, 7) == -1 && *__error() == 35)
              ;
            v26 = v28 - 1;
          }
          ++v26;
        }
        while (v26 < v8);
      }
    }
    goto LABEL_50;
  }
  if (!(_DWORD)v7)
  {
LABEL_50:
    v13 = 0;
    return v13 & 1;
  }
  v13 = 0;
  v14 = 0;
  v15 = 8 * v6;
  v16 = a1 + 2;
  do
  {
    v17 = &a1[2 * v14];
    v20 = *((_QWORD *)v17 + 1);
    v18 = (unint64_t *)(v17 + 2);
    v19 = v20;
    v21 = v20 & 7;
    if (v21 >= 2)
    {
      if (v21 < 5)
      {
        *v18 = v19 & 0xFFFFFFFFFFFFFFF8 | (v21 + 1);
        v13 = 1;
      }
      else
      {
        v22 = v14;
        if (v14 < v8)
        {
          do
          {
            v23 = *(_QWORD *)&v16[2 * v22] & 7;
            if ((_DWORD)v23 != 1)
            {
              if ((_DWORD)v23 != 5)
                goto LABEL_30;
              *(_QWORD *)&v16[2 * v22] = v15;
            }
            ++v22;
          }
          while (v8 != v22);
          v22 = v8;
        }
LABEL_30:
        __dmb(0xAu);
        v24 = (void *)(a2 + (v14 << 14));
        v25 = (v22 - v14) << 14;
        while (madvise(v24, v25, 7) == -1 && *__error() == 35)
          ;
        v14 = v22 - 1;
      }
    }
    ++v14;
  }
  while (v14 < v8);
  return v13 & 1;
}

unint64_t pas_fast_large_free_heap_try_allocate(unsigned __int16 *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  unsigned __int16 *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  double v97;
  unint64_t v98;
  uint64_t v99;
  BOOL v100;
  unint64_t v101;
  unsigned __int16 *v102;
  BOOL v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  BOOL v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  BOOL v146;
  unint64_t v147;
  unint64_t v148;
  BOOL v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  BOOL v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  void (*v178)(unint64_t, uint64_t, _QWORD);
  unint64_t v179;
  unint64_t v181;
  unint64_t v182;
  void (*v184)(uint64_t, unint64_t, _QWORD);
  uint64_t v185;
  BOOL v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  BOOL v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  BOOL v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  BOOL v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  double v230;
  double v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unsigned __int16 *v249;
  unsigned __int16 *v250;
  unsigned __int16 *v251;
  unsigned __int16 *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  __int128 v259;
  unint64_t v260;
  __int128 v261;
  unint64_t v262;
  __int128 v263;
  unint64_t v264;
  int v265;
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v10 = *(unsigned __int16 *)((char *)a1 + 3) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 16);
  v11 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v10);
  if (v10)
    v12 = v11 == 0;
  else
    v12 = 1;
  v255 = a4;
  if (v12)
  {
LABEL_12:
    (*(void (**)(__int128 *__return_ptr, unint64_t, unint64_t, unint64_t, _QWORD))(a5 + 16))(&v261, a2, a3, a4, *(_QWORD *)(a5 + 24));
    v20 = v261;
    if (!(_QWORD)v261)
      return 0;
    v21 = *((_QWORD *)&v261 + 1);
    v22 = v262;
    v23 = *((_QWORD *)&v263 + 1);
    v24 = v263;
    v25 = v264;
    v26 = v265;
    v27 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16);
    if (!v27)
      goto LABEL_211;
    v28 = pas_compact_heap_reservation_base + 8 * v27;
    if (!v28)
      goto LABEL_211;
    v29 = 0;
    while (1)
    {
      if (v262 > (*(_QWORD *)(v28 + 16) & 0xFFFFFFFFFFFFuLL))
      {
        v30 = *(unsigned __int16 *)(v28 + 6) | ((unint64_t)*(unsigned __int8 *)(v28 + 8) << 16);
        v29 = v28;
        if (!v30)
          goto LABEL_21;
      }
      else
      {
        v30 = *(unsigned __int16 *)(v28 + 3) | ((unint64_t)*(unsigned __int8 *)(v28 + 5) << 16);
        if (!v30)
        {
LABEL_20:
          v28 = v29;
          if (!v29)
            goto LABEL_211;
LABEL_21:
          v31 = *(_QWORD *)(v28 + 24);
          if ((v31 & 0xFFFFFFFFFFFFLL) != v262)
            goto LABEL_211;
          v32 = *(_QWORD *)(v28 + 16);
          v33 = *(_QWORD *)(v28 + 32);
          v34 = v262 & 0xFFFFFFFFFFFFLL;
          v35 = (v264 + *((_QWORD *)&v263 + 1)) & 0xFFFFFFFFFFFFLL;
          v36 = *(_QWORD *)a5;
          v37 = ((v262 - (v32 & 0xFFFFFFFFFFFFLL) + (v33 & 0xFFFFFFFFFFFFLL)) % *(_QWORD *)a5) & 0xFFFFFFFFFFFFLL | ((unint64_t)v265 << 48);
          do
          {
            v38 = v34;
            v39 = v35;
            v40 = v37;
            v34 = v32;
            v35 = v31;
            v37 = v33;
            v41 = v39 ^ v32;
            v33 = v40;
            v31 = v39;
            v32 = v38;
          }
          while ((v41 & 0xFFFFFFFFFFFFLL) == 0);
          if (((v38 ^ v35) & 0xFFFFFFFFFFFFLL) != 0)
            goto LABEL_211;
          v42 = v34 & 0xFFFFFFFFFFFFLL;
          v43 = v37 & 0xFFFFFFFFFFFFLL;
          if (((v35 & 0xFFFFFFFFFFFFLL) + (v37 & 0xFFFFFFFFFFFFLL) - (v34 & 0xFFFFFFFFFFFFLL)) % v36 != (v40 & 0xFFFFFFFFFFFFLL))
            goto LABEL_211;
          v44 = v39 & 0xFFFFFFFFFFFFLL;
          v45 = v37 & 0xFF000000000000;
          v46 = 0x1000000000000;
          if ((v40 & 0xFF000000000000) != 0x1000000000000 || v45 != 0x1000000000000)
            v46 = 0;
          v48 = v44 - v42;
          if (v44 == v42)
            goto LABEL_211;
          v217 = v46 | v43;
          if (!v43)
          {
            v49 = v34 & 0xFFFFFFFFFFFFLL;
            if (((v42 - v255) & (a3 - 1)) != 0)
              goto LABEL_73;
            if (((*(_QWORD *)(a5 + 8) - 1) & a2) != 0)
            {
              v86 = 1;
              v88 = v34 & 0xFFFFFFFFFFFFLL;
              goto LABEL_189;
            }
            v162 = (v34 + a2) & 0xFFFFFFFFFFFFLL;
            v163 = (a2 % v36) & 0xFFFFFFFFFFFFLL;
            v50 = v34 & 0xFFFFFFFFFFFFLL;
            goto LABEL_207;
          }
          v49 = v42 + v36 - v43;
          if (v49 >= v44)
            goto LABEL_211;
LABEL_73:
          v222 = *((_QWORD *)&v263 + 1);
          v229 = v44 - v42;
          v83 = v255;
          v84 = a3;
          v248 = *((_QWORD *)&v261 + 1);
          v256 = v264;
          v234 = v34 & 0xFFFFFFFFFFFFLL;
          v241 = v44;
          v85 = v46;
          v86 = pas_coalign(v49, v36, v83, v84);
          v48 = v229;
          v42 = v234;
          v44 = v241;
          v21 = v248;
          v25 = v256;
          v23 = v222;
          if (!v86)
            goto LABEL_211;
          v88 = v87;
          if (v87 >= v241)
            goto LABEL_211;
          v46 = v85;
LABEL_189:
          if (!v86 || v44 - v88 < a2)
            goto LABEL_211;
          v50 = v88 & 0xFFFFFFFFFFFFLL;
          v159 = *(_QWORD *)a5;
          v160 = ((unint64_t)(v43 - v42 + v88) % *(_QWORD *)a5) & 0xFFFFFFFFFFFFLL;
          v161 = v88 + a2;
          v162 = v161 & 0xFFFFFFFFFFFFLL;
          v163 = ((v161 - v50 + v160) % *(_QWORD *)a5) & 0xFFFFFFFFFFFFLL;
          v164 = v50 - v42;
          if (v50 == v42)
            goto LABEL_192;
          v167 = *(_QWORD *)(a5 + 8);
          if (!v43)
          {
            v168 = v42;
            if (((v167 - 1) & v42) == 0)
              goto LABEL_198;
            goto LABEL_244;
          }
          v168 = v159 - v43 + v42;
          if (v168 >= v50)
          {
LABEL_192:
            v165 = 0;
          }
          else
          {
LABEL_244:
            v227 = v50 - v42;
            v232 = v48;
            v204 = ((v161 - v50 + v160) % *(_QWORD *)a5) & 0xFFFFFFFFFFFFLL;
            v209 = v161 & 0xFFFFFFFFFFFFLL;
            v215 = v46;
            v239 = v42;
            v246 = v44;
            v253 = v21;
            v257 = v25;
            v196 = v23;
            v197 = pas_coalign(v168, v159, 0, v167);
            v165 = 0;
            if (v197)
            {
              v23 = v196;
              v21 = v253;
              v25 = v257;
              v42 = v239;
              v44 = v246;
              v162 = v209;
              v46 = v215;
              v48 = v232;
              v163 = v204;
              if (v50 > v198)
              {
                v164 = v227;
                if (v198 == v239)
LABEL_198:
                  v165 = v164;
                else
                  v165 = (v50 - v198) / *(_QWORD *)(a5 + 8) * *(_QWORD *)(a5 + 8) / *(_QWORD *)a5 * *(_QWORD *)a5;
              }
            }
            else
            {
              v23 = v196;
              v21 = v253;
              v25 = v257;
              v42 = v239;
              v44 = v246;
              v162 = v209;
              v46 = v215;
              v48 = v232;
              v163 = v204;
            }
          }
          v169 = v165 + a2;
          v170 = v44 - v162;
          if (v44 == v162)
          {
            v171 = 0;
LABEL_204:
            if ((double)v48 / (double)(v169 + v171) > 1.3)
              goto LABEL_211;
LABEL_207:
            if (v50 < v20 && v162 != v50)
            {
              v173 = v163;
              v174 = v162;
              v175 = v46;
              v176 = v44;
              if (v50 == v42)
              {
                remove_node((unint64_t)a1, (unsigned __int16 *)v28);
              }
              else
              {
                *(_QWORD *)&v261 = v42;
                *((_QWORD *)&v261 + 1) = v50;
                v262 = v217;
                fast_write_cursor(a1, (unsigned __int16 *)v28, &v261);
              }
              v184 = *(void (**)(uint64_t, unint64_t, _QWORD))(a5 + 32);
              v185 = *((_QWORD *)a1 + 1);
              if (v184)
              {
                *((_QWORD *)a1 + 1) = v174 - v22 + v185;
                v184(v174, v176 - v174, *(_QWORD *)(a5 + 40));
              }
              else
              {
                *((_QWORD *)a1 + 1) = v176 - v22 + v185;
                if (v176 != v174)
                {
                  *(_QWORD *)&v261 = v174;
                  *((_QWORD *)&v261 + 1) = v176;
                  v262 = v173 | v175;
                  fast_merge(a1, &v261, a5);
                }
              }
              return v50;
            }
LABEL_211:
            v177 = v23;
            v178 = *(void (**)(unint64_t, uint64_t, _QWORD))(a5 + 32);
            if (v178)
            {
              *((_QWORD *)a1 + 1) += v21;
              v179 = v25;
              v178(v22, v24, *(_QWORD *)(a5 + 40));
              (*(void (**)(uint64_t, unint64_t, _QWORD))(a5 + 32))(v177, v179, *(_QWORD *)(a5 + 40));
            }
            else
            {
              *((_QWORD *)a1 + 1) += v24 + v21 + v25;
              if (*(_QWORD *)a5 == 1 && v24 != 0)
              {
                *(_QWORD *)&v261 = v22 & 0xFFFFFFFFFFFFLL;
                *((_QWORD *)&v261 + 1) = (v24 + v22) & 0xFFFFFFFFFFFFLL;
                v262 = (unint64_t)v26 << 48;
                v181 = v25;
                fast_merge(a1, &v261, a5);
                v25 = v181;
              }
              if (v20 + a2 != v25 + v177)
              {
                v182 = (a2 % *(_QWORD *)a5) & 0xFFFFFFFFFFFFLL | ((unint64_t)v26 << 48);
                *(_QWORD *)&v261 = (v20 + a2) & 0xFFFFFFFFFFFFLL;
                *((_QWORD *)&v261 + 1) = (v25 + v177) & 0xFFFFFFFFFFFFLL;
                v262 = v182;
                fast_merge(a1, &v261, a5);
              }
            }
            return v20;
          }
          v172 = *(_QWORD *)(a5 + 8);
          if (v163)
          {
            v203 = v165 + a2;
            v233 = v48;
            v240 = v42;
            v210 = v162;
            v216 = v46;
            v254 = v21;
            v258 = v25;
            v228 = v23;
            v199 = *(_QWORD *)a5;
            v205 = v163;
            v200 = *(_QWORD *)a5 - v163 + v162;
            v247 = v44;
            if (v200 < v44)
              goto LABEL_251;
            v171 = 0;
          }
          else
          {
            if (((v172 - 1) & v162) == 0)
            {
LABEL_203:
              v171 = v170;
              goto LABEL_204;
            }
            v203 = v165 + a2;
            v205 = 0;
            v210 = v162;
            v233 = v48;
            v240 = v42;
            v216 = v46;
            v247 = v44;
            v254 = v21;
            v258 = v25;
            v228 = v23;
            v199 = *(_QWORD *)a5;
            v200 = v162;
LABEL_251:
            v201 = pas_coalign(v200, v199, 0, v172);
            v171 = 0;
            if (v201)
            {
              v44 = v247;
              v21 = v254;
              v23 = v228;
              v48 = v233;
              v25 = v258;
              v162 = v210;
              v46 = v216;
              v42 = v240;
              v163 = v205;
              v169 = v203;
              if (v247 <= v202)
                goto LABEL_204;
              if (v202 != v210)
              {
                v171 = (v247 - v202) / *(_QWORD *)(a5 + 8) * *(_QWORD *)(a5 + 8) / *(_QWORD *)a5 * *(_QWORD *)a5;
                goto LABEL_204;
              }
              goto LABEL_203;
            }
          }
          v23 = v228;
          v48 = v233;
          v21 = v254;
          v25 = v258;
          v42 = v240;
          v44 = v247;
          v162 = v210;
          v46 = v216;
          v163 = v205;
          v169 = v203;
          goto LABEL_204;
        }
      }
      v28 = pas_compact_heap_reservation_base + 8 * v30;
      if (!v28)
        goto LABEL_20;
    }
  }
  while (1)
  {
    v13 = *((_QWORD *)v11 + 2);
    v14 = *((_QWORD *)v11 + 3);
    v15 = v14 & 0xFFFFFFFFFFFFLL;
    v16 = v13 & 0xFFFFFFFFFFFFLL;
    v17 = (v14 & 0xFFFFFFFFFFFFLL) - (v13 & 0xFFFFFFFFFFFFLL);
    if (v17 >= a2)
      break;
    v18 = *v11 | ((unint64_t)*((unsigned __int8 *)v11 + 2) << 16);
    v11 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v18);
    if (v18)
      v19 = v11 == 0;
    else
      v19 = 1;
    if (v19)
      goto LABEL_12;
  }
  v51 = *((_QWORD *)v11 + 4);
  v52 = v51 & 0xFFFFFFFFFFFFLL;
  if ((v51 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (v15 == v16)
      goto LABEL_85;
    v53 = *(_QWORD *)a5;
    v54 = *(_QWORD *)a5 - v52 + v16;
    if (v54 >= v15)
      goto LABEL_85;
LABEL_44:
    if (v255 > v54)
      v55 = v54;
    else
      v55 = v255;
    if (v255 > v54)
      v56 = v53;
    else
      v56 = a3;
    if (v255 > v54)
      v57 = a3;
    else
      v57 = v53;
    if (v255 > v54)
      v58 = v255;
    else
      v58 = v54;
    v59 = v58 - v55;
    v60 = v59 % v57;
    if (v57 == 1)
    {
      v61 = 0;
      v62 = 1;
    }
    else
    {
      v61 = v56;
      v62 = v57;
      if (v56)
      {
        v61 = v56;
        v62 = v56;
        if (v56 != 1)
        {
          v65 = 0;
          v66 = 1;
          v67 = v56;
          v68 = v57;
          do
          {
            v62 = v67;
            v61 = v66;
            v69 = v68 / v67;
            v67 = v68 % v67;
            v66 = v65 - v69 * v61;
            v68 = v62;
            v65 = v61;
          }
          while (v67);
        }
      }
    }
    if (v60 % v62)
      goto LABEL_85;
    v70 = v57 * v56 / v62;
    v71 = (((v70 / v56) & (((uint64_t)(v60 / v62 * v61) % (uint64_t)(v70 / v56)) >> 63))
         + (uint64_t)(v60 / v62 * v61) % (uint64_t)(v70 / v56))
        * v56;
    v72 = v71 + (v70 + v59 + ~v71) / v70 * v70;
    v134 = __CFADD__(v72, v55);
    v64 = v72 + v55;
    if (v134)
      goto LABEL_85;
    v63 = v15 - v64;
    if (v15 <= v64)
      goto LABEL_85;
    goto LABEL_68;
  }
  if (((v16 - v255) & (a3 - 1)) != 0)
  {
    if (v15 == v16)
    {
LABEL_85:
      v96 = a3 - 1;
      v97 = 1.3;
      while (1)
      {
        while (1)
        {
          v98 = v11[3] | ((unint64_t)*((unsigned __int8 *)v11 + 8) << 16);
          v99 = pas_compact_heap_reservation_base + 8 * v98;
          v100 = !v98 || v99 == 0;
          if (!v100 && (*(_QWORD *)(v99 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v99 + 16) & 0xFFFFFFFFFFFFuLL) >= a2)
            break;
          v101 = *v11 | ((unint64_t)*((unsigned __int8 *)v11 + 2) << 16);
          v102 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v101);
          if (v101)
            v103 = v102 == 0;
          else
            v103 = 1;
          a4 = v255;
          if (v103)
            goto LABEL_12;
          while (1)
          {
            v13 = *((_QWORD *)v102 + 2);
            v104 = *((_QWORD *)v102 + 3);
            v15 = v104 & 0xFFFFFFFFFFFFLL;
            v16 = v13 & 0xFFFFFFFFFFFFLL;
            v105 = (v104 & 0xFFFFFFFFFFFFLL) - (v13 & 0xFFFFFFFFFFFFLL);
            v106 = v105 != a2;
            if (v105 < a2)
              v106 = -1;
            if (v106 < 0)
              goto LABEL_12;
            v107 = v102[3] | ((unint64_t)*((unsigned __int8 *)v102 + 8) << 16);
            if (!v107 || v11 != (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v107))
              break;
            v11 = v102;
            v109 = *v102 | ((unint64_t)*((unsigned __int8 *)v102 + 2) << 16);
            v102 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v109);
            if (v109)
              v110 = v102 == 0;
            else
              v110 = 1;
            if (v110)
              goto LABEL_12;
          }
          v11 = v102;
          if (v105 >= a2)
            goto LABEL_119;
        }
        do
        {
          v11 = (unsigned __int16 *)v99;
          v111 = *(unsigned __int16 *)(v99 + 3) | ((unint64_t)*(unsigned __int8 *)(v99 + 5) << 16);
          v99 = pas_compact_heap_reservation_base + 8 * v111;
          if (v111)
            v112 = v99 == 0;
          else
            v112 = 1;
          if (v112)
            break;
          v113 = (*(_QWORD *)(v99 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v99 + 16) & 0xFFFFFFFFFFFFLL);
          v134 = v113 >= a2;
          v114 = v113 != a2;
          if (!v134)
            v114 = -1;
        }
        while ((v114 & 0x80000000) == 0);
        v13 = *((_QWORD *)v11 + 2);
        v104 = *((_QWORD *)v11 + 3);
        v16 = v13 & 0xFFFFFFFFFFFFLL;
        v15 = v104 & 0xFFFFFFFFFFFFLL;
        v105 = (v104 & 0xFFFFFFFFFFFFLL) - (v13 & 0xFFFFFFFFFFFFLL);
        if (v105 >= a2)
        {
LABEL_119:
          v51 = *((_QWORD *)v11 + 4);
          v115 = v51 & 0xFFFFFFFFFFFFLL;
          if ((v51 & 0xFFFFFFFFFFFFLL) != 0)
          {
            if (v16 != v15)
            {
              v116 = *(_QWORD *)a5;
              v117 = *(_QWORD *)a5 - v115 + v16;
              if (v117 < v15)
              {
LABEL_126:
                if (v255 > v117)
                  v118 = v117;
                else
                  v118 = v255;
                if (v255 > v117)
                  v119 = v116;
                else
                  v119 = a3;
                if (v255 > v117)
                {
                  v116 = a3;
                  v117 = v255;
                }
                if (v116 == 1)
                {
                  v120 = 0;
                  v121 = 1;
                }
                else
                {
                  v120 = v119;
                  v121 = v116;
                  if (v119)
                  {
                    v120 = v119;
                    v121 = v119;
                    if (v119 != 1)
                    {
                      v124 = 0;
                      v125 = 1;
                      v126 = v119;
                      v127 = v116;
                      do
                      {
                        v121 = v126;
                        v120 = v125;
                        v128 = v127 / v126;
                        v126 = v127 % v126;
                        v125 = v124 - v128 * v120;
                        v127 = v121;
                        v124 = v120;
                      }
                      while (v126);
                    }
                  }
                }
                v129 = v117 - v118;
                v130 = v129 % v116 / v121;
                if (!(v129 % v116 % v121))
                {
                  v131 = v116 * v119 / v121;
                  v132 = (((v131 / v119) & (((uint64_t)(v130 * v120) % (uint64_t)(v131 / v119)) >> 63))
                        + (uint64_t)(v130 * v120) % (uint64_t)(v131 / v119))
                       * v119;
                  v133 = v132 + (v131 + v129 + ~v132) / v131 * v131;
                  v134 = __CFADD__(v133, v118);
                  v135 = v133 + v118;
                  v123 = v134 ? 0 : v135;
                  if (!v134)
                  {
                    v122 = v15 - v123;
                    if (v15 > v123)
                    {
LABEL_149:
                      if (v122 >= a2)
                      {
                        v136 = v123 - v16;
                        v73 = (v123 - v16 + v13) & 0xFFFFFFFFFFFFLL;
                        v137 = *(_QWORD *)a5;
                        v138 = v73 - v16;
                        if (v73 == v16)
                          goto LABEL_153;
                        v139 = *(_QWORD *)(a5 + 8);
                        if (v115)
                        {
                          v140 = v137 - v115 + v16;
                          if (v140 >= v73)
                          {
                            v138 = 0;
                            goto LABEL_153;
                          }
                        }
                        else
                        {
                          v140 = v16;
                          if (((v139 - 1) & v16) == 0)
                            goto LABEL_153;
                        }
                        v206 = v73 - v16;
                        v211 = v123 - v16;
                        v235 = v123;
                        v242 = (v123 - v16 + v13) & 0xFFFFFFFFFFFFLL;
                        v218 = *(_QWORD *)a5;
                        v223 = v96;
                        v230 = v97;
                        v249 = v11;
                        v146 = pas_coalign(v140, v137, 0, v139);
                        v138 = 0;
                        if (v146)
                        {
                          v148 = v147;
                          v123 = v235;
                          v73 = v242;
                          v150 = v242 - v147;
                          v149 = v242 > v147;
                          v11 = v249;
                          v97 = v230;
                          v137 = v218;
                          v96 = v223;
                          v136 = v211;
                          if (v149)
                          {
                            v138 = v206;
                            if (v148 != v16)
                              v138 = v150 / *(_QWORD *)(a5 + 8) * *(_QWORD *)(a5 + 8) / *(_QWORD *)a5 * *(_QWORD *)a5;
                          }
                        }
                        else
                        {
                          v73 = v242;
                          v11 = v249;
                          v97 = v230;
                          v137 = v218;
                          v96 = v223;
                          v123 = v235;
                          v136 = v211;
                        }
LABEL_153:
                        v141 = (v136 + v115) % v137;
                        v77 = (v123 + a2) & 0xFFFFFFFFFFFFLL;
                        v142 = (v123 + a2 - v73 + (v141 & 0xFFFFFFFFFFFFLL)) % v137;
                        v143 = v15 - v77;
                        if (v15 != v77)
                        {
                          v144 = *(_QWORD *)(a5 + 8);
                          if ((v142 & 0xFFFFFFFFFFFFLL) != 0)
                          {
                            v207 = v15 - v77;
                            v212 = v142;
                            v219 = v138;
                            v224 = v96;
                            v243 = v73;
                            v250 = v11;
                            v231 = v97;
                            v151 = *(_QWORD *)a5;
                            v236 = v77;
                            v152 = *(_QWORD *)a5 - (v142 & 0xFFFFFFFFFFFFLL) + v77;
                            if (v152 < v15)
                            {
LABEL_170:
                              v153 = pas_coalign(v152, v151, 0, v144);
                              v143 = 0;
                              if (v153)
                              {
                                v155 = v154;
                                v156 = v15 - v154;
                                v149 = v15 > v154;
                                v73 = v243;
                                v11 = v250;
                                v97 = v231;
                                v138 = v219;
                                v96 = v224;
                                v77 = v236;
                                v142 = v212;
                                if (v149)
                                {
                                  v143 = v207;
                                  if (v155 != v236)
                                    v143 = v156
                                         / *(_QWORD *)(a5 + 8)
                                         * *(_QWORD *)(a5 + 8)
                                         / *(_QWORD *)a5
                                         * *(_QWORD *)a5;
                                }
                                goto LABEL_156;
                              }
                            }
                            else
                            {
                              v143 = 0;
                            }
                            v73 = v243;
                            v11 = v250;
                            v97 = v231;
                            v138 = v219;
                            v96 = v224;
                            v77 = v236;
                            v142 = v212;
                            goto LABEL_156;
                          }
                          if (((v144 - 1) & v77) != 0)
                          {
                            v207 = v15 - v77;
                            v212 = v142;
                            v219 = v138;
                            v224 = v96;
                            v243 = v73;
                            v250 = v11;
                            v231 = v97;
                            v151 = *(_QWORD *)a5;
                            v236 = v77;
                            v152 = v77;
                            goto LABEL_170;
                          }
                        }
LABEL_156:
                        if ((double)v105 / (double)(v138 + a2 + v143) <= v97)
                        {
                          v145 = v51 & 0xFF000000000000;
                          v51 &= 0xFFFFFFFFFFFFFFuLL;
                          v82 = v145 & 0xFFFF000000000000 | v142 & 0xFFFFFFFFFFFFLL;
                          v13 = v16;
                          v16 = v73;
LABEL_159:
                          if (v77 != v16)
                            goto LABEL_178;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else if (((v16 - v255) & v96) != 0)
          {
            if (v16 != v15)
            {
              v116 = *(_QWORD *)a5;
              v117 = v16;
              goto LABEL_126;
            }
          }
          else
          {
            if (((*(_QWORD *)(a5 + 8) - 1) & a2) == 0)
            {
              v77 = (v13 + a2) & 0xFFFFFFFFFFFFLL;
              v82 = v51 & 0xFF000000000000 | (a2 % *(_QWORD *)a5) & 0xFFFFFFFFFFFFLL;
              v73 = v104 & 0xFFFF000000000000 | v16;
              goto LABEL_159;
            }
            v122 = v105;
            v123 = v16;
            if (v16 != v15)
              goto LABEL_149;
          }
        }
      }
    }
    v53 = *(_QWORD *)a5;
    v54 = v13 & 0xFFFFFFFFFFFFLL;
    goto LABEL_44;
  }
  if (((*(_QWORD *)(a5 + 8) - 1) & a2) == 0)
  {
    v77 = (v13 + a2) & 0xFFFFFFFFFFFFLL;
    v82 = v51 & 0xFF000000000000 | (a2 % *(_QWORD *)a5) & 0xFFFFFFFFFFFFLL;
    v73 = v14 & 0xFFFF000000000000 | v16;
    goto LABEL_84;
  }
  v63 = (v14 & 0xFFFFFFFFFFFFLL) - (v13 & 0xFFFFFFFFFFFFLL);
  v64 = v13 & 0xFFFFFFFFFFFFLL;
  if (v15 == v16)
    goto LABEL_85;
LABEL_68:
  if (v63 < a2)
    goto LABEL_85;
  v73 = (v64 - v16 + v13) & 0xFFFFFFFFFFFFLL;
  v74 = *(_QWORD *)a5;
  v75 = (v64 - v16 + v52) % *(_QWORD *)a5;
  v76 = v64 + a2;
  v77 = v76 & 0xFFFFFFFFFFFFLL;
  v78 = v76 - v73 + (v75 & 0xFFFFFFFFFFFFLL);
  v79 = v78 / *(_QWORD *)a5;
  v80 = v73 - v16;
  if (v73 == v16)
  {
LABEL_70:
    v81 = 0;
    goto LABEL_79;
  }
  v89 = *(_QWORD *)(a5 + 8);
  if (v52)
  {
    v90 = v74 - v52 + v16;
    if (v90 >= v73)
      goto LABEL_70;
  }
  else
  {
    v90 = v13 & 0xFFFFFFFFFFFFLL;
    if (((v89 - 1) & v16) == 0)
    {
LABEL_78:
      v81 = v80;
      goto LABEL_79;
    }
  }
  v208 = v73 - v16;
  v213 = v78 / *(_QWORD *)a5;
  v220 = v76 - v73 + (v75 & 0xFFFFFFFFFFFFLL);
  v225 = *(_QWORD *)a5;
  v237 = v76 & 0xFFFFFFFFFFFFLL;
  v244 = v73;
  v251 = v11;
  v186 = pas_coalign(v90, v74, 0, v89);
  v81 = 0;
  if (v186)
  {
    v188 = v187;
    v77 = v237;
    v73 = v244;
    v189 = v244 - v187;
    v149 = v244 > v187;
    v11 = v251;
    v74 = v225;
    v79 = v213;
    v78 = v220;
    if (v149)
    {
      v80 = v208;
      if (v188 == v16)
        goto LABEL_78;
      v81 = v189 / *(_QWORD *)(a5 + 8) * *(_QWORD *)(a5 + 8) / *(_QWORD *)a5 * *(_QWORD *)a5;
    }
  }
  else
  {
    v73 = v244;
    v11 = v251;
    v77 = v237;
    v78 = v220;
    v74 = v225;
    v79 = v213;
  }
LABEL_79:
  v91 = v78 - v79 * v74;
  v92 = v81 + a2;
  v93 = v15 - v77;
  if (v15 == v77)
    goto LABEL_82;
  v94 = *(_QWORD *)(a5 + 8);
  if ((v91 & 0xFFFFFFFFFFFFLL) != 0)
  {
    v214 = v15 - v77;
    v221 = v92;
    v226 = v91;
    v245 = v73;
    v252 = v11;
    v190 = *(_QWORD *)a5;
    v238 = v77;
    v191 = *(_QWORD *)a5 - (v91 & 0xFFFFFFFFFFFFLL) + v77;
    if (v191 >= v15)
    {
      v93 = 0;
LABEL_241:
      v73 = v245;
      v11 = v252;
      v77 = v238;
      v92 = v221;
      v91 = v226;
      goto LABEL_82;
    }
  }
  else
  {
    if (((v94 - 1) & v77) == 0)
      goto LABEL_82;
    v214 = v15 - v77;
    v221 = v92;
    v226 = v91;
    v245 = v73;
    v252 = v11;
    v190 = *(_QWORD *)a5;
    v238 = v77;
    v191 = v77;
  }
  v192 = pas_coalign(v191, v190, 0, v94);
  v93 = 0;
  if (!v192)
    goto LABEL_241;
  v194 = v193;
  v195 = v15 - v193;
  v149 = v15 > v193;
  v73 = v245;
  v11 = v252;
  v77 = v238;
  v92 = v221;
  v91 = v226;
  if (v149)
  {
    v93 = v214;
    if (v194 != v238)
      v93 = v195 / *(_QWORD *)(a5 + 8) * *(_QWORD *)(a5 + 8) / *(_QWORD *)a5 * *(_QWORD *)a5;
  }
LABEL_82:
  if ((double)v17 / (double)(v92 + v93) > 1.3)
    goto LABEL_85;
  v95 = v51 & 0xFF000000000000;
  v51 &= 0xFFFFFFFFFFFFFFuLL;
  v82 = v95 & 0xFFFF000000000000 | v91 & 0xFFFFFFFFFFFFLL;
  v13 = v16;
  v16 = v73;
LABEL_84:
  if (v77 == v16)
    goto LABEL_85;
LABEL_178:
  if (v77 == v16)
    v50 = 0;
  else
    v50 = v16;
  v157 = (v73 ^ v13) & 0xFFFFFFFFFFFFLL;
  if (v157)
  {
    *(_QWORD *)&v261 = v13;
    *((_QWORD *)&v261 + 1) = v73;
    v262 = v51;
    if (v15 == v77)
    {
      v259 = v261;
      v260 = v262;
      fast_write_cursor(a1, v11, &v259);
      return v50;
    }
    v158 = 1;
  }
  else
  {
    if (v15 == v77)
    {
      remove_node((unint64_t)a1, v11);
      return v50;
    }
    v158 = 0;
  }
  v166 = (uint64_t *)&v261 + 3 * v158;
  *v166 = v77;
  v166[1] = v15;
  v166[2] = v82;
  v259 = v261;
  v260 = v262;
  fast_write_cursor(a1, v11, &v259);
  if (v157)
  {
    v259 = v263;
    v260 = v264;
    insert_node(a1, &v259);
  }
  return v50;
}

uint64_t pas_fast_large_free_heap_for_each_free(uint64_t result, uint64_t (*a2)(__int128 *, uint64_t), uint64_t a3)
{
  unint64_t v3;
  unsigned __int16 *v4;
  BOOL v5;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned __int16 *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  BOOL v19;
  __int128 v20;
  uint64_t v21;

  v3 = *(unsigned __int16 *)(result + 3) | ((unint64_t)*(unsigned __int8 *)(result + 5) << 16);
  v4 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v3);
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v20 = *((_OWORD *)v4 + 1);
    v21 = *((_QWORD *)v4 + 4);
    result = a2(&v20, a3);
    if ((_DWORD)result)
    {
      do
      {
        v8 = v4[3] | ((unint64_t)*((unsigned __int8 *)v4 + 8) << 16);
        v9 = pas_compact_heap_reservation_base + 8 * v8;
        if (v8)
          v10 = v9 == 0;
        else
          v10 = 1;
        if (v10)
        {
          v11 = *v4 | ((unint64_t)*((unsigned __int8 *)v4 + 2) << 16);
          v12 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v11);
          if (v11)
            v13 = v12 == 0;
          else
            v13 = 1;
          if (v13)
            return result;
          while (1)
          {
            v14 = v12[3] | ((unint64_t)*((unsigned __int8 *)v12 + 8) << 16);
            if (!v14 || v4 != (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v14))
              break;
            v4 = v12;
            v16 = *v12 | ((unint64_t)*((unsigned __int8 *)v12 + 2) << 16);
            v12 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v16);
            if (v16)
              v17 = v12 == 0;
            else
              v17 = 1;
            if (v17)
              return result;
          }
          v4 = v12;
        }
        else
        {
          do
          {
            v4 = (unsigned __int16 *)v9;
            v18 = *(unsigned __int16 *)(v9 + 3) | ((unint64_t)*(unsigned __int8 *)(v9 + 5) << 16);
            v9 = pas_compact_heap_reservation_base + 8 * v18;
            if (v18)
              v19 = v9 == 0;
            else
              v19 = 1;
          }
          while (!v19);
        }
        v20 = *((_OWORD *)v4 + 1);
        v21 = *((_QWORD *)v4 + 4);
        result = a2(&v20, a3);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

unsigned __int16 *fast_write_cursor(unsigned __int16 *result, unsigned __int16 *a2, _QWORD *a3)
{
  unint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unint64_t v25;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unint64_t v52;
  BOOL v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  unsigned __int16 *v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v99;
  unint64_t v100;
  BOOL v101;
  _BYTE *v102;
  unint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  _BYTE *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  unsigned __int16 *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  char v137;
  unsigned __int16 *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  unint64_t v143;
  BOOL v144;
  int v145;
  unint64_t v146;
  unint64_t v147;

  v3 = *a3 & 0xFFFFFFFFFFFFLL;
  v4 = a2 + 8;
  v5 = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL;
  if (v3 == v5)
  {
LABEL_2:
    v6 = 0;
    goto LABEL_54;
  }
  if (v3 >= v5)
  {
    v19 = a2[3] | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 16);
    v20 = pas_compact_heap_reservation_base + 8 * v19;
    if (v19)
      v21 = v20 == 0;
    else
      v21 = 1;
    if (v21)
    {
      v6 = 0;
      v22 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16);
      if (!v22)
        goto LABEL_54;
      v23 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v22);
      if (!v23)
        goto LABEL_54;
      v24 = a2;
      while (1)
      {
        v25 = v23[3] | ((unint64_t)*((unsigned __int8 *)v23 + 8) << 16);
        if (!v25 || v24 != (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v25))
          break;
        v24 = v23;
        v27 = *v23 | ((unint64_t)*((unsigned __int8 *)v23 + 2) << 16);
        v23 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v27);
        if (v27)
          v28 = v23 == 0;
        else
          v28 = 1;
        if (v28)
          goto LABEL_2;
      }
    }
    else
    {
      do
      {
        v23 = (unsigned __int16 *)v20;
        v29 = *(unsigned __int16 *)(v20 + 3) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 16);
        v20 = pas_compact_heap_reservation_base + 8 * v29;
        if (v29)
          v30 = v20 == 0;
        else
          v30 = 1;
      }
      while (!v30);
    }
    v6 = v3 >= (*((_QWORD *)v23 + 2) & 0xFFFFFFFFFFFFuLL);
    goto LABEL_54;
  }
  v7 = *(unsigned __int16 *)((char *)a2 + 3) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 16);
  v8 = pas_compact_heap_reservation_base + 8 * v7;
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v11 = (unsigned __int16 *)v8;
      v17 = *(unsigned __int16 *)(v8 + 6) | ((unint64_t)*(unsigned __int8 *)(v8 + 8) << 16);
      v8 = pas_compact_heap_reservation_base + 8 * v17;
      if (v17)
        v18 = v8 == 0;
      else
        v18 = 1;
    }
    while (!v18);
LABEL_28:
    v6 = v3 <= (*((_QWORD *)v11 + 2) & 0xFFFFFFFFFFFFuLL);
    goto LABEL_54;
  }
  v6 = 0;
  v10 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16);
  if (v10)
  {
    v11 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v10);
    if (v11)
    {
      v12 = a2;
      while (1)
      {
        v13 = *(unsigned __int16 *)((char *)v11 + 3) | ((unint64_t)*((unsigned __int8 *)v11 + 5) << 16);
        if (!v13 || v12 != (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v13))
          goto LABEL_28;
        v12 = v11;
        v15 = *v11 | ((unint64_t)*((unsigned __int8 *)v11 + 2) << 16);
        v11 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v15);
        if (v15)
          v16 = v11 == 0;
        else
          v16 = 1;
        if (v16)
          goto LABEL_2;
      }
    }
  }
LABEL_54:
  v31 = (a3[1] & 0xFFFFFFFFFFFFLL) - v3;
  v32 = (*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFLL) - v5;
  if (v31 == v32)
  {
    if (v6)
    {
      v33 = pas_compact_heap_reservation_base;
      goto LABEL_62;
    }
LABEL_84:
    v48 = *(_OWORD *)a3;
    *((_QWORD *)a2 + 4) = a3[2];
    *v4 = v48;
    return result;
  }
  if (v31 >= v32)
  {
    v44 = *(unsigned __int16 *)((char *)a2 + 3) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 16);
    v33 = pas_compact_heap_reservation_base;
    v45 = a2[3] | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 16);
    if ((_DWORD)v45)
      v46 = pas_compact_heap_reservation_base + 8 * v45;
    else
      v46 = 0;
    if (v44
      && (v47 = pas_compact_heap_reservation_base + 8 * v44) != 0
      && v31 > (*(_QWORD *)(v47 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v47 + 16) & 0xFFFFFFFFFFFFuLL))
    {
      if (!(v6 | 1))
        goto LABEL_84;
    }
    else if (v46)
    {
      if (v31 <= (*(_QWORD *)(v46 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v46 + 16) & 0xFFFFFFFFFFFFuLL) && !v6)
        goto LABEL_84;
    }
    else if (!v6)
    {
      goto LABEL_84;
    }
  }
  else
  {
    v34 = 0;
    v35 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16);
    v33 = pas_compact_heap_reservation_base;
    if (v35)
    {
      v36 = pas_compact_heap_reservation_base + 8 * v35;
      if (v36)
        v34 = v31 < (*(_QWORD *)(v36 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v36 + 16) & 0xFFFFFFFFFFFFuLL);
    }
    if (!v34 && !v6)
      goto LABEL_84;
  }
LABEL_62:
  v37 = *(unsigned __int16 *)((char *)result + 3) | ((unint64_t)*((unsigned __int8 *)result + 5) << 16);
  if ((_DWORD)v37)
    v38 = (unsigned __int16 *)(v33 + 8 * v37);
  else
    v38 = 0;
  if (v38 == a2)
  {
    v39 = a2[3] | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 16);
    if (v39 && (v40 = v33 + 8 * v39) != 0)
    {
      do
      {
        v41 = (unsigned __int16 *)v40;
        v42 = *(unsigned __int16 *)(v40 + 3) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 16);
        v40 = v33 + 8 * v42;
        if (v42)
          v43 = v40 == 0;
        else
          v43 = 1;
      }
      while (!v43);
    }
    else
    {
      v41 = 0;
      v49 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16);
      if (v49)
      {
        v50 = (unsigned __int16 *)(v33 + 8 * v49);
        if (v50)
        {
          v51 = a2;
          do
          {
            v52 = v50[3] | ((unint64_t)*((unsigned __int8 *)v50 + 8) << 16);
            if (v52)
              v53 = v51 == (unsigned __int16 *)(v33 + 8 * v52);
            else
              v53 = 0;
            if (!v53)
            {
              v41 = v50;
              goto LABEL_101;
            }
            v51 = v50;
            v54 = *v50 | ((unint64_t)*((unsigned __int8 *)v50 + 2) << 16);
            v50 = (unsigned __int16 *)(v33 + 8 * v54);
            if (v54)
              v55 = v50 == 0;
            else
              v55 = 1;
          }
          while (!v55);
          v41 = 0;
        }
      }
    }
LABEL_101:
    if (v41)
      v56 = ((unint64_t)v41 - v33) >> 3;
    else
      LODWORD(v56) = 0;
    *(unsigned __int16 *)((char *)result + 3) = v56;
    *((_BYTE *)result + 5) = BYTE2(v56);
    v33 = pas_compact_heap_reservation_base;
  }
  v57 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16);
  if ((_DWORD)v57)
    v58 = (_BYTE *)(v33 + 8 * v57);
  else
    v58 = 0;
  v59 = *(unsigned __int16 *)((char *)a2 + 3) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 16);
  v60 = v33 + 8 * v59;
  if ((_DWORD)v59)
    v61 = v33 + 8 * v59;
  else
    v61 = 0;
  v62 = a2[3] | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 16);
  v63 = v33 + 8 * v62;
  if ((_DWORD)v62)
    v64 = v33 + 8 * v62;
  else
    v64 = 0;
  v65 = result;
  if (v58)
  {
    v66 = *(unsigned __int16 *)(v58 + 3) | ((unint64_t)v58[5] << 16);
    if ((_DWORD)v66)
      v67 = (unsigned __int16 *)(v33 + 8 * v66);
    else
      v67 = 0;
    if (v67 == a2)
      v65 = v58 + 3;
    else
      v65 = v58 + 6;
  }
  if (v61)
  {
    if (!v64)
    {
      *v65 = (unint64_t)(v61 - v33) >> 3;
      v65[1] = (unint64_t)(v61 - v33) >> 11;
      v65[2] = (unint64_t)(v61 - v33) >> 19;
      v84 = (unint64_t)&v58[-pas_compact_heap_reservation_base] >> 3;
      if (!v58)
        v84 = 0;
      *(_WORD *)v61 = v84;
      v81 = v84 >> 16;
      goto LABEL_187;
    }
    v68 = (*(_QWORD *)(v61 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v61 + 16) & 0xFFFFFFFFFFFFLL);
    v69 = (*(_QWORD *)(v64 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v64 + 16) & 0xFFFFFFFFFFFFLL);
    if (v68 < v69)
      v70 = -1;
    else
      v70 = v68 != v69;
    if (v70 < 0)
      v60 = v64;
    else
      v60 = v61;
    if (v70 < 0)
      v63 = v61;
    else
      v63 = v64;
    v71 = v60 + 6;
    v72 = 3;
    if (v70 < 0)
      v71 = v60 + 3;
    else
      v72 = 6;
    v73 = v60 - v33;
    *v65 = v73 >> 3;
    v65[1] = v73 >> 11;
    v65[2] = v73 >> 19;
    v74 = (unint64_t)&v58[-pas_compact_heap_reservation_base] >> 3;
    if (!v58)
      LODWORD(v74) = 0;
    *(_WORD *)v60 = v74;
    *(_BYTE *)(v60 + 2) = BYTE2(v74);
    v75 = *(unsigned __int16 *)(v60 + v72) | ((unint64_t)*(unsigned __int8 *)(v60 + v72 + 2) << 16);
    v76 = pas_compact_heap_reservation_base;
    v77 = pas_compact_heap_reservation_base + 8 * v75;
    if (v75)
      v78 = v77 == 0;
    else
      v78 = 1;
    if (v78)
    {
LABEL_142:
      v79 = (unint64_t)(v63 - v76) >> 3;
      if (!v63)
        LODWORD(v79) = 0;
      *(_WORD *)v71 = v79;
      *(_BYTE *)(v71 + 2) = BYTE2(v79);
      v80 = v60 - pas_compact_heap_reservation_base;
      *(_BYTE *)v63 = v80 >> 3;
      *(_BYTE *)(v63 + 1) = v80 >> 11;
      v81 = v80 >> 19;
      goto LABEL_188;
    }
    if (v70 < 0)
      v85 = v68;
    else
      v85 = v69;
    v86 = v60;
    while (1)
    {
      v60 = v77;
      v92 = (*(_QWORD *)(v77 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v77 + 16) & 0xFFFFFFFFFFFFLL);
      if (v85 > v92)
      {
        v93 = (unint64_t)(v63 - v76) >> 3;
        if (!v63)
          LODWORD(v93) = 0;
        *(_WORD *)v71 = v93;
        *(_BYTE *)(v71 + 2) = BYTE2(v93);
        v94 = v86 - pas_compact_heap_reservation_base;
        *(_BYTE *)v63 = (unint64_t)(v86 - pas_compact_heap_reservation_base) >> 3;
        *(_BYTE *)(v63 + 1) = v94 >> 11;
        *(_BYTE *)(v63 + 2) = v94 >> 19;
        v95 = pas_compact_heap_reservation_base;
        if ((v70 & 0x80000000) == 0)
        {
          while (1)
          {
            v96 = v63;
            v97 = *(unsigned __int16 *)(v63 + 3) | ((unint64_t)*(unsigned __int8 *)(v63 + 5) << 16);
            v63 = pas_compact_heap_reservation_base + 8 * v97;
            if (!v97 || v63 == 0)
              break;
            v85 = (*(_QWORD *)(v63 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v63 + 16) & 0xFFFFFFFFFFFFLL);
            if (v92 > v85)
            {
              v99 = (_BYTE *)(v96 + 3);
              goto LABEL_158;
            }
          }
          v102 = (_BYTE *)(v96 + 3);
LABEL_186:
          *v102 = (unint64_t)(v77 - pas_compact_heap_reservation_base) >> 3;
          v102[1] = (unint64_t)(v77 - v95) >> 11;
          v102[2] = (unint64_t)(v77 - v95) >> 19;
          v103 = v96 - pas_compact_heap_reservation_base;
          *(_BYTE *)v77 = (unint64_t)(v96 - pas_compact_heap_reservation_base) >> 3;
          *(_BYTE *)(v77 + 1) = v103 >> 11;
          v81 = v103 >> 19;
LABEL_187:
          v63 = v60;
LABEL_188:
          *(_BYTE *)(v63 + 2) = v81;
          goto LABEL_189;
        }
        do
        {
          v96 = v63;
          v100 = *(unsigned __int16 *)(v63 + 6) | ((unint64_t)*(unsigned __int8 *)(v63 + 8) << 16);
          v63 = pas_compact_heap_reservation_base + 8 * v100;
          if (v100)
            v101 = v63 == 0;
          else
            v101 = 1;
          if (v101)
          {
            v102 = (_BYTE *)(v96 + 6);
            goto LABEL_186;
          }
          v85 = (*(_QWORD *)(v63 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v63 + 16) & 0xFFFFFFFFFFFFLL);
        }
        while (v92 <= v85);
        v99 = (_BYTE *)(v96 + 6);
LABEL_158:
        v87 = v77 - pas_compact_heap_reservation_base;
        *v99 = (unint64_t)(v77 - pas_compact_heap_reservation_base) >> 3;
        v99[1] = v87 >> 11;
        v99[2] = v87 >> 19;
        v88 = v96 - pas_compact_heap_reservation_base;
        *(_BYTE *)v77 = v88 >> 3;
        *(_BYTE *)(v77 + 1) = v88 >> 11;
        *(_BYTE *)(v77 + 2) = v88 >> 19;
        v76 = pas_compact_heap_reservation_base;
      }
      v71 = v77 + 6;
      if (v70 < 0)
        v89 = 3;
      else
        v89 = 6;
      if (v70 < 0)
        v71 = v77 + 3;
      v90 = *(unsigned __int16 *)(v77 + v89) | ((unint64_t)*(unsigned __int8 *)(v77 + v89 + 2) << 16);
      v77 = v76 + 8 * v90;
      if (v90)
        v91 = v77 == 0;
      else
        v91 = 1;
      v86 = v60;
      if (v91)
        goto LABEL_142;
    }
  }
  v82 = (unint64_t)(v64 - v33) >> 3;
  if (!v64)
    LODWORD(v82) = 0;
  *(_WORD *)v65 = v82;
  v65[2] = BYTE2(v82);
  if (v64)
  {
    v83 = (unint64_t)&v58[-pas_compact_heap_reservation_base] >> 3;
    if (!v58)
      v83 = 0;
    *(_WORD *)v64 = v83;
    v81 = v83 >> 16;
    goto LABEL_188;
  }
LABEL_189:
  v104 = 0;
  v105 = *(_OWORD *)a3;
  *((_QWORD *)a2 + 4) = a3[2];
  *v4 = v105;
  v106 = *a3;
  v107 = a3[1];
  *((_BYTE *)a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  v108 = *result | ((unint64_t)*((unsigned __int8 *)result + 2) << 16);
  v109 = 1;
  if (!v108)
  {
    v111 = result;
    goto LABEL_194;
  }
  v110 = pas_compact_heap_reservation_base + 8 * v108;
  v111 = result;
  if (!v110)
    goto LABEL_194;
  v112 = v106 & 0xFFFFFFFFFFFFLL;
  v113 = (v107 & 0xFFFFFFFFFFFFLL) - v112;
  v114 = *(_QWORD *)(v110 + 16) & 0xFFFFFFFFFFFFLL;
  if ((*(_QWORD *)(v110 + 24) & 0xFFFFFFFFFFFFLL) - v114 >= v113)
  {
    LOBYTE(v109) = 1;
    v104 = v110;
    while (1)
    {
      v111 = (_BYTE *)(v104 + 6);
      if (v114 <= v112)
        v119 = 6;
      else
        v119 = 3;
      if (v114 > v112)
        v111 = (_BYTE *)(v104 + 3);
      v109 = (v114 > v112) & v109;
      v120 = *(unsigned __int16 *)(v104 + v119) | ((unint64_t)*(unsigned __int8 *)(v104 + v119 + 2) << 16);
      v110 = pas_compact_heap_reservation_base + 8 * v120;
      if (!v120 || v110 == 0)
        break;
      v114 = *(_QWORD *)(v110 + 16) & 0xFFFFFFFFFFFFLL;
      v115 = v104;
      v104 = v110;
      if ((*(_QWORD *)(v110 + 24) & 0xFFFFFFFFFFFFLL) - v114 < v113)
        goto LABEL_210;
    }
LABEL_194:
    v116 = (unint64_t)(v104 - pas_compact_heap_reservation_base) >> 3;
    if (!v104)
      LODWORD(v116) = 0;
    *a2 = v116;
    *((_BYTE *)a2 + 2) = BYTE2(v116);
    v117 = (unint64_t)a2 - pas_compact_heap_reservation_base;
    *v111 = ((unint64_t)a2 - pas_compact_heap_reservation_base) >> 3;
    v111[1] = v117 >> 11;
    v111[2] = v117 >> 19;
    if (!v109)
      return result;
LABEL_197:
    v118 = (unint64_t)a2 - pas_compact_heap_reservation_base;
    *((_BYTE *)result + 3) = ((unint64_t)a2 - pas_compact_heap_reservation_base) >> 3;
    *((_BYTE *)result + 4) = v118 >> 11;
    *((_BYTE *)result + 5) = v118 >> 19;
    return result;
  }
  v115 = 0;
  LOBYTE(v109) = 1;
  v111 = result;
LABEL_210:
  v122 = v114 != v112;
  if (v114 < v112)
    v122 = -1;
  v123 = (unint64_t)(v115 - pas_compact_heap_reservation_base) >> 3;
  if (!v115)
    LODWORD(v123) = 0;
  *a2 = v123;
  *((_BYTE *)a2 + 2) = BYTE2(v123);
  v124 = (unint64_t)a2 - pas_compact_heap_reservation_base;
  *v111 = ((unint64_t)a2 - pas_compact_heap_reservation_base) >> 3;
  v111[1] = v124 >> 11;
  v111[2] = v124 >> 19;
  v125 = v110 - pas_compact_heap_reservation_base;
  if (v122 >= 0)
    v126 = v109;
  else
    v126 = 0;
  v127 = 6;
  if (v122 < 0)
    v128 = 3;
  else
    v128 = 6;
  if (v122 < 0)
    v129 = (unsigned __int16 *)((char *)a2 + 3);
  else
    v129 = a2 + 3;
  *((_BYTE *)a2 + v128) = v125 >> 3;
  *((_BYTE *)v129 + 1) = v125 >> 11;
  *((_BYTE *)v129 + 2) = v125 >> 19;
  v130 = pas_compact_heap_reservation_base;
  if (v122 >= 0)
    v131 = (unsigned __int16 *)((char *)a2 + 3);
  else
    v131 = a2 + 3;
  if (v122 < 0)
  {
    v132 = v110 + 6;
  }
  else
  {
    v127 = 3;
    v132 = v110 + 3;
  }
  *(_BYTE *)v110 = ((unint64_t)a2 - pas_compact_heap_reservation_base) >> 3;
  *(_BYTE *)(v110 + 1) = ((unint64_t)a2 - v130) >> 11;
  *(_BYTE *)(v110 + 2) = ((unint64_t)a2 - v130) >> 19;
  v133 = *(unsigned __int16 *)(v110 + v127) | ((unint64_t)*(unsigned __int8 *)(v110 + v127 + 2) << 16);
  v134 = pas_compact_heap_reservation_base;
  v135 = pas_compact_heap_reservation_base + 8 * v133;
  if ((_DWORD)v133)
    v136 = v135 == 0;
  else
    v136 = 1;
  if (v136)
  {
LABEL_234:
    *v131 = 0;
    *((_BYTE *)v131 + 2) = 0;
    if ((v126 & 1) == 0)
      return result;
    goto LABEL_197;
  }
  v137 = v133;
  v138 = a2;
  while (1)
  {
    v143 = *(_QWORD *)(v135 + 16) & 0xFFFFFFFFFFFFLL;
    v144 = v143 >= v112;
    v145 = v143 != v112;
    if (!v144)
      v145 = -1;
    if (v122 >= 0)
      v145 = -v145;
    if (v145 >= 1)
      break;
LABEL_240:
    v110 = v135;
    v132 = v135 + 6;
    v140 = v135 + 3;
    if (v122 >= 0)
      v141 = 3;
    else
      v141 = 6;
    if (v122 >= 0)
      v132 = v140;
    v133 = *(unsigned __int16 *)(v110 + v141) | ((unint64_t)*(unsigned __int8 *)(v110 + v141 + 2) << 16);
    v135 = v134 + 8 * v133;
    v137 = v133;
    if ((_DWORD)v133)
      v142 = v135 == 0;
    else
      v142 = 1;
    if (v142)
      goto LABEL_234;
  }
  *(_BYTE *)v131 = v137;
  *((_BYTE *)v131 + 1) = BYTE1(v133);
  *((_BYTE *)v131 + 2) = BYTE2(v133);
  v146 = ((unint64_t)v138 - pas_compact_heap_reservation_base) >> 3;
  if (!v138)
    LODWORD(v146) = 0;
  *(_WORD *)v135 = v146;
  *(_BYTE *)(v135 + 2) = BYTE2(v146);
  if (v122 < 0)
  {
    while (1)
    {
      v138 = (unsigned __int16 *)v135;
      v147 = *(unsigned __int16 *)(v135 + 3) | ((unint64_t)*(unsigned __int8 *)(v135 + 5) << 16);
      v135 = pas_compact_heap_reservation_base + 8 * v147;
      if (!(_DWORD)v147 || v135 == 0)
        break;
      if ((*(_QWORD *)(v135 + 16) & 0xFFFFFFFFFFFFuLL) <= v112)
      {
        v131 = (unsigned __int16 *)((char *)v138 + 3);
LABEL_236:
        v126 = 0;
        *(_WORD *)v132 = v147;
        *(_BYTE *)(v132 + 2) = BYTE2(v147);
        if (v110)
          v139 = (unint64_t)(v110 - pas_compact_heap_reservation_base) >> 3;
        else
          LODWORD(v139) = 0;
        *(_WORD *)v135 = v139;
        *(_BYTE *)(v135 + 2) = BYTE2(v139);
        v134 = pas_compact_heap_reservation_base;
        goto LABEL_240;
      }
    }
  }
  else
  {
    while (1)
    {
      v138 = (unsigned __int16 *)v135;
      v147 = *(unsigned __int16 *)(v135 + 6) | ((unint64_t)*(unsigned __int8 *)(v135 + 8) << 16);
      v135 = pas_compact_heap_reservation_base + 8 * v147;
      if (!(_DWORD)v147 || v135 == 0)
        break;
      if ((*(_QWORD *)(v135 + 16) & 0xFFFFFFFFFFFFuLL) >= v112)
      {
        v131 = v138 + 3;
        goto LABEL_236;
      }
    }
  }
  *(_WORD *)v132 = 0;
  *(_BYTE *)(v132 + 2) = 0;
  return result;
}

void fast_merge(unsigned __int16 *a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int16 *v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  unint64_t v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  unint64_t v85;
  unsigned __int16 *v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned __int16 *v108;
  unsigned __int16 *v109;
  unint64_t v110;
  BOOL v111;
  unint64_t v112;
  BOOL v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  BOOL v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v126;
  unint64_t v127;
  BOOL v128;
  unint64_t v129;
  unsigned __int16 *v130;
  unsigned __int16 *v131;
  unint64_t v132;
  BOOL v133;
  unint64_t v134;
  BOOL v135;
  _BYTE *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  unsigned __int16 *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int16 *v157;
  uint64_t v158;
  unsigned __int16 *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  unint64_t v165;
  char v166;
  unsigned __int16 *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  unint64_t v172;
  BOOL v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v179;
  unint64_t v180;
  _BYTE *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int16 *v188;
  unint64_t v189;
  unsigned __int16 *v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  BOOL v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  BOOL v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _BYTE *v223;
  unint64_t v224;
  BOOL v225;
  _BYTE *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  int v230;
  uint64_t v231;
  unsigned __int16 *v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  int v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  unsigned __int16 *v247;
  uint64_t v248;
  _BYTE *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  BOOL v253;
  char v254;
  unsigned __int16 *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  BOOL v259;
  unint64_t v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  __int128 v266;
  unint64_t v267;

  v5 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16);
  v6 = pas_compact_heap_reservation_base;
  v7 = pas_compact_heap_reservation_base + 8 * v5;
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
LABEL_6:
    v266 = *(_OWORD *)a2;
    v267 = a2[2];
    insert_node(a1, &v266);
    return;
  }
  v9 = 0;
  v10 = *a2;
  v11 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v5);
  do
  {
    if ((*((_QWORD *)v11 + 2) & 0xFFFFFFFFFFFFuLL) < (*a2 & 0xFFFFFFFFFFFFLL))
    {
      v12 = v11[3] | ((unint64_t)*((unsigned __int8 *)v11 + 8) << 16);
      v9 = v11;
      if (!v12)
        goto LABEL_13;
      goto LABEL_9;
    }
    v12 = *(unsigned __int16 *)((char *)v11 + 3) | ((unint64_t)*((unsigned __int8 *)v11 + 5) << 16);
    if (!v12)
      break;
LABEL_9:
    v11 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v12);
  }
  while (v11);
  v11 = v9;
  if (!v9)
    goto LABEL_19;
LABEL_13:
  v13 = *((_QWORD *)v11 + 3);
  if (((v13 ^ v10) & 0xFFFFFFFFFFFFLL) != 0)
    goto LABEL_18;
  v14 = *((_QWORD *)v11 + 2);
  v15 = *((_QWORD *)v11 + 4);
  v16 = *a2;
  v18 = a2[1];
  v17 = a2[2];
  do
  {
    v19 = v16;
    v20 = v18;
    v21 = v17;
    v16 = v14;
    v18 = v13;
    v17 = v15;
    v22 = v20 ^ v14;
    v15 = v21;
    v13 = v20;
    v14 = v19;
  }
  while ((v22 & 0xFFFFFFFFFFFFLL) == 0);
  if (((v19 ^ v18) & 0xFFFFFFFFFFFFLL) != 0
    || ((v18 & 0xFFFFFFFFFFFFLL) + (v17 & 0xFFFFFFFFFFFFLL) - (v16 & 0xFFFFFFFFFFFFLL)) % *a3 != (v21 & 0xFFFFFFFFFFFFLL))
  {
LABEL_18:
    v11 = 0;
  }
LABEL_19:
  v23 = a2[1];
  v24 = v23 & 0xFFFFFFFFFFFFLL;
  while (2)
  {
    v26 = *(_QWORD *)(v7 + 16);
    if ((v26 & 0xFFFFFFFFFFFFLL) == v24)
    {
      v29 = *(_QWORD *)(v7 + 24);
      v28 = a2[2];
      if (((v26 ^ v23) & 0xFFFFFFFFFFFFLL) == 0 || ((v29 ^ v10) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v31 = *(_QWORD *)(v7 + 32);
        v32 = a2[2];
        v33 = a2[1];
        v34 = *a2;
        do
        {
          v35 = v34;
          v36 = v33;
          v37 = v32;
          v34 = v26;
          v33 = v29;
          v32 = v31;
          v38 = v36 ^ v26;
          v31 = v37;
          v29 = v36;
          v26 = v35;
        }
        while ((v38 & 0xFFFFFFFFFFFFLL) == 0);
        if (((v35 ^ v33) & 0xFFFFFFFFFFFFLL) == 0)
        {
          if (((v33 & 0xFFFFFFFFFFFFLL) + (v32 & 0xFFFFFFFFFFFFLL) - (v34 & 0xFFFFFFFFFFFFLL)) % *a3 == (v37 & 0xFFFFFFFFFFFFLL))
            v27 = (unsigned __int16 *)v7;
          else
            v27 = 0;
          if (!v11)
            goto LABEL_54;
          goto LABEL_36;
        }
      }
      v27 = 0;
      if (v11)
        goto LABEL_36;
LABEL_54:
      if (!v27)
        goto LABEL_6;
      goto LABEL_55;
    }
    if ((v26 & 0xFFFFFFFFFFFFLL) <= v24)
    {
      v25 = *(unsigned __int16 *)(v7 + 6) | ((unint64_t)*(unsigned __int8 *)(v7 + 8) << 16);
      if (!v25)
        goto LABEL_25;
LABEL_21:
      v7 = pas_compact_heap_reservation_base + 8 * v25;
      if (!v7)
        goto LABEL_25;
      continue;
    }
    break;
  }
  v25 = *(unsigned __int16 *)(v7 + 3) | ((unint64_t)*(unsigned __int8 *)(v7 + 5) << 16);
  if (v25)
    goto LABEL_21;
LABEL_25:
  v27 = 0;
  v28 = a2[2];
  if (!v11)
    goto LABEL_54;
LABEL_36:
  v39 = *((_QWORD *)v11 + 2);
  v40 = *((_QWORD *)v11 + 3);
  v41 = *((_QWORD *)v11 + 4);
  do
  {
    v42 = v39;
    v43 = v40;
    v44 = v41;
    v39 = v10;
    v40 = v23;
    v41 = v28;
    v45 = v43 ^ v10;
    v28 = v44;
    v23 = v43;
    v10 = v42;
  }
  while ((v45 & 0xFFFFFFFFFFFFLL) == 0);
  if (((v42 ^ v40) & 0xFFFFFFFFFFFFLL) != 0
    || (v10 = v39 & 0xFFFFFFFFFFFFLL,
        v46 = v41 & 0xFFFFFFFFFFFFLL,
        ((v40 & 0xFFFFFFFFFFFFLL) + (v41 & 0xFFFFFFFFFFFFLL) - v10) % *a3 != (v44 & 0xFFFFFFFFFFFFLL)))
  {
    v28 = 0;
    v23 = 0;
    v10 = 0;
    if (!v27)
      goto LABEL_80;
LABEL_55:
    v50 = *((_QWORD *)v27 + 2);
    v51 = *((_QWORD *)v27 + 3);
    v52 = *((_QWORD *)v27 + 4);
    do
    {
      v53 = v50;
      v54 = v51;
      v55 = v52;
      v50 = v10;
      v51 = v23;
      v52 = v28;
      v56 = v54 ^ v10;
      v28 = v55;
      v23 = v54;
      v10 = v53;
    }
    while ((v56 & 0xFFFFFFFFFFFFLL) == 0);
    if (((v53 ^ v51) & 0xFFFFFFFFFFFFLL) != 0
      || (v10 = v50 & 0xFFFFFFFFFFFFLL,
          v57 = v52 & 0xFFFFFFFFFFFFLL,
          ((v51 & 0xFFFFFFFFFFFFLL) + (v52 & 0xFFFFFFFFFFFFLL) - v10) % *a3 != (v55 & 0xFFFFFFFFFFFFLL)))
    {
      v28 = 0;
      v23 = 0;
      v10 = 0;
      if (!v11)
        goto LABEL_66;
    }
    else
    {
      v23 = v54 & 0xFFFFFFFFFFFFLL;
      v58 = v52 & 0xFF000000000000;
      if ((v55 & 0xFF000000000000) == 0x1000000000000 && v58 == 0x1000000000000)
        v60 = 0x1000000000000;
      else
        v60 = 0;
      v28 = v60 | v57;
      if (!v11)
      {
LABEL_66:
        v61 = *(unsigned __int16 *)((char *)a1 + 3) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 16);
        if ((_DWORD)v61)
          v62 = pas_compact_heap_reservation_base + 8 * v61;
        else
          v62 = 0;
        if ((unsigned __int16 *)v62 == v27)
        {
          v63 = v27[3] | ((unint64_t)*((unsigned __int8 *)v27 + 8) << 16);
          if (v63 && (v64 = pas_compact_heap_reservation_base + 8 * v63) != 0)
          {
            do
            {
              v65 = (unsigned __int16 *)v64;
              v66 = *(unsigned __int16 *)(v64 + 3) | ((unint64_t)*(unsigned __int8 *)(v64 + 5) << 16);
              v64 = pas_compact_heap_reservation_base + 8 * v66;
              if (v66)
                v67 = v64 == 0;
              else
                v67 = 1;
            }
            while (!v67);
          }
          else
          {
            v65 = 0;
            v129 = *v27 | ((unint64_t)*((unsigned __int8 *)v27 + 2) << 16);
            if (v129)
            {
              v130 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v129);
              if (v130)
              {
                v131 = v27;
                do
                {
                  v132 = v130[3] | ((unint64_t)*((unsigned __int8 *)v130 + 8) << 16);
                  if (v132)
                    v133 = v131 == (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v132);
                  else
                    v133 = 0;
                  if (!v133)
                  {
                    v65 = v130;
                    goto LABEL_296;
                  }
                  v131 = v130;
                  v134 = *v130 | ((unint64_t)*((unsigned __int8 *)v130 + 2) << 16);
                  v130 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v134);
                  if (v134)
                    v135 = v130 == 0;
                  else
                    v135 = 1;
                }
                while (!v135);
                v65 = 0;
              }
            }
          }
LABEL_296:
          if (v65)
            v179 = ((unint64_t)v65 - pas_compact_heap_reservation_base) >> 3;
          else
            LODWORD(v179) = 0;
          *(unsigned __int16 *)((char *)a1 + 3) = v179;
          *((_BYTE *)a1 + 5) = BYTE2(v179);
          v6 = pas_compact_heap_reservation_base;
        }
        v180 = *v27 | ((unint64_t)*((unsigned __int8 *)v27 + 2) << 16);
        if ((_DWORD)v180)
          v181 = (_BYTE *)(v6 + 8 * v180);
        else
          v181 = 0;
        v182 = *(unsigned __int16 *)((char *)v27 + 3) | ((unint64_t)*((unsigned __int8 *)v27 + 5) << 16);
        v183 = v6 + 8 * v182;
        if ((_DWORD)v182)
          v184 = v6 + 8 * v182;
        else
          v184 = 0;
        v185 = v27[3] | ((unint64_t)*((unsigned __int8 *)v27 + 8) << 16);
        v186 = v6 + 8 * v185;
        if ((_DWORD)v185)
          v187 = v6 + 8 * v185;
        else
          v187 = 0;
        v188 = a1;
        if (v181)
        {
          v189 = *(unsigned __int16 *)(v181 + 3) | ((unint64_t)v181[5] << 16);
          if ((_DWORD)v189)
            v190 = (unsigned __int16 *)(v6 + 8 * v189);
          else
            v190 = 0;
          if (v190 == v27)
            v188 = (unsigned __int16 *)(v181 + 3);
          else
            v188 = (unsigned __int16 *)(v181 + 6);
        }
        if (v184)
        {
          if (!v187)
          {
            v207 = v184 - v6;
            *(_BYTE *)v188 = v207 >> 3;
            *((_BYTE *)v188 + 1) = v207 >> 11;
            *((_BYTE *)v188 + 2) = v207 >> 19;
            v208 = (unint64_t)&v181[-pas_compact_heap_reservation_base] >> 3;
            if (!v181)
              v208 = 0;
            *(_WORD *)v184 = v208;
            v204 = v208 >> 16;
            goto LABEL_382;
          }
          v191 = (*(_QWORD *)(v184 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v184 + 16) & 0xFFFFFFFFFFFFLL);
          v192 = (*(_QWORD *)(v187 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v187 + 16) & 0xFFFFFFFFFFFFLL);
          if (v191 < v192)
            v193 = -1;
          else
            v193 = v191 != v192;
          if (v193 < 0)
            v183 = v187;
          else
            v183 = v184;
          if (v193 < 0)
            v186 = v184;
          else
            v186 = v187;
          v194 = v183 + 6;
          v195 = 3;
          if (v193 < 0)
            v194 = v183 + 3;
          else
            v195 = 6;
          v196 = v183 - v6;
          *(_BYTE *)v188 = v196 >> 3;
          *((_BYTE *)v188 + 1) = v196 >> 11;
          *((_BYTE *)v188 + 2) = v196 >> 19;
          v197 = (unint64_t)&v181[-pas_compact_heap_reservation_base] >> 3;
          if (!v181)
            LODWORD(v197) = 0;
          *(_WORD *)v183 = v197;
          *(_BYTE *)(v183 + 2) = BYTE2(v197);
          v198 = *(unsigned __int16 *)(v183 + v195) | ((unint64_t)*(unsigned __int8 *)(v183 + v195 + 2) << 16);
          v199 = pas_compact_heap_reservation_base;
          v200 = pas_compact_heap_reservation_base + 8 * v198;
          if (v198)
            v201 = v200 == 0;
          else
            v201 = 1;
          if (v201)
          {
LABEL_337:
            v202 = (unint64_t)(v186 - v199) >> 3;
            if (!v186)
              LODWORD(v202) = 0;
            *(_WORD *)v194 = v202;
            *(_BYTE *)(v194 + 2) = BYTE2(v202);
            v203 = v183 - pas_compact_heap_reservation_base;
            *(_BYTE *)v186 = (unint64_t)(v183 - pas_compact_heap_reservation_base) >> 3;
            *(_BYTE *)(v186 + 1) = v203 >> 11;
            v204 = v203 >> 19;
            goto LABEL_383;
          }
          if (v193 < 0)
            v209 = v191;
          else
            v209 = v192;
          v210 = v183;
          while (1)
          {
            v183 = v200;
            v216 = (*(_QWORD *)(v200 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v200 + 16) & 0xFFFFFFFFFFFFLL);
            if (v209 > v216)
            {
              v217 = (unint64_t)(v186 - v199) >> 3;
              if (!v186)
                LODWORD(v217) = 0;
              *(_WORD *)v194 = v217;
              *(_BYTE *)(v194 + 2) = BYTE2(v217);
              v218 = v210 - pas_compact_heap_reservation_base;
              *(_BYTE *)v186 = (unint64_t)(v210 - pas_compact_heap_reservation_base) >> 3;
              *(_BYTE *)(v186 + 1) = v218 >> 11;
              *(_BYTE *)(v186 + 2) = v218 >> 19;
              v219 = pas_compact_heap_reservation_base;
              if ((v193 & 0x80000000) == 0)
              {
                while (1)
                {
                  v220 = v186;
                  v221 = *(unsigned __int16 *)(v186 + 3) | ((unint64_t)*(unsigned __int8 *)(v186 + 5) << 16);
                  v186 = pas_compact_heap_reservation_base + 8 * v221;
                  if (!v221 || v186 == 0)
                    break;
                  v209 = (*(_QWORD *)(v186 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v186 + 16) & 0xFFFFFFFFFFFFLL);
                  if (v216 > v209)
                  {
                    v223 = (_BYTE *)(v220 + 3);
                    goto LABEL_353;
                  }
                }
                v226 = (_BYTE *)(v220 + 3);
LABEL_381:
                *v226 = (unint64_t)(v200 - pas_compact_heap_reservation_base) >> 3;
                v226[1] = (unint64_t)(v200 - v219) >> 11;
                v226[2] = (unint64_t)(v200 - v219) >> 19;
                v227 = v220 - pas_compact_heap_reservation_base;
                *(_BYTE *)v200 = (unint64_t)(v220 - pas_compact_heap_reservation_base) >> 3;
                *(_BYTE *)(v200 + 1) = v227 >> 11;
                v204 = v227 >> 19;
LABEL_382:
                v186 = v183;
LABEL_383:
                *(_BYTE *)(v186 + 2) = v204;
                goto LABEL_384;
              }
              do
              {
                v220 = v186;
                v224 = *(unsigned __int16 *)(v186 + 6) | ((unint64_t)*(unsigned __int8 *)(v186 + 8) << 16);
                v186 = pas_compact_heap_reservation_base + 8 * v224;
                if (v224)
                  v225 = v186 == 0;
                else
                  v225 = 1;
                if (v225)
                {
                  v226 = (_BYTE *)(v220 + 6);
                  goto LABEL_381;
                }
                v209 = (*(_QWORD *)(v186 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v186 + 16) & 0xFFFFFFFFFFFFLL);
              }
              while (v216 <= v209);
              v223 = (_BYTE *)(v220 + 6);
LABEL_353:
              v211 = v200 - pas_compact_heap_reservation_base;
              *v223 = (unint64_t)(v200 - pas_compact_heap_reservation_base) >> 3;
              v223[1] = v211 >> 11;
              v223[2] = v211 >> 19;
              v212 = v220 - pas_compact_heap_reservation_base;
              *(_BYTE *)v200 = v212 >> 3;
              *(_BYTE *)(v200 + 1) = v212 >> 11;
              *(_BYTE *)(v200 + 2) = v212 >> 19;
              v199 = pas_compact_heap_reservation_base;
            }
            v194 = v200 + 6;
            if (v193 < 0)
              v213 = 3;
            else
              v213 = 6;
            if (v193 < 0)
              v194 = v200 + 3;
            v214 = *(unsigned __int16 *)(v200 + v213) | ((unint64_t)*(unsigned __int8 *)(v200 + v213 + 2) << 16);
            v200 = v199 + 8 * v214;
            if (v214)
              v215 = v200 == 0;
            else
              v215 = 1;
            v210 = v183;
            if (v215)
              goto LABEL_337;
          }
        }
        v205 = (unint64_t)(v187 - v6) >> 3;
        if (!v187)
          LODWORD(v205) = 0;
        *v188 = v205;
        *((_BYTE *)v188 + 2) = BYTE2(v205);
        if (v187)
        {
          v206 = (unint64_t)&v181[-pas_compact_heap_reservation_base] >> 3;
          if (!v181)
            v206 = 0;
          *(_WORD *)v187 = v206;
          v204 = v206 >> 16;
          goto LABEL_383;
        }
LABEL_384:
        v228 = 0;
        *((_QWORD *)v27 + 2) = v10;
        *((_QWORD *)v27 + 3) = v23;
        *((_QWORD *)v27 + 4) = v28;
        *(_QWORD *)v27 = 0;
        *((_BYTE *)v27 + 8) = 0;
        v229 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16);
        v230 = 1;
        if (v229)
        {
          v231 = pas_compact_heap_reservation_base + 8 * v229;
          v232 = a1;
          if (v231)
          {
            v233 = *(_QWORD *)(v231 + 16) & 0xFFFFFFFFFFFFLL;
            if ((*(_QWORD *)(v231 + 24) & 0xFFFFFFFFFFFFLL) - v233 < v23 - v10)
            {
              v234 = 0;
              LOBYTE(v230) = 1;
              v232 = a1;
LABEL_404:
              v240 = v233 != v10;
              if (v233 < v10)
                v240 = -1;
              v241 = (unint64_t)(v234 - pas_compact_heap_reservation_base) >> 3;
              if (!v234)
                LODWORD(v241) = 0;
              *v27 = v241;
              *((_BYTE *)v27 + 2) = BYTE2(v241);
              v242 = (unint64_t)v27 - pas_compact_heap_reservation_base;
              *(_BYTE *)v232 = ((unint64_t)v27 - pas_compact_heap_reservation_base) >> 3;
              *((_BYTE *)v232 + 1) = v242 >> 11;
              *((_BYTE *)v232 + 2) = v242 >> 19;
              v243 = v231 - pas_compact_heap_reservation_base;
              if (v240 >= 0)
                v244 = v230;
              else
                v244 = 0;
              v245 = 6;
              if (v240 < 0)
                v246 = 3;
              else
                v246 = 6;
              if (v240 < 0)
                v247 = (unsigned __int16 *)((char *)v27 + 3);
              else
                v247 = v27 + 3;
              *((_BYTE *)v27 + v246) = v243 >> 3;
              *((_BYTE *)v247 + 1) = v243 >> 11;
              *((_BYTE *)v247 + 2) = v243 >> 19;
              v248 = pas_compact_heap_reservation_base;
              if (v240 >= 0)
                v249 = (char *)v27 + 3;
              else
                v249 = v27 + 3;
              if (v240 < 0)
              {
                v160 = v231 + 6;
              }
              else
              {
                v245 = 3;
                v160 = v231 + 3;
              }
              *(_BYTE *)v231 = ((unint64_t)v27 - pas_compact_heap_reservation_base) >> 3;
              *(_BYTE *)(v231 + 1) = ((unint64_t)v27 - v248) >> 11;
              *(_BYTE *)(v231 + 2) = ((unint64_t)v27 - v248) >> 19;
              v250 = *(unsigned __int16 *)(v231 + v245) | ((unint64_t)*(unsigned __int8 *)(v231 + v245 + 2) << 16);
              v251 = pas_compact_heap_reservation_base;
              v252 = pas_compact_heap_reservation_base + 8 * v250;
              if ((_DWORD)v250)
                v253 = v252 == 0;
              else
                v253 = 1;
              if (!v253)
              {
                v254 = v250;
                v255 = v27;
                while (1)
                {
                  v260 = *(_QWORD *)(v252 + 16) & 0xFFFFFFFFFFFFLL;
                  v173 = v260 >= v10;
                  v261 = v260 != v10;
                  if (!v173)
                    v261 = -1;
                  if (v240 >= 0)
                    v261 = -v261;
                  if (v261 >= 1)
                    break;
LABEL_435:
                  v231 = v252;
                  v160 = v252 + 6;
                  v257 = v252 + 3;
                  if (v240 >= 0)
                    v258 = 3;
                  else
                    v258 = 6;
                  if (v240 >= 0)
                    v160 = v257;
                  v250 = *(unsigned __int16 *)(v231 + v258) | ((unint64_t)*(unsigned __int8 *)(v231 + v258 + 2) << 16);
                  v252 = v251 + 8 * v250;
                  v254 = v250;
                  if ((_DWORD)v250)
                    v259 = v252 == 0;
                  else
                    v259 = 1;
                  if (v259)
                    goto LABEL_428;
                }
                *v249 = v254;
                v249[1] = BYTE1(v250);
                v249[2] = BYTE2(v250);
                v262 = ((unint64_t)v255 - pas_compact_heap_reservation_base) >> 3;
                if (!v255)
                  LODWORD(v262) = 0;
                *(_WORD *)v252 = v262;
                *(_BYTE *)(v252 + 2) = BYTE2(v262);
                if (v240 < 0)
                {
                  while (1)
                  {
                    v255 = (unsigned __int16 *)v252;
                    v263 = *(unsigned __int16 *)(v252 + 3) | ((unint64_t)*(unsigned __int8 *)(v252 + 5) << 16);
                    v252 = pas_compact_heap_reservation_base + 8 * v263;
                    if (!(_DWORD)v263 || v252 == 0)
                      break;
                    if ((*(_QWORD *)(v252 + 16) & 0xFFFFFFFFFFFFuLL) <= v10)
                    {
                      v249 = (char *)v255 + 3;
LABEL_431:
                      v244 = 0;
                      *(_WORD *)v160 = v263;
                      *(_BYTE *)(v160 + 2) = BYTE2(v263);
                      if (v231)
                        v256 = (unint64_t)(v231 - pas_compact_heap_reservation_base) >> 3;
                      else
                        LODWORD(v256) = 0;
                      *(_WORD *)v252 = v256;
                      *(_BYTE *)(v252 + 2) = BYTE2(v256);
                      v251 = pas_compact_heap_reservation_base;
                      goto LABEL_435;
                    }
                  }
                }
                else
                {
                  while (1)
                  {
                    v255 = (unsigned __int16 *)v252;
                    v263 = *(unsigned __int16 *)(v252 + 6) | ((unint64_t)*(unsigned __int8 *)(v252 + 8) << 16);
                    v252 = pas_compact_heap_reservation_base + 8 * v263;
                    if (!(_DWORD)v263 || v252 == 0)
                      break;
                    if ((*(_QWORD *)(v252 + 16) & 0xFFFFFFFFFFFFuLL) >= v10)
                    {
                      v249 = v255 + 3;
                      goto LABEL_431;
                    }
                  }
                }
                goto LABEL_464;
              }
LABEL_428:
              *(_WORD *)v249 = 0;
              v249[2] = 0;
              if ((v244 & 1) == 0)
                return;
LABEL_429:
              v165 = (unint64_t)v27 - pas_compact_heap_reservation_base;
              goto LABEL_430;
            }
            LOBYTE(v230) = 1;
            v228 = v231;
            while (1)
            {
              v232 = (unsigned __int16 *)(v228 + 6);
              if (v233 <= v10)
                v237 = 6;
              else
                v237 = 3;
              if (v233 > v10)
                v232 = (unsigned __int16 *)(v228 + 3);
              v230 = (v233 > v10) & v230;
              v238 = *(unsigned __int16 *)(v228 + v237) | ((unint64_t)*(unsigned __int8 *)(v228 + v237 + 2) << 16);
              v231 = pas_compact_heap_reservation_base + 8 * v238;
              if (!v238 || v231 == 0)
                break;
              v233 = *(_QWORD *)(v231 + 16) & 0xFFFFFFFFFFFFLL;
              v234 = v228;
              v228 = v231;
              if ((*(_QWORD *)(v231 + 24) & 0xFFFFFFFFFFFFLL) - v233 < v23 - v10)
                goto LABEL_404;
            }
          }
        }
        else
        {
          v232 = a1;
        }
        v235 = (unint64_t)(v228 - pas_compact_heap_reservation_base) >> 3;
        if (!v228)
          LODWORD(v235) = 0;
        *v27 = v235;
        *((_BYTE *)v27 + 2) = BYTE2(v235);
        v236 = (unint64_t)v27 - pas_compact_heap_reservation_base;
        *(_BYTE *)v232 = ((unint64_t)v27 - pas_compact_heap_reservation_base) >> 3;
        *((_BYTE *)v232 + 1) = v236 >> 11;
        *((_BYTE *)v232 + 2) = v236 >> 19;
        if (!v230)
          return;
        goto LABEL_429;
      }
    }
    remove_node((unint64_t)a1, v27);
    v6 = pas_compact_heap_reservation_base;
    goto LABEL_80;
  }
  v23 = v43 & 0xFFFFFFFFFFFFLL;
  v47 = v41 & 0xFF000000000000;
  if ((v44 & 0xFF000000000000) == 0x1000000000000 && v47 == 0x1000000000000)
    v49 = 0x1000000000000;
  else
    v49 = 0;
  v28 = v49 | v46;
  if (v27)
    goto LABEL_55;
LABEL_80:
  v68 = *(unsigned __int16 *)((char *)v11 + 3) | ((unint64_t)*((unsigned __int8 *)v11 + 5) << 16);
  v69 = v6 + 8 * v68;
  v70 = v11[3] | ((unint64_t)*((unsigned __int8 *)v11 + 8) << 16);
  v71 = v6 + 8 * v70;
  if ((_DWORD)v70)
    v72 = v6 + 8 * v70;
  else
    v72 = 0;
  if ((_DWORD)v68)
    v73 = v69 == 0;
  else
    v73 = 1;
  if ((v73 || v23 - v10 <= (*(_QWORD *)(v69 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v69 + 16) & 0xFFFFFFFFFFFFuLL))
    && (!v72 || v23 - v10 <= (*(_QWORD *)(v72 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v72 + 16) & 0xFFFFFFFFFFFFuLL)))
  {
    *((_QWORD *)v11 + 2) = v10;
    *((_QWORD *)v11 + 3) = v23;
    *((_QWORD *)v11 + 4) = v28;
    return;
  }
  v74 = *(unsigned __int16 *)((char *)a1 + 3) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 16);
  if ((_DWORD)v74)
    v75 = (unsigned __int16 *)(v6 + 8 * v74);
  else
    v75 = 0;
  if (v75 == v11)
  {
    if ((_DWORD)v70 && v71)
    {
      do
      {
        v76 = (unsigned __int16 *)v71;
        v77 = *(unsigned __int16 *)(v71 + 3) | ((unint64_t)*(unsigned __int8 *)(v71 + 5) << 16);
        v71 = v6 + 8 * v77;
        if (v77)
          v78 = v71 == 0;
        else
          v78 = 1;
      }
      while (!v78);
    }
    else
    {
      v76 = 0;
      v107 = *v11 | ((unint64_t)*((unsigned __int8 *)v11 + 2) << 16);
      if (v107)
      {
        v108 = (unsigned __int16 *)(v6 + 8 * v107);
        if (v108)
        {
          v109 = v11;
          do
          {
            v110 = v108[3] | ((unint64_t)*((unsigned __int8 *)v108 + 8) << 16);
            if (v110)
              v111 = v109 == (unsigned __int16 *)(v6 + 8 * v110);
            else
              v111 = 0;
            if (!v111)
            {
              v76 = v108;
              goto LABEL_101;
            }
            v109 = v108;
            v112 = *v108 | ((unint64_t)*((unsigned __int8 *)v108 + 2) << 16);
            v108 = (unsigned __int16 *)(v6 + 8 * v112);
            if (v112)
              v113 = v108 == 0;
            else
              v113 = 1;
          }
          while (!v113);
          v76 = 0;
        }
      }
    }
LABEL_101:
    v79 = ((unint64_t)v76 - v6) >> 3;
    if (!v76)
      LODWORD(v79) = 0;
    *(unsigned __int16 *)((char *)a1 + 3) = v79;
    *((_BYTE *)a1 + 5) = BYTE2(v79);
    v68 = *(unsigned __int16 *)((char *)v11 + 3) | ((unint64_t)*((unsigned __int8 *)v11 + 5) << 16);
    v70 = v11[3] | ((unint64_t)*((unsigned __int8 *)v11 + 8) << 16);
    v6 = pas_compact_heap_reservation_base;
    v69 = pas_compact_heap_reservation_base + 8 * v68;
    v71 = pas_compact_heap_reservation_base + 8 * v70;
  }
  v80 = *v11 | ((unint64_t)*((unsigned __int8 *)v11 + 2) << 16);
  if ((_DWORD)v80)
    v81 = (_BYTE *)(v6 + 8 * v80);
  else
    v81 = 0;
  if ((_DWORD)v68)
    v82 = v69;
  else
    v82 = 0;
  if ((_DWORD)v70)
    v83 = v71;
  else
    v83 = 0;
  v84 = a1;
  if (v81)
  {
    v85 = *(unsigned __int16 *)(v81 + 3) | ((unint64_t)v81[5] << 16);
    if ((_DWORD)v85)
      v86 = (unsigned __int16 *)(v6 + 8 * v85);
    else
      v86 = 0;
    if (v86 == v11)
      v84 = (unsigned __int16 *)(v81 + 3);
    else
      v84 = (unsigned __int16 *)(v81 + 6);
  }
  if (v82)
  {
    if (!v83)
    {
      v103 = v82 - v6;
      *(_BYTE *)v84 = v103 >> 3;
      *((_BYTE *)v84 + 1) = v103 >> 11;
      *((_BYTE *)v84 + 2) = v103 >> 19;
      v104 = (unint64_t)&v81[-pas_compact_heap_reservation_base] >> 3;
      if (!v81)
        v104 = 0;
      *(_WORD *)v82 = v104;
      v100 = v104 >> 16;
      goto LABEL_215;
    }
    v87 = (*(_QWORD *)(v82 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v82 + 16) & 0xFFFFFFFFFFFFLL);
    v88 = (*(_QWORD *)(v83 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v83 + 16) & 0xFFFFFFFFFFFFLL);
    if (v87 < v88)
      v89 = -1;
    else
      v89 = v87 != v88;
    if (v89 < 0)
      v69 = v83;
    else
      v69 = v82;
    if (v89 < 0)
      v71 = v82;
    else
      v71 = v83;
    v90 = v69 + 6;
    v91 = 3;
    if (v89 < 0)
      v90 = v69 + 3;
    else
      v91 = 6;
    v92 = v69 - v6;
    *(_BYTE *)v84 = v92 >> 3;
    *((_BYTE *)v84 + 1) = v92 >> 11;
    *((_BYTE *)v84 + 2) = v92 >> 19;
    v93 = (unint64_t)&v81[-pas_compact_heap_reservation_base] >> 3;
    if (!v81)
      LODWORD(v93) = 0;
    *(_WORD *)v69 = v93;
    *(_BYTE *)(v69 + 2) = BYTE2(v93);
    v94 = *(unsigned __int16 *)(v69 + v91) | ((unint64_t)*(unsigned __int8 *)(v69 + v91 + 2) << 16);
    v95 = pas_compact_heap_reservation_base;
    v96 = pas_compact_heap_reservation_base + 8 * v94;
    if (v94)
      v97 = v96 == 0;
    else
      v97 = 1;
    if (v97)
    {
LABEL_141:
      v98 = (unint64_t)(v71 - v95) >> 3;
      if (!v71)
        LODWORD(v98) = 0;
      *(_WORD *)v90 = v98;
      *(_BYTE *)(v90 + 2) = BYTE2(v98);
      v99 = v69 - pas_compact_heap_reservation_base;
      *(_BYTE *)v71 = (unint64_t)(v69 - pas_compact_heap_reservation_base) >> 3;
      *(_BYTE *)(v71 + 1) = v99 >> 11;
      v100 = v99 >> 19;
      goto LABEL_216;
    }
    if (v89 < 0)
      v105 = v87;
    else
      v105 = v88;
    v106 = v69;
    while (1)
    {
      v69 = v96;
      v119 = (*(_QWORD *)(v96 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v96 + 16) & 0xFFFFFFFFFFFFLL);
      if (v105 > v119)
      {
        v120 = (unint64_t)(v71 - v95) >> 3;
        if (!v71)
          LODWORD(v120) = 0;
        *(_WORD *)v90 = v120;
        *(_BYTE *)(v90 + 2) = BYTE2(v120);
        v121 = v106 - pas_compact_heap_reservation_base;
        *(_BYTE *)v71 = (unint64_t)(v106 - pas_compact_heap_reservation_base) >> 3;
        *(_BYTE *)(v71 + 1) = v121 >> 11;
        *(_BYTE *)(v71 + 2) = v121 >> 19;
        v122 = pas_compact_heap_reservation_base;
        if ((v89 & 0x80000000) == 0)
        {
          while (1)
          {
            v123 = v71;
            v124 = *(unsigned __int16 *)(v71 + 3) | ((unint64_t)*(unsigned __int8 *)(v71 + 5) << 16);
            v71 = pas_compact_heap_reservation_base + 8 * v124;
            if (!v124 || v71 == 0)
              break;
            v105 = (*(_QWORD *)(v71 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v71 + 16) & 0xFFFFFFFFFFFFLL);
            if (v119 > v105)
            {
              v126 = (_BYTE *)(v123 + 3);
              goto LABEL_172;
            }
          }
          v136 = (_BYTE *)(v123 + 3);
LABEL_214:
          *v136 = (unint64_t)(v96 - pas_compact_heap_reservation_base) >> 3;
          v136[1] = (unint64_t)(v96 - v122) >> 11;
          v136[2] = (unint64_t)(v96 - v122) >> 19;
          v137 = v123 - pas_compact_heap_reservation_base;
          *(_BYTE *)v96 = (unint64_t)(v123 - pas_compact_heap_reservation_base) >> 3;
          *(_BYTE *)(v96 + 1) = v137 >> 11;
          v100 = v137 >> 19;
LABEL_215:
          v71 = v69;
LABEL_216:
          *(_BYTE *)(v71 + 2) = v100;
          goto LABEL_217;
        }
        do
        {
          v123 = v71;
          v127 = *(unsigned __int16 *)(v71 + 6) | ((unint64_t)*(unsigned __int8 *)(v71 + 8) << 16);
          v71 = pas_compact_heap_reservation_base + 8 * v127;
          if (v127)
            v128 = v71 == 0;
          else
            v128 = 1;
          if (v128)
          {
            v136 = (_BYTE *)(v123 + 6);
            goto LABEL_214;
          }
          v105 = (*(_QWORD *)(v71 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v71 + 16) & 0xFFFFFFFFFFFFLL);
        }
        while (v119 <= v105);
        v126 = (_BYTE *)(v123 + 6);
LABEL_172:
        v114 = v96 - pas_compact_heap_reservation_base;
        *v126 = (unint64_t)(v96 - pas_compact_heap_reservation_base) >> 3;
        v126[1] = v114 >> 11;
        v126[2] = v114 >> 19;
        v115 = v123 - pas_compact_heap_reservation_base;
        *(_BYTE *)v96 = v115 >> 3;
        *(_BYTE *)(v96 + 1) = v115 >> 11;
        *(_BYTE *)(v96 + 2) = v115 >> 19;
        v95 = pas_compact_heap_reservation_base;
      }
      v90 = v96 + 6;
      if (v89 < 0)
        v116 = 3;
      else
        v116 = 6;
      if (v89 < 0)
        v90 = v96 + 3;
      v117 = *(unsigned __int16 *)(v96 + v116) | ((unint64_t)*(unsigned __int8 *)(v96 + v116 + 2) << 16);
      v96 = v95 + 8 * v117;
      if (v117)
        v118 = v96 == 0;
      else
        v118 = 1;
      v106 = v69;
      if (v118)
        goto LABEL_141;
    }
  }
  v101 = (unint64_t)(v83 - v6) >> 3;
  if (!v83)
    LODWORD(v101) = 0;
  *v84 = v101;
  *((_BYTE *)v84 + 2) = BYTE2(v101);
  if (v83)
  {
    v102 = (unint64_t)&v81[-pas_compact_heap_reservation_base] >> 3;
    if (!v81)
      v102 = 0;
    *(_WORD *)v83 = v102;
    v100 = v102 >> 16;
    goto LABEL_216;
  }
LABEL_217:
  v138 = 0;
  *((_QWORD *)v11 + 2) = v10;
  *((_QWORD *)v11 + 3) = v23;
  *((_QWORD *)v11 + 4) = v28;
  *(_QWORD *)v11 = 0;
  *((_BYTE *)v11 + 8) = 0;
  v139 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16);
  v140 = 1;
  if (!v139)
  {
    v142 = a1;
    goto LABEL_222;
  }
  v141 = pas_compact_heap_reservation_base + 8 * v139;
  v142 = a1;
  if (!v141)
    goto LABEL_222;
  v143 = *(_QWORD *)(v141 + 16) & 0xFFFFFFFFFFFFLL;
  if ((*(_QWORD *)(v141 + 24) & 0xFFFFFFFFFFFFLL) - v143 >= v23 - v10)
  {
    LOBYTE(v140) = 1;
    v138 = v141;
    while (1)
    {
      v142 = (unsigned __int16 *)(v138 + 6);
      if (v143 <= v10)
        v147 = 6;
      else
        v147 = 3;
      if (v143 > v10)
        v142 = (unsigned __int16 *)(v138 + 3);
      v140 = (v143 > v10) & v140;
      v148 = *(unsigned __int16 *)(v138 + v147) | ((unint64_t)*(unsigned __int8 *)(v138 + v147 + 2) << 16);
      v141 = pas_compact_heap_reservation_base + 8 * v148;
      if (!v148 || v141 == 0)
        break;
      v143 = *(_QWORD *)(v141 + 16) & 0xFFFFFFFFFFFFLL;
      v144 = v138;
      v138 = v141;
      if ((*(_QWORD *)(v141 + 24) & 0xFFFFFFFFFFFFLL) - v143 < v23 - v10)
        goto LABEL_237;
    }
LABEL_222:
    v145 = (unint64_t)(v138 - pas_compact_heap_reservation_base) >> 3;
    if (!v138)
      LODWORD(v145) = 0;
    *v11 = v145;
    *((_BYTE *)v11 + 2) = BYTE2(v145);
    v146 = (unint64_t)v11 - pas_compact_heap_reservation_base;
    *(_BYTE *)v142 = ((unint64_t)v11 - pas_compact_heap_reservation_base) >> 3;
    *((_BYTE *)v142 + 1) = v146 >> 11;
    *((_BYTE *)v142 + 2) = v146 >> 19;
    if (!v140)
      return;
    goto LABEL_262;
  }
  v144 = 0;
  LOBYTE(v140) = 1;
  v142 = a1;
LABEL_237:
  v150 = v143 != v10;
  if (v143 < v10)
    v150 = -1;
  v151 = (unint64_t)(v144 - pas_compact_heap_reservation_base) >> 3;
  if (!v144)
    LODWORD(v151) = 0;
  *v11 = v151;
  *((_BYTE *)v11 + 2) = BYTE2(v151);
  v152 = (unint64_t)v11 - pas_compact_heap_reservation_base;
  *(_BYTE *)v142 = ((unint64_t)v11 - pas_compact_heap_reservation_base) >> 3;
  *((_BYTE *)v142 + 1) = v152 >> 11;
  *((_BYTE *)v142 + 2) = v152 >> 19;
  v153 = v141 - pas_compact_heap_reservation_base;
  if (v150 >= 0)
    v154 = v140;
  else
    v154 = 0;
  v155 = 6;
  if (v150 < 0)
    v156 = 3;
  else
    v156 = 6;
  if (v150 < 0)
    v157 = (unsigned __int16 *)((char *)v11 + 3);
  else
    v157 = v11 + 3;
  *((_BYTE *)v11 + v156) = v153 >> 3;
  *((_BYTE *)v157 + 1) = v153 >> 11;
  *((_BYTE *)v157 + 2) = v153 >> 19;
  v158 = pas_compact_heap_reservation_base;
  if (v150 >= 0)
    v159 = (unsigned __int16 *)((char *)v11 + 3);
  else
    v159 = v11 + 3;
  if (v150 < 0)
  {
    v160 = v141 + 6;
  }
  else
  {
    v155 = 3;
    v160 = v141 + 3;
  }
  *(_BYTE *)v141 = ((unint64_t)v11 - pas_compact_heap_reservation_base) >> 3;
  *(_BYTE *)(v141 + 1) = ((unint64_t)v11 - v158) >> 11;
  *(_BYTE *)(v141 + 2) = ((unint64_t)v11 - v158) >> 19;
  v161 = *(unsigned __int16 *)(v141 + v155) | ((unint64_t)*(unsigned __int8 *)(v141 + v155 + 2) << 16);
  v162 = pas_compact_heap_reservation_base;
  v163 = pas_compact_heap_reservation_base + 8 * v161;
  if ((_DWORD)v161)
    v164 = v163 == 0;
  else
    v164 = 1;
  if (v164)
  {
LABEL_261:
    *v159 = 0;
    *((_BYTE *)v159 + 2) = 0;
    if ((v154 & 1) == 0)
      return;
LABEL_262:
    v165 = (unint64_t)v11 - pas_compact_heap_reservation_base;
LABEL_430:
    *((_BYTE *)a1 + 3) = v165 >> 3;
    *((_BYTE *)a1 + 4) = v165 >> 11;
    *((_BYTE *)a1 + 5) = v165 >> 19;
    return;
  }
  v166 = v161;
  v167 = v11;
  while (1)
  {
    v172 = *(_QWORD *)(v163 + 16) & 0xFFFFFFFFFFFFLL;
    v173 = v172 >= v10;
    v174 = v172 != v10;
    if (!v173)
      v174 = -1;
    if (v150 >= 0)
      v174 = -v174;
    if (v174 >= 1)
      break;
LABEL_267:
    v141 = v163;
    v160 = v163 + 6;
    v169 = v163 + 3;
    if (v150 >= 0)
      v170 = 3;
    else
      v170 = 6;
    if (v150 >= 0)
      v160 = v169;
    v161 = *(unsigned __int16 *)(v141 + v170) | ((unint64_t)*(unsigned __int8 *)(v141 + v170 + 2) << 16);
    v163 = v162 + 8 * v161;
    v166 = v161;
    if ((_DWORD)v161)
      v171 = v163 == 0;
    else
      v171 = 1;
    if (v171)
      goto LABEL_261;
  }
  *(_BYTE *)v159 = v166;
  *((_BYTE *)v159 + 1) = BYTE1(v161);
  *((_BYTE *)v159 + 2) = BYTE2(v161);
  v175 = ((unint64_t)v167 - pas_compact_heap_reservation_base) >> 3;
  if (!v167)
    LODWORD(v175) = 0;
  *(_WORD *)v163 = v175;
  *(_BYTE *)(v163 + 2) = BYTE2(v175);
  if (v150 < 0)
  {
    while (1)
    {
      v167 = (unsigned __int16 *)v163;
      v176 = *(unsigned __int16 *)(v163 + 3) | ((unint64_t)*(unsigned __int8 *)(v163 + 5) << 16);
      v163 = pas_compact_heap_reservation_base + 8 * v176;
      if (!(_DWORD)v176 || v163 == 0)
        break;
      if ((*(_QWORD *)(v163 + 16) & 0xFFFFFFFFFFFFuLL) <= v10)
      {
        v159 = (unsigned __int16 *)((char *)v167 + 3);
LABEL_263:
        v154 = 0;
        *(_WORD *)v160 = v176;
        *(_BYTE *)(v160 + 2) = BYTE2(v176);
        if (v141)
          v168 = (unint64_t)(v141 - pas_compact_heap_reservation_base) >> 3;
        else
          LODWORD(v168) = 0;
        *(_WORD *)v163 = v168;
        *(_BYTE *)(v163 + 2) = BYTE2(v168);
        v162 = pas_compact_heap_reservation_base;
        goto LABEL_267;
      }
    }
  }
  else
  {
    while (1)
    {
      v167 = (unsigned __int16 *)v163;
      v176 = *(unsigned __int16 *)(v163 + 6) | ((unint64_t)*(unsigned __int8 *)(v163 + 8) << 16);
      v163 = pas_compact_heap_reservation_base + 8 * v176;
      if (!(_DWORD)v176 || v163 == 0)
        break;
      if ((*(_QWORD *)(v163 + 16) & 0xFFFFFFFFFFFFuLL) >= v10)
      {
        v159 = v167 + 3;
        goto LABEL_263;
      }
    }
  }
LABEL_464:
  *(_WORD *)v160 = 0;
  *(_BYTE *)(v160 + 2) = 0;
}

void remove_node(unint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int16 *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v60;
  unint64_t v61;
  BOOL v62;
  _BYTE *v63;
  unint64_t v64;

  v2 = *(unsigned __int16 *)(a1 + 3) | ((unint64_t)*(unsigned __int8 *)(a1 + 5) << 16);
  v3 = pas_compact_heap_reservation_base;
  if ((_DWORD)v2)
    v4 = pas_compact_heap_reservation_base + 8 * v2;
  else
    v4 = 0;
  if ((unsigned __int16 *)v4 == a2)
  {
    v5 = a2[3] | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 16);
    v6 = pas_compact_heap_reservation_base + 8 * v5;
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = 0;
      v9 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16);
      if (v9)
      {
        v10 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v9);
        if (v10)
        {
          v11 = a2;
          do
          {
            v12 = v10[3] | ((unint64_t)*((unsigned __int8 *)v10 + 8) << 16);
            if (v12)
              v13 = v11 == (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v12);
            else
              v13 = 0;
            if (!v13)
            {
              v8 = v10;
              goto LABEL_29;
            }
            v11 = v10;
            v14 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 2) << 16);
            v10 = (unsigned __int16 *)(pas_compact_heap_reservation_base + 8 * v14);
            if (v14)
              v15 = v10 == 0;
            else
              v15 = 1;
          }
          while (!v15);
          v8 = 0;
        }
      }
    }
    else
    {
      do
      {
        v8 = (unsigned __int16 *)v6;
        v16 = *(unsigned __int16 *)(v6 + 3) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 16);
        v6 = pas_compact_heap_reservation_base + 8 * v16;
        if (v16)
          v17 = v6 == 0;
        else
          v17 = 1;
      }
      while (!v17);
    }
LABEL_29:
    if (v8)
      v18 = ((unint64_t)v8 - pas_compact_heap_reservation_base) >> 3;
    else
      LODWORD(v18) = 0;
    *(_WORD *)(a1 + 3) = v18;
    *(_BYTE *)(a1 + 5) = BYTE2(v18);
    v3 = pas_compact_heap_reservation_base;
  }
  v19 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16);
  if ((_DWORD)v19)
    v20 = v3 + 8 * v19;
  else
    v20 = 0;
  v21 = *(unsigned __int16 *)((char *)a2 + 3) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 16);
  v22 = v3 + 8 * v21;
  if ((_DWORD)v21)
    v23 = v3 + 8 * v21;
  else
    v23 = 0;
  v24 = a2[3] | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 16);
  v25 = v3 + 8 * v24;
  if ((_DWORD)v24)
    v26 = v3 + 8 * v24;
  else
    v26 = 0;
  if (v20)
  {
    v27 = *(unsigned __int16 *)(v20 + 3) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 16);
    if ((_DWORD)v27)
      v28 = (unsigned __int16 *)(v3 + 8 * v27);
    else
      v28 = 0;
    if (v28 == a2)
      a1 = v20 + 3;
    else
      a1 = v20 + 6;
  }
  if (v23)
  {
    if (!v26)
    {
      *(_BYTE *)a1 = (unint64_t)(v23 - v3) >> 3;
      *(_BYTE *)(a1 + 1) = (unint64_t)(v23 - v3) >> 11;
      *(_BYTE *)(a1 + 2) = (unint64_t)(v23 - v3) >> 19;
      v45 = (v20 - pas_compact_heap_reservation_base) >> 3;
      if (!v20)
        v45 = 0;
      *(_WORD *)v23 = v45;
      v42 = v45 >> 16;
      goto LABEL_115;
    }
    v29 = (*(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v23 + 16) & 0xFFFFFFFFFFFFLL);
    v30 = (*(_QWORD *)(v26 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v26 + 16) & 0xFFFFFFFFFFFFLL);
    if (v29 < v30)
      v31 = -1;
    else
      v31 = v29 != v30;
    if (v31 < 0)
      v22 = v26;
    else
      v22 = v23;
    if (v31 < 0)
      v25 = v23;
    else
      v25 = v26;
    v32 = v22 + 6;
    v33 = 3;
    if (v31 < 0)
      v32 = v22 + 3;
    else
      v33 = 6;
    v34 = v22 - v3;
    *(_BYTE *)a1 = v34 >> 3;
    *(_BYTE *)(a1 + 1) = v34 >> 11;
    *(_BYTE *)(a1 + 2) = v34 >> 19;
    v35 = (v20 - pas_compact_heap_reservation_base) >> 3;
    if (!v20)
      LODWORD(v35) = 0;
    *(_WORD *)v22 = v35;
    *(_BYTE *)(v22 + 2) = BYTE2(v35);
    v36 = *(unsigned __int16 *)(v22 + v33) | ((unint64_t)*(unsigned __int8 *)(v22 + v33 + 2) << 16);
    v37 = pas_compact_heap_reservation_base;
    v38 = pas_compact_heap_reservation_base + 8 * v36;
    if (v36)
      v39 = v38 == 0;
    else
      v39 = 1;
    if (v39)
    {
LABEL_70:
      v40 = (unint64_t)(v25 - v37) >> 3;
      if (!v25)
        LODWORD(v40) = 0;
      *(_WORD *)v32 = v40;
      *(_BYTE *)(v32 + 2) = BYTE2(v40);
      v41 = v22 - pas_compact_heap_reservation_base;
      *(_BYTE *)v25 = (unint64_t)(v22 - pas_compact_heap_reservation_base) >> 3;
      *(_BYTE *)(v25 + 1) = v41 >> 11;
      v42 = v41 >> 19;
      goto LABEL_116;
    }
    if (v31 < 0)
      v46 = v29;
    else
      v46 = v30;
    v47 = v22;
    while (1)
    {
      v22 = v38;
      v53 = (*(_QWORD *)(v38 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v38 + 16) & 0xFFFFFFFFFFFFLL);
      if (v46 > v53)
      {
        v54 = (unint64_t)(v25 - v37) >> 3;
        if (!v25)
          LODWORD(v54) = 0;
        *(_WORD *)v32 = v54;
        *(_BYTE *)(v32 + 2) = BYTE2(v54);
        v55 = v47 - pas_compact_heap_reservation_base;
        *(_BYTE *)v25 = (unint64_t)(v47 - pas_compact_heap_reservation_base) >> 3;
        *(_BYTE *)(v25 + 1) = v55 >> 11;
        *(_BYTE *)(v25 + 2) = v55 >> 19;
        v56 = pas_compact_heap_reservation_base;
        if ((v31 & 0x80000000) == 0)
        {
          while (1)
          {
            v57 = v25;
            v58 = *(unsigned __int16 *)(v25 + 3) | ((unint64_t)*(unsigned __int8 *)(v25 + 5) << 16);
            v25 = pas_compact_heap_reservation_base + 8 * v58;
            if (!v58 || v25 == 0)
              break;
            v46 = (*(_QWORD *)(v25 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v25 + 16) & 0xFFFFFFFFFFFFLL);
            if (v53 > v46)
            {
              v60 = (_BYTE *)(v57 + 3);
              goto LABEL_86;
            }
          }
          v63 = (_BYTE *)(v57 + 3);
LABEL_114:
          *v63 = (unint64_t)(v38 - pas_compact_heap_reservation_base) >> 3;
          v63[1] = (unint64_t)(v38 - v56) >> 11;
          v63[2] = (unint64_t)(v38 - v56) >> 19;
          v64 = v57 - pas_compact_heap_reservation_base;
          *(_BYTE *)v38 = (unint64_t)(v57 - pas_compact_heap_reservation_base) >> 3;
          *(_BYTE *)(v38 + 1) = v64 >> 11;
          v42 = v64 >> 19;
LABEL_115:
          v25 = v22;
LABEL_116:
          *(_BYTE *)(v25 + 2) = v42;
          goto LABEL_117;
        }
        do
        {
          v57 = v25;
          v61 = *(unsigned __int16 *)(v25 + 6) | ((unint64_t)*(unsigned __int8 *)(v25 + 8) << 16);
          v25 = pas_compact_heap_reservation_base + 8 * v61;
          if (v61)
            v62 = v25 == 0;
          else
            v62 = 1;
          if (v62)
          {
            v63 = (_BYTE *)(v57 + 6);
            goto LABEL_114;
          }
          v46 = (*(_QWORD *)(v25 + 24) & 0xFFFFFFFFFFFFLL) - (*(_QWORD *)(v25 + 16) & 0xFFFFFFFFFFFFLL);
        }
        while (v53 <= v46);
        v60 = (_BYTE *)(v57 + 6);
LABEL_86:
        v48 = v38 - pas_compact_heap_reservation_base;
        *v60 = (unint64_t)(v38 - pas_compact_heap_reservation_base) >> 3;
        v60[1] = v48 >> 11;
        v60[2] = v48 >> 19;
        v49 = v57 - pas_compact_heap_reservation_base;
        *(_BYTE *)v38 = v49 >> 3;
        *(_BYTE *)(v38 + 1) = v49 >> 11;
        *(_BYTE *)(v38 + 2) = v49 >> 19;
        v37 = pas_compact_heap_reservation_base;
      }
      v32 = v38 + 6;
      if (v31 < 0)
        v50 = 3;
      else
        v50 = 6;
      if (v31 < 0)
        v32 = v22 + 3;
      v51 = *(unsigned __int16 *)(v22 + v50) | ((unint64_t)*(unsigned __int8 *)(v22 + v50 + 2) << 16);
      v38 = v37 + 8 * v51;
      if (v51)
        v52 = v38 == 0;
      else
        v52 = 1;
      v47 = v22;
      if (v52)
        goto LABEL_70;
    }
  }
  v43 = (unint64_t)(v26 - v3) >> 3;
  if (!v26)
    LODWORD(v43) = 0;
  *(_WORD *)a1 = v43;
  *(_BYTE *)(a1 + 2) = BYTE2(v43);
  if (v26)
  {
    v44 = (v20 - pas_compact_heap_reservation_base) >> 3;
    if (!v20)
      v44 = 0;
    *(_WORD *)v26 = v44;
    v42 = v44 >> 16;
    goto LABEL_116;
  }
LABEL_117:
  pas_utility_heap_deallocate((unint64_t)a2);
}

uint64_t insert_node(unsigned __int16 *a1, __int128 *a2)
{
  int v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  BOOL v46;
  int v47;
  unint64_t v48;
  unint64_t v49;

  v4 = 1;
  result = pas_utility_heap_try_allocate_with_alignment(40, 1uLL, (uint64_t)"pas_fast_large_free_heap_node");
  v6 = *a2;
  *(_QWORD *)(result + 32) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(result + 16) = v6;
  v7 = *(_QWORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)result = 0;
  v9 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16);
  v10 = pas_compact_heap_reservation_base + 8 * v9;
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
  {
    v12 = 0;
    v13 = a1;
    goto LABEL_7;
  }
  v16 = v7 & 0xFFFFFFFFFFFFLL;
  v17 = (v8 & 0xFFFFFFFFFFFFLL) - v16;
  v18 = *(_QWORD *)(v10 + 16) & 0xFFFFFFFFFFFFLL;
  if ((*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFLL) - v18 >= v17)
  {
    LOBYTE(v4) = 1;
    v12 = pas_compact_heap_reservation_base + 8 * v9;
    while (1)
    {
      v13 = (_BYTE *)(v12 + 6);
      if (v18 <= v16)
        v20 = 6;
      else
        v20 = 3;
      if (v18 > v16)
        v13 = (_BYTE *)(v12 + 3);
      v4 = (v18 > v16) & v4;
      v21 = *(unsigned __int16 *)(v12 + v20) | ((unint64_t)*(unsigned __int8 *)(v12 + v20 + 2) << 16);
      v10 = pas_compact_heap_reservation_base + 8 * v21;
      if (!v21 || v10 == 0)
        break;
      v18 = *(_QWORD *)(v10 + 16) & 0xFFFFFFFFFFFFLL;
      v19 = v12;
      v12 = v10;
      if ((*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFLL) - v18 < v17)
        goto LABEL_24;
    }
LABEL_7:
    v14 = (unint64_t)(v12 - pas_compact_heap_reservation_base) >> 3;
    if (!v12)
      LODWORD(v14) = 0;
    *(_WORD *)result = v14;
    *(_BYTE *)(result + 2) = BYTE2(v14);
    v15 = result - pas_compact_heap_reservation_base;
    *v13 = (unint64_t)(result - pas_compact_heap_reservation_base) >> 3;
    v13[1] = v15 >> 11;
    v13[2] = v15 >> 19;
    if (!v4)
      return result;
LABEL_48:
    v38 = (unint64_t)(result - pas_compact_heap_reservation_base) >> 3;
    if (!result)
      LODWORD(v38) = 0;
    *(unsigned __int16 *)((char *)a1 + 3) = v38;
    *((_BYTE *)a1 + 5) = BYTE2(v38);
    return result;
  }
  v19 = 0;
  LOBYTE(v4) = 1;
  v13 = a1;
LABEL_24:
  v23 = v18 != v16;
  if (v18 < v16)
    v23 = -1;
  v24 = (unint64_t)(v19 - pas_compact_heap_reservation_base) >> 3;
  if (!v19)
    LODWORD(v24) = 0;
  *(_WORD *)result = v24;
  *(_BYTE *)(result + 2) = BYTE2(v24);
  v25 = result - pas_compact_heap_reservation_base;
  *v13 = (unint64_t)(result - pas_compact_heap_reservation_base) >> 3;
  v13[1] = v25 >> 11;
  v13[2] = v25 >> 19;
  v26 = v10 - pas_compact_heap_reservation_base;
  if (v23 >= 0)
    v27 = v4;
  else
    v27 = 0;
  v28 = 3;
  if (v23 < 0)
    v29 = 3;
  else
    v29 = 6;
  if (v23 < 0)
    v30 = result + 3;
  else
    v30 = result + 6;
  *(_BYTE *)(result + v29) = v26 >> 3;
  *(_BYTE *)(v30 + 1) = v26 >> 11;
  *(_BYTE *)(v30 + 2) = v26 >> 19;
  if (v23 >= 0)
    v31 = result + 3;
  else
    v31 = result + 6;
  v32 = v10 + 3;
  if (v23 < 0)
  {
    v28 = 6;
    v32 = v10 + 6;
  }
  v33 = result - pas_compact_heap_reservation_base;
  *(_BYTE *)v10 = (unint64_t)(result - pas_compact_heap_reservation_base) >> 3;
  *(_BYTE *)(v10 + 1) = v33 >> 11;
  *(_BYTE *)(v10 + 2) = v33 >> 19;
  v34 = *(unsigned __int16 *)(v10 + v28) | ((unint64_t)*(unsigned __int8 *)(v10 + v28 + 2) << 16);
  v35 = pas_compact_heap_reservation_base;
  v36 = pas_compact_heap_reservation_base + 8 * v34;
  if ((_DWORD)v34)
    v37 = v36 == 0;
  else
    v37 = 1;
  if (v37)
  {
LABEL_47:
    *(_WORD *)v31 = 0;
    *(_BYTE *)(v31 + 2) = 0;
    if ((v27 & 1) == 0)
      return result;
    goto LABEL_48;
  }
  v39 = v34;
  v40 = result;
  while (1)
  {
    v45 = *(_QWORD *)(v36 + 16) & 0xFFFFFFFFFFFFLL;
    v46 = v45 >= v16;
    v47 = v45 != v16;
    if (!v46)
      v47 = -1;
    if (v23 >= 0)
      v47 = -v47;
    if (v47 >= 1)
      break;
LABEL_55:
    v10 = v36;
    v32 = v36 + 6;
    v42 = v36 + 3;
    if (v23 >= 0)
      v43 = 3;
    else
      v43 = 6;
    if (v23 >= 0)
      v32 = v42;
    v34 = *(unsigned __int16 *)(v10 + v43) | ((unint64_t)*(unsigned __int8 *)(v10 + v43 + 2) << 16);
    v36 = v35 + 8 * v34;
    v39 = v34;
    if ((_DWORD)v34)
      v44 = v36 == 0;
    else
      v44 = 1;
    if (v44)
      goto LABEL_47;
  }
  *(_BYTE *)v31 = v39;
  *(_BYTE *)(v31 + 1) = BYTE1(v34);
  *(_BYTE *)(v31 + 2) = BYTE2(v34);
  v48 = (unint64_t)(v40 - pas_compact_heap_reservation_base) >> 3;
  if (!v40)
    LODWORD(v48) = 0;
  *(_WORD *)v36 = v48;
  *(_BYTE *)(v36 + 2) = BYTE2(v48);
  if (v23 < 0)
  {
    while (1)
    {
      v40 = v36;
      v49 = *(unsigned __int16 *)(v36 + 3) | ((unint64_t)*(unsigned __int8 *)(v36 + 5) << 16);
      v36 = pas_compact_heap_reservation_base + 8 * v49;
      if (!(_DWORD)v49 || v36 == 0)
        break;
      if ((*(_QWORD *)(v36 + 16) & 0xFFFFFFFFFFFFuLL) <= v16)
      {
        v31 = v40 + 3;
LABEL_51:
        v27 = 0;
        *(_WORD *)v32 = v49;
        *(_BYTE *)(v32 + 2) = BYTE2(v49);
        if (v10)
          v41 = (unint64_t)(v10 - pas_compact_heap_reservation_base) >> 3;
        else
          LODWORD(v41) = 0;
        *(_WORD *)v36 = v41;
        *(_BYTE *)(v36 + 2) = BYTE2(v41);
        v35 = pas_compact_heap_reservation_base;
        goto LABEL_55;
      }
    }
  }
  else
  {
    while (1)
    {
      v40 = v36;
      v49 = *(unsigned __int16 *)(v36 + 6) | ((unint64_t)*(unsigned __int8 *)(v36 + 8) << 16);
      v36 = pas_compact_heap_reservation_base + 8 * v49;
      if (!(_DWORD)v49 || v36 == 0)
        break;
      if ((*(_QWORD *)(v36 + 16) & 0xFFFFFFFFFFFFuLL) >= v16)
      {
        v31 = v40 + 6;
        goto LABEL_51;
      }
    }
  }
  *(_WORD *)v32 = 0;
  *(_BYTE *)(v32 + 2) = 0;
  return result;
}

void table_set_by_index(unint64_t a1, uint64_t a2)
{
  pas_fast_megapage_table_set_by_index(*(_QWORD *)a2, a1, *(_DWORD *)(a2 + 8), 1);
}

void pas_fast_megapage_table_set_by_index(uint64_t a1, unint64_t a2, int a3, int a4)
{
  unsigned int v8;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  if (a4)
  {
LABEL_5:
    if (a2 >> 19)
      goto LABEL_9;
  }
  else
  {
    v8 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v8, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_5;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
    if (a2 >> 19)
      goto LABEL_9;
  }
  if (a3 == 1)
  {
    *(_DWORD *)(a1 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << a2;
    return;
  }
LABEL_9:
  v10 = (_QWORD *)(a1 + 0x10000);
  v11 = *(uint64_t **)(a1 + 0x10000);
  v12 = *v11;
  v13 = v11[1];
  if (*v11 <= a2 && v13 > a2)
  {
    v15 = *v11;
    v16 = *(_QWORD **)(a1 + 0x10000);
  }
  else
  {
    if (v11 == &pas_fast_megapage_table_impl_null)
    {
      v19 = a2 + 1;
      v15 = a2;
    }
    else if (v12 <= a2)
    {
      if (a2 + 1 > 2 * v13 - v12)
        v19 = a2 + 1;
      else
        v19 = 2 * v13 - v12;
      v15 = *v11;
    }
    else
    {
      if (2 * v12 - v13 >= a2)
        v15 = a2;
      else
        v15 = 2 * v12 - v13;
      v19 = v11[1];
    }
    v20 = ((((2 * (v19 - v15) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 31) & 0x3FFFFFFFFFFFFFF8;
    v16 = (_QWORD *)pas_immortal_heap_allocate(v20, (uint64_t)"pas_fast_megapage_table/instance", 0);
    bzero(v16, v20);
    *v16 = v15;
    v16[1] = v15 + ((8 * v20 - 192) >> 1);
    v16[2] = v11;
    v21 = v13 - v12;
    if (v13 > v12)
    {
      v22 = 0;
      do
      {
        v23 = ((2 * v12 - 2 * v15 + v22) >> 3) & 0x1FFFFFFFFFFFFFFCLL;
        *(_DWORD *)((char *)v16 + v23 + 24) = (((*(_DWORD *)((char *)v11 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (v22 & 0x1E)) & 3) << ((2 * v12 - 2 * v15 + v22) & 0x1E)) | *(_DWORD *)((_BYTE *)v16 + v23 + 24) & ~(3 << ((2 * v12 - 2 * v15 + v22) & 0x1E));
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    __dmb(0xBu);
    *v10 = v16;
  }
  *(_DWORD *)((char *)v16 + (((a2 - v15) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) = *(_DWORD *)((_BYTE *)v16
                                                                                         + (((a2 - v15) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                                                         + 24) & ~(3 << (2 * ((a2 - v15) & 0xF))) | (a3 << (2 * ((a2 - v15) & 0xF)));
  if (!a4)
  {
    v17 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v18 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v18 != v17)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

uint64_t fd_stream_vprintf(uint64_t a1, char *__format, va_list a3)
{
  int v5;
  _opaque_pthread_t *i;
  uint64_t result;
  size_t v8;
  char *v9;
  char __str[1024];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a1 + 8);
  for (i = (_opaque_pthread_t *)pas_thread_that_is_crash_logging;
        pas_thread_that_is_crash_logging;
        i = (_opaque_pthread_t *)pas_thread_that_is_crash_logging)
  {
    if (i == pthread_self())
      break;
  }
  result = vsnprintf(__str, 0x400uLL, __format, a3);
  if (result >= 0x3FF)
    v8 = 1023;
  else
    v8 = result;
  if ((_DWORD)v8)
  {
    v9 = __str;
    do
    {
      do
        result = write(v5, v9, v8);
      while (result < 0);
      v9 += result;
      v8 -= result;
    }
    while (v8);
  }
  return result;
}

double pas_free_granules_decommit_after_locking_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t v6;
  unint64_t v7;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a5 + 32);
  v7 = *(_QWORD *)(a5 + 40);
  if (v7 <= v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6 / v7;
    v27 = *(_DWORD *)(*(_QWORD *)(a5 + 8) + 1040);
    v26 = v14;
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v14;
    v16 = -1;
    do
    {
      if (((*(_DWORD *)(a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v13) & 1) != 0)
      {
        if (v16 == -1)
          v16 = v13;
      }
      else if (v16 != -1)
      {
        v17 = *(_QWORD *)(a5 + 40);
        v18 = (*(uint64_t (**)(uint64_t))(a5 + 64))(a2);
        v19 = v18 + *(_QWORD *)(a5 + 40) * v16 + v17 * (v13 - v16);
        v30 = v18 + *(_QWORD *)(a5 + 40) * v16;
        v31 = v19;
        if (v12)
          v20 = 0;
        else
          v20 = a4;
        v32 = v20;
        v33 = v27;
        *(_QWORD *)&result = pas_deferred_decommit_log_add_already_locked(a3, &v30, a6).n128_u64[0];
        v16 = -1;
        v12 = 1;
      }
      ++v13;
    }
    while (v15 != v13);
    if (v16 != -1)
    {
      v22 = *(_QWORD *)(a5 + 40);
      v23 = (*(uint64_t (**)(uint64_t))(a5 + 64))(a2);
      v24 = v23 + *(_QWORD *)(a5 + 40) * v16 + v22 * (v26 - v16);
      v30 = v23 + *(_QWORD *)(a5 + 40) * v16;
      v31 = v24;
      if (v12)
        v25 = 0;
      else
        v25 = a4;
      v32 = v25;
      v33 = v27;
      *(_QWORD *)&result = pas_deferred_decommit_log_add_already_locked(a3, &v30, a6).n128_u64[0];
    }
  }
  return result;
}

unint64_t pas_heap_create(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;

  v8 = pas_immortal_heap_allocate(0x58uLL, (uint64_t)"pas_heap", 0);
  *(_QWORD *)(v8 + 80) = 0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  v9 = *a1;
  *(_QWORD *)v8 = a4;
  *(_QWORD *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 58) = 0;
  *(_WORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 38) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)(v8 + 64) = v9;
  *(_QWORD *)(v8 + 72) = a1;
  *(_BYTE *)(v8 + 83) = a2 << 6;
  *(_BYTE *)(v8 + 83) = (a2 << 6) | *(_BYTE *)(a3 + 8) & 0x3F;
  if (*(_BYTE *)(a3 + 1136) && !pas_probabilistic_guard_malloc_is_initialized)
  {
    pas_probabilistic_guard_malloc_is_initialized = 1;
    if (pas_mock_fast_random)
    {
      v11 = pas_mock_fast_random();
    }
    else
    {
      v10 = pas_fast_random_state ^ (pas_fast_random_state << 13) ^ ((pas_fast_random_state ^ (pas_fast_random_state << 13)) >> 17);
      v11 = v10 ^ (32 * v10);
      pas_fast_random_state = v11;
    }
    HIDWORD(v12) = 652835029 * v11;
    LODWORD(v12) = 652835029 * v11;
    if ((v12 >> 3) < 0x418938)
      pas_probabilistic_guard_malloc_random = arc4random_uniform(0x3E8u) + 4000;
    else
      pas_probabilistic_guard_malloc_can_use = 0;
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (pas_all_heaps_first_heap)
    v13 = (unint64_t)(pas_all_heaps_first_heap - pas_compact_heap_reservation_base) >> 3;
  else
    LODWORD(v13) = 0;
  *(_WORD *)(v8 + 80) = v13;
  *(_BYTE *)(v8 + 82) = BYTE2(v13);
  pas_all_heaps_first_heap = v8;
  ++pas_all_heaps_count;
  return v8;
}

void pas_heap_compute_summary(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t (*v8)(__int128 *, uint64_t);
  int64x2_t v9;
  int64x2_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  uint64_t v19;
  int64x2_t v20[5];
  uint64_t v21;
  _QWORD v22[3];

  *(_QWORD *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (!a2)
  {
    v6 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v6, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  pas_segregated_heap_compute_summary(a1, (uint64_t)v20);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v22[0] = a1 + 40;
  v22[1] = compute_summary_live_object_callback;
  v22[2] = &v14;
  pas_large_map_for_each_entry((uint64_t (*)(_QWORD *, uint64_t))for_each_live_object_entry_callback, (uint64_t)v22);
  if (*(_BYTE *)(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F] + 1024))
    v8 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback;
  else
    v8 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback_without_physical_sharing;
  pas_fast_large_free_heap_for_each_free(a1 + 40, v8, (uint64_t)&v14);
  v9 = vaddq_s64(v15, v20[1]);
  *(int64x2_t *)a3 = vaddq_s64(v14, v20[0]);
  *(int64x2_t *)(a3 + 16) = v9;
  v10 = vaddq_s64(v17, v20[3]);
  v11 = v19 + v21;
  *(int64x2_t *)(a3 + 32) = vaddq_s64(v16, v20[2]);
  *(int64x2_t *)(a3 + 48) = v10;
  *(int64x2_t *)(a3 + 64) = vaddq_s64(v18, v20[4]);
  *(_QWORD *)(a3 + 80) = v11;
  if (!a2)
  {
    v12 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v13 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v13 != v12)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

uint64_t pas_heap_config_activate(uint64_t a1)
{
  unint64_t v2;
  int v3;
  void (*v5)(void);

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v2 = *(unsigned int *)(a1 + 8);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v3 = pas_heap_config_kind_is_active_bitvector[v2 >> 5];
  if ((v3 & (1 << v2)) != 0)
    return (v3 & (1 << v2)) == 0;
  pas_heap_config_kind_is_active_bitvector[v2 >> 5] = v3 | (1 << v2);
  v5 = *(void (**)(void))(a1 + 16);
  if (!v5)
    return (v3 & (1 << v2)) == 0;
  v5();
  return 1;
}

uint64_t pas_heap_config_utils_for_each_shared_page_directory(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BOOL8 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(_QWORD *)(v6 + 104);
  if (v7)
  {
    v8 = v7 - 24;
    v9 = 32 * *(unsigned int *)(v7 + 4);
    while (1)
    {
      v10 = v9 - 32;
      if (!v9)
        break;
      v11 = a2(v8 + v9, a3);
      v9 = v10;
      if ((v11 & 1) == 0)
        return 0;
    }
    v6 = *(_QWORD *)(v5 + 32);
  }
  v14 = *(_QWORD *)(v6 + 216);
  if (!v14)
    return 1;
  v15 = v14 - 24;
  v16 = 32 * *(unsigned int *)(v14 + 4);
  do
  {
    v17 = v16 - 32;
    v12 = v16 == 0;
    if (!v16)
      break;
    v18 = a2(v15 + v16, a3);
    v16 = v17;
  }
  while ((v18 & 1) != 0);
  return v12;
}

uint64_t pas_heap_config_utils_for_each_shared_page_directory_remote(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t), uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 > v7 || v7 >= *(_QWORD *)(a1 + 56) + v8)
  {
    v7 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    if (v7)
      goto LABEL_6;
    return 0;
  }
  if (v7 >= 8)
    v7 = v7 - v8 + *(_QWORD *)(a1 + 48);
  if (!v7)
    return 0;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 > v9 || v9 >= *(_QWORD *)(a1 + 56) + v10)
  {
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(v7 + 32), 224, *(_QWORD *)(a1 + 104));
  }
  else if (v9 >= 8)
  {
    v9 = v9 - v10 + *(_QWORD *)(a1 + 48);
  }
  if (!v9)
    return v9;
  v12 = *(_QWORD *)(v9 + 104);
  if (v12 >= 8)
    v12 = *(_QWORD *)(a1 + 48) + v12 - *(_QWORD *)(a1 + 40);
  if (v12)
  {
    v13 = v12 - 24;
    v14 = 32 * *(unsigned int *)(v12 + 4);
    while (1)
    {
      v15 = v14 - 32;
      if (!v14)
        break;
      v16 = a3(a1, v13 + v14, a4);
      v14 = v15;
      if ((v16 & 1) == 0)
        return 0;
    }
  }
  v17 = *(_QWORD *)(v9 + 216);
  if (v17 >= 8)
    v17 = *(_QWORD *)(a1 + 48) + v17 - *(_QWORD *)(a1 + 40);
  if (v17)
  {
    v18 = v17 - 24;
    v19 = 32 * *(unsigned int *)(v17 + 4);
    do
    {
      v20 = v19 - 32;
      v9 = v19 == 0;
      if (!v19)
        break;
      v21 = a3(a1, v18 + v19, a4);
      v19 = v20;
    }
    while ((v21 & 1) != 0);
    return v9;
  }
  return 1;
}

unint64_t *pas_heap_config_utils_prepare_to_enumerate(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  _QWORD v22[7];

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168);
  if (v4 > v5 || v5 >= *(_QWORD *)(a1 + 56) + v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    if (v5)
      goto LABEL_6;
    return 0;
  }
  if (v5 >= 8)
    v5 = v5 - v4 + *(_QWORD *)(a1 + 48);
  if (!v5)
    return 0;
LABEL_6:
  v6 = *(_QWORD *)(v5 + 8 * *(unsigned int *)(a2 + 8));
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 > v6 || v6 >= *(_QWORD *)(a1 + 56) + v7)
  {
    v6 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    if (v6)
      goto LABEL_11;
    return 0;
  }
  if (v6 >= 8)
    v6 = v6 - v7 + *(_QWORD *)(a1 + 48);
  if (!v6)
    return 0;
LABEL_11:
  v8 = *(unint64_t **)(v6 + 1048);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 > (unint64_t)v8 || (unint64_t)v8 >= *(_QWORD *)(a1 + 56) + v9)
  {
    v8 = (unint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(v6 + 1048), 16, *(_QWORD *)(a1 + 104));
    if (v8)
      goto LABEL_16;
    return 0;
  }
  if ((unint64_t)v8 >= 8)
    v8 = (unint64_t *)((char *)v8 + *(_QWORD *)(a1 + 48) - v9);
  if (!v8)
    return 0;
LABEL_16:
  v10 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1 || (v11 = *(_QWORD *)(v10 + 16), (unint64_t)(*(_QWORD *)(v10 + 8) - v11) <= 0x17))
  {
    pas_page_malloc_try_allocate_without_deallocating_padding(48, 1, 0, (uint64_t)v22);
    v11 = 0;
    v12 = v22[0];
    v13 = v22[1] + v22[5] - 24;
    *(_QWORD *)v22[0] = v10;
    *(_QWORD *)(v12 + 8) = v13;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)a1 = v12;
    v10 = v12;
  }
  v14 = v11 + 24;
  v15 = (unint64_t *)(v14 + v10);
  *(_QWORD *)(v10 + 16) = v14;
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  v16 = *v8;
  v17 = *(_QWORD *)(a1 + 40);
  if (v17 <= *v8 && v16 < *(_QWORD *)(a1 + 56) + v17)
  {
    if (v16 >= 8)
      v16 = v16 - v17 + *(_QWORD *)(a1 + 48);
    if (pas_basic_heap_config_enumerator_data_add_page_header_table(v15, a1, v16))
      goto LABEL_24;
    return 0;
  }
  v21 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, *v8, 16, *(_QWORD *)(a1 + 104));
  if (!pas_basic_heap_config_enumerator_data_add_page_header_table(v15, a1, v21))
    return 0;
LABEL_24:
  v18 = v8[1];
  v19 = *(_QWORD *)(a1 + 40);
  if (v19 > v18 || v18 >= *(_QWORD *)(a1 + 56) + v19)
  {
    v18 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v8[1], 16, *(_QWORD *)(a1 + 104));
  }
  else if (v18 >= 8)
  {
    v18 = v18 - v19 + *(_QWORD *)(a1 + 48);
  }
  if (pas_basic_heap_config_enumerator_data_add_page_header_table(v15, a1, v18))
    return v15;
  else
    return 0;
}

uint64_t pas_heap_for_page_config_allocate(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  _OWORD v11[3];

  if (a1 && *(_DWORD *)(a1 + 100) > 1u)
    return pas_utility_heap_try_allocate_with_alignment(a2, 1, a3);
  memset(v11, 0, sizeof(v11));
  os_unfair_lock_assert_owner(&pas_heap_lock);
  initialize_config_0((uint64_t)v11);
  v5 = try_allocate_without_fixing(&pas_compact_bootstrap_free_heap, a2, 8uLL, 0, (unint64_t *)v11);
  v6 = v5;
  v8 = v7;
  if (v5 && pas_allocation_callback)
    pas_allocation_callback(v5, a2, 1, a3, 0);
  if ((v8 & 1) != 0)
  {
    pas_compact_bootstrap_free_heap_num_allocated_object_bytes += a2;
    v9 = pas_compact_bootstrap_free_heap_num_allocated_object_bytes;
    if (pas_compact_bootstrap_free_heap_num_allocated_object_bytes <= (unint64_t)pas_compact_bootstrap_free_heap_num_allocated_object_bytes_peak)
      v9 = pas_compact_bootstrap_free_heap_num_allocated_object_bytes_peak;
    pas_compact_bootstrap_free_heap_num_allocated_object_bytes_peak = v9;
  }
  return v6;
}

unint64_t pas_ensure_heap_slow(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  unsigned int v9;
  unint64_t v11;
  int v12;
  unsigned int v13;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v9, &pas_heap_lock._os_unfair_lock_opaque))
    {
      v11 = a1[1];
      if (v11)
        goto LABEL_5;
      goto LABEL_10;
    }
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
  v11 = a1[1];
  if (v11)
    goto LABEL_5;
LABEL_10:
  v11 = pas_heap_create(a1, a2, a3, a4);
  __dmb(0xAu);
  a1[1] = v11;
LABEL_5:
  v12 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v13 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v13 != v12)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v11;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v11;
}

uint64_t pas_heap_runtime_config_zero_view_cache_capacity()
{
  return 0;
}

unint64_t pas_heap_runtime_config_aggressive_view_cache_capacity(uint64_t a1, uint64_t a2)
{
  return 0x190000uLL / *(_QWORD *)(a2 + 32);
}

unint64_t pas_immortal_heap_allocate_with_manual_alignment(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v22;
  BOOL v23;
  uint64_t v25[7];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v8 = a2 - 1;
  v9 = -a2;
  v10 = (pas_immortal_heap_current + a2 - 1) & -a2;
  v12 = pas_immortal_heap_end >= v10 && pas_immortal_heap_current <= v10 && pas_immortal_heap_end - v10 >= a1;
  if (!v12)
  {
    v13 = pas_immortal_heap_allocation_granule + a1;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v14 = pas_compact_heap_reservation_base;
    if (pas_compact_heap_reservation_base)
    {
      v15 = pas_compact_heap_reservation_available_size;
      v16 = pas_compact_heap_reservation_bump;
    }
    else
    {
      pas_page_malloc_try_allocate_without_deallocating_padding(pas_compact_heap_reservation_size, 1, 0, (uint64_t)v25);
      v16 = pas_compact_heap_reservation_guard_size;
      v14 = v25[0] - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_base = v25[0] - pas_compact_heap_reservation_guard_size;
      v15 = pas_compact_heap_reservation_size - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_available_size = pas_compact_heap_reservation_size
                                                  - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_bump = pas_compact_heap_reservation_guard_size;
    }
    v17 = v14 + v15;
    v18 = v14 + v16;
    v10 = (v18 + v8) & v9;
    v12 = v17 >= v10;
    v19 = v17 - v10;
    if (v12 && v10 >= v18 && v19 >= v13)
    {
      pas_compact_heap_reservation_bump = v13 - v14 + v10;
      v22 = v10 - v18;
    }
    else
    {
      v10 = 0;
      v22 = 0;
    }
    pas_immortal_heap_end = v10 + v13;
    pas_immortal_heap_allocated_external += v22 + v13;
  }
  pas_immortal_heap_current = v10 + a1;
  if (v10)
    v23 = pas_allocation_callback == 0;
  else
    v23 = 1;
  if (!v23)
    pas_allocation_callback(v10, a1, 3, a3, a4);
  pas_immortal_heap_allocated_internal += a1;
  return v10;
}

unint64_t pas_immortal_heap_allocate_with_alignment(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v26[7];

  if (a2 <= 8)
    v7 = 8;
  else
    v7 = a2;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v8 = v7 - 1;
  v9 = -v7;
  v10 = (pas_immortal_heap_current + v7 - 1) & -v7;
  v12 = pas_immortal_heap_end >= v10 && pas_immortal_heap_current <= v10 && pas_immortal_heap_end - v10 >= a1;
  if (!v12)
  {
    v13 = pas_immortal_heap_allocation_granule;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v14 = pas_compact_heap_reservation_base;
    if (pas_compact_heap_reservation_base)
    {
      v15 = pas_compact_heap_reservation_available_size;
      v16 = pas_compact_heap_reservation_bump;
    }
    else
    {
      pas_page_malloc_try_allocate_without_deallocating_padding(pas_compact_heap_reservation_size, 1, 0, (uint64_t)v26);
      v16 = pas_compact_heap_reservation_guard_size;
      v14 = v26[0] - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_base = v26[0] - pas_compact_heap_reservation_guard_size;
      v15 = pas_compact_heap_reservation_size - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_available_size = pas_compact_heap_reservation_size
                                                  - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_bump = pas_compact_heap_reservation_guard_size;
    }
    v10 = 0;
    v17 = v13 + a1;
    v18 = v14 + v15;
    v19 = v14 + v16;
    v20 = (v14 + v16 + v8) & v9;
    v21 = v18 - v20;
    if (v18 < v20)
    {
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v12 = v20 >= v19;
      v23 = v20 - v19;
      if (v12 && v21 >= v17)
      {
        pas_compact_heap_reservation_bump = v17 - v14 + v20;
        v10 = v20;
        v22 = v23;
      }
    }
    pas_immortal_heap_end = v10 + v17;
    pas_immortal_heap_allocated_external += v22 + v17;
  }
  pas_immortal_heap_current = v10 + a1;
  if (v10)
    v24 = pas_allocation_callback == 0;
  else
    v24 = 1;
  if (!v24)
    pas_allocation_callback(v10, a1, 3, a3, a4);
  pas_immortal_heap_allocated_internal += a1;
  return v10;
}

unint64_t pas_immortal_heap_allocate(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v18;
  BOOL v19;
  uint64_t v21[7];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = (pas_immortal_heap_current + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = pas_immortal_heap_end >= v6 && pas_immortal_heap_current <= v6 && pas_immortal_heap_end - v6 >= a1;
  if (!v8)
  {
    v9 = pas_immortal_heap_allocation_granule + a1;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v10 = pas_compact_heap_reservation_base;
    if (pas_compact_heap_reservation_base)
    {
      v11 = pas_compact_heap_reservation_available_size;
      v12 = pas_compact_heap_reservation_bump;
    }
    else
    {
      pas_page_malloc_try_allocate_without_deallocating_padding(pas_compact_heap_reservation_size, 1, 0, (uint64_t)v21);
      v12 = pas_compact_heap_reservation_guard_size;
      v10 = v21[0] - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_base = v21[0] - pas_compact_heap_reservation_guard_size;
      v11 = pas_compact_heap_reservation_size - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_available_size = pas_compact_heap_reservation_size
                                                  - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_bump = pas_compact_heap_reservation_guard_size;
    }
    v13 = v10 + v11;
    v14 = v10 + v12;
    v6 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    v8 = v13 >= v6;
    v15 = v13 - v6;
    if (v8 && v6 >= v14 && v15 >= v9)
    {
      pas_compact_heap_reservation_bump = v9 - v10 + v6;
      v18 = v6 - v14;
    }
    else
    {
      v6 = 0;
      v18 = 0;
    }
    pas_immortal_heap_end = v6 + v9;
    pas_immortal_heap_allocated_external += v18 + v9;
  }
  pas_immortal_heap_current = v6 + a1;
  if (v6)
    v19 = pas_allocation_callback == 0;
  else
    v19 = 1;
  if (!v19)
    pas_allocation_callback(v6, a1, 3, a2, a3);
  pas_immortal_heap_allocated_internal += a1;
  return v6;
}

unint64_t pas_immortal_heap_allocate_with_heap_lock_hold_mode(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v8;
  unint64_t v10;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v22;
  BOOL v23;
  int v24;
  unsigned int v25;
  uint64_t v27[7];

  if (!a4)
  {
    v8 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v8, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v10 = (pas_immortal_heap_current + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = pas_immortal_heap_end >= v10 && pas_immortal_heap_current <= v10 && pas_immortal_heap_end - v10 >= a1;
  if (!v12)
  {
    v13 = pas_immortal_heap_allocation_granule + a1;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v14 = pas_compact_heap_reservation_base;
    if (pas_compact_heap_reservation_base)
    {
      v15 = pas_compact_heap_reservation_available_size;
      v16 = pas_compact_heap_reservation_bump;
    }
    else
    {
      pas_page_malloc_try_allocate_without_deallocating_padding(pas_compact_heap_reservation_size, 1, 0, (uint64_t)v27);
      v16 = pas_compact_heap_reservation_guard_size;
      v14 = v27[0] - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_base = v27[0] - pas_compact_heap_reservation_guard_size;
      v15 = pas_compact_heap_reservation_size - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_available_size = pas_compact_heap_reservation_size
                                                  - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_bump = pas_compact_heap_reservation_guard_size;
    }
    v17 = v14 + v15;
    v18 = v14 + v16;
    v10 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = v17 >= v10;
    v19 = v17 - v10;
    if (v12 && v10 >= v18 && v19 >= v13)
    {
      pas_compact_heap_reservation_bump = v13 - v14 + v10;
      v22 = v10 - v18;
    }
    else
    {
      v10 = 0;
      v22 = 0;
    }
    pas_immortal_heap_end = v10 + v13;
    pas_immortal_heap_allocated_external += v22 + v13;
  }
  pas_immortal_heap_current = v10 + a1;
  if (v10)
    v23 = pas_allocation_callback == 0;
  else
    v23 = 1;
  if (!v23)
    pas_allocation_callback(v10, a1, 3, a2, a3);
  pas_immortal_heap_allocated_internal += a1;
  if (!a4)
  {
    v24 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v25 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v25 != v24)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return v10;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
  return v10;
}

unint64_t pas_immortal_heap_allocate_with_alignment_and_heap_lock_hold_mode(unint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  uint64_t v33[7];

  if (!a5)
  {
    v9 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v9, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  if (a2 <= 8)
    v11 = 8;
  else
    v11 = a2;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v12 = v11 - 1;
  v13 = -v11;
  v14 = (pas_immortal_heap_current + v11 - 1) & -v11;
  v16 = pas_immortal_heap_end >= v14 && pas_immortal_heap_current <= v14 && pas_immortal_heap_end - v14 >= a1;
  if (!v16)
  {
    v17 = pas_immortal_heap_allocation_granule;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v18 = pas_compact_heap_reservation_base;
    if (pas_compact_heap_reservation_base)
    {
      v19 = pas_compact_heap_reservation_available_size;
      v20 = pas_compact_heap_reservation_bump;
    }
    else
    {
      pas_page_malloc_try_allocate_without_deallocating_padding(pas_compact_heap_reservation_size, 1, 0, (uint64_t)v33);
      v20 = pas_compact_heap_reservation_guard_size;
      v18 = v33[0] - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_base = v33[0] - pas_compact_heap_reservation_guard_size;
      v19 = pas_compact_heap_reservation_size - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_available_size = pas_compact_heap_reservation_size
                                                  - pas_compact_heap_reservation_guard_size;
      pas_compact_heap_reservation_bump = pas_compact_heap_reservation_guard_size;
    }
    v14 = 0;
    v21 = v17 + a1;
    v22 = v18 + v19;
    v23 = v18 + v20;
    v24 = (v18 + v20 + v12) & v13;
    v25 = v22 - v24;
    if (v22 < v24)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v16 = v24 >= v23;
      v27 = v24 - v23;
      if (v16 && v25 >= v21)
      {
        pas_compact_heap_reservation_bump = v21 - v18 + v24;
        v14 = v24;
        v26 = v27;
      }
    }
    pas_immortal_heap_end = v14 + v21;
    pas_immortal_heap_allocated_external += v26 + v21;
  }
  pas_immortal_heap_current = v14 + a1;
  if (v14)
    v28 = pas_allocation_callback == 0;
  else
    v28 = 1;
  if (!v28)
    pas_allocation_callback(v14, a1, 3, a3, a4);
  pas_immortal_heap_allocated_internal += a1;
  if (!a5)
  {
    v29 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v30 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v30 != v29)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return v14;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
  return v14;
}

uint64_t pas_large_expendable_memory_allocate(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  __int128 v12;
  __int128 v13;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = pas_large_expendable_memory_head;
  if (!pas_large_expendable_memory_head)
  {
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    initialize_config(&v11);
    v7 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, 33538048, 0x2000000, 0, &v11);
    v6 = v7;
    if (v7 && pas_allocation_callback)
      pas_allocation_callback(v7, 33538048, 0, "pas_large_expendable_memory", 1);
    *(_QWORD *)v6 = pas_large_expendable_memory_head;
    *(_QWORD *)(v6 + 8) = 0x1FF800000000000;
    memset_pattern16((void *)(v6 + 16), &memset_pattern_5, 0x3FF0uLL);
    __dmb(0xAu);
    pas_large_expendable_memory_head = v6;
  }
  result = pas_expendable_memory_try_allocate((unsigned int *)(v6 + 8), v6 + 0x4000, a1, a2, 6, a3);
  if (!result)
  {
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    initialize_config(&v11);
    v9 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, 33538048, 0x2000000, 0, &v11);
    v10 = v9;
    if (v9)
    {
      if (pas_allocation_callback)
        pas_allocation_callback(v9, 33538048, 0, "pas_large_expendable_memory", 1);
    }
    *(_QWORD *)v10 = pas_large_expendable_memory_head;
    *(_QWORD *)(v10 + 8) = 0x1FF800000000000;
    memset_pattern16((void *)(v10 + 16), &memset_pattern_5, 0x3FF0uLL);
    __dmb(0xAu);
    pas_large_expendable_memory_head = v10;
    return pas_expendable_memory_try_allocate((unsigned int *)(v10 + 8), v10 + 0x4000, a1, a2, 6, a3);
  }
  return result;
}

uint64_t pas_large_expendable_memory_commit_if_necessary(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v4 = ((unint64_t)(a1 & 0x1FFFFFF) - 16392) >> 14;
  v5 = ((unint64_t)(a1 & 0x1FFFFFF) + a2 - 16385) >> 14;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = (uint64_t *)((a1 & 0xFFFFFFFFFE000000) + 8 * v4 + 16);
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFE000000) + 8 * v4 + 0x10) >> 3;
  if (v4 == v5
    || (v12 = (uint64_t *)((a1 & 0xFFFFFFFFFE000000) + 8 * v5 + 16),
        v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFE000000) + 8 * v5 + 0x10),
        (v11 & 7) == 1))
  {
    if (v8 != v6)
    {
      os_unfair_lock_assert_owner(&pas_heap_lock);
      v10 = ++pas_expendable_memory_version_counter;
      *v7 = (8 * pas_expendable_memory_version_counter) | 2;
      *(_QWORD *)(a1 - 8) = v10;
      return 1;
    }
    return 0;
  }
  v13 = v11 >> 3;
  if (v8 == v6 && v13 == v6)
    return 0;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v15 = ++pas_expendable_memory_version_counter;
  v16 = (8 * pas_expendable_memory_version_counter) | 2;
  *v7 = v16;
  *v12 = v16;
  *(_QWORD *)(a1 - 8) = v15;
  return 1;
}

uint64_t pas_large_free_heap_deferred_commit_log_add(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  char v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  unsigned int v33;
  __int128 v35;
  int64x2_t v36;
  __int128 v37;
  __int128 v38;

  v4 = *(_QWORD *)(a1 + 792);
  if (v4)
  {
LABEL_2:
    *(_QWORD *)(a1 + 792) = v4 - *a2 + a2[1];
    v5 = *a2;
    v35 = *(_OWORD *)(a2 + 1);
    v6 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 784);
    if (*(_QWORD *)a1 >= (unint64_t)(v7 + 32))
    {
      if ((unint64_t)(2 * v7) <= 4)
        v8 = 4;
      else
        v8 = 2 * v7;
      v37 = 0u;
      v38 = 0u;
      v36 = 0u;
      os_unfair_lock_assert_owner(&pas_heap_lock);
      initialize_config(&v36);
      v9 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, 24 * v8, 8, 0, &v36);
      v10 = (void *)v9;
      v12 = v11;
      if (v9)
        v13 = pas_allocation_callback == 0;
      else
        v13 = 1;
      if (!v13)
        pas_allocation_callback(v9, 24 * v8, 0, "pas_large_virtual_range_min_heap/outline_array", 0);
      if ((v12 & 1) != 0)
      {
        v14 = pas_bootstrap_free_heap_num_allocated_object_bytes + 24 * v8;
        pas_bootstrap_free_heap_num_allocated_object_bytes = v14;
        if (v14 <= pas_bootstrap_free_heap_num_allocated_object_bytes_peak)
          v14 = pas_bootstrap_free_heap_num_allocated_object_bytes_peak;
        pas_bootstrap_free_heap_num_allocated_object_bytes_peak = v14;
      }
      bzero(v10, 24 * v8);
      memcpy(v10, *(const void **)(a1 + 776), 24 * v6 - 768);
      v15 = 24 * v7;
      if (24 * v7)
      {
        v16 = *(_QWORD *)(a1 + 776);
        if (v16)
        {
          if (pas_deallocation_callback)
            pas_deallocation_callback(*(_QWORD *)(a1 + 776), 24 * v7, 0, 0);
        }
        v37 = 0u;
        v38 = 0u;
        v36 = 0u;
        initialize_config(&v36);
        pas_simple_large_free_heap_deallocate(&pas_bootstrap_free_heap, v16, v15 + v16, 0, &v36);
        pas_bootstrap_free_heap_num_allocated_object_bytes -= v15;
      }
      *(_QWORD *)(a1 + 776) = v10;
      *(_QWORD *)(a1 + 784) = v8;
    }
    v17 = v6 + 1;
    if (v6 > 0x1F)
    {
      v19 = (_QWORD *)(*(_QWORD *)(a1 + 776) + 24 * v6 - 768);
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      *(_QWORD *)a1 = v17;
      if (v17 < 2)
        goto LABEL_36;
    }
    else
    {
      v18 = (_QWORD *)(a1 + 24 * v6);
      v18[1] = 0;
      v18[2] = 0;
      v18[3] = 0;
      *(_QWORD *)a1 = v17;
      if (v17 < 2)
      {
LABEL_36:
        v30 = v17 - 1;
        if (v30 > 0x1F)
        {
LABEL_37:
          v31 = *(_QWORD *)(a1 + 776) + 24 * v30 - 768;
          goto LABEL_38;
        }
LABEL_35:
        v31 = a1 + 24 * v30 + 8;
LABEL_38:
        *(_QWORD *)v31 = v5;
        *(_OWORD *)(v31 + 8) = v35;
        return 1;
      }
    }
    v20 = a1 + 8;
    do
    {
      while (1)
      {
        v23 = v17 >> 1;
        v24 = (v17 >> 1) - 1;
        if (v24 > 0x1F)
        {
          v27 = *(_QWORD *)(a1 + 776) + 24 * v24 - 768;
          v26 = *(_QWORD *)v27;
          v36 = *(int64x2_t *)(v27 + 8);
          if (v5 >= v26)
            goto LABEL_36;
        }
        else
        {
          v25 = (uint64_t *)(v20 + 24 * v24);
          v26 = *v25;
          v36 = *(int64x2_t *)(v25 + 1);
          if (v5 >= v26)
            goto LABEL_36;
        }
        v28 = v17 - 1;
        if (v17 <= 0x20)
          break;
        v21 = *(_QWORD *)(a1 + 776) + 24 * v28 - 768;
        *(_QWORD *)v21 = v26;
        *(int64x2_t *)(v21 + 8) = v36;
        v22 = v17 > 3;
        v17 >>= 1;
        if (!v22)
          goto LABEL_34;
      }
      v29 = v20 + 24 * v28;
      *(_QWORD *)v29 = v26;
      *(int64x2_t *)(v29 + 8) = v36;
      v22 = v17 > 3;
      v17 >>= 1;
    }
    while (v22);
LABEL_34:
    v30 = v23 - 1;
    if (v23 - 1 > 0x1F)
      goto LABEL_37;
    goto LABEL_35;
  }
  if (*(unsigned int **)(a3 + 8) == &pas_virtual_range_common_lock)
  {
    v4 = 0;
    goto LABEL_2;
  }
  v33 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (!__ldaxr(&pas_virtual_range_common_lock))
  {
    if (!__stxr(v33, &pas_virtual_range_common_lock))
    {
      v4 = *(_QWORD *)(a1 + 792);
      goto LABEL_2;
    }
  }
  __clrex();
  result = 0;
  if (!*(_QWORD *)a3)
    *(_QWORD *)a3 = &pas_virtual_range_common_lock;
  return result;
}

void commit_all(unint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (a1[99])
  {
    v3 = a1 + 1;
    v4 = *a1;
    if (*a1)
    {
      while (1)
      {
        v5 = v4 - 1;
        if (v4 > 0x20)
        {
          v8 = a1[97] + 24 * v5;
          v6 = (_QWORD *)(v8 - 768);
          v7 = (__int128 *)(v8 - 760);
        }
        else
        {
          v6 = &v3[3 * v5];
          v7 = (__int128 *)(v6 + 1);
        }
        v9 = a1[1];
        v10 = a1[2];
        v11 = *v6;
        v34 = *v7;
        v6[1] = 0;
        v6[2] = 0;
        *v6 = 0;
        v3[1] = 0;
        v3[2] = 0;
        *v3 = 0;
        *a1 = v5;
        if (v4 != 1)
          break;
LABEL_36:
        if (v9 != v10)
        {
          v4 = *a1;
          if (*a1)
            continue;
        }
        goto LABEL_38;
      }
      for (i = 1; ; i = v15)
      {
        v16 = 2 * i;
        v15 = (2 * i) | 1;
        v33 = 0uLL;
        if (v15 <= v5)
        {
          if (v16 > 0x1F)
            v25 = a1[97] + 48 * i - 768;
          else
            v25 = (uint64_t)&v3[6 * i];
          v17 = *(_QWORD *)v25;
          v33 = *(_OWORD *)(v25 + 8);
          v18 = v11 <= v17;
          v19 = v16 - 1;
          if (v16 - 1 > 0x1F)
            goto LABEL_14;
        }
        else
        {
          if (v16 > v5)
            goto LABEL_32;
          v17 = 0;
          v18 = 1;
          v19 = v16 - 1;
          if (v16 - 1 > 0x1F)
          {
LABEL_14:
            v20 = a1[97] + 24 * v19 - 768;
            v21 = *(_QWORD *)v20;
            v32 = *(_OWORD *)(v20 + 8);
            v22 = v11 > v21;
            if (v18)
              goto LABEL_26;
            goto LABEL_15;
          }
        }
        v26 = &v3[3 * v19];
        v21 = *v26;
        v32 = *(_OWORD *)(v26 + 1);
        v22 = v11 > v21;
        if (v18)
        {
LABEL_26:
          if (!v22)
          {
LABEL_32:
            v28 = i - 1;
            if ((unint64_t)(i - 1) > 0x1F)
              v29 = a1[97] + 24 * v28 - 768;
            else
              v29 = (uint64_t)&v3[3 * v28];
            *(_QWORD *)v29 = v11;
            *(_OWORD *)(v29 + 8) = v34;
            goto LABEL_36;
          }
          goto LABEL_28;
        }
LABEL_15:
        if (!v22 || v17 < v21)
        {
          v24 = i - 1;
          if ((unint64_t)(i - 1) > 0x1F)
            v13 = a1[97] + 24 * v24 - 768;
          else
            v13 = (uint64_t)&v3[3 * v24];
          *(_QWORD *)v13 = v17;
          v14 = &v33;
          goto LABEL_10;
        }
LABEL_28:
        v27 = i - 1;
        if ((unint64_t)(i - 1) > 0x1F)
          v13 = a1[97] + 24 * v27 - 768;
        else
          v13 = (uint64_t)&v3[3 * v27];
        *(_QWORD *)v13 = v21;
        v14 = &v32;
        v15 = v16;
LABEL_10:
        *(_OWORD *)(v13 + 8) = *v14;
      }
    }
LABEL_38:
    if (*(unsigned int **)(a2 + 8) != &pas_virtual_range_common_lock)
    {
      v30 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v31 = __ldxr(&pas_virtual_range_common_lock);
        if (v31 != v30)
          break;
        if (!__stlxr(0, &pas_virtual_range_common_lock))
          goto LABEL_44;
      }
      __clrex();
      os_unfair_lock_unlock((os_unfair_lock_t)&pas_virtual_range_common_lock);
    }
LABEL_44:
    a1[99] = 0;
  }
}

unint64_t pas_large_free_heap_helpers_try_allocate_with_alignment(unsigned __int16 *a1, uint64_t a2, _QWORD *a3, unint64_t *a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  int64x2_t v23;
  uint64_t (*v24)@<X0>(uint64_t@<X0>, unint64_t@<X1>, uint64_t@<X2>, uint64_t (*)(uint64_t, unint64_t, uint64_t, const char *, uint64_t)@<X3>, uint64_t@<X8>);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v23 = vdupq_n_s64(1uLL);
  v24 = large_utility_aligned_allocator;
  v25 = a2;
  v26 = 0;
  v27 = 0;
  if (a6 <= 8)
    v16 = 8;
  else
    v16 = a6;
  v17 = pas_fast_large_free_heap_try_allocate(a1, a5, v16, a7, (uint64_t)&v23);
  v18 = v17;
  v20 = v19;
  if (v17 && pas_allocation_callback)
    pas_allocation_callback(v17, a5, 2, a8, 0);
  if ((v20 & 1) != 0)
  {
    pas_large_sharing_pool_allocate_and_commit(v18, v18 + a5, 0, 0, 1u);
    v21 = *a3 + a5;
    *a3 = v21;
    if (v21 <= *a4)
      v21 = *a4;
    *a4 = v21;
  }
  return v18;
}

void pas_large_free_heap_helpers_deallocate(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  uint64_t (*v15)@<X0>(uint64_t@<X0>, unint64_t@<X1>, uint64_t@<X2>, uint64_t (*)(uint64_t, unint64_t, uint64_t, const char *, uint64_t)@<X3>, uint64_t@<X8>);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (a5)
  {
    v14 = vdupq_n_s64(1uLL);
    v15 = large_utility_aligned_allocator;
    v16 = a2;
    v17 = 0;
    v18 = 0;
    if (a4)
    {
      if (pas_deallocation_callback)
        pas_deallocation_callback(a4, a5, 2, 0);
    }
    v10 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v11 = mach_approximate_time();
      v12 = *v10;
      v13 = v10[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_8:
        try_splat(a4, a4 + a5, 2, v11 * v12 / v13, 0, 0, 0, 0, 1u);
        v19[0] = a4 & 0xFFFFFFFFFFFFLL;
        v19[1] = (a4 + a5) & 0xFFFFFFFFFFFFLL;
        v19[2] = 0;
        fast_merge(a1, v19, &v14);
        *a3 -= a5;
        return;
      }
    }
    else
    {
      get_timebase_info_slow();
      v11 = mach_approximate_time();
      v12 = timebase_info;
      v13 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_8;
    }
    pas_get_epoch_first = 1;
    goto LABEL_8;
  }
}

uint64_t large_utility_aligned_allocator@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, unint64_t, uint64_t, const char *, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v10 = pas_page_malloc_cached_alignment;
  if (!pas_page_malloc_cached_alignment)
  {
    v10 = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = v10;
  }
  v11 = (a1 + v10 - 1) & -(uint64_t)v10;
  if (a2 <= v10)
    v12 = v10;
  else
    v12 = a2;
  *(_QWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  if (pas_physical_page_sharing_pool_balancing_enabled)
  {
    while (1)
    {
      v13 = pas_physical_page_sharing_pool_balance;
      v14 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v14 != v13)
        break;
      if (__stlxr(pas_physical_page_sharing_pool_balance - v11, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_11;
      }
      v15 = 1;
LABEL_12:
      __dmb(0xBu);
      if (v15)
        goto LABEL_13;
    }
    __clrex();
LABEL_11:
    v15 = 0;
    goto LABEL_12;
  }
LABEL_13:
  result = a4(v11, v12, a3, "pas_large_utility_free_heap/chunk", 1);
  v18 = v17;
  if ((v19 & 1) != 0)
  {
    v23 = result;
    v24 = result + v11;
    v25 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v26 = mach_approximate_time();
      v27 = *v25;
      v28 = v25[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_25:
        result = try_splat(v23, v24, 3, v26 * v27 / v28, 0, 0, 0, 0, 1u);
        *(_QWORD *)a5 = v23;
        *(_QWORD *)(a5 + 8) = a1;
        *(_QWORD *)(a5 + 16) = v23;
        *(_QWORD *)(a5 + 24) = 0;
        *(_QWORD *)(a5 + 32) = v23 + a1;
        *(_QWORD *)(a5 + 40) = v11 - a1;
        *(_DWORD *)(a5 + 48) = v18;
        return result;
      }
    }
    else
    {
      get_timebase_info_slow();
      v26 = mach_approximate_time();
      v27 = timebase_info;
      v28 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_25;
    }
    pas_get_epoch_first = 1;
    goto LABEL_25;
  }
  if (pas_physical_page_sharing_pool_balancing_enabled)
  {
    while (1)
    {
      v20 = pas_physical_page_sharing_pool_balance;
      v21 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v21 != v20)
        break;
      if (__stlxr(pas_physical_page_sharing_pool_balance + v11, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_19;
      }
      v22 = 1;
LABEL_20:
      __dmb(0xBu);
      if (v22)
        return result;
    }
    __clrex();
LABEL_19:
    v22 = 0;
    goto LABEL_20;
  }
  return result;
}

unint64_t allocate_impl(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  char v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD v23[6];
  unint64_t v24[3];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v10 = *(_QWORD *)(a1 + 24);
  if (!*a2)
    *a2 = (*(uint64_t (**)(_QWORD))(a4 + 24))(*(_QWORD *)(a1 + 24));
  v11 = *a3;
  v12 = (*(uint64_t (**)(uint64_t))(a4 + 32))(v10);
  if (v11 <= v12)
    v13 = v12;
  else
    v13 = v11;
  *a3 = v13;
  if (v13 <= *(_QWORD *)(a4 + 48))
    v13 = *(_QWORD *)(a4 + 48);
  *a3 = v13;
  *a2 = (v13 + *a2 - 1) & -(uint64_t)v13;
  v22[0] = *(_QWORD *)(a4 + 1016);
  v22[1] = a1;
  v22[2] = a4;
  v14 = (*(uint64_t (**)(_QWORD))(a4 + 24))(*(_QWORD *)(a1 + 24));
  v15 = *(_QWORD *)(a4 + 48);
  v23[0] = v14;
  v23[1] = v15;
  v23[2] = aligned_allocator;
  v23[3] = v22;
  v23[4] = *(_QWORD *)(a4 + 1032);
  v23[5] = a1;
  v16 = pas_fast_large_free_heap_try_allocate((unsigned __int16 *)a1, *a2, *a3, 0, (uint64_t)v23);
  v18 = v17;
  result = 0;
  if ((v17 & 1) != 0)
  {
    if (*(_BYTE *)(a4 + 1024))
    {
      v20 = pas_large_sharing_pool_allocate_and_commit(v16, *a2 + v16, a5, 1, *(_DWORD *)(a4 + 1040));
      result = v16;
      if ((v20 & 1) == 0)
      {
        if (*a2)
        {
          v21 = (*a2 + v16) & 0xFFFFFFFFFFFFLL;
          v24[0] = v16 & 0xFFFFFFFFFFFFLL;
          v24[1] = v21;
          v24[2] = (v18 << 16) & 0xFF000000000000;
          fast_merge((unsigned __int16 *)a1, v24, v23);
        }
        return 0;
      }
    }
    else
    {
      return v16;
    }
  }
  return result;
}

unint64_t pas_large_heap_try_allocate_pgm(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD v17[3];
  unint64_t v18;
  unint64_t v19;

  v11 = pas_probabilistic_guard_malloc_allocate(a1, a2, a4, a5, a6);
  if ((v12 & 1) != 0)
    return v11;
  v18 = a3;
  v19 = a2;
  v13 = allocate_impl(a1, &v19, &v18, a5, a6);
  v14 = v13;
  if ((v15 & 1) != 0)
  {
    v17[0] = v13;
    v17[1] = v19 + v13;
    v17[2] = a1;
    pas_large_map_add(v17);
  }
  return v14;
}

uint64_t pas_large_heap_try_deallocate(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int i;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v26[3];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  pas_large_map_take(a1, &v20);
  v4 = v20;
  if (v20)
  {
    v6 = v21;
    v5 = v22;
    if (!*(_BYTE *)(a2 + 1024))
    {
LABEL_7:
      v12 = (*(uint64_t (**)(_QWORD))(a2 + 24))(*((_QWORD *)v5 + 3));
      v13 = *(_QWORD *)(a2 + 48);
      v20 = v12;
      v21 = v13;
      v22 = aligned_allocator;
      v23 = 0;
      v24 = *(_QWORD *)(a2 + 1032);
      v25 = v5;
      if (v4 != v6)
      {
        v26[0] = v4 & 0xFFFFFFFFFFFFLL;
        v26[1] = v6 & 0xFFFFFFFFFFFFLL;
        v26[2] = 0;
        fast_merge((unsigned __int16 *)v5, v26, &v20);
      }
      return 1;
    }
    v7 = *(_DWORD *)(a2 + 1040);
    v8 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v9 = mach_approximate_time();
      v10 = *v8;
      v11 = v8[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_6:
        try_splat(v4, v6, 2, v9 * v10 / v11, 0, 0, 0, 1, v7);
        goto LABEL_7;
      }
    }
    else
    {
      get_timebase_info_slow();
      v9 = mach_approximate_time();
      v10 = timebase_info;
      v11 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_6;
    }
    pas_get_epoch_first = 1;
    goto LABEL_6;
  }
  if (!*(_BYTE *)(a2 + 1136))
    return 0;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (!pas_pgm_hash_map)
    return 0;
  v15 = (a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4));
  v16 = ((a1 >> 36) ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * ((a1 >> 36) ^ HIDWORD(a1));
  for (i = v15 ^ ((v16 ^ v15) >> 11) ^ v16; ; ++i)
  {
    v18 = i & dword_1EE3451DC;
    v19 = (_QWORD *)(pas_pgm_hash_map + 16 * v18);
    if (*v19 != -1)
      break;
    if (v19[1] != 1)
      return 0;
LABEL_14:
    ;
  }
  if (*v19 != a1)
    goto LABEL_14;
  if (*(_QWORD *)(pas_pgm_hash_map + 16 * v18 + 8))
  {
    pas_probabilistic_guard_malloc_deallocate(a1);
    return 1;
  }
  return 0;
}

BOOL pas_large_heap_try_shrink(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);

  os_unfair_lock_assert_owner(&pas_heap_lock);
  pas_large_map_take(a1, &v21);
  v6 = v21;
  if (!v21)
    return v6 != 0;
  v8 = v22;
  v7 = v23;
  v9 = *((_QWORD *)v23 + 3);
  if (!a2)
    a2 = (*(uint64_t (**)(_QWORD))(a3 + 24))(*((_QWORD *)v23 + 3));
  v10 = (*(uint64_t (**)(uint64_t))(a3 + 32))(v9);
  v11 = *(_QWORD *)(a3 + 48);
  if (v10 > v11)
    v11 = v10;
  v12 = ((a2 + v11 - 1) & -(uint64_t)v11) + v6;
  if (*(_BYTE *)(a3 + 1024))
  {
    v13 = *(_DWORD *)(a3 + 1040);
    v14 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v15 = mach_approximate_time();
      v16 = *v14;
      v17 = v14[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_10:
        try_splat(v12, v8, 2, v15 * v16 / v17, 0, 0, 0, 1, v13);
        goto LABEL_11;
      }
    }
    else
    {
      get_timebase_info_slow();
      v15 = mach_approximate_time();
      v16 = timebase_info;
      v17 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_10;
    }
    pas_get_epoch_first = 1;
    goto LABEL_10;
  }
LABEL_11:
  v18 = (*(uint64_t (**)(_QWORD))(a3 + 24))(*((_QWORD *)v7 + 3));
  v19 = *(_QWORD *)(a3 + 48);
  v21 = v18;
  v22 = v19;
  v23 = aligned_allocator;
  v24 = 0;
  v25 = *(_QWORD *)(a3 + 1032);
  v26 = v7;
  if (v12 != v8)
  {
    v27 = v12 & 0xFFFFFFFFFFFFLL;
    v28 = v8 & 0xFFFFFFFFFFFFLL;
    v29 = 0;
    fast_merge((unsigned __int16 *)v7, (unint64_t *)&v27, &v21);
  }
  v27 = v6;
  v28 = v12;
  v29 = v7;
  pas_large_map_add(&v27);
  return v6 != 0;
}

uint64_t for_each_live_object_entry_callback(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)a2)
    return (*(uint64_t (**)(void))(a2 + 8))();
  else
    return 1;
}

uint64_t compute_summary_live_object_callback(uint64_t a1, unint64_t a2, unint64_t a3, int64x2_t *a4)
{
  if (*(_BYTE *)(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 43) & 0x3F] + 1024))
    return pas_compute_summary_live_object_callback(a2, a3, a4);
  else
    return pas_compute_summary_live_object_callback_without_physical_sharing(a2, a3, (uint64_t)a4);
}

uint64_t aligned_allocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))a4)(a1, a2, a3, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16));
}

uint64_t large_aligned_allocator@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v10 = pas_page_malloc_cached_alignment;
  if (!pas_page_malloc_cached_alignment)
  {
    v10 = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = v10;
  }
  v11 = (a1 + v10 - 1) & -(uint64_t)v10;
  if (a2 <= v10)
    v12 = v10;
  else
    v12 = a2;
  *(_QWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  if (pas_physical_page_sharing_pool_balancing_enabled)
  {
    while (1)
    {
      v13 = pas_physical_page_sharing_pool_balance;
      v14 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v14 != v13)
        break;
      if (__stlxr(pas_physical_page_sharing_pool_balance - v11, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_11;
      }
      v15 = 1;
LABEL_12:
      __dmb(0xBu);
      if (v15)
        goto LABEL_13;
    }
    __clrex();
LABEL_11:
    v15 = 0;
    goto LABEL_12;
  }
LABEL_13:
  result = (*(uint64_t (**)(size_t, unint64_t, uint64_t, const char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(v11, v12, a3, "pas_large_heap_physical_page_sharing_cache/chunk", 0, 0, *(_QWORD *)(*(_QWORD *)a4 + 40));
  v18 = HIDWORD(v17);
  if ((v17 & 1) != 0)
  {
    v22 = result;
    if (*(_BYTE *)(a4 + 16) && HIDWORD(v17) != 1)
    {
      if (!(v11 >> 24))
        goto LABEL_31;
      v23 = pas_page_malloc_cached_alignment;
      if (!pas_page_malloc_cached_alignment)
      {
        v23 = pas_page_malloc_alignment_slow();
        pas_page_malloc_cached_alignment = v23;
      }
      if (((v23 - 1) & (v11 | v22)) != 0)
      {
LABEL_31:
        bzero((void *)v22, v11);
      }
      else
      {
        if (!v23)
          pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
        mmap((void *)v22, v11, 3, 4114, 889192448, 0);
      }
      v18 = 1;
    }
    pas_enumerable_range_list_append(pas_large_heap_physical_page_sharing_cache_page_list, v22, v22 + v11);
    v24 = *(_DWORD *)(*(_QWORD *)(a4 + 8) + 1040);
    v25 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v26 = mach_approximate_time();
      v27 = *v25;
      v28 = v25[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_36:
        result = try_splat(v22, v22 + v11, 3, v26 * v27 / v28, 0, 0, 0, 1, v24);
        *(_QWORD *)a5 = v22;
        *(_QWORD *)(a5 + 8) = a1;
        *(_QWORD *)(a5 + 16) = v22;
        *(_QWORD *)(a5 + 24) = 0;
        *(_QWORD *)(a5 + 32) = v22 + a1;
        *(_QWORD *)(a5 + 40) = v11 - a1;
        *(_DWORD *)(a5 + 48) = v18;
        return result;
      }
    }
    else
    {
      get_timebase_info_slow();
      v26 = mach_approximate_time();
      v27 = timebase_info;
      v28 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_36;
    }
    pas_get_epoch_first = 1;
    goto LABEL_36;
  }
  if (pas_physical_page_sharing_pool_balancing_enabled)
  {
    while (1)
    {
      v19 = pas_physical_page_sharing_pool_balance;
      v20 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v20 != v19)
        break;
      if (__stlxr(pas_physical_page_sharing_pool_balance + v11, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_19;
      }
      v21 = 1;
LABEL_20:
      __dmb(0xBu);
      if (v21)
        return result;
    }
    __clrex();
LABEL_19:
    v21 = 0;
    goto LABEL_20;
  }
  return result;
}

void pas_large_map_find(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int i;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unsigned int v17;
  int v18;
  unsigned int j;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int k;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v4 = a1 >> 36;
  if (!pas_tiny_large_map_hashtable_instance)
    goto LABEL_17;
  v5 = (a1 & 0xFFFF0000 ^ ((a1 & 0xFFFF0000) >> 4) ^ 0xDEADBEEF) + 32 * (a1 & 0xFFFF0000 ^ ((a1 & 0xFFFF0000) >> 4));
  v6 = (v4 ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * (v4 ^ HIDWORD(a1));
  for (i = v5 ^ ((v6 ^ v5) >> 11) ^ v6; ; ++i)
  {
    v8 = (uint64_t *)(pas_tiny_large_map_hashtable_instance + 16 * (i & dword_1EE345154));
    v10 = *v8;
    v9 = (uint64_t *)v8[1];
    if (v9)
      break;
    if (v10 != 1)
      goto LABEL_17;
LABEL_4:
    ;
  }
  if (v10 != (a1 & 0xFFFFFFFFFFFF0000))
    goto LABEL_4;
  v11 = *v9;
  if (*v9)
  {
    v12 = ((unsigned __int16)a1 ^ ((unsigned __int16)a1 >> 4) ^ 0xDEADBEEF)
        + 32 * ((unsigned __int16)a1 ^ ((unsigned __int16)a1 >> 4));
    v13 = v12 ^ (v12 >> 11) ^ 0xDEB66B58;
    v14 = *((_DWORD *)v9 + 3);
    while (1)
    {
      v15 = (*(unsigned int *)(v11 + 5 * (v13 & v14)) | ((unint64_t)*(unsigned __int8 *)(v11
                                                                                                + 5 * (v13 & v14)
                                                                                                + 4) << 32)) & 0xFFFFFFFFFFLL;
      if (v15 <= 0xFF && (*(_DWORD *)(v11 + 5 * (v13 & v14)) & 0xFELL) == 0)
      {
        if (*(_DWORD *)(v11 + 5 * (v13 & v14)) != 1)
          break;
      }
      else if (16 * (*(_DWORD *)(v11 + 5 * (v13 & v14)) & 0xFFFLL) == (unsigned __int16)a1)
      {
        *a2 = a1;
        a2[1] = ((v15 >> 8) & 0xFFF0) + a1;
        a2[2] = *(_QWORD *)(pas_heap_table + ((v15 >> 21) & 0x7FFF8));
        return;
      }
      ++v13;
    }
  }
LABEL_17:
  if (pas_small_large_map_hashtable_instance)
  {
    v17 = (a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4));
    v18 = (v4 ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * (v4 ^ HIDWORD(a1));
    for (j = v17 ^ ((v18 ^ v17) >> 11) ^ v18; ; ++j)
    {
      v20 = pas_small_large_map_hashtable_instance + 12 * (j & dword_1ECF57A84);
      v21 = HIDWORD(*(_QWORD *)v20);
      if (v21)
      {
        if (16 * *(_QWORD *)v20 == a1)
        {
          v26 = *(unsigned int *)(v20 + 8);
          *a2 = a1;
          a2[1] = a1 + 16 * v21;
          a2[2] = 8 * v26;
          return;
        }
      }
      else if (*(_QWORD *)v20 != 1)
      {
        break;
      }
    }
  }
  if (pas_large_map_hashtable_instance)
  {
    v22 = (v4 ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * (v4 ^ HIDWORD(a1));
    for (k = ((a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4))) ^ ((v22 ^ ((a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4)))) >> 11) ^ v22;
          ;
          ++k)
    {
      v24 = (uint64_t *)(pas_large_map_hashtable_instance + 24 * (k & dword_1EE34513C));
      v25 = *v24;
      if (v24[1])
      {
        if (v25 == a1)
        {
          *(_OWORD *)a2 = *(_OWORD *)v24;
          a2[2] = v24[2];
          return;
        }
      }
      else if (v25 != 1)
      {
        break;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void pas_large_map_add(_QWORD *a1)
{
  unint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t *v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t j;
  _QWORD *v66;
  unint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t k;
  unsigned int *v78;
  unint64_t v79;
  int v80;
  char *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int *v86;
  unint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  int64x2_t v90[3];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v2 = *a1;
  v3 = (int64x2_t *)(a1 + 1);
  v4 = a1[1];
  v5 = a1[2];
  if (!*(_BYTE *)(v5 + 18))
  {
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v6 = pas_heap_table;
    if (pas_heap_table)
    {
      v7 = pas_heap_table_bump_index;
      if (HIWORD(pas_heap_table_bump_index))
      {
LABEL_6:
        *(_BYTE *)(v5 + 18) = 1;
LABEL_15:
        v9 = *a1;
        if ((*a1 & 0xFFFFFFF00000000FLL) == 0
          && ((v10 = a1[2], v11 = v3->i64[0] - v9, v3->i64[0] == (v11 & 0xFFFFFFFF0) + v9)
            ? (v12 = v10 == (v10 & 0x7FFFFFFF8))
            : (v12 = 0),
              v12))
        {
          v21 = (v11 << 28) & 0xFFFFFFFF00000000 | (v9 >> 4);
          v22 = (16 * v21) & 0xFFFFFFFF0;
          if (dword_1ECF57A80 <= (2 * (HIDWORD(qword_1ECF57A88) + qword_1ECF57A88)))
          {
            if (6 * (int)qword_1ECF57A88 >= (2 * dword_1ECF57A80))
              v23 = 2 * dword_1ECF57A80;
            else
              v23 = dword_1ECF57A80;
            if (dword_1ECF57A80)
              v24 = v23;
            else
              v24 = 16;
            v25 = (void *)pas_large_utility_free_heap_allocate_for_allocation_config(12 * v24, (uint64_t)"pas_small_large_map_hashtable/table");
            v26 = (uint64_t)v25;
            if (v24)
              bzero(v25, 12 * v24);
            v27 = pas_small_large_map_hashtable_instance;
            v28 = dword_1ECF57A80;
            if (dword_1ECF57A80)
            {
              v29 = 0;
              do
              {
                v30 = v27 + 12 * v29;
                v31 = *(_QWORD *)v30;
                if (HIDWORD(*(_QWORD *)v30))
                {
                  v32 = ((16 * v31) ^ v31 & 0xFFFFFFF ^ 0xDEADBEEF) + 32 * ((16 * v31) ^ v31 & 0xFFFFFFF);
                  v33 = ((v31 >> 28) ^ 0xDEADBEEF) + 32 * (v31 >> 28);
                  v34 = v32 ^ ((v33 ^ v32) >> 11) ^ v33;
                  do
                    v35 = v26 + 12 * (v34++ & (v24 - 1));
                  while (*(_DWORD *)(v35 + 4));
                  v36 = *(_QWORD *)v30;
                  *(_DWORD *)(v35 + 8) = *(_DWORD *)(v30 + 8);
                  *(_QWORD *)v35 = v36;
                }
                ++v29;
              }
              while (v29 != v28);
            }
            else
            {
              v28 = 0;
            }
            pas_small_large_map_hashtable_instance = v26;
            dword_1ECF57A80 = v24;
            dword_1ECF57A84 = v24 - 1;
            HIDWORD(qword_1ECF57A88) = 0;
            pas_small_large_map_hashtable_instance_in_flux_stash = 0;
            qword_1ECF57A98 = 0;
            unk_1ECF57AA0 = 0;
            pas_large_utility_free_heap_deallocate_for_allocation_config(v27, 12 * v28);
          }
          v53 = ((16 * (v9 >> 4)) ^ (v9 >> 4) & 0xFFFFFFF ^ 0xDEADBEEF)
              + 32 * ((16 * (v9 >> 4)) ^ (v9 >> 4) & 0xFFFFFFF);
          v54 = v53 ^ ((((HIDWORD(v22) ^ 0xDEADBEEF) + 32 * HIDWORD(v22)) ^ v53) >> 11) ^ ((HIDWORD(v22) ^ 0xDEADBEEF)
                                                                                         + 32 * HIDWORD(v22));
          v55 = pas_small_large_map_hashtable_instance + 12 * (dword_1ECF57A84 & v54);
          v56 = *(_QWORD *)v55;
          v57 = *(_QWORD *)v55;
          if (*(_QWORD *)v55)
          {
            v58 = 0;
            v59 = v54 + 1;
            do
            {
              if (v57 == 1)
              {
                if (!v58)
                  v58 = v55;
              }
              else if (16 * v56 == v22)
              {
                goto LABEL_85;
              }
              v55 = pas_small_large_map_hashtable_instance + 12 * (v59 & dword_1ECF57A84);
              v56 = *(_QWORD *)v55;
              ++v59;
              v57 = *(_QWORD *)v55;
            }
            while (*(_QWORD *)v55);
            if (v58)
            {
              --HIDWORD(qword_1ECF57A88);
              v55 = v58;
            }
          }
          LODWORD(qword_1ECF57A88) = qword_1ECF57A88 + 1;
LABEL_85:
          *(_QWORD *)v55 = v21;
          *(_DWORD *)(v55 + 8) = v10 >> 3;
          qword_1ECF57AA8 = 0;
        }
        else
        {
          v90[0] = *v3;
          if (dword_1EE345138 <= (2 * (HIDWORD(qword_1EE345140) + qword_1EE345140)))
          {
            if (6 * (int)qword_1EE345140 >= (2 * dword_1EE345138))
              v13 = 2 * dword_1EE345138;
            else
              v13 = dword_1EE345138;
            if (dword_1EE345138)
              v14 = v13;
            else
              v14 = 16;
            pas_large_map_hashtable_rehash(v14);
          }
          v15 = 0;
          v16 = (v9 ^ (v9 >> 4) ^ 0xDEADBEEF) + 32 * (v9 ^ (v9 >> 4));
          v17 = ((v9 >> 36) ^ HIDWORD(v9) ^ 0xDEADBEEF) + 32 * ((v9 >> 36) ^ HIDWORD(v9));
          v18 = v16 ^ ((v17 ^ v16) >> 11) ^ v17;
          v19 = pas_large_map_hashtable_instance + 24 * (v18 & dword_1EE34513C);
          for (i = *(_QWORD *)v19; *(_QWORD *)v19 == 1; i = *(_QWORD *)v19)
          {
LABEL_29:
            if (!v15)
              v15 = v19;
            v19 = pas_large_map_hashtable_instance + 24 * (++v18 & dword_1EE34513C);
          }
          while (i)
          {
            if (i == v9)
              goto LABEL_39;
            v19 = pas_large_map_hashtable_instance + 24 * (++v18 & dword_1EE34513C);
            i = *(_QWORD *)v19;
            if (*(_QWORD *)v19 == 1)
              goto LABEL_29;
          }
          if (v15)
          {
            --HIDWORD(qword_1EE345140);
            v19 = v15;
          }
          LODWORD(qword_1EE345140) = qword_1EE345140 + 1;
LABEL_39:
          *(_QWORD *)v19 = v9;
          *(int64x2_t *)(v19 + 8) = v90[0];
          qword_1EE3451B8 = 0;
        }
        return;
      }
    }
    else
    {
      memset(v90, 0, sizeof(v90));
      os_unfair_lock_assert_owner(&pas_heap_lock);
      initialize_config(v90);
      v8 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, 0x80000, 8, 0, v90);
      v6 = v8;
      if (v8 && pas_allocation_callback)
        pas_allocation_callback(v8, 0x80000, 0, "pas_heap_table", 1);
      pas_heap_table = v6;
      v7 = pas_heap_table_bump_index;
      if (HIWORD(pas_heap_table_bump_index))
        goto LABEL_6;
    }
    pas_heap_table_bump_index = v7 + 1;
    *(_WORD *)(v5 + 16) = v7;
    *(_QWORD *)(v6 + 8 * v7) = v5;
    *(_BYTE *)(v5 + 18) = 2;
    goto LABEL_12;
  }
  if (*(_BYTE *)(v5 + 18) != 2)
    goto LABEL_15;
LABEL_12:
  if ((v2 & 0xF) != 0
    || v4 != ((unsigned __int16)(v4 - v2) & 0xFFF0) + v2
    || v5 != *(_QWORD *)(pas_heap_table + 8 * *(unsigned __int16 *)(v5 + 16)))
  {
    goto LABEL_15;
  }
  v37 = *a1;
  v38 = *a1 & 0xFFFFFFFFFFFF0000;
  v39 = *((_DWORD *)a1 + 2) - *a1;
  v40 = ((unint64_t)*(_WORD *)(a1[2] + 16) << 24) | ((unint64_t)HIBYTE(*(unsigned __int16 *)(a1[2] + 16)) << 32) | ((unint64_t)BYTE1(v39) << 16) | ((unint64_t)(v39 & 0xF0 | ((unsigned __int16)*a1 >> 12)) << 8) | (*a1 >> 4);
  if (dword_1EE345150 <= (2 * (HIDWORD(qword_1EE345158) + qword_1EE345158)))
  {
    if (6 * (int)qword_1EE345158 >= (2 * dword_1EE345150))
      v41 = 2 * dword_1EE345150;
    else
      v41 = dword_1EE345150;
    if (dword_1EE345150)
      v42 = v41;
    else
      v42 = 16;
    v43 = (void *)pas_large_utility_free_heap_allocate_for_allocation_config(16 * v42, (uint64_t)"pas_tiny_large_map_hashtable/table");
    v44 = (uint64_t)v43;
    if (v42)
      bzero(v43, 16 * v42);
    v45 = pas_tiny_large_map_hashtable_instance;
    v46 = dword_1EE345150;
    if (dword_1EE345150)
    {
      v47 = 0;
      do
      {
        v48 = (_QWORD *)(v45 + 16 * v47);
        if (v48[1])
        {
          v49 = *v48 ^ (*v48 >> 4);
          v50 = (*v48 >> 36) ^ HIDWORD(*v48);
          v51 = ((v49 ^ 0xDEADBEEF) + 32 * v49) ^ ((((v50 ^ 0xDEADBEEF) + 32 * v50) ^ ((v49 ^ 0xDEADBEEF) + 32 * v49)) >> 11) ^ ((v50 ^ 0xDEADBEEF) + 32 * v50);
          do
            v52 = v44 + 16 * (v51++ & (v42 - 1));
          while (*(_QWORD *)(v52 + 8));
          *(_OWORD *)v52 = *(_OWORD *)v48;
        }
        ++v47;
      }
      while (v47 != v46);
    }
    else
    {
      v46 = 0;
    }
    pas_tiny_large_map_hashtable_instance = v44;
    dword_1EE345150 = v42;
    dword_1EE345154 = v42 - 1;
    HIDWORD(qword_1EE345158) = 0;
    pas_tiny_large_map_hashtable_instance_in_flux_stash = 0;
    qword_1EE345168 = 0;
    unk_1EE345170 = 0;
    pas_large_utility_free_heap_deallocate_for_allocation_config(v45, 16 * v46);
  }
  v60 = 0;
  v61 = (v38 ^ (v38 >> 4) ^ 0xDEADBEEF) + 32 * (v38 ^ (v38 >> 4));
  v62 = ((v37 >> 36) ^ HIDWORD(v37) ^ 0xDEADBEEF) + 32 * ((v37 >> 36) ^ HIDWORD(v37));
  v63 = v61 ^ ((v62 ^ v61) >> 11) ^ v62;
  v64 = (unint64_t *)(pas_tiny_large_map_hashtable_instance + 16 * (v63 & dword_1EE345154));
  for (j = *v64; *v64 == 1; j = *v64)
  {
LABEL_89:
    if (!v60)
      v60 = v64;
    v64 = (unint64_t *)(pas_tiny_large_map_hashtable_instance + 16 * (++v63 & dword_1EE345154));
  }
  while (j)
  {
    if (j == v38)
      goto LABEL_99;
    v64 = (unint64_t *)(pas_tiny_large_map_hashtable_instance + 16 * (++v63 & dword_1EE345154));
    j = *v64;
    if (*v64 == 1)
      goto LABEL_89;
  }
  if (v60)
  {
    --HIDWORD(qword_1EE345158);
    v64 = v60;
  }
  LODWORD(qword_1EE345158) = qword_1EE345158 + 1;
  qword_1EE345178 = (uint64_t)v64;
  *v64 = v38;
  v66 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(24, 1uLL, (uint64_t)"pas_tiny_large_map_second_level_hashtable");
  v64[1] = (unint64_t)v66;
  v66[1] = 0;
  v66[2] = 0;
  *v66 = 0;
  qword_1EE345178 = 0;
LABEL_99:
  v67 = v64[1];
  v68 = *(_DWORD *)(v67 + 16);
  v69 = *(_DWORD *)(v67 + 8);
  if (v69 <= 2 * (*(_DWORD *)(v67 + 20) + v68))
  {
    if (6 * v68 >= 2 * v69)
      v70 = 2 * v69;
    else
      v70 = *(_DWORD *)(v67 + 8);
    if (v69)
      v71 = v70;
    else
      v71 = 16;
    v72 = v71 - 1;
    v73 = (char *)pas_large_utility_free_heap_allocate_for_allocation_config(v71 + 4 * v71, (uint64_t)"pas_tiny_large_map_second_level_hashtable/table");
    v74 = v73;
    if ((_DWORD)v71)
      bzero(v73, v71 + 4 * v71);
    v75 = *(_QWORD *)v67;
    v76 = *(unsigned int *)(v67 + 8);
    if ((_DWORD)v76)
    {
      for (k = 0; k != v76; ++k)
      {
        v78 = (unsigned int *)(v75 + 5 * k);
        v79 = *v78 | ((unint64_t)*((unsigned __int8 *)v78 + 4) << 32);
        if (v79 >= 2)
        {
          v80 = (((16 * (v79 & 0xFFF)) ^ v79 & 0xFFF ^ 0xDEADBEEF) + 32 * ((16 * (v79 & 0xFFF)) ^ v79 & 0xFFF)) ^ ((((16 * (v79 & 0xFFF)) ^ v79 & 0xFFF ^ 0xDEADBEEF) + 32 * ((16 * (v79 & 0xFFF)) ^ v79 & 0xFFF)) >> 11) ^ 0xDEB66B58;
          do
            v81 = &v74[5 * (v80++ & v72)];
          while ((*(unsigned int *)v81 | ((unint64_t)v81[4] << 32)) > 1);
          v82 = *v78;
          v81[4] = *((_BYTE *)v78 + 4);
          *(_DWORD *)v81 = v82;
        }
      }
    }
    else
    {
      v76 = 0;
    }
    *(_QWORD *)v67 = v74;
    *(_DWORD *)(v67 + 8) = v71;
    *(_DWORD *)(v67 + 12) = v72;
    *(_DWORD *)(v67 + 20) = 0;
    pas_tiny_large_map_second_level_hashtable_in_flux_stash_instance = 0;
    qword_1EE345188 = 0;
    unk_1EE345190 = 0;
    pas_large_utility_free_heap_deallocate_for_allocation_config(v75, 5 * v76);
  }
  v83 = ((16 * (v40 & 0xFFF)) ^ v40 & 0xFFF ^ 0xDEADBEEF) + 32 * ((16 * (v40 & 0xFFF)) ^ v40 & 0xFFF);
  v84 = v83 ^ (v83 >> 11) ^ 0xDEB66B58;
  v85 = *(_DWORD *)(v67 + 12);
  v86 = (unsigned int *)(*(_QWORD *)v67 + 5 * (v85 & v84));
  v87 = *v86 | ((unint64_t)*((unsigned __int8 *)v86 + 4) << 32);
  if (v87)
  {
    v88 = 0;
    v89 = v84 + 1;
    do
    {
      if (v87 <= 0xFF && v87 == 1)
      {
        if (!v88)
          v88 = v86;
      }
      else if (16 * (v87 & 0xFFF) == 16 * (v40 & 0xFFF))
      {
        goto LABEL_129;
      }
      v86 = (unsigned int *)(*(_QWORD *)v67 + 5 * (v89 & v85));
      v87 = *v86 | ((unint64_t)*((unsigned __int8 *)v86 + 4) << 32);
      ++v89;
    }
    while (v87);
    if (v88)
    {
      --*(_DWORD *)(v67 + 20);
      v86 = v88;
    }
  }
  ++*(_DWORD *)(v67 + 16);
LABEL_129:
  *((_BYTE *)v86 + 4) = BYTE4(v40);
  *v86 = v40;
  qword_1EE345198 = 0;
}

void pas_large_map_take(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int k;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int m;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v19;
  int v20;
  unsigned int i;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int j;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unsigned int v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  int32x2_t v45;
  __int32 v46;
  unint64_t v47;
  int v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t n;
  unsigned int *v55;
  unint64_t v56;
  int v57;
  char *v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v63;
  unsigned int v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  int v71;
  unsigned int v72;
  char *v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v4 = a1 >> 36;
  if (!pas_tiny_large_map_hashtable_instance)
  {
LABEL_17:
    if (pas_small_large_map_hashtable_instance)
    {
      v19 = (a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4));
      v20 = (v4 ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * (v4 ^ HIDWORD(a1));
      for (i = v19 ^ ((v20 ^ v19) >> 11) ^ v20; ; ++i)
      {
        v22 = pas_small_large_map_hashtable_instance + 12 * (i & dword_1ECF57A84);
        v23 = HIDWORD(*(_QWORD *)v22);
        if (v23)
        {
          if (16 * *(_QWORD *)v22 == a1)
          {
            v30 = *(unsigned int *)(v22 + 8);
            *(_QWORD *)v22 = 1;
            *(_DWORD *)(v22 + 8) = 0;
            qword_1ECF57AA8 = 0;
            qword_1ECF57A88 = (uint64_t)vadd_s32((int32x2_t)qword_1ECF57A88, (int32x2_t)0x1FFFFFFFFLL);
            if (6 * (int)qword_1ECF57A88 < dword_1ECF57A80 && dword_1ECF57A80 >= 0x11)
            {
              v32 = (unint64_t)dword_1ECF57A80 >> 1;
              v33 = (dword_1ECF57A80 >> 1) - 1;
              v34 = (char *)pas_large_utility_free_heap_allocate_for_allocation_config(12 * v32, (uint64_t)"pas_small_large_map_hashtable/table");
              bzero(v34, 12 * v32);
              v35 = pas_small_large_map_hashtable_instance;
              v36 = dword_1ECF57A80;
              if (dword_1ECF57A80)
              {
                v37 = 0;
                do
                {
                  v38 = v35 + 12 * v37;
                  v39 = *(_QWORD *)v38;
                  if (HIDWORD(*(_QWORD *)v38))
                  {
                    v40 = ((16 * v39) ^ v39 & 0xFFFFFFF ^ 0xDEADBEEF) + 32 * ((16 * v39) ^ v39 & 0xFFFFFFF);
                    v41 = ((v39 >> 28) ^ 0xDEADBEEF) + 32 * (v39 >> 28);
                    v42 = v40 ^ ((v41 ^ v40) >> 11) ^ v41;
                    do
                      v43 = &v34[12 * (v42++ & v33)];
                    while (*((_DWORD *)v43 + 1));
                    v44 = *(_QWORD *)v38;
                    *((_DWORD *)v43 + 2) = *(_DWORD *)(v38 + 8);
                    *(_QWORD *)v43 = v44;
                  }
                  ++v37;
                }
                while (v37 != v36);
              }
              else
              {
                v36 = 0;
              }
              pas_small_large_map_hashtable_instance = (uint64_t)v34;
              dword_1ECF57A80 = v32;
              dword_1ECF57A84 = v33;
              HIDWORD(qword_1ECF57A88) = 0;
              pas_small_large_map_hashtable_instance_in_flux_stash = 0;
              qword_1ECF57A98 = 0;
              unk_1ECF57AA0 = 0;
              pas_large_utility_free_heap_deallocate_for_allocation_config(v35, 12 * v36);
            }
            *a2 = a1;
            a2[1] = a1 + 16 * v23;
            v29 = 8 * v30;
            goto LABEL_91;
          }
        }
        else if (*(_QWORD *)v22 != 1)
        {
          break;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (pas_large_map_hashtable_instance)
    {
      v24 = (v4 ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * (v4 ^ HIDWORD(a1));
      for (j = ((a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4))) ^ ((v24 ^ ((a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4)))) >> 11) ^ v24;
            ;
            ++j)
      {
        v26 = (uint64_t *)(pas_large_map_hashtable_instance + 24 * (j & dword_1EE34513C));
        v27 = *v26;
        if (v26[1])
        {
          if (v27 == a1)
          {
            v75 = *(_OWORD *)v26;
            v76 = v26[2];
            v26[1] = 0;
            v26[2] = 0;
            *v26 = 1;
            qword_1EE3451B8 = 0;
            qword_1EE345140 = (uint64_t)vadd_s32((int32x2_t)qword_1EE345140, (int32x2_t)0x1FFFFFFFFLL);
            if (6 * (int)qword_1EE345140 < dword_1EE345138 && dword_1EE345138 >= 0x11)
              pas_large_map_hashtable_rehash(dword_1EE345138 >> 1);
            if (a2)
            {
              *(_OWORD *)a2 = v75;
              v29 = v76;
              goto LABEL_91;
            }
            return;
          }
        }
        else if (v27 != 1)
        {
          if (!a2)
            return;
          break;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v5 = a1 & 0xFFFFFFFFFFFF0000;
  v6 = (a1 & 0xFFFF0000 ^ ((a1 & 0xFFFF0000) >> 4) ^ 0xDEADBEEF) + 32 * (a1 & 0xFFFF0000 ^ ((a1 & 0xFFFF0000) >> 4));
  v7 = (v4 ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * (v4 ^ HIDWORD(a1));
  v8 = v6 ^ ((v7 ^ v6) >> 11) ^ v7;
  for (k = v8; ; ++k)
  {
    v10 = (uint64_t *)(pas_tiny_large_map_hashtable_instance + 16 * (k & dword_1EE345154));
    v11 = *v10;
    v12 = v10[1];
    if (v12)
      break;
    if (v11 != 1)
      goto LABEL_17;
LABEL_4:
    ;
  }
  if (v11 != v5)
    goto LABEL_4;
  if (!*(_QWORD *)v12)
    goto LABEL_17;
  v13 = ((unsigned __int16)a1 ^ ((unsigned __int16)a1 >> 4) ^ 0xDEADBEEF)
      + 32 * ((unsigned __int16)a1 ^ ((unsigned __int16)a1 >> 4));
  for (m = v13 ^ (v13 >> 11) ^ 0xDEB66B58; ; ++m)
  {
    v15 = (unsigned int *)(*(_QWORD *)v12 + 5 * (m & *(_DWORD *)(v12 + 12)));
    v16 = *v15;
    v17 = (v16 | ((unint64_t)*((unsigned __int8 *)v15 + 4) << 32)) & 0xFFFFFFFFFFLL;
    if (v17 > 0xFF || (v16 & 0xFE) != 0)
      break;
    if (v16 != 1)
      goto LABEL_17;
LABEL_10:
    ;
  }
  if (16 * (v16 & 0xFFF) != (unsigned __int16)a1)
    goto LABEL_10;
  *((_BYTE *)v15 + 4) = 0;
  *v15 = 1;
  qword_1EE345198 = 0;
  v45 = vadd_s32(*(int32x2_t *)(v12 + 16), (int32x2_t)0x1FFFFFFFFLL);
  *(int32x2_t *)(v12 + 16) = v45;
  v46 = v45.i32[0];
  v47 = *(unsigned int *)(v12 + 8);
  if (6 * v45.i32[0] < v47 && v47 >= 0x11)
  {
    v49 = (*(_DWORD *)(v12 + 8) >> 1) - 1;
    v74 = v47 >> 1;
    v50 = 5 * (v47 >> 1);
    v51 = (char *)pas_large_utility_free_heap_allocate_for_allocation_config(v50, (uint64_t)"pas_tiny_large_map_second_level_hashtable/table");
    bzero(v51, v50);
    v52 = *(_QWORD *)v12;
    v53 = *(unsigned int *)(v12 + 8);
    if ((_DWORD)v53)
    {
      for (n = 0; n != v53; ++n)
      {
        v55 = (unsigned int *)(v52 + 5 * n);
        v56 = *v55 | ((unint64_t)*((unsigned __int8 *)v55 + 4) << 32);
        if (v56 >= 2)
        {
          v57 = (((16 * (v56 & 0xFFF)) ^ v56 & 0xFFF ^ 0xDEADBEEF) + 32 * ((16 * (v56 & 0xFFF)) ^ v56 & 0xFFF)) ^ ((((16 * (v56 & 0xFFF)) ^ v56 & 0xFFF ^ 0xDEADBEEF) + 32 * ((16 * (v56 & 0xFFF)) ^ v56 & 0xFFF)) >> 11) ^ 0xDEB66B58;
          do
            v58 = &v51[5 * (v57++ & v49)];
          while ((*(unsigned int *)v58 | ((unint64_t)v58[4] << 32)) > 1);
          v59 = *v55;
          v58[4] = *((_BYTE *)v55 + 4);
          *(_DWORD *)v58 = v59;
        }
      }
    }
    else
    {
      v53 = 0;
    }
    *(_QWORD *)v12 = v51;
    *(_DWORD *)(v12 + 8) = v74;
    *(_DWORD *)(v12 + 12) = v49;
    *(_DWORD *)(v12 + 20) = 0;
    pas_tiny_large_map_second_level_hashtable_in_flux_stash_instance = 0;
    qword_1EE345188 = 0;
    unk_1EE345190 = 0;
    pas_large_utility_free_heap_deallocate_for_allocation_config(v52, 5 * v53);
    v46 = *(_DWORD *)(v12 + 16);
  }
  if (v46)
    goto LABEL_90;
  if (!pas_tiny_large_map_hashtable_instance)
    goto LABEL_89;
  while (2)
  {
    v60 = (uint64_t *)(pas_tiny_large_map_hashtable_instance + 16 * (v8 & dword_1EE345154));
    v61 = *v60;
    if (!v60[1])
    {
      if (v61 != 1)
        goto LABEL_89;
      goto LABEL_72;
    }
    if (v61 != v5)
    {
LABEL_72:
      ++v8;
      continue;
    }
    break;
  }
  *(_OWORD *)v60 = xmmword_199123080;
  qword_1EE345178 = 0;
  qword_1EE345158 = (uint64_t)vadd_s32((int32x2_t)qword_1EE345158, (int32x2_t)0x1FFFFFFFFLL);
  if (6 * (int)qword_1EE345158 < dword_1EE345150 && dword_1EE345150 >= 0x11)
  {
    v63 = (unint64_t)dword_1EE345150 >> 1;
    v64 = (dword_1EE345150 >> 1) - 1;
    v65 = (char *)pas_large_utility_free_heap_allocate_for_allocation_config(16 * v63, (uint64_t)"pas_tiny_large_map_hashtable/table");
    bzero(v65, 16 * v63);
    v66 = pas_tiny_large_map_hashtable_instance;
    v67 = dword_1EE345150;
    if (dword_1EE345150)
    {
      v68 = 0;
      do
      {
        v69 = (_QWORD *)(v66 + 16 * v68);
        if (v69[1])
        {
          v70 = *v69 ^ (*v69 >> 4);
          v71 = (*v69 >> 36) ^ HIDWORD(*v69);
          v72 = ((v70 ^ 0xDEADBEEF) + 32 * v70) ^ ((((v71 ^ 0xDEADBEEF) + 32 * v71) ^ ((v70 ^ 0xDEADBEEF) + 32 * v70)) >> 11) ^ ((v71 ^ 0xDEADBEEF) + 32 * v71);
          do
            v73 = &v65[16 * (v72++ & v64)];
          while (*((_QWORD *)v73 + 1));
          *(_OWORD *)v73 = *(_OWORD *)v69;
        }
        ++v68;
      }
      while (v68 != v67);
    }
    else
    {
      v67 = 0;
    }
    pas_tiny_large_map_hashtable_instance = (uint64_t)v65;
    dword_1EE345150 = v63;
    dword_1EE345154 = v64;
    HIDWORD(qword_1EE345158) = 0;
    pas_tiny_large_map_hashtable_instance_in_flux_stash = 0;
    qword_1EE345168 = 0;
    unk_1EE345170 = 0;
    pas_large_utility_free_heap_deallocate_for_allocation_config(v66, 16 * v67);
  }
LABEL_89:
  pas_large_utility_free_heap_deallocate_for_allocation_config(*(_QWORD *)v12, 5 * *(unsigned int *)(v12 + 8));
  pas_utility_heap_deallocate(v12);
LABEL_90:
  *a2 = a1;
  a2[1] = ((v17 >> 8) & 0xFFF0) + a1;
  v29 = *(_QWORD *)(pas_heap_table + ((v17 >> 21) & 0x7FFF8));
LABEL_91:
  a2[2] = v29;
}

uint64_t pas_large_map_for_each_entry(uint64_t (*a1)(_QWORD *, uint64_t), uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t j;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];

  if (dword_1EE345138)
  {
    v4 = pas_large_map_hashtable_instance;
    for (i = 24 * dword_1EE345138; i; i -= 24)
    {
      v6 = v4 + i;
      v7 = *(_QWORD *)(v4 + i - 16);
      if (v7)
      {
        v8 = *(_QWORD *)(v6 - 8);
        v24[0] = *(_QWORD *)(v6 - 24);
        v24[1] = v7;
        v24[2] = v8;
        result = a1(v24, a2);
        if (!(_DWORD)result)
          return result;
        v4 = pas_large_map_hashtable_instance;
      }
    }
  }
  if (dword_1ECF57A80)
  {
    v10 = pas_small_large_map_hashtable_instance;
    for (j = 12 * dword_1ECF57A80; j; j -= 12)
    {
      v12 = *(_QWORD *)(v10 + j - 12);
      if (HIDWORD(v12))
      {
        v13 = *(unsigned int *)(v10 + j - 4);
        v23[0] = 16 * v12;
        v23[1] = v23[0] + 16 * HIDWORD(v12);
        v23[2] = 8 * v13;
        result = a1(v23, a2);
        if (!(_DWORD)result)
          return result;
        v10 = pas_small_large_map_hashtable_instance;
      }
    }
  }
  v14 = dword_1EE345150;
  if (!dword_1EE345150)
    return 1;
  while (1)
  {
    --v14;
    v15 = (uint64_t *)(pas_tiny_large_map_hashtable_instance + 16 * v14);
    v16 = v15[1];
    if (v16)
    {
      v17 = *(unsigned int *)(v16 + 8);
      if ((_DWORD)v17)
        break;
    }
LABEL_16:
    if (!v14)
      return 1;
  }
  v18 = *v15;
  v19 = 5 * v17 - 5;
  while (1)
  {
    v20 = *(unsigned int *)(*(_QWORD *)v16 + v19) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v16 + v19 + 4) << 32);
    if (v20 > 0xFF || (*(_DWORD *)(*(_QWORD *)v16 + v19) & 0xFELL) != 0)
    {
      v22[0] = 16 * (*(_DWORD *)(*(_QWORD *)v16 + v19) & 0xFFFLL) + v18;
      v22[1] = 16 * (v20 & 0xFFF) + v18 + ((v20 >> 8) & 0xFFF0);
      v22[2] = *(_QWORD *)(pas_heap_table + ((v20 >> 21) & 0x7FFF8));
      result = a1(v22, a2);
      if (!(_DWORD)result)
        return result;
    }
    v19 -= 5;
    if (v19 == -5)
      goto LABEL_16;
  }
}

void pas_large_map_hashtable_rehash(unsigned int a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  __int128 v16;

  v2 = a1 - 1;
  v3 = a1;
  v4 = pas_large_utility_free_heap_allocate_for_allocation_config(24 * a1, (uint64_t)"pas_large_map_hashtable/table");
  if (a1)
  {
    v5 = v3 - 1;
    do
    {
      v6 = v5;
      v7 = (_QWORD *)(v4 + 24 * v5);
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      --v5;
    }
    while (v6);
  }
  v8 = pas_large_map_hashtable_instance;
  v9 = dword_1EE345138;
  if (dword_1EE345138)
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)(v8 + 24 * v10);
      if (v11[1])
      {
        v12 = *v11 ^ (*v11 >> 4);
        v13 = (*v11 >> 36) ^ HIDWORD(*v11);
        v14 = ((v12 ^ 0xDEADBEEF) + 32 * v12) ^ ((((v13 ^ 0xDEADBEEF) + 32 * v13) ^ ((v12 ^ 0xDEADBEEF) + 32 * v12)) >> 11) ^ ((v13 ^ 0xDEADBEEF) + 32 * v13);
        do
          v15 = v4 + 24 * (v14++ & v2);
        while (*(_QWORD *)(v15 + 8));
        v16 = *(_OWORD *)v11;
        *(_QWORD *)(v15 + 16) = v11[2];
        *(_OWORD *)v15 = v16;
      }
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    v9 = 0;
  }
  pas_large_map_hashtable_instance = v4;
  dword_1EE345138 = a1;
  dword_1EE34513C = v2;
  HIDWORD(qword_1EE345140) = 0;
  pas_large_map_hashtable_instance_in_flux_stash = 0;
  qword_1EE3451A8 = 0;
  unk_1EE3451B0 = 0;
  pas_large_utility_free_heap_deallocate_for_allocation_config(v8, 24 * v9);
}

uint64_t pas_large_sharing_pool_allocate_and_commit(unint64_t a1, unint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23[97];
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v10 = (unsigned int *)timebase_info_ptr;
  if (!timebase_info_ptr)
  {
    get_timebase_info_slow();
    v11 = mach_approximate_time();
    v12 = timebase_info;
    v13 = *(unsigned int *)algn_1ECF57B54;
    if ((pas_get_epoch_first & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v11 = mach_approximate_time();
  v12 = *v10;
  v13 = v10[1];
  if ((pas_get_epoch_first & 1) == 0)
LABEL_3:
    pas_get_epoch_first = 1;
LABEL_4:
  v14 = v11 * v12 / v13;
  bzero(v23, 0x320uLL);
  v15 = try_splat(a1, a2, 1, v14, (uint64_t)v23, 0, a3, a4, a5);
  v16 = v15;
  if (a4 == 1)
  {
    if ((_DWORD)v15)
    {
      v17 = v26;
      if (v26 || pas_physical_page_sharing_pool_balance < 0)
      {
        v27 = 0uLL;
        v18 = *(unsigned int **)(a3 + 8);
        if (v18)
        {
          v27.i64[0] = *(_QWORD *)(a3 + 8);
          v19 = 1;
          if (!v26 || v18 == &pas_virtual_range_common_lock)
            goto LABEL_12;
        }
        else
        {
          v19 = 0;
          if (!v26)
            goto LABEL_12;
        }
        v27.i64[v19++] = (uint64_t)&pas_virtual_range_common_lock;
LABEL_12:
        pas_physical_page_sharing_pool_take(v17, 1u, (uint64_t)&v27, v19);
        commit_all(v23, a3);
      }
    }
  }
  v20 = 24 * v25;
  if (24 * v25)
  {
    v21 = v24;
    if (v24 && pas_deallocation_callback)
      pas_deallocation_callback(v24, 24 * v25, 0, 0);
    memset(&v27, 0, 48);
    initialize_config(&v27);
    pas_simple_large_free_heap_deallocate(&pas_bootstrap_free_heap, v21, v20 + v21, 0, &v27);
    pas_bootstrap_free_heap_num_allocated_object_bytes -= v20;
  }
  return v16;
}

uint64_t try_splat(unint64_t a1, unint64_t a2, int a3, unint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, int a8, unsigned int a9)
{
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t right_impl;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int *v89;
  BOOL v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  BOOL v162;
  unint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t i;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  void *v178;
  void *v179;
  BOOL v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  BOOL v185;
  uint64_t v186;
  unsigned int *v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  _QWORD *v198;
  size_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int *v204;
  uint64_t v205;
  unsigned int v206;
  int v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unsigned int v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  BOOL v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  BOOL v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  BOOL v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v242;
  unint64_t StatusReg;
  unsigned int *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  _QWORD *v250;
  int v251;
  int v252;
  _QWORD v253[3];
  _QWORD v254[4];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (a2 == a1)
    return 1;
  v247 = a7;
  v249 = a4;
  v250 = a6;
  v252 = a8;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v17 = &unk_1ECF57000;
  if (pas_large_sharing_tree)
    v18 = 8 * pas_large_sharing_tree == -pas_compact_heap_reservation_base;
  else
    v18 = 1;
  if (v18)
  {
    pas_large_sharing_participant_payload = 0u;
    *(_OWORD *)&byte_1ECF57AE0 = 0u;
    pas_page_sharing_pool_add_at_index((uint64_t *)pas_physical_page_sharing_pool, 4, dword_1ECF57BA0);
    v19 = pas_utility_heap_try_allocate_with_alignment(48, 1, "pas_large_sharing_node");
    *(_OWORD *)v19 = 0u;
    *(_OWORD *)(v19 + 16) = xmmword_19919FD20;
    *(_OWORD *)(v19 + 32) = xmmword_19919FD20;
    *(_DWORD *)(v19 + 12) = 7;
    pas_red_black_tree_insert((uint64_t)&pas_large_sharing_tree, (unsigned int *)v19, (uint64_t (*)(unsigned int *, uint64_t))node_compare_callback, pas_large_sharing_tree_jettisoned_nodes);
    v20 = pas_page_malloc_cached_alignment;
    if (pas_page_malloc_cached_alignment)
      goto LABEL_11;
LABEL_8:
    v20 = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = v20;
    v21 = 0;
    v22 = (_QWORD *)&unk_1ECF57000;
    v23 = (_QWORD *)&unk_1ECF57000;
    v24 = pas_large_sharing_tree;
    v25 = pas_compact_heap_reservation_base;
    if (pas_large_sharing_tree)
      goto LABEL_12;
    goto LABEL_9;
  }
  v20 = pas_page_malloc_cached_alignment;
  if (!pas_page_malloc_cached_alignment)
    goto LABEL_8;
LABEL_11:
  v21 = 0;
  v22 = &unk_1ECF57000;
  v23 = &unk_1ECF57000;
  v24 = pas_large_sharing_tree;
  v25 = pas_compact_heap_reservation_base;
  if (pas_large_sharing_tree)
  {
LABEL_12:
    v27 = (unsigned int *)(v25 + 8 * v24);
    v26 = a8;
    if (v27)
    {
      while (1)
      {
        v29 = *((_QWORD *)v27 + 2);
        if (v29 <= a1 && *((_QWORD *)v27 + 3) > a1)
          break;
        if (v29 < a1)
        {
          v28 = v27[1];
          if (!(_DWORD)v28)
            goto LABEL_22;
        }
        else
        {
          v28 = *v27;
          if (!(_DWORD)v28)
          {
LABEL_22:
            v21 = 0;
            goto LABEL_24;
          }
        }
        v27 = (unsigned int *)(v25 + 8 * v28);
        if (!v27)
          goto LABEL_22;
      }
      v21 = v27;
    }
    goto LABEL_24;
  }
LABEL_9:
  v26 = a8;
LABEL_24:
  v248 = v22[349];
  v245 = v23[350];
  v246 = a5;
  if ((a3 == 2 || a3 == 1 && (v21[3] & 1) != 0) && a2 - a1 < v20)
  {
    v31 = *((_QWORD *)v21 + 3);
    if (v31 - *((_QWORD *)v21 + 2) == v20)
    {
      if (v31 >= a2)
      {
        remove_from_min_heap((uint64_t *)v21[3]);
        v37 = *((_QWORD *)v21 + 4);
        if (v37 <= v249)
          v37 = v249;
        if (a3 == 1)
          v38 = a2 - a1;
        else
          v38 = a1 - a2;
        v39 = *((_QWORD *)v21 + 5) + v38;
        *((_QWORD *)v21 + 4) = v37;
        *((_QWORD *)v21 + 5) = v39;
        update_min_heap((uint64_t)v21);
        if (v248 != v22[349])
          goto LABEL_490;
        goto LABEL_489;
      }
      v32 = v21[1];
      if ((_DWORD)v32 && (v33 = (unsigned int *)(v25 + 8 * v32)) != 0)
      {
        do
        {
          v34 = (unint64_t)v33;
          v35 = *v33;
          v33 = (unsigned int *)(v25 + 8 * v35);
          if ((_DWORD)v35)
            v36 = v33 == 0;
          else
            v36 = 1;
        }
        while (!v36);
      }
      else
      {
        v40 = v21[2];
        if (v40 >= 8)
          v41 = v25;
        else
          v41 = 0;
        v34 = (v41 + v40) & 0xFFFFFFFFFFFFFFFELL;
        if (v34)
        {
          v42 = v21;
          do
          {
            v43 = *(unsigned int *)(v34 + 4);
            if ((_DWORD)v43)
              v44 = v25 + 8 * v43;
            else
              v44 = 0;
            if (v42 != (unsigned int *)v44)
              break;
            v42 = (unsigned int *)v34;
            v45 = *(unsigned int *)(v34 + 8);
            v46 = v45 >= 8 ? v25 : 0;
            v34 = (v46 + v45) & 0xFFFFFFFFFFFFFFFELL;
          }
          while (v34);
        }
      }
      if (*(_QWORD *)(v34 + 24) - *(_QWORD *)(v34 + 16) == v20
        && ((a3 & 0xFFFFFFFE) == 2 || (*(_BYTE *)(v34 + 12) & 1) != 0))
      {
        remove_from_min_heap((uint64_t *)v21[3]);
        remove_from_min_heap((uint64_t *)*(unsigned int *)(v34 + 12));
        v74 = *((_QWORD *)v21 + 4);
        if (v74 <= v249)
          v74 = v249;
        *((_QWORD *)v21 + 4) = v74;
        v75 = *(_QWORD *)(v34 + 32);
        if (v75 <= v249)
          v75 = v249;
        *(_QWORD *)(v34 + 32) = v75;
        v77 = *((_QWORD *)v21 + 2);
        v76 = *((_QWORD *)v21 + 3);
        if (v77 == v76)
        {
          v78 = 0;
          v79 = 0;
        }
        else
        {
          v78 = 0;
          v79 = 0;
          if (a2 > v77)
          {
            v80 = v248;
            if (v76 > a1)
            {
              if (v77 <= a1)
                v78 = a1;
              else
                v78 = *((_QWORD *)v21 + 2);
              if (v76 >= a2)
                v79 = a2;
              else
                v79 = *((_QWORD *)v21 + 3);
            }
LABEL_125:
            v81 = v79 - v78;
            if (a3 != 1)
              v81 = -(uint64_t)v81;
            *((_QWORD *)v21 + 5) += v81;
            v83 = *(_QWORD *)(v34 + 16);
            v82 = *(_QWORD *)(v34 + 24);
            if (v83 == v82)
            {
              v84 = 0;
              v85 = 0;
            }
            else
            {
              v84 = 0;
              v85 = 0;
              if (a2 > v83 && v82 > a1)
              {
                if (v83 <= a1)
                  v84 = a1;
                else
                  v84 = *(_QWORD *)(v34 + 16);
                if (v82 >= a2)
                  v85 = a2;
                else
                  v85 = *(_QWORD *)(v34 + 24);
              }
            }
            v86 = v85 - v84;
            if (a3 != 1)
              v86 = -(uint64_t)v86;
            *(_QWORD *)(v34 + 40) += v86;
            update_min_heap((uint64_t)v21);
            update_min_heap(v34);
            if (v80 != v22[349])
              goto LABEL_490;
            goto LABEL_489;
          }
        }
        v80 = v248;
        goto LABEL_125;
      }
    }
  }
  v47 = *((_QWORD *)v21 + 2);
  if (v47 >= a1)
  {
LABEL_145:
    v51 = (unint64_t)v21;
    goto LABEL_146;
  }
  if (((v20 - 1) & a1) != 0)
  {
    v48 = a1 & -(uint64_t)v20;
    if (v47 < v48)
    {
      if (*((_QWORD *)v21 + 3) <= v48)
      {
        v56 = v21[1];
        if ((_DWORD)v56 && (v57 = (unsigned int *)(v25 + 8 * v56)) != 0)
        {
          do
          {
            v21 = v57;
            v58 = *v57;
            v57 = (unsigned int *)(v25 + 8 * v58);
            if ((_DWORD)v58)
              v59 = v57 == 0;
            else
              v59 = 1;
          }
          while (!v59);
        }
        else
        {
          v67 = v21[2];
          if (v67 >= 8)
            v68 = v25;
          else
            v68 = 0;
          v69 = (v68 + v67) & 0xFFFFFFFFFFFFFFFELL;
          if (v69)
          {
            while (1)
            {
              v70 = *(unsigned int *)(v69 + 4);
              v71 = (_DWORD)v70 ? v25 + 8 * v70 : 0;
              if (v21 != (unsigned int *)v71)
                break;
              v21 = (unsigned int *)v69;
              v72 = *(unsigned int *)(v69 + 8);
              if (v72 >= 8)
                v73 = v25;
              else
                v73 = 0;
              v69 = (v73 + v72) & 0xFFFFFFFFFFFFFFFELL;
              if (!v69)
                goto LABEL_109;
            }
            v21 = (unsigned int *)v69;
          }
          else
          {
LABEL_109:
            v21 = 0;
          }
        }
      }
      else
      {
        right_impl = split_node_and_get_right_impl((uint64_t)v21, v48);
        v26 = a8;
        v21 = (unsigned int *)right_impl;
      }
    }
    v87 = (a1 + v20 - 1) & -(uint64_t)v20;
    if (*((_QWORD *)v21 + 2) < v87)
    {
      if (*((_QWORD *)v21 + 3) > v87)
      {
        split_node_and_get_right_impl((uint64_t)v21, v87);
        v26 = a8;
      }
      goto LABEL_145;
    }
    v104 = *v21;
    if ((_DWORD)v104)
    {
      v105 = pas_compact_heap_reservation_base + 8 * v104;
      if (v105)
      {
        do
        {
          v51 = v105;
          v106 = *(unsigned int *)(v105 + 4);
          v105 = pas_compact_heap_reservation_base + 8 * v106;
          if ((_DWORD)v106)
            v107 = v105 == 0;
          else
            v107 = 1;
        }
        while (!v107);
        goto LABEL_146;
      }
    }
    v118 = v21[2];
    if (v118 >= 8)
      v119 = pas_compact_heap_reservation_base;
    else
      v119 = 0;
    v62 = (unsigned int *)((v119 + v118) & 0xFFFFFFFFFFFFFFFELL);
    if (v62)
    {
      while (1)
      {
        v120 = *v62;
        if (!(_DWORD)v120 || v21 != (unsigned int *)(pas_compact_heap_reservation_base + 8 * v120))
          break;
        v51 = 0;
        v21 = v62;
        v122 = v62[2];
        if (v122 >= 8)
          v123 = pas_compact_heap_reservation_base;
        else
          v123 = 0;
        v62 = (unsigned int *)((v123 + v122) & 0xFFFFFFFFFFFFFFFELL);
        if (!v62)
          goto LABEL_146;
      }
LABEL_259:
      v51 = (unint64_t)v62;
      goto LABEL_146;
    }
    goto LABEL_258;
  }
  if (*((_QWORD *)v21 + 3) > a1)
  {
    v50 = split_node_and_get_right_impl((uint64_t)v21, a1);
    v26 = a8;
    v51 = v50;
    goto LABEL_146;
  }
  v52 = v21[1];
  if (!(_DWORD)v52 || (v53 = (unsigned int *)(v25 + 8 * v52)) == 0)
  {
    v60 = v21[2];
    if (v60 >= 8)
      v61 = v25;
    else
      v61 = 0;
    v62 = (unsigned int *)((v61 + v60) & 0xFFFFFFFFFFFFFFFELL);
    if (v62)
    {
      while (1)
      {
        v63 = v62[1];
        v64 = (_DWORD)v63 ? v25 + 8 * v63 : 0;
        if (v21 != (unsigned int *)v64)
          goto LABEL_259;
        v51 = 0;
        v21 = v62;
        v65 = v62[2];
        if (v65 >= 8)
          v66 = v25;
        else
          v66 = 0;
        v62 = (unsigned int *)((v66 + v65) & 0xFFFFFFFFFFFFFFFELL);
        if (!v62)
          goto LABEL_146;
      }
    }
LABEL_258:
    v51 = 0;
    goto LABEL_146;
  }
  do
  {
    v51 = (unint64_t)v53;
    v54 = *v53;
    v53 = (unsigned int *)(v25 + 8 * v54);
    if ((_DWORD)v54)
      v55 = v53 == 0;
    else
      v55 = 1;
  }
  while (!v55);
LABEL_146:
  v88 = a2 - 1;
  v89 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * pas_large_sharing_tree);
  if (pas_large_sharing_tree)
    v90 = v89 == 0;
  else
    v90 = 1;
  if (v90)
  {
LABEL_151:
    v89 = 0;
  }
  else
  {
    do
    {
      v97 = *((_QWORD *)v89 + 2);
      if (v97 <= v88 && *((_QWORD *)v89 + 3) > v88)
        break;
      if (v97 >= v88)
      {
        v96 = *v89;
        if (!(_DWORD)v96)
          goto LABEL_151;
      }
      else
      {
        v96 = v89[1];
        if (!(_DWORD)v96)
          goto LABEL_151;
      }
      v89 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v96);
    }
    while (v89);
  }
  v91 = *((_QWORD *)v89 + 3);
  if (v91 > a2)
  {
    if (((v20 - 1) & a2) == 0)
    {
      v94 = a3 - 2;
      if (*((_QWORD *)v89 + 2) >= a2)
      {
        v114 = *v89;
        if ((_DWORD)v114)
        {
          v115 = pas_compact_heap_reservation_base + 8 * v114;
          if (v115)
          {
            do
            {
              v99 = v115;
              v116 = *(unsigned int *)(v115 + 4);
              v115 = pas_compact_heap_reservation_base + 8 * v116;
              if ((_DWORD)v116)
                v117 = v115 == 0;
              else
                v117 = 1;
            }
            while (!v117);
LABEL_281:
            v149 = *(unsigned int *)(v99 + 4);
            v101 = pas_compact_heap_reservation_base;
            v102 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v149);
            if ((_DWORD)v149)
              v150 = v102 == 0;
            else
              v150 = 1;
            if (!v150)
              goto LABEL_304;
LABEL_286:
            v151 = *(unsigned int *)(v99 + 8);
            if (v151 >= 8)
              v152 = v101;
            else
              v152 = 0;
            v153 = (v152 + v151) & 0xFFFFFFFFFFFFFFFELL;
            if (v153)
            {
              v154 = v99;
              do
              {
                v155 = *(unsigned int *)(v153 + 4);
                if ((_DWORD)v155)
                  v156 = v101 + 8 * v155;
                else
                  v156 = 0;
                if (v154 != v156)
                  break;
                v154 = v153;
                v157 = *(unsigned int *)(v153 + 8);
                v158 = v157 >= 8 ? v101 : 0;
                v153 = (v158 + v157) & 0xFFFFFFFFFFFFFFFELL;
              }
              while (v153);
            }
            goto LABEL_309;
          }
        }
        v135 = v89[2];
        if (v135 >= 8)
          v136 = pas_compact_heap_reservation_base;
        else
          v136 = 0;
        v137 = (unsigned int *)((v136 + v135) & 0xFFFFFFFFFFFFFFFELL);
        if (v137)
        {
          while (1)
          {
            v138 = *v137;
            if (!(_DWORD)v138 || v89 != (unsigned int *)(pas_compact_heap_reservation_base + 8 * v138))
              break;
            v99 = 0;
            v89 = v137;
            v140 = v137[2];
            if (v140 >= 8)
              v141 = pas_compact_heap_reservation_base;
            else
              v141 = 0;
            v137 = (unsigned int *)((v141 + v140) & 0xFFFFFFFFFFFFFFFELL);
            if (!v137)
              goto LABEL_281;
          }
LABEL_300:
          v99 = (uint64_t)v137;
          v159 = v137[1];
          v101 = pas_compact_heap_reservation_base;
          v102 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v159);
          if ((_DWORD)v159)
            v160 = v102 == 0;
          else
            v160 = 1;
          if (v160)
            goto LABEL_286;
          goto LABEL_304;
        }
        goto LABEL_273;
      }
      split_node_and_get_right_impl((uint64_t)v89, a2);
      v26 = a8;
      goto LABEL_280;
    }
    v92 = -(uint64_t)v20;
    v93 = (v20 + v88) & -(uint64_t)v20;
    if (*((_QWORD *)v89 + 2) >= v93)
    {
      v108 = *v89;
      if (!(_DWORD)v108 || (v109 = pas_compact_heap_reservation_base + 8 * v108) == 0)
      {
        v124 = v89[2];
        if (v124 >= 8)
          v125 = pas_compact_heap_reservation_base;
        else
          v125 = 0;
        v126 = (unsigned int *)((v125 + v124) & 0xFFFFFFFFFFFFFFFELL);
        if (v126)
        {
          v94 = a3 - 2;
          while (1)
          {
            v127 = *v126;
            if (!(_DWORD)v127 || v89 != (unsigned int *)(pas_compact_heap_reservation_base + 8 * v127))
              break;
            v89 = v126;
            v129 = v126[2];
            if (v129 >= 8)
              v130 = pas_compact_heap_reservation_base;
            else
              v130 = 0;
            v126 = (unsigned int *)((v130 + v129) & 0xFFFFFFFFFFFFFFFELL);
            if (!v126)
            {
              v89 = 0;
              v95 = a2 & v92;
              if (MEMORY[0x10] < (a2 & v92))
                goto LABEL_191;
              goto LABEL_280;
            }
          }
          v89 = v126;
          v95 = a2 & v92;
          if (*((_QWORD *)v126 + 2) < (a2 & v92))
            goto LABEL_191;
          goto LABEL_280;
        }
        v89 = 0;
        v94 = a3 - 2;
        v95 = a2 & v92;
        if (MEMORY[0x10] < (a2 & v92))
          goto LABEL_191;
LABEL_280:
        v99 = (uint64_t)v89;
        goto LABEL_281;
      }
      do
      {
        v89 = (unsigned int *)v109;
        v110 = *(unsigned int *)(v109 + 4);
        v109 = pas_compact_heap_reservation_base + 8 * v110;
        if ((_DWORD)v110)
          v111 = v109 == 0;
        else
          v111 = 1;
      }
      while (!v111);
    }
    else if (v91 > v93)
    {
      split_node_and_get_right_impl((uint64_t)v89, v93);
      v26 = a8;
      v94 = a3 - 2;
      v95 = a2 & v92;
      if (*((_QWORD *)v89 + 2) >= (a2 & v92))
        goto LABEL_280;
LABEL_191:
      if (*((_QWORD *)v89 + 3) > v95)
      {
        v99 = split_node_and_get_right_impl((uint64_t)v89, v95);
        v26 = a8;
        v112 = *(unsigned int *)(v99 + 4);
        v101 = pas_compact_heap_reservation_base;
        v102 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v112);
        if ((_DWORD)v112)
          v113 = v102 == 0;
        else
          v113 = 1;
        if (v113)
          goto LABEL_286;
        goto LABEL_304;
      }
      v131 = v89[1];
      if ((_DWORD)v131)
      {
        v132 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v131);
        if (v132)
        {
          do
          {
            v99 = (uint64_t)v132;
            v133 = *v132;
            v132 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v133);
            if ((_DWORD)v133)
              v134 = v132 == 0;
            else
              v134 = 1;
          }
          while (!v134);
          goto LABEL_281;
        }
      }
      v142 = v89[2];
      if (v142 >= 8)
        v143 = pas_compact_heap_reservation_base;
      else
        v143 = 0;
      v137 = (unsigned int *)((v143 + v142) & 0xFFFFFFFFFFFFFFFELL);
      if (v137)
      {
        while (1)
        {
          v144 = v137[1];
          v145 = (_DWORD)v144 ? pas_compact_heap_reservation_base + 8 * v144 : 0;
          if (v89 != (unsigned int *)v145)
            goto LABEL_300;
          v99 = 0;
          v89 = v137;
          v146 = v137[2];
          if (v146 >= 8)
            v147 = pas_compact_heap_reservation_base;
          else
            v147 = 0;
          v137 = (unsigned int *)((v147 + v146) & 0xFFFFFFFFFFFFFFFELL);
          if (!v137)
            goto LABEL_281;
        }
      }
LABEL_273:
      v99 = 0;
      v101 = pas_compact_heap_reservation_base;
      v102 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * MEMORY[4]);
      if (MEMORY[4])
        v148 = v102 == 0;
      else
        v148 = 1;
      if (v148)
        goto LABEL_286;
      goto LABEL_304;
    }
    v94 = a3 - 2;
    v95 = a2 & v92;
    if (*((_QWORD *)v89 + 2) < (a2 & v92))
      goto LABEL_191;
    goto LABEL_280;
  }
  v99 = (uint64_t)v89;
  v94 = a3 - 2;
  v100 = v89[1];
  v101 = pas_compact_heap_reservation_base;
  v102 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v100);
  if ((_DWORD)v100)
    v103 = v102 == 0;
  else
    v103 = 1;
  if (v103)
    goto LABEL_286;
  do
  {
LABEL_304:
    v153 = (unint64_t)v102;
    v161 = *v102;
    v102 = (unsigned int *)(v101 + 8 * v161);
    if ((_DWORD)v161)
      v162 = v102 == 0;
    else
      v162 = 1;
  }
  while (!v162);
LABEL_309:
  v244 = (unsigned int *)v99;
  if (a3)
  {
    if (a3 != 1 || (v251 = 1, v51 == v153))
    {
LABEL_414:
      if (v51 != v153)
      {
        v208 = (2 * (v26 & 1)) & 0xFB | (4 * (a9 & 1));
        v209 = v51;
        while (1)
        {
          remove_from_min_heap((uint64_t *)*(unsigned int *)(v209 + 12));
          v210 = *(_QWORD *)(v209 + 32);
          if (v210 <= v249)
            v210 = v249;
          *(_QWORD *)(v209 + 32) = v210;
          if (v94 < 2)
            break;
          if (a3 != 1)
          {
            if (!a3)
            {
              v212 = *(_QWORD *)(v209 + 16);
              v211 = *(_QWORD *)(v209 + 24);
              if (v212 == v211 || v212 >= a1 && v211 <= a2)
              {
                v213 = *(_DWORD *)(v209 + 12) & 0xFFFFFFFE;
                goto LABEL_446;
              }
            }
            goto LABEL_447;
          }
          *(_DWORD *)(v209 + 12) |= 1u;
          v227 = *(_QWORD *)(v209 + 16);
          v228 = *(_QWORD *)(v209 + 24);
          if (v227 <= a1)
            v229 = a1;
          else
            v229 = *(_QWORD *)(v209 + 16);
          if (v228 >= a2)
            v230 = a2;
          else
            v230 = *(_QWORD *)(v209 + 24);
          if (v228 <= a1)
          {
            v229 = 0;
            v230 = 0;
          }
          if (a2 <= v227)
          {
            v229 = 0;
            v230 = 0;
          }
          v231 = v227 == v228;
          if (v227 == v228)
            v232 = 0;
          else
            v232 = v229;
          if (v231)
            v233 = 0;
          else
            v233 = v230;
          *(_QWORD *)(v209 + 40) += v233 - v232;
          update_min_heap(v209);
          v222 = *(unsigned int *)(v209 + 4);
          v223 = v17[317];
          if (!(_DWORD)v222)
          {
LABEL_472:
            v234 = *(unsigned int *)(v209 + 8);
            if (v234 >= 8)
              v235 = v223;
            else
              v235 = 0;
            v236 = (v235 + v234) & 0xFFFFFFFFFFFFFFFELL;
            if (v236)
            {
              while (1)
              {
                v237 = *(unsigned int *)(v236 + 4);
                v238 = (_DWORD)v237 ? v223 + 8 * v237 : 0;
                if (v209 != v238)
                  break;
                v209 = v236;
                v239 = *(unsigned int *)(v236 + 8);
                if (v239 >= 8)
                  v240 = v223;
                else
                  v240 = 0;
                v236 = (v240 + v239) & 0xFFFFFFFFFFFFFFFELL;
                if (!v236)
                  goto LABEL_484;
              }
              v209 = v236;
            }
            else
            {
LABEL_484:
              v209 = 0;
            }
            goto LABEL_417;
          }
LABEL_448:
          v224 = (unsigned int *)(v223 + 8 * v222);
          if (!v224)
            goto LABEL_472;
          do
          {
            v209 = (uint64_t)v224;
            v225 = *v224;
            v224 = (unsigned int *)(v223 + 8 * v225);
            if ((_DWORD)v225)
              v226 = v224 == 0;
            else
              v226 = 1;
          }
          while (!v226);
LABEL_417:
          if (v209 == v153)
            goto LABEL_485;
        }
        v214 = *(_QWORD *)(v209 + 16);
        v215 = *(_QWORD *)(v209 + 24);
        if (v214 <= a1)
          v216 = a1;
        else
          v216 = *(_QWORD *)(v209 + 16);
        if (v215 >= a2)
          v217 = a2;
        else
          v217 = *(_QWORD *)(v209 + 24);
        if (a2 <= v214 || v215 <= a1)
        {
          v216 = 0;
          v217 = 0;
        }
        v219 = v214 == v215;
        if (v214 == v215)
          v220 = 0;
        else
          v220 = v216;
        if (v219)
          v221 = 0;
        else
          v221 = v217;
        *(_QWORD *)(v209 + 40) += v220 - v221;
        if (a3 == 3)
        {
          v213 = v208 | *(_DWORD *)(v209 + 12) & 0xFFFFFFF9;
LABEL_446:
          *(_DWORD *)(v209 + 12) = v213;
        }
LABEL_447:
        update_min_heap(v209);
        v222 = *(unsigned int *)(v209 + 4);
        v223 = v17[317];
        if (!(_DWORD)v222)
          goto LABEL_472;
        goto LABEL_448;
      }
LABEL_485:
      while (v51)
      {
        if (*(_QWORD *)(v51 + 16) >= a2)
          break;
        v51 = merge_if_possible((unsigned int *)v51);
      }
      if (v248 != qword_1ECF57AE8)
        goto LABEL_490;
LABEL_489:
      if ((v245 == 0) != (pas_large_sharing_min_heap_instance[0] != 0))
        return 1;
LABEL_490:
      pas_page_sharing_pool_did_create_delta(pas_physical_page_sharing_pool, 4);
      return 1;
    }
  }
  else
  {
    v251 = 0;
    if (v51 == v153)
      goto LABEL_414;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v163 = v51;
  while (2)
  {
    if ((*(_DWORD *)(v163 + 12) & 1) == a3
      || (v178 = *(void **)(v163 + 16), a3 != 1)
      && (v179 = *(void **)(v163 + 24), v178 != v179)
      && ((unint64_t)v178 >= a1 ? (v180 = (unint64_t)v179 > a2) : (v180 = 1), v180))
    {
      v165 = *(unsigned int *)(v163 + 4);
      v166 = v17[317];
      v167 = (unsigned int *)(v166 + 8 * v165);
      if ((_DWORD)v165)
        v168 = v167 == 0;
      else
        v168 = 1;
      if (v168)
      {
        v169 = *(unsigned int *)(v163 + 8);
        if (v169 >= 8)
          v170 = v17[317];
        else
          v170 = 0;
        for (i = (v170 + v169) & 0xFFFFFFFFFFFFFFFELL; i; i = (v175 + v174) & 0xFFFFFFFFFFFFFFFELL)
        {
          v172 = *(unsigned int *)(i + 4);
          if ((_DWORD)v172)
            v173 = v166 + 8 * v172;
          else
            v173 = 0;
          if (v163 != v173)
            break;
          v163 = i;
          v174 = *(unsigned int *)(i + 8);
          v175 = v174 >= 8 ? v17[317] : 0;
        }
      }
      else
      {
        do
        {
          i = (unint64_t)v167;
          v176 = *v167;
          v167 = (unsigned int *)(v166 + 8 * v176);
          if ((_DWORD)v176)
            v177 = v167 == 0;
          else
            v177 = 1;
        }
        while (!v177);
      }
      goto LABEL_316;
    }
    i = v153;
    v181 = *(_QWORD *)(v163 + 16);
    if (v163 == v153)
    {
LABEL_386:
      if (v26 == 1)
        goto LABEL_401;
LABEL_387:
      if (v26)
        goto LABEL_316;
      v198 = v17;
      v199 = v181 - (_QWORD)v178;
      if ((v251 & 1) == 0)
      {
        while (madvise(v178, v199, 7) == -1 && *__error() == 35)
          ;
        v250[131] += v199;
        v17 = v198;
        v94 = a3 - 2;
        goto LABEL_413;
      }
      if (!pas_physical_page_sharing_pool_balancing_enabled)
      {
LABEL_396:
        v17 = v198;
        v94 = a3 - 2;
        goto LABEL_316;
      }
      while (1)
      {
        v200 = pas_physical_page_sharing_pool_balance;
        v201 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
        if (v201 != v200)
          break;
        if (__stlxr(pas_physical_page_sharing_pool_balance - v199, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        {
          goto LABEL_394;
        }
        v202 = 1;
LABEL_395:
        __dmb(0xBu);
        if (v202)
          goto LABEL_396;
      }
      __clrex();
LABEL_394:
      v202 = 0;
      goto LABEL_395;
    }
    v182 = v17[317];
    i = v163;
    v183 = *(_QWORD *)(v163 + 16);
    while (1)
    {
      if (a3 == 1)
      {
        v181 = *(_QWORD *)(i + 24);
        goto LABEL_357;
      }
      v181 = *(_QWORD *)(i + 16);
      v184 = *(_QWORD *)(i + 24);
      if (v181 != v184)
      {
        v185 = v181 < a1 || v184 > a2;
        v181 = *(_QWORD *)(i + 24);
        if (v185)
          break;
      }
LABEL_357:
      v186 = *(unsigned int *)(i + 4);
      v187 = (unsigned int *)(v182 + 8 * v186);
      if ((_DWORD)v186)
        v188 = v187 == 0;
      else
        v188 = 1;
      if (v188)
      {
        v189 = *(unsigned int *)(i + 8);
        if (v189 >= 8)
          v190 = v17[317];
        else
          v190 = 0;
        v191 = (v190 + v189) & 0xFFFFFFFFFFFFFFFELL;
        if (v191)
        {
          while (1)
          {
            v192 = *(unsigned int *)(v191 + 4);
            v193 = (_DWORD)v192 ? v182 + 8 * v192 : 0;
            if (i != v193)
              break;
            i = v191;
            v194 = *(unsigned int *)(v191 + 8);
            if (v194 >= 8)
              v195 = v17[317];
            else
              v195 = 0;
            v191 = (v195 + v194) & 0xFFFFFFFFFFFFFFFELL;
            if (!v191)
              goto LABEL_374;
          }
          i = v191;
          if (v191 == v153)
          {
LABEL_385:
            i = v153;
            goto LABEL_386;
          }
        }
        else
        {
LABEL_374:
          i = 0;
          if (!v153)
            goto LABEL_385;
        }
      }
      else
      {
        do
        {
          i = (unint64_t)v187;
          v196 = *v187;
          v187 = (unsigned int *)(v182 + 8 * v196);
          if ((_DWORD)v196)
            v197 = v187 == 0;
          else
            v197 = 1;
        }
        while (!v197);
        if (i == v153)
          goto LABEL_385;
      }
      v183 = v181;
      if ((*(_DWORD *)(i + 12) & 1) == a3)
        goto LABEL_386;
    }
    v181 = v183;
    if (v26 != 1)
      goto LABEL_387;
LABEL_401:
    if (!v251)
    {
      v203 = v250[134] - 1;
      while (v203 != -1)
      {
        v204 = *(unsigned int **)(v250[133] + 8 * v203--);
        if (v204 == &pas_virtual_range_common_lock)
          goto LABEL_412;
      }
      v205 = v250[132];
      if (v205)
        goto LABEL_411;
      v206 = *(_DWORD *)(StatusReg + 24);
      while (2)
      {
        if (__ldaxr(&pas_virtual_range_common_lock))
        {
          __clrex();
          v242 = (_QWORD *)v250[135];
          if (v242 && !*v242)
            *v242 = &pas_virtual_range_common_lock;
          goto LABEL_495;
        }
        if (__stxr(v206, &pas_virtual_range_common_lock))
          continue;
        break;
      }
      v205 = v250[132];
LABEL_411:
      v250[132] = v205 + 1;
LABEL_412:
      v254[0] = v178;
      v254[1] = v181;
      v254[2] = &pas_virtual_range_common_lock;
      v254[3] = a9;
      pas_deferred_decommit_log_add_already_locked((uint64_t)v250, v254, 1);
LABEL_413:
      v26 = v252;
LABEL_316:
      v163 = i;
      if (i == v153)
        goto LABEL_414;
      continue;
    }
    break;
  }
  v253[1] = v181;
  v253[0] = v178;
  v253[2] = a9;
  v164 = pas_large_free_heap_deferred_commit_log_add(v246, v253, v247);
  v26 = v252;
  if ((v164 & 1) != 0)
    goto LABEL_316;
LABEL_495:
  merge_if_possible((unsigned int *)v51);
  if (v244 != (unsigned int *)v51)
    merge_if_possible(v244);
  return 0;
}

void pas_large_sharing_pool_compute_summary(unint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned int v10;
  uint64_t v12;
  unsigned int *v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  a5[10] = 0;
  *((_OWORD *)a5 + 3) = 0u;
  *((_OWORD *)a5 + 4) = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  *((_OWORD *)a5 + 2) = 0u;
  *(_OWORD *)a5 = 0u;
  if (!a4)
  {
    v10 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v10, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v12 = pas_compact_heap_reservation_base;
  v13 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * pas_large_sharing_tree);
  if (pas_large_sharing_tree)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    while (1)
    {
      v18 = *((_QWORD *)v13 + 2);
      if (v18 <= a1 && *((_QWORD *)v13 + 3) > a1)
        break;
      if (v18 < a1)
      {
        v17 = v13[1];
        if (!(_DWORD)v17)
          goto LABEL_12;
      }
      else
      {
        v17 = *v13;
        if (!(_DWORD)v17)
          goto LABEL_12;
      }
      v13 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v17);
      if (!v13)
        goto LABEL_12;
    }
    if (v18 < a2)
    {
      v20 = v13 + 4;
      v22 = a5[6];
      v21 = a5[7];
      v24 = a5[4];
      v23 = a5[5];
      v25 = a5[3];
      v27 = *a5;
      v26 = a5[1];
      while (1)
      {
        v28 = *((_QWORD *)v13 + 3);
        if (v18 <= a1)
          v29 = a1;
        else
          v29 = v18;
        if (v28 >= a2)
          v30 = a2;
        else
          v30 = *((_QWORD *)v13 + 3);
        v32 = v28 <= a1 || a1 == a2 || v18 == v28;
        if (v32)
          v33 = 0;
        else
          v33 = v29;
        if (v32)
          v34 = 0;
        else
          v34 = v30;
        v35 = v34 - v33;
        if ((v13[3] & 1) != 0)
        {
          v25 += v35;
          a5[3] = v25;
          v36 = *((_QWORD *)v13 + 5);
          if (!v36)
          {
LABEL_54:
            v27 += v35;
            *a5 = v27;
            if ((v13[3] & 1) != 0)
            {
              v22 += v35;
              a5[6] = v22;
            }
            else
            {
              v21 += v35;
              a5[7] = v21;
            }
            goto LABEL_62;
          }
        }
        else
        {
          v24 += v35;
          a5[4] = v24;
          v36 = *((_QWORD *)v13 + 5);
          if (!v36)
            goto LABEL_54;
        }
        if (a3 == 2)
        {
          v36 = 0;
        }
        else
        {
          if (a3 == 1)
          {
            v36 = v35;
LABEL_60:
            v35 = 0;
            goto LABEL_61;
          }
          if (a3)
          {
            v36 = 0;
            goto LABEL_60;
          }
          v35 = *((_QWORD *)v13 + 3) - (v36 + *v20);
        }
LABEL_61:
        v26 += v36;
        v27 += v35;
        *a5 = v27;
        a5[1] = v26;
        v23 += v35;
        a5[5] = v23;
LABEL_62:
        v37 = v13[1];
        if ((_DWORD)v37 && (v38 = (unsigned int *)(v12 + 8 * v37)) != 0)
        {
          do
          {
            v13 = v38;
            v39 = *v38;
            v38 = (unsigned int *)(v12 + 8 * v39);
            if ((_DWORD)v39)
              v40 = v38 == 0;
            else
              v40 = 1;
          }
          while (!v40);
          v20 = v13 + 4;
          v18 = *((_QWORD *)v13 + 2);
          if (v18 >= a2)
            break;
        }
        else
        {
          v41 = v13[2];
          if (v41 >= 8)
            v42 = v12;
          else
            v42 = 0;
          v43 = (v42 + v41) & 0xFFFFFFFFFFFFFFFELL;
          if (!v43)
            break;
          while (1)
          {
            v44 = *(unsigned int *)(v43 + 4);
            v45 = (_DWORD)v44 ? v12 + 8 * v44 : 0;
            if (v13 != (unsigned int *)v45)
              break;
            v13 = (unsigned int *)v43;
            v46 = *(unsigned int *)(v43 + 8);
            if (v46 >= 8)
              v47 = v12;
            else
              v47 = 0;
            v43 = (v47 + v46) & 0xFFFFFFFFFFFFFFFELL;
            if (!v43)
              goto LABEL_12;
          }
          v13 = (unsigned int *)v43;
          v48 = *(_QWORD *)(v43 + 16);
          v20 = (_QWORD *)(v43 + 16);
          v18 = v48;
          if (v48 >= a2)
            break;
        }
      }
    }
  }
LABEL_12:
  if (!a4)
  {
    v15 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v16 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v16 != v15)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

uint64_t pas_large_sharing_pool_for_each(uint64_t (*a1)(unsigned int *, uint64_t), uint64_t a2, int a3)
{
  unsigned int v6;
  unsigned int *v8;
  BOOL v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  unsigned int v27;

  if (!a3)
  {
    v6 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v6, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v8 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * pas_large_sharing_tree);
  if (pas_large_sharing_tree)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
LABEL_12:
    v10 = 1;
  }
  else
  {
    do
    {
      v11 = v8;
      v12 = *v8;
      v8 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v12);
      if ((_DWORD)v12)
        v13 = v8 == 0;
      else
        v13 = 1;
    }
    while (!v13);
    if (a1(v11, a2))
    {
      do
      {
        while (1)
        {
          v14 = v11[1];
          v15 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v14);
          if (!(_DWORD)v14 || v15 == 0)
            break;
          do
          {
            v11 = v15;
            v24 = *v15;
            v15 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v24);
            if ((_DWORD)v24)
              v25 = v15 == 0;
            else
              v25 = 1;
          }
          while (!v25);
          v10 = 0;
          if ((a1(v11, a2) & 1) == 0)
            goto LABEL_47;
        }
        v17 = v11[2];
        if (v17 >= 8)
          v18 = pas_compact_heap_reservation_base;
        else
          v18 = 0;
        v19 = (v18 + v17) & 0xFFFFFFFFFFFFFFFELL;
        if (!v19)
          goto LABEL_12;
        while (1)
        {
          v20 = *(unsigned int *)(v19 + 4);
          v21 = (_DWORD)v20 ? pas_compact_heap_reservation_base + 8 * v20 : 0;
          if (v11 != (unsigned int *)v21)
            break;
          v11 = (unsigned int *)v19;
          v22 = *(unsigned int *)(v19 + 8);
          if (v22 >= 8)
            v23 = pas_compact_heap_reservation_base;
          else
            v23 = 0;
          v19 = (v23 + v22) & 0xFFFFFFFFFFFFFFFELL;
          if (!v19)
            goto LABEL_12;
        }
        v11 = (unsigned int *)v19;
        v10 = 0;
      }
      while ((a1((unsigned int *)v19, a2) & 1) != 0);
    }
    else
    {
      v10 = 0;
    }
  }
LABEL_47:
  if (!a3)
  {
    v26 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v27 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v27 != v26)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return v10;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
  return v10;
}

uint64_t *remove_from_min_heap(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v36;
  uint64_t *v37;

  if (result < 8)
    return result;
  v1 = result >> 3;
  v2 = pas_large_sharing_min_heap_instance[0];
  v3 = v1 - 1;
  v4 = &qword_1ECF57AF8[v3];
  v5 = (uint64_t *)(qword_1ECF57B18 + v3 * 8 - 32);
  if (v1 - 1 < 4)
    v5 = &qword_1ECF57AF8[v3];
  v6 = *v5;
  v7 = pas_large_sharing_min_heap_instance[0] - 1;
  v8 = pas_large_sharing_min_heap_instance[0] - 1;
  v9 = (uint64_t *)(qword_1ECF57B18 + v8 * 8 - 32);
  if ((unint64_t)(pas_large_sharing_min_heap_instance[0] - 1) < 4)
    v9 = &qword_1ECF57AF8[v8];
  v10 = *v9;
  *v9 = 0;
  v11 = qword_1ECF57B18 + v3 * 8 - 32;
  if (v1 - 1 >= 4)
    v12 = (_QWORD *)v11;
  else
    v12 = v4;
  *v12 = 0;
  pas_large_sharing_min_heap_instance[0] = v7;
  if (v2 == v1)
    goto LABEL_52;
  if (result >= 0x10)
  {
    v13 = v1 >> 1;
    v14 = (v1 >> 1) - 1;
    v15 = v14 >= 4 ? (uint64_t *)(qword_1ECF57B18 + 8 * v14 - 32) : &pas_large_sharing_min_heap_instance[v14 + 1];
    v16 = *v15;
    if (*(_QWORD *)(v10 + 32) < *(_QWORD *)(*v15 + 32))
    {
      do
      {
        v17 = v13;
        *(_DWORD *)(v16 + 12) = *(_DWORD *)(v16 + 12) & 7 | (8 * v1);
        v18 = v1 - 1;
        if (v18 >= 4)
          v19 = (uint64_t *)(qword_1ECF57B18 + 8 * v18 - 32);
        else
          v19 = &pas_large_sharing_min_heap_instance[v18 + 1];
        *v19 = v16;
        if (v13 == 1)
          break;
        v13 >>= 1;
        v20 = (v17 >> 1) - 1;
        v21 = v20 >= 4 ? (uint64_t *)(qword_1ECF57B18 + 8 * v20 - 32) : &pas_large_sharing_min_heap_instance[v20 + 1];
        v16 = *v21;
        v22 = *(_QWORD *)(*v21 + 32);
        v1 = v17;
      }
      while (*(_QWORD *)(v10 + 32) < v22);
      goto LABEL_49;
    }
  }
  while (1)
  {
    v25 = 2 * v1;
    if (((2 * v1) | 1) > v7)
      break;
    v29 = (uint64_t *)(qword_1ECF57B18 + 16 * v1 - 32);
    if (v25 < 4)
      v29 = &pas_large_sharing_min_heap_instance[2 * v1 + 1];
    v30 = *v29;
    v31 = *(_QWORD *)(v10 + 32);
    result = *(uint64_t **)(v30 + 32);
    if (v25 > v7)
    {
      if (v31 <= (unint64_t)result)
        goto LABEL_48;
LABEL_47:
      v28 = v30;
      v25 = (2 * v1) | 1;
      goto LABEL_25;
    }
    v32 = v25 - 1;
    v33 = (uint64_t *)(qword_1ECF57B18 + v32 * 8 - 32);
    if (v25 - 1 < 4)
      v33 = &pas_large_sharing_min_heap_instance[v32 + 1];
    v28 = *v33;
    v34 = *(_QWORD *)(v28 + 32);
    if (v31 <= (unint64_t)result)
    {
      if (v31 <= v34)
        goto LABEL_48;
    }
    else if (v31 <= v34 || (unint64_t)result < v34)
    {
      goto LABEL_47;
    }
LABEL_25:
    *(_DWORD *)(v28 + 12) = *(_DWORD *)(v28 + 12) & 7 | (8 * v1);
    v23 = v1 - 1;
    if (v23 >= 4)
      v24 = (uint64_t *)(qword_1ECF57B18 + 8 * v23 - 32);
    else
      v24 = &pas_large_sharing_min_heap_instance[v23 + 1];
    *v24 = v28;
    v1 = v25;
  }
  if (v25 <= v7)
  {
    v26 = v25 - 1;
    result = &pas_large_sharing_min_heap_instance[v26 + 1];
    v27 = (uint64_t *)(qword_1ECF57B18 + v26 * 8 - 32);
    if (v25 - 1 < 4)
      v27 = &pas_large_sharing_min_heap_instance[v26 + 1];
    v28 = *v27;
    if (*(_QWORD *)(v10 + 32) > *(_QWORD *)(*v27 + 32))
      goto LABEL_25;
  }
LABEL_48:
  v17 = v1;
LABEL_49:
  v36 = v17 - 1;
  v37 = (uint64_t *)(qword_1ECF57B18 + v36 * 8 - 32);
  if (v17 - 1 < 4)
    v37 = &pas_large_sharing_min_heap_instance[v36 + 1];
  *v37 = v10;
  *(_DWORD *)(v10 + 12) = *(_DWORD *)(v10 + 12) & 7 | (8 * v17);
LABEL_52:
  *(_DWORD *)(v6 + 12) &= 7u;
  if (v7)
  {
    if (qword_1ECF57AF8[0])
      qword_1ECF57AE8 = *(_QWORD *)(qword_1ECF57AF8[0] + 32);
  }
  return result;
}

void update_min_heap(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int64x2_t v26;
  __int128 v27;
  __int128 v28;

  if ((*(_BYTE *)(a1 + 12) & 1) != 0 && !*(_QWORD *)(a1 + 40))
  {
    v2 = pas_large_sharing_min_heap_instance[0];
    v3 = qword_1ECF57B20;
    v4 = 8 * pas_large_sharing_min_heap_instance[0];
    if (pas_large_sharing_min_heap_instance[0] >= (unint64_t)(qword_1ECF57B20 + 4))
    {
      v27 = 0u;
      v28 = 0u;
      if ((unint64_t)(2 * qword_1ECF57B20) <= 4)
        v6 = 4;
      else
        v6 = 2 * qword_1ECF57B20;
      v26 = 0uLL;
      os_unfair_lock_assert_owner(&pas_heap_lock);
      initialize_config(&v26);
      v7 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, 8 * v6, 8, 0, &v26);
      v5 = (char *)v7;
      v9 = v8;
      if (v7)
        v10 = pas_allocation_callback == 0;
      else
        v10 = 1;
      if (!v10)
        pas_allocation_callback(v7, 8 * v6, 0, "pas_large_sharing_min_heap/outline_array", 0);
      if ((v9 & 1) != 0)
      {
        v11 = pas_bootstrap_free_heap_num_allocated_object_bytes + 8 * v6;
        pas_bootstrap_free_heap_num_allocated_object_bytes = v11;
        if (v11 <= pas_bootstrap_free_heap_num_allocated_object_bytes_peak)
          v11 = pas_bootstrap_free_heap_num_allocated_object_bytes_peak;
        pas_bootstrap_free_heap_num_allocated_object_bytes_peak = v11;
      }
      bzero(v5, 8 * v6);
      memcpy(v5, (const void *)qword_1ECF57B18, v4 - 32);
      v12 = 8 * v3;
      if (8 * v3)
      {
        v13 = qword_1ECF57B18;
        if (qword_1ECF57B18 && pas_deallocation_callback)
          pas_deallocation_callback(qword_1ECF57B18, 8 * v3, 0, 0);
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        initialize_config(&v26);
        pas_simple_large_free_heap_deallocate(&pas_bootstrap_free_heap, v13, v12 + v13, 0, &v26);
        pas_bootstrap_free_heap_num_allocated_object_bytes -= v12;
      }
      qword_1ECF57B18 = (uint64_t)v5;
      qword_1ECF57B20 = v6;
    }
    else
    {
      v5 = (char *)qword_1ECF57B18;
    }
    v14 = &pas_large_sharing_min_heap_instance[v4 / 8 + 1];
    if (v2 >= 4)
      v14 = (uint64_t *)&v5[v4 - 32];
    *v14 = 0;
    pas_large_sharing_min_heap_instance[0] = v2 + 1;
    v15 = v2 + 1;
    if (v2 + 1 >= 2)
    {
      v16 = v2 + 1;
      while (1)
      {
        v15 = v16 >> 1;
        v17 = (v16 >> 1) - 1;
        v18 = v17 >= 4 ? (uint64_t *)(qword_1ECF57B18 + 8 * v17 - 32) : &pas_large_sharing_min_heap_instance[v17 + 1];
        v19 = *v18;
        if (*(_QWORD *)(a1 + 32) >= *(_QWORD *)(v19 + 32))
          break;
        *(_DWORD *)(v19 + 12) = *(_DWORD *)(v19 + 12) & 7 | (8 * v16);
        v20 = (uint64_t *)(qword_1ECF57B18 + 8 * v16 - 8 - 32);
        if (v16 < 5)
          v20 = &pas_large_sharing_min_heap_instance[v16];
        *v20 = v19;
        v21 = v16 > 3;
        v16 >>= 1;
        if (!v21)
          goto LABEL_36;
      }
      v15 = v16;
    }
LABEL_36:
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 12) & 7 | (8 * v15);
    v22 = v15 - 1;
    v23 = &qword_1ECF57AF8[v22];
    v24 = qword_1ECF57B18 + v22 * 8 - 32;
    if (v15 - 1 >= 4)
      v25 = (_QWORD *)v24;
    else
      v25 = v23;
    *v25 = a1;
    if (v2 != -1)
    {
      if (qword_1ECF57AF8[0])
        qword_1ECF57AE8 = *(_QWORD *)(qword_1ECF57AF8[0] + 32);
    }
  }
}

unint64_t merge_if_possible(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  _BOOL4 v31;
  _BOOL4 v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  _BOOL4 v39;
  _BOOL4 v40;
  char v41;
  uint64_t v42;
  unint64_t v43;

  v2 = *a1;
  v3 = pas_compact_heap_reservation_base + 8 * v2;
  if ((_DWORD)v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = a1[2];
    if (v5 >= 8)
      v6 = pas_compact_heap_reservation_base;
    else
      v6 = 0;
    v7 = (unsigned int *)((v6 + v5) & 0xFFFFFFFFFFFFFFFELL);
    if (v7)
    {
      v8 = a1;
      do
      {
        v9 = *v7;
        if ((_DWORD)v9)
          v10 = v8 == (unsigned int *)(pas_compact_heap_reservation_base + 8 * v9);
        else
          v10 = 0;
        if (!v10)
          break;
        v8 = v7;
        v11 = v7[2];
        v12 = v11 >= 8 ? pas_compact_heap_reservation_base : 0;
        v7 = (unsigned int *)((v12 + v11) & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v7);
    }
  }
  else
  {
    do
    {
      v7 = (unsigned int *)v3;
      v13 = *(unsigned int *)(v3 + 4);
      v3 = pas_compact_heap_reservation_base + 8 * v13;
      if ((_DWORD)v13)
        v14 = v3 == 0;
      else
        v14 = 1;
    }
    while (!v14);
  }
  v15 = a1[1];
  v16 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v15);
  if ((_DWORD)v15)
    v17 = v16 == 0;
  else
    v17 = 1;
  if (v17)
  {
    v18 = a1[2];
    if (v18 >= 8)
      v19 = pas_compact_heap_reservation_base;
    else
      v19 = 0;
    v20 = (v19 + v18) & 0xFFFFFFFFFFFFFFFELL;
    if (v20)
    {
      v21 = a1;
      do
      {
        v22 = *(unsigned int *)(v20 + 4);
        if ((_DWORD)v22)
          v23 = pas_compact_heap_reservation_base + 8 * v22;
        else
          v23 = 0;
        if (v21 != (unsigned int *)v23)
          break;
        v21 = (unsigned int *)v20;
        v24 = *(unsigned int *)(v20 + 8);
        v25 = v24 >= 8 ? pas_compact_heap_reservation_base : 0;
        v20 = (v25 + v24) & 0xFFFFFFFFFFFFFFFELL;
      }
      while (v20);
    }
  }
  else
  {
    do
    {
      v20 = (unint64_t)v16;
      v26 = *v16;
      v16 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v26);
      if ((_DWORD)v26)
        v27 = v16 == 0;
      else
        v27 = 1;
    }
    while (!v27);
  }
  if (v7)
  {
    v28 = a1[3];
    v29 = (uint64_t *)v7[3];
    if (((v29 ^ v28) & 7) == 0)
    {
      v30 = *((_QWORD *)a1 + 5);
      if (v30)
      {
        v31 = 0;
        if (*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2) == v30)
          goto LABEL_54;
      }
      else
      {
        v31 = *((_QWORD *)v7 + 5) == 0;
        if (*((_QWORD *)a1 + 3) == *((_QWORD *)a1 + 2))
        {
LABEL_54:
          v32 = *((_QWORD *)v7 + 3) - *((_QWORD *)v7 + 2) == *((_QWORD *)v7 + 5);
          if (!v31 && !v32)
            goto LABEL_68;
LABEL_58:
          v33 = (v28 & 1) == 0 || v32;
          if ((v33 & 1) != 0 || *((_QWORD *)a1 + 4) == *((_QWORD *)v7 + 4))
          {
            remove_from_min_heap(v29);
            remove_from_min_heap((uint64_t *)a1[3]);
            v34 = *((_QWORD *)v7 + 5);
            if (v34)
              *((_QWORD *)a1 + 5) += v34;
            *((_QWORD *)a1 + 2) = *((_QWORD *)v7 + 2);
            v35 = *((_QWORD *)a1 + 4);
            if (v35 <= *((_QWORD *)v7 + 4))
              v35 = *((_QWORD *)v7 + 4);
            *((_QWORD *)a1 + 4) = v35;
            remove_from_min_heap((uint64_t *)v7[3]);
            pas_red_black_tree_remove((unsigned int *)&pas_large_sharing_tree, v7, pas_large_sharing_tree_jettisoned_nodes);
            pas_utility_heap_deallocate((unint64_t)v7);
            update_min_heap((uint64_t)a1);
          }
          goto LABEL_68;
        }
      }
      LOBYTE(v32) = 0;
      if (!v31)
        goto LABEL_68;
      goto LABEL_58;
    }
  }
LABEL_68:
  if (!v20)
    return v20;
  v36 = (uint64_t *)a1[3];
  if (((*(_DWORD *)(v20 + 12) ^ v36) & 7) != 0)
    return v20;
  v38 = *((_QWORD *)a1 + 5);
  if (v38)
  {
    v39 = 0;
    if (*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2) == v38)
      goto LABEL_73;
LABEL_76:
    LOBYTE(v40) = 0;
    if (v39)
      goto LABEL_77;
    return v20;
  }
  v39 = *(_QWORD *)(v20 + 40) == 0;
  if (*((_QWORD *)a1 + 3) != *((_QWORD *)a1 + 2))
    goto LABEL_76;
LABEL_73:
  v40 = *(_QWORD *)(v20 + 24) - *(_QWORD *)(v20 + 16) == *(_QWORD *)(v20 + 40);
  if (!v39 && !v40)
    return v20;
LABEL_77:
  v41 = (v36 & 1) == 0 || v40;
  if ((v41 & 1) == 0 && *((_QWORD *)a1 + 4) != *(_QWORD *)(v20 + 32))
    return v20;
  remove_from_min_heap(v36);
  remove_from_min_heap((uint64_t *)*(unsigned int *)(v20 + 12));
  v42 = *(_QWORD *)(v20 + 40);
  if (v42)
    *(_QWORD *)(v20 + 40) = *((_QWORD *)a1 + 5) + v42;
  *(_QWORD *)(v20 + 16) = *((_QWORD *)a1 + 2);
  v43 = *((_QWORD *)a1 + 4);
  if (v43 <= *(_QWORD *)(v20 + 32))
    v43 = *(_QWORD *)(v20 + 32);
  *(_QWORD *)(v20 + 32) = v43;
  remove_from_min_heap((uint64_t *)a1[3]);
  pas_red_black_tree_remove((unsigned int *)&pas_large_sharing_tree, a1, pas_large_sharing_tree_jettisoned_nodes);
  pas_utility_heap_deallocate((unint64_t)a1);
  update_min_heap(v20);
  return v20;
}

uint64_t node_compare_callback(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = v2 >= v3;
  v5 = v2 != v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t split_node_and_get_right_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  remove_from_min_heap((uint64_t *)*(unsigned int *)(a1 + 12));
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 12);
  if (*(_QWORD *)(a1 + 40))
    v7 = v4 - a2;
  else
    v7 = 0;
  v8 = pas_utility_heap_try_allocate_with_alignment(48, 1, "pas_large_sharing_node");
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = v4;
  *(_QWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 40) = v7;
  *(_DWORD *)(v8 + 12) = v6 & 7;
  pas_red_black_tree_insert((uint64_t)&pas_large_sharing_tree, (unsigned int *)v8, (uint64_t (*)(unsigned int *, uint64_t))node_compare_callback, pas_large_sharing_tree_jettisoned_nodes);
  *(_QWORD *)(a1 + 24) = a2;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    v9 = a2 - *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 40) = v9;
  update_min_heap(a1);
  update_min_heap(v8);
  return v8;
}

unint64_t pas_large_utility_free_heap_allocate_for_allocation_config(unint64_t a1, uint64_t a2)
{
  return pas_large_free_heap_helpers_try_allocate_with_alignment(pas_large_utility_free_heap, (uint64_t)pas_bootstrap_free_heap_try_allocate_with_alignment, &pas_large_utility_free_heap_num_allocated_object_bytes, &pas_large_utility_free_heap_num_allocated_object_bytes_peak, a1, 1uLL, 0, a2);
}

void pas_large_utility_free_heap_deallocate_for_allocation_config(unint64_t a1, uint64_t a2)
{
  pas_large_free_heap_helpers_deallocate((uint64_t)pas_large_utility_free_heap, (uint64_t)pas_bootstrap_free_heap_try_allocate_with_alignment, &pas_large_utility_free_heap_num_allocated_object_bytes, a1, a2);
}

uint64_t pas_lenient_compact_unsigned_ptr_load_remote(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  if (v3 >= 8)
    v3 += *(_QWORD *)(a1 + 48);
  if ((v3 & 1) != 0)
  {
    v3 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 > v3 || v3 >= *(_QWORD *)(a1 + 56) + v4)
    {
      if (a3)
        return (*(uint64_t (**)(void))(a1 + 96))();
      return a1 + 80;
    }
    else if (v3 >= 8)
    {
      return v3 - v4 + *(_QWORD *)(a1 + 48);
    }
  }
  return v3;
}

uint64_t pas_local_allocator_construct(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  char v4;
  unsigned int v5;
  char v6;

  *(_DWORD *)result = 0x2000000;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 24) & 0x7FFFFFF;
  *(_BYTE *)(result + 4) = *(_DWORD *)(a2 + 24) >> 27;
  v2 = a2 | 5;
  if (!a2)
    v2 = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = v2;
  v3 = *(_WORD *)(a2 + 12);
  if ((_BYTE)v3)
  {
    v4 = 2 * v3 + 2;
    if (v3 >= 5u)
      v4 = 0;
    *(_BYTE *)(result + 5) = v4;
    *(_BYTE *)(result + 6) = 0;
  }
  else
  {
    v5 = *(unsigned __int8 *)(((8 * *(unsigned __int16 *)(a2 + 72)) | ((unint64_t)*(unsigned __int8 *)(a2 + 74) << 19))
                            + pas_compact_heap_reservation_base
                            + 124);
    if (v5 >= 6)
      v6 = 0;
    else
      v6 = v5 + 12;
    *(_BYTE *)(result + 5) = v6;
    *(_QWORD *)(result + 56) = a2 + 48;
    *(_QWORD *)(result + 64) = 0;
    *(_BYTE *)(result + 6) = 0;
  }
  return result;
}

void pas_local_allocator_move(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  unint64_t StatusReg;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v4 = a2[6];
  if ((v4 & 7) != 5)
  {
    v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 6) != 0)
    {
      v5 = *(unsigned __int8 *)(((8 * *(unsigned __int16 *)(v9 + 7)) | ((unint64_t)*(unsigned __int8 *)(v9 + 9) << 19))
                              + pas_compact_heap_reservation_base
                              + 12);
      if (!*(_BYTE *)(((8 * *(unsigned __int16 *)(v9 + 7)) | ((unint64_t)*(unsigned __int8 *)(v9 + 9) << 19))
                     + pas_compact_heap_reservation_base
                     + 12))
        goto LABEL_12;
    }
    else
    {
      v5 = *(unsigned __int8 *)(((8 * *(unsigned __int16 *)(v9 + 8)) | ((unint64_t)*(unsigned __int8 *)(v9 + 10) << 19))
                              + pas_compact_heap_reservation_base
                              + 12);
      if (!*(_BYTE *)(((8 * *(unsigned __int16 *)(v9 + 8)) | ((unint64_t)*(unsigned __int8 *)(v9 + 10) << 19))
                     + pas_compact_heap_reservation_base
                     + 12))
        goto LABEL_12;
    }
LABEL_3:
    v6 = ((unint64_t)(*((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v5) + 15) + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
    if (v6 <= 0x10)
      v7 = 72;
    else
      v7 = v6 + 56;
    memcpy((void *)a1, a2, v7);
    v8 = *(unsigned __int8 *)(a1 + 5);
    if (v8 > 0xB)
      return;
    goto LABEL_13;
  }
  v5 = *(unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFF8) + 12);
  if (*(_BYTE *)((v4 & 0xFFFFFFFFFFFFFFF8) + 12))
    goto LABEL_3;
LABEL_12:
  memcpy((void *)a1, a2, 0x48uLL);
  v8 = *(unsigned __int8 *)(a1 + 5);
  if (v8 > 0xB)
    return;
LABEL_13:
  if (((1 << v8) & 0xAA8) != 0)
  {
    v10 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(unsigned __int16 *)(v10 + 4) | ((unint64_t)*(unsigned __int8 *)(v10 + 6) << 16);
    if ((_DWORD)v11)
      v12 = pas_compact_heap_reservation_base + 8 * v11;
    else
      v12 = 0;
    v13 = (os_unfair_lock_s *)(v12 + 12);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v15 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v13->_os_unfair_lock_opaque))
    {
      if (!__stxr(v15, &v13->_os_unfair_lock_opaque))
      {
        v17 = *(unsigned int *)(v10 + 12);
        v18 = pas_compact_heap_reservation_base;
        if (v17 >= 8)
          v19 = pas_compact_heap_reservation_base;
        else
          v19 = 0;
        v20 = v19 + v17;
        if ((v20 & 1) == 0)
          goto LABEL_24;
LABEL_31:
        if (*(_QWORD **)(v20 & 0xFFFFFFFFFFFFFFFELL) != a2 + 7)
          goto LABEL_38;
        pas_utility_heap_deallocate(v20 & 0xFFFFFFFFFFFFFFFELL);
        v18 = pas_compact_heap_reservation_base;
        v21 = a1 + 56;
        if (v21 >= 8)
          goto LABEL_33;
        goto LABEL_35;
      }
    }
    __clrex();
    os_unfair_lock_lock(v13);
    v22 = *(unsigned int *)(v10 + 12);
    v18 = pas_compact_heap_reservation_base;
    if (v22 >= 8)
      v23 = pas_compact_heap_reservation_base;
    else
      v23 = 0;
    v20 = v23 + v22;
    if ((v20 & 1) != 0)
      goto LABEL_31;
LABEL_24:
    if (a2 + 7 != (_QWORD *)v20)
      goto LABEL_38;
    v21 = a1 + 56;
    if (v21 >= 8)
    {
LABEL_33:
      if (v21 - v18 >= pas_compact_heap_reservation_size)
      {
        v24 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
        *(_QWORD *)v24 = v21;
        v21 = v24 | 1;
        LODWORD(v18) = pas_compact_heap_reservation_base;
      }
    }
LABEL_35:
    if (v21 < 8)
      LODWORD(v18) = 0;
    *(_DWORD *)(v10 + 12) = v21 - v18;
LABEL_38:
    v25 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v26 = __ldxr(&v13->_os_unfair_lock_opaque);
      if (v26 != v25)
        break;
      if (!__stlxr(0, &v13->_os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(v13);
  }
}

uint64_t pas_local_allocator_stop(_BYTE *a1, int a2, uint64_t a3)
{
  unint64_t v6;
  const char *v7;
  const char *v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  void (*v22)(_BYTE *, uint64_t, uint64_t, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_t v25;
  unint64_t StatusReg;
  unsigned int v27;
  os_unfair_lock_s *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const os_unfair_lock *v41;
  _BOOL4 v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;

  if (*a1)
  {
    pas_log("allocator = %p\n", a1);
    v6 = (char)a1[3];
    if (v6 > 4)
      v7 = 0;
    else
      v7 = off_1E35BED18[v6];
    pas_log("allocator->scavenger_data.kind = %s\n", v7);
    if (*a1)
      v8 = "yes";
    else
      v8 = "no";
    pas_log("allocator->scavenger_data.is_in_use = %s\n", v8);
    pas_log("at time of assert: allocator->scavenger_data.is_in_use = %s\n", "yes");
  }
  v9 = a1[3];
  result = 1;
  if (v9 > 3 || v9 == 2)
  {
    *a1 = 1;
    v12 = a1[3];
    if (v12 <= 3 && v12 != 2)
      goto LABEL_102;
    if (a1[5] - 12 <= 5)
    {
      *((_QWORD *)a1 + 8) = 0;
LABEL_101:
      a1[1] = 0;
      result = 1;
      a1[3] = 1;
LABEL_102:
      *a1 = 0;
      return result;
    }
    v14 = *((_QWORD *)a1 + 3);
    if (!v14)
      goto LABEL_101;
    v15 = *((_QWORD *)a1 + 6);
    if ((v15 & 7) == 5)
    {
      v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_31;
    }
    if (v15)
    {
      if ((v15 & 7u) < 2)
      {
        v17 = *(unsigned __int8 *)((v15 & 0xFFFFFFFFFFFFFFF8) + 10);
        v18 = *(unsigned __int16 *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_29:
        v16 = ((8 * v18) | (v17 << 19)) + pas_compact_heap_reservation_base;
        goto LABEL_31;
      }
      if ((v15 & 7) == 4)
      {
        v17 = *(unsigned __int8 *)((v15 | 7) + 2);
        v18 = *(unsigned __int16 *)(v15 | 7);
        goto LABEL_29;
      }
    }
    v16 = 0;
LABEL_31:
    v19 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v16 + 12));
    v20 = *(_QWORD *)(v19 + 32);
    v63 = *(_QWORD *)(v19 + 40);
    v21 = *(_DWORD *)(v19 + 100);
    v62 = *(_QWORD *)(v19 + 120);
    v22 = *(void (**)(_BYTE *, uint64_t, uint64_t, unint64_t, uint64_t))(v19 + 216);
    v23 = (*(uint64_t (**)(uint64_t))(v19 + 56))(v14 & -(uint64_t)v20);
    v24 = v23;
    if ((v15 & 7) == 5)
      v15 = *(_QWORD *)(v23 + 32);
    if (v21 == 1)
    {
      v25 = 0;
      goto LABEL_44;
    }
    if (a2 == 1)
    {
      v29 = *(os_unfair_lock_s **)(v23 + 8);
      if (v29)
      {
        v25 = pas_segregated_page_switch_lock_slow(v23, 0, v29);
        goto LABEL_44;
      }
    }
    else if (!a2)
    {
      v25 = *(os_unfair_lock_t *)(v23 + 8);
      if (v25)
      {
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v27 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&v25->_os_unfair_lock_opaque))
        {
          if (!__stxr(v27, &v25->_os_unfair_lock_opaque))
          {
LABEL_74:
            v48 = *(unsigned int **)(v24 + 8);
            if (v25 == (os_unfair_lock_t)v48)
              goto LABEL_44;
            v44 = *(_DWORD *)(StatusReg + 24);
            while (1)
            {
              v45 = __ldxr(&v25->_os_unfair_lock_opaque);
              if (v45 != v44)
                break;
              if (!__stlxr(0, &v25->_os_unfair_lock_opaque))
                goto LABEL_70;
            }
            __clrex();
            os_unfair_lock_unlock(v25);
LABEL_70:
            v46 = *(_DWORD *)(StatusReg + 24);
            while (!__ldaxr(v48))
            {
              if (!__stxr(v46, v48))
              {
                v25 = (os_unfair_lock_t)v48;
                goto LABEL_74;
              }
            }
            break;
          }
        }
        result = 0;
        __clrex();
        goto LABEL_102;
      }
LABEL_44:
      v22(a1, v15, v24, v16, a3);
      if ((v15 & 7u) < 2)
      {
        v30 = v15 & 0xFFFFFFFFFFFFFFF8;
        v31 = *(unsigned __int8 *)(v24 + 2);
        if (*(_BYTE *)(v24 + 2))
          *(_BYTE *)(v24 + 2) = 0;
        v32 = ((8 * *(unsigned __int16 *)(v30 + 8)) | ((unint64_t)*(unsigned __int8 *)(v30 + 10) << 19))
            + pas_compact_heap_reservation_base;
        v33 = *(unsigned int *)(v30 + 12);
        if (*(_QWORD *)(v24 + 24))
        {
          if (v20 == v63)
          {
            v34 = 0;
          }
          else
          {
            v43 = v20 / v63;
            do
            {
              v34 = v43 != 0;
              if (!v43)
                break;
              --v43;
            }
            while (*(_BYTE *)(v24 + 4 * ((unint64_t)(v62 + 31) >> 5) + 44 + v43));
          }
        }
        else
        {
          v34 = 1;
        }
        *(_BYTE *)(v24 + 1) = 0;
        if (v31)
          pas_segregated_directory_view_did_become_eligible_at_index(v32, v33);
        if (v34)
          pas_segregated_directory_view_did_become_empty_at_index(v32, v33);
        goto LABEL_86;
      }
      if ((v15 & 7) != 4)
        goto LABEL_86;
      v35 = v15 & 0xFFFFFFFFFFFFFFF8;
      v36 = pas_compact_heap_reservation_base;
      v37 = ((8 * *(unsigned __int16 *)((v15 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v15 & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
          + pas_compact_heap_reservation_base;
      v38 = *(unsigned __int8 *)(v35 + 9);
      v39 = *(unsigned __int16 *)(v35 + 7);
      v40 = *(_QWORD *)((*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v41 = *(const os_unfair_lock **)(v24 + 8);
      if (v41)
        os_unfair_lock_assert_owner(v41);
      if (*(_DWORD *)(v37 + 24) != 1)
        goto LABEL_56;
      if (*(_QWORD *)(v24 + 24))
      {
        if (v20 == v63)
        {
LABEL_56:
          v42 = 0;
          goto LABEL_81;
        }
        v49 = v24 + 4 * ((unint64_t)(v62 + 31) >> 5) + 44;
        v50 = v20 / v63;
        do
        {
          v42 = v50 != 0;
          if (!v50)
            break;
          --v50;
        }
        while (*(_BYTE *)(v49 + v50));
      }
      else
      {
        v42 = 1;
      }
LABEL_81:
      v51 = *(_BYTE *)(v35 + 19);
      if ((v51 & 2) != 0)
      {
        *(_BYTE *)(v35 + 19) = v51 & 0xFC;
        --*(_DWORD *)(v37 + 24);
        pas_segregated_directory_view_did_become_eligible(((8 * v39) | (v38 << 19)) + v36, v35 | 4);
      }
      else
      {
        *(_BYTE *)(v35 + 19) = v51 & 0xFE;
        --*(_DWORD *)(v37 + 24);
      }
      if (v42)
        pas_segregated_directory_view_did_become_empty(v40, v37 | 2);
LABEL_86:
      v52 = *((_QWORD *)a1 + 6);
      if ((v52 & 7) == 5)
      {
        v52 &= 0xFFFFFFFFFFFFFFF8;
        goto LABEL_95;
      }
      if (v52)
      {
        if ((v52 & 7u) < 2)
        {
          v53 = v52 & 0xFFFFFFFFFFFFFFF8;
          v54 = *(unsigned __int8 *)(v53 + 10);
          v55 = *(unsigned __int16 *)(v53 + 8);
LABEL_93:
          v52 = ((8 * v55) | (v54 << 19)) + pas_compact_heap_reservation_base;
          goto LABEL_95;
        }
        if ((v52 & 7) == 4)
        {
          v56 = (unsigned __int16 *)(v52 | 7);
          v54 = *((unsigned __int8 *)v56 + 2);
          v55 = *v56;
          goto LABEL_93;
        }
        v52 = 0;
      }
LABEL_95:
      v57 = *(unsigned __int8 *)(v52 + 12);
      *((_QWORD *)a1 + 3) = 0;
      a1[6] = 0;
      *((_QWORD *)a1 + 1) = 0;
      *((_DWORD *)a1 + 4) = 0;
      if (v52)
        v58 = v52 | 5;
      else
        v58 = 0;
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
      *((_QWORD *)a1 + 6) = v58;
      v59 = 2 * v57 + 2;
      if (v57 >= 5)
        v59 = 0;
      a1[5] = v59;
      if (v25)
      {
        v60 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        while (1)
        {
          v61 = __ldxr(&v25->_os_unfair_lock_opaque);
          if (v61 != v60)
            break;
          if (!__stlxr(0, &v25->_os_unfair_lock_opaque))
            goto LABEL_101;
        }
        __clrex();
        os_unfair_lock_unlock(v25);
      }
      goto LABEL_101;
    }
    v25 = 0;
    goto LABEL_44;
  }
  return result;
}

void pas_local_allocator_scavenger_data_commit_if_necessary_slow(BOOL *a1, int a2)
{
  _BOOL4 v3;
  BOOL v4;
  unint64_t StatusReg;
  uint64_t v7;
  os_unfair_lock_s **v8;
  os_unfair_lock_s *v9;
  unsigned int v10;
  int v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  int v15;
  unsigned int v16;
  os_unfair_lock_s *v17;
  int v18;
  unsigned int v19;
  os_unfair_lock_s *v20;
  unsigned int v21;
  uint64_t node_for_index;
  int v24;
  unsigned int v25;

  v3 = a2 != 1;
  v4 = a2 != 1 && a2 == 0;
  if (pas_baseline_allocator_table <= (unint64_t)a1
    && pas_baseline_allocator_table + 320 * (unint64_t)pas_baseline_allocator_table_bound > (unint64_t)a1)
  {
    a1[3] = 2;
    return;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 752);
  if ((a1[3] | 2) != 3)
  {
    if (a2 == 1)
      goto LABEL_38;
    v8 = (os_unfair_lock_s **)(v7 + 8016);
    goto LABEL_32;
  }
  v8 = (os_unfair_lock_s **)(v7 + 8016);
  if (a2 == 1)
  {
LABEL_13:
    v12 = a1[3];
    if (v12 == 3)
      goto LABEL_26;
    goto LABEL_14;
  }
  v9 = (os_unfair_lock_s *)(*(_QWORD *)(v7 + 8016) + 20);
  v10 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v9->_os_unfair_lock_opaque))
  {
    if (!__stxr(v10, &v9->_os_unfair_lock_opaque))
      goto LABEL_13;
  }
  __clrex();
  os_unfair_lock_lock(v9);
  v12 = a1[3];
  if (v12 != 3)
  {
LABEL_14:
    if (v12 == 1)
    {
      a1[3] = 2;
      v13 = *v8;
      if (v3)
        goto LABEL_27;
      return;
    }
    if (!v3)
    {
LABEL_38:
      node_for_index = pas_thread_local_cache_layout_get_node_for_index((unint64_t)&a1[-v7 + 0x7FFFFE080] >> 3);
      pas_thread_local_cache_layout_node_commit_and_construct(node_for_index, v7);
      *a1 = v4;
      if (v3)
      {
        v17 = (os_unfair_lock_s *)(*(_QWORD *)(v7 + 8016) + 20);
        v24 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v25 = __ldxr(&v17->_os_unfair_lock_opaque);
          if (v25 != v24)
            break;
          if (!__stlxr(0, &v17->_os_unfair_lock_opaque))
            return;
        }
        goto LABEL_43;
      }
      return;
    }
    v14 = *v8 + 5;
    v15 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v16 = __ldxr(&v14->_os_unfair_lock_opaque);
      if (v16 != v15)
        break;
      if (!__stlxr(0, &v14->_os_unfair_lock_opaque))
        goto LABEL_32;
    }
    __clrex();
    os_unfair_lock_unlock(v14);
LABEL_32:
    v20 = *v8 + 5;
    v21 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v20->_os_unfair_lock_opaque))
    {
      if (!__stxr(v21, &v20->_os_unfair_lock_opaque))
        goto LABEL_37;
    }
    __clrex();
    os_unfair_lock_lock(v20);
LABEL_37:
    v3 = 1;
    goto LABEL_38;
  }
LABEL_26:
  a1[3] = 4;
  a1[7] = 1;
  v13 = *v8;
  if (v3)
  {
LABEL_27:
    v17 = v13 + 5;
    v18 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v19 = __ldxr(&v17->_os_unfair_lock_opaque);
      if (v19 != v18)
        break;
      if (!__stlxr(0, &v17->_os_unfair_lock_opaque))
        return;
    }
LABEL_43:
    __clrex();
    os_unfair_lock_unlock(v17);
  }
}

uint64_t pas_local_view_cache_stop(_BYTE *a1, int a2)
{
  unsigned int v3;
  uint64_t result;
  unsigned int v6;
  int v9;
  unint64_t v10;
  uint64_t (*v11)(_QWORD);
  os_unfair_lock_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  int v22;
  unsigned int v23;
  os_unfair_lock_s *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v33;
  uint64_t v34;
  char v35;
  _BYTE *v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unint64_t StatusReg;
  uint64_t v41;
  _BYTE *v42;
  unint64_t v43;

  v3 = a1[3];
  result = 1;
  if (v3 <= 3 && v3 != 2)
    return result;
  *a1 = 1;
  v6 = a1[3];
  if (v6 <= 3 && v6 != 2)
    goto LABEL_62;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v42 = a1 + 8;
  v43 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v41 = 0;
  v14 = a1[5];
  if (a1[6] != (_DWORD)v14)
    goto LABEL_15;
LABEL_14:
  if (a1[7] != 2)
  {
    if (v12)
    {
      v38 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v39 = __ldxr(&v12->_os_unfair_lock_opaque);
        if (v39 != v38)
          break;
        if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
          goto LABEL_64;
      }
      __clrex();
      os_unfair_lock_unlock(v12);
    }
LABEL_64:
    a1[7] = 0;
    a1[1] = 0;
    a1[3] = 3;
    result = 1;
    goto LABEL_62;
  }
  while (1)
  {
LABEL_15:
    v15 = a1[4] > (v14 + 1) ? v14 + 1 : 0;
    a1[5] = v15;
    v16 = (8 * *(unsigned __int16 *)&v42[3 * v14]) | ((unint64_t)v42[3 * v14 + 2] << 19);
    v17 = pas_compact_heap_reservation_base;
    v18 = (_QWORD *)(v16 + pas_compact_heap_reservation_base);
    a1[7] = 1;
    if (v13)
    {
      v19 = v11(*v18);
      if (v9 == 1)
        goto LABEL_32;
    }
    else
    {
      v13 = ((8 * *((unsigned __int16 *)v18 + 4)) | ((unint64_t)*((unsigned __int8 *)v18 + 10) << 19)) + v17;
      v20 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v13 + 12));
      v10 = *(_QWORD *)(v20 + 40);
      v43 = *(_QWORD *)(v20 + 32);
      v11 = *(uint64_t (**)(_QWORD))(v20 + 56);
      v9 = *(_DWORD *)(v20 + 100);
      v41 = *(_QWORD *)(v20 + 120);
      v19 = v11(*v18);
      if (v9 == 1)
        goto LABEL_32;
    }
    if (a2 == 1)
    {
      v24 = *(os_unfair_lock_s **)(v19 + 8);
      if (v12 != v24)
        v12 = pas_segregated_page_switch_lock_slow(v19, v12, v24);
      goto LABEL_32;
    }
    if (!a2)
    {
      v21 = *(os_unfair_lock_s **)(v19 + 8);
      if (v12 != v21)
        break;
    }
LABEL_32:
    v25 = *((unsigned int *)v18 + 3);
    if (*(_QWORD *)(v19 + 24))
    {
      if (v43 != v10)
      {
        v26 = v43 / v10;
        while (v26)
        {
          --v26;
          if (!*(_BYTE *)(v19 + 4 * ((unint64_t)(v41 + 31) >> 5) + 44 + v26))
            goto LABEL_13;
        }
      }
      *(_BYTE *)(v19 + 1) = 0;
      pas_segregated_directory_view_did_become_eligible_at_index(v13, v25);
      v14 = a1[5];
      if (a1[6] == (_DWORD)v14)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      *(_BYTE *)(v19 + 1) = 0;
      pas_segregated_directory_view_did_become_eligible_at_index(v13, v25);
      pas_segregated_directory_view_did_become_empty_at_index(v13, v25);
      v14 = a1[5];
      if (a1[6] == (_DWORD)v14)
        goto LABEL_14;
    }
  }
  if (v12)
  {
    v22 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v23 = __ldxr(&v12->_os_unfair_lock_opaque);
      if (v23 != v22)
        break;
      if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
        goto LABEL_41;
    }
    __clrex();
    os_unfair_lock_unlock(v12);
  }
LABEL_41:
  v27 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v21->_os_unfair_lock_opaque))
  {
    if (!__stxr(v27, &v21->_os_unfair_lock_opaque))
    {
LABEL_54:
      v33 = *(unsigned int **)(v19 + 8);
      if (v21 == (os_unfair_lock_s *)v33)
      {
        v12 = v21;
        goto LABEL_32;
      }
      v29 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v30 = __ldxr(&v21->_os_unfair_lock_opaque);
        if (v30 != v29)
          break;
        if (!__stlxr(0, &v21->_os_unfair_lock_opaque))
          goto LABEL_50;
      }
      __clrex();
      os_unfair_lock_unlock(v21);
LABEL_50:
      v31 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(v33))
      {
        if (!__stxr(v31, v33))
        {
          v21 = (os_unfair_lock_s *)v33;
          goto LABEL_54;
        }
      }
      break;
    }
  }
  __clrex();
  v34 = a1[6];
  if (a1[4] > (v34 + 1))
    v35 = v34 + 1;
  else
    v35 = 0;
  if (a1[5] == v35)
    a1[7] = 2;
  result = 0;
  v36 = &v42[3 * v34];
  v37 = (unint64_t)v18 - pas_compact_heap_reservation_base;
  *v36 = ((unint64_t)v18 - pas_compact_heap_reservation_base) >> 3;
  v36[1] = v37 >> 11;
  v36[2] = v37 >> 19;
  a1[6] = v35;
LABEL_62:
  *a1 = 0;
  return result;
}

uint64_t pas_lock_free_read_ptr_ptr_hashtable_set(_QWORD *a1, uint64_t (*a2)(unint64_t, uint64_t), uint64_t a3, unint64_t a4, unint64_t a5)
{
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  char v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t *v34;
  unsigned __int128 *v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned int v38;
  int64x2_t v39[3];

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v10 = (_DWORD *)*a1;
  if (*a1)
  {
    v11 = v10[2];
    if (v11 > 2 * v10[4])
      goto LABEL_23;
    v12 = 2 * v11;
  }
  else
  {
    v12 = 16;
  }
  v13 = 16 * v12 + 32;
  memset(v39, 0, sizeof(v39));
  os_unfair_lock_assert_owner(&pas_heap_lock);
  initialize_config(v39);
  v14 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, v13, 16, 0, v39);
  v15 = (_DWORD *)v14;
  v17 = v16;
  if (v14 && pas_allocation_callback)
    pas_allocation_callback(v14, v13, 0, "pas_lock_free_read_ptr_ptr_hashtable/table", 0);
  v38 = v12;
  v18 = v12 - 1;
  if ((v17 & 1) != 0)
  {
    pas_bootstrap_free_heap_num_allocated_object_bytes += v13;
    v19 = pas_bootstrap_free_heap_num_allocated_object_bytes;
    if (pas_bootstrap_free_heap_num_allocated_object_bytes <= (unint64_t)pas_bootstrap_free_heap_num_allocated_object_bytes_peak)
      v19 = pas_bootstrap_free_heap_num_allocated_object_bytes_peak;
    pas_bootstrap_free_heap_num_allocated_object_bytes_peak = v19;
  }
  memset(v15, 255, v13);
  *(_QWORD *)v15 = v10;
  if (v10)
  {
    v36 = a1;
    v37 = a5;
    v20 = v10[2];
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = v15 + 8;
      do
      {
        v23 = (unint64_t *)&v10[4 * v21 + 8];
        if (*v23 != -1)
        {
          v24 = a2(*v23, a3);
          do
            v25 = v24++ & v18;
          while (*(_QWORD *)&v22[4 * v25] != -1);
          *(_OWORD *)&v22[4 * v25] = *(_OWORD *)v23;
          v20 = v10[2];
        }
        ++v21;
      }
      while (v21 < v20);
    }
    a5 = v37;
    v15[2] = v38;
    v15[3] = v18;
    v26 = v10[4];
    a1 = v36;
  }
  else
  {
    v26 = 0;
    v15[2] = v38;
    v15[3] = v18;
  }
  v15[4] = v26;
  __dmb(0xBu);
  *a1 = v15;
  v10 = v15;
LABEL_23:
  result = a2(a4, a3);
  v28 = v10[3];
  v29 = v10 + 8;
  v30 = v28 & result;
  v31 = *(_QWORD *)&v10[4 * v30 + 8];
  if (v31 != -1)
  {
    if (v31 == a4)
    {
LABEL_28:
      v34 = (unint64_t *)&v29[4 * v30];
      *v34 = a4;
      v34[1] = a5;
      return result;
    }
    v32 = result + 1;
    while (1)
    {
      v30 = v32 & v28;
      v33 = *(_QWORD *)&v29[4 * v30];
      if (v33 == -1)
        break;
      ++v32;
      if (v33 == a4)
        goto LABEL_28;
    }
  }
  v35 = (unsigned __int128 *)&v29[4 * v30];
  do
    __ldxp(v35);
  while (__stlxp(__PAIR128__(a5, a4), v35));
  __dmb(0xBu);
  ++v10[4];
  return result;
}

uint64_t pas_vlog(char *__format, va_list a2)
{
  _opaque_pthread_t *i;
  uint64_t result;
  size_t v6;
  char *v7;
  char __str[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  for (i = (_opaque_pthread_t *)pas_thread_that_is_crash_logging;
        pas_thread_that_is_crash_logging;
        i = (_opaque_pthread_t *)pas_thread_that_is_crash_logging)
  {
    if (i == pthread_self())
      break;
  }
  result = vsnprintf(__str, 0x400uLL, __format, a2);
  if (result >= 0x3FF)
    v6 = 1023;
  else
    v6 = result;
  if ((_DWORD)v6)
  {
    v7 = __str;
    do
    {
      do
        result = write(1, v7, v6);
      while (result < 0);
      v7 += result;
      v6 -= result;
    }
    while (v6);
  }
  return result;
}

uint64_t pas_log(char *__format, ...)
{
  _opaque_pthread_t *i;
  uint64_t result;
  size_t v4;
  char *v5;
  char __str[1024];
  uint64_t v7;
  va_list va;

  va_start(va, __format);
  v7 = *MEMORY[0x1E0C80C00];
  for (i = (_opaque_pthread_t *)pas_thread_that_is_crash_logging;
        pas_thread_that_is_crash_logging;
        i = (_opaque_pthread_t *)pas_thread_that_is_crash_logging)
  {
    if (i == pthread_self())
      break;
  }
  result = vsnprintf(__str, 0x400uLL, __format, va);
  if (result >= 0x3FF)
    v4 = 1023;
  else
    v4 = result;
  if ((_DWORD)v4)
  {
    v5 = __str;
    do
    {
      do
        result = write(1, v5, v4);
      while (result < 0);
      v5 += result;
      v4 -= result;
    }
    while (v4);
  }
  return result;
}

pthread_t pas_start_crash_logging()
{
  pthread_t result;

  result = pthread_self();
  pas_thread_that_is_crash_logging = (uint64_t)result;
  __dmb(0xBu);
  return result;
}

char *compute_msl_status()
{
  char *result;

  result = getenv("MallocStackLogging");
  pas_msl_is_enabled_flag_value = result == 0;
  return result;
}

uint64_t pas_msl_malloc_logging_slow(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return a2;
  if (pas_msl_is_enabled_flag_value)
  {
    if (pas_msl_is_enabled_flag_value != 2)
      return a2;
    pthread_once(&pas_compute_msl_is_enabled_key, (void (*)(void))compute_msl_status);
    if (pas_msl_is_enabled_flag_value)
      return a2;
  }
  ((void (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))*MEMORY[0x1E0C83EB8])(2, 0, a1, 0, a2, 0);
  return a2;
}

uint64_t pas_msl_free_logging_slow(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (!pas_msl_is_enabled_flag_value)
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))*MEMORY[0x1E0C83EB8])(4, 0, v1, 0, 0, 0);
    if (pas_msl_is_enabled_flag_value == 2)
    {
      result = pthread_once(&pas_compute_msl_is_enabled_key, (void (*)(void))compute_msl_status);
      if (!pas_msl_is_enabled_flag_value)
        return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))*MEMORY[0x1E0C83EB8])(4, 0, v1, 0, 0, 0);
    }
  }
  return result;
}

void megapage_cache_allocate_aligned(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  BOOL v18;
  size_t v19;
  unint64_t v20;
  unint64_t i;
  uint64_t v22;

  v6 = *a3;
  v7 = a3[1];
  v8 = *(_QWORD *)(v7 + 24);
  if (v8)
    v9 = *(_QWORD *)(v7 + 16) - v8;
  else
    v9 = 0;
  if (*(_QWORD *)v7 <= *(_QWORD *)(v7 + 8))
    v10 = *(_QWORD *)(v7 + 8);
  else
    v10 = *(_QWORD *)v7;
  if (v10 > a2)
    a2 = v10;
  if (v9)
    v11 = a2 - v9;
  else
    v11 = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_QWORD *)(a4 + 48) = 0;
  v12 = (*(uint64_t (**)(size_t, size_t, size_t, const char *, uint64_t, uint64_t, _QWORD))(v6 + 32))(v10, a2, v11, "pas_megapage_cache/chunk", a3[2], a3[3], *(_QWORD *)(v6 + 40));
  v14 = v13;
  if ((v13 & 1) != 0)
  {
    v15 = (char *)v12;
    v16 = v12 + v10;
    pas_enumerable_range_list_append(pas_payload_reservation_page_list, v12, v12 + v10);
    v17 = HIDWORD(v14);
    if ((_DWORD)v17)
      v18 = 1;
    else
      v18 = *(_BYTE *)(v7 + 56) == 0;
    if (!v18)
    {
      bzero(v15, v10);
      LODWORD(v17) = 1;
    }
    if (*(_QWORD *)(v7 + 40))
    {
      v19 = v16 + v9;
      v20 = (unint64_t)&v15[v9] / *(_QWORD *)v7;
      for (i = v19 / *(_QWORD *)v7;
            i > v20;
            (*(void (**)(unint64_t, _QWORD))(v7 + 40))(i, *(_QWORD *)(v7 + 48)))
      {
        --i;
      }
    }
    v22 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)a4 = &v15[v22];
    *(_QWORD *)(a4 + 8) = a1;
    *(_QWORD *)(a4 + 16) = &v15[v22];
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = &v15[v22 + a1];
    *(_QWORD *)(a4 + 40) = v10 - (v22 + a1);
    *(_DWORD *)(a4 + 48) = v17;
  }
}

uint64_t get_timebase_info_slow()
{
  uint64_t result;

  result = mach_timebase_info((mach_timebase_info_t)&timebase_info);
  __dmb(0xBu);
  timebase_info_ptr = (uint64_t)&timebase_info;
  return result;
}

unsigned __int8 *pas_page_base_compute_committed_when_owned(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unint64_t v18;
  uint64_t v19;

  if (*result - 8 <= 0xFFFFFFFC)
  {
    v2 = *((_QWORD *)result + 4);
    switch(v2 & 7)
    {
      case 0:
      case 1:
        v3 = *(unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFF8) + 10);
        v4 = *(unsigned __int16 *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
        goto LABEL_14;
      case 2:
        v13 = *(_QWORD *)((*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
        goto LABEL_15;
      case 3:
        v13 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
        goto LABEL_15;
      case 4:
        v3 = *(unsigned __int8 *)((v2 | 7) + 2);
        v4 = *(unsigned __int16 *)(v2 | 7);
LABEL_14:
        v13 = ((8 * v4) | (v3 << 19)) + pas_compact_heap_reservation_base;
        goto LABEL_15;
      case 5:
        v13 = v2 & 0xFFFFFFFFFFFFFFF8;
LABEL_15:
        v14 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v13 + 12));
        v8 = *(_QWORD *)(v14 + 32);
        v7 = *(_QWORD *)(v14 + 40);
        if (v8 == v7)
          goto LABEL_16;
        goto LABEL_8;
      default:
        v8 = *((_QWORD *)pas_segregated_page_config_kind_for_config_table + 4);
        v7 = *((_QWORD *)pas_segregated_page_config_kind_for_config_table + 5);
        if (v8 == v7)
          goto LABEL_16;
LABEL_8:
        switch(v2 & 7)
        {
          case 0:
          case 1:
            v10 = v2 & 0xFFFFFFFFFFFFFFF8;
            v11 = *(unsigned __int8 *)(v10 + 10);
            v12 = *(unsigned __int16 *)(v10 + 8);
            goto LABEL_22;
          case 2:
            v16 = *(_QWORD *)((*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
            goto LABEL_23;
          case 3:
            v16 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
            goto LABEL_23;
          case 4:
            v17 = (unsigned __int16 *)(v2 | 7);
            v11 = *((unsigned __int8 *)v17 + 2);
            v12 = *v17;
LABEL_22:
            v16 = ((8 * v12) | (v11 << 19)) + pas_compact_heap_reservation_base;
            goto LABEL_23;
          case 5:
            v16 = v2 & 0xFFFFFFFFFFFFFFF8;
LABEL_23:
            v15 = *(unsigned __int8 *)(v16 + 12);
            break;
          default:
            v15 = 0;
            break;
        }
        v9 = (unint64_t)&result[4
                                     * ((unint64_t)(*((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table
                                                                       + v15)
                                                           + 15)
                                                         + 31) >> 5)
                                     + 44];
        if (v7 <= v8)
          goto LABEL_25;
        return result;
    }
  }
  v5 = pas_compact_heap_reservation_base + 8 * *((unsigned int *)result + 1);
  v6 = pas_bitfit_page_config_kind_for_config_table[*(unsigned __int8 *)(((8 * *(unsigned __int16 *)(v5 + 8)) | ((unint64_t)*(unsigned __int8 *)(v5 + 10) << 19))
                                                                       + pas_compact_heap_reservation_base
                                                                       + 124)];
  v8 = *(_QWORD *)(v6 + 32);
  v7 = *(_QWORD *)(v6 + 40);
  if (v8 == v7)
  {
LABEL_16:
    *(_QWORD *)(a2 + 24) += v8;
  }
  else
  {
    v9 = (unint64_t)&result[16 * (((v8 >> *(_BYTE *)(v6 + 28)) + 63) >> 6) + 16];
    if (v7 <= v8)
    {
LABEL_25:
      v18 = v8 / v7;
      do
      {
        --v18;
        if (*(unsigned __int8 *)(v9 + v18) == 255)
          v19 = 32;
        else
          v19 = 24;
        *(_QWORD *)(a2 + v19) += v7;
      }
      while (v18);
    }
  }
  return result;
}

unsigned __int8 *pas_page_base_add_free_range(unsigned __int8 *result, _QWORD *a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;

  v5 = a4 - a3;
  if (a4 == a3)
    return result;
  v6 = *result - 8;
  if (v6 > 0xFFFFFFFC)
  {
    v11 = pas_compact_heap_reservation_base + 8 * *((unsigned int *)result + 1);
    v12 = *((_WORD *)result + 1) == 0;
    v13 = pas_bitfit_page_config_kind_for_config_table[*(unsigned __int8 *)(((8 * *(unsigned __int16 *)(v11 + 8)) | ((unint64_t)*(unsigned __int8 *)(v11 + 10) << 19))
                                                                          + pas_compact_heap_reservation_base
                                                                          + 124)];
    v15 = *(_QWORD *)(v13 + 32);
    v14 = *(_QWORD *)(v13 + 40);
    v48 = 0;
    if (a5 == 1)
      goto LABEL_21;
  }
  else
  {
    v7 = *((_QWORD *)result + 4);
    switch(*((_DWORD *)result + 8) & 7)
    {
      case 0:
      case 1:
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
        v9 = *(unsigned __int8 *)(v8 + 10);
        v10 = *(unsigned __int16 *)(v8 + 8);
        goto LABEL_18;
      case 2:
        v21 = *(_QWORD *)((*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
        goto LABEL_19;
      case 3:
        v21 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
        goto LABEL_19;
      case 4:
        v22 = (unsigned __int16 *)(v7 | 7);
        v9 = *((unsigned __int8 *)v22 + 2);
        v10 = *v22;
LABEL_18:
        v21 = ((8 * v10) | (v9 << 19)) + pas_compact_heap_reservation_base;
        goto LABEL_19;
      case 5:
        v21 = v7 & 0xFFFFFFFFFFFFFFF8;
LABEL_19:
        v20 = *(unsigned __int8 *)(v21 + 12);
        break;
      default:
        v20 = 0;
        break;
    }
    v12 = *((_QWORD *)result + 3) == 0;
    v23 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + v20);
    v15 = *(_QWORD *)(v23 + 32);
    v14 = *(_QWORD *)(v23 + 40);
    v48 = 0;
    if (a5 == 1)
    {
LABEL_21:
      a2[2] += v5;
      v18 = a2 + 8;
      v16 = a2 + 9;
      v17 = &v48;
      if (v15 != v14)
        goto LABEL_22;
LABEL_9:
      if (v12)
        v19 = v16;
      else
        v19 = v18;
      *v19 += v5;
      return result;
    }
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  if (!a5)
  {
    v16 = a2 + 6;
    v18 = a2 + 5;
    *a2 += v5;
    v17 = a2 + 7;
  }
  if (v15 == v14)
    goto LABEL_9;
LABEL_22:
  if (v6 > 0xFFFFFFFC)
  {
    v28 = pas_compact_heap_reservation_base + 8 * *((unsigned int *)result + 1);
    v29 = pas_bitfit_page_config_kind_for_config_table[*(unsigned __int8 *)(((8 * *(unsigned __int16 *)(v28 + 8)) | ((unint64_t)*(unsigned __int8 *)(v28 + 10) << 19))
                                                                          + pas_compact_heap_reservation_base
                                                                          + 124)];
    v30 = (unint64_t)&result[16
                                  * ((unint64_t)((*(_QWORD *)(v29 + 32) >> *(_BYTE *)(v29 + 28)) + 63) >> 6)
                                  + 16];
    v31 = a3 / v14;
    v32 = (a4 - 1) / v14;
    if (a3 / v14 > v32)
      return result;
    goto LABEL_35;
  }
  v24 = *((_QWORD *)result + 4);
  switch(*((_DWORD *)result + 8) & 7)
  {
    case 0:
    case 1:
      v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      v26 = *(unsigned __int8 *)(v25 + 10);
      v27 = *(unsigned __int16 *)(v25 + 8);
      goto LABEL_31;
    case 2:
      v34 = *(_QWORD *)((*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
      goto LABEL_33;
    case 3:
      v34 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
      goto LABEL_33;
    case 4:
      v35 = (unsigned __int16 *)(v24 | 7);
      v26 = *((unsigned __int8 *)v35 + 2);
      v27 = *v35;
LABEL_31:
      v34 = ((8 * v27) | (v26 << 19)) + pas_compact_heap_reservation_base;
      goto LABEL_33;
    case 5:
      v34 = v24 & 0xFFFFFFFFFFFFFFF8;
LABEL_33:
      v33 = *(unsigned __int8 *)(v34 + 12);
      break;
    default:
      v33 = 0;
      break;
  }
  v30 = (unint64_t)&result[4
                                * ((unint64_t)(*((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table
                                                                  + v33)
                                                      + 15)
                                                    + 31) >> 5)
                                + 44];
  v31 = a3 / v14;
  v32 = (a4 - 1) / v14;
  if (a3 / v14 <= v32)
  {
    do
    {
LABEL_35:
      v36 = *(unsigned __int8 *)(v30 + v31);
      v37 = v31 * v14;
      v38 = v31 + 1;
      v39 = (v31 + 1) * v14;
      if (a3 <= v37)
        result = (unsigned __int8 *)v37;
      else
        result = (unsigned __int8 *)a3;
      if (a4 >= v39)
        v40 = v39;
      else
        v40 = a4;
      if (a4 <= v37 || v39 <= a3)
      {
        result = 0;
        v40 = 0;
      }
      v42 = v37 == v39;
      if (v37 == v39)
        v43 = 0;
      else
        v43 = result;
      if (v42)
        v44 = 0;
      else
        v44 = v40;
      v45 = v44 - (_QWORD)v43;
      if (v36 == 255)
        v46 = v17;
      else
        v46 = v18;
      if (v36)
        v47 = v46;
      else
        v47 = v16;
      *v47 += v45;
      v31 = v38;
    }
    while (v38 <= v32);
  }
  return result;
}

uint64_t pas_page_header_table_hash(unint64_t a1, unint64_t a2)
{
  int v2;

  v2 = (a1 / a2) ^ ((a1 / a2) >> 4);
  return ((v2 ^ 0xDEADBEEF) + 32 * v2) ^ (((v2 ^ 0xDEADBEEF) + 32 * v2) >> 11);
}

uint64_t pas_page_malloc_alignment_slow()
{
  return sysconf(29);
}

uint64_t pas_page_malloc_alignment_shift_slow()
{
  if (!pas_page_malloc_cached_alignment)
    pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
  return 63 - __clz(pas_page_malloc_cached_alignment);
}

unint64_t pas_page_malloc_try_allocate_without_deallocating_padding@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  unint64_t v9;
  size_t v10;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  result = pas_page_malloc_cached_alignment;
  if (!pas_page_malloc_cached_alignment)
  {
    result = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = result;
  }
  v9 = (a2 + result - 1) & -(uint64_t)result;
  v10 = (a1 + v9 - 1) & -(uint64_t)v9;
  if (result)
  {
    if (v9 > result || a3 != 0)
      goto LABEL_14;
  }
  else
  {
    result = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = result;
    if (v9 > result || a3 != 0)
    {
LABEL_14:
      v13 = __CFADD__(v9, v10);
      v10 += v9;
      if (v13)
        return result;
    }
  }
  result = (unint64_t)mmap(0, v10, 3, 4098, 889192448, 0);
  if (result == -1)
  {
    result = (unint64_t)__error();
    *(_DWORD *)result = 0;
  }
  else
  {
    v14 = result;
    v15 = result + v10;
    v16 = ((v9 + result - 1) & -(uint64_t)v9) + a3;
    if (v16 + a1 <= result + v10)
      v17 = 0;
    else
      v17 = -(uint64_t)v9;
    v18 = v16 + v17;
    v19 = v16 + a1 + v17;
    if (!pas_page_malloc_cached_alignment)
    {
      result = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = result;
    }
    pas_page_malloc_num_allocated_bytes += v10;
    *(_QWORD *)a4 = v18;
    *(_QWORD *)(a4 + 8) = a1;
    *(_QWORD *)(a4 + 16) = v14;
    *(_QWORD *)(a4 + 24) = v18 - v14;
    *(_QWORD *)(a4 + 32) = v19;
    *(_QWORD *)(a4 + 40) = v15 - v19;
    *(_DWORD *)(a4 + 48) = 1;
  }
  return result;
}

int *pas_page_malloc_decommit(void *a1, size_t a2)
{
  int *result;

  do
  {
    result = (int *)madvise(a1, a2, 7);
    if ((_DWORD)result != -1)
      break;
    result = __error();
  }
  while (*result == 35);
  return result;
}

uint64_t pas_page_sharing_participant_take_least_recently_used(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v3;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  BOOL v12;
  int v13;
  unsigned int v14;

  v3 = (a1 & 7) - 1;
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  switch(v3)
  {
    case 0:
      result = pas_segregated_shared_page_directory_take_last_empty(v6, (uint64_t)a2, a3);
      break;
    case 1:
      result = pas_segregated_size_directory_take_last_empty(v6, (uint64_t)a2, a3);
      break;
    case 2:
      result = pas_bitfit_directory_take_last_empty(v6, a2, a3);
      break;
    case 3:
      if (!a3)
      {
        v9 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
        {
          if (!__stxr(v9, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_13;
        }
        __clrex();
        os_unfair_lock_lock(&pas_heap_lock);
      }
LABEL_13:
      v11 = qword_1ECF57AF8[0];
      if (pas_large_sharing_min_heap_instance[0])
        v12 = qword_1ECF57AF8[0] == 0;
      else
        v12 = 1;
      if (v12)
      {
        v8 = 0;
        if (a3)
          goto LABEL_4;
      }
      else
      {
        if (!pas_page_malloc_cached_alignment)
          pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
        if (try_splat(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), 0, 0, 0, a2, 0, (*(_DWORD *)(v11 + 12) >> 1) & 1, (*(_DWORD *)(v11 + 12) >> 2) & 1))v8 = 3;
        else
          v8 = 2;
        if (a3)
          goto LABEL_4;
      }
      v13 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v14 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v14 != v13)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_4;
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
      result = v8;
      break;
    default:
      v8 = 0;
LABEL_4:
      result = v8;
      break;
  }
  return result;
}

void pas_page_sharing_pool_add_at_index(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unsigned __int128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v5 = a1[1];
  v6 = *a1;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v45 = a2;
  if ((a2 & 7) - 1 >= 2)
  {
    if ((a2 & 7) == 3)
    {
      *(_DWORD *)(v7 + 104) = a3;
      v12 = a3 >> 5;
      v13 = *((unsigned int *)a1 + 5);
      if (a3 >> 5 < v13)
        goto LABEL_13;
    }
    else
    {
      DWORD2(pas_large_sharing_participant_payload) = a3;
      v12 = a3 >> 5;
      v13 = *((unsigned int *)a1 + 5);
      if (a3 >> 5 < v13)
        goto LABEL_13;
    }
    goto LABEL_27;
  }
  v8 = *(unsigned int *)(v7 + 4);
  v9 = pas_compact_heap_reservation_base;
  if ((_DWORD)v8)
    v10 = pas_compact_heap_reservation_base + 8 * v8;
  else
    v10 = 0;
  v11 = *(unsigned int *)(v10 + 56);
  if (v11 < 8)
    v9 = 0;
  *(_DWORD *)(((v9 + v11) & 0xFFFFFFFFFFFFFFFELL) + 8) = a3;
  v12 = a3 >> 5;
  v13 = *((unsigned int *)a1 + 5);
  if (a3 >> 5 >= v13)
  {
LABEL_27:
    v47 = v12;
    do
    {
      v25 = (v13 + 3) >> 2;
      v26 = v13 >> 2;
      v27 = *((unsigned int *)a1 + 4);
      if ((_DWORD)v27)
        v28 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v27);
      else
        v28 = 0;
      v29 = *((unsigned int *)a1 + 6);
      if (v26 >= v29)
      {
        v30 = 2 * v29 + 2;
        v31 = (char *)pas_immortal_heap_allocate_with_heap_lock_hold_mode(4 * v30, (uint64_t)"pas_page_sharing_pool_segmented_delta_bitvector/spine", 0, 1);
        memcpy(v31, v28, 4 * ((v13 + 3) >> 2));
        bzero(&v31[4 * ((v13 + 3) >> 2)], 4 * (v30 - v25));
        __dmb(0xBu);
        v32 = (unint64_t)&v31[-pas_compact_heap_reservation_base] >> 3;
        if (!v31)
          LODWORD(v32) = 0;
        *((_DWORD *)a1 + 4) = v32;
        __dmb(0xBu);
        *((_DWORD *)a1 + 6) = v30;
        v12 = v47;
        v28 = (unsigned int *)v31;
      }
      if ((_DWORD)v26 == (_DWORD)v25)
      {
        v22 = (_QWORD *)pas_immortal_heap_allocate_with_alignment_and_heap_lock_hold_mode(0x10uLL, 4uLL, (uint64_t)"pas_page_sharing_pool_segmented_delta_bitvector/segment", 0, 1);
        *v22 = 0;
        v22[1] = 0;
        __dmb(0xBu);
        v23 = (((unint64_t)v22 - pas_compact_heap_reservation_base) >> 3);
        if (!v22)
          v23 = 0;
        v28[v26] = v23;
      }
      else
      {
        v23 = v28[v26];
      }
      if (v23)
        v24 = pas_compact_heap_reservation_base + 8 * v23;
      else
        v24 = 0;
      *(_DWORD *)(v24 + 4 * (v13 & 3)) = 0;
      __dmb(0xBu);
      v13 = (*((_DWORD *)a1 + 5) + 1);
      *((_DWORD *)a1 + 5) = v13;
    }
    while (v12 >= v13);
  }
LABEL_13:
  __dmb(0xBu);
  v14 = *((unsigned int *)a1 + 8);
  v46 = v14;
  if (v14 <= a3)
  {
    LODWORD(v15) = v14;
    do
    {
      v36 = (v15 + 3) >> 2;
      v37 = v15 >> 2;
      v38 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v38)
        v39 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v38);
      else
        v39 = 0;
      v40 = *((unsigned int *)a1 + 9);
      if (v37 >= v40)
      {
        v41 = 2 * v40 + 2;
        v42 = (char *)pas_immortal_heap_allocate_with_heap_lock_hold_mode(4 * v41, (uint64_t)"pas_page_sharing_pool_segmented_participant_vector/spine", 0, 1);
        memcpy(v42, v39, 4 * ((v15 + 3) >> 2));
        bzero(&v42[4 * ((v15 + 3) >> 2)], 4 * (v41 - v36));
        __dmb(0xBu);
        v43 = (unint64_t)&v42[-pas_compact_heap_reservation_base] >> 3;
        if (!v42)
          LODWORD(v43) = 0;
        *((_DWORD *)a1 + 7) = v43;
        __dmb(0xBu);
        *((_DWORD *)a1 + 9) = v41;
        v39 = (unsigned int *)v42;
      }
      if ((_DWORD)v37 == (_DWORD)v36)
      {
        v33 = (_OWORD *)pas_immortal_heap_allocate_with_alignment_and_heap_lock_hold_mode(0x20uLL, 8uLL, (uint64_t)"pas_page_sharing_pool_segmented_participant_vector/segment", 0, 1);
        *v33 = 0u;
        v33[1] = 0u;
        __dmb(0xBu);
        v34 = (((unint64_t)v33 - pas_compact_heap_reservation_base) >> 3);
        if (!v33)
          v34 = 0;
        v39[v37] = v34;
      }
      else
      {
        v34 = v39[v37];
      }
      if (v34)
        v35 = pas_compact_heap_reservation_base + 8 * v34;
      else
        v35 = 0;
      *(_QWORD *)(v35 + 8 * (v15 & 3)) = 0;
      __dmb(0xBu);
      v15 = (*((_DWORD *)a1 + 8) + 1);
      *((_DWORD *)a1 + 8) = v15;
      v16 = v15;
    }
    while (v15 <= a3);
  }
  else
  {
    LODWORD(v15) = *((_DWORD *)a1 + 8);
    v16 = v15;
  }
  v17 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v17)
    v18 = pas_compact_heap_reservation_base + 8 * v17;
  else
    v18 = 0;
  v19 = *(unsigned int *)(v18 + (a3 & 0xFFFFFFFFFFFFFFFCLL));
  if ((_DWORD)v19)
    v20 = pas_compact_heap_reservation_base + 8 * v19;
  else
    v20 = 0;
  *(_QWORD *)(v20 + 8 * (a3 & 3)) = v45;
  if (v6 == v46 && v15 > v46 && v5 != -1)
  {
    if ((v5 & 1) != 0)
    {
      v21 = v5 + 1;
    }
    else
    {
      v21 = v5;
      if (v6 == v16)
        return;
    }
    v44 = __ldxp((unsigned __int128 *)a1);
    if ((unint64_t)v44 ^ v6 | *((_QWORD *)&v44 + 1) ^ v5)
      __clrex();
    else
      __stlxp(__PAIR128__(v21, v16), (unsigned __int128 *)a1);
    __dmb(0xBu);
  }
}

uint64_t pas_page_sharing_pool_take_least_recently_used(uint64_t a1, _QWORD *a2, unsigned int a3, unint64_t a4)
{
  unint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 *v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v30;
  unsigned __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int128 v35;
  uint64_t v36;
  unint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  __int128 *v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __int128 *v67;
  uint64_t *v68;
  __int128 *v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  __int128 *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  __int128 *v91;
  __int128 *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  __int128 v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 *v151;
  BOOL v152;
  uint64_t *v153;
  __int128 *v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t result;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 *v190;
  unint64_t StatusReg;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t *v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int64x2_t v206;
  __int128 v207;
  __int128 v208;

  v5 = (unint64_t *)(a1 + 40);
  v6 = (uint64_t *)(a1 + 48);
  v7 = (_QWORD *)&unk_1ECF57000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v198 = (unint64_t *)(a1 + 40);
  v201 = (uint64_t *)(a1 + 48);
  if (a4)
    goto LABEL_5;
LABEL_28:
  if (*(_QWORD *)a1 != *(_DWORD *)(a1 + 32))
    goto LABEL_65;
  v8 = *(_QWORD *)(a1 + 72);
  if (!v8)
    return 0;
  v15 = v8 & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(a1 + 72) & 7;
  v17 = v16 - 1;
  if ((v16 - 1) >= 2)
  {
    if ((_DWORD)v16 == 3)
    {
      v18 = (__int128 *)(v15 + 96);
      goto LABEL_47;
    }
    v18 = &pas_large_sharing_participant_payload;
    if ((_DWORD)v16 == 4)
    {
LABEL_44:
      if (qword_1ECF57AE8 != *(_QWORD *)v18)
        goto LABEL_64;
      goto LABEL_50;
    }
    v18 = 0;
    if (v17 < 2)
      goto LABEL_34;
LABEL_42:
    if ((_DWORD)v16 != 3)
    {
      if ((_DWORD)v16 != 4)
      {
        if (*(_QWORD *)v18)
          goto LABEL_64;
        goto LABEL_50;
      }
      goto LABEL_44;
    }
LABEL_47:
    if (pas_bitfit_directory_get_use_epoch(v8 & 0xFFFFFFFFFFFFFFF8) != *(_QWORD *)v18)
      goto LABEL_64;
    goto LABEL_50;
  }
  v19 = *(unsigned int *)(v15 + 4);
  v20 = pas_compact_heap_reservation_base;
  if ((_DWORD)v19)
    v21 = pas_compact_heap_reservation_base + 8 * v19;
  else
    v21 = 0;
  v22 = *(unsigned int *)(v21 + 56);
  if (v22 < 8)
    v20 = 0;
  v18 = (__int128 *)((v20 + v22) & 0xFFFFFFFFFFFFFFFELL);
  if (v17 >= 2)
    goto LABEL_42;
LABEL_34:
  if (pas_segregated_directory_get_use_epoch((unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8)) != *(_QWORD *)v18)
    goto LABEL_64;
LABEL_50:
  if (v17 < 2)
  {
    v23 = *(unsigned int *)(v15 + 4);
    if (!(_DWORD)v23 || (v24 = pas_compact_heap_reservation_base + 8 * v23) == 0)
    {
      if ((((unint64_t)*(unsigned int *)(v15 + 8) >> 1) & 1) == 0)
        goto LABEL_64;
LABEL_58:
      v7 = (_QWORD *)&unk_1ECF57000;
      v25 = v8 & 7;
      if ((v25 - 1) < 2)
      {
LABEL_336:
        v180 = *(unsigned int *)(v15 + 4);
        v181 = v7[317];
        if ((_DWORD)v180)
          v182 = v181 + 8 * v180;
        else
          v182 = 0;
        v183 = *(unsigned int *)(v182 + 56);
        if (v183 < 8)
          v181 = 0;
        v26 = (__int128 *)((v181 + v183) & 0xFFFFFFFFFFFFFFFELL);
        v27 = a4;
        v5 = v198;
        if (!a4)
          goto LABEL_343;
        goto LABEL_342;
      }
      goto LABEL_59;
    }
    if (*(_QWORD *)(v24 + 16))
      goto LABEL_58;
  }
  else
  {
    if ((_DWORD)v16 != 3)
    {
      if ((_DWORD)v16 != 4 || !pas_large_sharing_min_heap_instance[0])
        goto LABEL_64;
      goto LABEL_58;
    }
    if (*(_QWORD *)(v15 + 32))
      goto LABEL_58;
  }
LABEL_64:
  pas_page_sharing_pool_did_create_delta((unint64_t *)a1, v8);
  v5 = v198;
  v7 = (_QWORD *)&unk_1ECF57000;
LABEL_65:
  if (!a3)
  {
    v28 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v28, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_71;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_71:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  do
  {
    do
    {
      do
      {
        v33 = *(_QWORD *)(a1 + 8);
        v34 = *(_QWORD *)a1;
        if ((v33 & 1) != 0)
          break;
        v35 = __ldxp((unsigned __int128 *)a1);
        if ((unint64_t)v35 ^ v34 | *((_QWORD *)&v35 + 1) ^ v33)
        {
          __clrex();
        }
        else if (!__stlxp(__PAIR128__(v33 + 1, v34), (unsigned __int128 *)a1))
        {
          v36 = 1;
          goto LABEL_85;
        }
        v36 = 0;
LABEL_85:
        __dmb(0xBu);
        ++v33;
      }
      while (!v36);
      v199 = v33;
      v200 = v34;
      v205 = *(unsigned int *)(a1 + 32);
      if (v34 < v205)
      {
        for (i = v34; i != v205; ++i)
        {
          v38 = *(unsigned int *)(a1 + 16);
          v39 = v7[317];
          if ((_DWORD)v38)
            v40 = v39 + 8 * v38;
          else
            v40 = 0;
          v41 = *(unsigned int *)(v40 + ((i >> 5) & 0x7FFFFFFFFFFFFFCLL));
          if ((_DWORD)v41)
            v42 = v39 + 8 * v41;
          else
            v42 = 0;
          v43 = (unsigned int *)(v42 + 4 * ((i >> 5) & 3));
          do
          {
            v44 = *v43 & ~(1 << i);
            if (*v43 == v44)
              goto LABEL_89;
            v45 = __ldxr(v43);
            if (v45 == *v43)
            {
              if (!__stlxr(v44, v43))
              {
                v46 = 1;
                goto LABEL_103;
              }
            }
            else
            {
              __clrex();
            }
            v46 = 0;
LABEL_103:
            __dmb(0xBu);
          }
          while (!v46);
          v47 = *(unsigned int *)(a1 + 28);
          v48 = v7[317];
          if ((_DWORD)v47)
            v49 = v48 + 8 * v47;
          else
            v49 = 0;
          v50 = *(unsigned int *)(v49 + (i & 0xFFFFFFFFFFFFFFFCLL));
          if ((_DWORD)v50)
            v51 = v48 + 8 * v50;
          else
            v51 = 0;
          v52 = *(_QWORD *)(v51 + 8 * (i & 3));
          v53 = v52 & 0xFFFFFFFFFFFFFFF8;
          v204 = v52;
          v54 = v52 & 7;
          v55 = v54 - 1;
          if ((v54 - 1) < 2)
          {
            v58 = *(unsigned int *)(v53 + 4);
            if ((_DWORD)v58)
              v59 = v48 + 8 * v58;
            else
              v59 = 0;
            v60 = *(unsigned int *)(v59 + 56);
            if (v60 < 8)
              v48 = 0;
            v56 = (__int128 *)((v48 + v60) & 0xFFFFFFFFFFFFFFFELL);
            *(_QWORD *)v56 = pas_segregated_directory_get_use_epoch((unsigned int *)v53);
            *((_BYTE *)v56 + 16) = 0;
            __dmb(0xBu);
            v74 = *(unsigned int *)(v53 + 4);
            v75 = v7[317] + 8 * v74;
            if ((_DWORD)v74)
              v76 = v75 == 0;
            else
              v76 = 1;
            if (v76)
              v93 = ((unint64_t)*(unsigned int *)(v53 + 8) >> 1) & 1;
            else
              v93 = *(_QWORD *)(v75 + 16);
            if (v93)
            {
              v94 = *(unsigned int *)(v53 + 4);
              v95 = v7[317];
              if ((_DWORD)v94)
                v96 = v95 + 8 * v94;
              else
                v96 = 0;
              v97 = *(unsigned int *)(v96 + 56);
              if (v97 < 8)
                v95 = 0;
              v57 = (__int128 *)((v95 + v97) & 0xFFFFFFFFFFFFFFFELL);
              goto LABEL_124;
            }
LABEL_185:
            if (*((_DWORD *)v56 + 3))
              pas_page_sharing_pool_min_heap_remove(v5, v204);
            continue;
          }
          if (v54 == 3)
          {
            v56 = (__int128 *)(v53 + 96);
            *(_QWORD *)(v53 + 96) = pas_bitfit_directory_get_use_epoch(v53);
            *(_BYTE *)(v53 + 112) = 0;
            __dmb(0xBu);
            if (!*(_QWORD *)(v53 + 32))
              goto LABEL_185;
            v57 = (__int128 *)(v53 + 96);
          }
          else
          {
            v56 = 0;
            if (v54 != 4)
            {
              MEMORY[0] = 0;
              MEMORY[0x10] = 0;
              __dmb(0xBu);
              goto LABEL_185;
            }
            *(_QWORD *)&pas_large_sharing_participant_payload = qword_1ECF57AE8;
            byte_1ECF57AE0 = 0;
            __dmb(0xBu);
            v56 = &pas_large_sharing_participant_payload;
            v57 = &pas_large_sharing_participant_payload;
            if (!pas_large_sharing_min_heap_instance[0])
              goto LABEL_185;
          }
LABEL_124:
          if (!*((_DWORD *)v57 + 3))
            goto LABEL_225;
          if (v55 >= 2)
          {
            v67 = (__int128 *)(v53 + 96);
            if (v54 != 3)
              v67 = &pas_large_sharing_participant_payload;
            v65 = *((unsigned int *)v67 + 3);
            v66 = *v5;
            if (v65 >= 2)
              goto LABEL_136;
LABEL_164:
            if (2 * v65 <= v66)
            {
              if (v55 < 2)
              {
                v98 = *(unsigned int *)(v53 + 4);
                v99 = v7[317];
                if ((_DWORD)v98)
                  v100 = v99 + 8 * v98;
                else
                  v100 = 0;
                v101 = *(unsigned int *)(v100 + 56);
                if (v101 < 8)
                  v99 = 0;
                v92 = (__int128 *)((v99 + v101) & 0xFFFFFFFFFFFFFFFELL);
              }
              else if (v54 == 3)
              {
                v92 = (__int128 *)(v53 + 96);
              }
              else if (v54 == 4)
              {
                v92 = &pas_large_sharing_participant_payload;
              }
              else
              {
                v92 = 0;
              }
              v113 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v65 - 16) & 0xFFFFFFFFFFFFFFF8;
              v114 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v65 - 16) & 7;
              if ((v114 - 1) >= 2)
              {
                v119 = (__int128 *)(v113 + 96);
                if ((_DWORD)v114 != 3)
                  v119 = &pas_large_sharing_participant_payload;
                if (*(_QWORD *)v92 > *(_QWORD *)v119)
                  goto LABEL_224;
              }
              else
              {
                v115 = *(unsigned int *)(v113 + 4);
                v116 = v7[317];
                if ((_DWORD)v115)
                  v117 = v116 + 8 * v115;
                else
                  v117 = 0;
                v118 = *(unsigned int *)(v117 + 56);
                if (v118 < 8)
                  v116 = 0;
                if (*(_QWORD *)v92 > *(_QWORD *)((v116 + v118) & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_224;
              }
            }
            if (((2 * v65) | 1) > v66)
              continue;
            v86 = v6;
            if ((_DWORD)v65)
              v86 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v65 - 8);
            if (v55 < 2)
            {
              v102 = *(unsigned int *)(v53 + 4);
              v103 = v7[317];
              if ((_DWORD)v102)
                v104 = v103 + 8 * v102;
              else
                v104 = 0;
              v105 = *(unsigned int *)(v104 + 56);
              if (v105 < 8)
                v103 = 0;
              v87 = (__int128 *)((v103 + v105) & 0xFFFFFFFFFFFFFFFELL);
              v106 = *v86;
              v89 = *v86 & 0xFFFFFFFFFFFFFFF8;
              v90 = v106 & 7;
              if ((v90 - 1) < 2)
                goto LABEL_199;
LABEL_172:
              v91 = &pas_large_sharing_participant_payload;
              if (v90 == 3)
                v91 = (__int128 *)(v89 + 96);
            }
            else
            {
              if (v54 == 3)
              {
                v87 = (__int128 *)(v53 + 96);
                v176 = *v86;
                v89 = *v86 & 0xFFFFFFFFFFFFFFF8;
                v90 = v176 & 7;
                if ((v90 - 1) >= 2)
                  goto LABEL_172;
              }
              else if (v54 == 4)
              {
                v87 = &pas_large_sharing_participant_payload;
                v88 = *v86;
                v89 = *v86 & 0xFFFFFFFFFFFFFFF8;
                v90 = v88 & 7;
                if ((v90 - 1) >= 2)
                  goto LABEL_172;
              }
              else
              {
                v87 = 0;
                v177 = *v86;
                v89 = *v86 & 0xFFFFFFFFFFFFFFF8;
                v90 = v177 & 7;
                if ((v90 - 1) >= 2)
                  goto LABEL_172;
              }
LABEL_199:
              v107 = *(unsigned int *)(v89 + 4);
              v108 = v7[317];
              if ((_DWORD)v107)
                v109 = v108 + 8 * v107;
              else
                v109 = 0;
              v110 = *(unsigned int *)(v109 + 56);
              if (v110 < 8)
                v108 = 0;
              v91 = (__int128 *)((v108 + v110) & 0xFFFFFFFFFFFFFFFELL);
            }
            if (*(_QWORD *)v87 > *(_QWORD *)v91)
              goto LABEL_224;
            continue;
          }
          v61 = *(unsigned int *)(v53 + 4);
          v62 = v7[317];
          if ((_DWORD)v61)
            v63 = v62 + 8 * v61;
          else
            v63 = 0;
          v64 = *(unsigned int *)(v63 + 56);
          if (v64 < 8)
            v62 = 0;
          v65 = *(unsigned int *)(((v62 + v64) & 0xFFFFFFFFFFFFFFFELL) + 12);
          v66 = *v5;
          if (v65 < 2)
            goto LABEL_164;
LABEL_136:
          v68 = v6;
          if (v65 >> 1 != 1)
            v68 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 8 * ((v65 >> 1) - 1) - 8);
          if (v55 < 2)
          {
            v77 = *(unsigned int *)(v53 + 4);
            v78 = v7[317];
            if ((_DWORD)v77)
              v79 = v78 + 8 * v77;
            else
              v79 = 0;
            v80 = *(unsigned int *)(v79 + 56);
            if (v80 < 8)
              v78 = 0;
            v69 = (__int128 *)((v78 + v80) & 0xFFFFFFFFFFFFFFFELL);
            v81 = *v68;
            v71 = *v68 & 0xFFFFFFFFFFFFFFF8;
            v72 = v81 & 7;
            if ((v72 - 1) >= 2)
              goto LABEL_142;
          }
          else if (v54 == 3)
          {
            v69 = (__int128 *)(v53 + 96);
            v111 = *v68;
            v71 = *v68 & 0xFFFFFFFFFFFFFFF8;
            v72 = v111 & 7;
            if ((v72 - 1) >= 2)
              goto LABEL_142;
          }
          else if (v54 == 4)
          {
            v69 = &pas_large_sharing_participant_payload;
            v70 = *v68;
            v71 = *v68 & 0xFFFFFFFFFFFFFFF8;
            v72 = v70 & 7;
            if ((v72 - 1) >= 2)
            {
LABEL_142:
              v73 = &pas_large_sharing_participant_payload;
              if (v72 == 3)
                v73 = (__int128 *)(v71 + 96);
              if (*(_QWORD *)v69 >= *(_QWORD *)v73)
                goto LABEL_164;
              goto LABEL_224;
            }
          }
          else
          {
            v69 = 0;
            v112 = *v68;
            v71 = *v68 & 0xFFFFFFFFFFFFFFF8;
            v72 = v112 & 7;
            if ((v72 - 1) >= 2)
              goto LABEL_142;
          }
          v82 = *(unsigned int *)(v71 + 4);
          v83 = v7[317];
          if ((_DWORD)v82)
            v84 = v83 + 8 * v82;
          else
            v84 = 0;
          v85 = *(unsigned int *)(v84 + 56);
          if (v85 < 8)
            v83 = 0;
          if (*(_QWORD *)v69 >= *(_QWORD *)((v83 + v85) & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_164;
LABEL_224:
          pas_page_sharing_pool_min_heap_remove(v5, v204);
LABEL_225:
          v120 = *(_QWORD *)(a1 + 40);
          v121 = *(_QWORD *)(a1 + 64);
          if (v120 >= v121 + 1)
          {
            v122 = 2 * v121;
            v207 = 0u;
            v208 = 0u;
            if ((unint64_t)(2 * v121) <= 4)
              v122 = 4;
            v203 = v122;
            v123 = 8 * v122;
            v206 = 0uLL;
            os_unfair_lock_assert_owner(&pas_heap_lock);
            initialize_config(&v206);
            v124 = (void *)try_allocate_without_fixing(&pas_bootstrap_free_heap, v123, 8uLL, 0, (unint64_t *)&v206);
            v202 = v125;
            v126 = qword_1ECF551A8;
            if (qword_1ECF551A0 > (unint64_t)qword_1ECF551A8)
            {
              v127 = 2 * qword_1ECF551A0;
              if ((unint64_t)(2 * qword_1ECF551A0) <= 4)
                v127 = 4;
              v195 = v127;
              v196 = pas_bootstrap_free_heap;
              v128 = try_allocate_without_fixing(&pas_bootstrap_free_heap, 24 * v127, 8uLL, 0, (unint64_t *)&v206);
              if (qword_1ECF551A0)
              {
                v129 = 0;
                v130 = 0;
                do
                {
                  if (v130 >= qword_1ECF551A8)
                    v131 = (char *)&bootstrap_free_list + 24 * (v130 - qword_1ECF551A8);
                  else
                    v131 = (char *)(pas_bootstrap_free_heap + v129);
                  v132 = v128 + v129;
                  v133 = *(_OWORD *)v131;
                  *(_QWORD *)(v132 + 16) = *((_QWORD *)v131 + 2);
                  *(_OWORD *)v132 = v133;
                  ++v130;
                  v129 += 24;
                }
                while (v130 < qword_1ECF551A0);
              }
              pas_bootstrap_free_heap = v128;
              qword_1ECF551A8 = v195;
              if (v196)
                merge_physical(&pas_bootstrap_free_heap, v196, v196 + 24 * v126, 0, &v206);
            }
            if (v124 && pas_allocation_callback)
              pas_allocation_callback(v124, v123, 0, "pas_page_sharing_pool_min_heap/outline_array", 0);
            v6 = v201;
            if ((v202 & 1) != 0)
            {
              pas_bootstrap_free_heap_num_allocated_object_bytes += v123;
              v134 = pas_bootstrap_free_heap_num_allocated_object_bytes;
              if (pas_bootstrap_free_heap_num_allocated_object_bytes <= (unint64_t)pas_bootstrap_free_heap_num_allocated_object_bytes_peak)
                v134 = pas_bootstrap_free_heap_num_allocated_object_bytes_peak;
              pas_bootstrap_free_heap_num_allocated_object_bytes_peak = v134;
            }
            bzero(v124, v123);
            memcpy(v124, *(const void **)(a1 + 56), 8 * v120 - 8);
            v135 = 8 * v121;
            if (8 * v121)
            {
              v136 = *(_QWORD *)(a1 + 56);
              if (v136 && pas_deallocation_callback)
                pas_deallocation_callback(*(_QWORD *)(a1 + 56), v135, 0, 0);
              v207 = 0u;
              v208 = 0u;
              v206 = 0u;
              initialize_config(&v206);
              os_unfair_lock_assert_owner(&pas_heap_lock);
              merge_physical(&pas_bootstrap_free_heap, v136, v135 + v136, 0, &v206);
              v137 = qword_1ECF551A8;
              if (qword_1ECF551A0 > (unint64_t)qword_1ECF551A8)
              {
                v197 = pas_bootstrap_free_heap;
                if ((unint64_t)(2 * qword_1ECF551A0) <= 4)
                  v138 = 4;
                else
                  v138 = 2 * qword_1ECF551A0;
                v139 = try_allocate_without_fixing(&pas_bootstrap_free_heap, 24 * v138, 8uLL, 0, (unint64_t *)&v206);
                if (qword_1ECF551A0)
                {
                  v140 = 0;
                  v141 = 0;
                  do
                  {
                    if (v141 >= qword_1ECF551A8)
                      v142 = (char *)&bootstrap_free_list + 24 * (v141 - qword_1ECF551A8);
                    else
                      v142 = (char *)(pas_bootstrap_free_heap + v140);
                    v143 = v139 + v140;
                    v144 = *(_OWORD *)v142;
                    *(_QWORD *)(v143 + 16) = *((_QWORD *)v142 + 2);
                    *(_OWORD *)v143 = v144;
                    ++v141;
                    v140 += 24;
                  }
                  while (v141 < qword_1ECF551A0);
                }
                pas_bootstrap_free_heap = v139;
                qword_1ECF551A8 = v138;
                if (v197)
                  merge_physical(&pas_bootstrap_free_heap, v197, v197 + 24 * v137, 0, &v206);
              }
              pas_bootstrap_free_heap_num_allocated_object_bytes -= v135;
              v6 = v201;
            }
            *(_QWORD *)(a1 + 56) = v124;
            *(_QWORD *)(a1 + 64) = v203;
            v5 = v198;
          }
          v145 = v120 + 1;
          if (v120)
          {
            v146 = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v120 - 8) = 0;
            *(_QWORD *)(a1 + 40) = v145;
            v7 = &unk_1ECF57000;
            if (v145 >= 2)
            {
              do
              {
                v146 = v145 >> 1;
                v153 = v6;
                if (v145 >> 1 != 1)
                  v153 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 8 * ((v145 >> 1) - 1) - 8);
                if (v55 < 2)
                {
                  v164 = *(unsigned int *)(v53 + 4);
                  v165 = pas_compact_heap_reservation_base;
                  if ((_DWORD)v164)
                    v166 = pas_compact_heap_reservation_base + 8 * v164;
                  else
                    v166 = 0;
                  v167 = *(unsigned int *)(v166 + 56);
                  if (v167 < 8)
                    v165 = 0;
                  v155 = (_QWORD *)((v165 + v167) & 0xFFFFFFFFFFFFFFFELL);
                  v156 = *v153;
                  v157 = v156 & 0xFFFFFFFFFFFFFFF8;
                  v158 = v156 & 7;
                  v159 = v158 - 1;
                  if ((v158 - 1) < 2)
                  {
LABEL_287:
                    v160 = *(unsigned int *)(v157 + 4);
                    v161 = pas_compact_heap_reservation_base;
                    if ((_DWORD)v160)
                      v162 = pas_compact_heap_reservation_base + 8 * v160;
                    else
                      v162 = 0;
                    v163 = *(unsigned int *)(v162 + 56);
                    if (v163 < 8)
                      v161 = 0;
                    if (*v155 >= *(_QWORD *)((v161 + v163) & 0xFFFFFFFFFFFFFFFELL))
                      goto LABEL_315;
                    goto LABEL_303;
                  }
                }
                else
                {
                  if (v54 == 4)
                    v154 = &pas_large_sharing_participant_payload;
                  else
                    v154 = 0;
                  if (v54 == 3)
                    v155 = (_QWORD *)(v53 + 96);
                  else
                    v155 = v154;
                  v156 = *v153;
                  v157 = v156 & 0xFFFFFFFFFFFFFFF8;
                  v158 = v156 & 7;
                  v159 = v158 - 1;
                  if ((v158 - 1) < 2)
                    goto LABEL_287;
                }
                v168 = (__int128 *)(v157 + 96);
                if (v158 != 3)
                  v168 = &pas_large_sharing_participant_payload;
                if (*v155 >= *(_QWORD *)v168)
                {
LABEL_315:
                  v146 = v145;
                  if (v55 >= 2)
                    goto LABEL_316;
LABEL_309:
                  v169 = *(unsigned int *)(v53 + 4);
                  v170 = pas_compact_heap_reservation_base;
                  if ((_DWORD)v169)
                    v171 = pas_compact_heap_reservation_base + 8 * v169;
                  else
                    v171 = 0;
                  v172 = *(unsigned int *)(v171 + 56);
                  if (v172 < 8)
                    v170 = 0;
                  v173 = (__int128 *)((v170 + v172) & 0xFFFFFFFFFFFFFFFELL);
                  goto LABEL_318;
                }
LABEL_303:
                if (v159 < 2)
                {
                  v147 = *(unsigned int *)(v157 + 4);
                  v148 = pas_compact_heap_reservation_base;
                  if ((_DWORD)v147)
                    v149 = pas_compact_heap_reservation_base + 8 * v147;
                  else
                    v149 = 0;
                  v150 = *(unsigned int *)(v149 + 56);
                  if (v150 < 8)
                    v148 = 0;
                  v151 = (__int128 *)((v148 + v150) & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  v151 = (__int128 *)(v157 + 96);
                  if (v158 != 3)
                    v151 = &pas_large_sharing_participant_payload;
                }
                *((_DWORD *)v151 + 3) = v145;
                *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v145 - 16) = v156;
                v152 = v145 > 3;
                v145 >>= 1;
              }
              while (v152);
            }
          }
          else
          {
            *v6 = 0;
            *v5 = v145;
            v146 = 1;
            v7 = &unk_1ECF57000;
          }
          if (v55 < 2)
            goto LABEL_309;
LABEL_316:
          v173 = &pas_large_sharing_participant_payload;
          if (v54 == 3)
            v173 = (__int128 *)(v53 + 96);
LABEL_318:
          *((_DWORD *)v173 + 3) = v146;
          v174 = v6;
          v175 = v146 - 1;
          if (v175)
            v174 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 8 * v175 - 8);
          *v174 = v204;
LABEL_89:
          ;
        }
      }
    }
    while (v199 == -1);
    if ((v199 & 1) != 0)
    {
      v30 = v199 + 1;
      goto LABEL_73;
    }
    v30 = v199;
    if (v200 == v205)
      break;
LABEL_73:
    v31 = __ldxp((unsigned __int128 *)a1);
    if ((unint64_t)v31 ^ v200 | *((_QWORD *)&v31 + 1) ^ v199)
    {
      __clrex();
LABEL_77:
      v32 = 0;
      goto LABEL_78;
    }
    if (__stlxp(__PAIR128__(v30, v205), (unsigned __int128 *)a1))
      goto LABEL_77;
    v32 = 1;
LABEL_78:
    __dmb(0xBu);
  }
  while (!v32);
  if (!*v5)
  {
    v8 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    if (a3)
      goto LABEL_334;
LABEL_331:
    v178 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v179 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v179 != v178)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_334;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
    if (!v8)
      return 0;
LABEL_335:
    v15 = v8 & 0xFFFFFFFFFFFFFFF8;
    v25 = v8 & 7;
    if ((v25 - 1) < 2)
      goto LABEL_336;
LABEL_59:
    v13 = v25 == 3;
    v26 = (__int128 *)(v15 + 96);
    if (!v13)
      v26 = &pas_large_sharing_participant_payload;
    v27 = a4;
    v5 = v198;
    if (a4)
    {
LABEL_342:
      if (*(_QWORD *)v26 <= v27)
        goto LABEL_343;
      return 1;
    }
    while (1)
    {
      while (1)
      {
LABEL_343:
        result = pas_page_sharing_participant_take_least_recently_used(v8, a2, a3);
        if ((_DWORD)result)
        {
          if ((result - 2) < 2)
            return result;
          if (!a4)
            goto LABEL_28;
        }
        else
        {
          v185 = v8 & 0xFFFFFFFFFFFFFFF8;
          if ((v8 & 7) - 1 >= 2)
          {
            v190 = (__int128 *)(v185 + 96);
            if ((v8 & 7) != 3)
              v190 = &pas_large_sharing_participant_payload;
          }
          else
          {
            v186 = *(unsigned int *)(v185 + 4);
            v187 = v7[317];
            if ((_DWORD)v186)
              v188 = v187 + 8 * v186;
            else
              v188 = 0;
            v189 = *(unsigned int *)(v188 + 56);
            if (v189 < 8)
              v187 = 0;
            v190 = (__int128 *)((v187 + v189) & 0xFFFFFFFFFFFFFFFELL);
          }
          *((_BYTE *)v190 + 16) = 0;
          pas_page_sharing_pool_did_create_delta((unint64_t *)a1, v8);
          if (!a4)
            goto LABEL_28;
        }
LABEL_5:
        v8 = *(_QWORD *)(a1 + 72);
        if (!v8)
          goto LABEL_28;
        v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        v10 = *(_QWORD *)(a1 + 72) & 7;
        if ((v10 - 1) >= 2)
          break;
        v11 = *(unsigned int *)(v9 + 4);
        v12 = v7[317] + 8 * v11;
        if ((_DWORD)v11)
          v13 = v12 == 0;
        else
          v13 = 1;
        if (v13)
          v14 = ((unint64_t)*(unsigned int *)(v9 + 8) >> 1) & 1;
        else
          v14 = *(_QWORD *)(v12 + 16);
        if (!v14)
          goto LABEL_28;
        if ((v10 - 1) < 2)
        {
          if (pas_segregated_directory_get_use_epoch((unsigned int *)v9) > a4)
            goto LABEL_28;
        }
        else if ((_DWORD)v10 == 3)
        {
LABEL_25:
          if (pas_bitfit_directory_get_use_epoch(v9) > a4)
            goto LABEL_28;
        }
        else if ((_DWORD)v10 == 4)
        {
          goto LABEL_23;
        }
      }
      if ((_DWORD)v10 == 3)
      {
        if (!*(_QWORD *)(v9 + 32))
          goto LABEL_28;
        goto LABEL_25;
      }
      if ((_DWORD)v10 != 4 || !pas_large_sharing_min_heap_instance[0])
        goto LABEL_28;
LABEL_23:
      if (qword_1ECF57AE8 > a4)
        goto LABEL_28;
    }
  }
  v8 = *v6;
  *(_QWORD *)(a1 + 72) = *v6;
  if (!a3)
    goto LABEL_331;
LABEL_334:
  if (v8)
    goto LABEL_335;
  return 0;
}

unint64_t pas_physical_page_sharing_pool_take(unint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  _BOOL4 v15;
  BOOL v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[131];
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (!pas_physical_page_sharing_pool_balancing_enabled)
    return result;
  do
  {
    while (1)
    {
      v9 = pas_physical_page_sharing_pool_balance;
      if (pas_physical_page_sharing_pool_balance < 0 || pas_physical_page_sharing_pool_balance < result)
        break;
      v10 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v10 != pas_physical_page_sharing_pool_balance)
      {
        __clrex();
LABEL_15:
        v11 = 0;
        goto LABEL_16;
      }
      if (__stlxr(pas_physical_page_sharing_pool_balance - result, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_15;
      }
      v11 = 1;
LABEL_16:
      __dmb(0xBu);
      if (v11)
        return result;
    }
    v7 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
    if (v7 == pas_physical_page_sharing_pool_balance)
    {
      if (!__stlxr(0, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        v8 = 1;
        goto LABEL_8;
      }
    }
    else
    {
      __clrex();
    }
    v8 = 0;
LABEL_8:
    __dmb(0xBu);
  }
  while (!v8);
  v12 = result - v9;
  if (result != v9)
  {
    bzero(v24, 0x428uLL);
    v26 = a3;
    v27 = a4;
    v28 = 0;
    while (1)
    {
      v13 = v25;
      if (v25 >= v12)
        break;
      v14 = pas_page_sharing_pool_take_least_recently_used((uint64_t)pas_physical_page_sharing_pool, v24, a2, 0);
      if (v14 != 3)
      {
        v13 = v25;
        v15 = v14 != 2;
        goto LABEL_24;
      }
    }
    v15 = 1;
LABEL_24:
    v16 = v13 >= v12;
    v17 = v13 - v12;
    v18 = !v16;
    if ((v15 & v18) != 0)
      v19 = 0;
    else
      v19 = v17;
    decommit_all((uint64_t)v24, 1);
    v20 = pas_bootstrap_free_heap_deallocate_for_config;
    if (!a2)
      v20 = pas_bootstrap_free_heap_hold_lock_and_deallocate_for_config;
    result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))v20)(v24[129], 32 * v24[130], 0, 0);
    while (2)
    {
      v21 = pas_physical_page_sharing_pool_balance;
      v22 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v22 == v21)
      {
        if (!__stlxr(pas_physical_page_sharing_pool_balance + v19, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        {
          v23 = 1;
          goto LABEL_38;
        }
      }
      else
      {
        __clrex();
      }
      v23 = 0;
LABEL_38:
      __dmb(0xBu);
      if (v23)
        return result;
      continue;
    }
  }
  return result;
}

uint64_t pas_physical_page_sharing_pool_scavenge(unint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  unint64_t StatusReg;
  unsigned int v5;
  os_unfair_lock_s *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  int v15;
  unsigned int v16;
  _OWORD v18[64];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s **v22;
  uint64_t v23;
  os_unfair_lock_s **v24;
  os_unfair_lock_s *v25;
  os_unfair_lock_s *v26;

  v2 = 0;
  v3 = 0;
  v25 = 0;
  v26 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    memset(v18, 0, 512);
    if (v2)
    {
      v5 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&v2->_os_unfair_lock_opaque))
      {
        if (!__stxr(v5, &v2->_os_unfair_lock_opaque))
          goto LABEL_11;
      }
      __clrex();
      os_unfair_lock_lock(v2);
LABEL_11:
      v7 = v25;
      v25 = 0;
      v26 = v7;
    }
    bzero(v18, 0x428uLL);
    v22 = &v26;
    v23 = 1;
    v24 = &v25;
    do
      v8 = pas_page_sharing_pool_take_least_recently_used((uint64_t)pas_physical_page_sharing_pool, v18, 0, a1);
    while (v8 == 3);
    v9 = v8;
    v10 = v21;
    do
    {
      v11 = pas_physical_page_sharing_pool_balance;
      v12 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v12 == v11)
      {
        if (!__stlxr((v21 + pas_physical_page_sharing_pool_balance) & ((v21 + pas_physical_page_sharing_pool_balance) >> 63), (unint64_t *)&pas_physical_page_sharing_pool_balance))
        {
          v13 = 1;
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      v13 = 0;
LABEL_20:
      __dmb(0xBu);
    }
    while (!v13);
    decommit_all((uint64_t)v18, 1);
    pas_bootstrap_free_heap_hold_lock_and_deallocate_for_config(v19, 32 * v20, 0);
    v14 = v26;
    if (v26)
    {
      v15 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v16 = __ldxr(&v14->_os_unfair_lock_opaque);
        if (v16 != v15)
          break;
        if (!__stlxr(0, &v14->_os_unfair_lock_opaque))
          goto LABEL_3;
      }
      __clrex();
      os_unfair_lock_unlock(v14);
LABEL_3:
      v26 = 0;
    }
    v3 += v10;
    v2 = v25;
  }
  while (v25);
  return v9;
}

unint64_t pas_physical_page_sharing_pool_take_for_page_config(unint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (pas_physical_page_sharing_pool_balancing_enabled)
  {
    if (*(_DWORD *)(a2 + 24) || *(_DWORD *)(a2 + 100) != 1)
    {
      return pas_physical_page_sharing_pool_take(result, a3, a4, a5);
    }
    else if (pas_physical_page_sharing_pool_balancing_enabled_for_utility)
    {
      while (1)
      {
        v5 = pas_physical_page_sharing_pool_balance;
        v6 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
        if (v6 != v5)
          break;
        if (__stlxr(pas_physical_page_sharing_pool_balance - result, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        {
          goto LABEL_9;
        }
        v7 = 1;
LABEL_10:
        __dmb(0xBu);
        if (v7)
          return result;
      }
      __clrex();
LABEL_9:
      v7 = 0;
      goto LABEL_10;
    }
  }
  return result;
}

unint64_t *pas_page_sharing_pool_did_create_delta(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  v3 = a2 & 7;
  if ((v3 - 1) < 2)
  {
    v6 = *(unsigned int *)(v2 + 4);
    v7 = pas_compact_heap_reservation_base;
    if ((_DWORD)v6)
      v8 = pas_compact_heap_reservation_base + 8 * v6;
    else
      v8 = 0;
    v9 = *(unsigned int *)(v8 + 56);
    if (v9 < 8)
      v7 = 0;
    v4 = (v7 + v9) & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_BYTE *)(v4 + 16))
      goto LABEL_14;
  }
  else
  {
    v4 = v2 + 96;
    v5 = &pas_large_sharing_participant_payload;
    if (v3 != 4)
      v5 = 0;
    if (v3 != 3)
      v4 = (unint64_t)v5;
    if (!*(_BYTE *)(v4 + 16))
    {
LABEL_14:
      *(_BYTE *)(v4 + 16) = 1;
      __dmb(0xBu);
      v10 = *(unsigned int *)(v4 + 8);
      v11 = *((unsigned int *)result + 4);
      if ((_DWORD)v11)
        v12 = pas_compact_heap_reservation_base + 8 * v11;
      else
        v12 = 0;
      v13 = *(unsigned int *)(v12 + ((v10 >> 5) & 0x7FFFFFC));
      if ((_DWORD)v13)
        v14 = pas_compact_heap_reservation_base + 8 * v13;
      else
        v14 = 0;
      v15 = (unsigned int *)(v14 + 4 * ((v10 >> 5) & 3));
      while (1)
      {
        v16 = *v15 | (1 << v10);
        if (*v15 == v16)
          goto LABEL_36;
        v17 = __ldxr(v15);
        if (v17 != *v15)
          break;
        if (__stlxr(v16, v15))
          goto LABEL_26;
        v18 = 1;
LABEL_27:
        __dmb(0xBu);
        if (v18)
        {
          while (1)
          {
            do
            {
LABEL_36:
              v22 = result[1];
              v23 = *result;
              if (*result >= v10)
                v24 = v10;
              else
                v24 = *result;
            }
            while (v22 == -1);
            if ((v22 & 1) != 0)
            {
              v19 = v22 + 1;
            }
            else
            {
              v19 = result[1];
              if (v23 <= v10)
                goto LABEL_42;
            }
            v20 = __ldxp((unsigned __int128 *)result);
            if ((unint64_t)v20 ^ v23 | *((_QWORD *)&v20 + 1) ^ v22)
              break;
            if (__stlxp(__PAIR128__(v19, v24), (unsigned __int128 *)result))
              goto LABEL_34;
            v21 = 1;
LABEL_35:
            __dmb(0xBu);
            if (v21)
              goto LABEL_42;
          }
          __clrex();
LABEL_34:
          v21 = 0;
          goto LABEL_35;
        }
      }
      __clrex();
LABEL_26:
      v18 = 0;
      goto LABEL_27;
    }
  }
LABEL_42:
  if (pas_scavenger_current_state != 1 && pas_scavenger_eligibility_notification_has_been_deferred == 0)
  {
    __dmb(0xBu);
    pas_scavenger_eligibility_notification_has_been_deferred = 1;
  }
  return result;
}

unint64_t *pas_page_sharing_pool_min_heap_remove(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  __int128 *v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  __int128 *v63;
  __int128 *v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  __int128 *v98;
  unint64_t v99;
  int v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 *v121;
  unint64_t *v122;
  __int128 *v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 *v130;
  unint64_t v131;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 7) - 1 >= 2)
  {
    v21 = (__int128 *)(v2 + 96);
    if ((a2 & 7) != 3)
      v21 = &pas_large_sharing_participant_payload;
    v7 = *((unsigned int *)v21 + 3);
    v8 = *result;
    v9 = v7 - 1;
    if (v7 != 1)
    {
LABEL_8:
      v10 = (uint64_t *)(result[2] + 8 * v9 - 8);
      v11 = v8 - 1;
      if (v8 != 1)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else
  {
    v3 = *(unsigned int *)(v2 + 4);
    v4 = pas_compact_heap_reservation_base;
    if ((_DWORD)v3)
      v5 = pas_compact_heap_reservation_base + 8 * v3;
    else
      v5 = 0;
    v6 = *(unsigned int *)(v5 + 56);
    if (v6 < 8)
      v4 = 0;
    v7 = *(unsigned int *)(((v4 + v6) & 0xFFFFFFFFFFFFFFFELL) + 12);
    v8 = *result;
    v9 = v7 - 1;
    if (v7 != 1)
      goto LABEL_8;
  }
  v10 = (uint64_t *)(result + 1);
  v11 = v8 - 1;
  if (v8 != 1)
  {
LABEL_9:
    v12 = (unint64_t *)(result[2] + 8 * v11 - 8);
    v13 = *v10;
    v14 = *v12;
    *v12 = 0;
    if (v9)
      goto LABEL_10;
LABEL_23:
    result[1] = 0;
    *result = v11;
    if (v8 == v7)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_22:
  v13 = *v10;
  v14 = result[1];
  result[1] = 0;
  if (!v9)
    goto LABEL_23;
LABEL_10:
  *(_QWORD *)(result[2] + 8 * v9 - 8) = 0;
  *result = v11;
  if (v8 == v7)
  {
LABEL_11:
    v15 = v13 & 0xFFFFFFFFFFFFFFF8;
    v16 = v13 & 7;
    if ((v16 - 1) >= 2)
      goto LABEL_202;
LABEL_12:
    v17 = *(unsigned int *)(v15 + 4);
    v18 = pas_compact_heap_reservation_base;
    if ((_DWORD)v17)
      v19 = pas_compact_heap_reservation_base + 8 * v17;
    else
      v19 = 0;
    v20 = *(unsigned int *)(v19 + 56);
    if (v20 < 8)
      v18 = 0;
    *(_DWORD *)(((v18 + v20) & 0xFFFFFFFFFFFFFFFELL) + 12) = 0;
    return result;
  }
LABEL_24:
  if (v7 <= 1)
  {
    v22 = v14 & 0xFFFFFFFFFFFFFFF8;
    v23 = v14 & 7;
LABEL_26:
    v24 = v23 - 1;
    v25 = 2 * v7;
    v26 = (2 * v7) | 1;
    if (v26 <= v11)
      goto LABEL_27;
LABEL_58:
    if (v25 > v11)
      goto LABEL_128;
    v29 = 0;
    v38 = 1;
    if (v24 < 2)
    {
LABEL_60:
      v46 = *(unsigned int *)(v22 + 4);
      v47 = pas_compact_heap_reservation_base;
      if ((_DWORD)v46)
        v48 = pas_compact_heap_reservation_base + 8 * v46;
      else
        v48 = 0;
      v49 = *(unsigned int *)(v48 + 56);
      if (v49 < 8)
        v47 = 0;
      v39 = (__int128 *)((v47 + v49) & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_66;
    }
    while (1)
    {
      v39 = (__int128 *)(v22 + 96);
      if (v23 != 3)
      {
        if (v23 == 4)
          v39 = &pas_large_sharing_participant_payload;
        else
          v39 = 0;
      }
LABEL_66:
      v50 = result[2];
      v51 = *(_QWORD *)(v50 + 8 * v25 - 16);
      v52 = v51 & 0xFFFFFFFFFFFFFFF8;
      v53 = v51 & 7;
      v54 = v53 - 1;
      if (v54 >= 2)
      {
        v65 = (__int128 *)(v52 + 96);
        if (v53 != 3)
          v65 = &pas_large_sharing_participant_payload;
        v60 = *(_QWORD *)v39;
        v61 = *(_QWORD *)v65;
        if (v38)
        {
LABEL_85:
          if (v60 <= v61)
          {
LABEL_128:
            v88 = v7;
            goto LABEL_129;
          }
          goto LABEL_86;
        }
      }
      else
      {
        v55 = *(unsigned int *)(v52 + 4);
        v56 = pas_compact_heap_reservation_base;
        if ((_DWORD)v55)
          v57 = pas_compact_heap_reservation_base + 8 * v55;
        else
          v57 = 0;
        v58 = *(unsigned int *)(v57 + 56);
        if (v58 < 8)
          v56 = 0;
        v59 = (unint64_t *)((v56 + v58) & 0xFFFFFFFFFFFFFFFELL);
        v60 = *(_QWORD *)v39;
        v61 = *v59;
        if (v38)
          goto LABEL_85;
      }
      v30 = v29 & 0xFFFFFFFFFFFFFFF8;
      if (v60 <= v61)
        goto LABEL_111;
      v62 = v29 & 7;
      if ((v62 - 1) < 2)
      {
        v73 = *(unsigned int *)(v30 + 4);
        v74 = pas_compact_heap_reservation_base;
        if ((_DWORD)v73)
          v75 = pas_compact_heap_reservation_base + 8 * v73;
        else
          v75 = 0;
        v76 = *(unsigned int *)(v75 + 56);
        if (v76 < 8)
          v74 = 0;
        v63 = (__int128 *)((v74 + v76) & 0xFFFFFFFFFFFFFFFELL);
        if (v54 >= 2)
        {
LABEL_78:
          v64 = &pas_large_sharing_participant_payload;
          if (v53 == 3)
            v64 = (__int128 *)(v52 + 96);
          if (*(_QWORD *)v63 < *(_QWORD *)v64)
            goto LABEL_111;
          goto LABEL_86;
        }
      }
      else if (v62 == 3)
      {
        v63 = (__int128 *)(v30 + 96);
        if (v54 >= 2)
          goto LABEL_78;
      }
      else if (v62 == 4)
      {
        v63 = &pas_large_sharing_participant_payload;
        if (v54 >= 2)
          goto LABEL_78;
      }
      else
      {
        v63 = 0;
        if (v54 >= 2)
          goto LABEL_78;
      }
      v77 = *(unsigned int *)(v52 + 4);
      v78 = pas_compact_heap_reservation_base;
      if ((_DWORD)v77)
        v79 = pas_compact_heap_reservation_base + 8 * v77;
      else
        v79 = 0;
      v80 = *(unsigned int *)(v79 + 56);
      if (v80 < 8)
        v78 = 0;
      if (*(_QWORD *)v63 < *(_QWORD *)((v78 + v80) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_111;
LABEL_86:
      if (v54 >= 2)
      {
        v70 = (__int128 *)(v52 + 96);
        if (v53 != 3)
          v70 = &pas_large_sharing_participant_payload;
      }
      else
      {
        v66 = *(unsigned int *)(v52 + 4);
        v67 = pas_compact_heap_reservation_base;
        if ((_DWORD)v66)
          v68 = pas_compact_heap_reservation_base + 8 * v66;
        else
          v68 = 0;
        v69 = *(unsigned int *)(v68 + 56);
        if (v69 < 8)
          v67 = 0;
        v70 = (__int128 *)((v67 + v69) & 0xFFFFFFFFFFFFFFFELL);
      }
      *((_DWORD *)v70 + 3) = v7;
      v71 = v7 - 1;
      v44 = v71 == 0;
      v72 = (_QWORD *)(v50 + 8 * v71 - 8);
      if (v44)
        v72 = result + 1;
      *v72 = v51;
      v7 = v25;
      v25 *= 2;
      v26 = (2 * v7) | 1;
      if (v26 > v11)
        goto LABEL_58;
LABEL_27:
      while (2)
      {
        v27 = (uint64_t *)(result + 1);
        if (v25)
          v27 = (uint64_t *)(result[2] + 8 * v25 - 8);
        if (v24 >= 2)
        {
          if (v23 == 4)
            v28 = &pas_large_sharing_participant_payload;
          else
            v28 = 0;
          if (v23 == 3)
            v28 = (__int128 *)(v22 + 96);
          v29 = *v27;
          v30 = v29 & 0xFFFFFFFFFFFFFFF8;
          v31 = v29 & 7;
          if ((v31 - 1) < 2)
            goto LABEL_36;
LABEL_52:
          v44 = v31 == 3;
          v45 = (__int128 *)(v30 + 96);
          if (!v44)
            v45 = &pas_large_sharing_participant_payload;
          v36 = *(_QWORD *)v28;
          v37 = *(_QWORD *)v45;
          v38 = v36 <= v37;
          if (v25 <= v11)
            goto LABEL_42;
LABEL_55:
          if (v36 <= v37)
            goto LABEL_128;
LABEL_111:
          if ((v29 & 7) - 1 >= 2)
          {
            v85 = &pas_large_sharing_participant_payload;
            if ((v29 & 7) == 3)
              v85 = (__int128 *)(v30 + 96);
          }
          else
          {
            v81 = *(unsigned int *)(v30 + 4);
            v82 = pas_compact_heap_reservation_base;
            if ((_DWORD)v81)
              v83 = pas_compact_heap_reservation_base + 8 * v81;
            else
              v83 = 0;
            v84 = *(unsigned int *)(v83 + 56);
            if (v84 < 8)
              v82 = 0;
            v85 = (__int128 *)((v82 + v84) & 0xFFFFFFFFFFFFFFFELL);
          }
          *((_DWORD *)v85 + 3) = v7;
          v86 = result + 1;
          v87 = v7 - 1;
          if (v87)
            v86 = (_QWORD *)(result[2] + 8 * v87 - 8);
          *v86 = v29;
          v7 = v26;
          v25 = 2 * v26;
          v26 = (2 * v26) | 1;
          if (v26 > v11)
            goto LABEL_58;
          continue;
        }
        break;
      }
      v40 = *(unsigned int *)(v22 + 4);
      v41 = pas_compact_heap_reservation_base;
      if ((_DWORD)v40)
        v42 = pas_compact_heap_reservation_base + 8 * v40;
      else
        v42 = 0;
      v43 = *(unsigned int *)(v42 + 56);
      if (v43 < 8)
        v41 = 0;
      v28 = (__int128 *)((v41 + v43) & 0xFFFFFFFFFFFFFFFELL);
      v29 = *v27;
      v30 = v29 & 0xFFFFFFFFFFFFFFF8;
      v31 = v29 & 7;
      if ((v31 - 1) >= 2)
        goto LABEL_52;
LABEL_36:
      v32 = *(unsigned int *)(v30 + 4);
      v33 = pas_compact_heap_reservation_base;
      if ((_DWORD)v32)
        v34 = pas_compact_heap_reservation_base + 8 * v32;
      else
        v34 = 0;
      v35 = *(unsigned int *)(v34 + 56);
      if (v35 < 8)
        v33 = 0;
      v36 = *(_QWORD *)v28;
      v37 = *(_QWORD *)((v33 + v35) & 0xFFFFFFFFFFFFFFFELL);
      v38 = v36 <= v37;
      if (v25 > v11)
        goto LABEL_55;
LABEL_42:
      if (v24 < 2)
        goto LABEL_60;
    }
  }
  v95 = v7 >> 1;
  if (v7 >> 1 != 1)
  {
    v96 = *(_QWORD *)(result[2] + 8 * ((v7 >> 1) - 1) - 8);
    v22 = v14 & 0xFFFFFFFFFFFFFFF8;
    v23 = v14 & 7;
    v97 = v23 - 1;
    if ((v23 - 1) >= 2)
      goto LABEL_140;
LABEL_148:
    v102 = *(unsigned int *)(v22 + 4);
    v103 = pas_compact_heap_reservation_base;
    if ((_DWORD)v102)
      v104 = pas_compact_heap_reservation_base + 8 * v102;
    else
      v104 = 0;
    v105 = *(unsigned int *)(v104 + 56);
    if (v105 < 8)
      v103 = 0;
    v98 = (__int128 *)((v103 + v105) & 0xFFFFFFFFFFFFFFFELL);
    v99 = v96 & 0xFFFFFFFFFFFFFFF8;
    v100 = v96 & 7;
    if ((v100 - 1) < 2)
      goto LABEL_154;
LABEL_143:
    v101 = (__int128 *)(v99 + 96);
    if (v100 != 3)
      v101 = &pas_large_sharing_participant_payload;
    if (*(_QWORD *)v98 < *(_QWORD *)v101)
      goto LABEL_167;
    goto LABEL_26;
  }
  v96 = result[1];
  v22 = v14 & 0xFFFFFFFFFFFFFFF8;
  v23 = v14 & 7;
  v97 = v23 - 1;
  if ((v23 - 1) < 2)
    goto LABEL_148;
LABEL_140:
  if (v23 == 3)
  {
    v98 = (__int128 *)(v22 + 96);
    v99 = v96 & 0xFFFFFFFFFFFFFFF8;
    v100 = v96 & 7;
    if ((v100 - 1) < 2)
      goto LABEL_154;
    goto LABEL_143;
  }
  if (v23 == 4)
  {
    v98 = &pas_large_sharing_participant_payload;
    v99 = v96 & 0xFFFFFFFFFFFFFFF8;
    v100 = v96 & 7;
    if ((v100 - 1) >= 2)
      goto LABEL_143;
    goto LABEL_154;
  }
  v98 = 0;
  v99 = v96 & 0xFFFFFFFFFFFFFFF8;
  v100 = v96 & 7;
  if ((v100 - 1) >= 2)
    goto LABEL_143;
LABEL_154:
  v106 = *(unsigned int *)(v99 + 4);
  v107 = pas_compact_heap_reservation_base;
  if ((_DWORD)v106)
    v108 = pas_compact_heap_reservation_base + 8 * v106;
  else
    v108 = 0;
  v109 = *(unsigned int *)(v108 + 56);
  if (v109 < 8)
    v107 = 0;
  if (*(_QWORD *)v98 >= *(_QWORD *)((v107 + v109) & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_26;
  do
  {
    while (1)
    {
LABEL_167:
      v88 = v95;
      v116 = v96 & 0xFFFFFFFFFFFFFFF8;
      if ((v96 & 7) - 1 >= 2)
      {
        v121 = &pas_large_sharing_participant_payload;
        if ((v96 & 7) == 3)
          v121 = (__int128 *)(v116 + 96);
      }
      else
      {
        v117 = *(unsigned int *)(v116 + 4);
        v118 = pas_compact_heap_reservation_base;
        if ((_DWORD)v117)
          v119 = pas_compact_heap_reservation_base + 8 * v117;
        else
          v119 = 0;
        v120 = *(unsigned int *)(v119 + 56);
        if (v120 < 8)
          v118 = 0;
        v121 = (__int128 *)((v118 + v120) & 0xFFFFFFFFFFFFFFFELL);
      }
      *((_DWORD *)v121 + 3) = v7;
      *(_QWORD *)(result[2] + 8 * v7 - 16) = v96;
      if (v88 == 1)
        goto LABEL_197;
      v95 = v88 >> 1;
      v122 = result + 1;
      if (v88 >> 1 != 1)
        v122 = (unint64_t *)(result[2] + 8 * ((v88 >> 1) - 1) - 8);
      if (v97 < 2)
      {
        v126 = *(unsigned int *)(v22 + 4);
        v127 = pas_compact_heap_reservation_base;
        if ((_DWORD)v126)
          v128 = pas_compact_heap_reservation_base + 8 * v126;
        else
          v128 = 0;
        v129 = *(unsigned int *)(v128 + 56);
        if (v129 < 8)
          v127 = 0;
        v123 = (__int128 *)((v127 + v129) & 0xFFFFFFFFFFFFFFFELL);
LABEL_190:
        v96 = *v122;
        v124 = v96 & 0xFFFFFFFFFFFFFFF8;
        v125 = v96 & 7;
        if ((v125 - 1) < 2)
          goto LABEL_161;
        goto LABEL_191;
      }
      v123 = (__int128 *)(v22 + 96);
      if (v23 == 3)
        goto LABEL_190;
      if (v23 == 4)
        break;
      v123 = 0;
      v96 = *v122;
      v124 = v96 & 0xFFFFFFFFFFFFFFF8;
      v125 = v96 & 7;
      if ((v125 - 1) < 2)
        goto LABEL_161;
LABEL_191:
      v130 = (__int128 *)(v124 + 96);
      if (v125 != 3)
        v130 = &pas_large_sharing_participant_payload;
      v131 = *(_QWORD *)v123;
      v7 = v88;
      if (v131 >= *(_QWORD *)v130)
        goto LABEL_129;
    }
    v123 = &pas_large_sharing_participant_payload;
    v96 = *v122;
    v124 = v96 & 0xFFFFFFFFFFFFFFF8;
    v125 = v96 & 7;
    if ((v125 - 1) >= 2)
      goto LABEL_191;
LABEL_161:
    v110 = *(unsigned int *)(v124 + 4);
    v111 = pas_compact_heap_reservation_base;
    if ((_DWORD)v110)
      v112 = pas_compact_heap_reservation_base + 8 * v110;
    else
      v112 = 0;
    v113 = *(unsigned int *)(v112 + 56);
    if (v113 < 8)
      v111 = 0;
    v114 = (unint64_t *)((v111 + v113) & 0xFFFFFFFFFFFFFFFELL);
    v115 = *(_QWORD *)v123;
    v7 = v88;
  }
  while (v115 < *v114);
LABEL_129:
  if (v88 == 1)
  {
LABEL_197:
    LODWORD(v88) = 1;
    result[1] = v14;
    v89 = v14 & 0xFFFFFFFFFFFFFFF8;
    v90 = v14 & 7;
    if ((v90 - 1) < 2)
      goto LABEL_131;
LABEL_198:
    if (v90 == 3)
    {
      *(_DWORD *)(v89 + 108) = v88;
      v15 = v13 & 0xFFFFFFFFFFFFFFF8;
      v16 = v13 & 7;
      if ((v16 - 1) < 2)
        goto LABEL_12;
    }
    else
    {
      HIDWORD(pas_large_sharing_participant_payload) = v88;
      v15 = v13 & 0xFFFFFFFFFFFFFFF8;
      v16 = v13 & 7;
      if ((v16 - 1) < 2)
        goto LABEL_12;
    }
    goto LABEL_202;
  }
  *(_QWORD *)(result[2] + 8 * (v88 - 1) - 8) = v14;
  v89 = v14 & 0xFFFFFFFFFFFFFFF8;
  v90 = v14 & 7;
  if ((v90 - 1) >= 2)
    goto LABEL_198;
LABEL_131:
  v91 = *(unsigned int *)(v89 + 4);
  v92 = pas_compact_heap_reservation_base;
  if ((_DWORD)v91)
    v93 = pas_compact_heap_reservation_base + 8 * v91;
  else
    v93 = 0;
  v94 = *(unsigned int *)(v93 + 56);
  if (v94 < 8)
    v92 = 0;
  *(_DWORD *)(((v92 + v94) & 0xFFFFFFFFFFFFFFFELL) + 12) = v88;
  v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  v16 = v13 & 7;
  if ((v16 - 1) < 2)
    goto LABEL_12;
LABEL_202:
  if (v16 == 3)
    *(_DWORD *)(v15 + 108) = 0;
  else
    HIDWORD(pas_large_sharing_participant_payload) = 0;
  return result;
}

unint64_t pas_probabilistic_guard_malloc_allocate(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  char *v19;
  char v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  void **v43;
  void *v44;
  void *v45;
  BOOL v46;
  void **v48;
  unsigned int v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  size_t v57;
  size_t v58;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v9 = 0;
  if (!a1 || !a2 || !a4 || !a5)
    return v9;
  v10 = pas_page_malloc_cached_alignment;
  if (!pas_page_malloc_cached_alignment)
  {
    v10 = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = v10;
  }
  v11 = (v10 + a2 / v10 * v10 - a2) % v10;
  if (v11 > _MergedGlobals_1)
    return 0;
  v12 = a2 + 2 * v10 + v11;
  if (v12 > qword_1ECF42660)
    return 0;
  v57 = v10;
  v58 = a2 + 2 * v10 + v11;
  v14 = (void *)allocate_impl(a1, &v58, &v57, a4, a5);
  v9 = (unint64_t)v14;
  if ((v15 & 1) == 0)
    return v9;
  mprotect(v14, v10, 0);
  mprotect((void *)(v12 - v10 + v9), v10, 0);
  madvise((void *)(v12 - v10 + v9), v10, 5);
  v16 = madvise((void *)v9, v10, 5);
  if (pas_mock_fast_random)
  {
    v18 = pas_mock_fast_random(v16);
  }
  else
  {
    v17 = pas_fast_random_state ^ (pas_fast_random_state << 13) ^ ((pas_fast_random_state ^ (pas_fast_random_state << 13)) >> 17);
    v18 = v17 ^ (32 * v17);
    pas_fast_random_state = v17 ^ (32 * v17);
  }
  v19 = (char *)(v9 + v10);
  v20 = v18 & 1;
  if ((v18 & 1) != 0)
    v21 = (v10 + a2 / v10 * v10 - a2) % v10;
  else
    v21 = 0;
  v9 = (unint64_t)&v19[v21];
  v22 = pas_utility_heap_try_allocate_with_alignment(40, 1uLL, (uint64_t)"pas_pgm_hash_map_VALUE");
  *(_WORD *)(v22 + 24) = v11;
  *(_QWORD *)(v22 + 8) = v11 + a2;
  *(_QWORD *)(v22 + 16) = v19;
  *(_QWORD *)v22 = a2;
  *(_WORD *)(v22 + 26) = v10;
  *(_QWORD *)(v22 + 32) = a1;
  *(_BYTE *)(v22 + 28) = v20;
  if (dword_1EE3451D8 <= (2 * (HIDWORD(qword_1EE3451E0) + qword_1EE3451E0)))
  {
    v23 = v22;
    if (6 * (int)qword_1EE3451E0 >= (2 * dword_1EE3451D8))
      v24 = 2 * dword_1EE3451D8;
    else
      v24 = dword_1EE3451D8;
    if (dword_1EE3451D8)
      v25 = v24;
    else
      v25 = 16;
    v26 = pas_large_utility_free_heap_allocate_for_allocation_config(16 * v25, (uint64_t)"pas_ptr_hash_map/table");
    if (!(_DWORD)v25)
      goto LABEL_29;
    if (v25 < 0x26 || (v51 = 16 * (v25 - 1), v26 > v26 + v51) || v26 + 8 > v26 + v51 + 8)
    {
      v27 = v25;
    }
    else
    {
      v27 = v25 & 3;
      v52 = v26 - 24;
      v53 = v25 + 4294967293;
      v54 = v25 & 0xFFFFFFFC;
      do
      {
        v55 = v52 + 16 * (v53 + 2);
        *(_OWORD *)(v55 + 24) = xmmword_199154590;
        *(_OWORD *)(v55 + 8) = xmmword_199154590;
        v56 = v52 + 16 * v53;
        *(_OWORD *)(v56 + 24) = xmmword_199154590;
        *(_OWORD *)(v56 + 8) = xmmword_199154590;
        v53 -= 4;
        v54 -= 4;
      }
      while (v54);
      if ((v25 & 0xFFFFFFFC) == v25)
        goto LABEL_29;
    }
    v28 = v27 - 1;
    do
      *(_OWORD *)(v26 + 16 * v28) = xmmword_199154590;
    while ((unint64_t)v28--);
LABEL_29:
    v30 = pas_pgm_hash_map;
    v31 = dword_1EE3451D8;
    if (dword_1EE3451D8)
    {
      v32 = 0;
      do
      {
        v33 = (unint64_t *)(v30 + 16 * v32);
        v34 = *v33;
        if (*v33 != -1)
        {
          v35 = (v34 ^ (v34 >> 4) ^ 0xDEADBEEF) + 32 * (v34 ^ (v34 >> 4));
          v36 = ((v34 >> 36) ^ HIDWORD(v34) ^ 0xDEADBEEF) + 32 * ((v34 >> 36) ^ HIDWORD(v34));
          v37 = v35 ^ ((v36 ^ v35) >> 11) ^ v36;
          do
            v38 = v37++ & ((_DWORD)v25 - 1);
          while (*(_QWORD *)(v26 + 16 * v38) != -1);
          *(_OWORD *)(v26 + 16 * v38) = *(_OWORD *)v33;
        }
        ++v32;
      }
      while (v32 != v31);
      v39 = 16 * v31;
    }
    else
    {
      v39 = 0;
    }
    pas_pgm_hash_map = v26;
    dword_1EE3451D8 = v25;
    dword_1EE3451DC = v25 - 1;
    HIDWORD(qword_1EE3451E0) = 0;
    pas_large_utility_free_heap_deallocate_for_allocation_config(v30, v39);
    v22 = v23;
  }
  v40 = (v9 ^ (v9 >> 4) ^ 0xDEADBEEF) + 32 * (v9 ^ (v9 >> 4));
  v41 = ((v9 >> 36) ^ HIDWORD(v9) ^ 0xDEADBEEF) + 32 * ((v9 >> 36) ^ HIDWORD(v9));
  v42 = v40 ^ ((v41 ^ v40) >> 11) ^ v41;
  v43 = (void **)(pas_pgm_hash_map + 16 * (dword_1EE3451DC & v42));
  v44 = *v43;
  v45 = v43[1];
  v46 = *v43 == (void *)-1;
  if (*v43 != (void *)-1 || v45 != 0)
  {
    v48 = 0;
    v49 = v42 + 1;
    do
    {
      if (v46 && v45 == (void *)1)
      {
        if (!v48)
          v48 = v43;
      }
      else if (v44 == (void *)v9)
      {
        goto LABEL_57;
      }
      v43 = (void **)(pas_pgm_hash_map + 16 * (v49 & dword_1EE3451DC));
      v44 = *v43;
      v45 = v43[1];
      v46 = *v43 == (void *)-1;
      ++v49;
    }
    while (*v43 != (void *)-1 || v45 != 0);
    if (v48)
    {
      --HIDWORD(qword_1EE3451E0);
      v43 = v48;
    }
  }
  LODWORD(qword_1EE3451E0) = qword_1EE3451E0 + 1;
LABEL_57:
  *v43 = (void *)v9;
  v43[1] = (void *)v22;
  _MergedGlobals_1 -= v11;
  qword_1ECF42660 -= v12;
  if (qword_1ECF42660 < 3 * v10)
    pas_probabilistic_guard_malloc_can_use = 0;
  return v9;
}

void pas_probabilistic_guard_malloc_deallocate(unint64_t a1)
{
  unsigned int v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (!pas_pgm_hash_map)
    return;
  v2 = (a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4));
  v3 = ((a1 >> 36) ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * ((a1 >> 36) ^ HIDWORD(a1));
  for (i = v2 ^ ((v3 ^ v2) >> 11) ^ v3; ; ++i)
  {
    v5 = i & dword_1EE3451DC;
    v6 = (_QWORD *)(pas_pgm_hash_map + 16 * v5);
    if (*v6 != -1)
      break;
    if (v6[1] != 1)
      return;
LABEL_4:
    ;
  }
  if (*v6 != a1)
    goto LABEL_4;
  v7 = *(_QWORD *)(pas_pgm_hash_map + 16 * v5 + 8);
  if (!v7)
    return;
  mprotect(*(void **)(v7 + 16), *(_QWORD *)(v7 + 8), 0);
  madvise(*(void **)(v7 + 16), *(_QWORD *)(v7 + 8), 5);
  v8 = *(unsigned __int16 *)(v7 + 24);
  _MergedGlobals_1 += v8;
  qword_1ECF42660 += *(_QWORD *)v7 + v8 + 2 * *(unsigned __int16 *)(v7 + 26);
  *(_BYTE *)(v7 + 29) = 1;
  v9 = _MergedGlobals_29[0];
  if (_MergedGlobals_29[0] < 0xAuLL)
    goto LABEL_48;
  if ((unint64_t)qword_1ECF59068 <= 9)
    v10 = qword_1ECF59068;
  else
    v10 = 0;
  v11 = (unint64_t *)_MergedGlobals_29[v10 + 3];
  if (!v11)
    goto LABEL_47;
  v12 = v11[1];
  if (!v12)
    goto LABEL_47;
  if (!pas_pgm_hash_map)
    goto LABEL_46;
  v13 = *v11;
  v14 = (v13 ^ (v13 >> 4) ^ 0xDEADBEEF) + 32 * (v13 ^ (v13 >> 4));
  v15 = ((v13 >> 36) ^ HIDWORD(v13) ^ 0xDEADBEEF) + 32 * ((v13 >> 36) ^ HIDWORD(v13));
  v16 = v14 ^ ((v15 ^ v14) >> 11) ^ v15;
  while (2)
  {
    v17 = (_QWORD *)(pas_pgm_hash_map + 16 * (v16 & dword_1EE3451DC));
    if (*v17 == -1)
    {
      if (v17[1] != 1)
        goto LABEL_46;
      goto LABEL_17;
    }
    if (v13 != *v17)
    {
LABEL_17:
      ++v16;
      continue;
    }
    break;
  }
  *(_OWORD *)v17 = xmmword_19919FD50;
  qword_1EE3451E0 = (uint64_t)vadd_s32((int32x2_t)qword_1EE3451E0, (int32x2_t)0x1FFFFFFFFLL);
  if (6 * (int)qword_1EE3451E0 >= dword_1EE3451D8 || dword_1EE3451D8 < 0x11)
    goto LABEL_46;
  v19 = (unint64_t)dword_1EE3451D8 >> 1;
  v20 = pas_large_utility_free_heap_allocate_for_allocation_config(16 * v19, (uint64_t)"pas_ptr_hash_map/table");
  v21 = (v19 - 1);
  if (v21 < 0x25)
  {
    v22 = v19;
    goto LABEL_34;
  }
  v23 = v20 + 16 * (v19 - 1);
  v24 = v20 > v23 || v20 + 8 > v23 + 8;
  v22 = v19;
  if (v24)
    goto LABEL_34;
  v25 = (v21 + 1) & 0x1FFFFFFFCLL;
  v22 = v19 - v25;
  v26 = v20 - 24;
  v27 = v19 + 4294967293u;
  v28 = v25;
  do
  {
    v29 = v26 + 16 * (v27 + 2);
    *(_OWORD *)(v29 + 24) = xmmword_199154590;
    *(_OWORD *)(v29 + 8) = xmmword_199154590;
    v30 = v26 + 16 * v27;
    *(_OWORD *)(v30 + 24) = xmmword_199154590;
    *(_OWORD *)(v30 + 8) = xmmword_199154590;
    v27 -= 4;
    v28 -= 4;
  }
  while (v28);
  if (v21 + 1 != v25)
  {
LABEL_34:
    v31 = v22 - 1;
    do
      *(_OWORD *)(v20 + 16 * v31) = xmmword_199154590;
    while ((unint64_t)v31--);
  }
  v33 = pas_pgm_hash_map;
  v34 = dword_1EE3451D8;
  if (dword_1EE3451D8)
  {
    v35 = 0;
    do
    {
      v36 = (unint64_t *)(v33 + 16 * v35);
      v37 = *v36;
      if (*v36 != -1)
      {
        v38 = (v37 ^ (v37 >> 4) ^ 0xDEADBEEF) + 32 * (v37 ^ (v37 >> 4));
        v39 = ((v37 >> 36) ^ HIDWORD(v37) ^ 0xDEADBEEF) + 32 * ((v37 >> 36) ^ HIDWORD(v37));
        v40 = v38 ^ ((v39 ^ v38) >> 11) ^ v39;
        do
          v41 = v40++ & v21;
        while (*(_QWORD *)(v20 + 16 * v41) != -1);
        *(_OWORD *)(v20 + 16 * v41) = *(_OWORD *)v36;
      }
      ++v35;
    }
    while (v35 != v34);
    v42 = 16 * v34;
  }
  else
  {
    v42 = 0;
  }
  pas_pgm_hash_map = v20;
  dword_1EE3451D8 = v19;
  dword_1EE3451DC = v19 - 1;
  HIDWORD(qword_1EE3451E0) = 0;
  pas_large_utility_free_heap_deallocate_for_allocation_config(v33, v42);
LABEL_46:
  pas_utility_heap_deallocate(v12);
  v9 = _MergedGlobals_29[0];
LABEL_47:
  qword_1ECF59068 = v10 + 1;
  --v9;
LABEL_48:
  v43 = qword_1ECF59070;
  if ((unint64_t)qword_1ECF59070 > 9)
    v43 = 0;
  _MergedGlobals_29[v43 + 3] = (uint64_t)v6;
  qword_1ECF59070 = v43 + 1;
  _MergedGlobals_29[0] = v9 + 1;
  pas_probabilistic_guard_malloc_can_use = 1;
}

BOOL pas_probabilistic_guard_malloc_check_exists(unint64_t a1)
{
  unsigned int v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  _QWORD *v6;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (pas_pgm_hash_map)
  {
    v2 = (a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4));
    v3 = ((a1 >> 36) ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * ((a1 >> 36) ^ HIDWORD(a1));
    for (i = v2 ^ ((v3 ^ v2) >> 11) ^ v3; ; ++i)
    {
      v5 = i & dword_1EE3451DC;
      v6 = (_QWORD *)(pas_pgm_hash_map + 16 * v5);
      if (*v6 == -1)
      {
        if (v6[1] != 1)
          return 0;
      }
      else if (*v6 == a1)
      {
        return *(_QWORD *)(pas_pgm_hash_map + 16 * v5 + 8) != 0;
      }
    }
  }
  return 0;
}

void pas_probabilistic_guard_malloc_return_as_large_map_entry(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unsigned int v4;
  int v5;
  unsigned int i;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (pas_pgm_hash_map)
  {
    v4 = (a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4));
    v5 = ((a1 >> 36) ^ HIDWORD(a1) ^ 0xDEADBEEF) + 32 * ((a1 >> 36) ^ HIDWORD(a1));
    for (i = v4 ^ ((v5 ^ v4) >> 11) ^ v5; ; ++i)
    {
      v7 = i & dword_1EE3451DC;
      v8 = (_QWORD *)(pas_pgm_hash_map + 16 * v7);
      if (*v8 == -1)
      {
        if (v8[1] != 1)
          return;
      }
      else if (*v8 == a1)
      {
        v9 = *(_QWORD **)(pas_pgm_hash_map + 16 * v7 + 8);
        if (v9)
        {
          v10 = *v9 + a1;
          *a2 = a1;
          a2[1] = v10;
          a2[2] = v9[4];
        }
        return;
      }
    }
  }
}

uint64_t pas_ptr_worklist_push(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;

  if (!a2)
    return 0;
  v6 = *((_DWORD *)a1 + 4);
  v7 = *((_DWORD *)a1 + 2);
  if (v7 <= 2 * (*((_DWORD *)a1 + 5) + v6))
  {
    if (6 * v6 >= 2 * v7)
      v8 = 2 * v7;
    else
      v8 = *((_DWORD *)a1 + 2);
    if (v7)
      v9 = v8;
    else
      v9 = 16;
    v10 = v9 - 1;
    v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))a3)(8 * v9, "pas_ptr_hash_set/table", 0, *(_QWORD *)(a3 + 16));
    v12 = v11;
    if (v9)
      memset(v11, 255, 8 * v9);
    v13 = *a1;
    v14 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(_QWORD *)(v13 + 8 * i);
        if (v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = (v16 ^ (v16 >> 4) ^ 0xDEADBEEF) + 32 * (v16 ^ (v16 >> 4));
          v18 = ((v16 >> 36) ^ HIDWORD(v16) ^ 0xDEADBEEF) + 32 * ((v16 >> 36) ^ HIDWORD(v16));
          v19 = v17 ^ ((v18 ^ v17) >> 11) ^ v18;
          do
            v20 = v19++ & v10;
          while (v12[v20] < 0xFFFFFFFFFFFFFFFELL);
          v12[v20] = v16;
        }
      }
    }
    *a1 = (uint64_t)v12;
    *((_DWORD *)a1 + 2) = v9;
    *((_DWORD *)a1 + 3) = v10;
    *((_DWORD *)a1 + 5) = 0;
    (*(void (**)(void))(a3 + 8))();
  }
  v22 = 0;
  v23 = (a2 ^ (a2 >> 4) ^ 0xDEADBEEF) + 32 * (a2 ^ (a2 >> 4));
  v24 = ((a2 >> 36) ^ HIDWORD(a2) ^ 0xDEADBEEF) + 32 * ((a2 >> 36) ^ HIDWORD(a2));
  v25 = v23 ^ ((v24 ^ v23) >> 11) ^ v24;
  v26 = *((_DWORD *)a1 + 3);
  while (1)
  {
    v27 = *a1;
    v28 = *(_QWORD *)(*a1 + 8 * (v25 & v26));
    if (v28 == -2)
    {
      if (!v22)
        v22 = (unint64_t *)(v27 + 8 * (v25 & v26));
      goto LABEL_23;
    }
    if (v28 == -1)
      break;
    if (v28 == a2)
      return 0;
LABEL_23:
    ++v25;
  }
  if (v22)
    --*((_DWORD *)a1 + 5);
  else
    v22 = (unint64_t *)(v27 + 8 * (v25 & v26));
  ++*((_DWORD *)a1 + 4);
  *v22 = a2;
  v29 = a1[4];
  v30 = a1[5];
  if (v29 >= v30)
  {
    v32 = 2 * v30 + 2;
    v31 = (void *)(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))a3)(8 * v32, "pas_ptr_worklist/worklist", 0, *(_QWORD *)(a3 + 16));
    memcpy(v31, (const void *)a1[3], 8 * a1[4]);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 8))(a1[3], 8 * a1[5], 0, *(_QWORD *)(a3 + 16));
    a1[3] = (uint64_t)v31;
    a1[5] = v32;
    v29 = a1[4];
  }
  else
  {
    v31 = (void *)a1[3];
  }
  a1[4] = v29 + 1;
  *((_QWORD *)v31 + v29) = a2;
  return 1;
}

uint64_t pas_red_black_tree_insert(uint64_t result, unsigned int *a2, uint64_t (*a3)(unsigned int *, uint64_t), unint64_t *a4)
{
  unsigned int *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  _DWORD *v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;

  v6 = a2;
  v7 = (_DWORD *)result;
  *(_QWORD *)a2 = 0;
  a2[2] = 0;
  v8 = *(unsigned int *)result;
  v9 = pas_compact_heap_reservation_base;
  v10 = pas_compact_heap_reservation_base + 8 * v8;
  if ((_DWORD)v8)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
  {
    LOBYTE(v12) = 0;
    v13 = 0;
LABEL_13:
    v15 = 0;
    goto LABEL_14;
  }
  do
  {
    v13 = v10;
    result = a3(v6, v10);
    if ((result & 0x80000000) != 0)
    {
      v14 = *(unsigned int *)v13;
      v9 = pas_compact_heap_reservation_base;
      if (!(_DWORD)v14)
        break;
    }
    else
    {
      v14 = *(unsigned int *)(v13 + 4);
      v9 = pas_compact_heap_reservation_base;
      if (!(_DWORD)v14)
        break;
    }
    v10 = v9 + 8 * v14;
  }
  while (v10);
  v12 = v6[2];
  v15 = v9;
  if (v12 <= 7)
    goto LABEL_13;
LABEL_14:
  v16 = (v15 + (_BYTE)v12) & 1 | (unint64_t)v13;
  if (v16 >= 8)
    v17 = v9;
  else
    v17 = 0;
  v6[2] = v16 - v17;
  if (v13)
  {
    result = a3(v6, v13);
    if ((result & 0x80000000) == 0)
      v13 += 4;
    v18 = (unint64_t)v6 - pas_compact_heap_reservation_base;
  }
  else
  {
    v18 = (unint64_t)v6 - v9;
    v13 = (uint64_t)v7;
  }
  *(_DWORD *)v13 = v18 >> 3;
  v19 = v6[2];
  v20 = pas_compact_heap_reservation_base;
  if (v19 >= 8)
    v21 = pas_compact_heap_reservation_base;
  else
    v21 = 0;
  v22 = v21 + v19;
  v23 = v22 & 0xFFFFFFFE;
  if ((v22 & 0xFFFFFFFFFFFFFFF8) != 0)
    v24 = pas_compact_heap_reservation_base;
  else
    v24 = 0;
  v25 = v23 - v24;
  v6[2] = v25;
  v26 = *v7;
  if ((_DWORD)v26)
    v27 = v20 + 8 * v26;
  else
    v27 = 0;
  if ((unsigned int *)v27 != v6)
  {
    if (v25 >= 8)
      v28 = v20;
    else
      v28 = 0;
    v29 = (unsigned int *)((v28 + v25) & 0xFFFFFFFFFFFFFFFELL);
    v31 = v29 + 2;
    v30 = v29[2];
    v32 = v30 < 8;
    if (v30 >= 8)
      v33 = v20;
    else
      v33 = 8;
    if (((v33 + v30) & 1) == 0)
    {
      while (1)
      {
        v34 = v32 ? 0 : v20;
        v35 = v34 + v30;
        v36 = v35 & 0xFFFFFFFFFFFFFFFELL;
        v37 = *(unsigned int *)(v35 & 0xFFFFFFFFFFFFFFFELL);
        v38 = (_DWORD)v37 ? v20 + 8 * v37 : 0;
        if ((unsigned int *)v38 != v29)
          break;
        v54 = *(unsigned int *)(v36 + 4);
        v38 = v20 + 8 * v54;
        if ((_DWORD)v54)
          v55 = v38 == 0;
        else
          v55 = 1;
        if (!v55)
        {
          v56 = *(_DWORD *)(v38 + 8);
          v57 = v56 >= 8 ? v20 : 8;
          if (((v57 + v56) & 1) == 0)
            goto LABEL_82;
        }
        v67 = v29[1];
        if ((_DWORD)v67)
          v68 = v20 + 8 * v67;
        else
          v68 = 0;
        if (v6 == (unsigned int *)v68)
        {
          left_rotate(v7, (unint64_t)v29, a4);
          v69 = *v31;
          v20 = pas_compact_heap_reservation_base;
          if (v69 >= 8)
            v70 = pas_compact_heap_reservation_base;
          else
            v70 = 0;
          v6 = v29;
          v29 = (unsigned int *)((v70 + v69) & 0xFFFFFFFFFFFFFFFELL);
          v71 = v29[2];
          if (v71 >= 8)
            v72 = pas_compact_heap_reservation_base;
          else
            v72 = 0;
          v36 = (v72 + v71) & 0xFFFFFFFFFFFFFFFELL;
        }
        v73 = v29[2];
        if (v73 >= 8)
          v74 = v20;
        else
          v74 = 0;
        v75 = (v74 + v73) | 1;
        if (v75 >= 8)
          v76 = v20;
        else
          v76 = 0;
        v29[2] = v75 - v76;
        v77 = *(unsigned int *)(v36 + 8);
        if (v77 >= 8)
          v78 = v20;
        else
          v78 = 0;
        v79 = v78 + v77;
        if ((v79 & 0xFFFFFFFFFFFFFFF8) == 0)
          LODWORD(v20) = 0;
        *(_DWORD *)(v36 + 8) = (v79 & 0xFFFFFFFE) - v20;
        result = (uint64_t)right_rotate(v7, v36, a4);
LABEL_120:
        v80 = *v7;
        v20 = pas_compact_heap_reservation_base;
        if ((_DWORD)v80)
          v27 = pas_compact_heap_reservation_base + 8 * v80;
        else
          v27 = 0;
        if (v6 == (unsigned int *)v27)
        {
          v27 = (uint64_t)v6;
          goto LABEL_133;
        }
        v81 = v6[2];
        if (v81 >= 8)
          v82 = pas_compact_heap_reservation_base;
        else
          v82 = 0;
        v29 = (unsigned int *)((v82 + v81) & 0xFFFFFFFFFFFFFFFELL);
        v31 = v29 + 2;
        v30 = v29[2];
        v32 = v30 < 8;
        if (v30 >= 8)
          v83 = pas_compact_heap_reservation_base;
        else
          v83 = 8;
        if (((v83 + v30) & 1) != 0)
          goto LABEL_133;
      }
      if (!v38 || ((v39 = *(_DWORD *)(v38 + 8), v39 >= 8) ? (v40 = v20) : (v40 = 8), ((v40 + v39) & 1) != 0))
      {
        v41 = *v29;
        if ((_DWORD)v41)
          v42 = v20 + 8 * v41;
        else
          v42 = 0;
        if (v6 == (unsigned int *)v42)
        {
          right_rotate(v7, (unint64_t)v29, a4);
          v43 = *v31;
          v20 = pas_compact_heap_reservation_base;
          if (v43 >= 8)
            v44 = pas_compact_heap_reservation_base;
          else
            v44 = 0;
          v6 = v29;
          v29 = (unsigned int *)((v44 + v43) & 0xFFFFFFFFFFFFFFFELL);
          v45 = v29[2];
          if (v45 >= 8)
            v46 = pas_compact_heap_reservation_base;
          else
            v46 = 0;
          v36 = (v46 + v45) & 0xFFFFFFFFFFFFFFFELL;
        }
        v47 = v29[2];
        if (v47 >= 8)
          v48 = v20;
        else
          v48 = 0;
        v49 = (v48 + v47) | 1;
        if (v49 >= 8)
          v50 = v20;
        else
          v50 = 0;
        v29[2] = v49 - v50;
        v51 = *(unsigned int *)(v36 + 8);
        if (v51 >= 8)
          v52 = v20;
        else
          v52 = 0;
        v53 = v52 + v51;
        if ((v53 & 0xFFFFFFFFFFFFFFF8) == 0)
          LODWORD(v20) = 0;
        *(_DWORD *)(v36 + 8) = (v53 & 0xFFFFFFFE) - v20;
        result = (uint64_t)left_rotate(v7, v36, a4);
        goto LABEL_120;
      }
LABEL_82:
      v58 = v35 | 1;
      if (v58 >= 8)
        v59 = v20;
      else
        v59 = 0;
      *v31 = v58 - v59;
      v60 = *(unsigned int *)(v38 + 8);
      if (v60 >= 8)
        v61 = v20;
      else
        v61 = 0;
      v62 = (v61 + v60) | 1;
      if (v62 >= 8)
        v63 = v20;
      else
        v63 = 0;
      *(_DWORD *)(v38 + 8) = v62 - v63;
      v64 = *(unsigned int *)(v36 + 8);
      if (v64 >= 8)
        v65 = v20;
      else
        v65 = 0;
      v66 = v65 + v64;
      if ((v66 & 0xFFFFFFFFFFFFFFF8) == 0)
        LODWORD(v20) = 0;
      *(_DWORD *)(v36 + 8) = (v66 & 0xFFFFFFFE) - v20;
      v6 = (unsigned int *)v36;
      goto LABEL_120;
    }
LABEL_133:
    v25 = *(_DWORD *)(v27 + 8);
    v6 = (unsigned int *)v27;
  }
  if (v25 >= 8)
    v84 = v20;
  else
    v84 = 0;
  v85 = (v84 + v25) | 1;
  if (v85 < 8)
    LODWORD(v20) = 0;
  v6[2] = v85 - v20;
  return result;
}

_DWORD *left_rotate(_DWORD *result, unint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  char v18;
  unsigned int *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  char v26;
  unint64_t v27;

  v3 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v3)
    v4 = pas_compact_heap_reservation_base + 8 * v3;
  else
    v4 = 0;
  *a3 = a2;
  a3[1] = v4;
  v5 = *(unsigned int *)v4;
  v6 = pas_compact_heap_reservation_base + 8 * v5;
  if (!(_DWORD)v5)
    v6 = 0;
  v7 = (unint64_t)(v6 - pas_compact_heap_reservation_base) >> 3;
  if (!v6)
    LODWORD(v7) = 0;
  *(_DWORD *)(a2 + 4) = v7;
  v8 = pas_compact_heap_reservation_base;
  if (v6)
  {
    v9 = *(_DWORD *)(v6 + 8);
    if (v9 >= 8)
      v10 = pas_compact_heap_reservation_base;
    else
      v10 = 0;
    v11 = (v10 + (_BYTE)v9) & 1 | a2;
    if (v11 >= 8)
      v12 = pas_compact_heap_reservation_base;
    else
      v12 = 0;
    *(_DWORD *)(v6 + 8) = v11 - v12;
  }
  v13 = *(unsigned int *)(a2 + 8);
  if (v13 >= 8)
    v14 = v8;
  else
    v14 = 0;
  v15 = v14 + v13;
  v16 = *(_DWORD *)(v4 + 8);
  if (v16 >= 8)
    v17 = v8;
  else
    v17 = 0;
  v18 = v17 + v16;
  v19 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  v20 = v15 & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
  if (v20 >= 8)
    v21 = v8;
  else
    v21 = 0;
  *(_DWORD *)(v4 + 8) = v20 - v21;
  if (v19)
  {
    v22 = *v19;
    if ((_DWORD)v22)
      v23 = v8 + 8 * v22;
    else
      v23 = 0;
    if (v23 == a2)
      result = v19;
    else
      result = v19 + 1;
  }
  *result = (unint64_t)(v4 - v8) >> 3;
  *(_DWORD *)v4 = (a2 - pas_compact_heap_reservation_base) >> 3;
  v24 = *(_DWORD *)(a2 + 8);
  v25 = pas_compact_heap_reservation_base;
  if (v24 >= 8)
    v26 = pas_compact_heap_reservation_base;
  else
    v26 = 0;
  v27 = (v26 + (_BYTE)v24) & 1 | (unint64_t)v4;
  if (v27 < 8)
    v25 = 0;
  *(_DWORD *)(a2 + 8) = v27 - v25;
  *a3 = 0;
  a3[1] = 0;
  return result;
}

_DWORD *right_rotate(_DWORD *result, unint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  char v18;
  unsigned int *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  char v26;
  unint64_t v27;

  v3 = *(unsigned int *)a2;
  if ((_DWORD)v3)
    v4 = pas_compact_heap_reservation_base + 8 * v3;
  else
    v4 = 0;
  *a3 = a2;
  a3[1] = v4;
  v5 = *(unsigned int *)(v4 + 4);
  v6 = pas_compact_heap_reservation_base + 8 * v5;
  if (!(_DWORD)v5)
    v6 = 0;
  v7 = (unint64_t)(v6 - pas_compact_heap_reservation_base) >> 3;
  if (!v6)
    LODWORD(v7) = 0;
  *(_DWORD *)a2 = v7;
  v8 = pas_compact_heap_reservation_base;
  if (v6)
  {
    v9 = *(_DWORD *)(v6 + 8);
    if (v9 >= 8)
      v10 = pas_compact_heap_reservation_base;
    else
      v10 = 0;
    v11 = (v10 + (_BYTE)v9) & 1 | a2;
    if (v11 >= 8)
      v12 = pas_compact_heap_reservation_base;
    else
      v12 = 0;
    *(_DWORD *)(v6 + 8) = v11 - v12;
  }
  v13 = *(unsigned int *)(a2 + 8);
  if (v13 >= 8)
    v14 = v8;
  else
    v14 = 0;
  v15 = v14 + v13;
  v16 = *(_DWORD *)(v4 + 8);
  if (v16 >= 8)
    v17 = v8;
  else
    v17 = 0;
  v18 = v17 + v16;
  v19 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  v20 = v15 & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
  if (v20 >= 8)
    v21 = v8;
  else
    v21 = 0;
  *(_DWORD *)(v4 + 8) = v20 - v21;
  if (v19)
  {
    v22 = *v19;
    if ((_DWORD)v22)
      v23 = (unsigned int *)(v8 + 8 * v22);
    else
      v23 = 0;
    if (v23 == (unsigned int *)a2)
      result = v19;
    else
      result = v19 + 1;
  }
  *result = (unint64_t)(v4 - v8) >> 3;
  *(_DWORD *)(v4 + 4) = (a2 - pas_compact_heap_reservation_base) >> 3;
  v24 = *(_DWORD *)(a2 + 8);
  v25 = pas_compact_heap_reservation_base;
  if (v24 >= 8)
    v26 = pas_compact_heap_reservation_base;
  else
    v26 = 0;
  v27 = (v26 + (_BYTE)v24) & 1 | (unint64_t)v4;
  if (v27 < 8)
    v25 = 0;
  *(_DWORD *)(a2 + 8) = v27 - v25;
  *a3 = 0;
  a3[1] = 0;
  return result;
}

unsigned int *pas_red_black_tree_remove(unsigned int *a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unint64_t v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  char v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int *v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;

  v6 = *a2;
  v7 = pas_compact_heap_reservation_base;
  if ((_DWORD)v6)
    v8 = pas_compact_heap_reservation_base == -8 * v6;
  else
    v8 = 1;
  if (v8)
  {
    v9 = (unint64_t)a2;
  }
  else
  {
    v10 = a2[1];
    v11 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v10);
    if ((_DWORD)v10)
      v12 = v11 == 0;
    else
      v12 = 1;
    v9 = (unint64_t)a2;
    if (!v12)
    {
      do
      {
        v9 = (unint64_t)v11;
        v6 = *v11;
        v11 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v6);
        if ((_DWORD)v6)
          v13 = v11 == 0;
        else
          v13 = 1;
      }
      while (!v13);
    }
  }
  v14 = pas_compact_heap_reservation_base + 8 * v6;
  if ((_DWORD)v6)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (!v15
    || (v16 = *(unsigned int *)(v9 + 4), (_DWORD)v16) && (v14 = pas_compact_heap_reservation_base + 8 * v16) != 0)
  {
    v17 = 0;
    v18 = *(unsigned int *)(v9 + 8);
    if (v18 >= 8)
      v19 = pas_compact_heap_reservation_base;
    else
      v19 = 0;
    v20 = v19 + v18;
    v21 = *(_DWORD *)(v14 + 8);
    if (v21 >= 8)
      v22 = pas_compact_heap_reservation_base;
    else
      v22 = 0;
    v23 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFFELL);
    v24 = v20 & 0xFFFFFFFFFFFFFFFELL | (v22 + v21) & 1;
    if (v24 >= 8)
      v25 = pas_compact_heap_reservation_base;
    else
      v25 = 0;
    *(_DWORD *)(v14 + 8) = v24 - v25;
    a3[2] = v9;
    v26 = a1;
    if (!v23)
      goto LABEL_38;
  }
  else
  {
    v14 = 0;
    v73 = *(unsigned int *)(v9 + 8);
    if (v73 >= 8)
      v74 = pas_compact_heap_reservation_base;
    else
      v74 = 0;
    v23 = (unsigned int *)((v74 + v73) & 0xFFFFFFFFFFFFFFFELL);
    v17 = 1;
    a3[2] = v9;
    v26 = a1;
    if (!v23)
      goto LABEL_38;
  }
  v26 = v23 + 1;
  v27 = *v23;
  if (v9 == v7 + 8 * v27 && v27 != 0)
    v26 = v23;
LABEL_38:
  v29 = (unint64_t)(v14 - v7) >> 3;
  if (v17)
    LODWORD(v29) = 0;
  *v26 = v29;
  v30 = pas_compact_heap_reservation_base;
  if ((unsigned int *)v9 == a2)
  {
    v72 = a2[2];
    if (v72 < 8)
      LODWORD(v30) = 8;
    if ((((_DWORD)v30 + v72) & 1) != 0)
      remove_fixup(a1, v14, v23, a3);
  }
  else
  {
    v31 = *(_DWORD *)(v9 + 8);
    if (v31 >= 8)
      v32 = pas_compact_heap_reservation_base;
    else
      v32 = 8;
    if (((v32 + v31) & 1) != 0)
    {
      remove_fixup(a1, v14, v23, a3);
      v30 = pas_compact_heap_reservation_base;
    }
    v33 = *a2;
    if ((_DWORD)v33)
      v34 = v30 + 8 * v33;
    else
      v34 = 0;
    v35 = (unint64_t)(v34 - v30) >> 3;
    if (!v34)
      LODWORD(v35) = 0;
    *(_DWORD *)v9 = v35;
    v36 = a2[1];
    if ((_DWORD)v36)
      v37 = pas_compact_heap_reservation_base + 8 * v36;
    else
      v37 = 0;
    if (v37)
      v38 = (unint64_t)(v37 - pas_compact_heap_reservation_base) >> 3;
    else
      v38 = 0;
    *(_DWORD *)(v9 + 4) = v38;
    v39 = a2[2];
    v40 = pas_compact_heap_reservation_base;
    if (v39 >= 8)
      v41 = pas_compact_heap_reservation_base;
    else
      v41 = 0;
    v42 = v41 + v39;
    v43 = *(_DWORD *)(v9 + 8);
    if (v43 >= 8)
      v44 = pas_compact_heap_reservation_base;
    else
      v44 = 0;
    v45 = v42 & 0xFFFFFFFFFFFFFFFELL | (v44 + v43) & 1;
    if (v45 >= 8)
      v46 = pas_compact_heap_reservation_base;
    else
      v46 = 0;
    v47 = v45 - v46;
    *(_DWORD *)(v9 + 8) = v47;
    v48 = a2[2];
    if (v48 >= 8)
      v49 = v40;
    else
      v49 = 8;
    v50 = (v49 + (_BYTE)v48) & 1;
    if (v47 >= 8)
      v51 = v40;
    else
      v51 = 0;
    v52 = (v51 + v47) & 0xFFFFFFFFFFFFFFFELL | v50;
    if (v52 >= 8)
      v53 = v40;
    else
      v53 = 0;
    *(_DWORD *)(v9 + 8) = v52 - v53;
    v54 = *a2;
    if ((_DWORD)v54)
    {
      v55 = v40 + 8 * v54;
      if (v55)
      {
        v56 = *(_DWORD *)(v55 + 8);
        if (v56 >= 8)
          v57 = v40;
        else
          v57 = 0;
        v58 = (v57 + (_BYTE)v56) & 1 | v9;
        if (v58 >= 8)
          v59 = v40;
        else
          v59 = 0;
        *(_DWORD *)(v55 + 8) = v58 - v59;
      }
    }
    v60 = a2[1];
    if ((_DWORD)v60)
    {
      v61 = v40 + 8 * v60;
      if (v61)
      {
        v62 = *(_DWORD *)(v61 + 8);
        if (v62 >= 8)
          v63 = v40;
        else
          v63 = 0;
        v64 = (v63 + (_BYTE)v62) & 1 | v9;
        if (v64 >= 8)
          v65 = v40;
        else
          v65 = 0;
        *(_DWORD *)(v61 + 8) = v64 - v65;
      }
    }
    v66 = a2[2];
    if (v66 >= 8)
      v67 = v40;
    else
      v67 = 0;
    v68 = (unsigned int *)((v67 + v66) & 0xFFFFFFFFFFFFFFFELL);
    if (v68)
    {
      v69 = *v68;
      if ((_DWORD)v69)
        v70 = (unsigned int *)(v40 + 8 * v69);
      else
        v70 = 0;
      v71 = (v9 - v40) >> 3;
      if (v70 == a2)
        *v68 = v71;
      else
        v68[1] = v71;
    }
    else
    {
      *a1 = (v9 - v40) >> 3;
    }
  }
  a3[2] = 0;
  return a2;
}

_DWORD *remove_fixup(_DWORD *result, uint64_t a2, unsigned int *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;

  v4 = a2;
  v5 = *result;
  v6 = pas_compact_heap_reservation_base;
  if ((_DWORD)v5)
    v7 = pas_compact_heap_reservation_base + 8 * v5;
  else
    v7 = 0;
  if (v7 != a2)
  {
    v10 = result;
    do
    {
      if (v4)
      {
        v20 = *(_DWORD *)(v4 + 8);
        v21 = v20 >= 8 ? v6 : 8;
        if (((v21 + v20) & 1) == 0)
          goto LABEL_196;
      }
      v22 = *a3;
      v23 = (unsigned int *)(v6 + 8 * v22);
      if ((_DWORD)v22)
        v24 = v6 + 8 * v22;
      else
        v24 = 0;
      if (v4 == v24)
      {
        v68 = a3[1];
        v23 = (unsigned int *)(v6 + 8 * v68);
        if ((_DWORD)v68)
          v69 = v6 + 8 * v68;
        else
          v69 = 0;
        v70 = *(unsigned int *)(v69 + 8);
        if (v70 >= 8)
          v71 = v6;
        else
          v71 = 8;
        if (((v71 + (_DWORD)v70) & 1) == 0)
        {
          if (v70 >= 8)
            v72 = v6;
          else
            v72 = 0;
          v73 = (v72 + v70) | 1;
          if (v73 >= 8)
            v74 = v6;
          else
            v74 = 0;
          *(_DWORD *)(v69 + 8) = v73 - v74;
          v75 = a3[2];
          if (v75 >= 8)
            v76 = v6;
          else
            v76 = 0;
          v77 = v76 + v75;
          v78 = v77 & 0xFFFFFFFE;
          if ((v77 & 0xFFFFFFFFFFFFFFF8) != 0)
            v79 = v6;
          else
            v79 = 0;
          a3[2] = v78 - v79;
          result = left_rotate(v10, (unint64_t)a3, a4);
          v80 = a3[1];
          v6 = pas_compact_heap_reservation_base;
          if ((_DWORD)v80)
            v23 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v80);
          else
            v23 = 0;
        }
        v81 = *v23;
        v82 = v23[1];
        v83 = v6 + 8 * v81;
        if (!(_DWORD)v81)
          v83 = 0;
        v84 = v6 + 8 * v82;
        if ((_DWORD)v82)
          v85 = v6 + 8 * v82;
        else
          v85 = 0;
        if (!v83 || ((v86 = *(_DWORD *)(v83 + 8), v86 >= 8) ? (v87 = v6) : (v87 = 8), ((v87 + v86) & 1) != 0))
        {
          if (!v85 || ((v88 = *(_DWORD *)(v85 + 8), v88 >= 8) ? (v89 = v6) : (v89 = 8), ((v89 + v88) & 1) != 0))
          {
LABEL_6:
            v11 = v23[2];
            if (v11 >= 8)
              v12 = v6;
            else
              v12 = 0;
            v13 = v12 + v11;
            v14 = v13 & 0xFFFFFFFE;
            if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
              v15 = v6;
            else
              v15 = 0;
            v23[2] = v14 - v15;
            v4 = (uint64_t)a3;
            goto LABEL_13;
          }
LABEL_147:
          if (v88 >= 8)
            v90 = v6;
          else
            v90 = 8;
          if (((v90 + v88) & 1) != 0)
          {
            v86 = *(_DWORD *)(v83 + 8);
            goto LABEL_152;
          }
        }
        else
        {
          if (v85)
          {
            v88 = *(_DWORD *)(v85 + 8);
            goto LABEL_147;
          }
LABEL_152:
          if (v86 >= 8)
            v91 = v6;
          else
            v91 = 0;
          v92 = (v91 + v86) | 1;
          if (v92 >= 8)
            v93 = v6;
          else
            v93 = 0;
          *(_DWORD *)(v83 + 8) = v92 - v93;
          v94 = v23[2];
          if (v94 >= 8)
            v95 = v6;
          else
            v95 = 0;
          v96 = v95 + v94;
          v97 = v96 & 0xFFFFFFFE;
          if ((v96 & 0xFFFFFFFFFFFFFFF8) != 0)
            v98 = v6;
          else
            v98 = 0;
          v23[2] = v97 - v98;
          right_rotate(v10, (unint64_t)v23, a4);
          v99 = a3[1];
          v6 = pas_compact_heap_reservation_base;
          v23 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v99);
          if ((_DWORD)v99)
            v100 = pas_compact_heap_reservation_base + 8 * v99;
          else
            v100 = 0;
          v82 = *(unsigned int *)(v100 + 4);
          v84 = pas_compact_heap_reservation_base + 8 * v82;
        }
        v101 = a3[2];
        if (v101 >= 8)
          v102 = v6;
        else
          v102 = 8;
        v103 = (v102 + (_BYTE)v101) & 1;
        v104 = v23[2];
        if (v104 >= 8)
          v105 = v6;
        else
          v105 = 0;
        v106 = (v105 + v104) & 0xFFFFFFFFFFFFFFFELL | v103;
        if (v106 >= 8)
          v107 = v6;
        else
          v107 = 0;
        v23[2] = v106 - v107;
        v108 = a3[2];
        if (v108 >= 8)
          v109 = v6;
        else
          v109 = 0;
        v110 = (v109 + v108) | 1;
        if (v110 >= 8)
          v111 = v6;
        else
          v111 = 0;
        a3[2] = v110 - v111;
        if ((_DWORD)v82 && v84)
        {
          v112 = *(unsigned int *)(v84 + 8);
          if (v112 >= 8)
            v113 = v6;
          else
            v113 = 0;
          v114 = (v113 + v112) | 1;
          if (v114 < 8)
            LODWORD(v6) = 0;
          *(_DWORD *)(v84 + 8) = v114 - v6;
        }
        result = left_rotate(v10, (unint64_t)a3, a4);
        goto LABEL_192;
      }
      v25 = *(unsigned int *)(v24 + 8);
      if (v25 >= 8)
        v26 = v6;
      else
        v26 = 8;
      if (((v26 + (_DWORD)v25) & 1) == 0)
      {
        if (v25 >= 8)
          v27 = v6;
        else
          v27 = 0;
        v28 = (v27 + v25) | 1;
        if (v28 >= 8)
          v29 = v6;
        else
          v29 = 0;
        *(_DWORD *)(v24 + 8) = v28 - v29;
        v30 = a3[2];
        if (v30 >= 8)
          v31 = v6;
        else
          v31 = 0;
        v32 = v31 + v30;
        v33 = v32 & 0xFFFFFFFE;
        if ((v32 & 0xFFFFFFFFFFFFFFF8) != 0)
          v34 = v6;
        else
          v34 = 0;
        a3[2] = v33 - v34;
        result = right_rotate(v10, (unint64_t)a3, a4);
        v35 = *a3;
        v6 = pas_compact_heap_reservation_base;
        if ((_DWORD)v35)
          v23 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v35);
        else
          v23 = 0;
      }
      v36 = *v23;
      v37 = v23[1];
      v38 = v6 + 8 * v36;
      if ((_DWORD)v36)
        v39 = v6 + 8 * v36;
      else
        v39 = 0;
      if ((_DWORD)v37)
        v40 = v6 + 8 * v37;
      else
        v40 = 0;
      if (!v40 || ((v41 = *(_DWORD *)(v40 + 8), v41 >= 8) ? (v42 = v6) : (v42 = 8), ((v42 + v41) & 1) != 0))
      {
        if (!v39)
          goto LABEL_6;
        v43 = *(_DWORD *)(v39 + 8);
        v44 = v43 >= 8 ? v6 : 8;
        if (((v44 + v43) & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        if (!v39)
          goto LABEL_71;
        v43 = *(_DWORD *)(v39 + 8);
      }
      if (v43 >= 8)
        v45 = v6;
      else
        v45 = 8;
      if (((v45 + v43) & 1) == 0)
        goto LABEL_84;
      v41 = *(_DWORD *)(v40 + 8);
LABEL_71:
      if (v41 >= 8)
        v46 = v6;
      else
        v46 = 0;
      v47 = (v46 + v41) | 1;
      if (v47 >= 8)
        v48 = v6;
      else
        v48 = 0;
      *(_DWORD *)(v40 + 8) = v47 - v48;
      v49 = v23[2];
      if (v49 >= 8)
        v50 = v6;
      else
        v50 = 0;
      v51 = v50 + v49;
      v52 = v51 & 0xFFFFFFFE;
      if ((v51 & 0xFFFFFFFFFFFFFFF8) != 0)
        v53 = v6;
      else
        v53 = 0;
      v23[2] = v52 - v53;
      left_rotate(v10, (unint64_t)v23, a4);
      v6 = pas_compact_heap_reservation_base;
      v23 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * *a3);
      v36 = *v23;
      v38 = pas_compact_heap_reservation_base + 8 * v36;
LABEL_84:
      v54 = a3[2];
      if (v54 >= 8)
        v55 = v6;
      else
        v55 = 8;
      v56 = (v55 + (_BYTE)v54) & 1;
      v57 = v23[2];
      if (v57 >= 8)
        v58 = v6;
      else
        v58 = 0;
      v59 = (v58 + v57) & 0xFFFFFFFFFFFFFFFELL | v56;
      if (v59 >= 8)
        v60 = v6;
      else
        v60 = 0;
      v23[2] = v59 - v60;
      v61 = a3[2];
      if (v61 >= 8)
        v62 = v6;
      else
        v62 = 0;
      v63 = (v62 + v61) | 1;
      if (v63 >= 8)
        v64 = v6;
      else
        v64 = 0;
      a3[2] = v63 - v64;
      if ((_DWORD)v36 && v38)
      {
        v65 = *(unsigned int *)(v38 + 8);
        if (v65 >= 8)
          v66 = v6;
        else
          v66 = 0;
        v67 = (v66 + v65) | 1;
        if (v67 < 8)
          LODWORD(v6) = 0;
        *(_DWORD *)(v38 + 8) = v67 - v6;
      }
      result = right_rotate(v10, (unint64_t)a3, a4);
LABEL_192:
      v115 = *v10;
      v6 = pas_compact_heap_reservation_base;
      v4 = pas_compact_heap_reservation_base + 8 * v115;
      if ((_DWORD)v115)
        a3 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v115);
      else
        a3 = 0;
LABEL_13:
      v16 = a3[2];
      if (v16 >= 8)
        v17 = v6;
      else
        v17 = 0;
      a3 = (unsigned int *)((v17 + v16) & 0xFFFFFFFFFFFFFFFELL);
      v18 = *v10;
      if ((_DWORD)v18)
        v19 = v6 + 8 * v18;
      else
        v19 = 0;
    }
    while (v4 != v19);
  }
  if (v4)
  {
LABEL_196:
    v116 = *(unsigned int *)(v4 + 8);
    if (v116 >= 8)
      v117 = v6;
    else
      v117 = 0;
    v118 = (v117 + v116) | 1;
    if (v118 < 8)
      LODWORD(v6) = 0;
    *(_DWORD *)(v4 + 8) = v118 - v6;
  }
  return result;
}

unint64_t pas_redundant_local_allocator_node_create(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;

  result = pas_immortal_heap_allocate(8uLL, (uint64_t)"pas_redundant_local_allocator_node", 0);
  v3 = (unint64_t)(a1 - pas_compact_heap_reservation_base) >> 3;
  if (!a1)
    LODWORD(v3) = 0;
  *(_WORD *)result = v3;
  *(_BYTE *)(result + 2) = BYTE2(v3);
  *(_DWORD *)(result + 4) = 0;
  return result;
}

uint64_t pas_report_crash_extract_pgm_failure(const char *a1, uint64_t a2, int a3, uint64_t a4, const char **a5, uint64_t (*a6)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v31;
  unint64_t v33;
  int v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;

  if (a3 != 2)
    return 5;
  memory_reader = a6;
  v9 = a6(a4, a2, 240);
  if (v9)
  {
    v10 = memory_reader(a4, *(_QWORD *)(v9 + 224), 24);
    if (v10)
    {
      v11 = (_QWORD *)v10;
      v12 = *(unsigned int *)(v10 + 8);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = 16 * v12;
        while (1)
        {
          v18 = (unint64_t *)memory_reader(a4, v13 + *v11, 16);
          if (!v18)
            return 5;
          v19 = v18;
          if (*v18 != -1)
          {
            v20 = memory_reader(a4, v18[1], 40);
            if (!v20)
              return 5;
            v21 = *v19;
            if (*(_BYTE *)(v20 + 28))
            {
              a5[2] = "address right-aligned";
              v22 = v21 - *(unsigned __int16 *)(v20 + 24);
              v23 = *(unsigned __int16 *)(v20 + 26);
              if (v22 > (unint64_t)a1 && v22 - v23 <= (unint64_t)a1)
                goto LABEL_47;
              if (v21 > (unint64_t)a1 && v22 <= (unint64_t)a1)
                goto LABEL_54;
              v26 = *(_QWORD *)(v20 + 8) + v22;
              v27 = v26 + v23;
              if (v26 <= (unint64_t)a1 && v27 > (unint64_t)a1)
                goto LABEL_51;
            }
            else
            {
              a5[2] = "address left-aligned";
              v29 = *(unsigned __int16 *)(v20 + 26);
              if (v21 > (unint64_t)a1 && v21 - v29 <= (unint64_t)a1)
              {
LABEL_51:
                v36 = "UAF";
                if (!*(_BYTE *)(v20 + 29))
                  v36 = "OOB";
                v38 = "high";
                goto LABEL_58;
              }
              v31 = *(_QWORD *)(v20 + 8) + v21;
              v26 = v31 - *(unsigned __int16 *)(v20 + 24);
              if (v31 > (unint64_t)a1 && v26 <= (unint64_t)a1)
              {
LABEL_54:
                v35 = *(unsigned __int8 *)(v20 + 29);
                v36 = "UAF";
                v37 = "OOB";
                goto LABEL_55;
              }
              v33 = v31 + v29;
              if (v31 <= (unint64_t)a1 && v33 > (unint64_t)a1)
              {
LABEL_47:
                v35 = *(unsigned __int8 *)(v20 + 29);
                v36 = "long-range UAF";
                v37 = "long-range OOB";
LABEL_55:
                if (!v35)
                  v36 = v37;
                v38 = "low";
LABEL_58:
                v17 = 0;
                v39 = *(const char **)v20;
                *a5 = v36;
                a5[1] = v38;
                a5[3] = a1;
                a5[4] = v39;
                return v17;
              }
            }
            if (v21 <= (unint64_t)a1 && v26 > (unint64_t)a1)
            {
              v35 = *(unsigned __int8 *)(v20 + 29);
              v36 = "UAF";
              v37 = "undefined";
              goto LABEL_55;
            }
          }
          v13 += 16;
          v17 = 5;
          if (v14 == v13)
            return v17;
        }
      }
    }
  }
  return 5;
}

uint64_t pas_reserved_memory_provider_try_allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  int64x2_t v8;
  double (*v9)@<D0>(uint64_t@<X8>);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = vdupq_n_s64(1uLL);
  v9 = null_aligned_allocator;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  return pas_simple_large_free_heap_try_allocate(a7, a1, a2, a3, &v8);
}

double null_aligned_allocator@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t pas_root_construct(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  *(_QWORD *)a1 = 0xBEEEEEEEEFLL;
  *(_QWORD *)(a1 + 8) = &pas_compact_heap_reservation_base;
  *(_QWORD *)(a1 + 16) = &pas_compact_heap_reservation_size;
  *(_QWORD *)(a1 + 24) = &pas_compact_heap_reservation_guard_size;
  *(_QWORD *)(a1 + 32) = &pas_compact_heap_reservation_available_size;
  *(_QWORD *)(a1 + 40) = &pas_compact_heap_reservation_bump;
  *(_QWORD *)(a1 + 48) = pas_enumerable_page_malloc_page_list;
  *(_QWORD *)(a1 + 56) = pas_large_heap_physical_page_sharing_cache_page_list;
  *(_QWORD *)(a1 + 64) = pas_payload_reservation_page_list;
  *(_QWORD *)(a1 + 72) = &pas_thread_local_cache_node_first;
  *(_QWORD *)(a1 + 80) = &pas_thread_local_cache_layout_first_segment;
  *(_QWORD *)(a1 + 88) = &pas_all_heaps_first_heap;
  *(_QWORD *)(a1 + 104) = 2;
  v2 = (_QWORD *)pas_immortal_heap_allocate(0x10uLL, (uint64_t)"pas_root/static_heaps", 0);
  *(_QWORD *)(a1 + 96) = v2;
  *v2 = &bmalloc_common_primitive_heap;
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) = &jit_common_primitive_heap;
  *(_QWORD *)(a1 + 112) = &pas_large_map_hashtable_instance;
  *(_QWORD *)(a1 + 120) = &pas_large_map_hashtable_instance_in_flux_stash;
  *(_QWORD *)(a1 + 128) = &pas_small_large_map_hashtable_instance;
  *(_QWORD *)(a1 + 136) = &pas_small_large_map_hashtable_instance_in_flux_stash;
  *(_QWORD *)(a1 + 144) = &pas_tiny_large_map_hashtable_instance;
  *(_QWORD *)(a1 + 152) = &pas_tiny_large_map_hashtable_instance_in_flux_stash;
  *(_QWORD *)(a1 + 160) = &pas_tiny_large_map_second_level_hashtable_in_flux_stash_instance;
  *(_QWORD *)(a1 + 224) = &pas_pgm_hash_map;
  *(_QWORD *)(a1 + 232) = &pas_pgm_hash_map_in_flux_stash;
  v3 = (_QWORD *)pas_immortal_heap_allocate(0x20uLL, (uint64_t)"pas_root/heap_configs", 0);
  *(_QWORD *)(a1 + 168) = v3;
  *v3 = pas_heap_config_kind_for_config_table[0];
  *(_UNKNOWN ***)(*(_QWORD *)(a1 + 168) + 8) = off_1EE3429C0[0];
  *(_UNKNOWN ***)(*(_QWORD *)(a1 + 168) + 16) = off_1EE3429C8[0];
  *(_QWORD *)(*(_QWORD *)(a1 + 168) + 24) = off_1EE3429D0;
  *(_DWORD *)(a1 + 176) = 4;
  *(_QWORD *)(a1 + 184) = &pas_large_sharing_tree;
  *(_QWORD *)(a1 + 192) = pas_large_sharing_tree_jettisoned_nodes;
  result = pas_page_malloc_cached_alignment;
  if (!pas_page_malloc_cached_alignment)
  {
    result = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = result;
  }
  *(_QWORD *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 208) = &pas_baseline_allocator_table;
  *(_QWORD *)(a1 + 216) = 32;
  return result;
}

uint64_t default_reader(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = a2;
  return 0;
}

uint64_t enumerator_reader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v7;

  v7 = 0;
  v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))a4)(*(unsigned int *)(a4 + 16), a2, a3, &v7);
  *(_DWORD *)(a4 + 32) = v5;
  if (v5)
    return 0;
  else
    return v7;
}

uint64_t enumerator_recorder(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD v8[2];

  if (a4 > 2)
    v6 = 0;
  else
    v6 = dword_19919FD60[a4];
  v8[0] = a2;
  v8[1] = a3;
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD *, uint64_t))(a5 + 8))(*(unsigned int *)(a5 + 16), *(_QWORD *)(a5 + 24), v6, v8, 1);
}

uint64_t pas_root_enumerate_for_libmalloc_with_root_after_zone(int a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t (*a5)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4), uint64_t a6)
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, _QWORD *);
  BOOL v12;
  _BOOL4 v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  pthread_mutex_t *v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  pthread_mutex_t *v23;
  _QWORD v24[2];
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v10 = a4 + 200;
  if (a5)
    v11 = a5;
  else
    v11 = default_reader;
  if (a1)
    v12 = *MEMORY[0x1E0C83DA0] == a1;
  else
    v12 = 1;
  v13 = v12 || a5 == 0;
  if (v13)
  {
    v14 = ensure_data_instance();
    pthread_mutex_lock((pthread_mutex_t *)v14);
    ++pas_scavenger_should_suspend_count;
    while (pas_scavenger_current_state)
      pthread_cond_wait((pthread_cond_t *)(v14 + 64), (pthread_mutex_t *)v14);
    pthread_mutex_unlock((pthread_mutex_t *)v14);
    v13 = 1;
  }
  v28 = 0;
  v26 = 0;
  v24[0] = v11;
  v24[1] = a6;
  v27 = a2;
  v25 = a1;
  v15 = pas_enumerator_create(v10, enumerator_reader, (uint64_t)v24, (uint64_t)enumerator_recorder, (uint64_t)v24, (a3 >> 2) & 1, (a3 & 6) != 0, a3 & 1);
  if (v15
    && (v16 = v15, pas_enumerate_initially_unaccounted_pages((uint64_t)v15))
    && pas_enumerate_large_heaps((uint64_t)v16)
    && pas_enumerate_segregated_heaps((unint64_t)v16)
    && pas_enumerator_for_each_heap((uint64_t)v16, (unsigned int (*)(uint64_t, uint64_t, uint64_t))enumerate_bitfit_heap_callback, 0)&& pas_enumerate_unaccounted_pages_as_meta((uint64_t)v16))
  {
    v17 = (_QWORD *)*v16;
    if (*v16)
    {
      do
      {
        v21 = (_QWORD *)*v17;
        v20 = v17[1];
        v22 = v20 + 24;
        if (v20 != -24)
        {
          munmap(v17, v20 + 24);
          pas_page_malloc_num_allocated_bytes -= v22;
        }
        v17 = v21;
      }
      while (v21);
    }
    if (v13)
    {
      v23 = (pthread_mutex_t *)ensure_data_instance();
      pthread_mutex_lock(v23);
      --pas_scavenger_should_suspend_count;
      pthread_mutex_unlock(v23);
      if (pas_scavenger_current_state != 1 && !pas_scavenger_eligibility_notification_has_been_deferred)
      {
        __dmb(0xBu);
        pas_scavenger_eligibility_notification_has_been_deferred = 1;
      }
      pas_scavenger_notify_eligibility_if_needed();
    }
    return 0;
  }
  else
  {
    if (v13)
    {
      v18 = (pthread_mutex_t *)ensure_data_instance();
      pthread_mutex_lock(v18);
      --pas_scavenger_should_suspend_count;
      pthread_mutex_unlock(v18);
      if (pas_scavenger_current_state != 1 && !pas_scavenger_eligibility_notification_has_been_deferred)
      {
        __dmb(0xBu);
        pas_scavenger_eligibility_notification_has_been_deferred = 1;
      }
      pas_scavenger_notify_eligibility_if_needed();
    }
    return v28;
  }
}

uint64_t malloc_introspect_size()
{
  return 0;
}

uint64_t malloc_introspect_good_size(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t malloc_introspect_check()
{
  return 1;
}

double malloc_introspect_statistics(uint64_t a1, _OWORD *a2)
{
  double result;

  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

void pas_scavenger_notify_eligibility_if_needed()
{
  BOOL v0;
  pthread_t v1;
  unint64_t v2;
  int v3;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[2];
  uint64_t v6;
  int v7;

  if (pas_scavenger_eligibility_notification_has_been_deferred)
    v0 = pas_scavenger_should_suspend_count == 0;
  else
    v0 = 0;
  if (v0)
  {
    if (all_image_infos)
    {
      if (!*(_BYTE *)(all_image_infos + 25))
        return;
    }
    else
    {
      *(_QWORD *)task_info_out = 0;
      v6 = 0;
      v7 = 0;
      task_info_outCnt = 5;
      task_info(*MEMORY[0x1E0C83DA0], 0x11u, task_info_out, &task_info_outCnt);
      v1 = *(pthread_t *)task_info_out;
      if (!*(_QWORD *)task_info_out)
        return;
      __dmb(0xBu);
      all_image_infos = (uint64_t)v1;
      if (!v1->__opaque[9])
        return;
    }
    __dmb(0xBu);
    pas_scavenger_eligibility_notification_has_been_deferred = 0;
    __dmb(0xBu);
    if (pas_scavenger_current_state != 1)
    {
      v2 = ensure_data_instance();
      pthread_mutex_lock((pthread_mutex_t *)v2);
      if (!pas_scavenger_should_suspend_count)
      {
        v3 = pas_scavenger_current_state;
        if (!pas_scavenger_current_state)
        {
          *(_QWORD *)task_info_out = 0;
          pas_scavenger_current_state = 1;
          pthread_create((pthread_t *)task_info_out, 0, (void *(__cdecl *)(void *))scavenger_thread_main, 0);
          pthread_detach(*(pthread_t *)task_info_out);
          v3 = pas_scavenger_current_state;
        }
        if (v3 == 2)
        {
          pas_scavenger_current_state = 1;
          pthread_cond_broadcast((pthread_cond_t *)(v2 + 64));
        }
      }
      pthread_mutex_unlock((pthread_mutex_t *)v2);
      if (pas_status_reporter_enabled)
        pthread_once(&once_control, (void (*)(void))start_reporter);
    }
  }
}

unint64_t ensure_data_instance()
{
  unint64_t v0;
  unint64_t StatusReg;
  unsigned int v3;
  int v5;
  unsigned int v6;

  v0 = pas_scavenger_data_instance;
  if (pas_scavenger_data_instance)
    return v0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v3, &pas_heap_lock._os_unfair_lock_opaque))
    {
      v0 = pas_scavenger_data_instance;
      if (pas_scavenger_data_instance)
        goto LABEL_7;
      goto LABEL_12;
    }
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
  v0 = pas_scavenger_data_instance;
  if (pas_scavenger_data_instance)
    goto LABEL_7;
LABEL_12:
  v0 = pas_immortal_heap_allocate(0x70uLL, (uint64_t)"pas_scavenger_data", 0);
  pthread_mutex_init((pthread_mutex_t *)v0, 0);
  pthread_cond_init((pthread_cond_t *)(v0 + 64), 0);
  __dmb(0xBu);
  pas_scavenger_data_instance = v0;
LABEL_7:
  v5 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v6 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v6 != v5)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v0;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v0;
}

uint64_t scavenger_thread_main()
{
  unint64_t v0;
  qos_class_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  qos_class_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  double v45;
  double v46;
  int v47;
  int v48;
  double v49;
  BOOL v51;
  qos_class_t v54;
  int v55;
  int v56;
  unint64_t StatusReg;
  timeval v58;

  pthread_setname_np("JavaScriptCore libpas scavenger");
  v0 = ensure_data_instance();
  v1 = atomic_load(&pas_scavenger_requested_qos_class);
  v54 = v1;
  pthread_set_qos_class_self_np(v1, 0);
  v7 = &unk_1EE345000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
LABEL_2:
    v9 = atomic_load(&pas_scavenger_requested_qos_class);
    if (v54 != v9)
    {
      pthread_set_qos_class_self_np(v9, 0);
      v54 = v9;
    }
    ++v7[280];
    if (pas_baseline_allocator_table)
    {
      v10 = 0;
      v11 = 32;
      do
      {
        --v11;
        v12 = pas_baseline_allocator_table;
        v13 = (os_unfair_lock_s *)(pas_baseline_allocator_table + 320 * v11);
        v14 = *(_DWORD *)(v8 + 24);
        while (!__ldaxr(&v13->_os_unfair_lock_opaque))
        {
          if (!__stxr(v14, &v13->_os_unfair_lock_opaque))
          {
            v16 = v12 + 320 * v11;
            if (!*(_QWORD *)(v16 + 56))
              goto LABEL_17;
            goto LABEL_14;
          }
        }
        __clrex();
        os_unfair_lock_lock(v13);
        v16 = v12 + 320 * v11;
        if (!*(_QWORD *)(v16 + 56))
          goto LABEL_17;
LABEL_14:
        if (*(_BYTE *)(v16 + 10))
        {
          *(_BYTE *)(v16 + 10) = 0;
          v17 = 1;
          goto LABEL_18;
        }
        pas_local_allocator_stop((_BYTE *)(v16 + 8), 1, 0);
LABEL_17:
        v17 = 0;
LABEL_18:
        v10 |= v17;
        v18 = *(_DWORD *)(v8 + 24);
        while (1)
        {
          v19 = __ldxr(&v13->_os_unfair_lock_opaque);
          if (v19 != v18)
            break;
          if (!__stlxr(0, &v13->_os_unfair_lock_opaque))
            goto LABEL_7;
        }
        __clrex();
        os_unfair_lock_unlock(v13);
LABEL_7:
        ;
      }
      while (v11);
    }
    else
    {
      v10 = 0;
    }
    v20 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v20, &pas_heap_lock._os_unfair_lock_opaque))
      {
        v22 = qword_1ECF57F88;
        if (qword_1ECF57F88)
          goto LABEL_27;
LABEL_35:
        v23 = 0;
        v7 = &unk_1EE345000;
        goto LABEL_36;
      }
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
    v22 = qword_1ECF57F88;
    if (!qword_1ECF57F88)
      goto LABEL_35;
LABEL_27:
    v23 = 0;
    v24 = 54912;
    v7 = (_DWORD *)&unk_1EE345000;
    do
    {
      v26 = v22 + v24;
      if (*(_QWORD *)(v22 + v24 - 264))
      {
        if (*(_BYTE *)(v26 - 310))
        {
          *(_BYTE *)(v26 - 310) = 0;
          v25 = 1;
        }
        else
        {
          pas_local_allocator_stop((_BYTE *)(v26 - 312), 1, 0);
          v25 = 0;
          v22 = qword_1ECF57F88;
        }
      }
      else
      {
        v25 = 0;
      }
      v23 |= v25;
      v24 -= 312;
    }
    while (v24);
LABEL_36:
    v27 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v28 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v28 != v27)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_41;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
LABEL_41:
    v56 = v10 | v23 | pas_thread_local_cache_for_all(1, 1, (os_unfair_lock_s *)((v7[280] & 0x7F) == 0), v2, v3, v4, v5, v6);
    v29 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v29, &pas_heap_lock._os_unfair_lock_opaque))
      {
        os_unfair_lock_assert_owner(&pas_heap_lock);
        v31 = pas_compact_expendable_memory_payload;
        if (pas_compact_expendable_memory_payload)
          goto LABEL_45;
LABEL_50:
        v55 = 0;
        os_unfair_lock_assert_owner(&pas_heap_lock);
        v32 = pas_large_expendable_memory_head;
        if (!pas_large_expendable_memory_head)
          goto LABEL_51;
        goto LABEL_46;
      }
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v31 = pas_compact_expendable_memory_payload;
    if (!pas_compact_expendable_memory_payload)
      goto LABEL_50;
LABEL_45:
    v55 = pas_expendable_memory_scavenge((unsigned int *)pas_compact_expendable_memory_header, v31, 0);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v32 = pas_large_expendable_memory_head;
    if (!pas_large_expendable_memory_head)
    {
LABEL_51:
      v33 = 0;
      goto LABEL_52;
    }
LABEL_46:
    v33 = 0;
    do
    {
      v33 |= pas_expendable_memory_scavenge((unsigned int *)(v32 + 8), v32 + 0x4000, 0);
      v32 = *(_QWORD *)v32;
    }
    while (v32);
LABEL_52:
    v34 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v35 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v35 != v34)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_57;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
LABEL_57:
    v36 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v37 = mach_approximate_time();
      v38 = *v36;
      v39 = v36[1];
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_60;
LABEL_59:
      pas_get_epoch_first = 1;
      goto LABEL_60;
    }
    get_timebase_info_slow();
    v37 = mach_approximate_time();
    v38 = timebase_info;
    v39 = *(unsigned int *)algn_1ECF57B54;
    if ((pas_get_epoch_first & 1) == 0)
      goto LABEL_59;
LABEL_60:
    v40 = v37 * v38 / v39;
    v41 = v40 >= pas_scavenger_max_epoch_delta;
    v42 = v40 - pas_scavenger_max_epoch_delta;
    if (v41)
      v43 = v42;
    else
      v43 = 1;
    v44 = pas_physical_page_sharing_pool_scavenge(v43);
    pthread_mutex_lock((pthread_mutex_t *)v0);
    v58.tv_sec = 0;
    *(_QWORD *)&v58.tv_usec = 0;
    gettimeofday(&v58, 0);
    v45 = (double)v58.tv_usec / 1000.0 + (double)v58.tv_sec * 1000.0;
    v46 = *(double *)&pas_scavenger_period_in_milliseconds;
    if (v44 == 1 || ((v56 | v55 | v33) & 1) != 0)
    {
      if (pas_scavenger_current_state == 1)
      {
        v48 = 0;
        goto LABEL_72;
      }
      v47 = 1;
      goto LABEL_71;
    }
    if ((is_shut_down_enabled & 1) != 0)
      goto LABEL_81;
    if (pas_scavenger_current_state == 1)
    {
      v47 = 2;
LABEL_71:
      v48 = 0;
      pas_scavenger_current_state = v47;
      goto LABEL_72;
    }
    while (1)
    {
      v58.tv_sec = 0;
      *(_QWORD *)&v58.tv_usec = 0;
      gettimeofday(&v58, 0);
      v48 = pas_scavenger_current_state == 2;
      v51 = (double)v58.tv_usec / 1000.0 + (double)v58.tv_sec * 1000.0 < v45 + 10000.0
         && pas_scavenger_should_suspend_count == 0;
      if (!v51 || pas_scavenger_current_state != 2)
        break;
      v58.tv_sec = ((v45 + 10000.0) / 1000.0);
      *(_QWORD *)&v58.tv_usec = (unint64_t)((v45 + 10000.0) * 1000.0 * 1000.0) % 0x3B9ACA00;
      pthread_cond_timedwait((pthread_cond_t *)(v0 + 64), (pthread_mutex_t *)v0, (const timespec *)&v58);
    }
LABEL_72:
    if ((is_shut_down_enabled & 1) == 0)
      break;
    pthread_mutex_unlock((pthread_mutex_t *)v0);
    if ((v48 & 1) != 0)
      return 0;
  }
  v49 = v46 + v45;
  while (1)
  {
    v58.tv_sec = 0;
    *(_QWORD *)&v58.tv_usec = 0;
    gettimeofday(&v58, 0);
    if ((double)v58.tv_usec / 1000.0 + (double)v58.tv_sec * 1000.0 >= v49 || pas_scavenger_should_suspend_count != 0)
      break;
    v58.tv_sec = (v49 / 1000.0);
    *(_QWORD *)&v58.tv_usec = (unint64_t)(v49 * 1000.0 * 1000.0) % 0x3B9ACA00;
    pthread_cond_timedwait((pthread_cond_t *)(v0 + 64), (pthread_mutex_t *)v0, (const timespec *)&v58);
  }
  if (((pas_scavenger_should_suspend_count == 0) & ~v48) != 0)
  {
LABEL_81:
    pthread_mutex_unlock((pthread_mutex_t *)v0);
    goto LABEL_2;
  }
  pas_scavenger_current_state = 0;
  pthread_cond_broadcast((pthread_cond_t *)(v0 + 64));
  pthread_mutex_unlock((pthread_mutex_t *)v0);
  return 0;
}

uint64_t pas_scavenger_run_synchronously_now(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t StatusReg;
  uint64_t v9;
  os_unfair_lock_s *v10;
  unsigned int v11;
  os_unfair_lock_s *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t i;
  int v34;
  unsigned int v35;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_QWORD *)(StatusReg + 752);
  if (v9)
  {
    v10 = (os_unfair_lock_s *)(*(_QWORD *)(v9 + 8016) + 20);
    v11 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v10->_os_unfair_lock_opaque))
    {
      if (!__stxr(v11, &v10->_os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(v10);
LABEL_7:
    flush_deallocation_log_for_scavenger(v9, a2, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(v9 + 8000) = 0;
    *(_QWORD *)(v9 + 8008) = 0;
    *(_BYTE *)(v9 + 8004) = 1;
    v13 = (os_unfair_lock_s *)(*(_QWORD *)(v9 + 8016) + 20);
    v14 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v15 = __ldxr(&v13->_os_unfair_lock_opaque);
      if (v15 != v14)
        break;
      if (!__stlxr(0, &v13->_os_unfair_lock_opaque))
        goto LABEL_12;
    }
    __clrex();
    os_unfair_lock_unlock(v13);
LABEL_12:
    pas_scavenger_notify_eligibility_if_needed();
    pas_thread_local_cache_stop_local_allocators(v9, 0);
    pas_scavenger_notify_eligibility_if_needed();
  }
  if (pas_baseline_allocator_table)
  {
    v16 = 32;
    do
    {
      --v16;
      v17 = pas_baseline_allocator_table;
      v18 = (unsigned int *)(pas_baseline_allocator_table + 320 * v16);
      v19 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(v18))
      {
        if (!__stxr(v19, v18))
        {
          v21 = v17 + 320 * v16;
          if (!*(_QWORD *)(v21 + 56))
            goto LABEL_22;
          goto LABEL_21;
        }
      }
      __clrex();
      os_unfair_lock_lock((os_unfair_lock_t)(v17 + 320 * v16));
      v21 = v17 + 320 * v16;
      if (*(_QWORD *)(v21 + 56))
LABEL_21:
        pas_local_allocator_stop((_BYTE *)(v21 + 8), 1, 0);
LABEL_22:
      v22 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v23 = __ldxr(v18);
        if (v23 != v22)
          break;
        if (!__stlxr(0, v18))
          goto LABEL_16;
      }
      __clrex();
      os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 320 * v16));
LABEL_16:
      ;
    }
    while (v16);
  }
  v24 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v24, &pas_heap_lock._os_unfair_lock_opaque))
    {
      v26 = qword_1ECF57F88;
      if (!qword_1ECF57F88)
        goto LABEL_38;
      goto LABEL_34;
    }
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
  v26 = qword_1ECF57F88;
  if (!qword_1ECF57F88)
    goto LABEL_38;
LABEL_34:
  v27 = 54912;
  do
  {
    if (*(_QWORD *)(v26 + v27 - 264))
    {
      pas_local_allocator_stop((_BYTE *)(v26 + v27 - 312), 1, 0);
      v26 = qword_1ECF57F88;
    }
    v27 -= 312;
  }
  while (v27);
LABEL_38:
  v28 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v29 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v29 != v28)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_43;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_43:
  pas_thread_local_cache_for_all(2, 2, (os_unfair_lock_s *)1, a4, a5, a6, a7, a8);
  v30 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v30, &pas_heap_lock._os_unfair_lock_opaque))
    {
      os_unfair_lock_assert_owner(&pas_heap_lock);
      v32 = pas_compact_expendable_memory_payload;
      if (!pas_compact_expendable_memory_payload)
        goto LABEL_48;
      goto LABEL_47;
    }
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v32 = pas_compact_expendable_memory_payload;
  if (pas_compact_expendable_memory_payload)
LABEL_47:
    pas_expendable_memory_scavenge((unsigned int *)pas_compact_expendable_memory_header, v32, 1);
LABEL_48:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  for (i = pas_large_expendable_memory_head; i; i = *(_QWORD *)i)
    pas_expendable_memory_scavenge((unsigned int *)(i + 8), i + 0x4000, 1);
  v34 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v35 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v35 != v34)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return pas_physical_page_sharing_pool_scavenge(0xFFFFFFFFFFFFFFFFLL);
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return pas_physical_page_sharing_pool_scavenge(0xFFFFFFFFFFFFFFFFLL);
}

void pas_scavenger_disable_shut_down()
{
  unint64_t v0;
  pthread_mutex_t *v1;

  v0 = ensure_data_instance();
  pthread_mutex_lock((pthread_mutex_t *)v0);
  ++pas_scavenger_should_suspend_count;
  while (pas_scavenger_current_state)
    pthread_cond_wait((pthread_cond_t *)(v0 + 64), (pthread_mutex_t *)v0);
  pthread_mutex_unlock((pthread_mutex_t *)v0);
  is_shut_down_enabled = 1;
  v1 = (pthread_mutex_t *)ensure_data_instance();
  pthread_mutex_lock(v1);
  --pas_scavenger_should_suspend_count;
  pthread_mutex_unlock(v1);
  if (pas_scavenger_current_state != 1 && !pas_scavenger_eligibility_notification_has_been_deferred)
  {
    __dmb(0xBu);
    pas_scavenger_eligibility_notification_has_been_deferred = 1;
  }
  pas_scavenger_notify_eligibility_if_needed();
}

uint64_t pas_segregated_directory_get_use_epoch(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t StatusReg;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;

  v2 = a1[1];
  v3 = pas_compact_heap_reservation_base + 8 * v2;
  if ((_DWORD)v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = ((unint64_t)a1[2] >> 1) & 1;
    if (v5)
    {
LABEL_9:
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        while (1)
        {
          v7 = v5 - 1;
          if (v5 != 1)
            break;
          if ((a1[2] & 2) == 0)
            return 0;
          v21 = *a1;
          v22 = pas_compact_heap_reservation_base;
          if (v21 < 8)
            v22 = 0;
          v20 = v22 + v21;
          if (((v22 + v21) & 7) != 4)
            goto LABEL_30;
LABEL_10:
          v5 = v7;
          if (!v7)
            return 0;
        }
        v8 = v5 - 2;
        v9 = pas_compact_heap_reservation_base;
        v10 = pas_compact_heap_reservation_base + 8 * a1[1];
        v11 = (v5 - 2) >> 5;
        v12 = *(unsigned int *)(v10 + 32);
        if ((_DWORD)v12)
          v13 = pas_compact_heap_reservation_base + 8 * v12;
        else
          v13 = 0;
        v14 = *(unsigned int *)(v13 + (v11 & 0x7FFFFFFFFFFFFFCLL));
        if ((_DWORD)v14)
          v15 = pas_compact_heap_reservation_base + 8 * v14;
        else
          v15 = 0;
        v16 = *(_DWORD *)(v15 + 8 * ((v8 >> 5) & 3) + 4) >> v8;
        v5 = v7;
        if ((v16 & 1) != 0)
        {
          v17 = *(unsigned int *)(v10 + 44);
          if ((_DWORD)v17)
            v18 = pas_compact_heap_reservation_base + 8 * v17;
          else
            v18 = 0;
          v19 = *(unsigned int *)(v18 + 4 * v8);
          if (v19 < 8)
            v9 = 0;
          v20 = v9 + v19;
          if (((v9 + v19) & 7) == 4)
            goto LABEL_10;
LABEL_30:
          if (!pas_segregated_view_lock_ownership_lock_if_owned_conditionally(v20, 0))
            goto LABEL_10;
          v23 = (unsigned __int128 *)(pas_segregated_view_get_page(v20) + 16);
          do
            v24 = __ldxp(v23);
          while (__stxp(v24, v23));
          if (*((_QWORD *)&v24 + 1))
            v25 = 0;
          else
            v25 = v24;
          switch(v20 & 7)
          {
            case 0:
            case 1:
              v26 = (os_unfair_lock_s *)((v20 & 0xFFFFFFFFFFFFFFF8) + 20);
              break;
            case 2:
              v27 = v20 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_43;
            case 3:
              v28 = *(unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFF8) + 18);
              v29 = *(unsigned __int16 *)((v20 & 0xFFFFFFFFFFFFFFF8) + 16);
              goto LABEL_42;
            case 4:
              v28 = *(unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFF8) + 6);
              v29 = *(unsigned __int16 *)((v20 & 0xFFFFFFFFFFFFFFF8) + 4);
LABEL_42:
              v27 = ((8 * v29) | (v28 << 19)) + pas_compact_heap_reservation_base;
LABEL_43:
              v26 = (os_unfair_lock_s *)(v27 + 12);
              break;
            default:
              v26 = 0;
              break;
          }
          v30 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v31 = __ldxr(&v26->_os_unfair_lock_opaque);
            if (v31 != v30)
              break;
            if (!__stlxr(0, &v26->_os_unfair_lock_opaque))
            {
              if (!v7)
                return v25;
              goto LABEL_50;
            }
          }
          __clrex();
          os_unfair_lock_unlock(v26);
          if (!v7)
            return v25;
LABEL_50:
          v5 = v7;
          if (v25)
            return v25;
        }
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 16);
    if (v5)
      goto LABEL_9;
  }
  return 0;
}

uint64_t pas_segregated_directory_view_did_become_eligible_at_index(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  if (a2)
  {
    v2 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a1 + 4) + 32);
    if ((_DWORD)v2)
      v3 = pas_compact_heap_reservation_base + 8 * v2;
    else
      v3 = 0;
    v4 = *(unsigned int *)(v3 + (((a2 - 1) >> 5) & 0x7FFFFFFFFFFFFFCLL));
    if ((_DWORD)v4)
      v5 = pas_compact_heap_reservation_base + 8 * v4;
    else
      v5 = 0;
    v6 = (unsigned int *)(v5 + 8 * (((a2 - 1) >> 5) & 3));
    while (1)
    {
      v7 = *v6 | (1 << (a2 - 1));
      if (*v6 == v7)
        return 0;
      v8 = __ldxr(v6);
      if (v8 != *v6)
        break;
      if (__stlxr(v7, v6))
        goto LABEL_14;
      v9 = 1;
LABEL_15:
      __dmb(0xBu);
      if (v9)
        goto LABEL_25;
    }
    __clrex();
LABEL_14:
    v9 = 0;
    goto LABEL_15;
  }
  v10 = (unsigned int *)(a1 + 8);
  do
  {
    v11 = *v10 | 1;
    if (v11 == *v10)
      return 0;
    v12 = __ldxr(v10);
    if (v12 == *v10)
    {
      if (!__stlxr(v11, v10))
      {
        v13 = 1;
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    v13 = 0;
LABEL_24:
    __dmb(0xBu);
  }
  while (!v13);
LABEL_25:
  v14 = *(unsigned int *)(a1 + 4);
  v15 = pas_compact_heap_reservation_base + 8 * v14;
  if ((_DWORD)v14)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    while (1)
    {
      do
      {
        v20 = *(_QWORD *)(v15 + 8);
        v21 = *(_QWORD *)v15;
        if (*(_QWORD *)v15 >= a2)
          v22 = a2;
        else
          v22 = *(_QWORD *)v15;
      }
      while (v20 == -1);
      if ((v20 & 1) != 0)
      {
        v17 = v20 + 1;
      }
      else
      {
        v17 = *(_QWORD *)(v15 + 8);
        if (v21 <= a2)
          return 1;
      }
      v18 = __ldxp((unsigned __int128 *)v15);
      if ((unint64_t)v18 ^ v21 | *((_QWORD *)&v18 + 1) ^ v20)
        break;
      if (__stlxp(__PAIR128__(v17, v22), (unsigned __int128 *)v15))
        goto LABEL_36;
      v19 = 1;
LABEL_37:
      __dmb(0xBu);
      if (v19)
        return 1;
    }
    __clrex();
LABEL_36:
    v19 = 0;
    goto LABEL_37;
  }
  return 1;
}

uint64_t pas_segregated_directory_view_did_become_eligible(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  switch(a2 & 7)
  {
    case 0:
    case 1:
      v2 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
      break;
    case 2:
      v2 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16) & 0x7FFFFFFF;
      break;
    case 3:
      v2 = *(_DWORD *)(((8 * *(unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
                     + pas_compact_heap_reservation_base
                     + 16) & 0x7FFFFFFF;
      break;
    case 4:
      v2 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      break;
    default:
      v2 = 0;
      break;
  }
  return pas_segregated_directory_view_did_become_eligible_at_index(a1, v2);
}

uint64_t pas_segregated_directory_view_did_become_empty_at_index(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned __int128 *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  _BOOL8 v26;
  BOOL v27;
  uint64_t v28;

  if (a2)
  {
    v2 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a1 + 4) + 32);
    if ((_DWORD)v2)
      v3 = pas_compact_heap_reservation_base + 8 * v2;
    else
      v3 = 0;
    v4 = *(unsigned int *)(v3 + (((unint64_t)(a2 - 1) >> 5) & 0x7FFFFFFFFFFFFFCLL));
    if ((_DWORD)v4)
      v5 = pas_compact_heap_reservation_base + 8 * v4;
    else
      v5 = 0;
    v6 = (unsigned int *)(v5 + 8 * (((unint64_t)(a2 - 1) >> 5) & 3) + 4);
    while (1)
    {
      v7 = *v6 | (1 << (a2 - 1));
      if (*v6 == v7)
        return 0;
      v8 = __ldxr(v6);
      if (v8 != *v6)
        break;
      if (__stlxr(v7, v6))
        goto LABEL_14;
      v9 = 1;
LABEL_15:
      __dmb(0xBu);
      if (v9)
        goto LABEL_25;
    }
    __clrex();
LABEL_14:
    v9 = 0;
    goto LABEL_15;
  }
  v10 = (unsigned int *)(a1 + 8);
  do
  {
    v11 = *v10 | 2;
    if (v11 == *v10)
      return 0;
    v12 = __ldxr(v10);
    if (v12 == *v10)
    {
      if (!__stlxr(v11, v10))
      {
        v13 = 1;
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    v13 = 0;
LABEL_24:
    __dmb(0xBu);
  }
  while (!v13);
LABEL_25:
  v14 = *(unsigned int *)(a1 + 4);
  v15 = pas_compact_heap_reservation_base + 8 * v14;
  if ((_DWORD)v14)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v17 = (unsigned __int128 *)(v15 + 16);
    v18 = a2 + 1;
    while (1)
    {
      do
      {
        v22 = *(_QWORD *)(v15 + 24);
        v23 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 <= v18)
          v24 = v18;
        else
          v24 = *(_QWORD *)v17;
      }
      while (v22 == -1);
      if ((v22 & 1) != 0)
      {
        v19 = v22 + 1;
      }
      else
      {
        v19 = *(_QWORD *)(v15 + 24);
        if (v23 >= v18)
        {
LABEL_43:
          if (!v23)
            goto LABEL_44;
          return 1;
        }
      }
      v20 = __ldxp(v17);
      if ((unint64_t)v20 ^ v23 | *((_QWORD *)&v20 + 1) ^ v22)
        break;
      if (__stlxp(__PAIR128__(v19, v24), v17))
        goto LABEL_35;
      v21 = 1;
LABEL_36:
      __dmb(0xBu);
      if (v21)
        goto LABEL_43;
    }
    __clrex();
LABEL_35:
    v21 = 0;
    goto LABEL_36;
  }
LABEL_44:
  v25 = *(unsigned __int16 *)(a1 + 12) | (*(unsigned __int8 *)(a1 + 14) << 16);
  if ((*(_WORD *)(a1 + 12) & 0xFF00) != 0x200)
    return 1;
  v26 = (v25 & 0xFF0000) == 0x10000;
  v27 = v25 >= 0x10000;
  v28 = 2;
  if (v27)
    v28 = v26;
  pas_page_sharing_pool_did_create_delta(pas_physical_page_sharing_pool, v28 | a1);
  return 1;
}

uint64_t pas_segregated_directory_view_did_become_empty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  switch(a2 & 7)
  {
    case 0:
    case 1:
      v2 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
      break;
    case 2:
      v2 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16) & 0x7FFFFFFF;
      break;
    case 3:
      v2 = *(_DWORD *)(((8 * *(unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
                     + pas_compact_heap_reservation_base
                     + 16) & 0x7FFFFFFF;
      break;
    case 4:
      v2 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      break;
    default:
      v2 = 0;
      break;
  }
  return pas_segregated_directory_view_did_become_empty_at_index(a1, v2);
}

void pas_segregated_directory_append(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _BOOL8 v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  _OWORD *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  const void *v45;
  const void *v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if ((a3 & 7) <= 2 && *(unsigned __int8 *)(a1 + 13) << 8 == 512)
  {
    v6 = *(unsigned int *)(a1 + 4);
    if (!(_DWORD)v6 || (v7 = pas_compact_heap_reservation_base, (v8 = pas_compact_heap_reservation_base + 8 * v6) == 0))
    {
      v9 = *(unsigned int *)(a1 + 4);
      if (!(_DWORD)v9 || (v8 = pas_compact_heap_reservation_base + 8 * v9) == 0)
      {
        v8 = pas_immortal_heap_allocate_with_alignment(0x40uLL, 0x10uLL, (uint64_t)"pas_segregated_directory_data", 0);
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_QWORD *)(v8 + 32) = 0;
        *(_DWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 52) = 0;
        *(_QWORD *)(v8 + 44) = 0;
        __dmb(0xBu);
        v10 = (v8 - pas_compact_heap_reservation_base) >> 3;
        if (!v8)
          LODWORD(v10) = 0;
        *(_DWORD *)(a1 + 4) = v10;
      }
      v7 = pas_compact_heap_reservation_base;
    }
    v11 = *(_DWORD *)(v8 + 56);
    if (v11 < 8)
      v7 = 0;
    if (((v7 + v11) & 1) == 0)
    {
      v12 = *(unsigned int *)(v8 + 56);
      v13 = pas_compact_heap_reservation_base;
      if (v12 < 8)
        v13 = 0;
      if (!(v13 + v12))
      {
        v14 = (_QWORD *)pas_immortal_heap_allocate(0x18uLL, (uint64_t)"pas_segregated_directory_data/sharing_payload", 0);
        v15 = (unint64_t)v14;
        v14[1] = 0;
        v14[2] = 0;
        *v14 = 0;
        v16 = pas_compact_heap_reservation_base;
        if ((unint64_t)v14 < 8)
          v16 = 0;
        *(_DWORD *)(v8 + 56) = (_DWORD)v14 - v16;
        v17 = *(unsigned __int16 *)(a1 + 12) | (*(unsigned __int8 *)(a1 + 14) << 16);
        v18 = (v17 & 0xFF0000) == 0x10000;
        v19 = v17 >= 0x10000;
        v20 = 2;
        if (v19)
          v20 = v18;
        pas_page_sharing_pool_add_at_index((uint64_t *)pas_physical_page_sharing_pool, v20 | a1, dword_1ECF57BA0);
        __dmb(0xBu);
        v21 = pas_compact_heap_reservation_base;
        if ((v15 | 1) < 8)
          v21 = 0;
        *(_DWORD *)(v8 + 56) = (v15 | 1) - v21;
      }
    }
  }
  if (a2)
  {
    v22 = *(unsigned int *)(a1 + 4);
    if (!(_DWORD)v22
      || (v23 = pas_compact_heap_reservation_base, (v24 = pas_compact_heap_reservation_base + 8 * v22) == 0))
    {
      v25 = *(unsigned int *)(a1 + 4);
      if (!(_DWORD)v25 || (v24 = pas_compact_heap_reservation_base + 8 * v25) == 0)
      {
        v24 = pas_immortal_heap_allocate_with_alignment(0x40uLL, 0x10uLL, (uint64_t)"pas_segregated_directory_data", 0);
        *(_OWORD *)v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_QWORD *)(v24 + 32) = 0;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 52) = 0;
        *(_QWORD *)(v24 + 44) = 0;
        __dmb(0xBu);
        v26 = (v24 - pas_compact_heap_reservation_base) >> 3;
        if (!v24)
          LODWORD(v26) = 0;
        *(_DWORD *)(a1 + 4) = v26;
      }
      v23 = pas_compact_heap_reservation_base;
    }
    v27 = *(unsigned int *)(v24 + 36);
    if (v27 < (unint64_t)(a2 + 31) >> 5)
    {
      v28 = (v27 + 3) >> 2;
      v29 = v27 >> 2;
      v30 = *(unsigned int *)(v24 + 32);
      v31 = (const void *)(v23 + 8 * v30);
      if ((_DWORD)v30)
        v32 = v31;
      else
        v32 = 0;
      v33 = *(unsigned int *)(v24 + 40);
      if (v29 >= v33)
      {
        v34 = 2 * v33 + 2;
        v35 = (char *)pas_immortal_heap_allocate_with_heap_lock_hold_mode(4 * v34, (uint64_t)"pas_segregated_directory_segmented_bitvectors/spine", 0, 1);
        memcpy(v35, v32, 4 * ((v27 + 3) >> 2));
        bzero(&v35[4 * ((v27 + 3) >> 2)], 4 * (v34 - v28));
        __dmb(0xBu);
        v36 = (unint64_t)&v35[-pas_compact_heap_reservation_base] >> 3;
        if (!v35)
          LODWORD(v36) = 0;
        *(_DWORD *)(v24 + 32) = v36;
        __dmb(0xBu);
        *(_DWORD *)(v24 + 40) = v34;
        v32 = v35;
      }
      if ((_DWORD)v29 == (_DWORD)v28)
      {
        v37 = (_OWORD *)pas_immortal_heap_allocate_with_alignment_and_heap_lock_hold_mode(0x20uLL, 4uLL, (uint64_t)"pas_segregated_directory_segmented_bitvectors/segment", 0, 1);
        *v37 = 0u;
        v37[1] = 0u;
        __dmb(0xBu);
        v38 = ((unint64_t)v37 - pas_compact_heap_reservation_base) >> 3;
        if (!v37)
          LODWORD(v38) = 0;
        *((_DWORD *)v32 + v29) = v38;
      }
      else
      {
        LODWORD(v38) = *((_DWORD *)v32 + v29);
      }
      if ((_DWORD)v38)
        v40 = pas_compact_heap_reservation_base + 8 * v38;
      else
        v40 = 0;
      *(_QWORD *)(v40 + 8 * (v27 & 3)) = 0;
      __dmb(0xBu);
      ++*(_DWORD *)(v24 + 36);
      v23 = pas_compact_heap_reservation_base;
    }
    if (a3 >= 8)
      v41 = v23;
    else
      v41 = 0;
    v42 = a3 - v41;
    v44 = *(unsigned int *)(v24 + 44);
    v43 = *(_DWORD *)(v24 + 48);
    v45 = (const void *)(v23 + 8 * v44);
    if ((_DWORD)v44)
      v46 = v45;
    else
      v46 = 0;
    v47 = *(_DWORD *)(v24 + 52);
    if (v43 >= v47)
    {
      v48 = 2 * v47 + 2;
      v49 = (char *)pas_immortal_heap_allocate_with_heap_lock_hold_mode(4 * v48, (uint64_t)"pas_segregated_directory_view_vector/array", 0, 1);
      memcpy(v49, v46, 4 * *(unsigned int *)(v24 + 48));
      bzero(&v49[4 * *(unsigned int *)(v24 + 48)], 4 * (v48 - *(unsigned int *)(v24 + 48)));
      __dmb(0xBu);
      v50 = (unint64_t)&v49[-pas_compact_heap_reservation_base] >> 3;
      if (!v49)
        LODWORD(v50) = 0;
      *(_DWORD *)(v24 + 44) = v50;
      __dmb(0xBu);
      *(_DWORD *)(v24 + 52) = v48;
      v43 = *(_DWORD *)(v24 + 48);
      v46 = v49;
    }
    *((_DWORD *)v46 + v43) = v42;
    __dmb(0xBu);
    ++*(_DWORD *)(v24 + 48);
  }
  else
  {
    v39 = pas_compact_heap_reservation_base;
    if (a3 < 8)
      v39 = 0;
    *(_DWORD *)a1 = a3 - v39;
  }
}

void pas_segregated_directory_compute_summary(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t v40;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0;
  v3 = *a1;
  if (v3 >= 8)
    v4 = pas_compact_heap_reservation_base;
  else
    v4 = 0;
  if (v4 + v3)
  {
    v6 = a1[1];
    if (!(_DWORD)v6 || (v7 = pas_compact_heap_reservation_base + 8 * v6) == 0 || *(_DWORD *)(v7 + 48) != -1)
    {
      v8 = v4 + v3;
      v9 = v8 & 7;
      if (v9 < 2)
      {
        pas_segregated_exclusive_view_compute_summary(v8 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v35);
      }
      else if (v9 == 2)
      {
        pas_segregated_shared_view_compute_summary();
      }
      else if (v9 == 4)
      {
        pas_segregated_partial_view_compute_summary(v8 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v35);
      }
      else
      {
        v40 = 0;
        v38 = 0uLL;
        v39 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v35 = 0uLL;
      }
      v10 = 0;
      v11 = v35;
      v12 = v36;
      v13 = v37;
      v14 = v38;
      v15 = v39;
      v16 = v40;
      *(int64x2_t *)a2 = v35;
      *(int64x2_t *)(a2 + 16) = v12;
      *(int64x2_t *)(a2 + 32) = v13;
      *(int64x2_t *)(a2 + 48) = v14;
      *(int64x2_t *)(a2 + 64) = v15;
      *(_QWORD *)(a2 + 80) = v16;
      while (1)
      {
        v18 = 0;
        v19 = *a1;
        v20 = pas_compact_heap_reservation_base;
        if (v19 >= 8)
          v21 = pas_compact_heap_reservation_base;
        else
          v21 = 0;
        if (!(v21 + v19))
          goto LABEL_30;
        v22 = a1[1];
        v23 = pas_compact_heap_reservation_base + 8 * v22;
        if (!(_DWORD)v22 || v23 == 0)
          break;
        if (v10 + 1 >= (unint64_t)(*(_DWORD *)(v23 + 48) + 1))
          return;
LABEL_31:
        v25 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * a1[1] + 44);
        if ((_DWORD)v25)
          v26 = pas_compact_heap_reservation_base + 8 * v25;
        else
          v26 = 0;
        v27 = *(unsigned int *)(v26 + 4 * v10);
        if (v27 < 8)
          v20 = 0;
        v28 = v20 + v27;
        v29 = v28 & 7;
        if (v29 < 2)
        {
          v33 = v12;
          v34 = v11;
          v31 = v14;
          v32 = v13;
          v30 = v15;
          pas_segregated_exclusive_view_compute_summary(v28 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v35);
LABEL_18:
          v15 = v30;
          v14 = v31;
          v13 = v32;
          v12 = v33;
          v11 = v34;
          goto LABEL_19;
        }
        if (v29 == 2)
        {
          v33 = v12;
          v34 = v11;
          v31 = v14;
          v32 = v13;
          v30 = v15;
          pas_segregated_shared_view_compute_summary();
          goto LABEL_18;
        }
        if (v29 == 4)
        {
          v33 = v12;
          v34 = v11;
          v31 = v14;
          v32 = v13;
          v30 = v15;
          pas_segregated_partial_view_compute_summary(v28 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v35);
          goto LABEL_18;
        }
        v40 = 0;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v35 = 0u;
LABEL_19:
        v11 = vaddq_s64(v35, v11);
        v12 = vaddq_s64(v36, v12);
        v17 = v38;
        v13 = vaddq_s64(v37, v13);
        v16 += v40;
        *(int64x2_t *)a2 = v11;
        *(int64x2_t *)(a2 + 16) = v12;
        v14 = vaddq_s64(v17, v14);
        *(int64x2_t *)(a2 + 32) = v13;
        *(int64x2_t *)(a2 + 48) = v14;
        v15 = vaddq_s64(v39, v15);
        *(int64x2_t *)(a2 + 64) = v15;
        *(_QWORD *)(a2 + 80) = v16;
        ++v10;
      }
      v18 = 1;
LABEL_30:
      if (v10 + 1 >= v18)
        return;
      goto LABEL_31;
    }
  }
}

void pas_segregated_exclusive_view_compute_summary(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v4;
  unint64_t StatusReg;
  unsigned int v6;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[4];
  __int128 v34;
  uint64_t v35;

  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = (os_unfair_lock_s *)(a1 + 20);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v4->_os_unfair_lock_opaque))
  {
    if (!__stxr(v6, &v4->_os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
LABEL_6:
  v8 = ((8 * *(unsigned __int16 *)(a1 + 8)) | ((unint64_t)*(unsigned __int8 *)(a1 + 10) << 19))
     + pas_compact_heap_reservation_base;
  if (*(_BYTE *)(a1 + 11))
  {
    v27 = StatusReg;
    v9 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v8 + 12));
    v10 = *(_BYTE *)(v9 + 28);
    v11 = *(_QWORD *)(v9 + 32);
    v12 = *(uint64_t (**)(_QWORD))(v9 + 56);
    v34 = 0u;
    v35 = 0;
    memset(v33, 0, sizeof(v33));
    v13 = *(unsigned int *)(v8 + 40);
    if ((_DWORD)v13)
      v14 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v13);
    else
      v14 = 0;
    v15 = (unsigned __int8 *)v12(*(_QWORD *)a1);
    pas_page_base_compute_committed_when_owned(v15, (uint64_t)v33);
    v16 = *(_DWORD *)(v8 + 24);
    v18 = *v14;
    v17 = v14[1];
    pas_page_base_add_free_range(v15, v33, 0, v18, 1);
    pas_page_base_add_free_range(v15, v33, v17, v11, 1);
    if (v18 < v17)
    {
      v19 = v16 & 0x7FFFFFF;
      do
      {
        while (((*(_DWORD *)&v15[((v18 >> v10 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 44] >> (v18 >> v10)) & 1) == 0)
        {
          pas_page_base_add_free_range(v15, v33, v18, v18 + v19, 0);
          v18 += v19;
          if (v18 >= v17)
            goto LABEL_15;
        }
        *((_QWORD *)&v33[0] + 1) += v19;
        v18 += v19;
      }
      while (v18 < v17);
    }
LABEL_15:
    if (v15[1])
      v35 += v11;
    v20 = *(_QWORD *)&v33[0];
    v21 = *(_QWORD *)&v33[2];
    v32 = *((_QWORD *)&v33[1] + 1);
    v30 = *(_OWORD *)((char *)&v33[2] + 8);
    v31 = *(_OWORD *)((char *)v33 + 8);
    v22 = *((_QWORD *)&v33[3] + 1);
    v28 = v34;
    v29 = v35;
    StatusReg = v27;
  }
  else
  {
    v23 = *(unsigned int *)(v8 + 40);
    if ((_DWORD)v23)
      v24 = (_DWORD *)(pas_compact_heap_reservation_base + 8 * v23);
    else
      v24 = 0;
    v21 = *((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v8 + 12)) + 4);
    v32 = 0;
    v31 = 0uLL;
    v30 = 0uLL;
    v29 = 0;
    v28 = 0uLL;
    v22 = (v24[1] - *v24);
    v20 = v22;
  }
  *(_QWORD *)a2 = v20;
  *(_OWORD *)(a2 + 8) = v31;
  *(_QWORD *)(a2 + 24) = v32;
  *(_QWORD *)(a2 + 32) = v21;
  *(_OWORD *)(a2 + 40) = v30;
  *(_QWORD *)(a2 + 56) = v22;
  *(_OWORD *)(a2 + 64) = v28;
  *(_QWORD *)(a2 + 80) = v29;
  v25 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v26 = __ldxr(&v4->_os_unfair_lock_opaque);
    if (v26 != v25)
      break;
    if (!__stlxr(0, &v4->_os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(v4);
}

BOOL pas_segregated_heap_index_is_greater_equal_cached_index_and_cached_index_is_set(uint64_t a1, unsigned int *a2, unint64_t a3, _BYTE *a4)
{
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a2)
  {
    v5 = *a2;
    if ((_DWORD)v5 == -1)
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(*(_QWORD *)a1 + 2) & 2) != 0)
      v8 = (*(uint64_t (**)(_QWORD))(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F] + 24))(*(_QWORD *)(a1 + 64))
         - 1;
    else
      v8 = 0;
    v9 = a4[84];
    if (a4[504])
      v10 = a4[532];
    else
      v10 = -1;
    if (v10 < v9)
      LOBYTE(v9) = v10;
    if (a4[56])
      v11 = v9;
    else
      v11 = v10;
    v5 = (unint64_t)((1 << v11) + v8) >> v11;
  }
  return v5 <= a3;
}

uint64_t pas_segregated_heap_size_directory_for_index_slow(uint64_t a1, unint64_t a2, unsigned int *a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  if (a3)
  {
    v6 = *a3;
    if ((_DWORD)v6 == -1 || v6 != a2)
      goto LABEL_21;
LABEL_17:
    v12 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v12)
    {
      result = pas_compact_heap_reservation_base + 8 * v12;
      if (result)
      {
        if (*(_BYTE *)(result + 15))
          return result;
      }
    }
    goto LABEL_21;
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 2) & 2) != 0)
    v8 = (*(uint64_t (**)(_QWORD))(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F] + 24))(*(_QWORD *)(a1 + 64))
       - 1;
  else
    v8 = 0;
  v9 = a4[84];
  if (a4[504])
    v10 = a4[532];
  else
    v10 = -1;
  if (v10 < v9)
    LOBYTE(v9) = v10;
  if (a4[56])
    v11 = v9;
  else
    v11 = v10;
  if ((unint64_t)((1 << v11) + v8) >> v11 == a2)
    goto LABEL_17;
LABEL_21:
  if (*(unsigned int *)(a1 + 36) > a2)
    return 0;
  v14 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v14)
    return 0;
  result = 0;
  if (8 * v14 != -pas_compact_heap_reservation_base)
  {
    v15 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v15)
      v16 = pas_compact_heap_reservation_base + 8 * v15;
    else
      v16 = 0;
    v18 = *(unsigned int *)(v16 + 8);
    v17 = *(unsigned int *)(v16 + 12);
    v19 = pas_compact_heap_reservation_base + 8 * v18;
    if (!(_DWORD)v18)
      v19 = 0;
    if ((_DWORD)v17)
    {
      v20 = 0;
      do
      {
        v21 = (v20 + v17) >> 1;
        v22 = *(unsigned int *)(v19 + 16 * v21 + 8);
        if (!(_DWORD)v22)
          break;
        if (v22 <= a2)
        {
          if (*(unsigned int *)(v19 + 16 * v21 + 12) >= a2)
          {
            v23 = *(unsigned int *)(v19 + 16 * v21);
            if ((_DWORD)v23)
              return pas_compact_heap_reservation_base + 8 * v23;
            else
              return 0;
          }
          v20 = v21 + 1;
          v21 = v17;
        }
        v17 = v21;
      }
      while (v21 > v20);
    }
    return 0;
  }
  return result;
}

uint64_t pas_segregated_heap_medium_directory_tuple_for_index(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v4 = *(unsigned int *)(a1 + 28);
  v5 = pas_compact_heap_reservation_base + 8 * v4;
  if ((_DWORD)v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  if (a4 == 1)
  {
    v8 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v8)
      v9 = pas_compact_heap_reservation_base + 8 * v8;
    else
      v9 = 0;
    v11 = *(unsigned int *)(v9 + 8);
    v10 = *(_DWORD *)(v9 + 12);
    v12 = pas_compact_heap_reservation_base + 8 * v11;
    if (!(_DWORD)v11)
      v12 = 0;
    v13 = 0;
    if (v10)
    {
      v14 = 0;
      while (1)
      {
        v15 = (v14 + v10) >> 1;
        v7 = v12 + 16 * v15;
        v16 = *(unsigned int *)(v7 + 8);
        if (!(_DWORD)v16)
          return 0;
        if (v16 > a2)
        {
          v10 = (v14 + v10) >> 1;
          v13 = v12 + 16 * v15;
          if (v15 <= v14)
            goto LABEL_20;
        }
        else
        {
          if (*(unsigned int *)(v12 + 16 * v15 + 12) >= a2)
            return v7;
          v14 = v15 + 1;
          if (v10 <= (int)v15 + 1)
            goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_20:
      if (a3 == 1)
        return v13;
      else
        return 0;
    }
  }
  if ((*(_QWORD *)v5 & 1) == 0)
  {
    v17 = *(_DWORD *)(v5 + 12);
    v18 = *(unsigned int *)(v5 + 8);
    v19 = pas_compact_heap_reservation_base + 8 * v18;
    if (!(_DWORD)v18)
      v19 = 0;
    v20 = 0;
    if (v17)
    {
      v21 = 0;
      v22 = v19;
      while (1)
      {
        v23 = (v21 + v17) >> 1;
        v7 = v19 + 16 * v23;
        v24 = *(unsigned int *)(v7 + 8);
        if (!(_DWORD)v24)
          return 0;
        v25 = *(unsigned int *)(v19 + 16 * v23 + 12);
        v22 += (v25 + v24);
        if (v24 > a2)
        {
          v17 = (v21 + v17) >> 1;
          v20 = v19 + 16 * v23;
          if (v23 <= v21)
            goto LABEL_34;
        }
        else
        {
          if (v25 >= a2)
            return v7;
          v21 = v23 + 1;
          if (v17 <= (int)v23 + 1)
            goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_34:
      if (a3 == 1)
        return v20;
      else
        return 0;
    }
  }
  return medium_directory_tuple_for_index_with_lock(a1, a2, a3);
}

uint64_t medium_directory_tuple_for_index_with_lock(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t StatusReg;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v7, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_6:
  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9)
    v10 = pas_compact_heap_reservation_base + 8 * v9;
  else
    v10 = 0;
  v12 = *(unsigned int *)(v10 + 8);
  v11 = *(_DWORD *)(v10 + 12);
  v13 = pas_compact_heap_reservation_base + 8 * v12;
  if (!(_DWORD)v12)
    v13 = 0;
  v14 = 0;
  if (v11)
  {
    v15 = 0;
    while (1)
    {
      v16 = (v15 + v11) >> 1;
      v17 = v13 + 16 * v16;
      v18 = *(unsigned int *)(v17 + 8);
      if (!(_DWORD)v18)
        break;
      if (v18 > a2)
      {
        v11 = (v15 + v11) >> 1;
        v14 = v13 + 16 * v16;
        if (v16 <= v15)
          goto LABEL_18;
      }
      else
      {
        if (*(unsigned int *)(v13 + 16 * v16 + 12) >= a2)
          goto LABEL_22;
        v15 = v16 + 1;
        if (v11 <= (int)v16 + 1)
          goto LABEL_18;
      }
    }
    v17 = 0;
  }
  else
  {
LABEL_18:
    if (a3 == 1)
      v17 = v14;
    else
      v17 = 0;
  }
LABEL_22:
  v19 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v20 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v20 != v19)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v17;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v17;
}

uint64_t pas_segregated_heap_ensure_allocator_index(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int *a6)
{
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  _DWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  rematerialize_size_lookup_if_necessary(a1, (_BYTE *)a5, a6);
  v12 = **(_DWORD **)a1;
  if ((v12 & 0x20000) != 0)
    v13 = a1;
  else
    v13 = 0;
  v14 = *(unsigned __int8 *)(a5 + 56);
  v15 = *(unsigned __int8 *)(a5 + 84);
  v16 = *(unsigned __int8 *)(a5 + 504);
  v17 = *(unsigned __int8 *)(a5 + 532);
  if (*(_BYTE *)(a5 + 504))
    v18 = *(unsigned __int8 *)(a5 + 532);
  else
    v18 = -1;
  if (v18 >= v15)
    v19 = *(_BYTE *)(a5 + 84);
  else
    v19 = v18;
  if (*(_BYTE *)(a5 + 56))
    LOBYTE(v18) = v19;
  v20 = (unint64_t)(a3 + (1 << v18) - 1) >> v18;
  v21 = *(unsigned int *)(a2 + 36);
  if (a6)
  {
    v22 = *a6;
    if ((_DWORD)v22 == -1)
      goto LABEL_54;
    if (v22 != v20 || v13 == 0)
      goto LABEL_54;
  }
  else
  {
    if ((v12 & 0x20000) != 0)
    {
      v24 = (*(uint64_t (**)(_QWORD))(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F] + 24))(*(_QWORD *)(a1 + 64))
          - 1;
      v14 = *(unsigned __int8 *)(a5 + 56);
      v15 = *(unsigned __int8 *)(a5 + 84);
      v16 = *(unsigned __int8 *)(a5 + 504);
      v17 = *(unsigned __int8 *)(a5 + 532);
    }
    else
    {
      v24 = 0;
    }
    if (!v16)
      v17 = -1;
    if (v17 < v15)
      LOBYTE(v15) = v17;
    if (!v14)
      LOBYTE(v15) = v17;
    if ((unint64_t)((1 << v15) + v24) >> v15 != v20 || v13 == 0)
      goto LABEL_54;
  }
  v26 = *(_QWORD *)(v13 + 72);
  if (v26)
  {
    v27 = 0;
    *(_DWORD *)(v26 + 16) = v21;
    v28 = *(unsigned int *)(a1 + 36);
    v29 = v28;
    if (!(_DWORD)v28)
      goto LABEL_35;
    goto LABEL_55;
  }
LABEL_54:
  v27 = 1;
  v28 = *(unsigned int *)(a1 + 36);
  v29 = v28;
  if (!(_DWORD)v28)
  {
LABEL_35:
    v30 = *(unsigned __int8 *)(a5 + 84);
    v31 = *(unsigned __int8 *)(a5 + 532);
    if (!v16)
      v31 = -1;
    if (v31 < v30)
      LOBYTE(v30) = v31;
    if (!v14)
      LOBYTE(v30) = v31;
    if (v20 >= ((unint64_t)(*(_QWORD *)(a5 + 984) + (1 << v30) - 1) >> v30) + 1)
      goto LABEL_42;
    goto LABEL_56;
  }
LABEL_55:
  if (v20 >= v29)
  {
LABEL_42:
    v32 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v32)
      v33 = pas_compact_heap_reservation_base + 8 * v32;
    else
      v33 = 0;
    v35 = *(unsigned int *)(v33 + 8);
    v34 = *(unsigned int *)(v33 + 12);
    v36 = pas_compact_heap_reservation_base + 8 * v35;
    if (!(_DWORD)v35)
      v36 = 0;
    if ((_DWORD)v34)
    {
      v37 = 0;
      do
      {
        v38 = (v37 + v34) >> 1;
        v39 = *(unsigned int *)(v36 + 16 * v38 + 8);
        if (!(_DWORD)v39)
          break;
        if (v20 >= v39)
        {
          v40 = v36 + 16 * v38;
          if (v20 <= *(unsigned int *)(v40 + 12))
            goto LABEL_72;
          v37 = v38 + 1;
          v38 = v34;
        }
        v34 = v38;
      }
      while (v38 > v37);
    }
    v40 = 0;
LABEL_72:
    v50 = (_DWORD *)(v40 + 4);
    goto LABEL_84;
  }
LABEL_56:
  if (a4 == 1)
    v27 = 1;
  if ((v27 & 1) != 0)
  {
    if (!(_DWORD)v28)
    {
      v41 = *(unsigned __int8 *)(a5 + 84);
      if (v16)
        v42 = *(unsigned __int8 *)(a5 + 532);
      else
        v42 = -1;
      if (v42 < v41)
        LOBYTE(v41) = v42;
      if (v14)
        v43 = v41;
      else
        v43 = v42;
      v44 = (unint64_t)(*(_QWORD *)(a5 + 984) + (1 << v43) - 1) >> v43;
      v45 = v44 + 1;
      v46 = pas_large_expendable_memory_allocate(4 * (v44 + 1), 4, (uint64_t)"pas_segregated_heap/index_to_size_directory");
      v47 = pas_large_expendable_memory_allocate(4 * (v44 + 1), 4, (uint64_t)"pas_segregated_heap/index_to_allocator_index");
      if (v44 == -1)
        goto LABEL_83;
      if (v45 >= 0x10)
      {
        v49 = 0;
        v48 = 0;
        if ((_DWORD)v44 != -1 && !HIDWORD(v44) && (unint64_t)(v47 - v46) >= 0x20)
        {
          v48 = v45 & 0xFFFFFFFFFFFFFFF8;
          v49 = v45 & 0xFFFFFFF8;
          v51 = (_OWORD *)(v46 + 16);
          v52 = (_OWORD *)(v47 + 16);
          v53 = v45 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            *(v51 - 1) = 0uLL;
            *v51 = 0uLL;
            v51 += 2;
            *(v52 - 1) = 0uLL;
            *v52 = 0uLL;
            v52 += 2;
            v53 -= 8;
          }
          while (v53);
          if (v45 == v48)
            goto LABEL_83;
        }
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
      v54 = v49 + 1;
      do
      {
        v55 = 4 * v48;
        *(_DWORD *)(v46 + v55) = 0;
        *(_DWORD *)(v47 + v55) = 0;
        v48 = v54++;
      }
      while (v45 > v48);
LABEL_83:
      __dmb(0xBu);
      *(_DWORD *)(a1 + 36) = v45;
      *(_QWORD *)(a1 + 8) = v47;
      *(_QWORD *)(a1 + 16) = v46;
      v50 = (_DWORD *)(v47 + 4 * v20);
      goto LABEL_84;
    }
LABEL_74:
    v50 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v20);
LABEL_84:
    *v50 = v21;
    return v21;
  }
  if ((_DWORD)v28)
    goto LABEL_74;
  return v21;
}

void rematerialize_size_lookup_if_necessary(uint64_t a1, _BYTE *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if ((*(_BYTE *)(*(_QWORD *)a1 + 2) & 1) == 0)
  {
    v6 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = 4 * v6;
      if (v7)
      {
        v9 = pas_large_expendable_memory_commit_if_necessary(v7, 4 * v6);
        v10 = *(_QWORD *)(a1 + 16);
        if (!v10)
        {
LABEL_6:
          v11 = v9 != 0;
          goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
        v10 = *(_QWORD *)(a1 + 16);
        if (!v10)
          goto LABEL_6;
      }
      v9 |= pas_large_expendable_memory_commit_if_necessary(v10, v8);
      goto LABEL_6;
    }
  }
  v11 = 0;
LABEL_8:
  v12 = *(unsigned int *)(a1 + 28);
  v13 = pas_compact_heap_reservation_base + 8 * v12;
  if ((_DWORD)v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (v14 || (v15 = *(unsigned int *)(v13 + 12), !(_DWORD)v15))
  {
    if (!v11)
      return;
    goto LABEL_19;
  }
  v16 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v16)
    v17 = pas_compact_heap_reservation_base + 8 * v16;
  else
    v17 = 0;
  if (((v11 | pas_compact_expendable_memory_commit_if_necessary(v17, 16 * v15)) & 1) != 0)
  {
LABEL_19:
    ++pas_segregated_heap_num_size_lookup_rematerializations;
    v18 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v18 && (v19 = (_QWORD *)(pas_compact_heap_reservation_base + 8 * v18)) != 0)
    {
      ++*v19;
      __dmb(0xBu);
      recompute_size_lookup(a1, a2, a3, a1);
      __dmb(0xBu);
      ++*v19;
    }
    else
    {
      recompute_size_lookup(a1, a2, a3, a1);
    }
  }
}

uint64_t pas_segregated_heap_ensure_size_directory_for_size(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, unsigned int *a6, int a7)
{
  unint64_t v13;
  int v14;
  void (*v15)(void);
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int *v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  _OWORD *v64;
  _OWORD *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char v125;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  double v149;
  BOOL v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  double v156;
  unint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  unsigned int v162;
  double v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  double v167;
  unint64_t v168;
  int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  double v174;
  unsigned int v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  double v180;
  uint64_t v181;
  double v182;
  double v183;
  unint64_t v184;
  int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  double v190;
  unint64_t v191;
  unsigned int *v192;
  _DWORD *v193;
  char v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  unsigned int v207;
  int v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  BOOL v216;
  _DWORD *v217;
  int v218;
  _DWORD *v219;
  int v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _DWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  int v237;
  unint64_t v238;
  unint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v249;
  unint64_t v250;
  char v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  unsigned int v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _BYTE *v269;
  unsigned int v270;
  unsigned int v271;
  _QWORD *v272;
  uint64_t v273;
  void *v274;
  unint64_t v275;
  _DWORD *v276;
  unint64_t v277;
  unsigned int *v278;
  unint64_t v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _DWORD *v296;
  unint64_t v297;
  unsigned int *v298;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v13 = *(unsigned int *)(a5 + 8);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v14 = pas_heap_config_kind_is_active_bitvector[v13 >> 5];
  if ((v14 & (1 << v13)) == 0)
  {
    pas_heap_config_kind_is_active_bitvector[v13 >> 5] = v14 | (1 << v13);
    v15 = *(void (**)(void))(a5 + 16);
    if (v15)
      v15();
  }
  rematerialize_size_lookup_if_necessary(a1, (_BYTE *)a5, a6);
  v16 = **(_DWORD **)a1;
  v17 = 1;
  if (a1 && (v16 & 0x20000) != 0)
    v17 = (*(uint64_t (**)(_QWORD))(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F] + 32))(*(_QWORD *)(a1 + 64));
  v18 = *(unsigned __int8 *)(a5 + 56);
  v19 = *(unsigned __int8 *)(a5 + 84);
  v20 = *(unsigned __int8 *)(a5 + 504);
  v21 = *(unsigned __int8 *)(a5 + 532);
  if (*(_BYTE *)(a5 + 504))
    v22 = *(unsigned __int8 *)(a5 + 532);
  else
    v22 = -1;
  if (v22 >= v19)
    v23 = *(_BYTE *)(a5 + 84);
  else
    v23 = v22;
  if (*(_BYTE *)(a5 + 56))
    LOBYTE(v22) = v23;
  v24 = a2 + (1 << v22) - 1;
  v25 = v24 >> v22;
  v26 = v24 >> v22 << v22;
  if (v26 < a2)
    return 0;
  v28 = (_BYTE *)(a5 + 280);
  v298 = a6;
  if (!pas_medium_segregated_page_config_variant_is_enabled_override)
  {
    if (pas_small_segregated_page_config_variant_is_enabled_override)
    {
      if (*(_BYTE *)(a5 + 56))
      {
        if (*(_DWORD *)(*(_QWORD *)a1 + 16))
        {
          v29 = a5 + 56;
          if (!*(_DWORD *)(a5 + 152))
            goto LABEL_40;
        }
      }
      if (*v28)
      {
        if (*(_DWORD *)(*(_QWORD *)a1 + 16))
        {
          v29 = a5 + 280;
          if (!*(_DWORD *)(a5 + 376))
            goto LABEL_40;
        }
      }
    }
    goto LABEL_41;
  }
  if (!pas_small_segregated_page_config_variant_is_enabled_override)
  {
    if (*(_BYTE *)(a5 + 56))
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 16))
      {
        v29 = a5 + 56;
        if (*(_DWORD *)(a5 + 152) == 1)
          goto LABEL_40;
      }
    }
    if (*v28)
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 16))
      {
        v29 = a5 + 280;
        if (*(_DWORD *)(a5 + 376) == 1)
          goto LABEL_40;
      }
    }
LABEL_41:
    v31 = *(_DWORD *)(a5 + 600);
    if (pas_marge_bitfit_page_config_variant_is_enabled_override)
    {
      if (*(_BYTE *)(a5 + 504) && *(_DWORD *)(*(_QWORD *)a1 + 20))
      {
        v32 = a5 + 504;
        if (v31)
        {
          if (v31 == 2)
            goto LABEL_85;
          if (v31 == 1)
          {
            v32 = a5 + 504;
            if (pas_medium_bitfit_page_config_variant_is_enabled_override)
              goto LABEL_85;
          }
        }
        else if (pas_small_bitfit_page_config_variant_is_enabled_override)
        {
          goto LABEL_85;
        }
      }
      if (*(_BYTE *)(a5 + 664) && *(_DWORD *)(*(_QWORD *)a1 + 20))
      {
        v33 = *(_DWORD *)(a5 + 760);
        if (v33)
        {
          if (v33 == 2)
          {
            v30 = *(_BYTE *)(a5 + 692);
            goto LABEL_86;
          }
          if (v33 == 1)
          {
            v32 = a5 + 664;
            if (pas_medium_bitfit_page_config_variant_is_enabled_override)
              goto LABEL_85;
          }
        }
        else
        {
          v32 = a5 + 664;
          if (pas_small_bitfit_page_config_variant_is_enabled_override)
            goto LABEL_85;
        }
      }
      if (!*(_BYTE *)(a5 + 824) || !*(_DWORD *)(*(_QWORD *)a1 + 20))
        goto LABEL_83;
      v35 = *(_DWORD *)(a5 + 920);
      if (v35)
      {
        if (v35 == 2)
        {
          v30 = *(_BYTE *)(a5 + 852);
          goto LABEL_86;
        }
LABEL_81:
        if (v35 != 1)
          goto LABEL_83;
        v32 = a5 + 824;
        if (!pas_medium_bitfit_page_config_variant_is_enabled_override)
          goto LABEL_83;
        goto LABEL_85;
      }
    }
    else
    {
      if (*(_BYTE *)(a5 + 504) && *(_DWORD *)(*(_QWORD *)a1 + 20))
      {
        if (v31)
        {
          if (v31 == 1)
          {
            v32 = a5 + 504;
            if (pas_medium_bitfit_page_config_variant_is_enabled_override)
              goto LABEL_85;
          }
        }
        else
        {
          v32 = a5 + 504;
          if (pas_small_bitfit_page_config_variant_is_enabled_override)
            goto LABEL_85;
        }
      }
      if (*(_BYTE *)(a5 + 664) && *(_DWORD *)(*(_QWORD *)a1 + 20))
      {
        v34 = *(_DWORD *)(a5 + 760);
        if (v34)
        {
          if (v34 == 1)
          {
            v32 = a5 + 664;
            if (pas_medium_bitfit_page_config_variant_is_enabled_override)
              goto LABEL_85;
          }
        }
        else
        {
          v32 = a5 + 664;
          if (pas_small_bitfit_page_config_variant_is_enabled_override)
            goto LABEL_85;
        }
      }
      if (!*(_BYTE *)(a5 + 824) || !*(_DWORD *)(*(_QWORD *)a1 + 20))
        goto LABEL_83;
      v35 = *(_DWORD *)(a5 + 920);
      if (v35)
        goto LABEL_81;
    }
    v32 = a5 + 824;
    if (!pas_small_bitfit_page_config_variant_is_enabled_override)
    {
LABEL_83:
      v36 = *(_QWORD *)(a5 + 48);
      goto LABEL_87;
    }
LABEL_85:
    v30 = *(_BYTE *)(v32 + 28);
    goto LABEL_86;
  }
  if (!*(_BYTE *)(a5 + 56) || !*(_DWORD *)(*(_QWORD *)a1 + 16) || (v29 = a5 + 56, *(_DWORD *)(a5 + 152) > 1u))
  {
    if (!*v28)
      goto LABEL_41;
    if (!*(_DWORD *)(*(_QWORD *)a1 + 16))
      goto LABEL_41;
    v29 = a5 + 280;
    if (*(_DWORD *)(a5 + 376) >= 2u)
      goto LABEL_41;
  }
LABEL_40:
  v30 = *(_BYTE *)(v29 + 28);
LABEL_86:
  v36 = 1 << v30;
LABEL_87:
  v27 = 0;
  if (v36 > v26)
    v26 = v36;
  v37 = (v36 + v26 - 1) & -(uint64_t)v36;
  if (v36 <= a3)
    v38 = a3;
  else
    v38 = v36;
  if (v38 <= v17)
    v39 = (v38 + v37 - 1) & -(uint64_t)v38;
  else
    v39 = v37;
  if ((v39 | v38) >> 32)
    return v27;
  v40 = *(int **)a1;
  if (pas_medium_segregated_page_config_variant_is_enabled_override)
  {
    if (pas_small_segregated_page_config_variant_is_enabled_override)
    {
      if (!*v28 || (v41 = v40[4]) == 0 || (v42 = a5 + 280, *(_DWORD *)(a5 + 376) > 1u))
      {
        v43 = 0;
        if (!*(_BYTE *)(a5 + 56))
          goto LABEL_123;
        v41 = v40[4];
        if (!v41)
          goto LABEL_123;
        v42 = a5 + 56;
        if (*(_DWORD *)(a5 + 152) >= 2u)
          goto LABEL_123;
      }
    }
    else if (!*v28 || (v41 = v40[4]) == 0 || (v42 = a5 + 280, *(_DWORD *)(a5 + 376) != 1))
    {
      v43 = 0;
      if (!*(_BYTE *)(a5 + 56))
        goto LABEL_123;
      v41 = v40[4];
      if (!v41)
        goto LABEL_123;
      v42 = a5 + 56;
      if (*(_DWORD *)(a5 + 152) != 1)
        goto LABEL_123;
    }
    goto LABEL_119;
  }
  if (!pas_small_segregated_page_config_variant_is_enabled_override)
  {
    v43 = 0;
    goto LABEL_123;
  }
  if (*v28 && (v41 = v40[4]) != 0 && (v42 = a5 + 280, !*(_DWORD *)(a5 + 376))
    || (v43 = 0, *(_BYTE *)(a5 + 56)) && (v41 = v40[4]) != 0 && (v42 = a5 + 56, !*(_DWORD *)(a5 + 152)))
  {
LABEL_119:
    v43 = (-1 << *(_BYTE *)(v42 + 28)) & *(_QWORD *)(v42 + 48);
    if (v43 >= v41)
      v43 = v41;
  }
LABEL_123:
  v44 = a5 + 824;
  v45 = (_BYTE *)(a5 + 664);
  if (!pas_marge_bitfit_page_config_variant_is_enabled_override)
  {
    if (!pas_medium_bitfit_page_config_variant_is_enabled_override)
    {
      if (*(_BYTE *)(a5 + 824))
      {
        if (pas_small_bitfit_page_config_variant_is_enabled_override)
        {
          v46 = v40[5];
          if (v46)
          {
            if (!*(_DWORD *)(a5 + 920))
              goto LABEL_199;
          }
        }
      }
      if (*v45)
      {
        if (pas_small_bitfit_page_config_variant_is_enabled_override)
        {
          v46 = v40[5];
          if (v46)
          {
            v44 = a5 + 664;
            if (!*(_DWORD *)(a5 + 760))
              goto LABEL_199;
          }
        }
      }
      v47 = 0;
      if (*(_BYTE *)(a5 + 504))
      {
        if (pas_small_bitfit_page_config_variant_is_enabled_override)
        {
          v46 = v40[5];
          if (v46)
          {
            v44 = a5 + 504;
            if (!*(_DWORD *)(a5 + 600))
              goto LABEL_199;
          }
        }
      }
      goto LABEL_202;
    }
    if (*(_BYTE *)(a5 + 824))
    {
      v46 = v40[5];
      if (v46)
      {
        v48 = *(_DWORD *)(a5 + 920);
        if (v48 == 1 || !v48 && pas_small_bitfit_page_config_variant_is_enabled_override)
          goto LABEL_199;
      }
    }
    if (*(_BYTE *)(a5 + 664))
    {
      v46 = v40[5];
      if (v46)
      {
        v49 = *(_DWORD *)(a5 + 760);
        if (v49 == 1)
        {
          v44 = a5 + 664;
          goto LABEL_199;
        }
        if (!v49)
        {
          v44 = a5 + 664;
          if (pas_small_bitfit_page_config_variant_is_enabled_override)
            goto LABEL_199;
        }
      }
    }
    if (*(_BYTE *)(a5 + 504))
    {
      v46 = v40[5];
      if (v46)
      {
        v50 = *(_DWORD *)(a5 + 600);
        if (v50 == 1)
        {
          v44 = a5 + 504;
          goto LABEL_199;
        }
        if (!v50)
        {
          v44 = a5 + 504;
          if (pas_small_bitfit_page_config_variant_is_enabled_override)
            goto LABEL_199;
        }
      }
    }
    goto LABEL_163;
  }
  if (!pas_medium_bitfit_page_config_variant_is_enabled_override)
  {
    if (!pas_small_bitfit_page_config_variant_is_enabled_override)
    {
      if (*(_BYTE *)(a5 + 824))
      {
        v46 = v40[5];
        if (v46)
        {
          if (*(_DWORD *)(a5 + 920) == 2)
            goto LABEL_199;
        }
      }
      if (*v45)
      {
        v46 = v40[5];
        if (v46)
        {
          v44 = a5 + 664;
          if (*(_DWORD *)(a5 + 760) == 2)
            goto LABEL_199;
        }
      }
      v47 = 0;
      if (*(_BYTE *)(a5 + 504))
      {
        v46 = v40[5];
        if (v46)
        {
          v44 = a5 + 504;
          if (*(_DWORD *)(a5 + 600) == 2)
            goto LABEL_199;
        }
      }
      goto LABEL_202;
    }
    if (*(_BYTE *)(a5 + 824))
    {
      v46 = v40[5];
      if (v46)
      {
        if ((*(_DWORD *)(a5 + 920) | 2) == 2)
          goto LABEL_199;
      }
    }
    if (*(_BYTE *)(a5 + 664))
    {
      v46 = v40[5];
      if (v46)
      {
        v44 = a5 + 664;
        if ((*(_DWORD *)(a5 + 760) | 2) == 2)
          goto LABEL_199;
      }
    }
    if (*(_BYTE *)(a5 + 504))
    {
      v46 = v40[5];
      if (v46)
      {
        v44 = a5 + 504;
        if ((*(_DWORD *)(a5 + 600) | 2) == 2)
          goto LABEL_199;
      }
    }
LABEL_163:
    v47 = 0;
    goto LABEL_202;
  }
  if (pas_small_bitfit_page_config_variant_is_enabled_override)
  {
    if (!*(_BYTE *)(a5 + 824) || (v46 = v40[5]) == 0 || *(_DWORD *)(a5 + 920) > 2u)
    {
      if (!*v45 || (v46 = v40[5]) == 0 || (v44 = a5 + 664, *(_DWORD *)(a5 + 760) >= 3u))
      {
        v47 = 0;
        if (!*(_BYTE *)(a5 + 504))
          goto LABEL_202;
        v46 = v40[5];
        if (!v46)
          goto LABEL_202;
        v44 = a5 + 504;
        if (*(_DWORD *)(a5 + 600) >= 3u)
          goto LABEL_202;
      }
    }
LABEL_199:
    v51 = -1 << *(_BYTE *)(v44 + 28);
    if (((unint64_t)v51 & *(_QWORD *)(v44 + 48)) >= v46)
      v47 = v46;
    else
      v47 = v51 & *(_QWORD *)(v44 + 48);
    goto LABEL_202;
  }
  if (*(_BYTE *)(a5 + 824))
  {
    v46 = v40[5];
    if (v46)
    {
      if ((*(_DWORD *)(a5 + 920) - 1) < 2)
        goto LABEL_199;
    }
  }
  if (*v45)
  {
    v46 = v40[5];
    if (v46)
    {
      v44 = a5 + 664;
      if ((*(_DWORD *)(a5 + 760) - 1) < 2)
        goto LABEL_199;
    }
  }
  v47 = 0;
  if (*(_BYTE *)(a5 + 504))
  {
    v46 = v40[5];
    if (v46)
    {
      v44 = a5 + 504;
      if ((*(_DWORD *)(a5 + 600) - 1) < 2)
        goto LABEL_199;
    }
  }
LABEL_202:
  if (v43 <= v47)
    v43 = v47;
  if (v39 > v43)
    return 0;
  v297 = v39;
  if (a4 == 1)
    goto LABEL_222;
  if (!v298)
  {
    v53 = 1;
    if (a1 && (*v40 & 0x20000) != 0)
    {
      v53 = (*(uint64_t (**)(_QWORD))(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F] + 24))(*(_QWORD *)(a1 + 64));
      v18 = *(unsigned __int8 *)(a5 + 56);
      v19 = *(unsigned __int8 *)(a5 + 84);
      v20 = *(unsigned __int8 *)(a5 + 504);
      v21 = *(unsigned __int8 *)(a5 + 532);
    }
    if (v20)
      v54 = v21;
    else
      v54 = -1;
    if (v54 >= v19)
      v55 = v19;
    else
      v55 = v54;
    if (v18)
      LOBYTE(v54) = v55;
    v52 = (unint64_t)(v53 + (1 << v54) - 1) >> v54;
LABEL_221:
    if (v52 == v25)
      goto LABEL_243;
LABEL_222:
    if (*(_DWORD *)(a1 + 36))
      goto LABEL_243;
    if (v20)
      v56 = v21;
    else
      v56 = -1;
    if (v56 < v19)
      LOBYTE(v19) = v56;
    v57 = v18 ? v19 : v56;
    v58 = (unint64_t)(*(_QWORD *)(a5 + 984) + ~(-1 << v57)) >> v57;
    v59 = v58 + 1;
    if (v58 + 1 <= v25)
      goto LABEL_243;
    v60 = pas_large_expendable_memory_allocate(4 * v59, 4, (uint64_t)"pas_segregated_heap/index_to_size_directory");
    v61 = pas_large_expendable_memory_allocate(4 * v59, 4, (uint64_t)"pas_segregated_heap/index_to_allocator_index");
    if (v59 >= 0x10)
    {
      v63 = 0;
      v62 = 0;
      if ((_DWORD)v58 != -1 && !HIDWORD(v58) && (unint64_t)(v61 - v60) >= 0x20)
      {
        v62 = v59 & 0xFFFFFFFFFFFFFFF8;
        v63 = v59 & 0xFFFFFFF8;
        v64 = (_OWORD *)(v60 + 16);
        v65 = (_OWORD *)(v61 + 16);
        v66 = v59 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          *(v64 - 1) = 0uLL;
          *v64 = 0uLL;
          v64 += 2;
          *(v65 - 1) = 0uLL;
          *v65 = 0uLL;
          v65 += 2;
          v66 -= 8;
        }
        while (v66);
        if (v59 == v62)
          goto LABEL_242;
      }
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    v67 = v63 + 1;
    do
    {
      v68 = 4 * v62;
      *(_DWORD *)(v60 + v68) = 0;
      *(_DWORD *)(v61 + v68) = 0;
      v62 = v67++;
    }
    while (v59 > v62);
LABEL_242:
    __dmb(0xBu);
    *(_DWORD *)(a1 + 36) = v59;
    *(_QWORD *)(a1 + 8) = v61;
    *(_QWORD *)(a1 + 16) = v60;
    goto LABEL_243;
  }
  v52 = *v298;
  if ((_DWORD)v52 != -1)
    goto LABEL_221;
LABEL_243:
  v69 = &unk_1ECF57000;
  if (v25 >= *(unsigned int *)(a1 + 36)
    || (v70 = *(_QWORD *)(a1 + 16)) == 0
    || ((v71 = *(unsigned int *)(v70 + 4 * v25), v27 = pas_compact_heap_reservation_base + 8 * v71, (_DWORD)v71)
      ? (v72 = v27 == 0)
      : (v72 = 1),
        v72))
  {
    v27 = pas_segregated_heap_size_directory_for_index_slow(a1, v25, v298, (_BYTE *)a5);
    if (!v27)
      goto LABEL_306;
  }
  v73 = *(unsigned int *)(v27 + 24);
  if (1 << (v73 >> 27) >= v38)
    return v27;
  v74 = v73 & 0x7FFFFFF;
  v75 = *(unsigned __int8 *)(a5 + 84);
  if (*(_BYTE *)(a5 + 504))
    v76 = *(unsigned __int8 *)(a5 + 532);
  else
    v76 = -1;
  if (v76 < v75)
    LOBYTE(v75) = v76;
  if (*(_BYTE *)(a5 + 56))
    v77 = v75;
  else
    v77 = v76;
  if ((unint64_t)(v74 + (1 << v77) - 1) >> v77 == v25)
  {
    v78 = (unsigned int *)(v27 + 28);
    while (1)
    {
      v79 = *v78;
      v80 = __ldxr(v78);
      if (v80 != v79)
        break;
      if (__stlxr(*v78 | 0xFFFFFF80, v78))
        goto LABEL_266;
      v81 = 1;
LABEL_267:
      __dmb(0xBu);
      if (v81)
        goto LABEL_276;
    }
    __clrex();
LABEL_266:
    v81 = 0;
    goto LABEL_267;
  }
  v82 = (unsigned int *)(v27 + 28);
  do
  {
    v83 = *v82;
    v84 = __ldxr(v82);
    if (v84 == v83)
    {
      if (!__stlxr(*v82 & 0x7F | (((_DWORD)v25 << 7) + 128), v82))
      {
        v85 = 1;
        goto LABEL_275;
      }
    }
    else
    {
      __clrex();
    }
    v85 = 0;
LABEL_275:
    __dmb(0xBu);
  }
  while (!v85);
LABEL_276:
  v86 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v86)
  {
    if (v25 + 1 < v86)
      v86 = v25 + 1;
    if (v86)
    {
      v87 = 4 * v86;
      v88 = *(_QWORD *)(a1 + 8) - 4;
      v89 = *(_QWORD *)(a1 + 16) - 4;
      do
      {
        v90 = *(unsigned int *)(v89 + v87);
        if ((_DWORD)v90)
          v91 = pas_compact_heap_reservation_base + 8 * v90;
        else
          v91 = 0;
        if (v91 != v27)
          break;
        *(_DWORD *)(v89 + v87) = 0;
        if ((_UNKNOWN **)a5 != &pas_utility_heap_config)
          *(_DWORD *)(v88 + v87) = 0;
        v87 -= 4;
      }
      while (v87);
    }
  }
  v92 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v92 && 8 * v92 != -pas_compact_heap_reservation_base)
  {
    v93 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v93)
      v94 = pas_compact_heap_reservation_base + 8 * v93;
    else
      v94 = 0;
    v95 = *(unsigned int *)(v94 + 8);
    v96 = *(unsigned int *)(v94 + 12);
    v97 = pas_compact_heap_reservation_base + 8 * v95;
    if (!(_DWORD)v95)
      v97 = 0;
    if ((_DWORD)v96)
    {
      v98 = 0;
      do
      {
        v99 = (v98 + v96) >> 1;
        v100 = v97 + 16 * v99;
        v103 = *(_DWORD *)(v100 + 8);
        v101 = (_DWORD *)(v100 + 8);
        v102 = v103;
        if (!v103)
          break;
        if (v25 >= v102)
        {
          v104 = v97 + 16 * v99;
          v106 = *(_DWORD *)(v104 + 12);
          v105 = (unsigned int *)(v104 + 12);
          if (v25 <= v106)
          {
            v284 = *(unsigned int *)(a1 + 28);
            if ((_DWORD)v284)
              v285 = pas_compact_heap_reservation_base + 8 * v284;
            else
              v285 = 0;
            ++*(_QWORD *)v285;
            __dmb(0xBu);
            if (v25 >= *v105)
            {
              v293 = v97 + 16 * v99;
              v294 = *(unsigned int *)(v285 + 8);
              v295 = pas_compact_heap_reservation_base + 8 * v294;
              if (!(_DWORD)v294)
                v295 = 0;
              memmove((void *)v293, (const void *)(v293 + 16), 16 * (~((unint64_t)(v293 - v295) >> 4) + *(unsigned int *)(v285 + 12)));
              --*(_DWORD *)(v285 + 12);
            }
            else
            {
              *v101 = v25 + 1;
            }
            __dmb(0xBu);
            ++*(_QWORD *)v285;
            break;
          }
          v98 = v99 + 1;
          v99 = v96;
        }
        v96 = v99;
      }
      while (v99 > v98);
    }
  }
  v107 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v107)
    v108 = pas_compact_heap_reservation_base + 8 * v107;
  else
    v108 = 0;
  if (v108 == v27)
  {
    if (*(_BYTE *)(v27 + 15))
    {
      if (pas_segregated_heap_index_is_greater_equal_cached_index_and_cached_index_is_set(a1, v298, v25, (_BYTE *)a5))
      {
        *(_BYTE *)(v27 + 15) = 0;
        if ((v16 & 0x20000) != 0)
        {
          v121 = *(_QWORD *)(a1 + 72);
          if (v121)
            *(_DWORD *)(v121 + 16) = 0;
        }
      }
    }
  }
LABEL_306:
  v109 = *(unsigned int *)(a1 + 36);
  v110 = pas_compact_heap_reservation_base;
  v111 = 0x1EE342000;
  if (v25 >= v109)
  {
LABEL_314:
    v115 = *(unsigned int *)(a1 + 24);
    v296 = (_DWORD *)(a1 + 24);
    v27 = 0;
    if (!(_DWORD)v115)
    {
      v117 = (unsigned __int8 *)(a5 + 504);
      v118 = v297;
      goto LABEL_349;
    }
    v116 = pas_compact_heap_reservation_base + 8 * v115;
    v117 = (unsigned __int8 *)(a5 + 504);
    if (v116)
    {
      v118 = v297;
      goto LABEL_346;
    }
    v118 = v297;
  }
  else
  {
    v112 = v25;
    while (1)
    {
      v113 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v112);
      v27 = pas_compact_heap_reservation_base + 8 * v113;
      if ((_DWORD)v113 && v27 != 0)
        break;
      if (v109 == ++v112)
        goto LABEL_314;
    }
    v119 = *(unsigned int *)(a1 + 24);
    v296 = (_DWORD *)(a1 + 24);
    if (v298)
    {
      v120 = *v298;
      v117 = (unsigned __int8 *)(a5 + 504);
      if ((_DWORD)v120 == -1)
      {
        v118 = v297;
        v69 = (_QWORD *)&unk_1ECF57000;
        goto LABEL_349;
      }
    }
    else
    {
      if ((*(_BYTE *)(*(_QWORD *)a1 + 2) & 2) != 0)
      {
        v122 = (*(uint64_t (**)(_QWORD))(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F] + 24))(*(_QWORD *)(a1 + 64));
        v111 = 0x1EE342000uLL;
      }
      else
      {
        v122 = 1;
      }
      v117 = (unsigned __int8 *)(a5 + 504);
      v123 = *(unsigned __int8 *)(a5 + 84);
      if (*(_BYTE *)(a5 + 504))
        v124 = *(unsigned __int8 *)(a5 + 532);
      else
        v124 = -1;
      if (v124 < v123)
        LOBYTE(v123) = v124;
      if (*(_BYTE *)(a5 + 56))
        v125 = v123;
      else
        v125 = v124;
      v120 = (unint64_t)(v122 + (1 << v125) - 1) >> v125;
    }
    v116 = v110 + 8 * v119;
    v127 = v120 >= v112 || (_DWORD)v119 == 0 || v116 == 0;
    v118 = v297;
    v69 = &unk_1ECF57000;
    if (v127)
      goto LABEL_349;
LABEL_346:
    if (*(_BYTE *)(v116 + 15) && v118 <= (*(_DWORD *)(v116 + 24) & 0x7FFFFFFu))
      v27 = v116;
  }
LABEL_349:
  v128 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v128 && 8 * v128 != -v69[317])
  {
    v129 = *(unsigned int *)(a1 + 28);
    v130 = v69[317];
    if ((_DWORD)v129)
      v131 = v130 + 8 * v129;
    else
      v131 = 0;
    v133 = *(unsigned int *)(v131 + 8);
    v132 = *(_DWORD *)(v131 + 12);
    v134 = v130 + 8 * v133;
    if (!(_DWORD)v133)
      v134 = 0;
    if (v132)
    {
      v135 = 0;
      v136 = 0;
      while (1)
      {
        while (1)
        {
          v137 = (v136 + v132) >> 1;
          v138 = *(unsigned int *)(v134 + 16 * v137 + 8);
          if (!(_DWORD)v138)
            goto LABEL_373;
          if (v25 >= v138)
            break;
          v132 = (v136 + v132) >> 1;
          v135 = (unsigned int *)(v134 + 16 * v137);
          if (v137 <= v136)
            goto LABEL_363;
        }
        if (v25 <= *(unsigned int *)(v134 + 16 * v137 + 12))
          break;
        v136 = v137 + 1;
        if (v132 <= (int)v137 + 1)
        {
LABEL_363:
          if (!v135)
            goto LABEL_373;
          goto LABEL_367;
        }
      }
      v135 = (unsigned int *)(v134 + 16 * v137);
LABEL_367:
      v139 = *v135;
      if ((_DWORD)v139)
        v140 = v69[317] + 8 * v139;
      else
        v140 = 0;
      if (!v27 || (*(_DWORD *)(v140 + 24) & 0x7FFFFFFu) < (*(_DWORD *)(v27 + 24) & 0x7FFFFFFu))
        v27 = v140;
    }
  }
LABEL_373:
  v141 = *(unsigned int *)(*(_QWORD *)a1 + 16);
  if (v118 > v141)
    goto LABEL_408;
  v142 = *(unsigned __int8 *)(v111 + 2553);
  v143 = v118 - 1;
  if (!*(_BYTE *)(a5 + 280))
    goto LABEL_382;
  if (!(_DWORD)v141)
    goto LABEL_408;
  v144 = *(unsigned int *)(a5 + 376);
  if (!(_DWORD)v144)
  {
    if (pas_small_segregated_page_config_variant_is_enabled_override)
      goto LABEL_381;
    goto LABEL_382;
  }
  if ((_DWORD)v144 != 1 || !*(_BYTE *)(v111 + 2553))
    goto LABEL_382;
LABEL_381:
  v145 = *(_BYTE *)(a5 + 308);
  v146 = ((1 << v145) + v143) & -(1 << v145);
  v147 = ((1 << v145) + (_DWORD)v143) & -(1 << v145);
  if (v147 > ((unint64_t)(-1 << v145) & *(_QWORD *)(a5 + 328)))
  {
LABEL_382:
    v148 = 0;
    v149 = INFINITY;
    if ((_DWORD)v141)
      v150 = *(_BYTE *)(a5 + 56) == 0;
    else
      v150 = 1;
    if (!v150)
      goto LABEL_386;
    goto LABEL_406;
  }
  v165 = *(_QWORD *)(a5 + 416);
  v166 = *(_QWORD *)(a5 + 312);
  v167 = pas_segregated_page_extra_wasteage_handicap_for_config_variant[v144];
  v168 = v165 + *(_QWORD *)(a5 + 432);
  v169 = v168 / v147 * v147;
  v170 = (v147 + v165 - 1) / v147 * v147;
  v171 = (v147 + ~v168 + v166) % v147 - (v147 + ~(_DWORD)v168);
  v172 = (v166 - v165) % v147 + v165;
  v173 = v171 - v172;
  if (v169 - v170 >= (v171 - v172))
    v171 = v169;
  if (v169 - v170 >= v173)
    v172 = v170;
  v174 = v167 * (*(double *)(a5 + 384) * ((double)v166 / (double)((v171 - v172) / v146)));
  if (v174 >= INFINITY)
    v148 = 0;
  else
    v148 = a5 + 280;
  v149 = fmin(v174, INFINITY);
  if (!*(_BYTE *)(a5 + 56))
    goto LABEL_406;
LABEL_386:
  v151 = *(unsigned int *)(a5 + 152);
  if ((_DWORD)v151)
  {
    if ((_DWORD)v151 != 1 || !v142)
      goto LABEL_406;
  }
  else if (!pas_small_segregated_page_config_variant_is_enabled_override)
  {
    goto LABEL_406;
  }
  v152 = *(_BYTE *)(a5 + 84);
  v153 = ((1 << v152) + v143) & -(1 << v152);
  if (v153 <= ((unint64_t)(-1 << v152) & *(_QWORD *)(a5 + 104)))
  {
    v154 = *(_QWORD *)(a5 + 192);
    v155 = *(_QWORD *)(a5 + 88);
    v156 = pas_segregated_page_extra_wasteage_handicap_for_config_variant[v151];
    v157 = v154 + *(_QWORD *)(a5 + 208);
    v158 = v157 / v153 * v153;
    v159 = ((unint64_t)v153 + v154 - 1) / v153 * v153;
    v160 = (v153 + ~v157 + v155) % v153 - (v153 + ~(_DWORD)v157);
    v161 = (v155 - v154) % v153 + v154;
    v162 = v160 - v161;
    if (v158 - v159 >= (v160 - v161))
      v160 = v158;
    if (v158 - v159 >= v162)
      v161 = v159;
    v163 = v156 * (*(double *)(a5 + 160) * ((double)v155 / (double)((v160 - v161) / v153)));
    if (v163 < v149)
    {
      v164 = 0;
      v148 = a5 + 56;
      goto LABEL_409;
    }
  }
LABEL_406:
  if (v148)
  {
    v164 = 0;
    v163 = v149;
  }
  else
  {
LABEL_408:
    v175 = pas_bitfit_heap_select_variant(v118, a5, *(_QWORD *)a1);
    v148 = 0;
    v163 = (double)v175;
    v164 = 1;
  }
  if (!v27)
    goto LABEL_420;
  v176 = *(unsigned int *)(v27 + 24);
  if (1 << (v176 >> 27) < v38)
    goto LABEL_420;
LABEL_409:
  v177 = v176 & 0x7FFFFFF;
  if (*(_BYTE *)(v27 + 12))
  {
    v178 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v27 + 12));
    v179 = *(_QWORD *)(v178 + 32);
    v180 = *(double *)(v178 + 104);
    v181 = *(_QWORD *)(v178 + 136);
    v182 = pas_segregated_page_extra_wasteage_handicap_for_config_variant[*(unsigned int *)(v178 + 96)];
    v183 = (double)v179;
    v184 = *(_QWORD *)(v178 + 152) + v181;
    v185 = v184 / v177 * v177;
    v186 = (v181 + v177 - 1) / v177 * v177;
    v187 = v179 - (v179 + v177 - 1 - v184) / v177 * v177;
    v188 = (v179 - v181) % v177 + v181;
    v189 = v187 - v188;
    if (v185 - v186 >= (v187 - v188))
      v187 = v185;
    if (v185 - v186 >= v189)
      v188 = v186;
    v190 = v182 * (v180 * (v183 / (double)((v187 - v188) / v177)));
  }
  else
  {
    v190 = (double)v177;
  }
  if (v163 * 1.3 > v190)
  {
    v191 = v177;
    v192 = v298;
    v193 = v296;
  }
  else
  {
LABEL_420:
    if (v164)
    {
      v191 = (unint64_t)v163;
    }
    else
    {
      v194 = *(_BYTE *)(v148 + 28);
      v195 = 1 << v194;
      if (v118 <= 1 << v194)
        v196 = 1 << v194;
      else
        v196 = v118;
      v197 = *(_QWORD *)(v148 + 32);
      v198 = *(_QWORD *)(v148 + 136);
      v199 = (v195 + v196 - 1) & -(uint64_t)v195;
      if (v195 > v38)
        v38 = 1 << v194;
      v200 = *(_QWORD *)(v148 + 152) + v198;
      v201 = v200 / v199 * v199;
      v202 = v197 + ~v200;
      v203 = v197 - (v197 - v198) / (unint64_t)v199 * v199;
      if (v201
         - (((unint64_t)v199 + v198 - 1) / v199) * v199 >= ((v197 - v198) / (unint64_t)v199) * (_DWORD)v199 - (((unint64_t)v199 + v202) / v199) * (_DWORD)v199)
        v203 = ((unint64_t)v199 + v198 - 1) / v199 * v199;
      else
        v201 = v197 - ((unint64_t)v199 + v202) / v199 * v199;
      v204 = v201 - v203;
      v205 = -1 << v194;
      v206 = v199 + v195;
      v207 = v204 / v199;
      do
      {
        v191 = v199;
        v199 += v195;
        if ((v199 & (v38 - 1)) != 0 || v199 > (*(_QWORD *)(v148 + 48) & (unint64_t)v205))
          break;
        v208 = v200 / v199 * v199;
        v209 = v197 - (v197 - v198) / (unint64_t)v199 * v199;
        if (v208
           - (((unint64_t)v199 + v198 - 1) / v199) * v199 >= ((v197 - v198) / (unint64_t)v199) * (_DWORD)v199 - (((unint64_t)v199 + v202) / v199) * (_DWORD)v199)
          v209 = ((unint64_t)v199 + v198 - 1) / v199 * v199;
        else
          v208 = v197 - ((unint64_t)v199 + v202) / v199 * v199;
        v210 = (v208 - v209) / v206;
        v206 += v195;
      }
      while (v210 == v207);
    }
    v193 = v296;
    if (*(_DWORD *)(*(_QWORD *)a1 + 4))
      v211 = v38;
    else
      v211 = v191 & -(int)v191;
    v212 = pas_segregated_size_directory_create((unsigned int *)a1, v191, v211, a5, v148, a7);
    v27 = v212;
    v213 = *(unsigned int *)(a1 + 24);
    v214 = v69[317];
    v215 = v214 + 8 * v213;
    if ((_DWORD)v213)
      v216 = v215 == 0;
    else
      v216 = 1;
    if (v216)
    {
      v217 = v296;
    }
    else
    {
      v218 = *(unsigned __int8 *)(v215 + 15);
      v219 = (_DWORD *)(v215 + 44);
      if (v218)
        v217 = v219;
      else
        v217 = v296;
      v213 = *v217;
      v215 = v214 + 8 * v213;
    }
    v192 = v298;
    if (!(_DWORD)v213)
      v215 = 0;
    if (v215)
      v220 = (unint64_t)(v215 - v214) >> 3;
    else
      v220 = 0;
    *(_DWORD *)(v212 + 44) = v220;
    v221 = (v212 - v214) >> 3;
    if (!v212)
      LODWORD(v221) = 0;
    *v217 = v221;
  }
  if (v192)
  {
    v222 = *v192;
    if ((_DWORD)v222 == -1 || v25 == v222)
    {
      *v192 = v25;
LABEL_474:
      v227 = *v193;
      v228 = v69[317];
      if (!(_DWORD)v227)
        goto LABEL_488;
      v229 = v228 + 8 * v227;
      v230 = v193;
      if (v27 == v229)
      {
LABEL_479:
        v233 = *(unsigned int *)(v27 + 44);
        v234 = (_DWORD)v233 ? v228 + 8 * v233 : 0;
        v235 = v234 ? (unint64_t)(v234 - v228) >> 3 : 0;
        *v230 = v235;
        *(_DWORD *)(v27 + 44) = 0;
        LODWORD(v227) = *v193;
      }
      else
      {
        while (1)
        {
          v231 = v229;
          v232 = *(unsigned int *)(v229 + 44);
          if (!(_DWORD)v232)
            break;
          v229 = v228 + 8 * v232;
          if (v27 == v229)
          {
            v230 = (_DWORD *)(v231 + 44);
            goto LABEL_479;
          }
        }
      }
      if ((_DWORD)v227)
        v236 = v228 + 8 * v227;
      else
LABEL_488:
        v236 = 0;
      if (v236)
        v237 = (unint64_t)(v236 - v228) >> 3;
      else
        v237 = 0;
      *(_DWORD *)(v27 + 44) = v237;
      v238 = (unint64_t)(v27 - v228) >> 3;
      if (!v27)
        LODWORD(v238) = 0;
      *v193 = v238;
      *(_BYTE *)(v27 + 15) = 1;
    }
  }
  else
  {
    if ((*(_BYTE *)(*(_QWORD *)a1 + 2) & 2) != 0)
      v223 = (*(uint64_t (**)(_QWORD))(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F] + 24))(*(_QWORD *)(a1 + 64));
    else
      v223 = 1;
    v224 = *(unsigned __int8 *)(a5 + 84);
    if (*(_BYTE *)(a5 + 504))
      v225 = *(unsigned __int8 *)(a5 + 532);
    else
      v225 = -1;
    if (v225 < v224)
      LOBYTE(v224) = v225;
    if (*(_BYTE *)(a5 + 56))
      v226 = v224;
    else
      v226 = v225;
    if ((unint64_t)(v223 + (1 << v226) - 1) >> v226 == v25)
      goto LABEL_474;
  }
  v239 = *(unsigned int *)(a1 + 36);
  v240 = *(unsigned __int8 *)(a5 + 56);
  v241 = *v117;
  if (v25 < v239)
  {
    v242 = *(_QWORD *)(a1 + 16);
    v243 = v25;
    do
    {
      v244 = *(unsigned __int8 *)(a5 + 84);
      v245 = *(unsigned __int8 *)(a5 + 532);
      if (!v241)
        v245 = -1;
      if (v245 < v244)
        LOBYTE(v244) = v245;
      if (!v240)
        LOBYTE(v244) = v245;
      if (v243 << v244 > (*(_DWORD *)(v27 + 24) & 0x7FFFFFFu))
        break;
      v246 = *(unsigned int *)(v242 + 4 * v243);
      v247 = v69[317];
      if ((_DWORD)v246 && v247 != -8 * v246)
        break;
      *(_DWORD *)(v242 + 4 * v243++) = (unint64_t)(v27 - v247) >> 3;
    }
    while (v239 != v243);
  }
  v249 = *(unsigned __int8 *)(a5 + 84);
  if (v241)
    v250 = *(unsigned __int8 *)(a5 + 532);
  else
    v250 = -1;
  if (v250 < v249)
    LOBYTE(v249) = v250;
  if (v240)
    v251 = v249;
  else
    v251 = v250;
  v252 = (v191 + (1 << v251) - 1) >> v251;
  if ((_DWORD)v239)
  {
    if (v252 < v239)
      goto LABEL_520;
LABEL_523:
    v253 = *(unsigned int *)(a1 + 28);
    if (!(_DWORD)v253 || (v254 = 8 * v253, v255 = v69[317], (v256 = 8 * v253 + v255) == 0))
    {
      v256 = pas_immortal_heap_allocate(0x18uLL, (uint64_t)"pas_segregated_heap_rare_data", 0);
      *(_QWORD *)(v256 + 8) = 0;
      *(_QWORD *)(v256 + 16) = 0;
      *(_QWORD *)v256 = 0;
      __dmb(0xBu);
      v255 = v69[317];
      v253 = (v256 - v255) >> 3;
      *(_DWORD *)(a1 + 28) = v253;
      v254 = (v256 - v255) & 0x7FFFFFFF8;
    }
    if ((_DWORD)v253 && v254 != -v255)
    {
      v257 = *(unsigned int *)(a1 + 28);
      v258 = v69[317];
      v259 = (_DWORD)v257 ? v258 + 8 * v257 : 0;
      v261 = *(unsigned int *)(v259 + 8);
      v260 = *(_DWORD *)(v259 + 12);
      v262 = (_DWORD)v261 ? v258 + 8 * v261 : 0;
      if (v260)
      {
        v263 = 0;
        v264 = 0;
        while (1)
        {
          while (1)
          {
            v265 = (v264 + v260) >> 1;
            v266 = *(unsigned int *)(v262 + 16 * v265 + 8);
            if (!(_DWORD)v266)
              goto LABEL_542;
            if (v25 >= v266)
              break;
            v260 = (v264 + v260) >> 1;
            v263 = (char *)(v262 + 16 * v265);
            if (v265 <= v264)
              goto LABEL_541;
          }
          if (v25 <= *(unsigned int *)(v262 + 16 * v265 + 12))
            break;
          v264 = v265 + 1;
          if (v260 <= (int)v265 + 1)
          {
LABEL_541:
            if (!v263)
              goto LABEL_542;
            goto LABEL_569;
          }
        }
        v263 = (char *)(v262 + 16 * v265);
LABEL_569:
        v286 = *(unsigned int *)v263;
        v287 = v69[317];
        if ((_DWORD)v286)
          v288 = v287 + 8 * v286;
        else
          v288 = 0;
        if (v288 != v27)
        {
          v289 = *(unsigned int *)(v256 + 8);
          v290 = (_BYTE *)(v287 + 8 * v289);
          if ((_DWORD)v289)
            v269 = v290;
          else
            v269 = 0;
          v291 = *((unsigned int *)v263 + 2);
          if (v252 >= v291)
            LODWORD(v252) = v291 - 1;
          v268 = (v263 - v269) >> 4;
          goto LABEL_545;
        }
        v292 = *((unsigned int *)v263 + 2);
        if (v25 < v292)
          LODWORD(v292) = v25;
        *((_DWORD *)v263 + 2) = v292;
        goto LABEL_552;
      }
    }
LABEL_542:
    v267 = *(unsigned int *)(v256 + 8);
    v268 = *(unsigned int *)(v256 + 12);
    if ((_DWORD)v267)
      v269 = (_BYTE *)(v69[317] + 8 * v267);
    else
      v269 = 0;
LABEL_545:
    ++*(_QWORD *)v256;
    __dmb(0xBu);
    v270 = *(_DWORD *)(v256 + 12);
    v271 = *(_DWORD *)(v256 + 16);
    if (v270 >= v271)
    {
      v272 = v69;
      v273 = 2 * v271 + 2;
      v274 = (void *)pas_compact_expendable_memory_allocate(16 * v273, 8, (uint64_t)"pas_segregated_heap_rare_data/medium_directories");
      memcpy(v274, v269, 16 * *(unsigned int *)(v256 + 12));
      __dmb(0xBu);
      v275 = ((unint64_t)v274 - v272[317]) >> 3;
      if (!v274)
        LODWORD(v275) = 0;
      *(_DWORD *)(v256 + 8) = v275;
      __dmb(0xBu);
      *(_DWORD *)(v256 + 16) = v273;
      v69 = v272;
      v270 = *(_DWORD *)(v256 + 12);
      v269 = v274;
    }
    v276 = &v269[16 * v268];
    memmove(v276 + 4, v276, 16 * (v270 - v268));
    v277 = (unint64_t)(v27 - v69[317]) >> 3;
    if (!v27)
      LODWORD(v277) = 0;
    *v276 = v277;
    v276[1] = 0;
    v276[2] = v25;
    v276[3] = v252;
    __dmb(0xBu);
    ++*(_DWORD *)(v256 + 12);
    __dmb(0xBu);
    ++*(_QWORD *)v256;
    goto LABEL_552;
  }
  if (v252 >= ((unint64_t)(*(_QWORD *)(a5 + 984) + ~(-1 << v251)) >> v251) + 1)
    goto LABEL_523;
LABEL_520:
  if (v25 < v239)
  {
LABEL_552:
    v278 = (unsigned int *)(v27 + 28);
    LODWORD(v279) = *(_DWORD *)(v27 + 28) >> 7;
    if ((_DWORD)v279 == 0x1FFFFFF)
      v279 = 0xFFFFFFFFLL;
    else
      v279 = v279;
    if (v25 >= v279)
      return v27;
    while (1)
    {
      v280 = *v278;
      v281 = __ldxr(v278);
      if (v281 != v280)
        break;
      if (__stlxr(*v278 & 0x7F | ((_DWORD)v25 << 7), v278))
        goto LABEL_560;
      v282 = 1;
LABEL_561:
      __dmb(0xBu);
      if (v282)
        return v27;
    }
    __clrex();
LABEL_560:
    v282 = 0;
    goto LABEL_561;
  }
  return v27;
}

void pas_segregated_heap_compute_summary(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[11];
  _QWORD v36[12];

  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v3 = *(unsigned int *)(a1 + 24);
  v4 = pas_compact_heap_reservation_base;
  v5 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v3);
  if ((_DWORD)v3)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      pas_segregated_directory_compute_summary(v5, (uint64_t)v36);
      v14 += v36[0];
      v13 += v36[1];
      v12 += v36[2];
      v11 += v36[3];
      v10 += v36[4];
      v9 += v36[5];
      v8 += v36[6];
      v7 += v36[7];
      v15 = v36[8] + v32;
      v16 = v36[9] + v33;
      v17 = v36[10] + v34;
      *(_QWORD *)a2 = v14;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = v12;
      *(_QWORD *)(a2 + 24) = v11;
      *(_QWORD *)(a2 + 32) = v10;
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 48) = v8;
      *(_QWORD *)(a2 + 56) = v7;
      v32 = v15;
      v33 = v16;
      *(_QWORD *)(a2 + 64) = v15;
      *(_QWORD *)(a2 + 72) = v16;
      v34 = v17;
      *(_QWORD *)(a2 + 80) = v17;
      v18 = v5[11];
      v4 = pas_compact_heap_reservation_base;
      if (!(_DWORD)v18)
        break;
      v5 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v18);
    }
    while (v5);
  }
  v19 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v19)
  {
    v20 = v4 + 8 * v19;
    if (v20)
    {
      pas_bitfit_heap_compute_summary(v20, (uint64_t)v35);
      v21 = v35[1] + v13;
      v22 = v35[2] + v12;
      v23 = v35[3] + v11;
      v24 = v35[4] + v10;
      v25 = v35[5] + v9;
      v26 = v35[6] + v8;
      v27 = v35[7] + v7;
      v28 = v35[8] + v32;
      v29 = v35[9] + v33;
      v30 = v35[10] + v34;
      *(_QWORD *)a2 = v35[0] + v14;
      *(_QWORD *)(a2 + 8) = v21;
      *(_QWORD *)(a2 + 16) = v22;
      *(_QWORD *)(a2 + 24) = v23;
      *(_QWORD *)(a2 + 32) = v24;
      *(_QWORD *)(a2 + 40) = v25;
      *(_QWORD *)(a2 + 48) = v26;
      *(_QWORD *)(a2 + 56) = v27;
      *(_QWORD *)(a2 + 64) = v28;
      *(_QWORD *)(a2 + 72) = v29;
      *(_QWORD *)(a2 + 80) = v30;
    }
  }
}

void recompute_size_lookup(uint64_t a1, _BYTE *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int v40;
  unint64_t v41;
  uint64x2_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64x2_t *v64;
  int64x2_t *v65;
  unint64_t v66;
  unint64_t v67;
  _DWORD *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v84;
  unint64_t v85[201];
  void *__src;
  uint64_t v87;

  v5 = a1;
  v6 = pas_compact_heap_reservation_base;
  if (*(_DWORD *)(a1 + 36)
    || ((v79 = *(unsigned int *)(a1 + 28), v80 = pas_compact_heap_reservation_base + 8 * v79, (_DWORD)v79)
      ? (v81 = v80 == 0)
      : (v81 = 1),
        !v81 && *(_DWORD *)(v80 + 12)))
  {
    bzero(v85, 0x658uLL);
    v7 = (_QWORD *)&unk_1ECF57000;
    v8 = *(unsigned int *)(v5 + 24);
    v9 = (_DWORD *)(v6 + 8 * v8);
    if ((_DWORD)v8)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v11 = 0;
      v84 = v5;
      do
      {
        v12 = v87;
        v13 = 8 * v11;
        if (v11 >= v87 + 200)
        {
          v15 = a2;
          if ((unint64_t)(2 * v87) <= 4)
            v16 = 4;
          else
            v16 = 2 * v87;
          v14 = (char *)pas_large_utility_free_heap_allocate_for_allocation_config(8 * v16, (uint64_t)"size_directory_min_heap/outline_array");
          bzero(v14, 8 * v16);
          memcpy(v14, __src, v13 - 1600);
          pas_large_utility_free_heap_deallocate_for_allocation_config((unint64_t)__src, 8 * v12);
          v7 = &unk_1ECF57000;
          __src = v14;
          v87 = v16;
          a2 = v15;
          v5 = v84;
        }
        else
        {
          v14 = (char *)__src;
        }
        v17 = &v85[v13 / 8 + 1];
        if (v11 >= 0xC8)
          v17 = (unint64_t *)&v14[v13 - 1600];
        *v17 = 0;
        v85[0] = v11 + 1;
        v18 = v11 + 1;
        if (v11 + 1 >= 2)
        {
          v19 = v11 + 1;
          while (1)
          {
            v18 = v19 >> 1;
            v22 = (v19 >> 1) - 1;
            v23 = v22 >= 0xC8 ? (char *)__src + 8 * v22 - 1600 : (char *)&v85[v22 + 1];
            v24 = *(_QWORD *)v23;
            v25 = v9[6] & 0x7FFFFFF;
            v26 = *(_DWORD *)(v24 + 24) & 0x7FFFFFF;
            if (v25 >= v26)
            {
              if (v25 > v26)
                break;
              v27 = v9[7] >> 7;
              v28 = *(_DWORD *)(v24 + 28) >> 7;
              v29 = v28 == 0x1FFFFFF || v28 > v27;
              v30 = v29;
              if (v27 == 0x1FFFFFF || !v30)
                break;
            }
            v20 = 8 * v19 - 8;
            v21 = (char *)__src + v20 - 1600;
            if (v19 < 0xC9)
              v21 = (char *)&v85[1] + v20;
            *(_QWORD *)v21 = v24;
            v29 = v19 > 3;
            v19 >>= 1;
            if (!v29)
              goto LABEL_35;
          }
          v18 = v19;
        }
LABEL_35:
        v31 = v18 - 1;
        if (v31 >= 0xC8)
          v32 = (unint64_t *)((char *)__src + 8 * v31 - 1600);
        else
          v32 = &v85[v31 + 1];
        *v32 = (unint64_t)v9;
        v33 = v9[11];
        if (!(_DWORD)v33)
          break;
        v9 = (_DWORD *)(v7[317] + 8 * v33);
        ++v11;
      }
      while (v9);
    }
    v34 = size_directory_min_heap_take_min(v85);
    if (!v34)
    {
LABEL_120:
      pas_large_utility_free_heap_deallocate_for_allocation_config((unint64_t)__src, 8 * v87);
      return;
    }
    v35 = v34;
    v36 = 0;
    while (1)
    {
      v37 = v35;
      v35 = size_directory_min_heap_take_min(v85);
      v40 = *(_DWORD *)(v37 + 36);
      if (v40 && *(_BYTE *)(v37 + 15))
      {
        if (a3)
        {
          v41 = *a3;
          v42 = (uint64x2_t)xmmword_19919FD80;
          if ((_DWORD)v41 == -1)
          {
            v41 = 0;
            v43 = 0;
            v44 = (unint64_t)*(unsigned int *)(v37 + 28) >> 7;
            if (*(_DWORD *)(v37 + 28) >> 7 == 0x1FFFFFF)
              goto LABEL_109;
            goto LABEL_68;
          }
        }
        else
        {
          if ((*(_BYTE *)(*(_QWORD *)v5 + 2) & 2) != 0)
            v45 = (*(uint64_t (**)(_QWORD))(pas_heap_config_kind_for_config_table[*(_BYTE *)(v5 + 83) & 0x3F]
                                                    + 24))(*(_QWORD *)(v5 + 64));
          else
            v45 = 1;
          v42 = (uint64x2_t)xmmword_19919FD80;
          v46 = a2[84];
          if (a2[504])
            v47 = a2[532];
          else
            v47 = -1;
          if (v47 < v46)
            LOBYTE(v46) = v47;
          if (a2[56])
            v48 = v46;
          else
            v48 = v47;
          v41 = (unint64_t)(v45 + (1 << v48) - 1) >> v48;
        }
        v49 = *(unsigned int *)(v5 + 36);
        v50 = v41 >= v49;
        v43 = v41 < v49;
        if (v50)
          v41 = 0;
        v44 = (unint64_t)*(unsigned int *)(v37 + 28) >> 7;
        if (*(_DWORD *)(v37 + 28) >> 7 == 0x1FFFFFF)
        {
LABEL_109:
          if (!v43)
            goto LABEL_43;
          goto LABEL_42;
        }
      }
      else
      {
        v41 = 0;
        v43 = 0;
        v42 = (uint64x2_t)xmmword_19919FD80;
        v44 = (unint64_t)*(unsigned int *)(v37 + 28) >> 7;
        if (*(_DWORD *)(v37 + 28) >> 7 == 0x1FFFFFF)
          goto LABEL_109;
      }
LABEL_68:
      if (v35)
      {
        LODWORD(v51) = *(_DWORD *)(v35 + 28) >> 7;
        if ((_DWORD)v51 == 0x1FFFFFF)
          v51 = 0xFFFFFFFFLL;
        else
          v51 = v51;
      }
      else
      {
        v51 = 0xFFFFFFFFLL;
      }
      v52 = a2[56];
      v53 = a2[84];
      v54 = a2[504];
      v55 = a2[532];
      if (!a2[504])
        v55 = -1;
      if (v55 < v53)
        LOBYTE(v53) = v55;
      if (!a2[56])
        LOBYTE(v53) = v55;
      v56 = v51 - 1;
      if (((unint64_t)(*(_DWORD *)(v37 + 24) & 0x7FFFFFF) + (1 << v53) - 1) >> v53 < v56)
        v56 = ((unint64_t)(*(_DWORD *)(v37 + 24) & 0x7FFFFFF) + (1 << v53) - 1) >> v53;
      v57 = *(unsigned int *)(v5 + 36);
      if (v56 + 1 < v57)
        v58 = v56 + 1;
      else
        v58 = *(unsigned int *)(v5 + 36);
      v59 = v58 - v44;
      if (v58 > v44)
      {
        v60 = *(_QWORD *)(a4 + 16);
        if (v40)
        {
          v61 = *(_QWORD *)(a4 + 8);
          do
          {
            v62 = 4 * v44;
            *(_DWORD *)(v60 + v62) = (v37 - pas_compact_heap_reservation_base) >> 3;
            *(_DWORD *)(v61 + v62) = v40;
            v43 = v43 & (v41 != v44++);
            v57 = *(unsigned int *)(v5 + 36);
            if (v56 + 1 >= v57)
              v63 = *(unsigned int *)(v5 + 36);
            else
              v63 = v56 + 1;
          }
          while (v44 < v63);
        }
        else
        {
          if (v59 < 8)
            goto LABEL_98;
          v64 = (int64x2_t *)(v60 + 4 * v44);
          if (v64 < (int64x2_t *)&pas_compact_heap_reservation_available_size
            && v60 + 4 * v58 > (unint64_t)&pas_compact_heap_reservation_base)
          {
            goto LABEL_98;
          }
          v44 += v59 & 0xFFFFFFFFFFFFFFF8;
          v38.i64[0] = v37;
          v65 = v64 + 1;
          v66 = v59 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v39.i64[0] = pas_compact_heap_reservation_base;
            v39 = (int64x2_t)vdupq_lane_s32(vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vsubq_s64(v38, v39), v42)), 0);
            v65[-1] = v39;
            *v65 = v39;
            v65 += 2;
            v66 -= 8;
          }
          while (v66);
          if (v59 != (v59 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_98:
            v67 = v58 - v44;
            v68 = (_DWORD *)(v60 + 4 * v44);
            do
            {
              *v68++ = (v37 - pas_compact_heap_reservation_base) >> 3;
              --v67;
            }
            while (v67);
          }
        }
      }
      v69 = a2[84];
      if (v54)
        v70 = a2[532];
      else
        v70 = -1;
      if (v70 < v69)
        LOBYTE(v69) = v70;
      if (v52)
        v71 = v69;
      else
        v71 = v70;
      if (((unint64_t)(*(_DWORD *)(v37 + 24) & 0x7FFFFFF) + (1 << v71) - 1) >> v71 < v57)
        goto LABEL_109;
      v72 = *(_DWORD *)(v37 + 36);
      v73 = *(_DWORD *)(v37 + 28) >> 7;
      if (v73 == 0x1FFFFFF)
        v73 = -1;
      v74 = *(unsigned int *)(a4 + 28);
      if ((_DWORD)v74)
        v75 = pas_compact_heap_reservation_base + 8 * v74;
      else
        v75 = 0;
      v76 = *(unsigned int *)(v75 + 8);
      v77 = pas_compact_heap_reservation_base + 8 * v76;
      if (!(_DWORD)v76)
        v77 = 0;
      v78 = (_DWORD *)(v77 + 16 * v36);
      *v78 = (v37 - pas_compact_heap_reservation_base) >> 3;
      v78[1] = v72;
      v78[2] = v73;
      v78[3] = v56;
      ++v36;
      if ((v43 & 1) == 0)
        goto LABEL_43;
LABEL_42:
      *(_DWORD *)(*(_QWORD *)(a4 + 8) + 4 * v41) = v40;
LABEL_43:
      if (!v35)
        goto LABEL_120;
    }
  }
}

unint64_t size_directory_min_heap_take_min(unint64_t *a1)
{
  unint64_t v1;
  unint64_t result;
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  _BOOL4 v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v1 = *a1;
  if (!*a1)
    return 0;
  v4 = a1 + 1;
  result = a1[1];
  v5 = v1 - 1;
  if (v1 > 0xC8)
  {
    v35 = (uint64_t *)(a1[201] + 8 * v5 - 1600);
    v7 = *v35;
    *v35 = 0;
    *a1 = v5;
    a1[1] = 0;
  }
  else
  {
    v6 = &v4[v5];
    v7 = *v6;
    *v6 = 0;
    *a1 = v5;
    a1[1] = 0;
    if (v1 == 1)
      return result;
  }
  v8 = 1;
  v9 = 2;
  v10 = 3;
  if (v5 >= 3)
    goto LABEL_5;
LABEL_23:
  if (v9 <= v5)
  {
    v12 = 0;
    v15 = 1;
    v16 = v9 - 1;
    if (v9 - 1 <= 0xC7)
    {
LABEL_25:
      v19 = &v4[v16];
      goto LABEL_26;
    }
    while (1)
    {
      v19 = (uint64_t *)(a1[201] + 8 * v16 - 1600);
LABEL_26:
      v21 = *v19;
      v22 = *(_DWORD *)(v7 + 24) & 0x7FFFFFF;
      v23 = *(_DWORD *)(v21 + 24) & 0x7FFFFFF;
      if (v22 < v23)
        goto LABEL_47;
      if (v22 > v23)
      {
        v24 = 0;
        if (v15)
          goto LABEL_48;
        goto LABEL_29;
      }
      v32 = *(_DWORD *)(v7 + 28) >> 7;
      if (v32 == 0x1FFFFFF)
        v32 = -1;
      v33 = *(_DWORD *)(v21 + 28) >> 7;
      if (v33 == 0x1FFFFFF)
        v33 = -1;
      if (v32 >= v33)
      {
        v24 = v32 <= v33;
        if (v15)
        {
LABEL_48:
          if (v24)
            break;
LABEL_49:
          v34 = v8 - 1;
          if (v34 <= 0xC7)
            v20 = &v4[v34];
          else
            v20 = (_QWORD *)(a1[201] + 8 * v34 - 1600);
          *v20 = v21;
          v8 = v9;
          v9 *= 2;
          v10 = (2 * v8) | 1;
          if (v10 > v5)
            goto LABEL_23;
          goto LABEL_5;
        }
      }
      else
      {
LABEL_47:
        v24 = 1;
        if (v15)
          goto LABEL_48;
      }
LABEL_29:
      if (!v24)
      {
        v25 = *(_DWORD *)(v12 + 24) & 0x7FFFFFF;
        if (v25 >= v23)
        {
          if (v25 > v23)
            goto LABEL_49;
          v26 = *(_DWORD *)(v12 + 28) >> 7;
          v27 = *(_DWORD *)(v21 + 28) >> 7;
          v28 = v27 == 0x1FFFFFF || v27 > v26;
          v29 = v28;
          if (v26 == 0x1FFFFFF || !v29)
            goto LABEL_49;
        }
      }
      v30 = v8 - 1;
      if (v30 > 0xC7)
        v31 = (_QWORD *)(a1[201] + 8 * v30 - 1600);
      else
        v31 = &v4[v30];
      *v31 = v12;
      v8 = v10;
      v9 = 2 * v10;
      v10 = (2 * v10) | 1;
      if (v10 > v5)
        goto LABEL_23;
LABEL_5:
      if (v9 > 0xC7)
        v11 = (uint64_t *)(a1[201] + 8 * v9 - 1600);
      else
        v11 = &v4[v9];
      v12 = *v11;
      v13 = *(_DWORD *)(v7 + 24) & 0x7FFFFFF;
      v14 = *(_DWORD *)(v12 + 24) & 0x7FFFFFF;
      if (v13 < v14)
      {
LABEL_17:
        v15 = 1;
        v16 = v9 - 1;
        if (v9 - 1 <= 0xC7)
          goto LABEL_25;
      }
      else if (v13 <= v14)
      {
        v17 = *(_DWORD *)(v7 + 28) >> 7;
        if (v17 == 0x1FFFFFF)
          v17 = -1;
        v18 = *(_DWORD *)(v12 + 28) >> 7;
        if (v18 == 0x1FFFFFF)
          v18 = -1;
        if (v17 < v18)
          goto LABEL_17;
        v15 = v17 <= v18;
        v16 = v9 - 1;
        if (v9 - 1 <= 0xC7)
          goto LABEL_25;
      }
      else
      {
        v15 = 0;
        v16 = v9 - 1;
        if (v9 - 1 <= 0xC7)
          goto LABEL_25;
      }
    }
  }
  v36 = v8 - 1;
  if ((unint64_t)(v8 - 1) > 0xC7)
    *(_QWORD *)(a1[201] + 8 * v36 - 1600) = v7;
  else
    v4[v36] = v7;
  return result;
}

BOOL pas_segregated_page_lock_with_unbias_impl(uint64_t a1, os_unfair_lock_t *a2, os_unfair_lock_t lock)
{
  unint64_t StatusReg;
  unsigned int v7;
  os_unfair_lock_s *v9;
  uint64_t v10;
  os_unfair_lock_t v11;
  unsigned int v13;
  int v15;
  unsigned int v16;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&lock->_os_unfair_lock_opaque))
  {
    if (!__stxr(v7, &lock->_os_unfair_lock_opaque))
    {
      v9 = *(os_unfair_lock_s **)(a1 + 8);
      if (v9 != lock)
        return v9 == lock;
      goto LABEL_7;
    }
  }
  __clrex();
  os_unfair_lock_lock(lock);
  v9 = *(os_unfair_lock_s **)(a1 + 8);
  if (v9 != lock)
    return v9 == lock;
LABEL_7:
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (os_unfair_lock_t)((v10 & 0xFFFFFFFFFFFFFFF8) + 20);
  if ((v10 & 6) == 0 && v11 != lock)
  {
    v13 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v11->_os_unfair_lock_opaque))
    {
      if (!__stxr(v13, &v11->_os_unfair_lock_opaque))
        goto LABEL_16;
    }
    __clrex();
    os_unfair_lock_lock(v11);
LABEL_16:
    *(_QWORD *)(a1 + 8) = v11;
    v15 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v16 = __ldxr(&lock->_os_unfair_lock_opaque);
      if (v16 != v15)
        break;
      if (!__stlxr(0, &lock->_os_unfair_lock_opaque))
        goto LABEL_21;
    }
    __clrex();
    os_unfair_lock_unlock(lock);
LABEL_21:
    *a2 = v11;
  }
  return v9 == lock;
}

os_unfair_lock_t pas_segregated_page_switch_lock_slow(uint64_t a1, os_unfair_lock_t lock, os_unfair_lock_t a3)
{
  unint64_t StatusReg;
  int v6;
  unsigned int v7;
  unsigned int v8;
  os_unfair_lock_s *v10;
  os_unfair_lock_t v12;

  v12 = lock;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_3:
  if (lock)
  {
    v6 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v7 = __ldxr(&lock->_os_unfair_lock_opaque);
      if (v7 != v6)
        break;
      if (!__stlxr(0, &lock->_os_unfair_lock_opaque))
        goto LABEL_9;
    }
    __clrex();
    os_unfair_lock_unlock(lock);
  }
LABEL_9:
  v12 = a3;
  v8 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&a3->_os_unfair_lock_opaque))
  {
    if (!__stxr(v8, &a3->_os_unfair_lock_opaque))
    {
      v10 = *(os_unfair_lock_s **)(a1 + 8);
      if (v10 == a3)
        return v12;
LABEL_2:
      lock = v12;
      a3 = v10;
      goto LABEL_3;
    }
  }
  __clrex();
  if (!pas_segregated_page_lock_with_unbias_impl(a1, &v12, a3))
  {
    v10 = *(os_unfair_lock_s **)(a1 + 8);
    goto LABEL_2;
  }
  return v12;
}

void pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(uint64_t a1, os_unfair_lock_s **a2, os_unfair_lock_s *a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  unint64_t StatusReg;
  unint64_t v8;
  os_unfair_lock_s *i;
  BOOL v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  unsigned int v14;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v26;
  unsigned int v29;
  unsigned int v31;
  os_unfair_lock_s *v33;
  os_unfair_lock_s *v34;
  int v35;
  unsigned int v36;
  os_unfair_lock_s *v37;
  unint64_t v38;
  os_unfair_lock_s *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;

  if (a3)
  {
    v5 = a3 + 4;
    v6 = *a2;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (2)
    {
      for (i = *(os_unfair_lock_s **)(a1 + 8); ; i = v13)
      {
LABEL_6:
        v10 = v6 == i && v6 == v5;
        if (v10)
          return;
        v11 = *(_QWORD *)(a1 + 32);
        if ((v11 & 6) == 0)
          break;
        v12 = *a2;
        if (*a2 == i)
        {
          v13 = *(os_unfair_lock_s **)(a1 + 8);
          if (v13 == i)
            return;
        }
        else
        {
          if (v12)
          {
            v22 = *(_DWORD *)(StatusReg + 24);
            while (1)
            {
              v23 = __ldxr(&v12->_os_unfair_lock_opaque);
              if (v23 != v22)
                break;
              if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
                goto LABEL_46;
            }
            __clrex();
            os_unfair_lock_unlock(v12);
          }
LABEL_46:
          if (i)
          {
            v24 = *(_DWORD *)(StatusReg + 24);
            while (!__ldaxr(&i->_os_unfair_lock_opaque))
            {
              if (!__stxr(v24, &i->_os_unfair_lock_opaque))
                goto LABEL_52;
            }
            __clrex();
            os_unfair_lock_lock(i);
          }
LABEL_52:
          *a2 = i;
          v13 = *(os_unfair_lock_s **)(a1 + 8);
          if (v13 == i)
            return;
        }
        v6 = *a2;
      }
      if (v6 == v5)
      {
        v14 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&i->_os_unfair_lock_opaque))
        {
          if (!__stxr(v14, &i->_os_unfair_lock_opaque))
            goto LABEL_75;
        }
        __clrex();
        v6 = *a2;
      }
      if (v6 == i)
      {
        v18 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&v5->_os_unfair_lock_opaque))
        {
          if (!__stxr(v18, &v5->_os_unfair_lock_opaque))
            goto LABEL_75;
        }
        __clrex();
        v6 = *a2;
        if (!*a2)
        {
LABEL_32:
          if (v5 == i)
          {
            v20 = *(_DWORD *)(StatusReg + 24);
            while (!__ldaxr(&v5->_os_unfair_lock_opaque))
            {
              if (!__stxr(v20, &v5->_os_unfair_lock_opaque))
              {
                *a2 = v5;
                i = *(os_unfair_lock_s **)(a1 + 8);
                v6 = v5;
                if (i != v5)
                  goto LABEL_6;
                return;
              }
            }
            __clrex();
            os_unfair_lock_lock(v5);
            *a2 = v5;
            i = *(os_unfair_lock_s **)(a1 + 8);
            v6 = v5;
            if (i != v5)
              goto LABEL_6;
            return;
          }
          v26 = *(_DWORD *)(v8 + 24);
          if (v5 < i || (os_unfair_lock_s *)((v11 & 0xFFFFFFFFFFFFFFF8) + 20) == i)
          {
            while (!__ldaxr(&v5->_os_unfair_lock_opaque))
            {
              if (!__stxr(v26, &v5->_os_unfair_lock_opaque))
                goto LABEL_68;
            }
            __clrex();
            os_unfair_lock_lock(v5);
LABEL_68:
            v31 = *(_DWORD *)(v8 + 24);
            while (!__ldaxr(&i->_os_unfair_lock_opaque))
            {
              if (!__stxr(v31, &i->_os_unfair_lock_opaque))
                goto LABEL_75;
            }
            v33 = i;
          }
          else
          {
            while (!__ldaxr(&i->_os_unfair_lock_opaque))
            {
              if (!__stxr(v26, &i->_os_unfair_lock_opaque))
                goto LABEL_63;
            }
            __clrex();
            os_unfair_lock_lock(i);
LABEL_63:
            v29 = *(_DWORD *)(v8 + 24);
            while (!__ldaxr(&v5->_os_unfair_lock_opaque))
            {
              if (!__stxr(v29, &v5->_os_unfair_lock_opaque))
                goto LABEL_75;
            }
            v33 = v5;
          }
          __clrex();
          os_unfair_lock_lock(v33);
LABEL_75:
          v34 = *(os_unfair_lock_s **)(a1 + 8);
          if (v34 == i)
            *(_QWORD *)(a1 + 8) = v5;
          v35 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v36 = __ldxr(&i->_os_unfair_lock_opaque);
            if (v36 != v35)
              break;
            if (!__stlxr(0, &i->_os_unfair_lock_opaque))
              goto LABEL_4;
          }
          __clrex();
          os_unfair_lock_unlock(i);
LABEL_4:
          *a2 = v5;
          v6 = v5;
          if (v34 == i)
            return;
          continue;
        }
      }
      else if (!v6)
      {
        goto LABEL_32;
      }
      break;
    }
    v16 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v17 = __ldxr(&v6->_os_unfair_lock_opaque);
      if (v17 != v16)
        break;
      if (!__stlxr(0, &v6->_os_unfair_lock_opaque))
        goto LABEL_32;
    }
    __clrex();
    os_unfair_lock_unlock(v6);
    goto LABEL_32;
  }
  v37 = *(os_unfair_lock_s **)(a1 + 8);
  v38 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    while (1)
    {
      v39 = *a2;
      if (*a2 != v37)
        break;
      v10 = *(_QWORD *)(a1 + 8) == (_QWORD)v37;
      v37 = *(os_unfair_lock_s **)(a1 + 8);
      if (v10)
        return;
    }
    if (v39)
    {
      v40 = *(_DWORD *)(v38 + 24);
      while (1)
      {
        v41 = __ldxr(&v39->_os_unfair_lock_opaque);
        if (v41 != v40)
          break;
        if (!__stlxr(0, &v39->_os_unfair_lock_opaque))
          goto LABEL_92;
      }
      __clrex();
      os_unfair_lock_unlock(v39);
    }
LABEL_92:
    if (v37)
    {
      v42 = *(_DWORD *)(v38 + 24);
      while (!__ldaxr(&v37->_os_unfair_lock_opaque))
      {
        if (!__stxr(v42, &v37->_os_unfair_lock_opaque))
          goto LABEL_98;
      }
      __clrex();
      os_unfair_lock_lock(v37);
    }
LABEL_98:
    *a2 = v37;
    v10 = *(_QWORD *)(a1 + 8) == (_QWORD)v37;
    v37 = *(os_unfair_lock_s **)(a1 + 8);
  }
  while (!v10);
}

void pas_segregated_page_construct(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int128 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t i;
  uint64_t v37;
  uint64_t v38;

  v5 = a2;
  v7 = *(_QWORD *)(a4 + 32);
  v8 = *(_QWORD *)(a4 + 40);
  v9 = *(_DWORD *)(a4 + 96);
  v10 = *(_DWORD *)(a4 + 100);
  v11 = *(_QWORD *)(a4 + 120);
  v38 = *(_QWORD *)(a4 + 128);
  v12 = *(_QWORD *)(a4 + 144);
  v37 = *(_QWORD *)(a4 + 136);
  v13 = *(_QWORD *)(a4 + 152);
  v14 = a2 & 7;
  if (v14 == 3)
    v15 = 3;
  else
    v15 = 4;
  if ((a2 & 7) == 3)
    v16 = 1;
  else
    v16 = 2;
  if (v9)
    v17 = 1;
  else
    v17 = v16;
  if (v9 == 1)
    v18 = v15;
  else
    v18 = v17;
  *(_BYTE *)a1 = v18;
  if (v10 == 1)
  {
LABEL_14:
    v19 = 0;
  }
  else
  {
    switch(a2 & 7)
    {
      case 0:
      case 1:
        v19 = (a2 & 0xFFFFFFFFFFFFFFF8) + 20;
        break;
      case 2:
        v20 = a2 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_21;
      case 3:
        v21 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18);
        v22 = *(unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        goto LABEL_20;
      case 4:
        v21 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 6);
        v22 = *(unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 4);
LABEL_20:
        v20 = ((8 * v22) | (v21 << 19)) + pas_compact_heap_reservation_base;
LABEL_21:
        v19 = v20 + 12;
        break;
      default:
        goto LABEL_14;
    }
  }
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 32) = a2;
  v23 = v11 + 31;
  bzero((void *)(a1 + 44), ((unint64_t)(v11 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  v24 = (unsigned __int128 *)(a1 + 16);
  do
    __ldxp(v24);
  while (__stxp(0, v24));
  *(_DWORD *)(a1 + 40) = -1;
  if (v14 == 3)
  {
    *(_DWORD *)(a1 + 4) = 0;
    goto LABEL_39;
  }
  if (v14 == 5)
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v5 + 24) & 0x7FFFFFF;
    v25 = *(unsigned __int8 *)(v5 + 12);
    if (!*(_BYTE *)(v5 + 12))
      goto LABEL_39;
  }
  else
  {
    if (v5)
    {
      if ((v5 & 7u) >= 2)
      {
        if ((v5 & 7) != 4)
        {
          v5 = 0;
          *(_DWORD *)(a1 + 4) = MEMORY[0x18] & 0x7FFFFFF;
          v25 = MEMORY[0xC];
          if (!MEMORY[0xC])
            goto LABEL_39;
          goto LABEL_36;
        }
        v26 = *(unsigned __int8 *)((v5 | 7) + 2);
        v27 = *(unsigned __int16 *)(v5 | 7);
      }
      else
      {
        v26 = *(unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFF8) + 10);
        v27 = *(unsigned __int16 *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      v5 = ((8 * v27) | (v26 << 19)) + pas_compact_heap_reservation_base;
    }
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v5 + 24) & 0x7FFFFFF;
    v25 = *(unsigned __int8 *)(v5 + 12);
    if (!*(_BYTE *)(v5 + 12))
      goto LABEL_39;
  }
LABEL_36:
  if (*((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + v25) + 172)
    && (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 24))(*(_DWORD *)(v5 + 24) & 0x7FFFFFF))
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v5 + 32);
  }
LABEL_39:
  *(_BYTE *)(a1 + 1) = 0;
  *(_BYTE *)(a1 + 3) = 0;
  if (v7 != v8)
  {
    v28 = a1 + 44 + 4 * (v23 >> 5);
    v29 = v7 / v8;
    if (a3)
    {
      if (v8 <= v7)
      {
        do
        {
          --v29;
          if (*(unsigned __int8 *)(v28 + v29) != 255)
            *(_BYTE *)(v28 + v29) = 0;
        }
        while (v29);
      }
    }
    else
    {
      bzero((void *)(a1 + 44 + 4 * (v23 >> 5)), v29);
    }
    if (v14 == 3)
      v30 = v38;
    else
      v30 = v37;
    if (v14 == 3)
      v31 = v12;
    else
      v31 = v13;
    v32 = v31 + v30;
    if (v30)
    {
      v33 = 0;
      v34 = (v30 - 1) / v8;
      do
        ++*(_BYTE *)(v28 + v33++);
      while (v33 <= v34);
    }
    if (v32 != v7)
    {
      v35 = v32 / v8;
      for (i = (v7 - 1) / v8; v35 <= i; ++v35)
        ++*(_BYTE *)(v28 + v35);
    }
  }
  *(_BYTE *)(a1 + 2) = 0;
}

uint64_t pas_segregated_page_note_emptiness(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t index;

  v2 = result;
  if (a2 != 1)
  {
    if (a2)
      goto LABEL_8;
    v3 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      result = mach_approximate_time();
      v5 = *v3;
      v4 = v3[1];
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      get_timebase_info_slow();
      result = mach_approximate_time();
      v5 = timebase_info;
      v4 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_6:
        v6 = result * v5;
        v7 = (unsigned __int128 *)(v2 + 16);
        v8 = v6 / v4;
        do
          __ldxp(v7);
        while (__stxp(v8, v7));
LABEL_8:
        v9 = *(_QWORD *)(v2 + 32);
        v10 = v9 & 7;
        if (v10 < 2)
          goto LABEL_9;
        goto LABEL_15;
      }
    }
    pas_get_epoch_first = 1;
    goto LABEL_6;
  }
  v11 = (unsigned int *)timebase_info_ptr;
  if (timebase_info_ptr)
  {
    result = mach_approximate_time();
    v12 = *v11;
    v13 = v11[1];
    if ((pas_get_epoch_first & 1) != 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  get_timebase_info_slow();
  result = mach_approximate_time();
  v12 = timebase_info;
  v13 = *(unsigned int *)algn_1ECF57B54;
  if ((pas_get_epoch_first & 1) == 0)
LABEL_13:
    pas_get_epoch_first = 1;
LABEL_14:
  *(_QWORD *)(v2 + 16) = result * v12 / v13;
  v9 = *(_QWORD *)(v2 + 32);
  v10 = v9 & 7;
  if (v10 < 2)
  {
LABEL_9:
    if (!*(_BYTE *)(v2 + 1))
      return pas_segregated_directory_view_did_become_empty_at_index(((8 * *(unsigned __int16 *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8)) | ((unint64_t)*(unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFF8) + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)((v9 & 0xFFFFFFFFFFFFFFF8) + 12));
    return result;
  }
LABEL_15:
  if (v10 == 3)
  {
    v14 = v9 & 0xFFFFFFFFFFFFFFF8;
    v15 = *(unsigned __int16 *)(v14 + 16) | ((unint64_t)*(unsigned __int8 *)(v14 + 18) << 16);
    if ((_DWORD)v15)
      v16 = pas_compact_heap_reservation_base + 8 * v15;
    else
      v16 = 0;
    if (!*(_DWORD *)(v16 + 24))
    {
      v17 = *(_QWORD *)(v14 + 8);
      index = pas_segregated_view_get_index(v16 | 2);
      return pas_segregated_directory_view_did_become_empty_at_index(v17, index);
    }
  }
  return result;
}

uint64_t pas_segregated_page_take_empty_granules(uint64_t a1, _QWORD *a2, os_unfair_lock_t *a3, int a4, int a5)
{
  os_unfair_lock_s **v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t);
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  unsigned int v37;
  os_unfair_lock_t *v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  os_unfair_lock_s **v50;
  os_unfair_lock_s *v51;
  unsigned int v52;
  os_unfair_lock_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  v7 = a3;
  v10 = *(_QWORD *)(a1 + 32);
  switch(*(_DWORD *)(a1 + 32) & 7)
  {
    case 0:
    case 1:
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      v12 = *(unsigned __int8 *)(v11 + 10);
      v13 = *(unsigned __int16 *)(v11 + 8);
      goto LABEL_7;
    case 2:
      v15 = *(_QWORD *)((*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
      goto LABEL_9;
    case 3:
      v15 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
      goto LABEL_9;
    case 4:
      v16 = (unsigned __int16 *)(v10 | 7);
      v12 = *((unsigned __int8 *)v16 + 2);
      v13 = *v16;
LABEL_7:
      v15 = ((8 * v13) | (v12 << 19)) + pas_compact_heap_reservation_base;
      goto LABEL_9;
    case 5:
      v15 = v10 & 0xFFFFFFFFFFFFFFF8;
LABEL_9:
      v14 = *(unsigned __int8 *)(v15 + 12);
      break;
    default:
      v14 = 0;
      break;
  }
  v17 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + v14);
  v18 = *(_QWORD *)(v17 + 32);
  v19 = *(_QWORD *)(v17 + 40);
  v20 = *(void (**)(uint64_t))(v17 + 64);
  v21 = a1 + 4 * ((unint64_t)(*(_QWORD *)(v17 + 120) + 31) >> 5);
  v22 = v18 / v19;
  v60 = *(_DWORD *)(v17 + 100);
  if (v60 == 1)
  {
    v63 = 0u;
    v64 = 0u;
    v23 = v21 + 44;
    v62 = 0u;
    if (v19 <= v18)
      goto LABEL_66;
LABEL_15:
    v26 = *v7;
    if (*v7)
      goto LABEL_73;
    goto LABEL_16;
  }
  v24 = *a3;
  v25 = *(os_unfair_lock_s **)(a1 + 8);
  if (*v7 == v25)
  {
    v63 = 0u;
    v64 = 0u;
    v23 = v21 + 44;
    v62 = 0u;
    if (v19 > v18)
      goto LABEL_15;
  }
  else
  {
    v54 = pas_segregated_page_switch_lock_slow(a1, v24, v25);
    v7 = a3;
    *a3 = v54;
    v63 = 0u;
    v64 = 0u;
    v23 = v21 + 44;
    v62 = 0u;
    if (v19 > v18)
      goto LABEL_15;
  }
LABEL_66:
  v55 = 0;
  v56 = 0;
  v57 = v18 / v19;
  do
  {
    while (1)
    {
      --v57;
      if (*(_BYTE *)(v23 + v57))
        break;
      *(_DWORD *)((char *)&v62 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v57;
      ++v55;
      *(_BYTE *)(v23 + v57) = -1;
      if (!v57)
        goto LABEL_72;
    }
    if (*(unsigned __int8 *)(v23 + v57) == 255)
      ++v56;
  }
  while (v57);
LABEL_72:
  *(_QWORD *)&v64 = v55;
  *((_QWORD *)&v64 + 1) = v56;
  v26 = *v7;
  if (*v7)
  {
LABEL_73:
    v58 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v59 = __ldxr(&v26->_os_unfair_lock_opaque);
      if (v59 != v58)
        break;
      if (!__stlxr(0, &v26->_os_unfair_lock_opaque))
        goto LABEL_78;
    }
    __clrex();
    os_unfair_lock_unlock(v26);
    v7 = a3;
LABEL_78:
    *v7 = 0;
    v20(a1);
    if (a4)
      goto LABEL_41;
    goto LABEL_17;
  }
LABEL_16:
  v20(a1);
  if (a4)
  {
LABEL_41:
    v42 = *(_QWORD *)(a1 + 32);
    switch(*(_DWORD *)(a1 + 32) & 7)
    {
      case 0:
      case 1:
        v43 = (v42 & 0xFFFFFFFFFFFFFFF8) + 16;
        break;
      case 2:
        v44 = v42 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_48;
      case 3:
        v45 = v42 & 0xFFFFFFFFFFFFFFF8;
        v46 = *(unsigned __int8 *)(v45 + 18);
        v47 = *(unsigned __int16 *)(v45 + 16);
        goto LABEL_47;
      case 4:
        v48 = v42 & 0xFFFFFFFFFFFFFFF8;
        v46 = *(unsigned __int8 *)(v48 + 6);
        v47 = *(unsigned __int16 *)(v48 + 4);
LABEL_47:
        v44 = ((8 * v47) | (v46 << 19)) + pas_compact_heap_reservation_base;
LABEL_48:
        v43 = v44 + 8;
        break;
      default:
        v43 = 0;
        break;
    }
    pas_free_granules_decommit_after_locking_range((uint64_t)&v62, a1, (uint64_t)a2, v43, v17, a5);
    return 1;
  }
LABEL_17:
  v27 = *(_QWORD *)(a1 + 32);
  switch(*(_DWORD *)(a1 + 32) & 7)
  {
    case 0:
    case 1:
      v28 = (os_unfair_lock_s *)((v27 & 0xFFFFFFFFFFFFFFF8) + 16);
      break;
    case 2:
      v29 = v27 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_24;
    case 3:
      v30 = v27 & 0xFFFFFFFFFFFFFFF8;
      v31 = *(unsigned __int8 *)(v30 + 18);
      v32 = *(unsigned __int16 *)(v30 + 16);
      goto LABEL_23;
    case 4:
      v33 = v27 & 0xFFFFFFFFFFFFFFF8;
      v31 = *(unsigned __int8 *)(v33 + 6);
      v32 = *(unsigned __int16 *)(v33 + 4);
LABEL_23:
      v29 = ((8 * v32) | (v31 << 19)) + pas_compact_heap_reservation_base;
LABEL_24:
      v28 = (os_unfair_lock_s *)(v29 + 8);
      break;
    default:
      v28 = 0;
      break;
  }
  v34 = a2[134];
  v35 = v34 - 1;
  while (v35 != -1)
  {
    v36 = *(os_unfair_lock_s **)(a2[133] + 8 * v35--);
    if (v36 == v28)
      goto LABEL_41;
  }
  if (v28 == (os_unfair_lock_s *)&pas_virtual_range_common_lock)
  {
    v41 = a2[132];
    if (v41)
    {
      v40 = a2 + 132;
LABEL_40:
      *v40 = v41 + 1;
      goto LABEL_41;
    }
  }
  if (!a5 && !v34 && !*a2)
  {
    v52 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&v28->_os_unfair_lock_opaque))
    {
      if (!__stxr(v52, &v28->_os_unfair_lock_opaque))
        goto LABEL_36;
    }
    __clrex();
    os_unfair_lock_lock(v28);
LABEL_36:
    if (v28 != (os_unfair_lock_s *)&pas_virtual_range_common_lock)
      goto LABEL_41;
    v40 = a2 + 132;
    v41 = a2[132];
    goto LABEL_40;
  }
  v37 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v38 = a3;
  while (!__ldaxr(&v28->_os_unfair_lock_opaque))
  {
    if (!__stxr(v37, &v28->_os_unfair_lock_opaque))
      goto LABEL_36;
  }
  __clrex();
  v50 = (os_unfair_lock_s **)a2[135];
  if (v50 && !*v50)
    *v50 = v28;
  if (v60 != 1)
  {
    v51 = *(os_unfair_lock_s **)(a1 + 8);
    if (*a3 != v51)
      *v38 = pas_segregated_page_switch_lock_slow(a1, *a3, v51);
  }
  while (v22)
  {
    --v22;
    if (((*(_DWORD *)((char *)&v62 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v22) & 1) != 0)
      *(_BYTE *)(v23 + v22) = 0;
  }
  return 0;
}

uint64_t pas_segregated_page_take_physically(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  os_unfair_lock_t v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  os_unfair_lock_t lock;
  char *v32;
  unint64_t v33;
  uint64_t v34;

  v8 = *(_QWORD *)(a1 + 32);
  switch(*(_DWORD *)(a1 + 32) & 7)
  {
    case 0:
    case 1:
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      v10 = *(unsigned __int8 *)(v9 + 10);
      v11 = *(unsigned __int16 *)(v9 + 8);
      goto LABEL_9;
    case 2:
      v18 = *(_QWORD *)((*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
      goto LABEL_11;
    case 3:
      v18 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
      goto LABEL_11;
    case 4:
      v19 = (unsigned __int16 *)(v8 | 7);
      v10 = *((unsigned __int8 *)v19 + 2);
      v11 = *v19;
LABEL_9:
      v18 = ((8 * v11) | (v10 << 19)) + pas_compact_heap_reservation_base;
      goto LABEL_11;
    case 5:
      v18 = v8 & 0xFFFFFFFFFFFFFFF8;
LABEL_11:
      v12 = *(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v18 + 12));
      v13 = v12[4];
      if (v13 > v12[5])
        goto LABEL_12;
      goto LABEL_4;
    default:
      v12 = pas_segregated_page_config_kind_for_config_table;
      v13 = *((_QWORD *)pas_segregated_page_config_kind_for_config_table + 4);
      if (v13 > *((_QWORD *)pas_segregated_page_config_kind_for_config_table + 5))
      {
LABEL_12:
        lock = 0;
        v20 = pas_segregated_page_take_empty_granules(a1, a2, &lock, a3, a4);
        v21 = lock;
        if (!lock)
          return v20;
        v22 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        while (1)
        {
          v23 = __ldxr(&v21->_os_unfair_lock_opaque);
          if (v23 != v22)
            break;
          if (!__stlxr(0, &v21->_os_unfair_lock_opaque))
            return v20;
        }
        __clrex();
        os_unfair_lock_unlock(v21);
      }
      else
      {
LABEL_4:
        v14 = v12[1];
        v15 = (os_unfair_lock_s *)((uint64_t (*)(uint64_t))v12[8])(a1);
        v16 = *(_QWORD *)(a1 + 32);
        switch(*(_DWORD *)(a1 + 32) & 7)
        {
          case 0:
          case 1:
            v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 16;
            break;
          case 2:
            v24 = v16 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_22;
          case 3:
            v25 = v16 & 0xFFFFFFFFFFFFFFF8;
            v26 = *(unsigned __int8 *)(v25 + 18);
            v27 = *(unsigned __int16 *)(v25 + 16);
            goto LABEL_21;
          case 4:
            v28 = v16 & 0xFFFFFFFFFFFFFFF8;
            v26 = *(unsigned __int8 *)(v28 + 6);
            v27 = *(unsigned __int16 *)(v28 + 4);
LABEL_21:
            v24 = ((8 * v27) | (v26 << 19)) + pas_compact_heap_reservation_base;
LABEL_22:
            v17 = v24 + 8;
            break;
          default:
            v17 = 0;
            break;
        }
        v29 = *(unsigned int *)(v14 + 1040);
        if (a3)
        {
          if (a3 == 1)
          {
            lock = v15;
            v32 = (char *)v15 + v13;
            v33 = v17;
            v34 = v29;
            pas_deferred_decommit_log_add_already_locked((uint64_t)a2, &lock, a4);
            return 1;
          }
          else
          {
            return 0;
          }
        }
        else
        {
          lock = v15;
          v32 = (char *)v15 + v13;
          v33 = v17;
          v34 = v29;
          return pas_deferred_decommit_log_add(a2, (uint64_t)&lock, a4);
        }
      }
      return v20;
  }
}

void pas_segregated_page_commit_fully(uint64_t a1, os_unfair_lock_t *a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int64x2_t v37;
  unint64_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  unint64_t v52;
  int8x16_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint32x4_t v57;
  int8x16_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  int8x16_t v61;
  uint32x4_t v62;
  int64x2_t v63;
  int64x2_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint32x4_t v68;
  uint32x4_t v69;
  uint32x4_t v70;
  uint32x4_t v71;
  unint64_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int8x16_t v75;
  int64x2_t v76;
  int64x2_t v77;
  uint16x8_t v78;
  uint32x4_t v79;
  int8x16_t v80;
  int64x2_t v81;
  int64x2_t v82;
  uint32x4_t v83;
  int64x2_t v84;
  uint64_t v85;
  os_unfair_lock_s *v86;
  uint64_t v87;
  unsigned int v88;
  _BOOL8 v89;
  os_unfair_lock_s *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  _BOOL4 v110;
  BOOL v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  os_unfair_lock_t v118;
  unsigned int v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  os_unfair_lock_t v124;
  int v125;
  unsigned int v126;
  os_unfair_lock_s *v127;
  os_unfair_lock_t lock;
  _QWORD v129[131];
  unint64_t v130;
  os_unfair_lock_t *p_lock;
  _BOOL8 v132;
  uint64_t v133;

  v6 = *(_QWORD *)(a1 + 32);
  switch(*(_DWORD *)(a1 + 32) & 7)
  {
    case 0:
    case 1:
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      v8 = *(unsigned __int8 *)(v7 + 10);
      v9 = *(unsigned __int16 *)(v7 + 8);
      goto LABEL_7;
    case 2:
      v11 = *(_QWORD *)((*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
      goto LABEL_9;
    case 3:
      v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
      goto LABEL_9;
    case 4:
      v12 = (unsigned __int16 *)(v6 | 7);
      v8 = *((unsigned __int8 *)v12 + 2);
      v9 = *v12;
LABEL_7:
      v11 = ((8 * v9) | (v8 << 19)) + pas_compact_heap_reservation_base;
      goto LABEL_9;
    case 5:
      v11 = v6 & 0xFFFFFFFFFFFFFFF8;
LABEL_9:
      v10 = *(unsigned __int8 *)(v11 + 12);
      break;
    default:
      v10 = 0;
      break;
  }
  v13 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + v10);
  v15 = *(_QWORD *)(v13 + 32);
  v14 = *(_QWORD *)(v13 + 40);
  v16 = *(_DWORD *)(v13 + 100);
  v17 = *(_QWORD *)(v13 + 120);
  v18 = *(const os_unfair_lock **)(a1 + 8);
  if (v18)
    os_unfair_lock_assert_owner(v18);
  if (a3 == 1)
  {
    v19 = *(_QWORD *)(a1 + 32);
    switch(*(_DWORD *)(a1 + 32) & 7)
    {
      case 0:
      case 1:
        v20 = (const os_unfair_lock *)((v19 & 0xFFFFFFFFFFFFFFF8) + 16);
        break;
      case 2:
        v21 = v19 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_20;
      case 3:
        v22 = v19 & 0xFFFFFFFFFFFFFFF8;
        v23 = *(unsigned __int8 *)(v22 + 18);
        v24 = *(unsigned __int16 *)(v22 + 16);
        goto LABEL_19;
      case 4:
        v25 = v19 & 0xFFFFFFFFFFFFFFF8;
        v23 = *(unsigned __int8 *)(v25 + 6);
        v24 = *(unsigned __int16 *)(v25 + 4);
LABEL_19:
        v21 = ((8 * v24) | (v23 << 19)) + pas_compact_heap_reservation_base;
LABEL_20:
        v20 = (const os_unfair_lock *)(v21 + 8);
        break;
      default:
        v20 = 0;
        break;
    }
    os_unfair_lock_assert_owner(v20);
  }
  if (v14 > v15)
    return;
  v26 = (unint64_t)(v17 + 31) >> 5;
  v27 = a1 + 4 * v26 + 44;
  v28 = v15 / v14;
  if (v28 < 8)
  {
    v29 = 0;
    v30 = v28;
    goto LABEL_36;
  }
  if (v28 < 0x20)
  {
    v29 = 0;
    v31 = 0;
LABEL_31:
    v72 = v28 & 0xFFFFFFFFFFFFFFF8;
    v30 = v28 & 7;
    v73 = 0uLL;
    v74 = (int64x2_t)(unint64_t)v29;
    v75 = (int8x16_t)vdupq_n_s64(1uLL);
    v76 = 0uLL;
    v77 = 0uLL;
    do
    {
      v78 = vmovl_u8((uint8x8_t)vceq_s8(vrev64_s8(*(int8x8_t *)(a1 + 4 * v26 + 37 + v28 + ~v31)), (int8x8_t)-1));
      v79 = vmovl_u16(*(uint16x4_t *)v78.i8);
      v80.i64[0] = v79.u32[0];
      v80.i64[1] = v79.u32[1];
      v81 = (int64x2_t)vandq_s8(v80, v75);
      v80.i64[0] = v79.u32[2];
      v80.i64[1] = v79.u32[3];
      v82 = (int64x2_t)vandq_s8(v80, v75);
      v83 = vmovl_high_u16(v78);
      v80.i64[0] = v83.u32[0];
      v80.i64[1] = v83.u32[1];
      v84 = (int64x2_t)vandq_s8(v80, v75);
      v80.i64[0] = v83.u32[2];
      v80.i64[1] = v83.u32[3];
      v77 = vaddq_s64(v77, (int64x2_t)vandq_s8(v80, v75));
      v76 = vaddq_s64(v76, v84);
      v73 = vaddq_s64(v73, v82);
      v74 = vaddq_s64(v74, v81);
      v31 += 8;
    }
    while (v72 != v31);
    v29 = vaddvq_s64(vaddq_s64(vaddq_s64(v74, v76), vaddq_s64(v73, v77)));
    if (v28 == v72)
      goto LABEL_40;
    goto LABEL_36;
  }
  v32 = 0;
  v33 = 0uLL;
  v34 = (int8x16_t)vdupq_n_s64(1uLL);
  v35.i64[0] = -1;
  v35.i64[1] = -1;
  v36 = 0uLL;
  v31 = v28 & 0xFFFFFFFFFFFFFFE0;
  v37 = 0uLL;
  v38 = v28 & 0xFFFFFFFFFFFFFFE0;
  v39 = 0uLL;
  v40 = 0uLL;
  v41 = 0uLL;
  v42 = 0uLL;
  v43 = 0uLL;
  v44 = 0uLL;
  v45 = 0uLL;
  v46 = 0uLL;
  v47 = 0uLL;
  v48 = 0uLL;
  v49 = 0uLL;
  v50 = 0uLL;
  v51 = 0uLL;
  do
  {
    v52 = v27 + v28 + ~v32;
    v53 = vrev64q_s8(*(int8x16_t *)(v52 - 15));
    v54 = (uint8x16_t)vceqq_s8(vextq_s8(v53, v53, 8uLL), v35);
    v55 = vmovl_u8(*(uint8x8_t *)v54.i8);
    v56 = vmovl_high_u8(v54);
    v57 = vmovl_high_u16(v56);
    v58.i64[0] = v57.u32[2];
    v58.i64[1] = v57.u32[3];
    v43 = vaddq_s64(v43, (int64x2_t)vandq_s8(v58, v34));
    v59 = vmovl_high_u16(v55);
    v60 = vmovl_u16(*(uint16x4_t *)v56.i8);
    v58.i64[0] = v57.u32[0];
    v58.i64[1] = v57.u32[1];
    v42 = vaddq_s64(v42, (int64x2_t)vandq_s8(v58, v34));
    v58.i64[0] = v60.u32[2];
    v58.i64[1] = v60.u32[3];
    v41 = vaddq_s64(v41, (int64x2_t)vandq_s8(v58, v34));
    v58.i64[0] = v59.u32[2];
    v58.i64[1] = v59.u32[3];
    v39 = vaddq_s64(v39, (int64x2_t)vandq_s8(v58, v34));
    v61 = vrev64q_s8(*(int8x16_t *)(v52 - 31));
    v62 = vmovl_u16(*(uint16x4_t *)v55.i8);
    v58.i64[0] = v60.u32[0];
    v58.i64[1] = v60.u32[1];
    v40 = vaddq_s64(v40, (int64x2_t)vandq_s8(v58, v34));
    v58.i64[0] = v62.u32[0];
    v58.i64[1] = v62.u32[1];
    v63 = (int64x2_t)vandq_s8(v58, v34);
    v58.i64[0] = v62.u32[2];
    v58.i64[1] = v62.u32[3];
    v64 = (int64x2_t)vandq_s8(v58, v34);
    v58.i64[0] = v59.u32[0];
    v58.i64[1] = v59.u32[1];
    v65 = (uint8x16_t)vceqq_s8(vextq_s8(v61, v61, 8uLL), v35);
    v37 = vaddq_s64(v37, (int64x2_t)vandq_s8(v58, v34));
    v66 = vmovl_u8(*(uint8x8_t *)v65.i8);
    v67 = vmovl_high_u8(v65);
    v36 = vaddq_s64(v36, v64);
    v68 = vmovl_high_u16(v67);
    v33 = vaddq_s64(v33, v63);
    v58.i64[0] = v68.u32[2];
    v58.i64[1] = v68.u32[3];
    v51 = vaddq_s64(v51, (int64x2_t)vandq_s8(v58, v34));
    v69 = vmovl_high_u16(v66);
    v70 = vmovl_u16(*(uint16x4_t *)v67.i8);
    v58.i64[0] = v68.u32[0];
    v58.i64[1] = v68.u32[1];
    v50 = vaddq_s64(v50, (int64x2_t)vandq_s8(v58, v34));
    v58.i64[0] = v70.u32[2];
    v58.i64[1] = v70.u32[3];
    v49 = vaddq_s64(v49, (int64x2_t)vandq_s8(v58, v34));
    v58.i64[0] = v69.u32[2];
    v58.i64[1] = v69.u32[3];
    v47 = vaddq_s64(v47, (int64x2_t)vandq_s8(v58, v34));
    v58.i64[0] = v70.u32[0];
    v58.i64[1] = v70.u32[1];
    v48 = vaddq_s64(v48, (int64x2_t)vandq_s8(v58, v34));
    v71 = vmovl_u16(*(uint16x4_t *)v66.i8);
    v58.i64[0] = v69.u32[0];
    v58.i64[1] = v69.u32[1];
    v46 = vaddq_s64(v46, (int64x2_t)vandq_s8(v58, v34));
    v58.i64[0] = v71.u32[2];
    v58.i64[1] = v71.u32[3];
    v45 = vaddq_s64(v45, (int64x2_t)vandq_s8(v58, v34));
    v58.i64[0] = v71.u32[0];
    v58.i64[1] = v71.u32[1];
    v44 = vaddq_s64(v44, (int64x2_t)vandq_s8(v58, v34));
    v32 += 32;
    v38 -= 32;
  }
  while (v38);
  v29 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v44, v33), vaddq_s64(v48, v40)), vaddq_s64(vaddq_s64(v46, v37), vaddq_s64(v50, v42))), vaddq_s64(vaddq_s64(vaddq_s64(v45, v36), vaddq_s64(v49, v41)), vaddq_s64(vaddq_s64(v47, v39), vaddq_s64(v51, v43)))));
  if (v28 == v31)
    goto LABEL_40;
  if ((v28 & 0x18) != 0)
    goto LABEL_31;
  v30 = v28 & 0x1F;
LABEL_36:
  v85 = a1 + 4 * v26 + 43;
  do
  {
    if (*(unsigned __int8 *)(v85 + v30) == 255)
      ++v29;
    --v30;
  }
  while (v30);
LABEL_40:
  if (!v29)
    return;
  lock = 0;
  *(_BYTE *)(a1 + 3) = 1;
  v86 = *a2;
  if (!*a2)
  {
    v87 = *(_QWORD *)(a1 + 32);
    v88 = v87 & 7;
    goto LABEL_43;
  }
  v95 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v96 = __ldxr(&v86->_os_unfair_lock_opaque);
    if (v96 != v95)
      break;
    if (!__stlxr(0, &v86->_os_unfair_lock_opaque))
      goto LABEL_57;
  }
  __clrex();
  v97 = v29;
  os_unfair_lock_unlock(v86);
  v29 = v97;
LABEL_57:
  *a2 = 0;
  v87 = *(_QWORD *)(a1 + 32);
  v88 = v87 & 7;
  if (v88 <= 4)
  {
LABEL_43:
    switch(v88)
    {
      case 0u:
      case 1u:
        v89 = a3 == 1;
        lock = (os_unfair_lock_t)((v87 & 0xFFFFFFFFFFFFFFF8) + 16);
        if (pas_physical_page_sharing_pool_balancing_enabled)
          goto LABEL_59;
        goto LABEL_104;
      case 2u:
        v90 = (os_unfair_lock_s *)(v87 & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_50;
      case 3u:
        v91 = v87 & 0xFFFFFFFFFFFFFFF8;
        v92 = *(unsigned __int8 *)(v91 + 18);
        v93 = *(unsigned __int16 *)(v91 + 16);
        goto LABEL_49;
      case 4u:
        v94 = v87 & 0xFFFFFFFFFFFFFFF8;
        v92 = *(unsigned __int8 *)(v94 + 6);
        v93 = *(unsigned __int16 *)(v94 + 4);
LABEL_49:
        v90 = (os_unfair_lock_s *)(((8 * v93) | (v92 << 19)) + pas_compact_heap_reservation_base);
LABEL_50:
        v89 = a3 == 1;
        lock = v90 + 2;
        if (!pas_physical_page_sharing_pool_balancing_enabled)
          goto LABEL_104;
        goto LABEL_59;
      default:
        break;
    }
  }
  v89 = a3 == 1;
  lock = 0;
  if (!pas_physical_page_sharing_pool_balancing_enabled)
    goto LABEL_104;
LABEL_59:
  v98 = v29 * v14;
  if (!*(_DWORD *)(v13 + 24) && *(_DWORD *)(v13 + 100) == 1)
  {
    if (!pas_physical_page_sharing_pool_balancing_enabled_for_utility)
      goto LABEL_104;
    while (1)
    {
      v99 = pas_physical_page_sharing_pool_balance;
      v100 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v100 != v99)
        break;
      if (__stlxr(pas_physical_page_sharing_pool_balance - v98, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_66;
      }
      v101 = 1;
LABEL_67:
      __dmb(0xBu);
      if (v101)
        goto LABEL_104;
    }
    __clrex();
LABEL_66:
    v101 = 0;
    goto LABEL_67;
  }
  do
  {
    while (1)
    {
      v104 = pas_physical_page_sharing_pool_balance;
      if (pas_physical_page_sharing_pool_balance < 0 || pas_physical_page_sharing_pool_balance < v98)
        break;
      v105 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v105 != pas_physical_page_sharing_pool_balance)
      {
        __clrex();
LABEL_82:
        v106 = 0;
        goto LABEL_83;
      }
      if (__stlxr(pas_physical_page_sharing_pool_balance - v98, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_82;
      }
      v106 = 1;
LABEL_83:
      __dmb(0xBu);
      if (v106)
        goto LABEL_104;
    }
    v102 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
    if (v102 == pas_physical_page_sharing_pool_balance)
    {
      if (!__stlxr(0, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        v103 = 1;
        goto LABEL_75;
      }
    }
    else
    {
      __clrex();
    }
    v103 = 0;
LABEL_75:
    __dmb(0xBu);
  }
  while (!v103);
  v107 = v98 - v104;
  if (v98 != v104)
  {
    bzero(v129, 0x428uLL);
    p_lock = &lock;
    v132 = v89;
    v133 = 0;
    while (1)
    {
      v108 = v130;
      if (v130 >= v107)
        break;
      v109 = pas_page_sharing_pool_take_least_recently_used((uint64_t)pas_physical_page_sharing_pool, v129, 0, 0);
      if (v109 != 3)
      {
        v108 = v130;
        v110 = v109 != 2;
        goto LABEL_91;
      }
    }
    v110 = 1;
LABEL_91:
    v111 = v108 >= v107;
    v112 = v108 - v107;
    v113 = !v111;
    if ((v110 & v113) != 0)
      v114 = 0;
    else
      v114 = v112;
    decommit_all((uint64_t)v129, 1);
    pas_bootstrap_free_heap_hold_lock_and_deallocate_for_config(v129[129], 32 * v129[130], 0);
    while (2)
    {
      v115 = pas_physical_page_sharing_pool_balance;
      v116 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v116 == v115)
      {
        if (!__stlxr(pas_physical_page_sharing_pool_balance + v114, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        {
          v117 = 1;
          goto LABEL_103;
        }
      }
      else
      {
        __clrex();
      }
      v117 = 0;
LABEL_103:
      __dmb(0xBu);
      if (v117)
        break;
      continue;
    }
  }
LABEL_104:
  if (!a3)
  {
    v118 = lock;
    v119 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&v118->_os_unfair_lock_opaque))
    {
      if (!__stxr(v119, &v118->_os_unfair_lock_opaque))
        goto LABEL_110;
    }
    __clrex();
    os_unfair_lock_lock(v118);
  }
LABEL_110:
  v121 = 0;
  if (v28 <= 1)
    v122 = 1;
  else
    v122 = v28;
  v123 = -1;
  do
  {
    if (*(unsigned __int8 *)(v27 + v121) == 255)
    {
      if (v123 == -1)
        v123 = v121;
    }
    else if (v123 != -1)
    {
      (*(void (**)(uint64_t))(v13 + 64))(a1);
      v123 = -1;
    }
    ++v121;
  }
  while (v122 != v121);
  if (v123 != -1)
    (*(void (**)(uint64_t))(v13 + 64))(a1);
  if (a3)
  {
LABEL_126:
    if (v16 != 1)
      goto LABEL_129;
  }
  else
  {
    v124 = lock;
    v125 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v126 = __ldxr(&v124->_os_unfair_lock_opaque);
      if (v126 != v125)
        break;
      if (!__stlxr(0, &v124->_os_unfair_lock_opaque))
        goto LABEL_126;
    }
    __clrex();
    os_unfair_lock_unlock(v124);
    if (v16 != 1)
    {
LABEL_129:
      v127 = *(os_unfair_lock_s **)(a1 + 8);
      if (*a2 != v127)
        *a2 = pas_segregated_page_switch_lock_slow(a1, *a2, v127);
    }
  }
  *(_BYTE *)(a1 + 3) = 0;
  do
  {
    --v28;
    if (*(unsigned __int8 *)(v27 + v28) == 255)
      *(_BYTE *)(v27 + v28) = 0;
  }
  while (v28);
}

uint64_t pas_segregated_page_verify_granules(unsigned __int8 *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(unsigned __int8 *);
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[4];
  _BYTE v26[256];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a1 + 4);
  switch(*((_DWORD *)a1 + 8) & 7)
  {
    case 0:
    case 1:
      v3 = v2 & 0xFFFFFFFFFFFFFFF8;
      v4 = *(unsigned __int8 *)(v3 + 10);
      v5 = *(unsigned __int16 *)(v3 + 8);
      goto LABEL_7;
    case 2:
      v7 = *(_QWORD *)((*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
      goto LABEL_9;
    case 3:
      v7 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
      goto LABEL_9;
    case 4:
      v8 = (unsigned __int16 *)(v2 | 7);
      v4 = *((unsigned __int8 *)v8 + 2);
      v5 = *v8;
LABEL_7:
      v7 = ((8 * v5) | (v4 << 19)) + pas_compact_heap_reservation_base;
      goto LABEL_9;
    case 5:
      v7 = v2 & 0xFFFFFFFFFFFFFFF8;
LABEL_9:
      v6 = *(unsigned __int8 *)(v7 + 12);
      break;
    default:
      v6 = 0;
      break;
  }
  v9 = (uint64_t *)*(&pas_segregated_page_config_kind_for_config_table + v6);
  v10 = v9[4];
  v11 = v9[5];
  v12 = (uint64_t (*)(unsigned __int8 *))v9[8];
  v13 = v9 + 16;
  v14 = v9 + 17;
  v15 = v9 + 18;
  v16 = v9 + 19;
  v17 = *a1 - 2;
  if ((v17 & 0xFFFFFFFD) == 0)
    v13 = v14;
  v18 = *v13;
  if ((v17 & 0xFFFFFFFD) != 0)
    v16 = v15;
  v19 = *v16;
  __memset_chk();
  v20 = v18 + v19;
  if (v18)
  {
    v21 = 0;
    do
      ++v26[v21++];
    while (v21 <= (v18 - 1) / v11);
  }
  v25[0] = v26;
  v25[1] = v12(a1);
  v25[2] = v10;
  v25[3] = v11;
  result = for_each_live_object(*((_QWORD *)a1 + 4), (unsigned int (*)(uint64_t, unint64_t, unint64_t, uint64_t))verify_granules_live_object_callback, (uint64_t)v25);
  if (v20 != v10)
  {
    v23 = v20 / v11;
    v24 = (v10 - 1) / v11;
    if (v20 / v11 <= v24)
    {
      do
        ++v26[v23++];
      while (v23 <= v24);
    }
  }
  return result;
}

uint64_t verify_granules_live_object_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    v4 = a4[1];
    v5 = a4[3];
    v6 = (a2 - v4) / v5;
    v7 = (a3 + ~v4) / v5;
    if (v6 <= v7)
    {
      v8 = *a4;
      do
        ++*(_BYTE *)(v8 + v6++);
      while (v6 <= v7);
    }
  }
  return 1;
}

void pas_segregated_page_deallocation_did_fail(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  pas_deallocation_did_fail((uint64_t)"Alloc bit not set in pas_segregated_page_deallocate_with_page", a1, a3, a4, a5, a6, a7, a8);
}

uint64_t pas_segregated_page_get_num_committed_granules(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v16;
  int64x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int64x2_t v20;
  int64x2_t v21;
  unint64_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  uint64_t v36;
  int8x16_t v37;
  uint8x16_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint32x4_t v41;
  int8x16_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  int8x16_t v45;
  uint32x4_t v46;
  int64x2_t v47;
  int64x2_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  unint64_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int8x16_t v59;
  int64x2_t v60;
  int64x2_t v61;
  uint16x8_t v62;
  uint32x4_t v63;
  int8x16_t v64;
  int64x2_t v65;
  int64x2_t v66;
  uint32x4_t v67;
  int64x2_t v68;
  uint64_t v69;

  v1 = *(_QWORD *)(a1 + 32);
  switch(*(_DWORD *)(a1 + 32) & 7)
  {
    case 0:
    case 1:
      v2 = v1 & 0xFFFFFFFFFFFFFFF8;
      v3 = *(unsigned __int8 *)(v2 + 10);
      v4 = *(unsigned __int16 *)(v2 + 8);
      goto LABEL_11;
    case 2:
      v13 = *(_QWORD *)((*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
      goto LABEL_13;
    case 3:
      v13 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
      goto LABEL_13;
    case 4:
      v14 = (unsigned __int16 *)(v1 | 7);
      v3 = *((unsigned __int8 *)v14 + 2);
      v4 = *v14;
LABEL_11:
      v13 = ((8 * v4) | (v3 << 19)) + pas_compact_heap_reservation_base;
      goto LABEL_13;
    case 5:
      v13 = v1 & 0xFFFFFFFFFFFFFFF8;
LABEL_13:
      v5 = *(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v13 + 12));
      v6 = v5[4];
      v7 = v5[5];
      if (v7 > v6)
        return 0;
      goto LABEL_4;
    default:
      v5 = pas_segregated_page_config_kind_for_config_table;
      v6 = *((_QWORD *)pas_segregated_page_config_kind_for_config_table + 4);
      v7 = *((_QWORD *)pas_segregated_page_config_kind_for_config_table + 5);
      if (v7 > v6)
        return 0;
LABEL_4:
      v8 = (unint64_t)(v5[15] + 31) >> 5;
      v9 = v6 / v7;
      if (v9 < 8)
      {
        v10 = 0;
        v11 = v9;
        goto LABEL_24;
      }
      if (v9 >= 0x20)
      {
        v16 = 0;
        v17 = 0uLL;
        v18 = (int8x16_t)vdupq_n_s64(1uLL);
        v19.i64[0] = -1;
        v19.i64[1] = -1;
        v20 = 0uLL;
        v12 = v9 & 0xFFFFFFFFFFFFFFE0;
        v21 = 0uLL;
        v22 = v9 & 0xFFFFFFFFFFFFFFE0;
        v23 = 0uLL;
        v24 = 0uLL;
        v25 = 0uLL;
        v26 = 0uLL;
        v27 = 0uLL;
        v28 = 0uLL;
        v29 = 0uLL;
        v30 = 0uLL;
        v31 = 0uLL;
        v32 = 0uLL;
        v33 = 0uLL;
        v34 = 0uLL;
        v35 = 0uLL;
        do
        {
          v36 = a1 + 4 * v8 + 44 + v9 + ~v16;
          v37 = vrev64q_s8(*(int8x16_t *)(v36 - 15));
          v38 = (uint8x16_t)vmvnq_s8(vceqq_s8(vextq_s8(v37, v37, 8uLL), v19));
          v39 = vmovl_u8(*(uint8x8_t *)v38.i8);
          v40 = vmovl_high_u8(v38);
          v41 = vmovl_high_u16(v40);
          v42.i64[0] = v41.u32[2];
          v42.i64[1] = v41.u32[3];
          v27 = vaddq_s64(v27, (int64x2_t)vandq_s8(v42, v18));
          v43 = vmovl_high_u16(v39);
          v44 = vmovl_u16(*(uint16x4_t *)v40.i8);
          v42.i64[0] = v41.u32[0];
          v42.i64[1] = v41.u32[1];
          v26 = vaddq_s64(v26, (int64x2_t)vandq_s8(v42, v18));
          v42.i64[0] = v44.u32[2];
          v42.i64[1] = v44.u32[3];
          v25 = vaddq_s64(v25, (int64x2_t)vandq_s8(v42, v18));
          v42.i64[0] = v43.u32[2];
          v42.i64[1] = v43.u32[3];
          v23 = vaddq_s64(v23, (int64x2_t)vandq_s8(v42, v18));
          v45 = vrev64q_s8(*(int8x16_t *)(v36 - 31));
          v46 = vmovl_u16(*(uint16x4_t *)v39.i8);
          v42.i64[0] = v44.u32[0];
          v42.i64[1] = v44.u32[1];
          v24 = vaddq_s64(v24, (int64x2_t)vandq_s8(v42, v18));
          v42.i64[0] = v46.u32[0];
          v42.i64[1] = v46.u32[1];
          v47 = (int64x2_t)vandq_s8(v42, v18);
          v42.i64[0] = v46.u32[2];
          v42.i64[1] = v46.u32[3];
          v48 = (int64x2_t)vandq_s8(v42, v18);
          v42.i64[0] = v43.u32[0];
          v42.i64[1] = v43.u32[1];
          v49 = (uint8x16_t)vmvnq_s8(vceqq_s8(vextq_s8(v45, v45, 8uLL), v19));
          v21 = vaddq_s64(v21, (int64x2_t)vandq_s8(v42, v18));
          v50 = vmovl_u8(*(uint8x8_t *)v49.i8);
          v51 = vmovl_high_u8(v49);
          v20 = vaddq_s64(v20, v48);
          v52 = vmovl_high_u16(v51);
          v17 = vaddq_s64(v17, v47);
          v42.i64[0] = v52.u32[2];
          v42.i64[1] = v52.u32[3];
          v35 = vaddq_s64(v35, (int64x2_t)vandq_s8(v42, v18));
          v53 = vmovl_high_u16(v50);
          v54 = vmovl_u16(*(uint16x4_t *)v51.i8);
          v42.i64[0] = v52.u32[0];
          v42.i64[1] = v52.u32[1];
          v34 = vaddq_s64(v34, (int64x2_t)vandq_s8(v42, v18));
          v42.i64[0] = v54.u32[2];
          v42.i64[1] = v54.u32[3];
          v33 = vaddq_s64(v33, (int64x2_t)vandq_s8(v42, v18));
          v42.i64[0] = v53.u32[2];
          v42.i64[1] = v53.u32[3];
          v31 = vaddq_s64(v31, (int64x2_t)vandq_s8(v42, v18));
          v42.i64[0] = v54.u32[0];
          v42.i64[1] = v54.u32[1];
          v32 = vaddq_s64(v32, (int64x2_t)vandq_s8(v42, v18));
          v55 = vmovl_u16(*(uint16x4_t *)v50.i8);
          v42.i64[0] = v53.u32[0];
          v42.i64[1] = v53.u32[1];
          v30 = vaddq_s64(v30, (int64x2_t)vandq_s8(v42, v18));
          v42.i64[0] = v55.u32[2];
          v42.i64[1] = v55.u32[3];
          v29 = vaddq_s64(v29, (int64x2_t)vandq_s8(v42, v18));
          v42.i64[0] = v55.u32[0];
          v42.i64[1] = v55.u32[1];
          v28 = vaddq_s64(v28, (int64x2_t)vandq_s8(v42, v18));
          v16 += 32;
          v22 -= 32;
        }
        while (v22);
        v10 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v28, v17), vaddq_s64(v32, v24)), vaddq_s64(vaddq_s64(v30, v21), vaddq_s64(v34, v26))), vaddq_s64(vaddq_s64(vaddq_s64(v29, v20), vaddq_s64(v33, v25)), vaddq_s64(vaddq_s64(v31, v23), vaddq_s64(v35, v27)))));
        if (v9 == v12)
          return v10;
        if ((v9 & 0x18) == 0)
        {
          v11 = v9 & 0x1F;
          goto LABEL_24;
        }
      }
      else
      {
        v10 = 0;
        v12 = 0;
      }
      v56 = v9 & 0xFFFFFFFFFFFFFFF8;
      v11 = v9 & 7;
      v57 = 0uLL;
      v58 = (int64x2_t)(unint64_t)v10;
      v59 = (int8x16_t)vdupq_n_s64(1uLL);
      v60 = 0uLL;
      v61 = 0uLL;
      do
      {
        v62 = vmovl_u8((uint8x8_t)vmvn_s8(vceq_s8(vrev64_s8(*(int8x8_t *)(a1 + 4 * v8 + 37 + v9 + ~v12)), (int8x8_t)-1)));
        v63 = vmovl_u16(*(uint16x4_t *)v62.i8);
        v64.i64[0] = v63.u32[0];
        v64.i64[1] = v63.u32[1];
        v65 = (int64x2_t)vandq_s8(v64, v59);
        v64.i64[0] = v63.u32[2];
        v64.i64[1] = v63.u32[3];
        v66 = (int64x2_t)vandq_s8(v64, v59);
        v67 = vmovl_high_u16(v62);
        v64.i64[0] = v67.u32[0];
        v64.i64[1] = v67.u32[1];
        v68 = (int64x2_t)vandq_s8(v64, v59);
        v64.i64[0] = v67.u32[2];
        v64.i64[1] = v67.u32[3];
        v61 = vaddq_s64(v61, (int64x2_t)vandq_s8(v64, v59));
        v60 = vaddq_s64(v60, v68);
        v57 = vaddq_s64(v57, v66);
        v58 = vaddq_s64(v58, v65);
        v12 += 8;
      }
      while (v56 != v12);
      v10 = vaddvq_s64(vaddq_s64(vaddq_s64(v58, v60), vaddq_s64(v57, v61)));
      if (v9 == v56)
        return v10;
LABEL_24:
      v69 = a1 + 4 * v8 + 43;
      do
      {
        if (*(unsigned __int8 *)(v69 + v11) != 255)
          ++v10;
        --v11;
      }
      while (v11);
      return v10;
  }
}

unint64_t pas_segregated_page_add_commit_range(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int16 *v24;

  if (a4 != a3)
  {
    v4 = *(_QWORD *)(result + 32);
    switch(*(_DWORD *)(result + 32) & 7)
    {
      case 0:
      case 1:
        v5 = v4 & 0xFFFFFFFFFFFFFFF8;
        v6 = *(unsigned __int8 *)(v5 + 10);
        v7 = *(unsigned __int16 *)(v5 + 8);
        goto LABEL_33;
      case 2:
        v23 = *(_QWORD *)((*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8);
        goto LABEL_34;
      case 3:
        v23 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
        goto LABEL_34;
      case 4:
        v24 = (unsigned __int16 *)(v4 | 7);
        v6 = *((unsigned __int8 *)v24 + 2);
        v7 = *v24;
LABEL_33:
        v23 = ((8 * v7) | (v6 << 19)) + pas_compact_heap_reservation_base;
        goto LABEL_34;
      case 5:
        v23 = v4 & 0xFFFFFFFFFFFFFFF8;
LABEL_34:
        v8 = *(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v23 + 12));
        v9 = v8[5];
        if (v8[4] == v9)
          goto LABEL_35;
        goto LABEL_5;
      default:
        v8 = pas_segregated_page_config_kind_for_config_table;
        v9 = *((_QWORD *)pas_segregated_page_config_kind_for_config_table + 5);
        if (*((_QWORD *)pas_segregated_page_config_kind_for_config_table + 4) == v9)
        {
LABEL_35:
          *(_QWORD *)(a2 + 24) += a4 - a3;
        }
        else
        {
LABEL_5:
          v10 = a3 / v9;
          v11 = (a4 - 1) / v9;
          if (a3 / v9 <= v11)
          {
            v12 = result + 4 * ((unint64_t)(v8[15] + 31) >> 5) + 44;
            do
            {
              v13 = *(unsigned __int8 *)(v12 + v10);
              v14 = v10 * v9;
              v15 = v10 + 1;
              v16 = (v10 + 1) * v9;
              if (a3 <= v14)
                v17 = v14;
              else
                v17 = a3;
              if (a4 >= v16)
                result = v16;
              else
                result = a4;
              if (a4 <= v14 || v16 <= a3)
              {
                v17 = 0;
                result = 0;
              }
              v19 = v14 == v16;
              if (v14 == v16)
                v20 = 0;
              else
                v20 = v17;
              if (v19)
                v21 = 0;
              else
                v21 = result;
              if (v13 == 255)
                v22 = 32;
              else
                v22 = 24;
              *(_QWORD *)(a2 + v22) += v21 - v20;
              v10 = v15;
            }
            while (v15 <= v11);
          }
        }
        break;
    }
  }
  return result;
}

void pas_segregated_partial_view_note_eligibility(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *v3;
  unint64_t v4;

  v3 = *(const os_unfair_lock **)(a2 + 8);
  if (v3)
    os_unfair_lock_assert_owner(v3);
  if ((*(_BYTE *)(a1 + 19) & 1) != 0)
  {
    *(_BYTE *)(a1 + 19) |= 6u;
  }
  else
  {
    if ((a1 & 3) != 0)
      v4 = 0;
    else
      v4 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
    pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(a1 + 7)) | ((unint64_t)*(unsigned __int8 *)(a1 + 9) << 19))+ pas_compact_heap_reservation_base, v4);
    *(_BYTE *)(a1 + 19) |= 4u;
  }
}

void pas_segregated_partial_view_compute_summary(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t StatusReg;
  uint64_t v26;
  unsigned __int8 *v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v3 = (os_unfair_lock_s *)(((8 * *(unsigned __int16 *)(a1 + 4)) | ((unint64_t)*(unsigned __int8 *)(a1 + 6) << 19))
                          + pas_compact_heap_reservation_base
                          + 12);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v3->_os_unfair_lock_opaque))
  {
    if (!__stxr(v4, &v3->_os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(v3);
LABEL_6:
  v6 = pas_compact_heap_reservation_base;
  v7 = ((8 * *(unsigned __int16 *)(a1 + 7)) | ((unint64_t)*(unsigned __int8 *)(a1 + 9) << 19))
     + pas_compact_heap_reservation_base;
  v8 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v7 + 12));
  v9 = ((8 * *(unsigned __int16 *)(a1 + 4)) | ((unint64_t)*(unsigned __int8 *)(a1 + 6) << 19))
     + pas_compact_heap_reservation_base;
  v10 = *(unsigned int *)(a1 + 12);
  if (v10 < 8)
    v6 = 0;
  v11 = v6 + v10;
  if ((((_DWORD)v6 + (_DWORD)v10) & 1) != 0)
    v11 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
  v12 = *(_DWORD *)(v7 + 24);
  v28 = *(_BYTE *)(v8 + 28);
  if ((*(_DWORD *)(v9 + 16) & 0x80000000) != 0)
  {
    v13 = (unsigned __int8 *)(*(uint64_t (**)(void))(v8 + 56))();
    v27 = v13 + 44;
  }
  else
  {
    v27 = 0;
    v13 = 0;
  }
  v14 = 32 * *(unsigned __int8 *)(a1 + 18);
  v23 = a1;
  v15 = *(unsigned __int8 *)(a1 + 17);
  v16 = v15 + *(unsigned __int8 *)(a1 + 18);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  if (v14 < 32 * v16)
  {
    v17 = v12 & 0x7FFFFFF;
    v18 = 32 * v15;
    v26 = v11;
    do
    {
      if (((1 << v14) & *(_DWORD *)(v11 + 4 * (v14 >> 5))) != 0)
      {
        if ((*(_DWORD *)(v9 + 16) & 0x80000000) != 0)
        {
          pas_segregated_page_add_commit_range((unint64_t)v13, (uint64_t)&v29, v14 << v28, (v14 << v28) + v17);
          if ((*(_DWORD *)&v27[4 * (v14 >> 5)] & (1 << v14)) != 0)
            *((_QWORD *)&v29 + 1) += v17;
          else
            pas_page_base_add_free_range(v13, &v29, v14 << v28, (v14 << v28) + v17, 0);
          v11 = v26;
        }
        else
        {
          *((_QWORD *)&v32 + 1) += v17;
          *(_QWORD *)&v31 = v31 + v17;
          *(_QWORD *)&v29 = v29 + v17;
        }
      }
      ++v14;
      --v18;
    }
    while (v18);
  }
  if ((*(_BYTE *)(v23 + 19) & 1) != 0)
    v34 += v31 + *((_QWORD *)&v30 + 1);
  v19 = v32;
  *(_OWORD *)(a2 + 32) = v31;
  *(_OWORD *)(a2 + 48) = v19;
  *(_OWORD *)(a2 + 64) = v33;
  *(_QWORD *)(a2 + 80) = v34;
  v20 = v30;
  *(_OWORD *)a2 = v29;
  *(_OWORD *)(a2 + 16) = v20;
  v21 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v22 = __ldxr(&v3->_os_unfair_lock_opaque);
    if (v22 != v21)
      break;
    if (!__stlxr(0, &v3->_os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(v3);
}

void pas_segregated_shared_handle_destroy(unint64_t a1)
{
  uint64_t v2;
  char v3;
  unint64_t v4;
  _QWORD *v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD v9[3];

  v2 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 12));
  v3 = *(_BYTE *)(v2 + 112);
  v4 = *(unsigned __int16 *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 18) << 16);
  v5 = (_QWORD *)(pas_compact_heap_reservation_base + 8 * v4);
  v6 = (_DWORD)v4 == 0;
  v7 = *(_QWORD *)(v2 + 120);
  if (v6)
    v5 = 0;
  *v5 = *(_QWORD *)a1;
  if (*(_DWORD *)(v2 + 100) > 1u)
  {
    pas_utility_heap_deallocate(a1);
  }
  else
  {
    v8 = ((4 * (v7 >> v3) + 7) & 0xFFFFFFFFFFFFFFF8) + 20;
    if (pas_deallocation_callback)
      pas_deallocation_callback(a1, v8, 1, 0);
    memset(v9, 0, sizeof(v9));
    initialize_config_0((uint64_t)v9);
    pas_simple_large_free_heap_deallocate(&pas_compact_bootstrap_free_heap, a1, v8 + a1, 0, v9);
    pas_compact_bootstrap_free_heap_num_allocated_object_bytes -= v8;
  }
}

unint64_t pas_segregated_shared_page_directory_find_first_eligible(unsigned int *a1, int a2, int a3, int a4)
{
  unsigned int *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  _BOOL8 v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int128 *v61;
  unsigned __int128 v62;
  unsigned int v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned __int128 *v74;
  BOOL v75;
  unint64_t v77;
  unsigned __int128 v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unint64_t StatusReg;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _DWORD v96[2];
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  unsigned int *v112;
  __int128 v113;
  _QWORD v114[5];
  uint64_t (*v115)();
  BOOL (*v116)(unsigned int **);
  _DWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;

  v4 = a1;
  memset(v114, 0, sizeof(v114));
  v113 = 0u;
  v5 = (__int128 *)*(&pas_segregated_page_config_kind_for_config_table + *((unsigned __int8 *)a1 + 12));
  v6 = v5[11];
  v128 = v5[10];
  v7 = v5[12];
  v8 = v5[13];
  v129 = v6;
  v130 = v7;
  v131 = v8;
  v9 = v5[7];
  v124 = v5[6];
  v125 = v9;
  v10 = v5[9];
  v126 = v5[8];
  v127 = v10;
  v11 = v5[3];
  v120 = v5[2];
  v121 = v11;
  v12 = v5[5];
  v122 = v5[4];
  v123 = v12;
  v13 = v5[1];
  v118 = *v5;
  v119 = v13;
  v96[0] = a2;
  v96[1] = a3;
  v99 = v13;
  v98 = v118;
  v103 = v123;
  v102 = v122;
  v101 = v121;
  v100 = v120;
  v107 = v127;
  v106 = v126;
  v105 = v125;
  v104 = v124;
  v111 = v8;
  v110 = v7;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v109 = v129;
  v108 = v128;
LABEL_2:
  v112 = v4;
  v115 = find_first_eligible_should_consider_view_parallel;
  v116 = find_first_eligible_consider_view;
  v117 = v96;
  v97 = 0;
  v14 = *v4;
  v15 = v4;
  v16 = pas_compact_heap_reservation_base;
  while (1)
  {
    if (v14 >= 8)
      v18 = v16;
    else
      v18 = 0;
    v19 = v15[1];
    if (!(v18 + v14))
    {
      v20 = 0;
      v21 = v16 + 8 * v19;
      if ((_DWORD)v19)
        v22 = v21 == 0;
      else
        v22 = 1;
      if (!v22)
        goto LABEL_35;
      goto LABEL_31;
    }
    v21 = v16 + 8 * v19;
    if ((_DWORD)v19)
      v23 = v21 == 0;
    else
      v23 = 1;
    if (!v23)
    {
      v20 = (*(_DWORD *)(v21 + 48) + 1);
      if ((_DWORD)v19)
        v25 = v21 == 0;
      else
        v25 = 1;
      if (!v25)
        goto LABEL_35;
      goto LABEL_31;
    }
    v20 = 1;
    if ((_DWORD)v19)
      v24 = v21 == 0;
    else
      v24 = 1;
    if (!v24)
    {
      while (1)
      {
LABEL_35:
        v28 = *(_QWORD *)(v21 + 8);
        v27 = *(_QWORD *)v21;
        if ((v28 & 1) != 0)
          goto LABEL_43;
        v29 = __ldxp((unsigned __int128 *)v21);
        if ((unint64_t)v29 ^ v27 | *((_QWORD *)&v29 + 1) ^ v28)
          break;
        if (__stlxp(__PAIR128__(v28 + 1, v27), (unsigned __int128 *)v21))
          goto LABEL_40;
        v30 = 1;
LABEL_41:
        __dmb(0xBu);
        if (v30)
        {
          ++v28;
          goto LABEL_43;
        }
      }
      __clrex();
LABEL_40:
      v30 = 0;
      goto LABEL_41;
    }
LABEL_31:
    v26 = v14 != 0;
    v27 = (v15[2] & 1) == 0 && v26;
    v28 = -1;
LABEL_43:
    *(_QWORD *)&v113 = v27;
    if (v20 == v27)
    {
LABEL_97:
      v4 = a1;
      if (!a4)
      {
        v63 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
        {
          if (!__stxr(v63, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_103;
        }
        __clrex();
        os_unfair_lock_lock(&pas_heap_lock);
      }
LABEL_103:
      v65 = *a1;
      if (v65 >= 8)
        v66 = pas_compact_heap_reservation_base;
      else
        v66 = 0;
      if (!(v66 + v65))
      {
        v70 = v113;
LABEL_135:
        v79 = pas_segregated_shared_view_create(v70);
        v80 = *a1;
        if (v80 >= 8)
          v81 = pas_compact_heap_reservation_base;
        else
          v81 = 0;
        if (!(v81 + v80)
          || (v82 = a1[1], (_DWORD)v82)
          && (v83 = pas_compact_heap_reservation_base + 8 * v82) != 0
          && *(_DWORD *)(v83 + 48) == -1)
        {
          os_unfair_lock_assert_owner(&pas_heap_lock);
          *((_QWORD *)a1 + 2) = pas_first_shared_page_directory;
          pas_first_shared_page_directory = (uint64_t)a1;
        }
        pas_segregated_directory_append((uint64_t)a1, v113, v79 | 2);
        pas_segregated_directory_view_did_become_eligible_at_index((uint64_t)a1, v113);
        if (!a4)
        {
          v84 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          while (1)
          {
            v85 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
            if (v85 != v84)
              break;
            if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
              return v79;
          }
          __clrex();
          os_unfair_lock_unlock(&pas_heap_lock);
        }
        return v79;
      }
      v67 = a1[1];
      if ((_DWORD)v67)
      {
        v68 = pas_compact_heap_reservation_base + 8 * v67;
        v69 = 1;
        if (v68)
          v69 = (*(_DWORD *)(v68 + 48) + 1);
        v70 = v113;
        if (v69 > (unint64_t)v113)
          goto LABEL_111;
        goto LABEL_135;
      }
      v70 = v113;
      if ((_QWORD)v113)
        goto LABEL_135;
LABEL_111:
      if (!a4)
      {
        v71 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v72 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v72 != v71)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_2;
        }
        __clrex();
        os_unfair_lock_unlock(&pas_heap_lock);
      }
      goto LABEL_2;
    }
    v95 = v20;
    *((_QWORD *)&v113 + 1) = v20;
    __dmb(0xBu);
    v114[0] = -1;
    memset(&v114[1], 0, 32);
    if ((_QWORD)v113
      || (v55 = v112[2] & 1 | ((unint64_t)((v112[2] >> 1) & 1) << 32),
          !((unsigned int (*)(unint64_t, unsigned int **))v115)(v55, &v112))
      || (v114[4] = v55, v114[3] = 0x100000001, *(_QWORD *)&v113 = 0, memset(v114, 0, 24), *((_QWORD *)&v113 + 1))
      && v116
      && (((uint64_t (*)(unsigned int **))v116)(&v112) & 1) == 0)
    {
      v31 = v112[1];
      v32 = &unk_1ECF57000;
      v33 = pas_compact_heap_reservation_base + 8 * v31;
      if ((_DWORD)v31)
        v34 = v33 == 0;
      else
        v34 = 1;
      if (v34)
        goto LABEL_80;
      v35 = v113;
      v36 = *(unsigned int *)(v33 + 36);
      if ((unint64_t)v113 <= 1)
        v35 = 1;
      v37 = v35 - 1;
      v38 = v37 >> 7;
      v39 = *(unsigned int *)(v33 + 32);
      v40 = (_DWORD)v39 ? pas_compact_heap_reservation_base + 8 * v39 : 0;
      v41 = 4 * v38;
      v42 = v36 - 4 * v38;
      if (v36 <= 4 * v38)
        goto LABEL_80;
      v43 = (v37 >> 5) & 3;
      v90 = v40;
      v91 = v36;
      while (1)
      {
        v44 = v42 - 4;
        if (v42 >= 4)
          v42 = 4;
        v93 = v44;
        v94 = v42;
        v45 = *(unsigned int *)(v40 + 4 * v38);
        v46 = v32[317] + 8 * v45;
        if (!(_DWORD)v45)
          v46 = 0;
        v47 = v36 - v41;
        if (v36 - v41 >= 4)
          v47 = 4;
        if (v43 < v47)
          break;
LABEL_73:
        v43 = 0;
        ++v38;
        v41 = 4 * v38;
        v42 = v93;
        v40 = v90;
        v36 = v91;
        v32 = (_QWORD *)&unk_1ECF57000;
        if (4 * v38 >= v91)
          goto LABEL_80;
      }
      v92 = v46;
      while (1)
      {
        v48 = (_QWORD *)(v46 + 8 * v43);
        v49 = *v48;
        v50 = ((uint64_t (*)(_QWORD, unsigned int **))v115)(*v48, &v112);
        if (v50)
          break;
LABEL_72:
        ++v43;
        v46 = v92;
        if (v43 == v94)
          goto LABEL_73;
      }
      v51 = v50;
      while (1)
      {
        v52 = __clz(__rbit32(v51));
        v53 = (1 << v52);
        v54 = ((32 * (v43 + v41)) | 1) + v52;
        v114[3] = v53;
        v114[4] = v49;
        *(_QWORD *)&v113 = v54;
        v114[1] = v48;
        v114[2] = v54;
        if (v114[0] == -1)
          v114[0] = v54;
        if (v54 >= *((_QWORD *)&v113 + 1) || !v116 || (((uint64_t (*)(unsigned int **))v116)(&v112) & 1) != 0)
          break;
        v51 &= ~(_DWORD)v53;
        if (!v51)
          goto LABEL_72;
      }
    }
    v32 = &unk_1ECF57000;
    if ((unint64_t)v113 < v95)
      break;
LABEL_80:
    v17 = 0;
    __dmb(0xBu);
    v15 = v112;
    v14 = *v112;
    v16 = v32[317];
    if (v14 >= 8)
      v56 = v32[317];
    else
      v56 = 0;
    if (v56 + v14)
    {
      v57 = v112[1];
      if ((_DWORD)v57)
      {
        v58 = v16 + 8 * v57;
        v17 = 1;
        if (v58)
          v17 = (*(_DWORD *)(v58 + 48) + 1);
      }
      else
      {
        v17 = 1;
      }
    }
    if (v17 == v95)
    {
      v59 = v114[0];
      if (v95 < v114[0])
        v59 = v95;
      *(_QWORD *)&v113 = v95;
      v114[0] = v59;
      v60 = v112[1];
      if ((_DWORD)v60)
      {
        v61 = (unsigned __int128 *)(v16 + 8 * v60);
        if (v61)
        {
          if (v28 != -1)
          {
            while (1)
            {
              v62 = __ldxp(v61);
              if ((unint64_t)v62 ^ v27 | *((_QWORD *)&v62 + 1) ^ v28)
                break;
              if (!__stlxp(__PAIR128__(v28 + 2, v59), v61))
                goto LABEL_96;
            }
            __clrex();
LABEL_96:
            __dmb(0xBu);
          }
        }
      }
      goto LABEL_97;
    }
  }
  v73 = v112[1];
  v74 = (unsigned __int128 *)(pas_compact_heap_reservation_base + 8 * v73);
  if ((_DWORD)v73)
    v75 = v74 == 0;
  else
    v75 = 1;
  if (!v75 && v28 != -1)
  {
    v77 = v114[0];
    while (1)
    {
      v78 = __ldxp(v74);
      if ((unint64_t)v78 ^ v27 | *((_QWORD *)&v78 + 1) ^ v28)
        break;
      if (!__stlxp(__PAIR128__(v28 + 2, v77), v74))
        goto LABEL_131;
    }
    __clrex();
LABEL_131:
    __dmb(0xBu);
  }
  v79 = v97;
  if (!v97)
  {
    pas_log("Erroneously found a null view at index = %zu, directory = %p.\n", (size_t)v113, a1);
    return v97;
  }
  return v79;
}

BOOL find_first_eligible_consider_view(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;

  v2 = a1[10];
  v4 = *a1;
  v3 = a1[1];
  if (v3)
  {
    v5 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * v4[1] + 44);
    if ((_DWORD)v5)
      v6 = pas_compact_heap_reservation_base + 8 * v5;
    else
      v6 = 0;
    v7 = *(unsigned int *)(v6 + 4 * (_QWORD)v3 - 4);
    if (v7 >= 8)
      v8 = pas_compact_heap_reservation_base;
    else
      v8 = 0;
  }
  else
  {
    v7 = *v4;
    v8 = pas_compact_heap_reservation_base;
    if (v7 < 8)
      v8 = 0;
  }
  v9 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v2[40] + v2[36];
  v11 = ((v2[1] + *(_DWORD *)(v9 + 20) - 1) & -v2[1]) + *v2;
  if (v11 <= v10)
  {
    *((_QWORD *)v2 + 1) = v9;
    return v11 <= v10;
  }
  if (pas_mock_fast_random)
  {
    if (pas_mock_fast_random() - 0x20000000 >= 0xDFFFFFFF)
      goto LABEL_14;
  }
  else
  {
    v13 = pas_fast_random_state ^ (pas_fast_random_state << 13) ^ ((pas_fast_random_state ^ (pas_fast_random_state << 13)) >> 17);
    pas_fast_random_state = v13 ^ (32 * v13);
    if ((pas_fast_random_state - 0x20000000) >= 0xDFFFFFFF)
    {
LABEL_14:
      if (*((_BYTE *)a1 + 52))
      {
        v14 = *a1 + 2;
        while (1)
        {
          v15 = *v14 & 0xFFFFFFFE;
          if (*v14 == v15)
            return v11 <= v10;
          v16 = __ldxr(v14);
          if (v16 != *v14)
            break;
          if (__stlxr(v15, v14))
            goto LABEL_21;
          v17 = 1;
LABEL_22:
          __dmb(0xBu);
          if (v17)
            return v11 <= v10;
        }
        __clrex();
LABEL_21:
        v17 = 0;
        goto LABEL_22;
      }
      v18 = a1[4];
      v19 = ~*((_DWORD *)a1 + 12);
      while (1)
      {
        v20 = *v18 & v19;
        if (*v18 == v20)
          return v11 <= v10;
        v21 = __ldxr(v18);
        if (v21 != *v18)
          break;
        if (__stlxr(v20, v18))
          goto LABEL_30;
        v22 = 1;
LABEL_31:
        __dmb(0xBu);
        if (v22)
          return v11 <= v10;
      }
      __clrex();
LABEL_30:
      v22 = 0;
      goto LABEL_31;
    }
  }
  return v11 <= v10;
}

uint64_t pas_segregated_shared_page_directory_take_last_empty(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t (*v51)(unint64_t);
  unint64_t v53;
  uint64_t (*v54)(unsigned int **);
  int v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  unsigned __int128 *v62;
  unsigned __int128 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  unint64_t (*v76)(unint64_t);
  uint64_t (*v77)(unsigned int **);
  _QWORD *v78;

  v3 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(a1 + 12));
  v68[0] = a2;
  v68[1] = a3;
  v68[2] = v3;
  v69 = 0;
  v70 = a1;
  v76 = take_last_empty_should_consider_view_parallel;
  v77 = take_last_empty_consider_view;
  v78 = v68;
  v4 = *(unsigned int *)(a1 + 4);
  v5 = &unk_1ECF57000;
  if (!(_DWORD)v4 || (v6 = pas_compact_heap_reservation_base + 8 * v4) == 0)
  {
    v9 = ((unint64_t)*(unsigned int *)(a1 + 8) >> 1) & 1;
    v8 = -1;
    if (!v9)
      return 0;
LABEL_13:
    v72 = v9;
    v73 = -1;
    v71 = v9 - 1;
    v74 = 0u;
    v75 = 0u;
    v12 = *(unsigned int *)(a1 + 4);
    if ((_DWORD)v12)
      v13 = pas_compact_heap_reservation_base + 8 * v12;
    else
      v13 = 0;
    v14 = v9 == 1 || v13 == 0;
    if (!v14 && *(_DWORD *)(v13 + 36))
    {
      v15 = v13;
      v16 = (v9 - 2) >> 7;
      v17 = ((v9 - 2) >> 5) & 3;
      v18 = *(unsigned int *)(v15 + 32);
      if ((_DWORD)v18)
        v19 = pas_compact_heap_reservation_base + 8 * v18;
      else
        v19 = 0;
      v64 = v19;
      while (1)
      {
        v20 = v16;
        v21 = *(unsigned int *)(v19 + 4 * v16);
        v22 = v5[317] + 8 * v21;
        if (!(_DWORD)v21)
          v22 = 0;
        v65 = v20;
        v66 = v22;
        v67 = (v20 << 7) | 1;
        v23 = (_QWORD *)(v22 + 8 * v17);
        v24 = *v23;
        v25 = ((uint64_t (*)(_QWORD, uint64_t *))v76)(*v23, &v70);
        if (v25)
          break;
LABEL_35:
        if (v17)
        {
          v30 = (_QWORD *)(v66 + 8 * (v17 - 1));
          v31 = *v30;
          v32 = ((uint64_t (*)(_QWORD, uint64_t *))v76)(*v30, &v70);
          if (v32)
          {
            v33 = v32;
            do
            {
              v34 = __clz(v33) ^ 0x1F;
              v35 = (1 << v34);
              v36 = v67 + 32 * (v17 - 1) + v34;
              *(_QWORD *)&v75 = v35;
              *((_QWORD *)&v75 + 1) = v31;
              v71 = v36;
              *(_QWORD *)&v74 = v66 + 8 * (v17 - 1);
              *((_QWORD *)&v74 + 1) = v36;
              if (v73 == -1)
                v73 = v36;
              if (v36 >= v72 || !v77 || (v77((unsigned int **)&v70) & 1) != 0)
                goto LABEL_75;
              v33 &= ~(_DWORD)v35;
            }
            while (v33);
          }
          if (v17 != 1)
          {
            v37 = (_QWORD *)(v66 + 8 * (v17 - 2));
            v38 = *v37;
            v39 = ((uint64_t (*)(_QWORD, uint64_t *))v76)(*v37, &v70);
            if (v39)
            {
              v40 = v39;
              do
              {
                v41 = __clz(v40) ^ 0x1F;
                v42 = (1 << v41);
                v43 = v67 + 32 * (v17 - 2) + v41;
                *(_QWORD *)&v75 = v42;
                *((_QWORD *)&v75 + 1) = v38;
                v71 = v43;
                *(_QWORD *)&v74 = v66 + 8 * (v17 - 2);
                *((_QWORD *)&v74 + 1) = v43;
                if (v73 == -1)
                  v73 = v43;
                if (v43 >= v72 || !v77 || (v77((unsigned int **)&v70) & 1) != 0)
                  goto LABEL_75;
                v40 &= ~(_DWORD)v42;
              }
              while (v40);
            }
            if (v17 != 2)
            {
              v44 = (_QWORD *)(v66 + 8 * (v17 - 3));
              v45 = *v44;
              v46 = ((uint64_t (*)(_QWORD, uint64_t *))v76)(*v44, &v70);
              if (v46)
              {
                v47 = v46;
                while (1)
                {
                  v48 = __clz(v47) ^ 0x1F;
                  v49 = (1 << v48);
                  v50 = v67 + 32 * (v17 - 3) + v48;
                  *(_QWORD *)&v75 = v49;
                  *((_QWORD *)&v75 + 1) = v45;
                  v71 = v50;
                  *(_QWORD *)&v74 = v66 + 8 * (v17 - 3);
                  *((_QWORD *)&v74 + 1) = v50;
                  if (v73 == -1)
                    v73 = v50;
                  if (v50 >= v72 || !v77 || (v77((unsigned int **)&v70) & 1) != 0)
                    break;
                  v47 &= ~(_DWORD)v49;
                  if (!v47)
                    goto LABEL_62;
                }
LABEL_75:
                v55 = 1;
                v5 = &unk_1ECF57000;
                goto LABEL_76;
              }
            }
          }
        }
LABEL_62:
        v19 = v64;
        v16 = v65 - 1;
        v17 = 3;
        v5 = (_QWORD *)&unk_1ECF57000;
        if (!v65)
        {
          a1 = v70;
          v51 = v76;
          goto LABEL_67;
        }
      }
      v26 = v25;
      while (1)
      {
        v27 = __clz(v26) ^ 0x1F;
        v28 = (1 << v27);
        v29 = (v67 | (32 * v17)) + v27;
        *(_QWORD *)&v75 = v28;
        *((_QWORD *)&v75 + 1) = v24;
        v71 = v29;
        *(_QWORD *)&v74 = v23;
        *((_QWORD *)&v74 + 1) = v29;
        if (v73 == -1)
          v73 = v29;
        if (v29 >= v72 || !v77 || (v77((unsigned int **)&v70) & 1) != 0)
          goto LABEL_73;
        v26 &= ~(_DWORD)v28;
        if (!v26)
          goto LABEL_35;
      }
    }
    v51 = take_last_empty_should_consider_view_parallel;
LABEL_67:
    v53 = *(_DWORD *)(a1 + 8) & 1 | ((unint64_t)((*(_DWORD *)(a1 + 8) >> 1) & 1) << 32);
    if (((unsigned int (*)(unint64_t, uint64_t *))v51)(v53, &v70))
    {
      v71 = 0;
      *((_QWORD *)&v75 + 1) = v53;
      v74 = 0uLL;
      *(_WORD *)((char *)&v75 + 5) = 0;
      BYTE7(v75) = 0;
      LODWORD(v75) = 1;
      BYTE4(v75) = 1;
      if (v73 == -1)
      {
        v73 = 0;
        v54 = v77;
        if (!v77)
        {
LABEL_73:
          v55 = 1;
          goto LABEL_76;
        }
      }
      else
      {
        v54 = v77;
        if (!v77)
          goto LABEL_73;
      }
      if ((v54((unsigned int **)&v70) & 1) != 0)
        goto LABEL_73;
    }
    v55 = 0;
    v71 = 0;
LABEL_76:
    v56 = *(unsigned int *)(v70 + 4);
    v57 = v5[317] + 8 * v56;
    if ((_DWORD)v56)
      v58 = v57 == 0;
    else
      v58 = 1;
    if (v58 || v8 == -1)
      goto LABEL_91;
    v60 = v73 + 1;
    if ((v8 & 1) != 0)
    {
      v61 = v8 + 1;
    }
    else
    {
      v61 = v8;
      if (v9 == v60)
      {
LABEL_91:
        if (v55)
          return v69;
        else
          return 0;
      }
    }
    v62 = (unsigned __int128 *)(v57 + 16);
    v63 = __ldxp(v62);
    if ((unint64_t)v63 ^ v9 | *((_QWORD *)&v63 + 1) ^ v8)
      __clrex();
    else
      __stlxp(__PAIR128__(v61, v60), v62);
    __dmb(0xBu);
    goto LABEL_91;
  }
  v7 = (unsigned __int128 *)(v6 + 16);
  while (1)
  {
    v8 = *(_QWORD *)(v6 + 24);
    v9 = *(_QWORD *)v7;
    if ((v8 & 1) != 0)
      break;
    v10 = __ldxp(v7);
    if ((unint64_t)v10 ^ v9 | *((_QWORD *)&v10 + 1) ^ v8)
    {
      __clrex();
LABEL_9:
      v11 = 0;
      goto LABEL_10;
    }
    if (__stlxp(__PAIR128__(v8 + 1, v9), v7))
      goto LABEL_9;
    v11 = 1;
LABEL_10:
    __dmb(0xBu);
    if (v11)
    {
      ++v8;
      break;
    }
  }
  if (v9)
    goto LABEL_13;
  return 0;
}

unint64_t take_last_empty_should_consider_view_parallel(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t take_last_empty_consider_view(unsigned int **a1)
{
  unsigned int *v1;
  int v2;
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t (*v13)(_QWORD);
  void (*v14)(_QWORD, _QWORD);
  uint64_t v15;
  char v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  unsigned int v32;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *p_os_unfair_lock_opaque;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD, _QWORD);
  unint64_t v47;
  uint64_t (*v48)(_QWORD);
  unsigned int *v49;
  char v50;
  unsigned int *v51;
  uint64_t v52;
  os_unfair_lock_t v53;
  int v54;
  unsigned int v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  void (*v64)(_QWORD, _QWORD);
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  os_unfair_lock_s *v92;
  os_unfair_lock_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  os_unfair_lock_s *v101;
  uint64_t v102;
  uint64_t v103;
  size_t v104;
  _QWORD *v105;
  uint32_t os_unfair_lock_opaque;
  const char *v107;
  os_unfair_lock_s *v108;
  uint64_t v109;
  void (*v110)(_QWORD, _QWORD);
  unint64_t v111;
  unsigned int *v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  BOOL v118;
  const char *v119;
  uint64_t v120;
  int v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  os_unfair_lock_s *v145;
  uint64_t v146;
  os_unfair_lock_s *v147;
  int v148;
  unsigned int v149;
  size_t v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  int v156;
  unsigned int v157;
  unsigned int v158;
  unint64_t StatusReg;
  unsigned int v161;
  int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  uint64_t (*v167)(_QWORD);
  uint64_t (*v168)(_QWORD);
  void (*v169)(uint64_t, uint64_t);
  void (*v170)(_QWORD, _QWORD);
  int v171[2];
  uint64_t v172;
  int v173[2];
  int v174;
  int v175;
  int v176;
  int v177;
  unint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t (*v181)(_QWORD);
  uint64_t (*v182)(uint64_t);
  uint64_t (*v183)(_QWORD);
  os_unfair_lock_s *v184;
  os_unfair_lock_s *v185;
  char v186;
  unsigned int *v187;
  size_t v188;
  size_t v189;
  size_t v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  os_unfair_lock_t v194;

  v1 = a1[4];
  v2 = *((_DWORD *)a1 + 12);
  v3 = *((unsigned __int8 *)a1 + 52);
  v5 = *a1;
  v4 = (uint64_t)a1[1];
  v6 = a1[10];
  v7 = *(_QWORD **)v6;
  LODWORD(v8) = v6[2];
  v9 = *((_QWORD *)v6 + 2);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(_QWORD *)(v9 + 40);
  v12 = *(uint64_t (**)(_QWORD))(v9 + 56);
  v13 = *(uint64_t (**)(_QWORD))(v9 + 64);
  v14 = *(void (**)(_QWORD, _QWORD))(v9 + 88);
  v15 = *(int *)(v9 + 100);
  v16 = *(_BYTE *)(v9 + 112);
  v17 = *(_QWORD *)(v9 + 120);
  v194 = 0;
  if (v3)
  {
    v18 = v5 + 2;
    while (1)
    {
      v19 = *v18 & 0xFFFFFFFD;
      if (*v18 == v19)
        return 0;
      v20 = __ldxr(v18);
      if (v20 != *v18)
        break;
      if (__stlxr(v19, v18))
        goto LABEL_8;
      v21 = 1;
LABEL_9:
      __dmb(0xBu);
      if (v21)
        goto LABEL_19;
    }
    __clrex();
LABEL_8:
    v21 = 0;
    goto LABEL_9;
  }
  v22 = v1 + 1;
  do
  {
    v23 = *v22 & ~v2;
    if (*v22 == v23)
      return 0;
    v24 = __ldxr(v22);
    if (v24 == *v22)
    {
      if (!__stlxr(v23, v22))
      {
        v25 = 1;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    v25 = 0;
LABEL_18:
    __dmb(0xBu);
  }
  while (!v25);
LABEL_19:
  v26 = &unk_1ECF57000;
  if (v4)
  {
    v27 = pas_compact_heap_reservation_base;
    v28 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * v5[1] + 44);
    if ((_DWORD)v28)
      v29 = pas_compact_heap_reservation_base + 8 * v28;
    else
      v29 = 0;
    v30 = *(unsigned int *)(v29 + 4 * v4 - 4);
    if (v30 < 8)
      v27 = 0;
    v31 = (os_unfair_lock_s *)((v27 + v30) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)v15 == 1)
      goto LABEL_26;
LABEL_35:
    p_os_unfair_lock_opaque = &v31[2]._os_unfair_lock_opaque;
    v38 = v7[134];
    v39 = v38 - 1;
    while (v39 != -1)
    {
      v40 = *(unsigned int **)(v7[133] + 8 * v39--);
      if (v40 == p_os_unfair_lock_opaque)
        goto LABEL_53;
    }
    if (p_os_unfair_lock_opaque == &pas_virtual_range_common_lock && (v44 = v7[132]) != 0)
    {
      v43 = v7 + 132;
LABEL_52:
      *v43 = v44 + 1;
    }
    else
    {
      if ((_DWORD)v8 || v38 || *v7)
      {
        v41 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        do
        {
          if (__ldaxr(p_os_unfair_lock_opaque))
          {
            __clrex();
            v59 = (unsigned int **)v7[135];
            if (v59 && !*v59)
              *v59 = p_os_unfair_lock_opaque;
            pas_segregated_directory_view_did_become_empty_at_index((uint64_t)v5, v4);
            v6[6] = 2;
            return 1;
          }
        }
        while (__stxr(v41, p_os_unfair_lock_opaque));
      }
      else
      {
        v85 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        while (!__ldaxr(p_os_unfair_lock_opaque))
        {
          if (!__stxr(v85, p_os_unfair_lock_opaque))
            goto LABEL_46;
        }
        __clrex();
        v108 = v31 + 2;
        v183 = v13;
        v185 = v31;
        v109 = v15;
        v180 = v11;
        v190 = v10;
        v110 = v14;
        v111 = v17;
        v167 = v12;
        v112 = v1;
        v176 = v2;
        v113 = v16;
        os_unfair_lock_lock(v108);
        v16 = v113;
        v2 = v176;
        v1 = v112;
        v12 = v167;
        v17 = v111;
        v14 = v110;
        v10 = v190;
        v11 = v180;
        v13 = v183;
        v15 = v109;
        v31 = v185;
        v26 = (_QWORD *)&unk_1ECF57000;
        LODWORD(v8) = 0;
      }
LABEL_46:
      if (p_os_unfair_lock_opaque == &pas_virtual_range_common_lock)
      {
        v43 = v7 + 132;
        v44 = v7[132];
        goto LABEL_52;
      }
    }
LABEL_53:
    v51 = &v31[3]._os_unfair_lock_opaque;
    v34 = v8;
    if (v194 == &v31[3])
    {
      if ((v31[4]._os_unfair_lock_opaque & 0x80000000) != 0)
        goto LABEL_55;
LABEL_56:
      v52 = 0;
      goto LABEL_57;
    }
    v186 = v16;
    v187 = v1;
    v177 = v2;
    v168 = v12;
    v170 = v14;
    *(_QWORD *)v173 = v17;
    v151 = v10;
    v191 = v15;
    v193 = v8;
    if (v194)
    {
      v152 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v153 = __ldxr(&v194->_os_unfair_lock_opaque);
        if (v153 != v152)
          break;
        if (!__stlxr(0, &v194->_os_unfair_lock_opaque))
          goto LABEL_220;
      }
      __clrex();
      os_unfair_lock_unlock(v194);
    }
LABEL_220:
    v154 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(v51))
    {
      if (!__stxr(v154, v51))
        goto LABEL_225;
    }
    __clrex();
    os_unfair_lock_lock(v31 + 3);
LABEL_225:
    v194 = v31 + 3;
    LODWORD(v8) = v193;
    v34 = v193;
    v1 = v187;
    v15 = v191;
    v14 = v170;
    v17 = *(_QWORD *)v173;
    v10 = v151;
    v12 = v168;
    v2 = v177;
    v16 = v186;
    if ((v31[4]._os_unfair_lock_opaque & 0x80000000) == 0)
      goto LABEL_56;
  }
  else
  {
    v35 = *v5;
    v36 = pas_compact_heap_reservation_base;
    if (v35 < 8)
      v36 = 0;
    v31 = (os_unfair_lock_s *)((v36 + v35) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)v15 != 1)
      goto LABEL_35;
LABEL_26:
    if ((_DWORD)v8)
    {
LABEL_30:
      v34 = 1;
      if ((v31[4]._os_unfair_lock_opaque & 0x80000000) == 0)
        goto LABEL_56;
    }
    else
    {
      v32 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v32, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_30;
      }
      __clrex();
      v181 = v13;
      v184 = v31;
      v45 = v15;
      v178 = v11;
      v188 = v10;
      v46 = v14;
      v47 = v17;
      v48 = v12;
      v49 = v1;
      v174 = v2;
      v50 = v16;
      os_unfair_lock_lock(&pas_heap_lock);
      v16 = v50;
      v2 = v174;
      v1 = v49;
      v12 = v48;
      v17 = v47;
      v14 = v46;
      v10 = v188;
      v11 = v178;
      v13 = v181;
      v15 = v45;
      v31 = v184;
      v26 = (_QWORD *)&unk_1ECF57000;
      LODWORD(v8) = 0;
      v34 = 1;
      if ((v184[4]._os_unfair_lock_opaque & 0x80000000) == 0)
        goto LABEL_56;
    }
  }
LABEL_55:
  if (v31[6]._os_unfair_lock_opaque)
    goto LABEL_56;
  v175 = v34;
  v189 = v10;
  v56 = (_QWORD *)(*(_QWORD *)&v31->_os_unfair_lock_opaque & 0xFFFFFFFFFFFFFFFELL);
  v57 = v17 >> v16;
  v192 = v8;
  v179 = v56;
  if (v17 >> v16)
  {
    v58 = v17 >> v16;
    while (1)
    {
      v60 = *((unsigned int *)v56 + --v58 + 5);
      v61 = v26[317];
      v62 = v61 + 8 * v60;
      v63 = !(_DWORD)v60 || v62 == 0;
      if (!v63 && (*(_BYTE *)(v62 + 19) & 8) == 0)
        break;
LABEL_72:
      if (!v58)
        goto LABEL_105;
    }
    v64 = v14;
    v65 = *(unsigned __int16 *)(v62 + 7) | ((unint64_t)*(unsigned __int8 *)(v62 + 9) << 16);
    if ((_DWORD)v65)
      v66 = v61 + 8 * v65;
    else
      v66 = 0;
    if (*(_BYTE *)(v62 + 16))
    {
      v67 = *(unsigned __int8 *)(v62 + 16) - 1;
      v68 = *(unsigned int *)(v61 + 8 * *(unsigned int *)(v66 + 4) + 32);
      if ((_DWORD)v68)
        v69 = v61 + 8 * v68;
      else
        v69 = 0;
      v70 = *(unsigned int *)(v69 + ((v67 >> 5) & 0x7FFFFFFFFFFFFFCLL));
      v71 = v61 + 8 * v70;
      if (!(_DWORD)v70)
        v71 = 0;
      v72 = (unsigned int *)(v71 + 8 * ((v67 >> 5) & 3));
      while (1)
      {
        v73 = *v72 & ~(1 << v67);
        if (*v72 == v73)
          goto LABEL_129;
        v74 = __ldxr(v72);
        if (v74 != *v72)
          break;
        if (__stlxr(v73, v72))
          goto LABEL_93;
        v75 = 1;
LABEL_94:
        __dmb(0xBu);
        if (v75)
          goto LABEL_71;
      }
      __clrex();
LABEL_93:
      v75 = 0;
      goto LABEL_94;
    }
    v76 = (unsigned int *)(v66 + 8);
    while (2)
    {
      v77 = *v76 & 0xFFFFFFFE;
      if (v77 == *v76)
        goto LABEL_129;
      v78 = __ldxr(v76);
      if (v78 == *v76)
      {
        if (!__stlxr(v77, v76))
        {
          v79 = 1;
          goto LABEL_103;
        }
      }
      else
      {
        __clrex();
      }
      v79 = 0;
LABEL_103:
      __dmb(0xBu);
      if (v79)
      {
LABEL_71:
        *(_BYTE *)(v62 + 19) |= 8u;
        v14 = v64;
        goto LABEL_72;
      }
      continue;
    }
  }
LABEL_105:
  v169 = v14;
  *(_QWORD *)v171 = v17;
  if (v3)
  {
    v80 = v15;
    v81 = v5 + 2;
    while (1)
    {
      v82 = *v81 & 0xFFFFFFFD;
      if (*v81 == v82)
        goto LABEL_127;
      v83 = __ldxr(v81);
      if (v83 != *v81)
        break;
      if (__stlxr(v82, v81))
        goto LABEL_112;
      v84 = 1;
LABEL_113:
      __dmb(0xBu);
      if (v84)
        goto LABEL_127;
    }
    __clrex();
LABEL_112:
    v84 = 0;
    goto LABEL_113;
  }
  v80 = v15;
  v87 = v1 + 1;
  while (2)
  {
    v88 = *v87 & ~v2;
    if (*v87 != v88)
    {
      v89 = __ldxr(v87);
      if (v89 == *v87)
      {
        if (!__stlxr(v88, v87))
        {
          v90 = 1;
          goto LABEL_126;
        }
      }
      else
      {
        __clrex();
      }
      v90 = 0;
LABEL_126:
      __dmb(0xBu);
      if (v90)
        break;
      continue;
    }
    break;
  }
LABEL_127:
  v91 = v12(*v56);
  v15 = v80;
  if (!*(_QWORD *)(v91 + 24))
  {
LABEL_148:
    v172 = v91;
    v182 = v13;
    v105 = v26;
    os_unfair_lock_opaque = v31[6]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque)
    {
      v107 = v80 > 4 ? 0 : off_1E35BEDC8[v80];
      pas_log("Error: shared view %p (%s) has is_in_use_for_allocation_count = %u\n", v31, v107, os_unfair_lock_opaque);
      v15 = v80;
      if (v57)
      {
        v114 = 0;
        v115 = v105[317];
        do
        {
          v116 = *((unsigned int *)v56 + v114 + 5);
          v117 = (_BYTE *)(v115 + 8 * v116);
          if ((_DWORD)v116)
            v118 = v117 == 0;
          else
            v118 = 1;
          if (!v118)
          {
            if ((v117[19] & 1) != 0)
              v119 = "yes";
            else
              v119 = "no";
            v120 = v15;
            pas_log("partial_index = %zu, partial_view = %p, is_in_use_for_allocation = %s\n", v114, v117, v119);
            v15 = v120;
            v115 = v105[317];
          }
          ++v114;
        }
        while (v57 != v114);
      }
    }
    if ((_DWORD)v15 == 1)
    {
      v121 = 1;
      v31[4]._os_unfair_lock_opaque &= ~0x80000000;
      v122 = (void *)v182(v172);
      pas_page_malloc_decommit(v122, v189);
      v169(v172, 1);
      v7[131] += v189;
    }
    else
    {
      v123 = v192;
      if (*(_QWORD *)(v172 + 24))
      {
        v52 = 1;
        v124 = v15;
        pas_segregated_page_take_empty_granules(v172, v7, &v194, 1, v192);
        pas_segregated_page_get_num_committed_granules(v172);
        v15 = v124;
        v6[6] = 3;
        v26 = v105;
        v92 = v31 + 3;
        v93 = v194;
        if (v194 == &v31[3])
        {
LABEL_133:
          v8 = v192;
          if (!v57)
            goto LABEL_57;
          goto LABEL_134;
        }
LABEL_168:
        v125 = v26;
        v126 = v15;
        if (v93)
        {
          v127 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          while (1)
          {
            v128 = __ldxr(&v93->_os_unfair_lock_opaque);
            if (v128 != v127)
              break;
            if (!__stlxr(0, &v93->_os_unfair_lock_opaque))
              goto LABEL_232;
          }
          __clrex();
          os_unfair_lock_unlock(v93);
        }
LABEL_232:
        v158 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        while (!__ldaxr(&v92->_os_unfair_lock_opaque))
        {
          if (!__stxr(v158, &v92->_os_unfair_lock_opaque))
            goto LABEL_237;
        }
        __clrex();
        os_unfair_lock_lock(v92);
LABEL_237:
        v194 = v92;
        v8 = v192;
        v15 = v126;
        v26 = v125;
        if (v57)
          goto LABEL_134;
        goto LABEL_57;
      }
      v121 = v15;
      v31[4]._os_unfair_lock_opaque &= ~0x80000000;
      if (v194)
      {
        v165 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        while (1)
        {
          v166 = __ldxr(&v194->_os_unfair_lock_opaque);
          if (v166 != v165)
            break;
          if (!__stlxr(0, &v194->_os_unfair_lock_opaque))
            goto LABEL_257;
        }
        __clrex();
        os_unfair_lock_unlock(v194);
LABEL_257:
        v194 = 0;
        v123 = v192;
      }
      v129 = v123;
      pas_segregated_page_take_physically(v172, v7, 1, v123);
      v169(v172, v129);
      v130 = &v31[3]._os_unfair_lock_opaque;
      v131 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (!__ldaxr(v130))
      {
        if (!__stxr(v131, v130))
          goto LABEL_179;
      }
      __clrex();
      os_unfair_lock_lock(v31 + 3);
LABEL_179:
      v194 = v31 + 3;
    }
    v133 = (unint64_t)v179;
    if (v57)
    {
      v134 = v105[317];
      do
      {
        v135 = *((unsigned int *)v179 + v57 + 4);
        v136 = v134 + 8 * v135;
        if ((_DWORD)v135)
          v137 = v136 == 0;
        else
          v137 = 1;
        if (!v137 && (*(_BYTE *)(v136 + 19) & 8) != 0)
        {
          v138 = *(unsigned __int16 *)(v136 + 7) | ((unint64_t)*(unsigned __int8 *)(v136 + 9) << 16);
          v139 = v134 + 8 * v138;
          if ((_DWORD)v138)
            v140 = v139;
          else
            v140 = 0;
          *(_BYTE *)(v136 + 19) &= 0xE7u;
          pas_segregated_directory_view_did_become_eligible_at_index(v140, *(unsigned __int8 *)(v136 + 16));
          v134 = v105[317];
        }
        --v57;
      }
      while (v57);
    }
    if (v194)
    {
      v156 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v157 = __ldxr(&v194->_os_unfair_lock_opaque);
        if (v157 != v156)
          break;
        if (!__stlxr(0, &v194->_os_unfair_lock_opaque))
          goto LABEL_240;
      }
      __clrex();
      os_unfair_lock_unlock(v194);
LABEL_240:
      v194 = 0;
      v133 = (unint64_t)v179;
      if (v175)
        goto LABEL_194;
    }
    else if (v175)
    {
LABEL_194:
      pas_segregated_shared_handle_destroy(v133);
      LODWORD(v8) = v192;
      LODWORD(v15) = v121;
LABEL_251:
      v6[6] = 3;
      v52 = 1;
      goto LABEL_57;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v161 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v161, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_246;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_246:
    pas_segregated_shared_handle_destroy(v133);
    v163 = *(_DWORD *)(StatusReg + 24);
    LODWORD(v8) = v192;
    LODWORD(v15) = v121;
    while (1)
    {
      v164 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v164 != v163)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_251;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
    LODWORD(v15) = v121;
    LODWORD(v8) = v192;
    goto LABEL_251;
  }
  if (v189 != v11)
  {
    v104 = v189 / v11;
    while (v104)
    {
      --v104;
      if (!*(_BYTE *)(v91 + 4 * ((unint64_t)(*(_QWORD *)v171 + 31) >> 5) + 44 + v104))
        goto LABEL_148;
    }
  }
LABEL_129:
  if ((_DWORD)v15 != 1)
  {
    v52 = 0;
    v92 = v31 + 3;
    v93 = v194;
    if (v194 == &v31[3])
      goto LABEL_133;
    goto LABEL_168;
  }
  v52 = 0;
  v8 = v192;
  if (!v57)
    goto LABEL_57;
LABEL_134:
  v94 = v26[317];
  do
  {
    v95 = *((unsigned int *)v179 + v57 + 4);
    v96 = v94 + 8 * v95;
    if ((_DWORD)v95)
      v97 = v96 == 0;
    else
      v97 = 1;
    if (!v97 && (*(_BYTE *)(v96 + 19) & 8) != 0)
    {
      v98 = *(unsigned __int16 *)(v96 + 7) | ((unint64_t)*(unsigned __int8 *)(v96 + 9) << 16);
      v99 = v94 + 8 * v98;
      if ((_DWORD)v98)
        v100 = v99;
      else
        v100 = 0;
      v101 = v31;
      v102 = v8;
      v103 = v15;
      pas_segregated_directory_view_did_become_eligible_at_index(v100, *(unsigned __int8 *)(v96 + 16));
      v15 = v103;
      v8 = v102;
      v31 = v101;
      *(_BYTE *)(v96 + 19) &= ~8u;
      v94 = v26[317];
    }
    --v57;
  }
  while (v57);
LABEL_57:
  v53 = v194;
  if (!v194)
  {
    if ((_DWORD)v15 == 1)
      goto LABEL_59;
LABEL_201:
    if ((v52 & 1) != 0)
      return 1;
    v145 = v31 + 2;
    v146 = v7[134] - 1;
    while (v146 != -1)
    {
      v147 = *(os_unfair_lock_s **)(v7[133] + 8 * v146--);
      if (v147 == v145)
        return 0;
    }
    v148 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v149 = __ldxr(&v145->_os_unfair_lock_opaque);
      if (v149 != v148)
        break;
      v52 = 0;
      if (!__stlxr(0, &v145->_os_unfair_lock_opaque))
        return v52;
    }
    __clrex();
    os_unfair_lock_unlock(v145);
    return 0;
  }
  v141 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v142 = __ldxr(&v53->_os_unfair_lock_opaque);
    if (v142 != v141)
      break;
    if (!__stlxr(0, &v53->_os_unfair_lock_opaque))
      goto LABEL_200;
  }
  __clrex();
  v143 = v8;
  v144 = v15;
  os_unfair_lock_unlock(v53);
  LODWORD(v15) = v144;
  LODWORD(v8) = v143;
LABEL_200:
  v194 = 0;
  if ((_DWORD)v15 != 1)
    goto LABEL_201;
LABEL_59:
  if (!(_DWORD)v8)
  {
    v54 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v55 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v55 != v54)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return v52;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
  return v52;
}

unint64_t pas_segregated_shared_view_create(int a1)
{
  unint64_t result;

  result = pas_immortal_heap_allocate(0x20uLL, (uint64_t)"pas_segregated_shared_view", 0);
  ++pas_segregated_shared_view_count;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a1 & 0x7FFFFFFF;
  return result;
}

unint64_t pas_segregated_shared_view_commit_page(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t (*v10)(uint64_t, os_unfair_lock_t *, _QWORD);
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  os_unfair_lock *v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_t v34;
  unsigned int v35;
  os_unfair_lock_s *v37;
  unsigned int v38;
  int v40;
  unsigned int v41;
  os_unfair_lock_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t StatusReg;
  unsigned int v53;
  int v55;
  unsigned int v56;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  char v60;
  int v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v63)(uint64_t);
  uint64_t *v64;
  os_unfair_lock_t v65;
  os_unfair_lock_t lock;

  v65 = 0;
  lock = 0;
  v60 = *(_BYTE *)(a5 + 28);
  v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 80);
  v63 = *(uint64_t (**)(uint64_t))(a5 + 56);
  v9 = *(_DWORD *)(a5 + 100);
  v61 = *(_DWORD *)(a5 + 96);
  v58 = *(uint64_t (**)(uint64_t))(a5 + 64);
  v59 = *(_QWORD *)(a5 + 128);
  v10 = *(uint64_t (**)(uint64_t, os_unfair_lock_t *, _QWORD))(a5 + 176);
  if (*(unsigned __int8 *)(a3 + 13) << 8 == 512)
  {
    v11 = *(_QWORD *)(a5 + 32);
    if (v9 == 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = (uint64_t *)&a1[2];
      os_unfair_lock_assert_owner(a1 + 2);
    }
    v64 = v12;
    if (pas_physical_page_sharing_pool_balancing_enabled)
    {
      if (*(_DWORD *)(a5 + 24) || *(_DWORD *)(a5 + 100) != 1)
      {
        pas_physical_page_sharing_pool_take(v11, v9 == 1, (uint64_t)&v64, v9 != 1);
      }
      else if (pas_physical_page_sharing_pool_balancing_enabled_for_utility)
      {
        while (1)
        {
          v13 = pas_physical_page_sharing_pool_balance;
          v14 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
          if (v14 != v13)
            break;
          if (__stlxr(pas_physical_page_sharing_pool_balance - v11, (unint64_t *)&pas_physical_page_sharing_pool_balance))
          {
            goto LABEL_13;
          }
          v15 = 1;
LABEL_14:
          __dmb(0xBu);
          if (v15)
            goto LABEL_17;
        }
        __clrex();
LABEL_13:
        v15 = 0;
        goto LABEL_14;
      }
    }
  }
LABEL_17:
  if (v9 != 1)
  {
    v16 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v16, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_23;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_23:
  v18 = *(_QWORD *)(a5 + 120) >> *(_BYTE *)(a5 + 112);
  v19 = pas_heap_for_page_config_allocate(a5, ((4 * v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 20, (uint64_t)"pas_segregated_shared_handle");
  v20 = v19;
  v21 = *(_QWORD *)&a1->_os_unfair_lock_opaque;
  *(_QWORD *)v19 = *(_QWORD *)&a1->_os_unfair_lock_opaque;
  *(_QWORD *)(v19 + 8) = a3;
  v22 = (unint64_t)a1 - pas_compact_heap_reservation_base;
  *(_BYTE *)(v19 + 16) = ((unint64_t)a1 - pas_compact_heap_reservation_base) >> 3;
  *(_BYTE *)(v19 + 17) = v22 >> 11;
  *(_BYTE *)(v19 + 18) = v22 >> 19;
  if (v18)
    bzero((void *)(v19 + 20), 4 * v18);
  *(_QWORD *)&a1->_os_unfair_lock_opaque = v20 | 1;
  if (v21)
  {
    if (v9 != 1)
    {
      v23 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v24 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v24 != v23)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_43;
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
    }
LABEL_43:
    if (v61 == 1)
      v32 = 3;
    else
      v32 = 1;
    v62(*(_QWORD *)v20, v32, 0);
    v33 = *(_QWORD *)v20;
LABEL_90:
    v51 = v63(v33);
    pas_segregated_page_construct(v51, v20 | 3, 0, a5);
    v27 = a1 + 3;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v53 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v27->_os_unfair_lock_opaque))
    {
      if (!__stxr(v53, &v27->_os_unfair_lock_opaque))
        goto LABEL_95;
    }
    __clrex();
    os_unfair_lock_lock(a1 + 3);
LABEL_95:
    a1[4]._os_unfair_lock_opaque |= 0x80000000;
    v55 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v56 = __ldxr(&v27->_os_unfair_lock_opaque);
      if (v56 != v55)
        break;
      if (!__stlxr(0, &v27->_os_unfair_lock_opaque))
        return v20;
    }
LABEL_100:
    __clrex();
    os_unfair_lock_unlock(v27);
    return v20;
  }
  if (v9 == 1)
  {
    v65 = 0;
    lock = 0;
    v25 = v10(a2, 0, 0);
    if (v25)
    {
LABEL_78:
      if (v61 == 1)
        v47 = 3;
      else
        v47 = 1;
      v48 = v62(v25, v47, 1);
      if (v9 != 1)
      {
        v49 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        while (1)
        {
          v50 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v50 != v49)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_89;
        }
        __clrex();
        os_unfair_lock_unlock(&pas_heap_lock);
      }
LABEL_89:
      v33 = v58(v48);
      *(_QWORD *)v20 = v33;
      a1[5]._os_unfair_lock_opaque = ((1 << v60) + v59 - 1) & -(int)(1 << v60);
      goto LABEL_90;
    }
  }
  else
  {
    v29 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v30 = *(_DWORD *)(v29 + 24);
    while (1)
    {
      v31 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v31 != v30)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_48;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
LABEL_48:
    v34 = 0;
    v65 = 0;
    lock = 0;
    do
    {
      if (v34)
      {
        v35 = *(_DWORD *)(v29 + 24);
        while (!__ldaxr(&v34->_os_unfair_lock_opaque))
        {
          if (!__stxr(v35, &v34->_os_unfair_lock_opaque))
            goto LABEL_58;
        }
        __clrex();
        os_unfair_lock_lock(v34);
LABEL_58:
        v37 = v65;
        v65 = 0;
        lock = v37;
      }
      v38 = *(_DWORD *)(v29 + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v38, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_64;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_64:
      v25 = v10(a2, &v65, 0);
      v40 = *(_DWORD *)(v29 + 24);
      while (1)
      {
        v41 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v41 != v40)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        {
          v42 = lock;
          if (!lock)
            goto LABEL_51;
          goto LABEL_70;
        }
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
      v42 = lock;
      if (!lock)
        goto LABEL_51;
LABEL_70:
      v43 = *(_DWORD *)(v29 + 24);
      while (1)
      {
        v44 = __ldxr(&v42->_os_unfair_lock_opaque);
        if (v44 != v43)
          break;
        if (!__stlxr(0, &v42->_os_unfair_lock_opaque))
          goto LABEL_50;
      }
      __clrex();
      os_unfair_lock_unlock(v42);
LABEL_50:
      lock = 0;
LABEL_51:
      v34 = v65;
    }
    while (v65);
    v45 = *(_DWORD *)(v29 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v45, &pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!v25)
          goto LABEL_33;
        goto LABEL_78;
      }
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
    if (v25)
      goto LABEL_78;
  }
LABEL_33:
  pas_segregated_shared_handle_destroy(v20);
  if (v9 != 1)
  {
    v26 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    v27 = &pas_heap_lock;
    while (1)
    {
      v28 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v28 != v26)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return 0;
    }
    v20 = 0;
    goto LABEL_100;
  }
  return 0;
}

void pas_segregated_shared_view_compute_summary()
{
  os_unfair_lock_s *v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  unint64_t StatusReg;
  unsigned int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(void);
  uint64_t (*v13)(unsigned __int8 *);
  unint64_t v14;
  unint64_t os_unfair_lock_opaque;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[1026];
  unsigned int v40;

  v0 = (os_unfair_lock_s *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v5 = v4;
  *(_QWORD *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  v6 = v0 + 3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v6->_os_unfair_lock_opaque))
  {
    if (!__stxr(v8, &v6->_os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(v0 + 3);
LABEL_6:
  v10 = *(unsigned __int8 *)(v2 + 28);
  v11 = *(_QWORD *)(v2 + 32);
  v12 = *(uint64_t (**)(void))(v2 + 56);
  v13 = *(uint64_t (**)(unsigned __int8 *))(v2 + 64);
  v14 = ((1 << v10) + *(_QWORD *)(v2 + 128) - 1) & -(1 << v10);
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  os_unfair_lock_opaque = v3[5]._os_unfair_lock_opaque;
  if ((v3[4]._os_unfair_lock_opaque & 0x80000000) != 0)
  {
    memset(&v39[2], 0, 496);
    v32 = StatusReg;
    v19 = (unsigned __int8 *)v12();
    pas_segregated_page_add_commit_range((unint64_t)v19, (uint64_t)&v33, 0, v11);
    pas_page_base_add_free_range(v19, &v33, 0, v14, 1);
    v30 = v11;
    v31 = os_unfair_lock_opaque;
    pas_page_base_add_free_range(v19, &v33, os_unfair_lock_opaque, v11, 1);
    v39[0] = v13(v19);
    v39[1] = v10;
    v40 = 0;
    for_each_live_object((unint64_t)v3 | 2, (unsigned int (*)(uint64_t, unint64_t, unint64_t, uint64_t))compute_summary_for_each_live_object_callback, (uint64_t)v39);
    if (v40)
    {
      v20 = 0;
      v21 = (unsigned __int16 *)&v39[2] + 1;
      do
      {
        v22 = *(v21 - 1);
        v23 = *v21;
        v21 += 2;
        v24 = v22 << v10;
        v25 = v23 << v10;
        pas_page_base_add_free_range(v19, &v33, v14, (v22 << v10), 0);
        *((_QWORD *)&v33 + 1) += ((v23 << v10) - v24);
        ++v20;
        LODWORD(v14) = v23 << v10;
      }
      while (v20 < v40);
    }
    else
    {
      v25 = v14;
    }
    pas_page_base_add_free_range(v19, &v33, v25, v31, 0);
    StatusReg = v32;
    if (!v3[6]._os_unfair_lock_opaque)
      goto LABEL_16;
    v18 = &v38;
    v16 = v38;
    v17 = v30;
  }
  else
  {
    v16 = 0;
    *(_QWORD *)&v35 = v11;
    v17 = os_unfair_lock_opaque - v14;
    *(_QWORD *)&v33 = os_unfair_lock_opaque - v14;
    v18 = (uint64_t *)&v36 + 1;
  }
  *v18 = v17 + v16;
LABEL_16:
  v26 = v36;
  *(_OWORD *)(v5 + 32) = v35;
  *(_OWORD *)(v5 + 48) = v26;
  *(_OWORD *)(v5 + 64) = v37;
  *(_QWORD *)(v5 + 80) = v38;
  v27 = v34;
  *(_OWORD *)v5 = v33;
  *(_OWORD *)(v5 + 16) = v27;
  v28 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v29 = __ldxr(&v6->_os_unfair_lock_opaque);
    if (v29 != v28)
      break;
    if (!__stlxr(0, &v6->_os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(v6);
}

uint64_t compute_summary_for_each_live_object_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _DWORD *v23;
  int *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;

  v4 = 0;
  v5 = *a4;
  v6 = a4[1];
  v7 = (unsigned __int16)((unint64_t)(a2 - *a4) >> v6);
  v8 = *((unsigned int *)a4 + 2052);
  v9 = v8;
  v10 = (unsigned __int16 *)a4 + 2 * v8 + 6;
  while (v8 != v4)
  {
    v11 = *v10;
    v10 -= 2;
    ++v4;
    if (v11 < v7)
    {
      v12 = v8 - v4 + 1;
      if (v8 <= v12)
        goto LABEL_17;
      goto LABEL_7;
    }
  }
  v12 = 0;
  if (!(_DWORD)v8)
    goto LABEL_17;
LABEL_7:
  v13 = v8 + ~v12;
  if (v13 < 0x2B)
    goto LABEL_14;
  v14 = 4 * v8;
  v15 = 4 * (v8 + ~v12);
  if ((char *)a4 + 4 * v8 - v15 + 16 > (char *)a4 + 4 * v8 + 16)
    goto LABEL_14;
  v16 = (unint64_t)a4 + 4 * (v8 - 1) + 16;
  if (v16 - v15 > v16)
    goto LABEL_14;
  if (4 * (unint64_t)(v8 - 1) - 4 * v8 < 0x20)
    goto LABEL_14;
  v17 = v13 + 1;
  v9 = v8 - (v17 & 0x1FFFFFFF8);
  v18 = v8 + 0xFFFFFFFFLL;
  v19 = (_OWORD *)((char *)a4 + v14 + 4);
  v20 = v17 & 0x1FFFFFFF8;
  do
  {
    v21 = (uint64_t)a4 + 4 * v18;
    v22 = *(_OWORD *)(v21 + 4);
    *(v19 - 1) = *(_OWORD *)(v21 - 12);
    *v19 = v22;
    v18 -= 8;
    v19 -= 2;
    v20 -= 8;
  }
  while (v20);
  if (v17 != (v17 & 0x1FFFFFFF8))
  {
LABEL_14:
    v23 = (_DWORD *)a4 + v9 + 4;
    v24 = (int *)a4 + (v9 - 1) + 4;
    do
    {
      v25 = *v24--;
      *v23-- = v25;
      LODWORD(v9) = v9 - 1;
    }
    while (v12 < v9);
  }
  LODWORD(v8) = *((_DWORD *)a4 + 2052);
LABEL_17:
  v26 = (unint64_t)(a3 - v5) >> v6;
  v27 = (uint64_t)a4 + 4 * v12;
  *(_WORD *)(v27 + 16) = v7;
  *(_WORD *)(v27 + 18) = v26;
  *((_DWORD *)a4 + 2052) = v8 + 1;
  return 1;
}

unint64_t pas_segregated_size_directory_create(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12;
  unint64_t v13;
  int v14;
  void (*v15)(void);
  unint64_t v16;
  unint64_t v17;
  int v18;
  void (*v19)(void);
  unsigned __int16 v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (a5)
  {
    v12 = *(_DWORD *)(a5 + 100);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v13 = *(unsigned int *)(a4 + 8);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v14 = pas_heap_config_kind_is_active_bitvector[v13 >> 5];
    if ((v14 & (1 << v13)) == 0)
    {
      pas_heap_config_kind_is_active_bitvector[v13 >> 5] = v14 | (1 << v13);
      v15 = *(void (**)(void))(a4 + 16);
      if (v15)
        v15();
    }
    v16 = pas_immortal_heap_allocate(0x30uLL, (uint64_t)"pas_segregated_size_directory", 0);
  }
  else
  {
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v17 = *(unsigned int *)(a4 + 8);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v18 = pas_heap_config_kind_is_active_bitvector[v17 >> 5];
    if ((v18 & (1 << v17)) == 0)
    {
      pas_heap_config_kind_is_active_bitvector[v17 >> 5] = v18 | (1 << v17);
      v19 = *(void (**)(void))(a4 + 16);
      if (v19)
        v19();
    }
    v16 = pas_immortal_heap_allocate_with_alignment(0x50uLL, 0x10uLL, (uint64_t)"pas_segregated_size_directory+pas_bitfit_size_class", 0);
    LOBYTE(v12) = 0;
  }
  v20 = v12 | (*(unsigned __int8 *)(*(_QWORD *)a1 + 1) << 8);
  *(_QWORD *)v16 = 0;
  *(_DWORD *)(v16 + 8) = 0;
  v21 = (unsigned int *)(v16 + 8);
  *(_DWORD *)(v16 + 12) = v20;
  *(_QWORD *)(v16 + 16) = a1;
  v22 = __clz(a3) << 27;
  if (!a5)
    v22 = 0;
  *(_DWORD *)(v16 + 24) = (a2 | 0xF8000000) - v22;
  *(_OWORD *)(v16 + 28) = xmmword_19919FDB0;
  if (!a5)
  {
    v23 = a1[8];
    if (!(_DWORD)v23 || (v24 = pas_compact_heap_reservation_base + 8 * v23) == 0)
    {
      v25 = a1[8];
      if (!(_DWORD)v25 || (v24 = pas_compact_heap_reservation_base + 8 * v25) == 0)
      {
        v24 = pas_bitfit_heap_create((uint64_t)a1, a4);
        v26 = (v24 - pas_compact_heap_reservation_base) >> 3;
        if (!v24)
          LODWORD(v26) = 0;
        a1[8] = v26;
      }
    }
    pas_bitfit_heap_construct_and_insert_size_class(v24, v16 + 48, a2, a4, *(_QWORD *)a1);
  }
  *(_DWORD *)(v16 + 44) = 0;
  do
  {
    v27 = *v21 & 0xFFFFFFFB;
    if (v27 == *v21)
      break;
    v28 = __ldxr(v21);
    if (v28 != *v21)
    {
      __clrex();
LABEL_27:
      v29 = 0;
      goto LABEL_28;
    }
    if (__stlxr(v27, v21))
      goto LABEL_27;
    v29 = 1;
LABEL_28:
    __dmb(0xBu);
  }
  while (!v29);
  if (a6 == 1)
  {
    v30 = *(uint64_t **)(v16 + 16);
    v31 = *v30;
    if (*(_DWORD *)(*v30 + 8))
    {
      if (*(_DWORD *)(v31 + 4))
        goto LABEL_32;
LABEL_35:
      pas_segregated_size_directory_enable_exclusive_views(v16);
      if (!*(_DWORD *)(*v30 + 12))
        goto LABEL_36;
    }
    else
    {
      pas_segregated_size_directory_create_tlc_allocator(v16);
      v31 = *v30;
      if (!*(_DWORD *)(*v30 + 4))
        goto LABEL_35;
LABEL_32:
      if (!*(_DWORD *)(v31 + 12))
LABEL_36:
        pas_segregated_size_directory_create_tlc_view_cache(v16);
    }
  }
  return v16;
}

void pas_segregated_size_directory_create_tlc_allocator(unint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (*(_BYTE *)(a1 + 12) != 1)
  {
    v2 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v2)
      v3 = 8 * v2 == -pas_compact_heap_reservation_base;
    else
      v3 = 1;
    if (!v3
      || (v4 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(a1 + 12)),
          v5 = *(unsigned int *)(a1 + 40),
          (_DWORD)v5)
      && 8 * v5 != -pas_compact_heap_reservation_base)
    {
      if (*(_DWORD *)(a1 + 36))
        return;
LABEL_16:
      pas_thread_local_cache_layout_add_node(a1);
      return;
    }
    if (v4 && *(_QWORD *)(v4 + 32) > *(_QWORD *)(v4 + 40))
    {
      v6 = pas_immortal_heap_allocate(0x14uLL, (uint64_t)"pas_extended_segregated_size_directory_data", 0);
      *(_DWORD *)(v6 + 16) = 0;
    }
    else
    {
      v6 = pas_immortal_heap_allocate(0x10uLL, (uint64_t)"pas_segregated_size_directory_data", 0);
    }
    *(_QWORD *)(v6 + 5) = 0;
    *(_QWORD *)v6 = 0;
    __dmb(0xBu);
    *(_DWORD *)(a1 + 40) = (v6 - pas_compact_heap_reservation_base) >> 3;
    if (!*(_DWORD *)(a1 + 36))
      goto LABEL_16;
  }
}

void pas_segregated_size_directory_enable_exclusive_views(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int i;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t *v34;
  int32x4_t v35;
  uint64_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  char v57;
  void *v58;
  char v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t j;
  _QWORD *v79;
  unsigned int v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int64x2_t v90;
  __int128 v91;
  __int128 v92;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v2 = *(unsigned int *)(a1 + 40);
  v3 = pas_compact_heap_reservation_base + 8 * v2;
  if ((_DWORD)v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4
    || (v5 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(a1 + 12)),
        v6 = *(unsigned int *)(a1 + 40),
        (_DWORD)v6)
    && (v3 = pas_compact_heap_reservation_base + 8 * v6) != 0)
  {
    if (*(_BYTE *)(v3 + 8))
      return;
  }
  else
  {
    if (v5 && *(_QWORD *)(v5 + 32) > *(_QWORD *)(v5 + 40))
    {
      v3 = pas_immortal_heap_allocate(0x14uLL, (uint64_t)"pas_extended_segregated_size_directory_data", 0);
      *(_DWORD *)(v3 + 16) = 0;
    }
    else
    {
      v3 = pas_immortal_heap_allocate(0x10uLL, (uint64_t)"pas_segregated_size_directory_data", 0);
    }
    *(_QWORD *)(v3 + 5) = 0;
    *(_QWORD *)v3 = 0;
    __dmb(0xBu);
    *(_DWORD *)(a1 + 40) = (v3 - pas_compact_heap_reservation_base) >> 3;
    if (*(_BYTE *)(v3 + 8))
      return;
  }
  v7 = *(unsigned __int8 *)(a1 + 12);
  if (!*(_BYTE *)(a1 + 12))
    return;
  v8 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(a1 + 12));
  v9 = *(_DWORD *)(a1 + 24) & 0x7FFFFFF;
  if (pas_exclusive_view_template_memo_table_instance)
  {
    v10 = v9 | (v7 << 32);
    v11 = (v9 ^ (v9 >> 4) ^ 0xDEADBEEF) + 32 * (v9 ^ (v9 >> 4));
    for (i = v7 ^ (v11 >> 11) ^ v11; ; ++i)
    {
      v13 = *(_QWORD *)(pas_exclusive_view_template_memo_table_instance + 8 * (i & dword_1ECF57A24));
      if (v13 > 1)
      {
        if ((*(_DWORD *)(v13 + 24) & 0x7FFFFFF | ((unint64_t)*(unsigned __int8 *)(v13 + 12) << 32)) == v10)
        {
          v28 = *(unsigned int *)(v13 + 40);
          if ((_DWORD)v28)
            v29 = pas_compact_heap_reservation_base + 8 * v28;
          else
            v29 = 0;
          *(_DWORD *)(v3 + 9) = *(_DWORD *)(v29 + 9);
          *(_QWORD *)v3 = *(_QWORD *)v29;
          if (*(_QWORD *)(v8 + 32) > *(_QWORD *)(v8 + 40))
          {
            v30 = *(unsigned int *)(a1 + 40);
            if ((_DWORD)v30)
              v31 = pas_compact_heap_reservation_base + 8 * v30;
            else
              v31 = 0;
            v32 = *(unsigned int *)(v13 + 40);
            if ((_DWORD)v32)
              v33 = pas_compact_heap_reservation_base + 8 * v32;
            else
              v33 = 0;
            *(_DWORD *)(v31 + 16) = *(_DWORD *)(v33 + 16);
          }
          __dmb(0xBu);
          *(_BYTE *)(v3 + 8) = *(_BYTE *)(v29 + 8);
          return;
        }
      }
      else if (v13 != 1)
      {
        break;
      }
    }
  }
  v14 = *(_BYTE *)(v8 + 28);
  v15 = *(_QWORD *)(v8 + 32);
  v88 = *(_QWORD *)(v8 + 40);
  v16 = *(_QWORD *)(v8 + 136);
  v17 = *(_QWORD *)(v8 + 152);
  v18 = *(_QWORD *)(v8 + 120) + 31;
  v19 = (_DWORD *)pas_immortal_heap_allocate_with_manual_alignment((v18 >> 3) & 0x1FFFFFFFFFFFFFFCLL, 8, (uint64_t)"pas_segregated_size_directory_data/full_alloc_bits", 0);
  v20 = v19;
  v21 = pas_compact_heap_reservation_base;
  if ((unint64_t)v19 < 8)
    v21 = 0;
  *(_DWORD *)(v3 + 9) = (_DWORD)v19 - v21;
  bzero(v19, (v18 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  v22 = (v17 + v16) / v9 * v9;
  v87 = v16;
  v23 = (v15 - v16) % v9 + v16;
  if (v22 - ((v16 + v9 - 1) / v9) * (_DWORD)v9 < (_DWORD)v15
                                                              - ((v15 + v9 - 1 - (v17 + v16)) / v9)
                                                              * (_DWORD)v9
                                                              - v23)
    v22 = v15 - (v15 + v9 - 1 - (v17 + v16)) / v9 * v9;
  else
    v23 = (v16 + v9 - 1) / v9 * v9;
  *(_DWORD *)v3 = v23;
  for (*(_DWORD *)(v3 + 4) = v22; v23 < v22; v23 += v9)
    *(_DWORD *)((char *)v20 + (((unint64_t)v23 >> v14 >> 3) & 0x1FFFFFFC)) |= 1 << ((unint64_t)v23 >> v14);
  if (v18 < 0x20)
  {
    v24 = 0;
    v25 = v88;
    goto LABEL_51;
  }
  v26 = v18 >> 5;
  v25 = v88;
  if (v18 >= 0x100)
  {
    v27 = v18 >> 5;
    v34 = (int32x4_t *)&v20[v26 - 4];
    v35 = 0uLL;
    v36 = v26 & 0x7FFFFFFFFFFFFF8;
    v37 = 0uLL;
    do
    {
      v38 = (int8x16_t)vrev64q_s32(*v34);
      v39 = (int32x4_t)vextq_s8(v38, v38, 8uLL);
      v40 = (int8x16_t)vrev64q_s32(v34[-1]);
      v41 = (int32x4_t)vextq_s8(v40, v40, 8uLL);
      v35 = vsubq_s32(v35, vtstq_s32(v39, v39));
      v37 = vsubq_s32(v37, vtstq_s32(v41, v41));
      v34 -= 2;
      v36 -= 8;
    }
    while (v36);
    v24 = vaddvq_s32(vaddq_s32(v37, v35));
    if (v26 == (v26 & 0x7FFFFFFFFFFFFF8))
      goto LABEL_51;
  }
  else
  {
    v24 = 0;
    v27 = v18 >> 5;
  }
  do
  {
    if (v20[v27 - 1])
      ++v24;
    --v27;
  }
  while (v27);
LABEL_51:
  if (v15 <= v25)
    goto LABEL_66;
  v42 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v42)
    v43 = pas_compact_heap_reservation_base + 8 * v42;
  else
    v43 = 0;
  v89 = v43;
  v44 = v15 / v25;
  v45 = v17 + v16;
  v46 = (void *)pas_immortal_heap_allocate_with_manual_alignment(v15 / v25, 8, (uint64_t)"pas_extended_segregated_size_directory_data/full_use_counts", 0);
  v47 = v15 / v25 * v25;
  bzero(v46, v15 / v25);
  if (!v87)
    goto LABEL_62;
  if (v47)
  {
    v48 = 0;
    if (v87 >= v47)
      v49 = v44 * v25;
    else
      v49 = v87;
    v50 = (v49 - 1) / v25;
    do
      ++*((_BYTE *)v46 + v48++);
    while (v48 <= v50);
LABEL_62:
    if (v87 <= v47)
    {
      v71 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a1 + 40));
      v73 = *v71;
      v72 = v71[1];
      v74 = *(_DWORD *)(a1 + 24) & 0x7FFFFFF;
      while (v73 < v72)
      {
        if (v73 < v47)
        {
          v75 = v73 + v74;
          if (v73 + v74 >= v47)
            v76 = v44 * v25;
          else
            v76 = v73 + v74;
          if (v73 != v76)
          {
            v77 = v73 / v25;
            for (j = (v76 - 1) / v25; v77 <= j; ++v77)
              ++*((_BYTE *)v46 + v77);
          }
          v73 = v75;
          if (v75 <= v47)
            continue;
        }
        goto LABEL_63;
      }
      if (v15 > v45 && v45 < v47)
      {
        v84 = v15 >= v47 ? v44 * v25 : v15;
        if (v45 != v84)
        {
          v85 = v45 / v25;
          v86 = (v84 - 1) / v25;
          if (v45 / v25 <= v86)
          {
            do
              ++*((_BYTE *)v46 + v85++);
            while (v85 <= v86);
          }
        }
      }
    }
  }
LABEL_63:
  v51 = pas_compact_heap_reservation_base;
  if ((unint64_t)v46 < 8)
    v51 = 0;
  *(_DWORD *)(v89 + 16) = (_DWORD)v46 - v51;
LABEL_66:
  __dmb(0xBu);
  *(_BYTE *)(v3 + 8) = v24;
  v52 = *(unsigned __int8 *)(a1 + 12);
  v53 = *(_DWORD *)(a1 + 24) & 0x7FFFFFF;
  if (dword_1ECF57A20 <= (2 * (dword_1ECF57A2C + dword_1ECF57A28)))
  {
    if (6 * dword_1ECF57A28 >= (2 * dword_1ECF57A20))
      v54 = 2 * dword_1ECF57A20;
    else
      v54 = dword_1ECF57A20;
    v91 = 0u;
    v92 = 0u;
    if (dword_1ECF57A20)
      v55 = v54;
    else
      v55 = 16;
    v90 = 0uLL;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    initialize_config(&v90);
    v56 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, 8 * v55, 8, 0, &v90);
    v58 = (void *)v56;
    v59 = v57;
    if (v56)
      v60 = pas_allocation_callback == 0;
    else
      v60 = 1;
    if (v60)
    {
      if ((v57 & 1) != 0)
        goto LABEL_91;
    }
    else
    {
      pas_allocation_callback(v56, 8 * v55, 0, "pas_exclusive_view_template_memo_table/table", 0);
      if ((v59 & 1) != 0)
      {
LABEL_91:
        v70 = pas_bootstrap_free_heap_num_allocated_object_bytes + 8 * v55;
        pas_bootstrap_free_heap_num_allocated_object_bytes = v70;
        if (v70 <= pas_bootstrap_free_heap_num_allocated_object_bytes_peak)
          v70 = pas_bootstrap_free_heap_num_allocated_object_bytes_peak;
        pas_bootstrap_free_heap_num_allocated_object_bytes_peak = v70;
        v61 = v55 - 1;
        if (!v55)
          goto LABEL_81;
LABEL_80:
        bzero(v58, 8 * v55);
LABEL_81:
        v62 = pas_exclusive_view_template_memo_table_instance;
        v63 = dword_1ECF57A20;
        if (dword_1ECF57A20)
        {
          v64 = 0;
          do
          {
            v65 = *(_QWORD *)(v62 + 8 * v64);
            if (v65 >= 2)
            {
              v66 = *(_DWORD *)(v65 + 24) & 0x7FFFFFF ^ ((*(_DWORD *)(v65 + 24) & 0x7FFFFFFu) >> 4);
              v67 = *(unsigned __int8 *)(v65 + 12) ^ (((v66 ^ 0xDEADBEEF) + 32 * v66) >> 11) ^ ((v66 ^ 0xDEADBEEF)
                                                                                              + 32 * v66);
              do
                v68 = v67++ & v61;
              while (*((_QWORD *)v58 + v68) > 1uLL);
              *((_QWORD *)v58 + v68) = v65;
            }
            ++v64;
          }
          while (v64 != v63);
          v69 = 8 * v63;
          pas_exclusive_view_template_memo_table_instance = (uint64_t)v58;
          dword_1ECF57A20 = v55;
          dword_1ECF57A24 = v61;
          dword_1ECF57A2C = 0;
          if (8 * v63)
          {
            if (v62 && pas_deallocation_callback)
              pas_deallocation_callback(v62, v69, 0, 0);
            v91 = 0u;
            v92 = 0u;
            v90 = 0u;
            initialize_config(&v90);
            pas_simple_large_free_heap_deallocate(&pas_bootstrap_free_heap, v62, v69 + v62, 0, &v90);
            pas_bootstrap_free_heap_num_allocated_object_bytes -= v69;
          }
        }
        else
        {
          pas_exclusive_view_template_memo_table_instance = (uint64_t)v58;
          dword_1ECF57A20 = v55;
          dword_1ECF57A24 = v61;
          dword_1ECF57A2C = 0;
        }
        goto LABEL_111;
      }
    }
    v61 = v55 - 1;
    if (!v55)
      goto LABEL_81;
    goto LABEL_80;
  }
LABEL_111:
  v79 = 0;
  v80 = (v53 ^ (v53 >> 4) ^ 0xDEADBEEF) + 32 * (v53 ^ (v53 >> 4));
  v81 = v52 ^ (v80 >> 11) ^ v80;
  v82 = (_QWORD *)(pas_exclusive_view_template_memo_table_instance + 8 * (v81 & dword_1ECF57A24));
  v83 = *v82;
  if (*v82 != 1)
    goto LABEL_115;
  do
  {
LABEL_112:
    if (!v79)
      v79 = v82;
    v82 = (_QWORD *)(pas_exclusive_view_template_memo_table_instance + 8 * (++v81 & dword_1ECF57A24));
    v83 = *v82;
  }
  while (*v82 == 1);
LABEL_115:
  while (v83)
  {
    if ((*(_DWORD *)(v83 + 24) & 0x7FFFFFF | ((unint64_t)*(unsigned __int8 *)(v83 + 12) << 32)) == (v53 | (v52 << 32)))
      goto LABEL_122;
    v82 = (_QWORD *)(pas_exclusive_view_template_memo_table_instance + 8 * (++v81 & dword_1ECF57A24));
    v83 = *v82;
    if (*v82 == 1)
      goto LABEL_112;
  }
  if (v79)
  {
    --dword_1ECF57A2C;
    v82 = v79;
  }
  ++dword_1ECF57A28;
LABEL_122:
  *v82 = a1;
}

void pas_segregated_size_directory_create_tlc_view_cache(unint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t StatusReg;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  os_unfair_lock_s *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (*(_BYTE *)(a1 + 12) != 1)
  {
    v2 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v3 = *v2 | 4;
      if (v3 == *v2)
        return;
      v4 = __ldxr(v2);
      if (v4 != *v2)
        break;
      if (__stlxr(v3, v2))
        goto LABEL_9;
      v5 = 1;
LABEL_10:
      __dmb(0xBu);
      if (v5)
      {
        if (*(_BYTE *)(a1 + 12)
          && *((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(a1 + 12)) + 172)
          && (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_DWORD *)(a1 + 24) & 0x7FFFFFF))
        {
          pas_thread_local_cache_layout_add_node(a1 | 2);
          v6 = *(unsigned int *)a1;
          v7 = v6 >= 8 ? pas_compact_heap_reservation_base : 0;
          if (v7 + v6)
          {
            v8 = *(unsigned int *)(a1 + 4);
            v9 = 1;
            if (!(_DWORD)v8
              || (v10 = pas_compact_heap_reservation_base + 8 * v8) == 0
              || (v11 = *(_DWORD *)(v10 + 48), v9 = (v11 + 1), v11 != -1))
            {
              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              do
              {
                v13 = v9;
                v14 = pas_compact_heap_reservation_base;
                v15 = (unsigned int *)a1;
                if (--v9)
                {
                  v16 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a1 + 4) + 44);
                  if ((_DWORD)v16)
                    v17 = pas_compact_heap_reservation_base + 8 * v16;
                  else
                    v17 = 0;
                  v15 = (unsigned int *)(v17 + 4 * v13 - 8);
                }
                v18 = *v15;
                if (v18 < 8)
                  v14 = 0;
                v19 = v14 + v18;
                if (((v14 + v18) & 6) == 0
                  && pas_segregated_view_lock_ownership_lock_if_owned_conditionally(v14 + v18, 0))
                {
                  v20 = *(_DWORD *)(a1 + 32);
                  *(_DWORD *)(pas_segregated_view_get_page(v19) + 40) = v20;
                  switch(v19 & 7)
                  {
                    case 0:
                    case 1:
                      v21 = (os_unfair_lock_s *)((v19 & 0xFFFFFFFFFFFFFFF8) + 20);
                      break;
                    case 2:
                      v22 = v19 & 0xFFFFFFFFFFFFFFF8;
                      goto LABEL_39;
                    case 3:
                      v23 = *(unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFF8) + 18);
                      v24 = *(unsigned __int16 *)((v19 & 0xFFFFFFFFFFFFFFF8) + 16);
                      goto LABEL_38;
                    case 4:
                      v23 = *(unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFF8) + 6);
                      v24 = *(unsigned __int16 *)((v19 & 0xFFFFFFFFFFFFFFF8) + 4);
LABEL_38:
                      v22 = ((8 * v24) | (v23 << 19)) + pas_compact_heap_reservation_base;
LABEL_39:
                      v21 = (os_unfair_lock_s *)(v22 + 12);
                      break;
                    default:
                      v21 = 0;
                      break;
                  }
                  v25 = *(_DWORD *)(StatusReg + 24);
                  while (1)
                  {
                    v26 = __ldxr(&v21->_os_unfair_lock_opaque);
                    if (v26 != v25)
                      break;
                    if (!__stlxr(0, &v21->_os_unfair_lock_opaque))
                      goto LABEL_23;
                  }
                  __clrex();
                  os_unfair_lock_unlock(v21);
                }
LABEL_23:
                ;
              }
              while (v9);
            }
          }
        }
        return;
      }
    }
    __clrex();
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
}

os_unfair_lock_s *pas_segregated_size_directory_select_allocator_slow(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t StatusReg;
  unsigned int v5;
  os_unfair_lock_s *v6;
  unsigned int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v50;

  v2 = pthread_once(&pas_baseline_allocator_table_initialize_if_necessary_once_control, initialize);
  v50 = a1;
  v3 = (unsigned int *)(a1 + 28);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
LABEL_3:
    v5 = *v3 & 0x7F;
    if (v5 <= 0x1F)
    {
      v6 = (os_unfair_lock_s *)(pas_baseline_allocator_table + 320 * v5);
      v7 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&v6->_os_unfair_lock_opaque))
      {
        if (!__stxr(v7, &v6->_os_unfair_lock_opaque))
        {
          if ((*v3 & 0x7F) == v5)
            return v6;
          goto LABEL_12;
        }
      }
      __clrex();
      os_unfair_lock_lock(v6);
      if ((*v3 & 0x7F) == v5)
        return v6;
LABEL_12:
      v10 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v11 = __ldxr(&v6->_os_unfair_lock_opaque);
        if (v11 != v10)
          goto LABEL_2;
        if (!__stlxr(0, &v6->_os_unfair_lock_opaque))
          goto LABEL_3;
      }
    }
    if (v5 > 0x3F)
    {
      v12 = pas_baseline_allocator_table_bound;
      if (pas_mock_fast_random)
      {
        v30 = pas_mock_fast_random(v2);
        v15 = pas_baseline_allocator_table_bound;
        if (v12 >= 0x20)
          v31 = 32;
        else
          v31 = v12;
        if (!v31)
          v31 = -1;
        v9 = v30 % v31;
        if (pas_mock_fast_random)
        {
          v2 = ((uint64_t (*)(void))pas_mock_fast_random)();
          goto LABEL_24;
        }
      }
      else
      {
        v13 = pas_fast_random_state ^ (pas_fast_random_state << 13) ^ ((pas_fast_random_state ^ (pas_fast_random_state << 13)) >> 17) ^ (32 * (pas_fast_random_state ^ (pas_fast_random_state << 13) ^ ((pas_fast_random_state ^ (pas_fast_random_state << 13)) >> 17)));
        pas_fast_random_state = v13;
        if (pas_baseline_allocator_table_bound >= 0x20)
          v14 = 32;
        else
          v14 = pas_baseline_allocator_table_bound;
        if (!v14)
          v14 = -1;
        v9 = v13 % v14;
        v15 = pas_baseline_allocator_table_bound;
      }
      v16 = pas_fast_random_state ^ (pas_fast_random_state << 13) ^ ((pas_fast_random_state ^ (pas_fast_random_state << 13)) >> 17);
      v2 = v16 ^ (32 * v16);
      pas_fast_random_state = v16 ^ (32 * v16);
LABEL_24:
      if (v15 >= 0x20)
        v17 = 32;
      else
        v17 = v15;
      if (!v17)
        v17 = -1;
      v18 = pas_baseline_allocator_table + 320 * v9;
      if (*(_QWORD *)(v18 + 32))
      {
        v19 = v2 % v17;
        if (*(_QWORD *)(pas_baseline_allocator_table + 320 * v19 + 32))
        {
          if (*(_QWORD *)(v18 + 56))
            v9 = v19;
        }
        else
        {
          v9 = v19;
        }
      }
      while (1)
      {
        v20 = *v3;
        if ((*v3 & 0x7F) != 0x40)
          goto LABEL_3;
        v21 = __ldxr(v3);
        if (v21 != v20)
          break;
        if (__stlxr(v20 & 0xFFFFFF80 | (v9 + 32), v3))
          goto LABEL_39;
        v22 = 1;
LABEL_40:
        __dmb(0xBu);
        if (v22)
          goto LABEL_41;
      }
      __clrex();
LABEL_39:
      v22 = 0;
      goto LABEL_40;
    }
    v9 = v5 - 32;
LABEL_41:
    v23 = pas_baseline_allocator_table;
    v24 = v9;
    v6 = (os_unfair_lock_s *)(pas_baseline_allocator_table + 320 * v9);
    v25 = *(_DWORD *)(StatusReg + 24);
LABEL_42:
    if (__ldaxr(&v6->_os_unfair_lock_opaque))
      break;
    if (__stxr(v25, &v6->_os_unfair_lock_opaque))
      goto LABEL_42;
    v27 = *v3 & 0x7F;
    if (v27 == v24)
      return v6;
LABEL_47:
    if (v27 == v24 + 32)
    {
      v32 = v23 + 320 * v24;
      v34 = *(_QWORD *)(v32 + 56);
      v33 = (uint64_t *)(v32 + 56);
      if (v34)
      {
        ++pas_num_baseline_allocator_evictions;
        v35 = *v33;
        if ((v35 & 7) == 5)
        {
          v36 = v35 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_70;
        }
        if (!v35)
          goto LABEL_69;
        if ((v35 & 7u) < 2)
        {
          v37 = v35 & 0xFFFFFFFFFFFFFFF8;
          v38 = *(unsigned __int8 *)(v37 + 10);
          v39 = *(unsigned __int16 *)(v37 + 8);
          goto LABEL_68;
        }
        if ((v35 & 7) == 4)
        {
          v40 = (unsigned __int16 *)(v35 | 7);
          v38 = *((unsigned __int8 *)v40 + 2);
          v39 = *v40;
LABEL_68:
          v36 = ((8 * v39) | (v38 << 19)) + pas_compact_heap_reservation_base;
        }
        else
        {
LABEL_69:
          v36 = 0;
        }
LABEL_70:
        v41 = v23 + 320 * v24;
        pas_local_allocator_stop((_BYTE *)(v41 + 8), 1, 0);
        *(_OWORD *)(v41 + 8) = 0u;
        *(_OWORD *)(v41 + 24) = 0u;
        *(_OWORD *)(v41 + 40) = 0u;
        *(_OWORD *)(v41 + 56) = 0u;
        v42 = (unsigned int *)(v36 + 28);
        while (2)
        {
          v43 = *v42;
          v44 = __ldxr(v42);
          if (v44 == v43)
          {
            if (!__stlxr(*v42 & 0xFFFFFF80 | 0x40, v42))
            {
              v45 = 1;
              goto LABEL_76;
            }
          }
          else
          {
            __clrex();
          }
          v45 = 0;
LABEL_76:
          __dmb(0xBu);
          if (v45)
            break;
          continue;
        }
      }
      pas_local_allocator_construct(v23 + 320 * v24 + 8, v50);
      while (2)
      {
        v46 = *v3;
        v47 = __ldxr(v3);
        if (v47 == v46)
        {
          if (!__stlxr(*v3 & 0xFFFFFF80 | v24, v3))
          {
            v48 = 1;
            goto LABEL_83;
          }
        }
        else
        {
          __clrex();
        }
        v48 = 0;
LABEL_83:
        __dmb(0xBu);
        if (v48)
          return v6;
        continue;
      }
    }
    v28 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v29 = __ldxr(&v6->_os_unfair_lock_opaque);
      if (v29 != v28)
        break;
      if (!__stlxr(0, &v6->_os_unfair_lock_opaque))
        goto LABEL_3;
    }
LABEL_2:
    __clrex();
    os_unfair_lock_unlock(v6);
  }
  __clrex();
  os_unfair_lock_lock(v6);
  v27 = *v3 & 0x7F;
  if (v27 != v24)
    goto LABEL_47;
  return v6;
}

unint64_t pas_segregated_size_directory_take_first_eligible(unsigned int *a1)
{
  unsigned int *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int128 *v49;
  unsigned __int128 v50;
  unsigned int v51;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int128 *v62;
  BOOL v63;
  unint64_t v65;
  unsigned __int128 v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int *v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  unint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned int *v94;
  unint64_t StatusReg;
  int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int *v104;
  __int128 v105;
  _BYTE v106[40];
  uint64_t (*v107)(unint64_t, unsigned int **);
  uint64_t (*v108)(unsigned int **);
  uint64_t v109;

  v1 = a1;
  memset(v106, 0, sizeof(v106));
  v105 = 0u;
  v97 = *((_DWORD *)*(&pas_segregated_page_config_kind_for_config_table + *((unsigned __int8 *)a1 + 12)) + 25);
  v2 = (_QWORD *)&unk_1ECF57000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v94 = a1 + 2;
LABEL_3:
  while (1)
  {
    v104 = v1;
    v107 = (uint64_t (*)(unint64_t, unsigned int **))pas_segregated_size_directory_take_first_eligible_impl_should_consider_view_parallel;
    v108 = 0;
    v109 = 0;
    v3 = *v1;
    v4 = v2[317];
    while (1)
    {
      if (v3 >= 8)
        v6 = v4;
      else
        v6 = 0;
      v7 = v1[1];
      if (!(v6 + v3))
      {
        v8 = 0;
        v9 = (unint64_t *)(v4 + 8 * v7);
        if ((_DWORD)v7)
          v10 = v9 == 0;
        else
          v10 = 1;
        if (!v10)
          goto LABEL_36;
        goto LABEL_32;
      }
      v9 = (unint64_t *)(v4 + 8 * v7);
      if ((_DWORD)v7)
        v11 = v9 == 0;
      else
        v11 = 1;
      if (!v11)
      {
        v8 = (*((_DWORD *)v9 + 12) + 1);
        if ((_DWORD)v7)
          v13 = v9 == 0;
        else
          v13 = 1;
        if (!v13)
          goto LABEL_36;
        goto LABEL_32;
      }
      v8 = 1;
      if ((_DWORD)v7)
        v12 = v9 == 0;
      else
        v12 = 1;
      if (!v12)
      {
        while (1)
        {
LABEL_36:
          v16 = v9[1];
          v15 = *v9;
          if ((v16 & 1) != 0)
            goto LABEL_44;
          v17 = __ldxp((unsigned __int128 *)v9);
          if ((unint64_t)v17 ^ v15 | *((_QWORD *)&v17 + 1) ^ v16)
            break;
          if (__stlxp(__PAIR128__(v16 + 1, v15), (unsigned __int128 *)v9))
            goto LABEL_41;
          v18 = 1;
LABEL_42:
          __dmb(0xBu);
          if (v18)
          {
            ++v16;
            goto LABEL_44;
          }
        }
        __clrex();
LABEL_41:
        v18 = 0;
        goto LABEL_42;
      }
LABEL_32:
      v14 = v3 != 0;
      v15 = (v1[2] & 1) == 0 && v14;
      v16 = -1;
LABEL_44:
      *(_QWORD *)&v105 = v15;
      if (v8 == v15)
        break;
      v103 = v8;
      *((_QWORD *)&v105 + 1) = v8;
      __dmb(0xBu);
      *(_QWORD *)v106 = -1;
      memset(&v106[8], 0, 32);
      if ((_QWORD)v105)
        goto LABEL_46;
      v42 = v104[2] & 1 | ((unint64_t)((v104[2] >> 1) & 1) << 32);
      if (!v107(v42, &v104)
        || (*(_QWORD *)&v106[32] = v42,
            *(_WORD *)&v106[29] = 0,
            v106[31] = 0,
            *(_DWORD *)&v106[24] = 1,
            v106[28] = 1,
            *(_QWORD *)&v105 = 0,
            memset(v106, 0, 24),
            *((_QWORD *)&v105 + 1))
        && v108
        && (v108(&v104) & 1) == 0)
      {
LABEL_46:
        v19 = v104[1];
        v2 = &unk_1ECF57000;
        v20 = pas_compact_heap_reservation_base + 8 * v19;
        if ((_DWORD)v19)
          v21 = v20 == 0;
        else
          v21 = 1;
        if (v21)
          goto LABEL_81;
        v22 = v105;
        v23 = *(unsigned int *)(v20 + 36);
        if ((unint64_t)v105 <= 1)
          v22 = 1;
        v24 = v22 - 1;
        v25 = v24 >> 7;
        v26 = *(unsigned int *)(v20 + 32);
        v27 = (_DWORD)v26 ? pas_compact_heap_reservation_base + 8 * v26 : 0;
        v28 = 4 * v25;
        v29 = v23 - 4 * v25;
        if (v23 <= 4 * v25)
          goto LABEL_81;
        v30 = (v24 >> 5) & 3;
        v98 = v27;
        v99 = v23;
        while (1)
        {
          v31 = v29 - 4;
          if (v29 >= 4)
            v29 = 4;
          v101 = v31;
          v102 = v29;
          v32 = *(unsigned int *)(v27 + 4 * v25);
          v33 = v2[317] + 8 * v32;
          if (!(_DWORD)v32)
            v33 = 0;
          v34 = v23 - v28;
          if (v23 - v28 >= 4)
            v34 = 4;
          if (v30 < v34)
            break;
LABEL_74:
          v30 = 0;
          ++v25;
          v28 = 4 * v25;
          v29 = v101;
          v27 = v98;
          v23 = v99;
          v2 = (_QWORD *)&unk_1ECF57000;
          if (4 * v25 >= v99)
            goto LABEL_81;
        }
        v100 = v33;
        while (1)
        {
          v35 = (unint64_t *)(v33 + 8 * v30);
          v36 = *v35;
          v37 = v107(*v35, &v104);
          if (v37)
            break;
LABEL_73:
          ++v30;
          v33 = v100;
          if (v30 == v102)
            goto LABEL_74;
        }
        v38 = v37;
        while (1)
        {
          v39 = __clz(__rbit32(v38));
          v40 = (1 << v39);
          v41 = ((32 * (v30 + v28)) | 1) + v39;
          *(_QWORD *)&v106[24] = v40;
          *(_QWORD *)&v106[32] = v36;
          *(_QWORD *)&v105 = v41;
          *(_QWORD *)&v106[8] = v35;
          *(_QWORD *)&v106[16] = v41;
          if (*(_QWORD *)v106 == -1)
            *(_QWORD *)v106 = v41;
          if (v41 >= *((_QWORD *)&v105 + 1) || !v108 || (v108(&v104) & 1) != 0)
            break;
          v38 &= ~(_DWORD)v40;
          if (!v38)
            goto LABEL_73;
        }
      }
      v43 = v105;
      v2 = &unk_1ECF57000;
      if ((unint64_t)v105 < v103)
      {
        v60 = v104[1];
        v61 = pas_compact_heap_reservation_base;
        v62 = (unsigned __int128 *)(pas_compact_heap_reservation_base + 8 * v60);
        if ((_DWORD)v60)
          v63 = v62 == 0;
        else
          v63 = 1;
        if (!v63 && v16 != -1)
        {
          v65 = *(_QWORD *)v106;
          while (1)
          {
            v66 = __ldxp(v62);
            if ((unint64_t)v66 ^ v15 | *((_QWORD *)&v66 + 1) ^ v16)
              break;
            if (!__stlxp(__PAIR128__(v16 + 2, v65), v62))
              goto LABEL_129;
          }
          __clrex();
LABEL_129:
          __dmb(0xBu);
          v43 = v105;
          v61 = pas_compact_heap_reservation_base;
        }
        v1 = a1;
        v67 = a1;
        if (v43)
        {
          v68 = *(unsigned int *)(v61 + 8 * a1[1] + 44);
          if ((_DWORD)v68)
            v69 = v61 + 8 * v68;
          else
            v69 = 0;
          v67 = (unsigned int *)(v69 + 4 * v43 - 4);
        }
        v70 = *v67;
        if (v106[28])
        {
          while (1)
          {
            v71 = *v94 & 0xFFFFFFFE;
            if (*v94 == v71)
              goto LABEL_3;
            v72 = __ldxr(v94);
            if (v72 != *v94)
              break;
            if (__stlxr(v71, v94))
              goto LABEL_141;
            v73 = 1;
LABEL_142:
            __dmb(0xBu);
            if (v73)
              goto LABEL_154;
          }
          __clrex();
LABEL_141:
          v73 = 0;
          goto LABEL_142;
        }
        v74 = *(unsigned int **)&v106[8];
        v75 = ~*(_DWORD *)&v106[24];
        while (1)
        {
          v76 = *v74 & v75;
          if (*v74 == v76)
            goto LABEL_3;
          v77 = __ldxr(v74);
          if (v77 != *v74)
            break;
          if (__stlxr(v76, v74))
            goto LABEL_152;
          v78 = 1;
LABEL_153:
          __dmb(0xBu);
          if (v78)
          {
LABEL_154:
            if (v70 < 8)
              v61 = 0;
            return v61 + v70;
          }
        }
        __clrex();
LABEL_152:
        v78 = 0;
        goto LABEL_153;
      }
LABEL_81:
      v5 = 0;
      __dmb(0xBu);
      v1 = v104;
      v3 = *v104;
      v4 = v2[317];
      if (v3 >= 8)
        v44 = v2[317];
      else
        v44 = 0;
      if (v44 + v3)
      {
        v45 = v104[1];
        if ((_DWORD)v45)
        {
          v46 = v4 + 8 * v45;
          v5 = 1;
          if (v46)
            v5 = (*(_DWORD *)(v46 + 48) + 1);
        }
        else
        {
          v5 = 1;
        }
      }
      if (v5 == v103)
      {
        v47 = *(_QWORD *)v106;
        if (v103 < *(_QWORD *)v106)
          v47 = v103;
        *(_QWORD *)&v105 = v103;
        *(_QWORD *)v106 = v47;
        v48 = v104[1];
        if ((_DWORD)v48)
        {
          v49 = (unsigned __int128 *)(v4 + 8 * v48);
          if (v49)
          {
            if (v16 != -1)
            {
              while (1)
              {
                v50 = __ldxp(v49);
                if ((unint64_t)v50 ^ v15 | *((_QWORD *)&v50 + 1) ^ v16)
                  break;
                if (!__stlxp(__PAIR128__(v16 + 2, v47), v49))
                  goto LABEL_97;
              }
              __clrex();
LABEL_97:
              __dmb(0xBu);
            }
          }
        }
        break;
      }
    }
    v1 = a1;
    v2 = &unk_1ECF57000;
    if (v97 != 1)
    {
      v51 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v51, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_104;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
    }
LABEL_104:
    v53 = 0;
    v54 = *a1;
    v55 = v54 >= 8 ? pas_compact_heap_reservation_base : 0;
    if (v55 + v54)
      break;
LABEL_111:
    if (v53 == (_QWORD)v105)
      goto LABEL_158;
LABEL_112:
    if (v97 != 1)
    {
      v58 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v59 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v59 != v58)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_3;
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
    }
  }
  v56 = a1[1];
  if ((_DWORD)v56)
  {
    v57 = pas_compact_heap_reservation_base + 8 * v56;
    v53 = 1;
    if (v57)
      v53 = (*(_DWORD *)(v57 + 48) + 1);
    goto LABEL_111;
  }
  v53 = 1;
  if ((_QWORD)v105 != 1)
    goto LABEL_112;
LABEL_158:
  v81 = (unint64_t)v104;
  v82 = (unsigned int *)**((_QWORD **)v104 + 2);
  if (v53 >= v82[1])
  {
    pas_segregated_size_directory_enable_exclusive_views((uint64_t)v104);
    v53 = v105;
    if ((unint64_t)v105 < v82[2])
    {
LABEL_160:
      if (v53 < v82[3])
        goto LABEL_161;
      goto LABEL_165;
    }
  }
  else if (v53 < v82[2])
  {
    goto LABEL_160;
  }
  pas_segregated_size_directory_create_tlc_allocator(v81);
  if ((unint64_t)v105 < v82[3])
  {
LABEL_161:
    v83 = *(unsigned int *)(v81 + 40);
    if (!(_DWORD)v83)
      goto LABEL_169;
    goto LABEL_166;
  }
LABEL_165:
  pas_segregated_size_directory_create_tlc_view_cache(v81);
  v83 = *(unsigned int *)(v81 + 40);
  if (!(_DWORD)v83)
  {
LABEL_169:
    LOBYTE(v85) = v105;
    goto LABEL_170;
  }
LABEL_166:
  v84 = pas_compact_heap_reservation_base + 8 * v83;
  if (!v84)
    goto LABEL_169;
  v85 = v105;
  if (*(_BYTE *)(v84 + 8))
  {
    v79 = pas_immortal_heap_allocate(0x18uLL, (uint64_t)"pas_segregated_exclusive_view", 0);
    ++pas_segregated_exclusive_view_count;
    *(_QWORD *)v79 = 0;
    v86 = v81 - pas_compact_heap_reservation_base;
    *(_BYTE *)(v79 + 8) = (v81 - pas_compact_heap_reservation_base) >> 3;
    *(_BYTE *)(v79 + 9) = v86 >> 11;
    *(_WORD *)(v79 + 10) = (v86 >> 19);
    *(_QWORD *)(v79 + 16) = 0;
    *(_DWORD *)(v79 + 12) = v85;
    goto LABEL_175;
  }
LABEL_170:
  v87 = pas_immortal_heap_allocate(0x14uLL, (uint64_t)"pas_segregated_partial_view", 0);
  ++pas_segregated_partial_view_count;
  *(_BYTE *)(v87 + 6) = 0;
  *(_WORD *)(v87 + 4) = 0;
  v88 = v81 - pas_compact_heap_reservation_base;
  *(_BYTE *)(v87 + 7) = (v81 - pas_compact_heap_reservation_base) >> 3;
  *(_BYTE *)(v87 + 8) = v88 >> 11;
  *(_BYTE *)(v87 + 9) = v88 >> 19;
  *(_BYTE *)(v87 + 16) = v85;
  *(_WORD *)(v87 + 17) = 0;
  v89 = *(unsigned int *)(v87 + 12);
  v90 = pas_compact_heap_reservation_base;
  if (v89 < 8)
    v90 = 0;
  v91 = v90 + v89;
  if ((v91 & 1) != 0)
    pas_utility_heap_deallocate(v91 & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(v87 + 12) = 0;
  *(_DWORD *)v87 = 0;
  *(_BYTE *)(v87 + 19) &= 0xE0u;
  v79 = v87 | 4;
LABEL_175:
  pas_segregated_directory_append((uint64_t)a1, v105, v79);
  if (v97 != 1)
  {
    v92 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v93 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v93 != v92)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return v79;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
  return v79;
}

uint64_t pas_segregated_size_directory_take_last_empty(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t (*v52)(unint64_t);
  unint64_t v53;
  uint64_t (*v54)(unsigned int **);
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int128 *v66;
  unsigned __int128 v67;
  unsigned int v68;
  _BOOL8 v69;
  BOOL v70;
  uint64_t v71;
  unsigned __int128 *v72;
  unsigned __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  unint64_t (*v84)(unint64_t);
  uint64_t (*v85)(unsigned int **);
  _QWORD *v86;
  _QWORD v87[2];
  uint64_t v88;
  uint64_t v89;

  v88 = 0;
  v89 = 0;
  v87[0] = a2;
  v87[1] = a3;
  v88 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(a1 + 12));
  v78 = a1;
  v84 = take_last_empty_should_consider_view_parallel_0;
  v85 = take_last_empty_consider_view_0;
  v86 = v87;
  v4 = *(unsigned int *)(a1 + 4);
  v5 = &unk_1ECF57000;
  if (!(_DWORD)v4 || (v6 = pas_compact_heap_reservation_base + 8 * v4) == 0)
  {
    v9 = ((unint64_t)*(unsigned int *)(a1 + 8) >> 1) & 1;
    v8 = -1;
    if (!v9)
      return 0;
    goto LABEL_15;
  }
  v7 = (unsigned __int128 *)(v6 + 16);
  while (1)
  {
    v8 = *(_QWORD *)(v6 + 24);
    v9 = *(_QWORD *)v7;
    if ((v8 & 1) != 0)
      break;
    v10 = __ldxp(v7);
    if ((unint64_t)v10 ^ v9 | *((_QWORD *)&v10 + 1) ^ v8)
    {
      __clrex();
LABEL_9:
      v11 = 0;
      goto LABEL_10;
    }
    if (__stlxp(__PAIR128__(v8 + 1, v9), v7))
      goto LABEL_9;
    v11 = 1;
LABEL_10:
    __dmb(0xBu);
    if (v11)
    {
      ++v8;
      break;
    }
  }
  if (!v9)
    return 0;
LABEL_15:
  v80 = v9;
  v81 = -1;
  v79 = v9 - 1;
  v82 = 0u;
  v83 = 0u;
  v12 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v12)
    v13 = pas_compact_heap_reservation_base + 8 * v12;
  else
    v13 = 0;
  v14 = v9 == 1 || v13 == 0;
  if (v14 || !*(_DWORD *)(v13 + 36))
  {
    v52 = take_last_empty_should_consider_view_parallel_0;
    v51 = a1;
LABEL_67:
    v53 = *(_DWORD *)(v51 + 8) & 1 | ((unint64_t)((*(_DWORD *)(v51 + 8) >> 1) & 1) << 32);
    if (((unsigned int (*)(unint64_t, uint64_t *))v52)(v53, &v78))
    {
      v79 = 0;
      *((_QWORD *)&v83 + 1) = v53;
      v82 = 0uLL;
      *(_WORD *)((char *)&v83 + 5) = 0;
      BYTE7(v83) = 0;
      LODWORD(v83) = 1;
      BYTE4(v83) = 1;
      if (v81 == -1)
      {
        v81 = 0;
        v54 = v85;
        if (!v85)
          goto LABEL_73;
      }
      else
      {
        v54 = v85;
        if (!v85)
          goto LABEL_73;
      }
      if ((v54((unsigned int **)&v78) & 1) != 0)
        goto LABEL_73;
    }
    result = 0;
    v79 = 0;
    v62 = *(unsigned int *)(v78 + 4);
    if ((_DWORD)v62)
    {
      v63 = pas_compact_heap_reservation_base + 8 * v62;
      if (v63)
      {
        if (v8 == -1)
          return 0;
        v64 = v81 + 1;
        if ((v8 & 1) != 0)
        {
          v65 = v8 + 1;
        }
        else
        {
          v65 = v8;
          if (v9 == v64)
            return 0;
        }
        result = 0;
        v72 = (unsigned __int128 *)(v63 + 16);
        v73 = __ldxp(v72);
        if ((unint64_t)v73 ^ v9 | *((_QWORD *)&v73 + 1) ^ v8)
          __clrex();
        else
          __stlxp(__PAIR128__(v65, v64), v72);
        __dmb(0xBu);
      }
    }
  }
  else
  {
    v15 = v13;
    v16 = (v9 - 2) >> 7;
    v17 = ((v9 - 2) >> 5) & 3;
    v18 = *(unsigned int *)(v15 + 32);
    if ((_DWORD)v18)
      v19 = pas_compact_heap_reservation_base + 8 * v18;
    else
      v19 = 0;
    v74 = v19;
    while (1)
    {
      v20 = v16;
      v21 = *(unsigned int *)(v19 + 4 * v16);
      v22 = v5[317] + 8 * v21;
      if (!(_DWORD)v21)
        v22 = 0;
      v75 = v20;
      v76 = v22;
      v77 = (v20 << 7) | 1;
      v23 = (_QWORD *)(v22 + 8 * v17);
      v24 = *v23;
      v25 = ((uint64_t (*)(_QWORD, uint64_t *))v84)(*v23, &v78);
      if (v25)
        break;
LABEL_37:
      if (v17)
      {
        v30 = (_QWORD *)(v76 + 8 * (v17 - 1));
        v31 = *v30;
        v32 = ((uint64_t (*)(_QWORD, uint64_t *))v84)(*v30, &v78);
        if (v32)
        {
          v33 = v32;
          do
          {
            v34 = __clz(v33) ^ 0x1F;
            v35 = (1 << v34);
            v36 = v77 + 32 * (v17 - 1) + v34;
            *(_QWORD *)&v83 = v35;
            *((_QWORD *)&v83 + 1) = v31;
            v79 = v36;
            *(_QWORD *)&v82 = v76 + 8 * (v17 - 1);
            *((_QWORD *)&v82 + 1) = v36;
            if (v81 == -1)
              v81 = v36;
            if (v36 >= v80 || !v85 || (v85((unsigned int **)&v78) & 1) != 0)
              goto LABEL_73;
            v33 &= ~(_DWORD)v35;
          }
          while (v33);
        }
        if (v17 != 1)
        {
          v37 = (_QWORD *)(v76 + 8 * (v17 - 2));
          v38 = *v37;
          v39 = ((uint64_t (*)(_QWORD, uint64_t *))v84)(*v37, &v78);
          if (v39)
          {
            v40 = v39;
            do
            {
              v41 = __clz(v40) ^ 0x1F;
              v42 = (1 << v41);
              v43 = v77 + 32 * (v17 - 2) + v41;
              *(_QWORD *)&v83 = v42;
              *((_QWORD *)&v83 + 1) = v38;
              v79 = v43;
              *(_QWORD *)&v82 = v76 + 8 * (v17 - 2);
              *((_QWORD *)&v82 + 1) = v43;
              if (v81 == -1)
                v81 = v43;
              if (v43 >= v80 || !v85 || (v85((unsigned int **)&v78) & 1) != 0)
                goto LABEL_73;
              v40 &= ~(_DWORD)v42;
            }
            while (v40);
          }
          if (v17 != 2)
          {
            v44 = (_QWORD *)(v76 + 8 * (v17 - 3));
            v45 = *v44;
            v46 = ((uint64_t (*)(_QWORD, uint64_t *))v84)(*v44, &v78);
            if (v46)
            {
              v47 = v46;
              do
              {
                v48 = __clz(v47) ^ 0x1F;
                v49 = (1 << v48);
                v50 = v77 + 32 * (v17 - 3) + v48;
                *(_QWORD *)&v83 = v49;
                *((_QWORD *)&v83 + 1) = v45;
                v79 = v50;
                *(_QWORD *)&v82 = v76 + 8 * (v17 - 3);
                *((_QWORD *)&v82 + 1) = v50;
                if (v81 == -1)
                  v81 = v50;
                if (v50 >= v80 || !v85 || (v85((unsigned int **)&v78) & 1) != 0)
                  goto LABEL_73;
                v47 &= ~(_DWORD)v49;
              }
              while (v47);
            }
          }
        }
      }
      v19 = v74;
      v16 = v75 - 1;
      v17 = 3;
      v5 = (_QWORD *)&unk_1ECF57000;
      if (!v75)
      {
        v51 = v78;
        v52 = v84;
        goto LABEL_67;
      }
    }
    v26 = v25;
    while (1)
    {
      v27 = __clz(v26) ^ 0x1F;
      v28 = (1 << v27);
      v29 = (v77 | (32 * v17)) + v27;
      *(_QWORD *)&v83 = v28;
      *((_QWORD *)&v83 + 1) = v24;
      v79 = v29;
      *(_QWORD *)&v82 = v23;
      *((_QWORD *)&v82 + 1) = v29;
      if (v81 == -1)
        v81 = v29;
      if (v29 >= v80 || !v85 || (v85((unsigned int **)&v78) & 1) != 0)
        break;
      v26 &= ~(_DWORD)v28;
      if (!v26)
        goto LABEL_37;
    }
LABEL_73:
    v55 = *(unsigned int *)(v78 + 4);
    v56 = pas_compact_heap_reservation_base + 8 * v55;
    if ((_DWORD)v55)
      v57 = v56 == 0;
    else
      v57 = 1;
    if (!v57 && v8 != -1)
    {
      v59 = v81 + 1;
      if ((v8 & 1) != 0)
      {
        v60 = v8 + 1;
      }
      else
      {
        v60 = v8;
        if (v9 == v59)
          goto LABEL_94;
      }
      v66 = (unsigned __int128 *)(v56 + 16);
      v67 = __ldxp(v66);
      if ((unint64_t)v67 ^ v9 | *((_QWORD *)&v67 + 1) ^ v8)
        __clrex();
      else
        __stlxp(__PAIR128__(v60, v59), v66);
      __dmb(0xBu);
    }
LABEL_94:
    v68 = *(unsigned __int16 *)(a1 + 12) | (*(unsigned __int8 *)(a1 + 14) << 16);
    v69 = (v68 & 0xFF0000) == 0x10000;
    v70 = v68 >= 0x10000;
    v71 = 2;
    if (v70)
      v71 = v69;
    pas_page_sharing_pool_did_create_delta(pas_physical_page_sharing_pool, v71 | a1);
    return v89;
  }
  return result;
}

unint64_t take_last_empty_should_consider_view_parallel_0(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t take_last_empty_consider_view_0(unsigned int **a1)
{
  unint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t (*v25)(_QWORD);
  int v26;
  uint64_t v27;
  os_unfair_lock *v28;
  unsigned int *v29;
  os_unfair_lock_s *v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  size_t v48;
  os_unfair_lock_s *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  void *v63;
  int v64;
  unsigned int v65;
  char v66;
  os_unfair_lock_t v67;
  uint64_t v68;
  unint64_t StatusReg;
  int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t (*v86)(uint64_t);
  os_unfair_lock_t v87;
  void (*v88)(uint64_t, uint64_t);
  unsigned int v89;
  _QWORD *v90;
  size_t v91;
  os_unfair_lock_t lock;

  v2 = *a1;
  v1 = (unint64_t)a1[1];
  if (v1)
  {
    v3 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * v2[1] + 32);
    if ((_DWORD)v3)
      v4 = pas_compact_heap_reservation_base + 8 * v3;
    else
      v4 = 0;
    v5 = *(unsigned int *)(v4 + (((v1 - 1) >> 5) & 0x7FFFFFFFFFFFFFCLL));
    if ((_DWORD)v5)
      v6 = pas_compact_heap_reservation_base + 8 * v5;
    else
      v6 = 0;
    v7 = (unsigned int *)(v6 + 8 * (((v1 - 1) >> 5) & 3) + 4);
    while (1)
    {
      v8 = *v7 & ~(1 << (v1 - 1));
      if (*v7 == v8)
        return 0;
      v9 = __ldxr(v7);
      if (v9 != *v7)
        break;
      if (__stlxr(v8, v7))
        goto LABEL_14;
      v10 = 1;
LABEL_15:
      __dmb(0xBu);
      if (v10)
        goto LABEL_25;
    }
    __clrex();
LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  v11 = v2 + 2;
  do
  {
    v12 = *v11 & 0xFFFFFFFD;
    if (v12 == *v11)
      return 0;
    v13 = __ldxr(v11);
    if (v13 == *v11)
    {
      if (!__stlxr(v12, v11))
      {
        v14 = 1;
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    v14 = 0;
LABEL_24:
    __dmb(0xBu);
  }
  while (!v14);
LABEL_25:
  if (v1)
  {
    v15 = pas_compact_heap_reservation_base;
    v16 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * v2[1] + 44);
    if ((_DWORD)v16)
      v17 = pas_compact_heap_reservation_base + 8 * v16;
    else
      v17 = 0;
    v18 = *(unsigned int *)(v17 + 4 * v1 - 4);
  }
  else
  {
    v18 = *v2;
    v15 = pas_compact_heap_reservation_base;
  }
  if (v18 < 8)
    v15 = 0;
  v19 = (v15 + v18) & 0xFFFFFFFFFFFFFFF8;
  v20 = a1[10];
  v21 = *((_QWORD *)v20 + 2);
  v22 = v20[2];
  v90 = *(_QWORD **)v20;
  v23 = *(_QWORD *)(v21 + 40);
  v91 = *(_QWORD *)(v21 + 32);
  lock = 0;
  v25 = *(uint64_t (**)(_QWORD))(v21 + 56);
  v24 = *(uint64_t (**)(uint64_t))(v21 + 64);
  v88 = *(void (**)(uint64_t, uint64_t))(v21 + 88);
  v26 = *(_DWORD *)(v21 + 100);
  v27 = *(_QWORD *)(v21 + 120);
  v28 = &pas_heap_lock;
  if (v22)
    v28 = 0;
  v29 = (unsigned int *)(v19 + 20);
  v86 = v24;
  v87 = v28;
  if (v26 == 1)
    v30 = v28;
  else
    v30 = (os_unfair_lock_s *)(v19 + 20);
  v89 = v22;
  if (v30)
  {
    v31 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&v30->_os_unfair_lock_opaque))
    {
      if (!__stxr(v31, &v30->_os_unfair_lock_opaque))
        goto LABEL_47;
    }
    __clrex();
    os_unfair_lock_lock(v30);
LABEL_47:
    lock = v30;
    if (v26 != 1)
      goto LABEL_48;
LABEL_40:
    os_unfair_lock_assert_owner(&pas_heap_lock);
    if (!*(_BYTE *)(v19 + 11))
      goto LABEL_77;
  }
  else
  {
    if (v26 == 1)
      goto LABEL_40;
LABEL_48:
    if (!*(_BYTE *)(v19 + 11))
      goto LABEL_77;
  }
  v33 = v25(*(_QWORD *)v19);
  v34 = v33;
  if (v1)
  {
    v35 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * v2[1] + 32);
    if ((_DWORD)v35)
      v36 = pas_compact_heap_reservation_base + 8 * v35;
    else
      v36 = 0;
    v37 = *(unsigned int *)(v36 + (((v1 - 1) >> 5) & 0x7FFFFFFFFFFFFFCLL));
    if ((_DWORD)v37)
      v38 = pas_compact_heap_reservation_base + 8 * v37;
    else
      v38 = 0;
    v39 = (unsigned int *)(v38 + 8 * (((v1 - 1) >> 5) & 3));
    while (1)
    {
      v40 = *v39 & ~(1 << (v1 - 1));
      if (*v39 == v40)
        goto LABEL_77;
      v41 = __ldxr(v39);
      if (v41 != *v39)
        break;
      if (__stlxr(v40, v39))
        goto LABEL_62;
      v42 = 1;
LABEL_63:
      __dmb(0xBu);
      if (v42)
        goto LABEL_73;
    }
    __clrex();
LABEL_62:
    v42 = 0;
    goto LABEL_63;
  }
  v43 = v2 + 2;
  while (2)
  {
    v44 = *v43 & 0xFFFFFFFE;
    if (v44 == *v43)
      goto LABEL_77;
    v45 = __ldxr(v43);
    if (v45 == *v43)
    {
      if (!__stlxr(v44, v43))
      {
        v46 = 1;
        goto LABEL_72;
      }
    }
    else
    {
      __clrex();
    }
    v46 = 0;
LABEL_72:
    __dmb(0xBu);
    if (!v46)
      continue;
    break;
  }
LABEL_73:
  if (!*(_BYTE *)(v19 + 11))
    goto LABEL_76;
  if (*(_QWORD *)(v33 + 24))
  {
    if (v91 != v23)
    {
      v48 = v91 / v23;
      while (v48)
      {
        --v48;
        if (!*(_BYTE *)(v33 + 4 * ((unint64_t)(v27 + 31) >> 5) + 44 + v48))
          goto LABEL_82;
      }
    }
LABEL_76:
    pas_segregated_directory_view_did_become_eligible_at_index((uint64_t)v2, v1);
LABEL_77:
    if (v30)
    {
      v78 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v79 = __ldxr(&v30->_os_unfair_lock_opaque);
        if (v79 != v78)
          break;
        if (!__stlxr(0, &v30->_os_unfair_lock_opaque))
          return 0;
      }
      __clrex();
      os_unfair_lock_unlock(v30);
      return 0;
    }
    return 0;
  }
LABEL_82:
  if (v26 != 1)
  {
    v54 = *(os_unfair_lock_s **)(v33 + 8);
    v49 = (os_unfair_lock_s *)(v19 + 20);
    if (v29 == (unsigned int *)v54)
    {
      if (v1)
        goto LABEL_95;
    }
    else
    {
      v49 = pas_segregated_page_switch_lock_slow(v33, (os_unfair_lock_t)(v19 + 20), v54);
      lock = v49;
      if (v1)
        goto LABEL_95;
    }
LABEL_84:
    v50 = v2 + 2;
    while (1)
    {
      v51 = *v50 & 0xFFFFFFFD;
      if (v51 == *v50)
        goto LABEL_109;
      v52 = __ldxr(v50);
      if (v52 != *v50)
        break;
      if (__stlxr(v51, v50))
        goto LABEL_90;
      v53 = 1;
LABEL_91:
      __dmb(0xBu);
      if (v53)
        goto LABEL_109;
    }
    __clrex();
LABEL_90:
    v53 = 0;
    goto LABEL_91;
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v49 = v87;
  if (!v1)
    goto LABEL_84;
LABEL_95:
  v55 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * v2[1] + 32);
  if ((_DWORD)v55)
    v56 = pas_compact_heap_reservation_base + 8 * v55;
  else
    v56 = 0;
  v57 = *(unsigned int *)(v56 + (((v1 - 1) >> 5) & 0x7FFFFFFFFFFFFFCLL));
  if ((_DWORD)v57)
    v58 = pas_compact_heap_reservation_base + 8 * v57;
  else
    v58 = 0;
  v59 = (unsigned int *)(v58 + 8 * (((v1 - 1) >> 5) & 3) + 4);
  while (2)
  {
    v60 = *v59 & ~(1 << (v1 - 1));
    if (*v59 != v60)
    {
      v61 = __ldxr(v59);
      if (v61 == *v59)
      {
        if (!__stlxr(v60, v59))
        {
          v62 = 1;
          goto LABEL_108;
        }
      }
      else
      {
        __clrex();
      }
      v62 = 0;
LABEL_108:
      __dmb(0xBu);
      if (v62)
        break;
      continue;
    }
    break;
  }
LABEL_109:
  if (v26 == 1)
  {
    os_unfair_lock_assert_owner(&pas_heap_lock);
    *(_BYTE *)(v19 + 11) = 0;
    v63 = (void *)v86(v34);
    while (madvise(v63, v91, 7) == -1 && *__error() == 35)
      ;
    v90[131] += v91;
    v88(v34, 1);
    pas_segregated_directory_view_did_become_eligible_at_index((uint64_t)v2, v1);
    if (v49)
    {
      v64 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v65 = __ldxr(&v49->_os_unfair_lock_opaque);
        if (v65 != v64)
          break;
        if (!__stlxr(0, &v49->_os_unfair_lock_opaque))
          goto LABEL_130;
      }
      __clrex();
      os_unfair_lock_unlock(v49);
    }
    goto LABEL_130;
  }
  if (*(_QWORD *)(v34 + 24))
  {
    v66 = pas_segregated_page_take_empty_granules(v34, v90, &lock, 0, v89);
    v67 = lock;
    if (!lock)
    {
      pas_segregated_page_get_num_committed_granules(v34);
      pas_segregated_directory_view_did_become_eligible_at_index((uint64_t)v2, v1);
      if ((v66 & 1) != 0)
        goto LABEL_130;
      goto LABEL_142;
    }
    v80 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v81 = __ldxr(&v67->_os_unfair_lock_opaque);
      if (v81 != v80)
        break;
      if (!__stlxr(0, &v67->_os_unfair_lock_opaque))
        goto LABEL_163;
    }
    __clrex();
    os_unfair_lock_unlock(v67);
LABEL_163:
    pas_segregated_page_get_num_committed_granules(v34);
    pas_segregated_directory_view_did_become_eligible_at_index((uint64_t)v2, v1);
    if ((v66 & 1) == 0)
      goto LABEL_142;
LABEL_130:
    v73 = 3;
  }
  else
  {
    v68 = v89;
    if (v49 != (os_unfair_lock_s *)v29)
    {
      if (v49)
      {
        v82 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        while (1)
        {
          v83 = __ldxr(&v49->_os_unfair_lock_opaque);
          if (v83 != v82)
            break;
          if (!__stlxr(0, &v49->_os_unfair_lock_opaque))
            goto LABEL_166;
        }
        __clrex();
        os_unfair_lock_unlock(v49);
      }
LABEL_166:
      v84 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (!__ldaxr(v29))
      {
        if (!__stxr(v84, v29))
          goto LABEL_171;
      }
      __clrex();
      os_unfair_lock_lock((os_unfair_lock_t)(v19 + 20));
LABEL_171:
      lock = (os_unfair_lock_t)(v19 + 20);
      v68 = v89;
    }
    *(_BYTE *)(v19 + 11) = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v70 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v71 = __ldxr(v29);
      if (v71 != v70)
        break;
      if (!__stlxr(0, v29))
        goto LABEL_128;
    }
    __clrex();
    os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 20));
    v68 = v89;
LABEL_128:
    lock = 0;
    v72 = v68;
    if ((pas_segregated_page_take_physically(v34, v90, 0, v68) & 1) != 0)
    {
      v88(v34, v72);
      pas_segregated_directory_view_did_become_eligible_at_index((uint64_t)v2, v1);
      goto LABEL_130;
    }
    v74 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(v29))
    {
      if (!__stxr(v74, v29))
        goto LABEL_136;
    }
    __clrex();
    os_unfair_lock_lock((os_unfair_lock_t)(v19 + 20));
LABEL_136:
    lock = (os_unfair_lock_t)(v19 + 20);
    *(_BYTE *)(v19 + 11) = 1;
    v76 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v77 = __ldxr(v29);
      if (v77 != v76)
        break;
      if (!__stlxr(0, v29))
        goto LABEL_141;
    }
    __clrex();
    os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 20));
LABEL_141:
    pas_segregated_directory_view_did_become_eligible_at_index((uint64_t)v2, v1);
LABEL_142:
    pas_segregated_directory_view_did_become_empty_at_index((uint64_t)v2, v1);
    v73 = 2;
  }
  v20[6] = v73;
  return 1;
}

unint64_t pas_segregated_size_directory_get_allocator_from_tlc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t StatusReg;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  unsigned int v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  unint64_t result;
  uint64_t v35;
  uint64_t v36;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v13, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_6:
  pas_segregated_heap_ensure_allocator_index(*(_QWORD *)(a1 + 16), a1, a2, a3, a4, a5);
  v20 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v21 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v21 != v20)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
    {
      v22 = (unsigned int *)(a1 + 28);
      v23 = *(_DWORD *)(a1 + 28) & 0x7F;
      if (v23 > 0x1F)
        goto LABEL_30;
      goto LABEL_12;
    }
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  v22 = (unsigned int *)(a1 + 28);
  v23 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v23 > 0x1F)
    goto LABEL_30;
LABEL_12:
  v24 = pas_baseline_allocator_table;
  v25 = (os_unfair_lock_s *)(pas_baseline_allocator_table + 320 * v23);
  v26 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v25->_os_unfair_lock_opaque))
  {
    if (!__stxr(v26, &v25->_os_unfair_lock_opaque))
    {
      if ((*v22 & 0x7F) != v23)
        goto LABEL_25;
LABEL_18:
      v28 = v24 + 320 * v23;
      pas_local_allocator_stop((_BYTE *)(v28 + 8), 1, 0);
      *(_OWORD *)(v28 + 8) = 0u;
      *(_OWORD *)(v28 + 24) = 0u;
      *(_OWORD *)(v28 + 40) = 0u;
      *(_OWORD *)(v28 + 56) = 0u;
      while (2)
      {
        v29 = *v22;
        v30 = __ldxr(v22);
        if (v30 == v29)
        {
          if (!__stlxr(*v22 & 0xFFFFFF80 | 0x40, v22))
          {
            v31 = 1;
            goto LABEL_24;
          }
        }
        else
        {
          __clrex();
        }
        v31 = 0;
LABEL_24:
        __dmb(0xBu);
        if (v31)
          goto LABEL_25;
        continue;
      }
    }
  }
  __clrex();
  os_unfair_lock_lock(v25);
  if ((*v22 & 0x7F) == v23)
    goto LABEL_18;
LABEL_25:
  v32 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v33 = __ldxr(&v25->_os_unfair_lock_opaque);
    if (v33 != v32)
      break;
    if (!__stlxr(0, &v25->_os_unfair_lock_opaque))
      goto LABEL_30;
  }
  __clrex();
  os_unfair_lock_unlock(v25);
LABEL_30:
  result = *(_QWORD *)(StatusReg + 752);
  if (result)
  {
    v35 = *(unsigned int *)(a1 + 36);
    if (*(_DWORD *)(result + 8052) > v35)
    {
LABEL_32:
      v36 = result + 8 * v35 + 8064;
      goto LABEL_33;
    }
  }
  else
  {
    result = pas_thread_local_cache_get_slow(a4, 0);
    v35 = *(unsigned int *)(a1 + 36);
    if (*(_DWORD *)(result + 8052) > v35)
      goto LABEL_32;
  }
  if ((_DWORD)v35 == -1)
    v36 = 0;
  else
    result = pas_thread_local_cache_get_local_allocator_slow(result, v35, 0, v15, v16, v17, v18, v19);
LABEL_33:
  *a6 = 1;
  a6[1] = v36;
  a6[2] = 0;
  return result;
}

uint64_t pas_segregated_view_get_index(uint64_t a1)
{
  uint64_t result;

  switch(a1 & 7)
  {
    case 0:
    case 1:
      result = *(unsigned int *)((a1 & 0xFFFFFFFFFFFFFFF8) + 12);
      break;
    case 2:
      result = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) & 0x7FFFFFFF;
      break;
    case 3:
      result = *(_DWORD *)(((8 * *(unsigned __int16 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
                         + pas_compact_heap_reservation_base
                         + 16) & 0x7FFFFFFF;
      break;
    case 4:
      result = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t pas_segregated_view_get_page(uint64_t a1)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;

  v2 = a1 & 7;
  switch(a1 & 7)
  {
    case 0:
    case 1:
    case 3:
      v3 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_3;
    case 2:
      v11 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
      if ((v11 & 1) != 0)
      {
        v3 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_3;
      }
      result = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
      v5 = *(unsigned __int8 *)(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8) + 12);
      if (v11)
        return (*((uint64_t (**)(uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v5) + 7))(result);
      return result;
    case 4:
      v6 = a1 & 0xFFFFFFFFFFFFFFF8;
      v7 = *(unsigned __int16 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 4) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 6) << 16);
      v8 = pas_compact_heap_reservation_base;
      v9 = (uint64_t *)(pas_compact_heap_reservation_base + 8 * v7);
      if (v7)
        v10 = v9 == 0;
      else
        v10 = 1;
      if (v10)
      {
        result = 0;
        goto LABEL_27;
      }
      result = *v9;
      if ((*v9 & 1) == 0)
      {
LABEL_27:
        v5 = *(unsigned __int8 *)(((8 * *(unsigned __int16 *)(v6 + 7)) | ((unint64_t)*(unsigned __int8 *)(v6 + 9) << 19))
                                + v8
                                + 12);
        if (result)
          return (*((uint64_t (**)(uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v5) + 7))(result);
        return result;
      }
      v3 = (uint64_t *)(result & 0xFFFFFFFFFFFFFFFELL);
LABEL_3:
      result = *v3;
LABEL_4:
      switch(v2)
      {
        case 0u:
        case 1u:
          v5 = *(unsigned __int8 *)(((8 * *(unsigned __int16 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 10) << 19))
                                  + pas_compact_heap_reservation_base
                                  + 12);
          if (result)
            return (*((uint64_t (**)(uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v5) + 7))(result);
          break;
        case 2u:
          v5 = *(unsigned __int8 *)(*(_QWORD *)((*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL) + 8)
                                  + 12);
          if (result)
            return (*((uint64_t (**)(uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v5) + 7))(result);
          break;
        case 3u:
          v5 = *(unsigned __int8 *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) + 12);
          if (result)
            return (*((uint64_t (**)(uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v5) + 7))(result);
          break;
        case 4u:
          v8 = pas_compact_heap_reservation_base;
          v6 = a1 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_27;
        case 5u:
          v5 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 12);
          if (result)
            return (*((uint64_t (**)(uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v5) + 7))(result);
          break;
        default:
          goto LABEL_14;
      }
      return result;
    default:
      result = 0;
      if (v2 <= 5)
        goto LABEL_4;
LABEL_14:
      v5 = 0;
      if (!result)
        return result;
      return (*((uint64_t (**)(uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v5) + 7))(result);
  }
}

uint64_t pas_segregated_view_lock_ownership_lock_if_owned_conditionally(uint64_t a1, int a2)
{
  unsigned int v4;
  os_unfair_lock_s *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  os_unfair_lock_s *v12;
  unint64_t v13;
  int v14;
  unsigned int v15;

  v4 = a1 & 7;
  if (a2)
    goto LABEL_13;
  switch(a1 & 7)
  {
    case 0:
    case 1:
      v5 = (os_unfair_lock_s *)((a1 & 0xFFFFFFFFFFFFFFF8) + 20);
      break;
    case 2:
      v6 = a1 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_9;
    case 3:
      v7 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 18);
      v8 = *(unsigned __int16 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
      goto LABEL_8;
    case 4:
      v7 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 6);
      v8 = *(unsigned __int16 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 4);
LABEL_8:
      v6 = ((8 * v8) | (v7 << 19)) + pas_compact_heap_reservation_base;
LABEL_9:
      v5 = (os_unfair_lock_s *)(v6 + 12);
      break;
    default:
      v5 = 0;
      break;
  }
  v9 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (!__ldaxr(&v5->_os_unfair_lock_opaque))
  {
    if (!__stxr(v9, &v5->_os_unfair_lock_opaque))
      goto LABEL_13;
  }
  __clrex();
  os_unfair_lock_lock(v5);
  if (v4 <= 4)
  {
LABEL_13:
    result = 1;
    switch(v4)
    {
      case 0u:
      case 1u:
        if (*(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 11))
          return result;
        v12 = (os_unfair_lock_s *)((a1 & 0xFFFFFFFFFFFFFFF8) + 20);
        if (!a2)
          goto LABEL_25;
        return 0;
      case 2u:
        v13 = a1 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) & 0x80000000) != 0)
          return result;
        goto LABEL_22;
      case 3u:
        return result;
      case 4u:
        v13 = ((8 * *(unsigned __int16 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
            + pas_compact_heap_reservation_base;
        if ((*(_DWORD *)(v13 + 16) & 0x80000000) != 0)
          return result;
LABEL_22:
        v12 = (os_unfair_lock_s *)(v13 + 12);
        if (a2)
          return 0;
        goto LABEL_25;
      default:
        break;
    }
  }
  v12 = 0;
  if (a2)
    return 0;
LABEL_25:
  v14 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v15 = __ldxr(&v12->_os_unfair_lock_opaque);
    if (v15 != v14)
      break;
    if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
      return 0;
  }
  __clrex();
  os_unfair_lock_unlock(v12);
  return 0;
}

uint64_t pas_segregated_view_note_emptiness(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;

  if ((result & 7u) >= 2)
  {
    if ((result & 7) == 3)
    {
      v5 = *(unsigned __int16 *)((result & 0xFFFFFFFFFFFFFFF8) + 16) | ((unint64_t)*(unsigned __int8 *)((result & 0xFFFFFFFFFFFFFFF8) + 18) << 16);
      v6 = (_DWORD)v5 ? pas_compact_heap_reservation_base + 8 * v5 : 0;
      if (!*(_DWORD *)(v6 + 24))
      {
        v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 8);
        v7 = v6 & 5 | 2;
        if (v7 == 3)
        {
          v4 = *(_DWORD *)(((8 * *(unsigned __int16 *)((v6 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
                         + pas_compact_heap_reservation_base
                         + 16) & 0x7FFFFFFF;
        }
        else if (v7 == 2)
        {
          v4 = *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 16) & 0x7FFFFFFF;
        }
        else
        {
          v4 = 0;
        }
        return pas_segregated_directory_view_did_become_empty_at_index(v3, v4);
      }
    }
  }
  else if (!*(_BYTE *)(a2 + 1))
  {
    v2 = result & 0xFFFFFFFFFFFFFFF8;
    v3 = ((8 * *(unsigned __int16 *)((result & 0xFFFFFFFFFFFFFFF8) + 8)) | ((unint64_t)*(unsigned __int8 *)((result & 0xFFFFFFFFFFFFFFF8) + 10) << 19))
       + pas_compact_heap_reservation_base;
    v4 = *(unsigned int *)(v2 + 12);
    return pas_segregated_directory_view_did_become_empty_at_index(v3, v4);
  }
  return result;
}

uint64_t for_each_live_object(uint64_t a1, unsigned int (*a2)(uint64_t, unint64_t, unint64_t, uint64_t), uint64_t a3)
{
  unsigned int v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t page;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;

  v4 = a1 & 7;
  switch(a1 & 7)
  {
    case 0:
    case 1:
      if (!*(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 11))
        return 1;
      v7 = (8 * *(unsigned __int16 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 10) << 19);
      v8 = pas_compact_heap_reservation_base;
      goto LABEL_10;
    case 2:
      if ((*(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) & 0x80000000) == 0)
        return 1;
      v9 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v10 = *(_QWORD *)(v9 + 8);
      break;
    case 3:
      v9 = a1 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_7;
    case 4:
      v8 = pas_compact_heap_reservation_base;
      if ((*(_DWORD *)(((8 * *(unsigned __int16 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
                      + pas_compact_heap_reservation_base
                      + 16) & 0x80000000) == 0)
        return 1;
      v7 = (8 * *(unsigned __int16 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 7)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 9) << 19);
LABEL_10:
      v10 = v7 + v8;
      break;
    default:
      return 1;
  }
  v11 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v10 + 12));
  v12 = *(_BYTE *)(v11 + 112);
  v13 = *(_QWORD *)(v11 + 120);
  v14 = a1 & 7;
  if (v14 == 3)
  {
    v16 = a1 & 0xFFFFFFFFFFFFFFF8;
    v17 = v13 >> v12;
    if (!(v13 >> v12))
      return 1;
LABEL_17:
    v18 = 0;
    v19 = v16 + 20;
    v20 = pas_compact_heap_reservation_base;
    while (1)
    {
      v21 = *(unsigned int *)(v19 + 4 * v18);
      v22 = v20 + 8 * v21;
      if ((_DWORD)v21)
        v23 = v22 == 0;
      else
        v23 = 1;
      if (!v23)
      {
        if (v18)
        {
          v24 = 0;
          while (1)
          {
            v25 = *(unsigned int *)(v19 + 4 * v24);
            v26 = (_DWORD)v25 ? v20 + 8 * v25 : 0;
            if (v26 == v22)
              break;
            if (v18 == ++v24)
              goto LABEL_30;
          }
        }
        else
        {
LABEL_30:
          if (!for_each_live_object(v22 | 4, a2, a3))
            return 0;
          v20 = pas_compact_heap_reservation_base;
        }
      }
      if (++v18 == v17)
        return 1;
    }
  }
  if (v14 == 2)
  {
    v15 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
    if ((v15 & 1) == 0)
      return 1;
    v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = v13 >> v12;
    if (!(v13 >> v12))
      return 1;
    goto LABEL_17;
  }
  v27 = *(uint64_t (**)(void))(v11 + 64);
  v28 = a1 & 0xFFFFFFFFFFFFFFF8;
  v29 = pas_compact_heap_reservation_base;
  if ((a1 & 6) != 0)
  {
    v30 = *(unsigned int *)(v28 + 12);
    if (v30 < 8)
      v29 = 0;
    v31 = v29 + v30;
    if ((((_DWORD)v29 + (_DWORD)v30) & 1) != 0)
      v31 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL);
    v32 = *(unsigned __int8 *)(v28 + 18) | ((unint64_t)(*(unsigned __int8 *)(v28 + 17)
                                                             + *(unsigned __int8 *)(v28 + 18)) << 32);
  }
  else
  {
    v31 = pas_compact_heap_reservation_base
        + *(unsigned int *)(pas_compact_heap_reservation_base
                          + 8
                          * *(unsigned int *)(((8 * *(unsigned __int16 *)(v28 + 8)) | ((unint64_t)*(unsigned __int8 *)(v28 + 10) << 19))
                                            + pas_compact_heap_reservation_base
                                            + 40)
                          + 9);
    v32 = ((v13 << 27) + 4160749568u) & 0xFFFFFFFF00000000;
  }
  v43 = *(_BYTE *)(v11 + 28);
  page = pas_segregated_view_get_page(a1);
  v34 = v27();
  if (v14 != 5)
  {
    if (v4 > 1)
    {
      v35 = *(unsigned __int8 *)(v28 + 9);
      v36 = *(unsigned __int16 *)(v28 + 7);
    }
    else
    {
      v35 = *(unsigned __int8 *)(v28 + 10);
      v36 = *(unsigned __int16 *)(v28 + 8);
    }
    v28 = ((8 * v36) | (v35 << 19)) + pas_compact_heap_reservation_base;
  }
  v37 = (32 * v32);
  v38 = (v32 >> 27) & 0xFFFFFFE0;
  v39 = 1;
  if (v37 < v38)
  {
    v40 = *(_DWORD *)(v28 + 24) & 0x7FFFFFF;
    v41 = page + 44;
    while (((1 << v37) & *(_DWORD *)(v31 + 4 * (v37 >> 5))) == 0
         || (*(_DWORD *)(v41 + 4 * (v37 >> 5)) & (1 << v37)) == 0
         || a2(a1, ((unint64_t)v37 << v43) + v34, ((unint64_t)v37 << v43) + v34 + v40, a3))
    {
      if (v38 == ++v37)
        return 1;
    }
    return 0;
  }
  return v39;
}

uint64_t pas_shared_page_directory_by_size_get(int *a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t StatusReg;
  unsigned int v16;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  char v25;
  int v26;
  unsigned int v27;

  v5 = (_DWORD *)*((_QWORD *)a1 + 1);
  if (!v5)
  {
    v11 = *a1;
    v12 = (*(_DWORD *)(a3 + 48) >> *(_BYTE *)(a3 + 28));
    v13 = 64 - __clz(v12 - 1);
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v16 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v16, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_14;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_14:
    v5 = (_DWORD *)*((_QWORD *)a1 + 1);
    if (!v5)
    {
      v18 = v14 >> v11;
      v19 = v18 + 1;
      v20 = (_DWORD *)pas_immortal_heap_allocate((32 * ((_DWORD)v18 + 1)) | 8u, (uint64_t)"pas_shared_page_directory_by_size_data", 0);
      v21 = v18;
      v5 = v20;
      *v20 = v11;
      v20[1] = v19;
      v22 = 8 * v21;
      do
      {
        v23 = &v20[v22];
        v24 = *(unsigned __int8 *)(a3 + 100) | (a1[1] << 8);
        v25 = *(_BYTE *)(a3 + 28);
        *((_QWORD *)v23 + 1) = 0;
        v23[4] = 0;
        *((_WORD *)v23 + 11) = 1;
        *((_WORD *)v23 + 10) = v24;
        *((_QWORD *)v23 + 3) = 0;
        *((_QWORD *)v23 + 4) = 1 << (v21-- << v11) << v25;
        v22 -= 8;
      }
      while (v21 != -1);
      __dmb(0xBu);
      *((_QWORD *)a1 + 1) = v20;
    }
    v26 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v27 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v27 != v26)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_2;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
LABEL_2:
  v6 = a2 >> *(_BYTE *)(a3 + 28);
  v7 = 64 - __clz(v6 - 1);
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return (uint64_t)&v5[8 * (v8 >> *v5) + 2];
}

uint64_t pas_shared_page_directory_by_size_dump_directory_arg(uint64_t (***a1)(_QWORD, uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return pas_stream_printf(a1, (uint64_t)"Size = %zu", a3, a4, a5, a6, a7, a8, *(_QWORD *)(a2 + 24));
}

uint64_t pas_simple_large_free_heap_try_allocate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;

  v7 = ((uint64_t (*)(void))try_allocate_without_fixing)();
  if (a1 == &pas_bootstrap_free_heap)
  {
    v8 = qword_1ECF551A8;
    if (qword_1ECF551A0 > (unint64_t)qword_1ECF551A8)
    {
      v9 = pas_bootstrap_free_heap;
      if ((unint64_t)(2 * qword_1ECF551A0) <= 4)
        v10 = 4;
      else
        v10 = 2 * qword_1ECF551A0;
      v11 = try_allocate_without_fixing(&pas_bootstrap_free_heap, 24 * v10, 8, 0, a5);
      if (qword_1ECF551A0)
      {
        v12 = 0;
        v13 = v11;
        v14 = (char *)&bootstrap_free_list;
        do
        {
          if (qword_1ECF551A8 <= v12)
            v15 = (uint64_t)&v14[-24 * qword_1ECF551A8];
          else
            v15 = pas_bootstrap_free_heap + 24 * v12;
          v16 = *(_OWORD *)v15;
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(v15 + 16);
          *(_OWORD *)v13 = v16;
          v13 += 24;
          ++v12;
          v14 += 24;
        }
        while (v12 < qword_1ECF551A0);
      }
      pas_bootstrap_free_heap = v11;
      qword_1ECF551A8 = v10;
      if (v9)
        merge_physical(&pas_bootstrap_free_heap, v9, v9 + 24 * v8, 0, a5);
    }
  }
  return v7;
}

unint64_t try_allocate_without_fixing(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  int v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  unint64_t *v71;
  BOOL v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  BOOL v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  __n128 *v115;
  unint64_t v116;
  __n128 *v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  __int128 v123;
  unint64_t v124;
  uint64_t v125;
  BOOL v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  __int128 v147;
  void (*v148)(unint64_t, unint64_t, unint64_t);
  unint64_t v149;
  uint64_t v150;
  BOOL v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t *v207;
  unint64_t v208;
  uint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  __int128 v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t *v270;
  unint64_t v271;
  uint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  unint64_t v276;
  unint64_t v277;
  char *v278;
  __int128 v279;
  char *v281;
  uint64_t *v282;
  void (*v283)(uint64_t, unint64_t, unint64_t);
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  __n128 *v305;
  uint64_t *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  unint64_t v340;
  uint64_t *v341;
  unint64_t v342;
  unint64_t v343;
  char *v344;
  unint64_t v345;
  unint64_t v346;
  char *v347;
  __int128 v348;
  uint64_t *v349;
  uint64_t *v350;
  BOOL v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  BOOL v355;
  unint64_t v356;
  uint64_t *v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  double v372;
  double v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  __n128 v395;
  unsigned __int8 v396;
  unsigned __int8 v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v405;
  unint64_t v406;
  __n128 v409;
  unint64_t v410;
  __n128 v411;
  uint64_t v412;
  int v413;
  __n128 v414;
  uint64_t v415;
  uint64_t v416;

  v416 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = a4;
  v7 = a3;
  v8 = a2;
  v9 = a5;
  ++qword_1ECF590E0;
  if (!a1[1])
    goto LABEL_100;
  v10 = 0;
  v384 = 0;
  v388 = 0;
  v11 = 0;
  v12 = 0;
  v395 = 0uLL;
  v13 = 0;
  v382 = 0;
  v14 = 0;
  v15 = a3 - 1;
  v16 = 1.3;
  do
  {
    ++qword_1ECF590E8;
    v19 = a1[2];
    v49 = v14 >= v19;
    v20 = v14 - v19;
    if (v49)
    {
      v71 = (unint64_t *)((char *)&bootstrap_free_list + 24 * v20);
      v22 = *v71;
      v23 = v71[1];
      v24 = v71[2];
      ++v14;
      v25 = *v71 & 0xFFFFFFFFFFFFLL;
      v26 = v13 & 0xFFFFFFFFFFFFLL;
      if (!v10)
        goto LABEL_10;
    }
    else
    {
      v21 = (unint64_t *)(*a1 + 24 * v14);
      v22 = *v21;
      v23 = v21[1];
      v24 = v21[2];
      ++v14;
      v25 = *v21 & 0xFFFFFFFFFFFFLL;
      v26 = v13 & 0xFFFFFFFFFFFFLL;
      if (!v10)
        goto LABEL_10;
    }
    if (v25 > v26)
      goto LABEL_6;
LABEL_10:
    v27 = v23 & 0xFFFFFFFFFFFFLL;
    v28 = (v23 & 0xFFFFFFFFFFFFLL) - v25;
    if (v28 < v8)
      goto LABEL_6;
    v29 = v24 & 0xFFFFFFFFFFFFLL;
    if ((v24 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (v27 == v25)
        goto LABEL_6;
      v30 = *v9;
      v31 = *v9 - v29 + v25;
      if (v31 >= v27)
        goto LABEL_6;
LABEL_18:
      if (v6 > v31)
        v32 = v31;
      else
        v32 = v6;
      if (v6 > v31)
        v33 = v30;
      else
        v33 = v7;
      if (v6 > v31)
      {
        v30 = v7;
        v31 = v6;
      }
      if (v30 == 1)
      {
        v34 = 0;
        v35 = 1;
LABEL_36:
        v44 = v31 - v32;
        v45 = v44 % v30 / v35;
        if (v44 % v30 % v35)
          goto LABEL_6;
        v46 = v30 * v33 / v35;
        v47 = (((v46 / v33) & (((uint64_t)(v45 * v34) % (uint64_t)(v46 / v33)) >> 63))
             + (uint64_t)(v45 * v34) % (uint64_t)(v46 / v33))
            * v33;
        v48 = v47 + (v46 + v44 + ~v47) / v46 * v46;
        v49 = __CFADD__(v48, v32);
        v50 = v48 + v32;
        v37 = v49 ? 0 : v50;
        if (v49)
          goto LABEL_6;
        v36 = v27 - v37;
        if (v27 <= v37)
          goto LABEL_6;
        goto LABEL_42;
      }
      v38 = v15;
      v34 = v33;
      v35 = v30;
      if (v33)
      {
        v34 = v33;
        v35 = v33;
        if (v33 == 1)
          goto LABEL_36;
        v39 = 0;
        v40 = 1;
        v41 = v33;
        v42 = v30;
        do
        {
          v35 = v41;
          v34 = v40;
          v43 = v42 / v41;
          v41 = v42 % v41;
          v40 = v39 - v43 * v34;
          v42 = v35;
          v39 = v34;
        }
        while (v41);
      }
      v15 = v38;
      goto LABEL_36;
    }
    if (((v25 - v6) & v15) != 0)
    {
      if (v27 == v25)
        goto LABEL_6;
      v30 = *v9;
      v31 = v25;
      goto LABEL_18;
    }
    if (((v9[1] - 1) & v8) == 0)
    {
      v58 = (v22 + v8) & 0xFFFFFFFFFFFFLL;
      v62 = v24 & 0xFF000000000000 | (v8 % *v9) & 0xFFFFFFFFFFFFLL;
      v52 = v23 & 0xFFFF000000000000 | v25;
      if (v10)
        v63 = v25 >= v26;
      else
        v63 = 0;
      v64 = !v63;
      v65 = v58 == v25 || v64 == 0;
      if (!v65)
        goto LABEL_75;
      goto LABEL_6;
    }
    v36 = (v23 & 0xFFFFFFFFFFFFLL) - v25;
    v37 = v25;
    if (v27 == v25)
      goto LABEL_6;
LABEL_42:
    if (v36 < v8)
      goto LABEL_6;
    v51 = v37 - v25;
    v52 = (v37 - v25 + v22) & 0xFFFFFFFFFFFFLL;
    v53 = *v9;
    v54 = v52 - v25;
    v376 = v11;
    v379 = v12;
    if (v52 != v25)
    {
      v55 = v9[1];
      if (v29)
      {
        v56 = v53 - v29 + v25;
        if (v56 >= v52)
        {
          v54 = 0;
LABEL_46:
          v12 = v379;
          goto LABEL_47;
        }
      }
      else
      {
        v56 = v25;
        if (((v55 - 1) & v25) == 0)
          goto LABEL_46;
      }
      v358 = v52 - v25;
      v360 = v37 - v25;
      v363 = v37;
      v366 = (v37 - v25 + v22) & 0xFFFFFFFFFFFFLL;
      v370 = v15;
      v372 = v16;
      v362 = *v9;
      v72 = pas_coalign(v56, v53, 0, v55);
      v54 = 0;
      if (v72)
      {
        v52 = v366;
        v15 = v370;
        v16 = v372;
        v8 = a2;
        v9 = a5;
        v6 = a4;
        v7 = a3;
        v12 = v379;
        v37 = v363;
        v29 = v24 & 0xFFFFFFFFFFFFLL;
        v51 = v360;
        v53 = v362;
        if (v366 > v73)
        {
          v54 = v358;
          if (v73 != v25)
            v54 = (v366 - v73) / a5[1] * a5[1] / *a5 * *a5;
          goto LABEL_46;
        }
      }
      else
      {
        v16 = v372;
        v8 = a2;
        v9 = a5;
        v6 = a4;
        v7 = a3;
        v12 = v379;
        v52 = v366;
        v15 = v370;
        v37 = v363;
        v29 = v24 & 0xFFFFFFFFFFFFLL;
        v51 = v360;
        v53 = v362;
      }
    }
LABEL_47:
    v57 = v37 + v8 - v52;
    v58 = (v37 + v8) & 0xFFFFFFFFFFFFLL;
    v59 = (v57 + (((v51 + v29) % v53) & 0xFFFFFFFFFFFFLL)) % v53;
    v60 = v27 - v58;
    if (v27 == v58)
    {
      v61 = 0;
      goto LABEL_64;
    }
    v66 = v9[1];
    if ((v59 & 0xFFFFFFFFFFFFLL) != 0)
    {
      v359 = v27 - v58;
      v361 = v59;
      v364 = v54;
      v367 = v52;
      v371 = v15;
      v373 = v16;
      v74 = *v9;
      v365 = v58;
      v75 = *v9 - (v59 & 0xFFFFFFFFFFFFLL) + v58;
      if (v75 >= v27)
      {
        v61 = 0;
LABEL_90:
        v16 = v373;
        v8 = a2;
        v9 = a5;
        v6 = a4;
        v7 = a3;
        v12 = v379;
        v52 = v367;
        v15 = v371;
        v54 = v364;
        v58 = v365;
        v59 = v361;
        goto LABEL_64;
      }
    }
    else
    {
      if (((v66 - 1) & v58) == 0)
        goto LABEL_62;
      v359 = v27 - v58;
      v361 = v59;
      v364 = v54;
      v367 = v52;
      v371 = v15;
      v373 = v16;
      v74 = *v9;
      v365 = v58;
      v75 = v58;
    }
    v76 = pas_coalign(v75, v74, 0, v66);
    v61 = 0;
    if (!v76)
      goto LABEL_90;
    v16 = v373;
    v8 = a2;
    v9 = a5;
    v6 = a4;
    v7 = a3;
    v12 = v379;
    v52 = v367;
    v15 = v371;
    v54 = v364;
    v58 = v365;
    v59 = v361;
    if (v27 > v77)
    {
      v60 = v359;
      if (v77 == v365)
LABEL_62:
        v61 = v60;
      else
        v61 = (v27 - v77) / a5[1] * a5[1] / *a5 * *a5;
      v12 = v379;
    }
LABEL_64:
    if ((double)v28 / (double)(v54 + v8 + v61) > v16)
    {
      v11 = v376;
      goto LABEL_6;
    }
    v67 = v24 & 0xFF000000000000;
    v24 &= 0xFFFFFFFFFFFFFFuLL;
    v62 = v67 & 0xFFFF000000000000 | v59 & 0xFFFFFFFFFFFFLL;
    v22 = v25;
    v25 = v52;
    v11 = v376;
    if (v10)
      v68 = v52 >= v26;
    else
      v68 = 0;
    v69 = !v68;
    if (v58 != v52 && v69 != 0)
    {
LABEL_75:
      v10 = v14;
      v384 = v62;
      v388 = v58;
      v11 = v27;
      v12 = v58;
      v395.n128_u64[0] = v22;
      v13 = v25;
      v382 = v24;
      v395.n128_u64[1] = v52;
    }
LABEL_6:
    v18 = a1[1];
  }
  while (v14 < v18);
  if (v10)
  {
    if (((v13 ^ v388) & 0xFFFFFFFFFFFFLL) != 0)
      v17 = v13;
    else
      v17 = 0;
    v78 = (v395.n128_u64[0] ^ v395.n128_u64[1]) & 0xFFFFFFFFFFFFLL;
    if (v78)
    {
      v409 = v395;
      v410 = v382;
      v79 = a1[2];
      if (((v12 ^ v11) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v49 = v10 - 1 >= v79;
        v116 = v10 - 1 - v79;
        if (v49)
          v117 = (__n128 *)((char *)&bootstrap_free_list + 24 * v116);
        else
          v117 = (__n128 *)(*a1 + 24 * (v10 - 1));
        *v117 = v409;
        v117[1].n128_u64[0] = v410;
        return v17;
      }
      v80 = 1;
LABEL_127:
      v113 = &v409.n128_u64[3 * v80];
      *v113 = v12;
      v113[1] = v11;
      v113[2] = v384;
      v49 = v10 - 1 >= v79;
      v114 = v10 - 1 - v79;
      if (v49)
      {
        v305 = (__n128 *)((char *)&bootstrap_free_list + 24 * v114);
        *v305 = v409;
        v305[1].n128_u64[0] = v410;
        if (!v78)
          return v17;
      }
      else
      {
        v115 = (__n128 *)(*a1 + 24 * (v10 - 1));
        *v115 = v409;
        v115[1].n128_u64[0] = v410;
        if (!v78)
          return v17;
      }
      v414 = v411;
      v415 = v412;
      append(a1, &v414);
      return v17;
    }
    if (((v12 ^ v11) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v80 = 0;
      v79 = a1[2];
      goto LABEL_127;
    }
    v118 = a1[2];
    if (v10 - 1 >= v118)
    {
      v119 = (char *)&bootstrap_free_list + 24 * (v10 - 1 - v118);
      v120 = v18 - 1;
      a1[1] = v120;
      v49 = v120 >= v118;
      v121 = v120 - v118;
      if (v49)
        goto LABEL_350;
LABEL_135:
      v122 = (char *)(*a1 + 24 * v120);
    }
    else
    {
      v119 = (char *)(*a1 + 24 * (v10 - 1));
      v120 = v18 - 1;
      a1[1] = v120;
      v49 = v120 >= v118;
      v121 = v120 - v118;
      if (!v49)
        goto LABEL_135;
LABEL_350:
      v122 = (char *)&bootstrap_free_list + 24 * v121;
    }
    v123 = *(_OWORD *)v122;
    *((_QWORD *)v119 + 2) = *((_QWORD *)v122 + 2);
    *(_OWORD *)v119 = v123;
    return v17;
  }
LABEL_100:
  ((void (*)(__n128 *__return_ptr, unint64_t, unint64_t, unint64_t, unint64_t))v9[2])(&v409, v8, v7, v6, v9[3]);
  v81 = v409.n128_u64[0];
  if (!v409.n128_u64[0])
    return 0;
  v82 = v409.n128_u64[1];
  v83 = v410;
  v84 = v411.n128_u64[1];
  v85 = v411.n128_u64[0];
  v86 = v412;
  v87 = v413;
  v88 = a1[1];
  v89 = a5;
  if (!v88)
    goto LABEL_167;
  v90 = 0;
  v91 = 0;
  v92 = a1[2];
  while (2)
  {
    if (v92 > v91)
    {
      v93 = (uint64_t *)(*a1 + v90);
      if ((v93[1] & 0xFFFFFFFFFFFFLL) == v410)
        goto LABEL_109;
      goto LABEL_105;
    }
    if ((*(_QWORD *)((_BYTE *)&bootstrap_free_list + v90 + -24 * v92 + 8) & 0xFFFFFFFFFFFFLL) != v410)
    {
LABEL_105:
      ++v91;
      v90 += 24;
      if (v88 == v91)
        goto LABEL_167;
      continue;
    }
    break;
  }
  v93 = (uint64_t *)((char *)&bootstrap_free_list + v90 + -24 * v92);
LABEL_109:
  v95 = *v93;
  v94 = v93[1];
  v96 = v93[2];
  v97 = v410 & 0xFFFFFFFFFFFFLL;
  v398 = v412;
  v98 = (v412 + v411.n128_u64[1]) & 0xFFFFFFFFFFFFLL;
  v99 = *a5;
  v100 = v94 & 0xFFFFFFFFFFFFLL;
  v101 = (((v94 & 0xFFFFFFFFFFFFLL) - (*v93 & 0xFFFFFFFFFFFFLL) + (v96 & 0xFFFFFFFFFFFFLL)) % *a5) & 0xFFFFFFFFFFFFLL | ((unint64_t)v413 << 48);
  do
  {
    v102 = v97;
    v103 = v98;
    v104 = v101;
    v97 = v95;
    v98 = v94;
    v101 = v96;
    v105 = v103 ^ v95;
    v96 = v104;
    v94 = v103;
    v95 = v102;
  }
  while ((v105 & 0xFFFFFFFFFFFFLL) == 0);
  v65 = ((v102 ^ v98) & 0xFFFFFFFFFFFFLL) == 0;
  v86 = v412;
  if (!v65)
    goto LABEL_167;
  v106 = v97 & 0xFFFFFFFFFFFFLL;
  v107 = v101 & 0xFFFFFFFFFFFFLL;
  if (((v98 & 0xFFFFFFFFFFFFLL) + (v101 & 0xFFFFFFFFFFFFLL) - (v97 & 0xFFFFFFFFFFFFLL)) % v99 != (v104 & 0xFFFFFFFFFFFFLL))
    goto LABEL_167;
  v108 = v103 & 0xFFFFFFFFFFFFLL;
  v109 = (v104 & 0xFF000000000000) == 0x1000000000000 && (v101 & 0xFF000000000000) == 0x1000000000000;
  v110 = v109 ? 0x1000000000000 : 0;
  v111 = v108 - v106;
  if (v108 == v106)
    goto LABEL_167;
  v383 = v110 | v107;
  if (!v107)
  {
    v112 = v97 & 0xFFFFFFFFFFFFLL;
    if (((v106 - a4) & (a3 - 1)) != 0)
    {
LABEL_138:
      v392 = v411.n128_u64[1];
      v396 = v413;
      v124 = a4;
      v401 = v100;
      v125 = v110;
      v385 = v108 - v106;
      v389 = v97 & 0xFFFFFFFFFFFFLL;
      v126 = pas_coalign(v112, v99, v124, a3);
      v111 = v385;
      v106 = v389;
      v100 = v401;
      v108 = v103 & 0xFFFFFFFFFFFFLL;
      v86 = v398;
      v87 = v396;
      v84 = v392;
      v89 = a5;
      if (!v126)
        goto LABEL_167;
      v128 = v127;
      if (v127 >= (v103 & 0xFFFFFFFFFFFFuLL))
        goto LABEL_167;
      v110 = v125;
    }
    else
    {
      if (((a5[1] - 1) & a2) == 0)
      {
        v132 = (v97 + a2) & 0xFFFFFFFFFFFFLL;
        v133 = (a2 % v99) & 0xFFFFFFFFFFFFLL;
        v17 = v97 & 0xFFFFFFFFFFFFLL;
        goto LABEL_160;
      }
      v126 = 1;
      v128 = v97 & 0xFFFFFFFFFFFFLL;
    }
    if (!v126 || v108 - v128 < a2)
      goto LABEL_167;
    v17 = v128 & 0xFFFFFFFFFFFFLL;
    v129 = *v89;
    v130 = ((v107 - v106 + v128) % *v89) & 0xFFFFFFFFFFFFLL;
    v131 = v128 + a2;
    v132 = v131 & 0xFFFFFFFFFFFFLL;
    v133 = ((v131 - v17 + v130) % *v89) & 0xFFFFFFFFFFFFLL;
    v134 = v17 - v106;
    v397 = v87;
    if (v17 == v106)
    {
      v135 = 0;
      goto LABEL_151;
    }
    v136 = v89[1];
    if (v107)
    {
      v137 = v129 - v107 + v106;
      if (v137 >= v17)
      {
        v135 = 0;
        goto LABEL_150;
      }
    }
    else
    {
      v137 = v106;
      if (((v136 - 1) & v106) == 0)
        goto LABEL_149;
    }
    v368 = v17 - v106;
    v386 = v111;
    v390 = v106;
    v374 = ((v131 - v17 + v130) % *v89) & 0xFFFFFFFFFFFFLL;
    v377 = v110;
    v402 = v100;
    v405 = v108;
    v380 = v131 & 0xFFFFFFFFFFFFLL;
    v393 = v84;
    v351 = pas_coalign(v137, v129, 0, v136);
    v135 = 0;
    if (v351)
    {
      v89 = a5;
      v84 = v393;
      v86 = v398;
      v87 = v397;
      v100 = v402;
      v108 = v405;
      v110 = v377;
      v132 = v380;
      v111 = v386;
      v106 = v390;
      v133 = v374;
      if (v17 > v352)
      {
        v134 = v368;
        if (v352 != v390)
        {
          v135 = (v17 - v352) / a5[1] * a5[1] / *a5 * *a5;
          goto LABEL_150;
        }
LABEL_149:
        v135 = v134;
LABEL_150:
        v87 = v397;
      }
    }
    else
    {
      v89 = a5;
      v84 = v393;
      v86 = v398;
      v87 = v397;
      v100 = v402;
      v108 = v405;
      v110 = v377;
      v132 = v380;
      v111 = v386;
      v106 = v390;
      v133 = v374;
    }
LABEL_151:
    v138 = v135 + a2;
    v139 = v108 - v132;
    if (v108 == v132)
    {
      v140 = 0;
      goto LABEL_157;
    }
    v141 = v89[1];
    if (v133)
    {
      v369 = v135 + a2;
      v387 = v111;
      v391 = v106;
      v375 = v133;
      v378 = v110;
      v403 = v100;
      v406 = v108;
      v394 = v84;
      v353 = *v89;
      v381 = v132;
      v354 = *v89 - v133 + v132;
      if (v354 >= v108)
      {
        v140 = 0;
        goto LABEL_383;
      }
    }
    else
    {
      if (((v141 - 1) & v132) == 0)
        goto LABEL_155;
      v369 = v135 + a2;
      v387 = v111;
      v391 = v106;
      v375 = 0;
      v378 = v110;
      v403 = v100;
      v406 = v108;
      v394 = v84;
      v353 = *v89;
      v381 = v132;
      v354 = v132;
    }
    v355 = pas_coalign(v354, v353, 0, v141);
    v140 = 0;
    if (v355)
    {
      v100 = v403;
      v108 = v406;
      v89 = a5;
      v84 = v394;
      v86 = v398;
      v87 = v397;
      v110 = v378;
      v132 = v381;
      v111 = v387;
      v106 = v391;
      v133 = v375;
      v138 = v369;
      if (v406 > v356)
      {
        if (v356 != v381)
        {
          v140 = (v406 - v356) / a5[1] * a5[1] / *a5 * *a5;
          goto LABEL_156;
        }
LABEL_155:
        v140 = v139;
LABEL_156:
        v87 = v397;
      }
LABEL_157:
      if ((double)v111 / (double)(v138 + v140) > 1.3)
        goto LABEL_167;
LABEL_160:
      if (v17 >= v81 || v132 == v17)
        goto LABEL_167;
      v142 = a1[2];
      if (v17 != v106)
      {
        if (v142 <= v91)
          v281 = (char *)&bootstrap_free_list - 24 * v142;
        else
          v281 = (char *)*a1;
        v282 = (uint64_t *)&v281[v90];
        *v282 = v106;
        v282[1] = v17;
        v282[2] = v383;
LABEL_292:
        v283 = (void (*)(uint64_t, unint64_t, unint64_t))v89[4];
        v284 = a1[3];
        if (v283)
        {
          a1[3] = v132 - v100 + v284;
          v283(v132, v108 - v132, v89[5]);
          return v17;
        }
        a1[3] = v108 - v100 + v284;
        if (v108 == v132)
          return v17;
        v285 = v133 | v110;
        ++_MergedGlobals_55;
        v286 = a1[1];
        if (!v286)
          goto LABEL_328;
        v287 = 0;
        v288 = 0;
        v289 = a1[2];
        v290 = qword_1ECF590D8;
        do
        {
          if (v287 >= v289)
            v291 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v287 - v289));
          else
            v291 = (uint64_t *)(*a1 + 24 * v287);
          v292 = *v291;
          v293 = v291[1];
          if (((*v291 ^ v103) & 0xFFFFFFFFFFFFLL) == 0 || (v293 & 0xFFFFFFFFFFFFLL) == v132)
          {
            v295 = v291[2];
            v296 = v285;
            v297 = v108;
            v298 = v108;
            v299 = v132;
            v300 = v132;
            do
            {
              v301 = v300;
              v302 = v298;
              v303 = v296;
              v300 = v292;
              v298 = v293;
              v296 = v295;
              v304 = v302 ^ v292;
              v295 = v303;
              v293 = v302;
              v292 = v301;
            }
            while ((v304 & 0xFFFFFFFFFFFFLL) == 0);
            if (((v301 ^ v298) & 0xFFFFFFFFFFFFLL) == 0
              && ((v298 & 0xFFFFFFFFFFFFLL) + (v296 & 0xFFFFFFFFFFFFLL) - (v300 & 0xFFFFFFFFFFFFLL)) % *v89 == (v303 & 0xFFFFFFFFFFFFLL))
            {
              v414.n128_u64[v288++] = v287;
            }
            v108 = v297;
            v132 = v299;
          }
          ++v287;
        }
        while (v287 != v286);
        qword_1ECF590D8 = v286 + v290;
        if (!v288)
        {
LABEL_328:
          v409.n128_u64[0] = v132;
          v409.n128_u64[1] = v108;
          v410 = v285;
          append(a1, &v409);
          return v17;
        }
        if (v414.n128_u64[0] >= v289)
          v306 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v414.n128_u64[0] - v289));
        else
          v306 = (uint64_t *)(*a1 + 24 * v414.n128_u64[0]);
        v307 = *v306;
        v308 = v306[1];
        v309 = v306[2];
        v310 = v108;
        do
        {
          v311 = v307;
          v312 = v308;
          v313 = v309;
          v307 = v132;
          v308 = v310;
          v309 = v285;
          v314 = v312 ^ v132;
          v285 = v313;
          v310 = v312;
          v132 = v311;
        }
        while ((v314 & 0xFFFFFFFFFFFFLL) == 0);
        if (((v311 ^ v308) & 0xFFFFFFFFFFFFLL) != 0
          || (v315 = v307 & 0xFFFFFFFFFFFFLL,
              v316 = v309 & 0xFFFFFFFFFFFFLL,
              ((v308 & 0xFFFFFFFFFFFFLL) + (v309 & 0xFFFFFFFFFFFFLL) - v315) % *a5 != (v313 & 0xFFFFFFFFFFFFLL)))
        {
          v315 = 0;
          v317 = 0;
          v321 = 0;
        }
        else
        {
          v317 = v312 & 0xFFFFFFFFFFFFLL;
          v318 = v309 & 0xFF000000000000;
          if ((v313 & 0xFF000000000000) == 0x1000000000000 && v318 == 0x1000000000000)
            v320 = 0x1000000000000;
          else
            v320 = 0;
          v321 = v320 | v316;
        }
        if (v288 != 2)
        {
          v49 = v414.n128_u64[0] >= v289;
          v338 = v414.n128_u64[0] - v289;
          if (v49)
            v339 = (uint64_t *)((char *)&bootstrap_free_list + 24 * v338);
          else
            v339 = (uint64_t *)(*a1 + 24 * v414.n128_u64[0]);
          *v339 = v315;
          v339[1] = v317;
          v339[2] = v321;
          return v17;
        }
        v322 = v414.n128_u64[1];
        if (v414.n128_u64[1] >= v289)
          v323 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v414.n128_u64[1] - v289));
        else
          v323 = (uint64_t *)(*a1 + 24 * v414.n128_u64[1]);
        v325 = *v323;
        v324 = v323[1];
        v326 = v323[2];
        do
        {
          v327 = v325;
          v328 = v324;
          v329 = v326;
          v325 = v315;
          v324 = v317;
          v326 = v321;
          v330 = v328 ^ v315;
          v321 = v329;
          v317 = v328;
          v315 = v327;
        }
        while ((v330 & 0xFFFFFFFFFFFFLL) == 0);
        if (((v327 ^ v324) & 0xFFFFFFFFFFFFLL) != 0
          || (v331 = v325 & 0xFFFFFFFFFFFFLL,
              v332 = v326 & 0xFFFFFFFFFFFFLL,
              ((v324 & 0xFFFFFFFFFFFFLL) + (v326 & 0xFFFFFFFFFFFFLL) - (v325 & 0xFFFFFFFFFFFFuLL)) % *a5 != (v329 & 0xFFFFFFFFFFFFLL)))
        {
          v331 = 0;
          v333 = 0;
          v337 = 0;
        }
        else
        {
          v333 = v328 & 0xFFFFFFFFFFFFLL;
          v334 = v326 & 0xFF000000000000;
          if ((v329 & 0xFF000000000000) == 0x1000000000000 && v334 == 0x1000000000000)
            v336 = 0x1000000000000;
          else
            v336 = 0;
          v337 = v336 | v332;
        }
        v49 = v414.n128_u64[0] >= v289;
        v340 = v414.n128_u64[0] - v289;
        if (v49)
        {
          v357 = (uint64_t *)((char *)&bootstrap_free_list + 24 * v340);
          *v357 = v331;
          v357[1] = v333;
          v357[2] = v337;
          v342 = a1[2];
          v343 = v322 - v342;
          if (v322 < v342)
          {
LABEL_354:
            v344 = (char *)(*a1 + 24 * v322);
            v345 = a1[1] - 1;
            a1[1] = v345;
            v49 = v345 >= v342;
            v346 = v345 - v342;
            if (!v49)
            {
LABEL_355:
              v347 = (char *)(*a1 + 24 * v345);
LABEL_356:
              v348 = *(_OWORD *)v347;
              *((_QWORD *)v344 + 2) = *((_QWORD *)v347 + 2);
              *(_OWORD *)v344 = v348;
              return v17;
            }
LABEL_396:
            v347 = (char *)&bootstrap_free_list + 24 * v346;
            goto LABEL_356;
          }
        }
        else
        {
          v341 = (uint64_t *)(*a1 + 24 * v414.n128_u64[0]);
          *v341 = v331;
          v341[1] = v333;
          v341[2] = v337;
          v342 = a1[2];
          v343 = v322 - v342;
          if (v322 < v342)
            goto LABEL_354;
        }
        v344 = (char *)&bootstrap_free_list + 24 * v343;
        v345 = a1[1] - 1;
        a1[1] = v345;
        v49 = v345 >= v342;
        v346 = v345 - v342;
        if (!v49)
          goto LABEL_355;
        goto LABEL_396;
      }
      if (v142 <= v91)
      {
        v143 = (char *)&bootstrap_free_list + v90 + -24 * v142;
        v144 = a1[1] - 1;
        a1[1] = v144;
        v49 = v144 >= v142;
        v145 = v144 - v142;
        if (!v49)
          goto LABEL_165;
      }
      else
      {
        v143 = (char *)(*a1 + v90);
        v144 = a1[1] - 1;
        a1[1] = v144;
        v49 = v144 >= v142;
        v145 = v144 - v142;
        if (!v49)
        {
LABEL_165:
          v146 = (char *)(*a1 + 24 * v144);
LABEL_166:
          v147 = *(_OWORD *)v146;
          *((_QWORD *)v143 + 2) = *((_QWORD *)v146 + 2);
          *(_OWORD *)v143 = v147;
          goto LABEL_292;
        }
      }
      v146 = (char *)&bootstrap_free_list + 24 * v145;
      goto LABEL_166;
    }
LABEL_383:
    v89 = a5;
    v84 = v394;
    v87 = v397;
    v86 = v398;
    v100 = v403;
    v108 = v406;
    v110 = v378;
    v132 = v381;
    v111 = v387;
    v106 = v391;
    v133 = v375;
    v138 = v369;
    goto LABEL_157;
  }
  v112 = v106 + v99 - v107;
  if (v112 < v108)
    goto LABEL_138;
LABEL_167:
  v148 = (void (*)(unint64_t, unint64_t, unint64_t))v89[4];
  if (v148)
  {
    a1[3] += v82;
    v149 = v84;
    v150 = v86;
    v148(v83, v85, v89[5]);
    ((void (*)(unint64_t, uint64_t, unint64_t))v89[4])(v149, v150, v89[5]);
    return v81;
  }
  a1[3] += v85 + v82 + v86;
  v151 = *v89 != 1 || v85 == 0;
  v152 = v81;
  if (!v151)
  {
    v399 = v86;
    v153 = v85 + v83;
    v154 = v83 & 0xFFFFFFFFFFFFLL;
    v155 = (v85 + v83) & 0xFFFFFFFFFFFFLL;
    v156 = v87;
    v157 = (unint64_t)v87 << 48;
    ++_MergedGlobals_55;
    v158 = a1[1];
    if (!v158)
      goto LABEL_221;
    v159 = v84;
    v160 = 0;
    v161 = 0;
    v162 = a1[2];
    v163 = qword_1ECF590D8;
    do
    {
      if (v160 >= v162)
        v164 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v160 - v162));
      else
        v164 = (uint64_t *)(*a1 + 24 * v160);
      v166 = *v164;
      v165 = v164[1];
      if (((*v164 ^ v153) & 0xFFFFFFFFFFFFLL) == 0 || ((v165 ^ v83) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v168 = v164[2];
        v169 = v157;
        v170 = v155;
        v171 = v83 & 0xFFFFFFFFFFFFLL;
        do
        {
          v172 = v171;
          v173 = v170;
          v174 = v169;
          v171 = v166;
          v170 = v165;
          v169 = v168;
          v175 = v173 ^ v166;
          v168 = v174;
          v165 = v173;
          v166 = v172;
        }
        while ((v175 & 0xFFFFFFFFFFFFLL) == 0);
        if (((v172 ^ v170 | v174) & 0xFFFFFFFFFFFFLL) == 0)
          v414.n128_u64[v161++] = v160;
      }
      ++v160;
    }
    while (v160 != v158);
    qword_1ECF590D8 = v158 + v163;
    if (v161)
    {
      if (v414.n128_u64[0] >= v162)
        v176 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v414.n128_u64[0] - v162));
      else
        v176 = (uint64_t *)(*a1 + 24 * v414.n128_u64[0]);
      v177 = *v176;
      v178 = v176[1];
      v179 = v176[2];
      do
      {
        v180 = v177;
        v181 = v178;
        v182 = v179;
        v177 = v154;
        v178 = v155;
        v179 = v157;
        v183 = v181 ^ v154;
        v157 = v182;
        v155 = v181;
        v154 = v180;
      }
      while ((v183 & 0xFFFFFFFFFFFFLL) == 0);
      v184 = v180 ^ v178 | v182;
      if ((v182 & 0xFF000000000000) == 0x1000000000000 && (v179 & 0xFF000000000000) == 0x1000000000000)
        v186 = 0x1000000000000;
      else
        v186 = 0;
      v187 = v186 & 0xFFFF000000000000 | v179 & 0xFFFFFFFFFFFFLL;
      if ((v184 & 0xFFFFFFFFFFFFLL) != 0)
        v188 = 0;
      else
        v188 = v177 & 0xFFFFFFFFFFFFLL;
      if ((v184 & 0xFFFFFFFFFFFFLL) != 0)
        v189 = 0;
      else
        v189 = v181 & 0xFFFFFFFFFFFFLL;
      if ((v184 & 0xFFFFFFFFFFFFLL) != 0)
        v190 = 0;
      else
        v190 = v187;
      if (v161 == 2)
      {
        v191 = v414.n128_u64[1];
        if (v414.n128_u64[1] >= v162)
          v192 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v414.n128_u64[1] - v162));
        else
          v192 = (uint64_t *)(*a1 + 24 * v414.n128_u64[1]);
        v194 = *v192;
        v193 = v192[1];
        v195 = v192[2];
        do
        {
          v196 = v194;
          v197 = v193;
          v198 = v195;
          v194 = v188;
          v193 = v189;
          v195 = v190;
          v199 = v197 ^ v188;
          v190 = v198;
          v189 = v197;
          v188 = v196;
        }
        while ((v199 & 0xFFFFFFFFFFFFLL) == 0);
        if (((v196 ^ v193 | v198) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v200 = 0;
          v201 = 0;
          v204 = 0;
        }
        else
        {
          v200 = v194 & 0xFFFFFFFFFFFFLL;
          v201 = v197 & 0xFFFFFFFFFFFFLL;
          if ((v198 & 0xFF000000000000) == 0x1000000000000 && (v195 & 0xFF000000000000) == 0x1000000000000)
            v203 = 0x1000000000000;
          else
            v203 = 0;
          v204 = v203 & 0xFFFF000000000000 | v195 & 0xFFFFFFFFFFFFLL;
        }
        v84 = v159;
        v49 = v414.n128_u64[0] >= v162;
        v208 = v414.n128_u64[0] - v162;
        v87 = v156;
        if (v49)
        {
          v349 = (uint64_t *)((char *)&bootstrap_free_list + 24 * v208);
          *v349 = v200;
          v349[1] = v201;
          v349[2] = v204;
          v210 = a1[2];
          v211 = v191 - v210;
          v86 = v399;
          if (v191 >= v210)
            goto LABEL_362;
LABEL_228:
          v212 = (char *)(*a1 + 24 * v191);
          v213 = a1[1] - 1;
          a1[1] = v213;
          v49 = v213 >= v210;
          v214 = v213 - v210;
          if (v49)
            goto LABEL_364;
LABEL_229:
          v215 = (char *)(*a1 + 24 * v213);
        }
        else
        {
          v209 = (uint64_t *)(*a1 + 24 * v414.n128_u64[0]);
          *v209 = v200;
          v209[1] = v201;
          v209[2] = v204;
          v210 = a1[2];
          v211 = v191 - v210;
          v86 = v399;
          if (v191 < v210)
            goto LABEL_228;
LABEL_362:
          v212 = (char *)&bootstrap_free_list + 24 * v211;
          v213 = a1[1] - 1;
          a1[1] = v213;
          v49 = v213 >= v210;
          v214 = v213 - v210;
          if (!v49)
            goto LABEL_229;
LABEL_364:
          v215 = (char *)&bootstrap_free_list + 24 * v214;
        }
        v216 = *(_OWORD *)v215;
        *((_QWORD *)v212 + 2) = *((_QWORD *)v215 + 2);
        *(_OWORD *)v212 = v216;
      }
      else
      {
        v49 = v414.n128_u64[0] >= v162;
        v206 = v414.n128_u64[0] - v162;
        v84 = v159;
        v87 = v156;
        if (v49)
          v207 = (uint64_t *)((char *)&bootstrap_free_list + 24 * v206);
        else
          v207 = (uint64_t *)(*a1 + 24 * v414.n128_u64[0]);
        v86 = v399;
        *v207 = v188;
        v207[1] = v189;
        v207[2] = v190;
      }
    }
    else
    {
LABEL_221:
      v409.n128_u64[0] = v83 & 0xFFFFFFFFFFFFLL;
      v409.n128_u64[1] = v155;
      v410 = v157;
      v205 = v84;
      append(a1, &v409);
      v84 = v205;
      v89 = a5;
      v86 = v399;
      v87 = v156;
    }
  }
  v217 = v152 + a2;
  v218 = v86 + v84;
  if (v152 + a2 == v86 + v84)
    return v152;
  v219 = *v89;
  v220 = v217 & 0xFFFFFFFFFFFFLL;
  v221 = v218 & 0xFFFFFFFFFFFFLL;
  v222 = (a2 % *v89) & 0xFFFFFFFFFFFFLL | ((unint64_t)v87 << 48);
  ++_MergedGlobals_55;
  v223 = a1[1];
  if (!v223)
    goto LABEL_262;
  v224 = 0;
  v225 = 0;
  v226 = a1[2];
  v227 = qword_1ECF590D8;
  do
  {
    if (v224 >= v226)
      v228 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v224 - v226));
    else
      v228 = (uint64_t *)(*a1 + 24 * v224);
    v230 = *v228;
    v229 = v228[1];
    if (((*v228 ^ v218) & 0xFFFFFFFFFFFFLL) == 0 || ((v229 ^ v217) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v232 = v228[2];
      v233 = v222;
      v234 = v218 & 0xFFFFFFFFFFFFLL;
      v235 = v217 & 0xFFFFFFFFFFFFLL;
      do
      {
        v236 = v235;
        v237 = v234;
        v238 = v233;
        v235 = v230;
        v234 = v229;
        v233 = v232;
        v239 = v237 ^ v230;
        v232 = v238;
        v229 = v237;
        v230 = v236;
      }
      while ((v239 & 0xFFFFFFFFFFFFLL) == 0);
      if (((v236 ^ v234) & 0xFFFFFFFFFFFFLL) == 0
        && ((v234 & 0xFFFFFFFFFFFFLL) + (v233 & 0xFFFFFFFFFFFFLL) - (v235 & 0xFFFFFFFFFFFFLL)) % v219 == (v238 & 0xFFFFFFFFFFFFLL))
      {
        v414.n128_u64[v225++] = v224;
      }
    }
    ++v224;
  }
  while (v224 != v223);
  qword_1ECF590D8 = v223 + v227;
  if (!v225)
  {
LABEL_262:
    v409.n128_u64[0] = v217 & 0xFFFFFFFFFFFFLL;
    v409.n128_u64[1] = v218 & 0xFFFFFFFFFFFFLL;
    v410 = v222;
    append(a1, &v409);
    return v152;
  }
  if (v414.n128_u64[0] >= v226)
    v240 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v414.n128_u64[0] - v226));
  else
    v240 = (uint64_t *)(*a1 + 24 * v414.n128_u64[0]);
  v241 = *v240;
  v242 = v240[1];
  v243 = v240[2];
  do
  {
    v244 = v241;
    v245 = v242;
    v246 = v243;
    v241 = v220;
    v242 = v221;
    v243 = v222;
    v247 = v245 ^ v220;
    v222 = v246;
    v221 = v245;
    v220 = v244;
  }
  while ((v247 & 0xFFFFFFFFFFFFLL) == 0);
  if (((v244 ^ v242) & 0xFFFFFFFFFFFFLL) != 0
    || (v248 = v241 & 0xFFFFFFFFFFFFLL,
        v249 = v243 & 0xFFFFFFFFFFFFLL,
        ((v242 & 0xFFFFFFFFFFFFLL) + (v243 & 0xFFFFFFFFFFFFLL) - (v241 & 0xFFFFFFFFFFFFLL)) % v219 != (v246 & 0xFFFFFFFFFFFFLL)))
  {
    v248 = 0;
    v250 = 0;
    v254 = 0;
  }
  else
  {
    v250 = v245 & 0xFFFFFFFFFFFFLL;
    v251 = v243 & 0xFF000000000000;
    if ((v246 & 0xFF000000000000) == 0x1000000000000 && v251 == 0x1000000000000)
      v253 = 0x1000000000000;
    else
      v253 = 0;
    v254 = v253 | v249;
  }
  if (v225 == 2)
  {
    v255 = v414.n128_u64[1];
    if (v414.n128_u64[1] >= v226)
      v256 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v414.n128_u64[1] - v226));
    else
      v256 = (uint64_t *)(*a1 + 24 * v414.n128_u64[1]);
    v257 = *v256;
    v258 = v256[1];
    v259 = v256[2];
    do
    {
      v260 = v257;
      v261 = v258;
      v262 = v259;
      v257 = v248;
      v258 = v250;
      v259 = v254;
      v263 = v261 ^ v248;
      v254 = v262;
      v250 = v261;
      v248 = v260;
    }
    while ((v263 & 0xFFFFFFFFFFFFLL) == 0);
    if (((v260 ^ v258) & 0xFFFFFFFFFFFFLL) != 0
      || (v264 = v257 & 0xFFFFFFFFFFFFLL,
          ((v258 & 0xFFFFFFFFFFFFLL) + (v259 & 0xFFFFFFFFFFFFLL) - (v257 & 0xFFFFFFFFFFFFuLL)) % v219 != (v262 & 0xFFFFFFFFFFFFLL)))
    {
      v264 = 0;
      v265 = 0;
      v268 = 0;
    }
    else
    {
      v265 = v261 & 0xFFFFFFFFFFFFLL;
      if ((v262 & 0xFF000000000000) == 0x1000000000000 && (v259 & 0xFF000000000000) == 0x1000000000000)
        v267 = 0x1000000000000;
      else
        v267 = 0;
      v268 = v267 | v259 & 0xFFFFFFFFFFFFLL;
    }
    v49 = v414.n128_u64[0] >= v226;
    v271 = v414.n128_u64[0] - v226;
    if (v49)
    {
      v350 = (uint64_t *)((char *)&bootstrap_free_list + 24 * v271);
      *v350 = v264;
      v350[1] = v265;
      v350[2] = v268;
      v273 = a1[2];
      v274 = v255 - v273;
      if (v255 >= v273)
        goto LABEL_368;
LABEL_284:
      v275 = (char *)(*a1 + 24 * v255);
      v276 = a1[1] - 1;
      a1[1] = v276;
      v49 = v276 >= v273;
      v277 = v276 - v273;
      if (v49)
        goto LABEL_370;
LABEL_285:
      v278 = (char *)(*a1 + 24 * v276);
    }
    else
    {
      v272 = (uint64_t *)(*a1 + 24 * v414.n128_u64[0]);
      *v272 = v264;
      v272[1] = v265;
      v272[2] = v268;
      v273 = a1[2];
      v274 = v255 - v273;
      if (v255 < v273)
        goto LABEL_284;
LABEL_368:
      v275 = (char *)&bootstrap_free_list + 24 * v274;
      v276 = a1[1] - 1;
      a1[1] = v276;
      v49 = v276 >= v273;
      v277 = v276 - v273;
      if (!v49)
        goto LABEL_285;
LABEL_370:
      v278 = (char *)&bootstrap_free_list + 24 * v277;
    }
    v279 = *(_OWORD *)v278;
    *((_QWORD *)v275 + 2) = *((_QWORD *)v278 + 2);
    *(_OWORD *)v275 = v279;
    return v152;
  }
  v49 = v414.n128_u64[0] >= v226;
  v269 = v414.n128_u64[0] - v226;
  if (v49)
    v270 = (uint64_t *)((char *)&bootstrap_free_list + 24 * v269);
  else
    v270 = (uint64_t *)(*a1 + 24 * v414.n128_u64[0]);
  *v270 = v248;
  v270[1] = v250;
  v17 = v152;
  v270[2] = v254;
  return v17;
}

double pas_simple_large_free_heap_deallocate(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, _QWORD *a5)
{
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  char *v17;
  __n128 *v18;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v10.n128_u64[0] = merge_physical(a1, a2, a3, a4, a5).n128_u64[0];
  if (a1 == &pas_bootstrap_free_heap)
  {
    v11 = qword_1ECF551A8;
    if (qword_1ECF551A0 > (unint64_t)qword_1ECF551A8)
    {
      v12 = pas_bootstrap_free_heap;
      if ((unint64_t)(2 * qword_1ECF551A0) <= 4)
        v13 = 4;
      else
        v13 = 2 * qword_1ECF551A0;
      v14 = try_allocate_without_fixing(&pas_bootstrap_free_heap, 24 * v13, 8, 0, a5);
      if (qword_1ECF551A0)
      {
        v15 = 0;
        v16 = (__n128 *)v14;
        v17 = (char *)&bootstrap_free_list;
        do
        {
          if (qword_1ECF551A8 <= v15)
            v18 = (__n128 *)&v17[-24 * qword_1ECF551A8];
          else
            v18 = (__n128 *)(pas_bootstrap_free_heap + 24 * v15);
          v10 = *v18;
          v16[1].n128_u64[0] = v18[1].n128_u64[0];
          *v16 = v10;
          v16 = (__n128 *)((char *)v16 + 24);
          ++v15;
          v17 += 24;
        }
        while (v15 < qword_1ECF551A0);
      }
      pas_bootstrap_free_heap = v14;
      qword_1ECF551A8 = v13;
      if (v12)
        v10.n128_u64[0] = merge_physical(&pas_bootstrap_free_heap, v12, v12 + 24 * v11, 0, a5).n128_u64[0];
    }
  }
  return v10.n128_f64[0];
}

__n128 merge_physical(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t *v42;
  __n128 result;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  __n128 *v64;
  unint64_t v65;
  unint64_t v66;
  __n128 *v67;
  uint64_t *v68;
  _QWORD v69[3];
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return result;
  v5 = a2 & 0xFFFFFFFFFFFFLL;
  v6 = a3 & 0xFFFFFFFFFFFFLL;
  v7 = (unint64_t)a4 << 48;
  ++_MergedGlobals_55;
  v8 = a1[1];
  if (!v8)
    goto LABEL_35;
  v9 = 0;
  v10 = 0;
  v11 = a1[2];
  v12 = qword_1ECF590D8;
  do
  {
    if (v9 >= v11)
      v13 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v9 - v11));
    else
      v13 = (uint64_t *)(*a1 + 24 * v9);
    v15 = *v13;
    v14 = v13[1];
    if (((*v13 ^ a3) & 0xFFFFFFFFFFFFLL) == 0 || ((v14 ^ a2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v17 = v13[2];
      v18 = (unint64_t)a4 << 48;
      v19 = a3 & 0xFFFFFFFFFFFFLL;
      v20 = a2 & 0xFFFFFFFFFFFFLL;
      do
      {
        v21 = v20;
        v22 = v19;
        v23 = v18;
        v20 = v15;
        v19 = v14;
        v18 = v17;
        v24 = v22 ^ v15;
        v17 = v23;
        v14 = v22;
        v15 = v21;
      }
      while ((v24 & 0xFFFFFFFFFFFFLL) == 0);
      if (((v21 ^ v19) & 0xFFFFFFFFFFFFLL) == 0
        && ((v19 & 0xFFFFFFFFFFFFLL) + (v18 & 0xFFFFFFFFFFFFLL) - (v20 & 0xFFFFFFFFFFFFLL)) % *a5 == (v23 & 0xFFFFFFFFFFFFLL))
      {
        *(&v70 + v10++) = v9;
      }
    }
    ++v9;
  }
  while (v9 != v8);
  qword_1ECF590D8 = v8 + v12;
  if (!v10)
  {
LABEL_35:
    v69[0] = a2 & 0xFFFFFFFFFFFFLL;
    v69[1] = a3 & 0xFFFFFFFFFFFFLL;
    v69[2] = (unint64_t)a4 << 48;
    append(a1, v69, a3);
    return result;
  }
  if (v70 >= v11)
    v25 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v70 - v11));
  else
    v25 = (uint64_t *)(*a1 + 24 * v70);
  v26 = *v25;
  v27 = v25[1];
  v28 = v25[2];
  do
  {
    v29 = v26;
    v30 = v27;
    v31 = v28;
    v26 = v5;
    v27 = v6;
    v28 = v7;
    v32 = v30 ^ v5;
    v7 = v31;
    v6 = v30;
    v5 = v29;
  }
  while ((v32 & 0xFFFFFFFFFFFFLL) == 0);
  if (((v29 ^ v27) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v33 = v26 & 0xFFFFFFFFFFFFLL;
    v34 = v28 & 0xFFFFFFFFFFFFLL;
    if (((v27 & 0xFFFFFFFFFFFFLL) + (v28 & 0xFFFFFFFFFFFFLL) - (v26 & 0xFFFFFFFFFFFFLL)) % *a5 == (v31 & 0xFFFFFFFFFFFFLL))
    {
      v35 = v30 & 0xFFFFFFFFFFFFLL;
      v36 = v28 & 0xFF000000000000;
      if ((v31 & 0xFF000000000000) == 0x1000000000000 && v36 == 0x1000000000000)
        v38 = 0x1000000000000;
      else
        v38 = 0;
      v39 = v38 | v34;
      if (v10 != 2)
        goto LABEL_32;
LABEL_38:
      v44 = v71;
      if (v71 >= v11)
        v45 = (uint64_t *)((char *)&bootstrap_free_list + 24 * (v71 - v11));
      else
        v45 = (uint64_t *)(*a1 + 24 * v71);
      v46 = *v45;
      v47 = v45[1];
      v48 = v45[2];
      do
      {
        v49 = v46;
        v50 = v47;
        v51 = v48;
        v46 = v33;
        v47 = v35;
        v48 = v39;
        v52 = v50 ^ v33;
        v39 = v51;
        v35 = v50;
        v33 = v49;
      }
      while ((v52 & 0xFFFFFFFFFFFFLL) == 0);
      if (((v49 ^ v47) & 0xFFFFFFFFFFFFLL) != 0
        || (v53 = v46 & 0xFFFFFFFFFFFFLL,
            v54 = v48 & 0xFFFFFFFFFFFFLL,
            ((v47 & 0xFFFFFFFFFFFFLL) + (v48 & 0xFFFFFFFFFFFFLL) - (v46 & 0xFFFFFFFFFFFFuLL)) % *a5 != (v51 & 0xFFFFFFFFFFFFLL)))
      {
        v53 = 0;
        v55 = 0;
        v59 = 0;
      }
      else
      {
        v55 = v50 & 0xFFFFFFFFFFFFLL;
        v56 = v48 & 0xFF000000000000;
        if ((v51 & 0xFF000000000000) == 0x1000000000000 && v56 == 0x1000000000000)
          v58 = 0x1000000000000;
        else
          v58 = 0;
        v59 = v58 | v54;
      }
      v40 = v70 >= v11;
      v60 = v70 - v11;
      if (v40)
      {
        v68 = (uint64_t *)((char *)&bootstrap_free_list + 24 * v60);
        *v68 = v53;
        v68[1] = v55;
        v68[2] = v59;
        v62 = a1[2];
        v63 = v44 - v62;
        if (v44 < v62)
        {
LABEL_54:
          v64 = (__n128 *)(*a1 + 24 * v44);
          v65 = a1[1] - 1;
          a1[1] = v65;
          v40 = v65 >= v62;
          v66 = v65 - v62;
          if (!v40)
          {
LABEL_55:
            v67 = (__n128 *)(*a1 + 24 * v65);
LABEL_56:
            result = *v67;
            v64[1].n128_u64[0] = v67[1].n128_u64[0];
            *v64 = result;
            return result;
          }
LABEL_63:
          v67 = (__n128 *)((char *)&bootstrap_free_list + 24 * v66);
          goto LABEL_56;
        }
      }
      else
      {
        v61 = (uint64_t *)(*a1 + 24 * v70);
        *v61 = v53;
        v61[1] = v55;
        v61[2] = v59;
        v62 = a1[2];
        v63 = v44 - v62;
        if (v44 < v62)
          goto LABEL_54;
      }
      v64 = (__n128 *)((char *)&bootstrap_free_list + 24 * v63);
      v65 = a1[1] - 1;
      a1[1] = v65;
      v40 = v65 >= v62;
      v66 = v65 - v62;
      if (!v40)
        goto LABEL_55;
      goto LABEL_63;
    }
  }
  v33 = 0;
  v35 = 0;
  v39 = 0;
  if (v10 == 2)
    goto LABEL_38;
LABEL_32:
  v40 = v70 >= v11;
  v41 = v70 - v11;
  if (v40)
    v42 = (uint64_t *)((char *)&bootstrap_free_list + 24 * v41);
  else
    v42 = (uint64_t *)(*a1 + 24 * v70);
  *v42 = v33;
  v42[1] = v35;
  v42[2] = v39;
  return result;
}

__n128 append(uint64_t *a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 result;
  int64x2_t v19;
  __int128 v20;
  __int128 v21;

  if (a1 == &pas_bootstrap_free_heap)
  {
    v4 = qword_1ECF551A0++;
    v15 = v4 - qword_1ECF551A8;
    if (v4 < qword_1ECF551A8)
    {
      v16 = pas_bootstrap_free_heap;
      goto LABEL_22;
    }
LABEL_24:
    v17 = (__n128 *)((char *)&bootstrap_free_list + 24 * v15);
    goto LABEL_23;
  }
  v4 = a1[1];
  v5 = a1[2];
  v6 = v4 + 1;
  if (v4 + 1 > v5)
  {
    v5 = 2 * v5 + 2;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    initialize_config(&v19);
    v7 = pas_simple_large_free_heap_try_allocate(&pas_bootstrap_free_heap, 24 * v5, 8, 0, &v19);
    v8 = (char *)v7;
    v10 = v9;
    if (v7)
      v11 = pas_allocation_callback == 0;
    else
      v11 = 1;
    if (!v11)
      pas_allocation_callback(v7, 24 * v5, 0, "pas_simple_large_free_heap/free_list", 0);
    if ((v10 & 1) != 0)
    {
      v12 = pas_bootstrap_free_heap_num_allocated_object_bytes + 24 * v5;
      pas_bootstrap_free_heap_num_allocated_object_bytes = v12;
      if (v12 <= pas_bootstrap_free_heap_num_allocated_object_bytes_peak)
        v12 = pas_bootstrap_free_heap_num_allocated_object_bytes_peak;
      pas_bootstrap_free_heap_num_allocated_object_bytes_peak = v12;
    }
    memcpy(v8, (const void *)*a1, 24 * a1[1]);
    bzero(&v8[24 * a1[1]], 24 * (v5 - a1[1]));
    v13 = 24 * a1[2];
    if (v13)
    {
      v14 = *a1;
      if (*a1 && pas_deallocation_callback)
        pas_deallocation_callback(*a1, 24 * a1[2], 0, 0);
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      initialize_config(&v19);
      pas_simple_large_free_heap_deallocate(&pas_bootstrap_free_heap, v14, v13 + v14, 0, &v19);
      pas_bootstrap_free_heap_num_allocated_object_bytes -= v13;
    }
    *a1 = (uint64_t)v8;
    a1[2] = v5;
    v4 = a1[1];
    v6 = v4 + 1;
  }
  a1[1] = v6;
  v15 = v4 - v5;
  if (v4 >= v5)
    goto LABEL_24;
  v16 = *a1;
LABEL_22:
  v17 = (__n128 *)(v16 + 24 * v4);
LABEL_23:
  result = *a2;
  v17[1].n128_u64[0] = a2[1].n128_u64[0];
  *v17 = result;
  return result;
}

uint64_t (***pas_status_reporter_dump_bitfit_directory(uint64_t (***result)(_QWORD, uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(_QWORD, uint64_t, uint64_t *)
{
  uint64_t (***v9)(_QWORD, uint64_t, uint64_t *);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t i;
  uint64_t (***v38)(_QWORD, uint64_t, uint64_t *);
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t j;
  uint64_t (***v62)(_QWORD, uint64_t, uint64_t *);
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t k;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t m;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t n;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t ii;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE v194[8];
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;

  if (*(_BYTE *)(a2 + 124))
  {
    v9 = result;
    v10 = *(int *)(pas_bitfit_page_config_kind_for_config_table[*(unsigned __int8 *)(a2 + 124)] + 96);
    if (v10 > 2)
      v11 = 0;
    else
      v11 = off_1E35BEDF0[v10];
    pas_stream_printf(result, (uint64_t)"            %s Global Dir (%p): ", a3, a4, a5, a6, a7, a8, (uint64_t)v11);
    pas_bitfit_directory_compute_summary(a2, (uint64_t)v194);
    v18 = 0.0;
    if (v198 + v197)
      v18 = (double)(unint64_t)(v196 + v195) * 100.0 / (double)(unint64_t)(v198 + v197);
    pas_stream_printf(v9, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
      v12,
      v13,
      v14,
      v15,
      v16,
      v17,
      *(uint64_t *)&v18);
    if (v199)
      pas_stream_printf(v9, (uint64_t)"; Cached: %zu", v19, v20, v21, v22, v23, v24, v199);
    result = (uint64_t (***)(_QWORD, uint64_t, uint64_t *))pas_stream_printf(v9, (uint64_t)"\n", v19, v20, v21, v22, v23, v24, v181);
    if (*(_DWORD *)(a2 + 84))
    {
      pas_stream_printf(v9, (uint64_t)"%s    Occupancy: ", v25, v26, v27, v28, v29, v30, (uint64_t)"                ");
      if (*(_DWORD *)(a2 + 84))
      {
        for (i = 0; i < *(unsigned int *)(a2 + 84); ++i)
        {
          v40 = *(unsigned int *)(a2 + 80);
          if ((_DWORD)v40)
            v41 = pas_compact_heap_reservation_base + 8 * v40;
          else
            v41 = 0;
          v42 = *(unsigned int *)(v41 + ((i >> 1) & 0x7FFFFFFFFFFFFFFCLL));
          if ((_DWORD)v42)
            v43 = pas_compact_heap_reservation_base + 8 * v42;
          else
            v43 = 0;
          v44 = *(unsigned int *)(v43 + 4 * (i & 7));
          v45 = pas_compact_heap_reservation_base + 8 * v44;
          if ((_DWORD)v44)
            v46 = v45 == 0;
          else
            v46 = 1;
          if (v46 || (pas_bitfit_view_compute_summary(v45, (uint64_t)&v200), (v47 = v201 + v200) == 0))
          {
            v38 = v9;
            v39 = " ";
          }
          else
          {
            if (!v200)
            {
              pas_stream_printf(v9, (uint64_t)"%s", v31, v32, v33, v34, v35, v36, (uint64_t)"F");
              continue;
            }
            v48 = 10 * v201;
            if (!v201 || v48 >= v47)
            {
              pas_stream_printf(v9, (uint64_t)"%lu", v31, v32, v33, v34, v35, v36, v48 / v47);
              continue;
            }
            v38 = v9;
            v39 = "e";
          }
          pas_stream_printf(v38, (uint64_t)v39, v31, v32, v33, v34, v35, v36, v182);
        }
      }
      pas_stream_printf(v9, (uint64_t)"\n", v31, v32, v33, v34, v35, v36, v182);
      pas_stream_printf(v9, (uint64_t)"%s     Max Free: ", v49, v50, v51, v52, v53, v54, (uint64_t)"                ");
      if (*(_DWORD *)(a2 + 84))
      {
        for (j = 0; j < *(unsigned int *)(a2 + 84); ++j)
        {
          v64 = *(unsigned int *)(a2 + 68);
          if ((_DWORD)v64)
            v65 = pas_compact_heap_reservation_base + 8 * v64;
          else
            v65 = 0;
          v66 = *(unsigned int *)(v65 + ((j >> 5) & 0x7FFFFFFFFFFFFFCLL));
          if ((_DWORD)v66)
            v67 = pas_compact_heap_reservation_base + 8 * v66;
          else
            v67 = 0;
          v68 = *(unsigned __int8 *)(v67 + (j & 0x7F));
          if (v68 == 254)
          {
            v183 = "U";
            v62 = v9;
            v63 = "%s";
          }
          else if (v68 == 255)
          {
            v62 = v9;
            v63 = "E";
          }
          else
          {
            if ((v68 - 1) > 0x18)
            {
              pas_stream_printf(v9, (uint64_t)"%lu", v55, v56, v57, v58, v59, v60, (41290 * v68) >> 20);
              continue;
            }
            v62 = v9;
            v63 = "e";
          }
          pas_stream_printf(v62, (uint64_t)v63, v55, v56, v57, v58, v59, v60, (uint64_t)v183);
        }
      }
      pas_stream_printf(v9, (uint64_t)"\n", v55, v56, v57, v58, v59, v60, (uint64_t)v183);
      pas_stream_printf(v9, (uint64_t)"%s  Empty (bit): ", v69, v70, v71, v72, v73, v74, (uint64_t)"                ");
      if (*(_DWORD *)(a2 + 84))
      {
        v81 = 0;
        do
        {
          v82 = *(unsigned int *)(a2 + 56);
          if ((_DWORD)v82)
            v83 = pas_compact_heap_reservation_base + 8 * v82;
          else
            v83 = 0;
          v84 = *(unsigned int *)(v83 + ((v81 >> 5) & 0x7FFFFFFFFFFFFFCLL));
          if ((_DWORD)v84)
            v85 = pas_compact_heap_reservation_base + 8 * v84;
          else
            v85 = 0;
          if (((*(_DWORD *)(v85 + 4 * ((v81 >> 5) & 3)) >> v81) & 1) != 0)
            v86 = "x";
          else
            v86 = " ";
          pas_stream_printf(v9, (uint64_t)v86, v75, v76, v77, v78, v79, v80, v184);
          ++v81;
        }
        while (v81 < *(unsigned int *)(a2 + 84));
      }
      pas_stream_printf(v9, (uint64_t)"\n", v75, v76, v77, v78, v79, v80, v184);
      pas_stream_printf(v9, (uint64_t)"%s Last Empty+1: ", v87, v88, v89, v90, v91, v92, (uint64_t)"                ");
      for (k = *(_QWORD *)(a2 + 32); k; --k)
        pas_stream_printf(v9, (uint64_t)" ", v93, v94, v95, v96, v97, v98, v185);
      pas_stream_printf(v9, (uint64_t)"^", v93, v94, v95, v96, v97, v98, v185);
      pas_stream_printf(v9, (uint64_t)"\n", v100, v101, v102, v103, v104, v105, v186);
      pas_stream_printf(v9, (uint64_t)"%s    Committed: ", v106, v107, v108, v109, v110, v111, (uint64_t)"                ");
      if (*(_DWORD *)(a2 + 84))
      {
        v118 = 0;
        do
        {
          v119 = *(unsigned int *)(a2 + 80);
          if ((_DWORD)v119)
            v120 = pas_compact_heap_reservation_base + 8 * v119;
          else
            v120 = 0;
          v121 = *(unsigned int *)(v120 + ((v118 >> 1) & 0x7FFFFFFFFFFFFFFCLL));
          if ((_DWORD)v121)
            v122 = pas_compact_heap_reservation_base + 8 * v121;
          else
            v122 = 0;
          v123 = *(unsigned int *)(v122 + 4 * (v118 & 7));
          v124 = pas_compact_heap_reservation_base + 8 * v123;
          if ((_DWORD)v123)
            v125 = v124 == 0;
          else
            v125 = 1;
          v126 = " ";
          if (!v125)
          {
            if (*(_BYTE *)(v124 + 11))
              v126 = "x";
            else
              v126 = " ";
          }
          pas_stream_printf(v9, (uint64_t)v126, v112, v113, v114, v115, v116, v117, v187);
          ++v118;
        }
        while (v118 < *(unsigned int *)(a2 + 84));
      }
      pas_stream_printf(v9, (uint64_t)"\n", v112, v113, v114, v115, v116, v117, v187);
      v133 = *(unsigned int *)(a2 + 120);
      if ((_DWORD)v133)
      {
        for (m = pas_compact_heap_reservation_base + 8 * v133; m; m = pas_compact_heap_reservation_base + 8 * v148)
        {
          v135 = *(_QWORD *)m;
          pas_stream_printf(v9, (uint64_t)"%s%7u Bytes: ", v127, v128, v129, v130, v131, v132, (uint64_t)"                ");
          for (; v135; --v135)
            pas_stream_printf(v9, (uint64_t)" ", v136, v137, v138, v139, v140, v141, v188);
          pas_stream_printf(v9, (uint64_t)"^", v136, v137, v138, v139, v140, v141, v188);
          pas_stream_printf(v9, (uint64_t)"\n", v142, v143, v144, v145, v146, v147, v189);
          v148 = *(unsigned int *)(m + 20);
          if (!(_DWORD)v148)
            break;
        }
      }
      pas_stream_printf(v9, (uint64_t)"%s  Unprocessed: ", v127, v128, v129, v130, v131, v132, (uint64_t)"                ");
      for (n = *(_QWORD *)a2; n; --n)
        pas_stream_printf(v9, (uint64_t)" ", v149, v150, v151, v152, v153, v154, v190);
      pas_stream_printf(v9, (uint64_t)"^", v149, v150, v151, v152, v153, v154, v190);
      pas_stream_printf(v9, (uint64_t)"\n", v156, v157, v158, v159, v160, v161, v191);
      pas_stream_printf(v9, (uint64_t)"%s Empty (free): ", v162, v163, v164, v165, v166, v167, (uint64_t)"                ");
      for (ii = *(_QWORD *)(a2 + 16); ii; --ii)
        pas_stream_printf(v9, (uint64_t)" ", v168, v169, v170, v171, v172, v173, v192);
      pas_stream_printf(v9, (uint64_t)"^", v168, v169, v170, v171, v172, v173, v192);
      return (uint64_t (***)(_QWORD, uint64_t, uint64_t *))pas_stream_printf(v9, (uint64_t)"\n", v175, v176, v177, v178, v179, v180, v193);
    }
  }
  return result;
}

uint64_t (***report_segregated_directory_contents(uint64_t (***result)(_QWORD, uint64_t, uint64_t *), unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(_QWORD, uint64_t, uint64_t *)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (***v12)(_QWORD, uint64_t, uint64_t *);
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t n;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  unint64_t m;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  unint64_t ii;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t i;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  unint64_t v200;
  uint64_t jj;
  const char *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t j;
  uint64_t (***v215)(_QWORD, uint64_t, uint64_t *);
  const char *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t k;
  uint64_t (***v236)(_QWORD, uint64_t, uint64_t *);
  const char *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;

  v8 = *a2;
  if (v8 >= 8)
    v9 = pas_compact_heap_reservation_base;
  else
    v9 = 0;
  if (!(v9 + v8))
    return result;
  v12 = result;
  v13 = a2[1];
  v14 = pas_compact_heap_reservation_base + 8 * v13;
  v15 = !(_DWORD)v13 || v14 == 0;
  if (!v15 && *(_DWORD *)(v14 + 48) == -1)
    return result;
  pas_stream_printf(result, (uint64_t)"%s        Kind: ", a3, a4, a5, a6, a7, a8, a3);
  v22 = *a2;
  if (v22 >= 8)
    v23 = pas_compact_heap_reservation_base;
  else
    v23 = 0;
  if (v23 + v22)
  {
    v79 = a2[1];
    if (!(_DWORD)v79 || (v80 = pas_compact_heap_reservation_base + 8 * v79) == 0 || *(_DWORD *)(v80 + 48) != -1)
    {
      v81 = ((_BYTE)v22 + (_BYTE)v23) & 7;
      if (v81 > 5)
        v82 = 0;
      else
        v82 = dword_19919FDD8[v81];
      pas_stream_printf(v12, (uint64_t)"%c", v16, v17, v18, v19, v20, v21, v82);
      for (i = 0; ; ++i)
      {
        v189 = 0;
        v190 = *a2;
        v191 = pas_compact_heap_reservation_base;
        if (v190 >= 8)
          v192 = pas_compact_heap_reservation_base;
        else
          v192 = 0;
        if (!(v192 + v190))
          goto LABEL_148;
        v193 = a2[1];
        v194 = pas_compact_heap_reservation_base + 8 * v193;
        if (!(_DWORD)v193 || v194 == 0)
          break;
        if (i + 1 >= (unint64_t)(*(_DWORD *)(v194 + 48) + 1))
          goto LABEL_14;
LABEL_149:
        v196 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * a2[1] + 44);
        if ((_DWORD)v196)
          v197 = pas_compact_heap_reservation_base + 8 * v196;
        else
          v197 = 0;
        v198 = *(_DWORD *)(v197 + 4 * i);
        if (v198 < 8)
          v191 = 8;
        v199 = (v191 + (_BYTE)v198) & 7;
        if (v199 <= 5)
          v188 = dword_19919FDD8[v199];
        else
          v188 = 0;
        pas_stream_printf(v12, (uint64_t)"%c", v16, v17, v18, v19, v20, v21, v188);
      }
      v189 = 1;
LABEL_148:
      if (i + 1 >= v189)
        goto LABEL_14;
      goto LABEL_149;
    }
  }
LABEL_14:
  pas_stream_printf(v12, (uint64_t)"\n", v16, v17, v18, v19, v20, v21, v251);
  pas_stream_printf(v12, (uint64_t)"%s   Occupancy: ", v24, v25, v26, v27, v28, v29, a3);
  v36 = *a2;
  if (v36 >= 8)
    v37 = pas_compact_heap_reservation_base;
  else
    v37 = 0;
  if (v37 + v36)
  {
    v83 = a2[1];
    if (!(_DWORD)v83 || (v84 = pas_compact_heap_reservation_base + 8 * v83) == 0 || *(_DWORD *)(v84 + 48) != -1)
    {
      v85 = v37 + v36;
      v86 = v85 & 7;
      if (v86 < 2)
      {
        pas_segregated_exclusive_view_compute_summary(v85 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v261);
        v88 = v261;
        v87 = v262;
        v89 = v262 + v261;
        if (v262 + v261)
          goto LABEL_159;
      }
      else
      {
        if (v86 != 2)
        {
          if (v86 != 4)
            goto LABEL_44;
          pas_segregated_partial_view_compute_summary(v85 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v261);
          v88 = v261;
          v87 = v262;
          v89 = v262 + v261;
          if (!(v262 + v261))
            goto LABEL_44;
LABEL_159:
          if (!v88)
          {
            pas_stream_printf(v12, (uint64_t)"%s", v30, v31, v32, v33, v34, v35, (uint64_t)"F");
LABEL_204:
            for (j = 0; ; ++j)
            {
              v217 = 0;
              v218 = *a2;
              v219 = pas_compact_heap_reservation_base;
              if (v218 >= 8)
                v220 = pas_compact_heap_reservation_base;
              else
                v220 = 0;
              if (!(v220 + v218))
                goto LABEL_218;
              v221 = a2[1];
              v222 = pas_compact_heap_reservation_base + 8 * v221;
              if (!(_DWORD)v221 || v222 == 0)
                break;
              if (j + 1 >= (unint64_t)(*(_DWORD *)(v222 + 48) + 1))
                goto LABEL_18;
LABEL_219:
              v224 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * a2[1] + 44);
              if ((_DWORD)v224)
                v225 = pas_compact_heap_reservation_base + 8 * v224;
              else
                v225 = 0;
              v226 = *(unsigned int *)(v225 + 4 * j);
              if (v226 < 8)
                v219 = 0;
              v227 = v219 + v226;
              v228 = v227 & 7;
              if (v228 < 2)
              {
                pas_segregated_exclusive_view_compute_summary(v227 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v261);
                v230 = v261;
                v229 = v262;
                v231 = v262 + v261;
                if (!(v262 + v261))
                  goto LABEL_205;
              }
              else if (v228 == 2)
              {
                pas_segregated_shared_view_compute_summary();
                v230 = v261;
                v229 = v262;
                v231 = v262 + v261;
                if (!(v262 + v261))
                  goto LABEL_205;
              }
              else if (v228 != 4
                     || (pas_segregated_partial_view_compute_summary(v227 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v261),
                         v230 = v261,
                         v229 = v262,
                         (v231 = v262 + v261) == 0))
              {
LABEL_205:
                v215 = v12;
                v216 = " ";
LABEL_206:
                pas_stream_printf(v215, (uint64_t)v216, v30, v31, v32, v33, v34, v35, v252);
                continue;
              }
              if (v230)
              {
                v232 = 10 * v229;
                if (v229 && v232 < v231)
                {
                  v215 = v12;
                  v216 = "e";
                  goto LABEL_206;
                }
                pas_stream_printf(v12, (uint64_t)"%lu", v30, v31, v32, v33, v34, v35, v232 / v231);
              }
              else
              {
                pas_stream_printf(v12, (uint64_t)"%s", v30, v31, v32, v33, v34, v35, (uint64_t)"F");
              }
            }
            v217 = 1;
LABEL_218:
            if (j + 1 >= v217)
              goto LABEL_18;
            goto LABEL_219;
          }
          v200 = 10 * v87;
          if (v87 && v200 < v89)
          {
            v90 = "e";
          }
          else
          {
            v252 = v200 / v89;
            v90 = "%lu";
          }
LABEL_203:
          pas_stream_printf(v12, (uint64_t)v90, v30, v31, v32, v33, v34, v35, v252);
          goto LABEL_204;
        }
        pas_segregated_shared_view_compute_summary();
        v88 = v261;
        v87 = v262;
        v89 = v262 + v261;
        if (v262 + v261)
          goto LABEL_159;
      }
LABEL_44:
      v90 = " ";
      goto LABEL_203;
    }
  }
LABEL_18:
  pas_stream_printf(v12, (uint64_t)"\n", v30, v31, v32, v33, v34, v35, v252);
  if (((*((unsigned __int16 *)a2 + 6) | (*((unsigned __int8 *)a2 + 14) << 16)) & 0xFF0000) == 0x10000)
  {
    v44 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *((_WORD *)a2 + 6));
    v45 = *(_QWORD *)(v44 + 128);
    v46 = *(_BYTE *)(v44 + 28);
    v47 = *(_QWORD *)(v44 + 144);
    pas_stream_printf(v12, (uint64_t)"%s        Bump: ", v38, v39, v40, v41, v42, v43, a3);
    v54 = *a2;
    if (v54 >= 8)
      v55 = pas_compact_heap_reservation_base;
    else
      v55 = 0;
    if (v55 + v54)
    {
      v180 = a2[1];
      if (!(_DWORD)v180 || (v181 = pas_compact_heap_reservation_base + 8 * v180) == 0 || *(_DWORD *)(v181 + 48) != -1)
      {
        v182 = (v45 + (1 << v46) - 1) & -(1 << v46);
        v183 = v47 + v45;
        v184 = v47 + v45 - v182;
        v185 = *(unsigned int *)(((v55 + v54) & 0xFFFFFFFFFFFFFFF8) + 20);
        if ((_DWORD)v185)
        {
          if (v183 != v182)
          {
            if (v183 == v185)
            {
              pas_stream_printf(v12, (uint64_t)"%s", v48, v49, v50, v51, v52, v53, (uint64_t)"F");
            }
            else
            {
              v233 = 10 * (v185 - v182);
              if (v185 != v182 && v233 < v184)
              {
                v186 = "e";
                goto LABEL_246;
              }
              pas_stream_printf(v12, (uint64_t)"%lu", v48, v49, v50, v51, v52, v53, v233 / v184);
            }
LABEL_247:
            for (k = 0; ; ++k)
            {
              v238 = 0;
              v239 = *a2;
              v240 = pas_compact_heap_reservation_base;
              if (v239 >= 8)
                v241 = pas_compact_heap_reservation_base;
              else
                v241 = 0;
              if (!(v241 + v239))
                goto LABEL_261;
              v242 = a2[1];
              v243 = pas_compact_heap_reservation_base + 8 * v242;
              if (!(_DWORD)v242 || v243 == 0)
                break;
              if (k + 1 >= (unint64_t)(*(_DWORD *)(v243 + 48) + 1))
                goto LABEL_23;
LABEL_264:
              v245 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * a2[1] + 44);
              if ((_DWORD)v245)
                v246 = pas_compact_heap_reservation_base + 8 * v245;
              else
                v246 = 0;
              v247 = *(unsigned int *)(v246 + 4 * k);
              if (v247 < 8)
                v240 = 0;
              v248 = *(unsigned int *)(((v240 + v247) & 0xFFFFFFFFFFFFFFF8) + 20);
              if (!(_DWORD)v248)
              {
                v236 = v12;
                v237 = "0";
LABEL_249:
                pas_stream_printf(v236, (uint64_t)v237, v48, v49, v50, v51, v52, v53, v253);
                continue;
              }
              if (v183 == v182)
              {
                v236 = v12;
                v237 = " ";
                goto LABEL_249;
              }
              if (v183 == v248)
              {
                pas_stream_printf(v12, (uint64_t)"%s", v48, v49, v50, v51, v52, v53, (uint64_t)"F");
              }
              else
              {
                v249 = 10 * (v248 - v182);
                if (v248 != v182 && v249 < v184)
                {
                  v236 = v12;
                  v237 = "e";
                  goto LABEL_249;
                }
                pas_stream_printf(v12, (uint64_t)"%lu", v48, v49, v50, v51, v52, v53, v249 / v184);
              }
            }
            v238 = 1;
LABEL_261:
            if (k + 1 >= v238)
              goto LABEL_23;
            goto LABEL_264;
          }
          v186 = " ";
        }
        else
        {
          v186 = "0";
        }
LABEL_246:
        pas_stream_printf(v12, (uint64_t)v186, v48, v49, v50, v51, v52, v53, v253);
        goto LABEL_247;
      }
    }
LABEL_23:
    pas_stream_printf(v12, (uint64_t)"\n", v48, v49, v50, v51, v52, v53, v253);
  }
  pas_stream_printf(v12, (uint64_t)"%s    Eligible: ", v38, v39, v40, v41, v42, v43, a3);
  v62 = *a2;
  if (v62 >= 8)
    v63 = pas_compact_heap_reservation_base;
  else
    v63 = 0;
  if (v63 + v62)
  {
    v91 = a2[1];
    if (!(_DWORD)v91 || (v92 = pas_compact_heap_reservation_base + 8 * v91) == 0 || *(_DWORD *)(v92 + 48) != -1)
    {
      if ((a2[2] & 1) != 0)
        v93 = "x";
      else
        v93 = " ";
      pas_stream_printf(v12, (uint64_t)v93, v56, v57, v58, v59, v60, v61, v254);
      for (m = 0; ; ++m)
      {
        v95 = 0;
        v96 = *a2;
        if (v96 >= 8)
          v97 = pas_compact_heap_reservation_base;
        else
          v97 = 0;
        if (!(v97 + v96))
          goto LABEL_62;
        v98 = a2[1];
        v99 = pas_compact_heap_reservation_base + 8 * v98;
        if (!(_DWORD)v98 || v99 == 0)
          break;
        if (m + 1 >= (*(_DWORD *)(v99 + 48) + 1))
          goto LABEL_28;
LABEL_63:
        v101 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * a2[1] + 32);
        if ((_DWORD)v101)
          v102 = pas_compact_heap_reservation_base + 8 * v101;
        else
          v102 = 0;
        v103 = *(unsigned int *)(v102 + ((m >> 5) & 0x7FFFFFFFFFFFFFCLL));
        v104 = pas_compact_heap_reservation_base + 8 * v103;
        if (!(_DWORD)v103)
          v104 = 0;
        if (((*(_DWORD *)(v104 + 8 * ((m >> 5) & 3)) >> m) & 1) != 0)
          v105 = "x";
        else
          v105 = " ";
        pas_stream_printf(v12, (uint64_t)v105, v56, v57, v58, v59, v60, v61, v254);
      }
      v95 = 1;
LABEL_62:
      if (m + 1 >= v95)
        goto LABEL_28;
      goto LABEL_63;
    }
  }
LABEL_28:
  pas_stream_printf(v12, (uint64_t)"\n", v56, v57, v58, v59, v60, v61, v254);
  pas_stream_printf(v12, (uint64_t)"%s First Elgbl: ", v64, v65, v66, v67, v68, v69, a3);
  v76 = a2[1];
  if (!(_DWORD)v76 || (v77 = (uint64_t *)(pas_compact_heap_reservation_base + 8 * v76)) == 0)
  {
    if ((a2[2] & 1) != 0)
      goto LABEL_77;
    n = *a2 != 0;
    if (!*a2)
      goto LABEL_77;
    goto LABEL_76;
  }
  for (n = *v77; n; --n)
LABEL_76:
    pas_stream_printf(v12, (uint64_t)" ", v70, v71, v72, v73, v74, v75, v255);
LABEL_77:
  pas_stream_printf(v12, (uint64_t)"^", v70, v71, v72, v73, v74, v75, v255);
  pas_stream_printf(v12, (uint64_t)"\n", v106, v107, v108, v109, v110, v111, v256);
  pas_stream_printf(v12, (uint64_t)"%s       Empty: ", v112, v113, v114, v115, v116, v117, a3);
  v124 = *a2;
  if (v124 >= 8)
    v125 = pas_compact_heap_reservation_base;
  else
    v125 = 0;
  if (v125 + v124)
  {
    v141 = a2[1];
    if (!(_DWORD)v141 || (v142 = pas_compact_heap_reservation_base + 8 * v141) == 0 || *(_DWORD *)(v142 + 48) != -1)
    {
      if ((a2[2] & 2) != 0)
        v143 = "x";
      else
        v143 = " ";
      pas_stream_printf(v12, (uint64_t)v143, v118, v119, v120, v121, v122, v123, v257);
      for (ii = 0; ; ++ii)
      {
        v145 = 0;
        v146 = *a2;
        if (v146 >= 8)
          v147 = pas_compact_heap_reservation_base;
        else
          v147 = 0;
        if (!(v147 + v146))
          goto LABEL_102;
        v148 = a2[1];
        v149 = pas_compact_heap_reservation_base + 8 * v148;
        if (!(_DWORD)v148 || v149 == 0)
          break;
        if (ii + 1 >= (*(_DWORD *)(v149 + 48) + 1))
          goto LABEL_81;
LABEL_103:
        v151 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * a2[1] + 32);
        if ((_DWORD)v151)
          v152 = pas_compact_heap_reservation_base + 8 * v151;
        else
          v152 = 0;
        v153 = *(unsigned int *)(v152 + ((ii >> 5) & 0x7FFFFFFFFFFFFFCLL));
        v154 = pas_compact_heap_reservation_base + 8 * v153;
        if (!(_DWORD)v153)
          v154 = 0;
        if (((*(_DWORD *)(v154 + 8 * ((ii >> 5) & 3) + 4) >> ii) & 1) != 0)
          v155 = "x";
        else
          v155 = " ";
        pas_stream_printf(v12, (uint64_t)v155, v118, v119, v120, v121, v122, v123, v257);
      }
      v145 = 1;
LABEL_102:
      if (ii + 1 >= v145)
        goto LABEL_81;
      goto LABEL_103;
    }
  }
LABEL_81:
  pas_stream_printf(v12, (uint64_t)"\n", v118, v119, v120, v121, v122, v123, v257);
  pas_stream_printf(v12, (uint64_t)"%s Last Empt+1: ", v126, v127, v128, v129, v130, v131, a3);
  v138 = a2[1];
  if ((_DWORD)v138 && (v139 = pas_compact_heap_reservation_base + 8 * v138) != 0)
  {
    v140 = *(_QWORD *)(v139 + 16);
    if (!v140)
      goto LABEL_116;
  }
  else
  {
    v140 = ((unint64_t)a2[2] >> 1) & 1;
    if (!v140)
      goto LABEL_116;
  }
  do
  {
    pas_stream_printf(v12, (uint64_t)" ", v132, v133, v134, v135, v136, v137, v258);
    --v140;
  }
  while (v140);
LABEL_116:
  pas_stream_printf(v12, (uint64_t)"^", v132, v133, v134, v135, v136, v137, v258);
  pas_stream_printf(v12, (uint64_t)"\n", v156, v157, v158, v159, v160, v161, v259);
  pas_stream_printf(v12, (uint64_t)"%s   Committed: ", v162, v163, v164, v165, v166, v167, a3);
  v174 = *a2;
  if (v174 >= 8)
    v175 = pas_compact_heap_reservation_base;
  else
    v175 = 0;
  if (v175 + v174)
  {
    v176 = a2[1];
    if (!(_DWORD)v176 || (v177 = pas_compact_heap_reservation_base + 8 * v176) == 0 || *(_DWORD *)(v177 + 48) != -1)
    {
      v178 = v175 + v174;
      switch(v178 & 7)
      {
        case 0:
        case 1:
          if (!*(_BYTE *)((v178 & 0xFFFFFFFFFFFFFFF8) + 11))
            goto LABEL_168;
          goto LABEL_127;
        case 2:
          if ((*(_DWORD *)((v178 & 0xFFFFFFFFFFFFFFF8) + 16) & 0x80000000) == 0)
            goto LABEL_168;
          goto LABEL_127;
        case 3:
          goto LABEL_127;
        case 4:
          if ((*(_DWORD *)(((8 * *(unsigned __int16 *)((v178 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v178 & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
                          + pas_compact_heap_reservation_base
                          + 16) & 0x80000000) == 0)
            goto LABEL_168;
LABEL_127:
          v179 = "x";
          break;
        default:
LABEL_168:
          v179 = " ";
          break;
      }
      pas_stream_printf(v12, (uint64_t)v179, v168, v169, v170, v171, v172, v173, v260);
      for (jj = 0; ; ++jj)
      {
        v203 = 0;
        v204 = *a2;
        if (v204 >= 8)
          v205 = pas_compact_heap_reservation_base;
        else
          v205 = 0;
        if (!(v205 + v204))
          goto LABEL_182;
        v206 = a2[1];
        v207 = pas_compact_heap_reservation_base + 8 * v206;
        if (!(_DWORD)v206 || v207 == 0)
          break;
        if (jj + 1 >= (unint64_t)(*(_DWORD *)(v207 + 48) + 1))
          return (uint64_t (***)(_QWORD, uint64_t, uint64_t *))pas_stream_printf(v12, (uint64_t)"\n", v168, v169, v170, v171, v172, v173, v260);
LABEL_183:
        v209 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * a2[1] + 44);
        if ((_DWORD)v209)
          v210 = pas_compact_heap_reservation_base + 8 * v209;
        else
          v210 = 0;
        v211 = *(unsigned int *)(v210 + 4 * jj);
        if (v211 >= 8)
          v212 = pas_compact_heap_reservation_base;
        else
          v212 = 0;
        v213 = v212 + v211;
        switch(v213 & 7)
        {
          case 0:
          case 1:
            if (*(_BYTE *)((v213 & 0xFFFFFFFFFFFFFFF8) + 11))
              goto LABEL_170;
            goto LABEL_191;
          case 2:
            v202 = " ";
            if ((*(_DWORD *)((v213 & 0xFFFFFFFFFFFFFFF8) + 16) & 0x80000000) != 0)
              goto LABEL_170;
            break;
          case 3:
            goto LABEL_170;
          case 4:
            v202 = " ";
            if ((*(_DWORD *)(((8 * *(unsigned __int16 *)((v213 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v213 & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
                            + pas_compact_heap_reservation_base
                            + 16) & 0x80000000) != 0)
LABEL_170:
              v202 = "x";
            break;
          default:
LABEL_191:
            v202 = " ";
            break;
        }
        pas_stream_printf(v12, (uint64_t)v202, v168, v169, v170, v171, v172, v173, v260);
      }
      v203 = 1;
LABEL_182:
      if (jj + 1 >= v203)
        return (uint64_t (***)(_QWORD, uint64_t, uint64_t *))pas_stream_printf(v12, (uint64_t)"\n", v168, v169, v170, v171, v172, v173, v260);
      goto LABEL_183;
    }
  }
  return (uint64_t (***)(_QWORD, uint64_t, uint64_t *))pas_stream_printf(v12, (uint64_t)"\n", v168, v169, v170, v171, v172, v173, v260);
}

uint64_t (***pas_status_reporter_dump_segregated_heap(uint64_t (***a1)(_QWORD, uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(_QWORD, uint64_t, uint64_t *)
{
  uint64_t (***v9)(_QWORD, uint64_t, uint64_t *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (***result)(_QWORD, uint64_t, uint64_t *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t (***v169)(_QWORD, uint64_t, uint64_t *);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;

  v9 = a1;
  v191 = 0;
  v189 = 0u;
  v190 = 0u;
  v187 = 0u;
  v188 = 0u;
  v186 = 0u;
  pas_stream_printf(a1, (uint64_t)"        Segregated Heap %p: ", a3, a4, a5, a6, a7, a8, a2);
  v16 = *(unsigned int *)(a2 + 28);
  v17 = &unk_1ECF57000;
  if (!(_DWORD)v16 || pas_compact_heap_reservation_base == -8 * v16)
  {
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_7;
  }
  else
  {
    pas_stream_printf(v9, (uint64_t)"Has Rare Data", v10, v11, v12, v13, v14, v15, v161);
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_7;
    pas_stream_printf(v9, (uint64_t)"%s", v10, v11, v12, v13, v14, v15, (uint64_t)", ");
  }
  pas_stream_printf(v9, (uint64_t)"Has Index Lookup", v10, v11, v12, v13, v14, v15, v161);
LABEL_7:
  pas_stream_printf(v9, (uint64_t)": ", v10, v11, v12, v13, v14, v15, v161);
  pas_segregated_heap_compute_summary(a2, (uint64_t)&v186);
  v24 = 0.0;
  if ((_QWORD)v188 + *((_QWORD *)&v187 + 1))
    v24 = (double)(unint64_t)(v187 + *((_QWORD *)&v186 + 1))
        * 100.0
        / (double)(unint64_t)(v188 + *((_QWORD *)&v187 + 1));
  v25 = v191;
  pas_stream_printf(v9, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    *(uint64_t *)&v24);
  if (v25)
    pas_stream_printf(v9, (uint64_t)"; Cached: %zu", v26, v27, v28, v29, v30, v31, v25);
  result = (uint64_t (***)(_QWORD, uint64_t, uint64_t *))pas_stream_printf(v9, (uint64_t)"\n", v26, v27, v28, v29, v30, v31, v162);
  v39 = pas_compact_heap_reservation_base;
  v168 = a2;
  if (pas_status_reporter_enabled >= 3)
  {
    v40 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v40)
    {
      v41 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v40);
      if (v41)
      {
        v169 = v9;
        while (1)
        {
          pas_stream_printf(v9, (uint64_t)"            Global Size Dir %p(%u/%s): Num Views: %zu", v33, v34, v35, v36, v37, v38, (uint64_t)v41);
          v48 = v41[1];
          v49 = v17[317];
          if ((_DWORD)v48 && v49 != -8 * v48)
          {
            pas_stream_printf(v9, (uint64_t)", Has Base Data", v42, v43, v44, v45, v46, v47, v163);
            v49 = v17[317];
          }
          v50 = v41[10];
          if ((_DWORD)v50 && v49 != -8 * v50)
            pas_stream_printf(v9, (uint64_t)", Has Data", v42, v43, v44, v45, v46, v47, v163);
          if (v41[9])
            pas_stream_printf(v9, (uint64_t)", Has TLA", v42, v43, v44, v45, v46, v47, v163);
          v51 = v41[10];
          if ((_DWORD)v51)
          {
            v52 = v17[317] + 8 * v51;
            if (v52)
            {
              if (*(_BYTE *)(v52 + 8))
                pas_stream_printf(v9, (uint64_t)", Enabled Exclusives", v42, v43, v44, v45, v46, v47, v163);
            }
          }
          pas_stream_printf(v9, (uint64_t)"\n", v42, v43, v44, v45, v46, v47, v163);
          v178 = 0;
          v179 = 0;
          v171 = 0;
          v172 = 0;
          v174 = 0;
          v175 = 0;
          v176 = 0;
          v177 = 0;
          v183 = 0;
          v184 = 0;
          v180 = 0;
          v181 = 0;
          v173 = 0;
          v170 = 0;
          v182 = 0;
          v59 = 0;
          v185 = 0;
          v60 = 0;
          v61 = 0;
          v62 = 0;
          v63 = 0;
          v64 = 0;
          v65 = *v41;
          if (v65 >= 8)
            v66 = v17[317];
          else
            v66 = 0;
          if (v66 + v65)
          {
            v67 = v41[1];
            if (!(_DWORD)v67 || (v68 = v17[317] + 8 * v67) == 0 || *(_DWORD *)(v68 + 48) != -1)
            {
              v69 = v66 + v65;
              v70 = (v66 + v65) & 7;
              if (v70 < 2)
              {
                pas_segregated_exclusive_view_compute_summary(v69 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v192);
              }
              else if (v70 == 2)
              {
                pas_segregated_shared_view_compute_summary();
              }
              else if (v70 == 4)
              {
                pas_segregated_partial_view_compute_summary(v69 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v192);
              }
              else
              {
                v197 = 0;
                v195 = 0u;
                v196 = 0u;
                v193 = 0u;
                v194 = 0u;
                v192 = 0u;
              }
              v71 = 0;
              v72 = v197;
              if ((v69 & 7) == 4)
                v73 = 0;
              else
                v73 = v197;
              v179 = v73;
              if ((v69 & 7) == 4)
                v74 = 0;
              else
                v74 = *((_QWORD *)&v196 + 1);
              v171 = v74;
              if ((v69 & 7) == 4)
                v75 = 0;
              else
                v75 = v196;
              v174 = v75;
              if ((v69 & 7) == 4)
                v76 = 0;
              else
                v76 = *((_QWORD *)&v195 + 1);
              v172 = v76;
              if ((v69 & 7) == 4)
                v77 = 0;
              else
                v77 = v195;
              v177 = v77;
              if ((v69 & 7) == 4)
                v78 = 0;
              else
                v78 = *((_QWORD *)&v194 + 1);
              v175 = v78;
              if ((v69 & 7) == 4)
                v79 = 0;
              else
                v79 = v194;
              v184 = v79;
              if ((v69 & 7) == 4)
                v80 = 0;
              else
                v80 = *((_QWORD *)&v193 + 1);
              v178 = v80;
              if ((v69 & 7) == 4)
                v81 = 0;
              else
                v81 = v193;
              v181 = v81;
              if ((v69 & 7) == 4)
                v82 = 0;
              else
                v82 = *((_QWORD *)&v192 + 1);
              v176 = v82;
              if ((v69 & 7) == 4)
                v83 = 0;
              else
                v83 = v192;
              v173 = v83;
              if ((v69 & 7) != 4)
                v72 = 0;
              v180 = v72;
              if ((v69 & 7) == 4)
                v84 = *((_QWORD *)&v196 + 1);
              else
                v84 = 0;
              v170 = v84;
              if ((v69 & 7) == 4)
                v85 = v196;
              else
                v85 = 0;
              if ((v69 & 7) == 4)
                v59 = *((_QWORD *)&v195 + 1);
              else
                v59 = 0;
              if ((v69 & 7) == 4)
                v86 = v195;
              else
                v86 = 0;
              v182 = v85;
              v183 = v86;
              if ((v69 & 7) == 4)
                v87 = *((_QWORD *)&v194 + 1);
              else
                v87 = 0;
              v185 = v87;
              if ((v69 & 7) == 4)
                v60 = v194;
              else
                v60 = 0;
              if ((v69 & 7) == 4)
                v61 = *((_QWORD *)&v193 + 1);
              else
                v61 = 0;
              if ((v69 & 7) == 4)
                v62 = v193;
              else
                v62 = 0;
              if ((v69 & 7) == 4)
                v63 = *((_QWORD *)&v192 + 1);
              else
                v63 = 0;
              if ((v69 & 7) == 4)
                v64 = v192;
              else
                v64 = 0;
              while (2)
              {
                v88 = 0;
                v89 = *v41;
                v90 = v17[317];
                if (v89 >= 8)
                  v91 = v17[317];
                else
                  v91 = 0;
                if (v91 + v89)
                {
                  v92 = v41[1];
                  v93 = v90 + 8 * v92;
                  if ((_DWORD)v92)
                    v94 = v93 == 0;
                  else
                    v94 = 1;
                  if (!v94)
                  {
                    if (v71 + 1 >= (unint64_t)(*(_DWORD *)(v93 + 48) + 1))
                    {
LABEL_136:
                      v9 = v169;
                      goto LABEL_137;
                    }
                    goto LABEL_122;
                  }
                  v88 = 1;
                }
                if (v71 + 1 >= v88)
                  goto LABEL_136;
LABEL_122:
                v95 = v17;
                v96 = *(unsigned int *)(v90 + 8 * v41[1] + 44);
                if ((_DWORD)v96)
                  v97 = v90 + 8 * v96;
                else
                  v97 = 0;
                v98 = *(unsigned int *)(v97 + 4 * v71);
                if (v98 < 8)
                  v90 = 0;
                v99 = v90 + v98;
                v100 = (v90 + v98) & 7;
                if (v100 < 2)
                {
                  pas_segregated_exclusive_view_compute_summary(v99 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v192);
                }
                else if (v100 == 2)
                {
                  pas_segregated_shared_view_compute_summary();
                }
                else if (v100 == 4)
                {
                  pas_segregated_partial_view_compute_summary(v99 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v192);
                }
                else
                {
                  v197 = 0;
                  v195 = 0u;
                  v196 = 0u;
                  v193 = 0u;
                  v194 = 0u;
                  v192 = 0u;
                }
                if ((v99 & 7) == 4)
                {
                  v64 += v192;
                  v63 += *((_QWORD *)&v192 + 1);
                  v62 += v193;
                  v61 += *((_QWORD *)&v193 + 1);
                  v60 += v194;
                  v185 += *((_QWORD *)&v194 + 1);
                  v59 += *((_QWORD *)&v195 + 1);
                  v182 += v196;
                  v183 += v195;
                  v170 += *((_QWORD *)&v196 + 1);
                  v180 += v197;
                }
                else
                {
                  v173 += v192;
                  v181 += v193;
                  v184 += v194;
                  v175 += *((_QWORD *)&v194 + 1);
                  v176 += *((_QWORD *)&v192 + 1);
                  v177 += v195;
                  v178 += *((_QWORD *)&v193 + 1);
                  v174 += v196;
                  v171 += *((_QWORD *)&v196 + 1);
                  v172 += *((_QWORD *)&v195 + 1);
                  v179 += v197;
                }
                v17 = v95;
                ++v71;
                continue;
              }
            }
            v178 = 0;
            v179 = 0;
            v171 = 0;
            v172 = 0;
            v174 = 0;
            v175 = 0;
            v176 = 0;
            v177 = 0;
            v183 = 0;
            v184 = 0;
            v180 = 0;
            v181 = 0;
            v173 = 0;
            v170 = 0;
            v182 = 0;
            v59 = 0;
            v185 = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
          }
LABEL_137:
          if (v64 || v63 || v62 || v61 || v60 || v185 || v183 || v59 || v182 || v170 || v180)
          {
            pas_stream_printf(v9, (uint64_t)"                Partials: ", v53, v54, v55, v56, v57, v58, v164);
            v107 = 0.0;
            if (v61 + v60)
              v107 = (double)(unint64_t)(v63 + v62) * 100.0 / (double)(unint64_t)(v61 + v60);
            pas_stream_printf(v9, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
              v101,
              v102,
              v103,
              v104,
              v105,
              v106,
              *(uint64_t *)&v107);
            if (v180)
              pas_stream_printf(v9, (uint64_t)"; Cached: %zu", v108, v109, v110, v111, v112, v113, v180);
            pas_stream_printf(v9, (uint64_t)"\n", v108, v109, v110, v111, v112, v113, v165);
          }
          if (v173 || v176 || v181 || v178 || v184 || v175 || v177 || v172 || v174 || v171 || v179)
          {
            pas_stream_printf(v9, (uint64_t)"                Exclusives: ", v53, v54, v55, v56, v57, v58, v164);
            v120 = 0.0;
            if (v178 + v184)
              v120 = (double)(unint64_t)(v176 + v181) * 100.0 / (double)(unint64_t)(v178 + v184);
            pas_stream_printf(v9, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
              v114,
              v115,
              v116,
              v117,
              v118,
              v119,
              *(uint64_t *)&v120);
            if (v179)
              pas_stream_printf(v9, (uint64_t)"; Cached: %zu", v121, v122, v123, v124, v125, v126, v179);
            pas_stream_printf(v9, (uint64_t)"\n", v121, v122, v123, v124, v125, v126, v166);
          }
          result = report_segregated_directory_contents(v9, v41, (uint64_t)"                ", v54, v55, v56, v57, v58);
          v127 = v41[11];
          v39 = v17[317];
          if ((_DWORD)v127)
          {
            v41 = (unsigned int *)(v39 + 8 * v127);
            if (v41)
              continue;
          }
          break;
        }
      }
    }
  }
  v128 = *(unsigned int *)(v168 + 32);
  if ((_DWORD)v128)
  {
    v129 = v39 + 8 * v128;
    if (v129)
    {
      pas_stream_printf(v9, (uint64_t)"        Bitfit Heap %p: ", v33, v34, v35, v36, v37, v38, v39 + 8 * v128);
      pas_bitfit_heap_compute_summary(v129, (uint64_t)&v192);
      v136 = 0.0;
      if ((_QWORD)v194 + *((_QWORD *)&v193 + 1))
        v136 = (double)(unint64_t)(v193 + *((_QWORD *)&v192 + 1))
             * 100.0
             / (double)(unint64_t)(v194 + *((_QWORD *)&v193 + 1));
      pas_stream_printf(v9, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
        v130,
        v131,
        v132,
        v133,
        v134,
        v135,
        *(uint64_t *)&v136);
      if (v197)
        pas_stream_printf(v9, (uint64_t)"; Cached: %zu", v137, v138, v139, v140, v141, v142, v197);
      result = (uint64_t (***)(_QWORD, uint64_t, uint64_t *))pas_stream_printf(v9, (uint64_t)"\n", v137, v138, v139, v140, v141, v142, v167);
      if (pas_status_reporter_enabled >= 3)
      {
        pas_status_reporter_dump_bitfit_directory(v9, v129, v143, v144, v145, v146, v147, v148);
        pas_status_reporter_dump_bitfit_directory(v9, v129 + 128, v149, v150, v151, v152, v153, v154);
        return pas_status_reporter_dump_bitfit_directory(v9, v129 + 256, v155, v156, v157, v158, v159, v160);
      }
    }
  }
  return result;
}

uint64_t dump_all_heaps_heap_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (***v10)(_QWORD, uint64_t, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(__int128 *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[8];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _QWORD v97[3];

  v10 = *(uint64_t (****)(_QWORD, uint64_t, uint64_t *))a2;
  v11 = pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F];
  pas_stream_printf(*(uint64_t (****)(_QWORD, uint64_t, uint64_t *))a2, (uint64_t)"    Heap %p:\n", a3, a4, a5, a6, a7, a8, a1);
  v18 = *(_BYTE *)(a1 + 83) & 0x3F;
  if (v18 > 3)
    v19 = 0;
  else
    v19 = off_1E35BEE08[v18];
  pas_stream_printf(v10, (uint64_t)"        %s, ", v12, v13, v14, v15, v16, v17, (uint64_t)v19);
  (*(void (**)(_QWORD, uint64_t (***)(_QWORD, uint64_t, uint64_t *)))(v11 + 40))(*(_QWORD *)(a1 + 64), v10);
  pas_stream_printf(v10, (uint64_t)"\n", v20, v21, v22, v23, v24, v25, v80);
  pas_heap_compute_summary(a1, 1, (uint64_t)v85);
  pas_stream_printf(v10, (uint64_t)"        Total Summary: ", v26, v27, v28, v29, v30, v31, v81);
  v38 = v90;
  v39 = 0.0;
  if (v89 + v88)
    v39 = (double)(unint64_t)(v87 + v86) * 100.0 / (double)(unint64_t)(v89 + v88);
  pas_stream_printf(v10, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    *(uint64_t *)&v39);
  if (v38)
    pas_stream_printf(v10, (uint64_t)"; Cached: %zu", v40, v41, v42, v43, v44, v45, v38);
  pas_stream_printf(v10, (uint64_t)"\n", v40, v41, v42, v43, v44, v45, v82);
  pas_status_reporter_dump_segregated_heap(v10, a1, v46, v47, v48, v49, v50, v51);
  pas_stream_printf(v10, (uint64_t)"        ", v52, v53, v54, v55, v56, v57, v83);
  pas_stream_printf(v10, (uint64_t)"Large %p: ", v58, v59, v60, v61, v62, v63, a1 + 40);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v96 = 0;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v91 = 0u;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v97[0] = a1 + 40;
  v97[1] = compute_summary_live_object_callback;
  v97[2] = &v91;
  pas_large_map_for_each_entry((uint64_t (*)(_QWORD *, uint64_t))for_each_live_object_entry_callback, (uint64_t)v97);
  if (*(_BYTE *)(pas_heap_config_kind_for_config_table[*(_BYTE *)(a1 + 83) & 0x3F] + 1024))
    v64 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback;
  else
    v64 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback_without_physical_sharing;
  pas_fast_large_free_heap_for_each_free(a1 + 40, v64, (uint64_t)&v91);
  v71 = 0.0;
  if ((_QWORD)v93 + *((_QWORD *)&v92 + 1))
    v71 = (double)(unint64_t)(v92 + *((_QWORD *)&v91 + 1))
        * 100.0
        / (double)(unint64_t)(v93 + *((_QWORD *)&v92 + 1));
  v72 = v96;
  pas_stream_printf(v10, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
    v65,
    v66,
    v67,
    v68,
    v69,
    v70,
    *(uint64_t *)&v71);
  if (v72)
    pas_stream_printf(v10, (uint64_t)"; Cached: %zu", v73, v74, v75, v76, v77, v78, v72);
  pas_stream_printf(v10, (uint64_t)"\n", v73, v74, v75, v76, v77, v78, v84);
  ++*(_QWORD *)(a2 + 8);
  return 1;
}

uint64_t dump_large_sharing_pool_node_callback(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;

  pas_stream_printf(a2, (uint64_t)"        %p...%p: %s, %zu/%zu live (%.0lf%%), %llu", a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 16));
  v16 = *(_DWORD *)(a1 + 12);
  if ((v16 & 2) == 0)
  {
    pas_stream_printf(a2, (uint64_t)", %s", v10, v11, v12, v13, v14, v15, (uint64_t)"locked_by_heap_lock");
    v16 = *(_DWORD *)(a1 + 12);
  }
  if ((v16 & 4) == 0)
    pas_stream_printf(a2, (uint64_t)", %s", v10, v11, v12, v13, v14, v15, (uint64_t)"may_not_mmap");
  pas_stream_printf(a2, (uint64_t)"\n", v10, v11, v12, v13, v14, v15, v18);
  return 1;
}

uint64_t total_fragmentation_size_directory_callback(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v2 = *a1;
  if (v2 >= 8)
    v3 = pas_compact_heap_reservation_base;
  else
    v3 = 0;
  if (v3 + v2)
  {
    v7 = a1[1];
    v8 = pas_compact_heap_reservation_base + 8 * v7;
    v9 = !(_DWORD)v7 || v8 == 0;
    if (v9 || *(_DWORD *)(v8 + 48) != -1)
    {
      v10 = v3 + v2;
      v11 = (v3 + v2) & 7;
      if (v11 < 2)
      {
        pas_segregated_exclusive_view_compute_summary(v10 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v31);
        v12 = v35 + *((_QWORD *)&v33 + 1);
        v13 = a2 + 2056;
        if ((v10 & 6) == 0)
          goto LABEL_21;
      }
      else if (v11 == 2)
      {
        pas_segregated_shared_view_compute_summary();
        v12 = v35 + *((_QWORD *)&v33 + 1);
        v13 = a2 + 2056;
        if ((v10 & 6) == 0)
          goto LABEL_21;
      }
      else if (v11 == 4)
      {
        pas_segregated_partial_view_compute_summary(v10 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v31);
        v12 = v35 + *((_QWORD *)&v33 + 1);
        v13 = a2 + 2056;
        if ((v10 & 6) == 0)
          goto LABEL_21;
      }
      else
      {
        v36 = 0;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v31 = 0u;
        v12 = 0;
        v13 = a2 + 2056;
        if ((v10 & 6) == 0)
        {
LABEL_21:
          *(_QWORD *)(a2 + 4112) += v12;
          v13 = a2;
        }
      }
      v14 = 0;
      v15 = 8 * (((unint64_t)a1[6] >> 8) & 0x7FFFF);
      *(_QWORD *)(v13 + v15) += v12;
      while (1)
      {
        v17 = 0;
        v18 = *a1;
        v19 = pas_compact_heap_reservation_base;
        if (v18 >= 8)
          v20 = pas_compact_heap_reservation_base;
        else
          v20 = 0;
        if (!(v20 + v18))
          goto LABEL_34;
        v21 = a1[1];
        v22 = pas_compact_heap_reservation_base + 8 * v21;
        if (!(_DWORD)v21 || v22 == 0)
          break;
        if (v14 + 1 >= (unint64_t)(*(_DWORD *)(v22 + 48) + 1))
          return 1;
LABEL_35:
        v24 = *(unsigned int *)(pas_compact_heap_reservation_base + 8 * a1[1] + 44);
        if ((_DWORD)v24)
          v25 = pas_compact_heap_reservation_base + 8 * v24;
        else
          v25 = 0;
        v26 = *(unsigned int *)(v25 + 4 * v14);
        if (v26 < 8)
          v19 = 0;
        v27 = v19 + v26;
        v28 = (v19 + v26) & 7;
        if (v28 < 2)
        {
          pas_segregated_exclusive_view_compute_summary(v27 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v31);
          v29 = v35 + *((_QWORD *)&v33 + 1);
          v30 = a2 + 2056;
          if ((v27 & 6) != 0)
            goto LABEL_23;
        }
        else if (v28 == 2)
        {
          pas_segregated_shared_view_compute_summary();
          v29 = v35 + *((_QWORD *)&v33 + 1);
          v30 = a2 + 2056;
          if ((v27 & 6) != 0)
            goto LABEL_23;
        }
        else if (v28 == 4)
        {
          pas_segregated_partial_view_compute_summary(v27 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v31);
          v29 = v35 + *((_QWORD *)&v33 + 1);
          v30 = a2 + 2056;
          if ((v27 & 6) != 0)
            goto LABEL_23;
        }
        else
        {
          v36 = 0;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v31 = 0u;
          v29 = 0;
          v30 = a2 + 2056;
          if ((v27 & 6) != 0)
            goto LABEL_23;
        }
        *(_QWORD *)(a2 + 4112) += v29;
        v30 = a2;
LABEL_23:
        v16 = 8 * (((unint64_t)a1[6] >> 8) & 0x7FFFF);
        *(_QWORD *)(v30 + v16) += v29;
        ++v14;
      }
      v17 = 1;
LABEL_34:
      if (v14 + 1 >= v17)
        return 1;
      goto LABEL_35;
    }
  }
  return 1;
}

uint64_t start_reporter()
{
  pthread_t v1;

  v1 = 0;
  pthread_create(&v1, 0, (void *(__cdecl *)(void *))status_reporter_thread_main, 0);
  return pthread_detach(v1);
}

void status_reporter_thread_main()
{
  unint64_t StatusReg;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t i;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  int32x4_t v218;
  uint64_t v219;
  int32x4_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unsigned int *v231;
  unsigned int *v232;
  uint64_t v233;
  unint64_t v234;
  unsigned int *v235;
  uint64_t v236;
  unsigned int v237;
  unint64_t v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  double v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  double v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int *v348;
  uint64_t v349;
  uint64_t (*v351)(__int128 *, uint64_t);
  uint64_t v352;
  unsigned int *v353;
  uint64_t v354;
  uint64_t (*v356)(__int128 *, uint64_t);
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int *v361;
  BOOL v362;
  uint64_t v363;
  uint64_t (*v365)(__int128 *, uint64_t);
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int *v369;
  BOOL v370;
  uint64_t v371;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  __int128 *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _DWORD *v448;
  uint64_t v449;
  BOOL v450;
  uint64_t v451;
  BOOL v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  BOOL v463;
  uint64_t v464;
  _DWORD *v465;
  BOOL v466;
  uint64_t v467;
  BOOL v468;
  uint64_t v469;
  BOOL v470;
  uint64_t v471;
  _DWORD *v472;
  uint64_t v473;
  BOOL v474;
  uint64_t v475;
  BOOL v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  _QWORD *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  int *v560;
  const char *v561;
  int v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t j;
  int v571;
  unsigned int v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  int *v587;
  const char *v588;
  int v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  uint64_t (**v624[2])(_QWORD, uint64_t, uint64_t *);
  int64x2_t v625;
  int64x2_t *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int64x2_t v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  uint64_t v644;

  MEMORY[0x1E0C80A78]();
  v624[0] = (uint64_t (**)(_QWORD, uint64_t, uint64_t *))&pas_fd_stream_functions;
  v624[1] = (uint64_t (**)(_QWORD, uint64_t, uint64_t *))1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v623 = StatusReg;
  while (1)
  {
LABEL_3:
    while (1)
    {
      usleep(0x989680u);
      if (pas_status_reporter_enabled != 1)
        break;
      v1 = getpid();
      pas_stream_printf(v624, (uint64_t)"%d: Num Heaps: %zu\n", v2, v3, v4, v5, v6, v7, v1);
    }
    v8 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v8, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_9;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_9:
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v10 = getpid();
    pas_stream_printf(v624, (uint64_t)"%d: Heap Status:\n", v11, v12, v13, v14, v15, v16, v10);
    v630 = (unint64_t)v624;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    if (dump_all_heaps_heap_callback((uint64_t)&bmalloc_common_primitive_heap, (uint64_t)&v630, v17, v18, v19, v20, v21, v22))
    {
      if (dump_all_heaps_heap_callback((uint64_t)&jit_common_primitive_heap, (uint64_t)&v630, v23, v24, v25, v26, v27, v28))
      {
        os_unfair_lock_assert_owner(&pas_heap_lock);
        v29 = pas_all_heaps_first_heap;
        if (pas_all_heaps_first_heap)
        {
          do
          {
            if (!dump_all_heaps_heap_callback(v29, (uint64_t)&v630, v23, v24, v25, v26, v27, v28))
              break;
            v30 = *(unsigned __int16 *)(v29 + 80) | ((unint64_t)*(unsigned __int8 *)(v29 + 82) << 16);
            v29 = pas_compact_heap_reservation_base + 8 * v30;
          }
          while (v30 && v29 != 0);
        }
      }
    }
    pas_stream_printf(v624, (uint64_t)"    Num Heaps: %zu\n", v23, v24, v25, v26, v27, v28, *((uint64_t *)&v630 + 1));
    pas_stream_printf(v624, (uint64_t)"    Shared Page Directories:\n", v32, v33, v34, v35, v36, v37, v591);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v44 = (unsigned int *)pas_first_shared_page_directory;
    if (pas_first_shared_page_directory)
    {
      do
      {
        v635 = 0;
        v633 = 0u;
        v634 = 0u;
        v632 = 0u;
        v630 = 0u;
        v631 = 0u;
        pas_stream_printf(v624, (uint64_t)"        Shared Page Dir %p(%s, ", v38, v39, v40, v41, v42, v43, (uint64_t)v44);
        (*(void (**)(uint64_t (***)(_QWORD, uint64_t, uint64_t *), unsigned int *))(*((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + *((unsigned __int8 *)v44 + 12)) + 1) + 1080))(v624, v44);
        v155 = 0;
        v156 = *v44;
        if (v156 >= 8)
          v157 = pas_compact_heap_reservation_base;
        else
          v157 = 0;
        if (v157 + v156)
        {
          v158 = v44[1];
          if ((_DWORD)v158)
          {
            v159 = pas_compact_heap_reservation_base + 8 * v158;
            v155 = 1;
            if (v159)
              v155 = (*(_DWORD *)(v159 + 48) + 1);
          }
          else
          {
            v155 = 1;
          }
        }
        pas_stream_printf(v624, (uint64_t)"): Num Views: %zu, ", v149, v150, v151, v152, v153, v154, v155);
        pas_segregated_directory_compute_summary(v44, (uint64_t)&v630);
        v166 = v635;
        v167 = 0.0;
        if ((_QWORD)v632 + *((_QWORD *)&v631 + 1))
          v167 = (double)(unint64_t)(v631 + *((_QWORD *)&v630 + 1))
               * 100.0
               / (double)(unint64_t)(v632 + *((_QWORD *)&v631 + 1));
        pas_stream_printf(v624, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
          v160,
          v161,
          v162,
          v163,
          v164,
          v165,
          *(uint64_t *)&v167);
        if (v166)
          pas_stream_printf(v624, (uint64_t)"; Cached: %zu", v168, v169, v170, v171, v172, v173, v166);
        pas_stream_printf(v624, (uint64_t)"\n", v168, v169, v170, v171, v172, v173, v602);
        if (pas_status_reporter_enabled >= 3)
          report_segregated_directory_contents(v624, v44, (uint64_t)"            ", v39, v40, v41, v42, v43);
        v44 = (unsigned int *)*((_QWORD *)v44 + 2);
      }
      while (v44);
    }
    pas_stream_printf(v624, (uint64_t)"    All Heaps Non-Utility Segregated Summary: ", v38, v39, v40, v41, v42, v43, v592);
    v635 = 0;
    v633 = 0u;
    v634 = 0u;
    v632 = 0u;
    v630 = 0u;
    v631 = 0u;
    pas_all_heaps_for_each_segregated_directory((unsigned int (*)(uint64_t, uint64_t))compute_total_non_utility_segregated_summary_directory_callback, (uint64_t)&v630);
    v51 = 0.0;
    if ((_QWORD)v632 + *((_QWORD *)&v631 + 1))
      v51 = (double)(unint64_t)(v631 + *((_QWORD *)&v630 + 1))
          * 100.0
          / (double)(unint64_t)(v632 + *((_QWORD *)&v631 + 1));
    pas_stream_printf(v624, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
      v45,
      v46,
      v47,
      v48,
      v49,
      v50,
      *(uint64_t *)&v51);
    if (v635)
      pas_stream_printf(v624, (uint64_t)"; Cached: %zu", v52, v53, v54, v55, v56, v57, v635);
    pas_stream_printf(v624, (uint64_t)"\n", v52, v53, v54, v55, v56, v57, v593);
    pas_stream_printf(v624, (uint64_t)"    All Heaps Non-Utility Bitfit Summary: ", v58, v59, v60, v61, v62, v63, v594);
    v644 = 0;
    v643 = 0u;
    v642 = 0u;
    v641 = 0u;
    v640 = 0u;
    v639 = 0u;
    os_unfair_lock_assert_owner(&pas_heap_lock);
    if (compute_total_non_utility_bitfit_summary_heap_callback((uint64_t)&bmalloc_common_primitive_heap, &v639))
    {
      if (compute_total_non_utility_bitfit_summary_heap_callback((uint64_t)&jit_common_primitive_heap, &v639))
      {
        os_unfair_lock_assert_owner(&pas_heap_lock);
        v70 = pas_all_heaps_first_heap;
        if (pas_all_heaps_first_heap)
        {
          do
          {
            if (!compute_total_non_utility_bitfit_summary_heap_callback(v70, &v639))
              break;
            v71 = *(unsigned __int16 *)(v70 + 80) | ((unint64_t)*(unsigned __int8 *)(v70 + 82) << 16);
            v70 = pas_compact_heap_reservation_base + 8 * v71;
          }
          while (v71 && v70 != 0);
        }
      }
    }
    v73 = 0.0;
    if ((_QWORD)v641 + *((_QWORD *)&v640 + 1))
      v73 = (double)(unint64_t)(v640 + v639.i64[1])
          * 100.0
          / (double)(unint64_t)(v641 + *((_QWORD *)&v640 + 1));
    pas_stream_printf(v624, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      *(uint64_t *)&v73);
    if (v644)
      pas_stream_printf(v624, (uint64_t)"; Cached: %zu", v74, v75, v76, v77, v78, v79, v644);
    pas_stream_printf(v624, (uint64_t)"\n", v74, v75, v76, v77, v78, v79, v595);
    pas_stream_printf(v624, (uint64_t)"    All Heaps Non-Utility Large Summary: ", v80, v81, v82, v83, v84, v85, v596);
    pas_all_heaps_compute_total_non_utility_large_summary(&v625);
    v92 = 0.0;
    if (v628 + v627)
      v92 = (double)((unint64_t)v626->u64 + v625.i64[1]) * 100.0 / (double)(unint64_t)(v628 + v627);
    pas_stream_printf(v624, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
      v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      *(uint64_t *)&v92);
    if (v629)
      pas_stream_printf(v624, (uint64_t)"; Cached: %zu", v93, v94, v95, v96, v97, v98, v629);
    pas_stream_printf(v624, (uint64_t)"\n", v93, v94, v95, v96, v97, v98, v597);
    if (pas_status_reporter_enabled >= 3)
    {
      pas_stream_printf(v624, (uint64_t)"    Large sharing pool contents:\n", v99, v100, v101, v102, v103, v104, v598);
      pas_large_sharing_pool_for_each((uint64_t (*)(unsigned int *, uint64_t))dump_large_sharing_pool_node_callback, (uint64_t)v624, 1);
    }
    pas_stream_printf(v624, (uint64_t)"    Utility Heap:\n", v99, v100, v101, v102, v103, v104, v598);
    pas_status_reporter_dump_segregated_heap(v624, (uint64_t)&pas_utility_segregated_heap, v105, v106, v107, v108, v109, v110);
    if (pas_status_reporter_enabled >= 3)
    {
      pas_stream_printf(v624, (uint64_t)"    Large Map:\n", v111, v112, v113, v114, v115, v116, v599);
      pas_stream_printf(v624, (uint64_t)"        Tiny Map: Num Entries: %u, Num Deleted: %u, Table Size: %u\n", v117, v118, v119, v120, v121, v122, qword_1EE345158);
      pas_stream_printf(v624, (uint64_t)"        Small Fallback Map: Num Entries: %u, Num Deleted: %u, Table Size: %u\n", v123, v124, v125, v126, v127, v128, qword_1ECF57A88);
      pas_stream_printf(v624, (uint64_t)"        Fallback Map: Num Entries: %u, Num Deleted: %u, Table Size: %u\n", v129, v130, v131, v132, v133, v134, qword_1EE345140);
      pas_stream_printf(v624, (uint64_t)"    Baseline Allocators:\n", v135, v136, v137, v138, v139, v140, v600);
      if (pas_baseline_allocator_table)
      {
        v147 = 0;
        for (i = 0; i != 32; ++i)
        {
          v180 = pas_baseline_allocator_table;
          pas_stream_printf(v624, (uint64_t)"         %zu: ", v141, v142, v143, v144, v145, v146, i);
          v187 = *(char *)(v180 + v147 + 13);
          if (v187 > 0x11)
            v188 = 0;
          else
            v188 = off_1E35BEE68[v187];
          pas_stream_printf(v624, (uint64_t)", %s, view = %p, directory = %p, %s", v181, v182, v183, v184, v185, v186, (uint64_t)v188);
          pas_stream_printf(v624, (uint64_t)"\n", v174, v175, v176, v177, v178, v179, v603);
          v147 += 320;
        }
      }
      else
      {
        pas_stream_printf(v624, (uint64_t)"        N/A\n", v141, v142, v143, v144, v145, v146, v601);
      }
      pas_stream_printf(v624, (uint64_t)"    Thread Local Cache Layout:\n", v141, v142, v143, v144, v145, v146, v604);
      v195 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
      if (pas_thread_local_cache_layout_first_segment)
      {
        v196 = *(unsigned int *)pas_thread_local_cache_layout_first_segment;
        v197 = v196 >= 8 ? pas_compact_heap_reservation_base : 0;
        v198 = v197 + v196;
        if (v198)
        {
          v199 = 0;
          do
          {
            v202 = (unsigned int *)((v198 & 0xFFFFFFFFFFFFFFFCLL) + 36);
            if ((v198 & 3) != 0)
              v202 = (unsigned int *)((v198 & 0xFFFFFFFFFFFFFFFCLL) + 32);
            if ((v198 & 3) == 1)
              v202 = (unsigned int *)((v198 & 0xFFFFFFFFFFFFFFFCLL) + 4);
            pas_stream_printf(v624, (uint64_t)"        %u: %s, directory = %p\n", v189, v190, v191, v192, v193, v194, *v202);
            v203 = v195[++v199];
            if (v203 >= 8)
              v204 = pas_compact_heap_reservation_base;
            else
              v204 = 0;
            v198 = v204 + v203;
            if (!v198)
            {
              v195 = (unsigned int *)*((_QWORD *)v195 + 129);
              if (!v195)
                break;
              v199 = 0;
              v200 = *v195;
              if (v200 >= 8)
                v201 = pas_compact_heap_reservation_base;
              else
                v201 = 0;
              v198 = v201 + v200;
            }
          }
          while (v198);
        }
      }
      pas_stream_printf(v624, (uint64_t)"    Thread Local Caches:\n", v189, v190, v191, v192, v193, v194, v605);
      v211 = pas_thread_local_cache_node_first;
      if (pas_thread_local_cache_node_first)
      {
        v212 = 0;
        while (2)
        {
          v213 = *(_QWORD *)(v211 + 24);
          pas_stream_printf(v624, (uint64_t)"        %p(%zu): node = %p\n", v205, v206, v207, v208, v209, v210, v213);
          if (!v213)
            goto LABEL_87;
          v214 = *(unsigned int *)(v213 + 8000);
          if ((_DWORD)v214)
          {
            if (v214 >= 0xC)
            {
              v216 = *(_DWORD *)(v213 + 8000) & 7;
              v217 = v214 - 1;
              v218 = 0uLL;
              v219 = v214 & 0xFFFFFFF8;
              v220 = 0uLL;
              do
              {
                v221 = v213 + 8 * v217;
                v218 = vsubq_s32(v218, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v221 - 8), *(int8x16_t *)(v221 - 8), 8uLL)), (int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v221 - 24), *(int8x16_t *)(v221 - 24), 8uLL)))));
                v220 = vsubq_s32(v220, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v221 - 40), *(int8x16_t *)(v221 - 40), 8uLL)), (int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v221 - 56), *(int8x16_t *)(v221 - 56), 8uLL)))));
                v217 -= 8;
                v219 -= 8;
              }
              while (v219);
              v215 = vaddvq_s32(vaddq_s32(v220, v218));
              if ((v214 & 0xFFFFFFF8) != v214)
                goto LABEL_96;
            }
            else
            {
              LODWORD(v215) = 0;
              v216 = *(_DWORD *)(v213 + 8000);
LABEL_96:
              v222 = v216 - 1;
              do
              {
                if (*(_QWORD *)(v213 + 8 * v222))
                  v215 = (v215 + 1);
                else
                  v215 = v215;
              }
              while ((unint64_t)v222--);
            }
          }
          else
          {
            v215 = 0;
          }
          pas_stream_printf(v624, (uint64_t)"            Deallocation logged objects = %u\n", v205, v206, v207, v208, v209, v210, v215);
          v224 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
          if (pas_thread_local_cache_layout_first_segment)
          {
            v225 = *(unsigned int *)pas_thread_local_cache_layout_first_segment;
            v226 = pas_compact_heap_reservation_base;
            v227 = v225 >= 8 ? pas_compact_heap_reservation_base : 0;
            v228 = v227 + v225;
            if (v228)
            {
              v229 = 0;
              do
              {
                v230 = v228 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v228 & 3) == 1)
                {
                  v233 = *(unsigned int *)(v230 + 4);
                  if (v233 >= *(_DWORD *)(v213 + 8052))
                    break;
                }
                else
                {
                  v231 = (unsigned int *)(v230 + 32);
                  v232 = (unsigned int *)(v230 + 36);
                  if ((v228 & 3) != 0)
                    v232 = v231;
                  v233 = *v232;
                  if (v233 >= *(_DWORD *)(v213 + 8052))
                    break;
                }
                if ((v228 & 3) == 1)
                {
                  v234 = ((8 * *(unsigned __int16 *)(v228 & 0xFFFFFFFFFFFFFFFCLL)) | ((unint64_t)*(unsigned __int8 *)((v228 & 0xFFFFFFFFFFFFFFFCLL) + 2) << 19))
                       + v226;
                  v236 = *(unsigned int *)((v228 & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  v237 = *(unsigned __int8 *)(v234 + 12);
                  if ((v228 & 2) != 0)
                    goto LABEL_134;
                }
                else
                {
                  v234 = v228 & 0xFFFFFFFFFFFFFFFCLL;
                  if ((v228 & 3) != 0)
                    v235 = (unsigned int *)((v228 & 0xFFFFFFFFFFFFFFFCLL) + 32);
                  else
                    v235 = (unsigned int *)((v228 & 0xFFFFFFFFFFFFFFFCLL) + 36);
                  v236 = *v235;
                  v237 = *(unsigned __int8 *)(v234 + 12);
                  if ((v228 & 2) != 0)
                  {
LABEL_134:
                    if (v237 && *((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + v237) + 172))
                    {
                      v239 = (3
                            * (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)(v234 + 16) + 24))(*(_DWORD *)(v234 + 24) & 0x7FFFFFF)
                            + 15) >> 3;
                      LOBYTE(v240) = pas_page_malloc_cached_alignment_shift;
                      if (!pas_page_malloc_cached_alignment_shift)
                        goto LABEL_124;
                    }
                    else
                    {
                      v239 = 1;
                      LOBYTE(v240) = pas_page_malloc_cached_alignment_shift;
                      if (!pas_page_malloc_cached_alignment_shift)
                        goto LABEL_124;
                    }
                    goto LABEL_125;
                  }
                }
                if (v237)
                {
                  v238 = *((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v237) + 15) + 63;
                  if ((v238 & 0xFFFFFFFFFFFFFFC0) <= 0x80)
                    v239 = 9;
                  else
                    v239 = ((v238 >> 3) + 56) >> 3;
                  LOBYTE(v240) = pas_page_malloc_cached_alignment_shift;
                  if (!pas_page_malloc_cached_alignment_shift)
                  {
LABEL_124:
                    v240 = pas_page_malloc_alignment_shift_slow();
                    pas_page_malloc_cached_alignment_shift = v240;
                  }
                }
                else
                {
                  v239 = 9;
                  LOBYTE(v240) = pas_page_malloc_cached_alignment_shift;
                  if (!pas_page_malloc_cached_alignment_shift)
                    goto LABEL_124;
                }
LABEL_125:
                v241 = (unint64_t)(8 * v236 + 8064) >> v240;
                v242 = (8 * (unint64_t)(v239 + v236) + 8063) >> v240;
                if (v241 <= v242)
                {
                  v251 = *(_QWORD *)(v213 + 8032);
                  if (((*(_DWORD *)(v251 + ((v241 >> 3) & 0x1FFFFFFFCLL)) >> v241) & 1) == 0)
                    goto LABEL_149;
                  v252 = v241 + 1;
                  v253 = -(uint64_t)v242;
                  while (v253 + v252 != 1)
                  {
                    v254 = *(_DWORD *)(v251 + ((v252 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v252;
                    ++v252;
                    if ((v254 & 1) == 0)
                      goto LABEL_149;
                  }
                }
                pas_stream_printf(v624, (uint64_t)"            %u: ", v205, v206, v207, v208, v209, v210, v233);
                v249 = v213 + 8064 + 8 * v233;
                v250 = "decommitted";
                switch(*(_BYTE *)(v249 + 3))
                {
                  case 0:
                    goto LABEL_147;
                  case 1:
                    v250 = "stopped_allocator";
                    goto LABEL_147;
                  case 2:
                    pas_stream_printf(v624, (uint64_t)"%s", v243, v244, v245, v246, v247, v248, (uint64_t)"allocator");
                    v261 = *(char *)(v249 + 5);
                    if (v261 > 0x11)
                      v262 = 0;
                    else
                      v262 = off_1E35BEE68[v261];
                    pas_stream_printf(v624, (uint64_t)", %s, view = %p, directory = %p, %s", v255, v256, v257, v258, v259, v260, (uint64_t)v262);
                    goto LABEL_148;
                  case 3:
                    v250 = "stopped_view_cache";
                    goto LABEL_147;
                  case 4:
                    v250 = "view_cache";
                    goto LABEL_147;
                  default:
                    v250 = 0;
LABEL_147:
                    pas_stream_printf(v624, (uint64_t)"%s", v243, v244, v245, v246, v247, v248, (uint64_t)v250);
LABEL_148:
                    pas_stream_printf(v624, (uint64_t)"\n", v263, v264, v265, v266, v267, v268, v607);
                    break;
                }
LABEL_149:
                v269 = v224[++v229];
                v226 = pas_compact_heap_reservation_base;
                if (v269 >= 8)
                  v270 = pas_compact_heap_reservation_base;
                else
                  v270 = 0;
                v228 = v270 + v269;
                if (!v228)
                {
                  v224 = (unsigned int *)*((_QWORD *)v224 + 129);
                  if (!v224)
                    break;
                  v229 = 0;
                  v271 = *v224;
                  if (v271 >= 8)
                    v272 = pas_compact_heap_reservation_base;
                  else
                    v272 = 0;
                  v228 = v272 + v271;
                }
              }
              while (v228);
            }
          }
LABEL_87:
          ++v212;
          v211 = *(_QWORD *)(v211 + 8);
          if (!v211)
            break;
          continue;
        }
      }
      pas_stream_printf(v624, (uint64_t)"    Heap Table: ", v205, v206, v207, v208, v209, v210, v606);
      pas_stream_printf(v624, (uint64_t)"Heap Table Size: %u", v273, v274, v275, v276, v277, v278, pas_heap_table_bump_index);
      pas_stream_printf(v624, (uint64_t)"\n", v279, v280, v281, v282, v283, v284, v608);
      pas_stream_printf(v624, (uint64_t)"    Immortal Heap: ", v285, v286, v287, v288, v289, v290, v609);
      pas_stream_printf(v624, (uint64_t)"Alloc Internal: %zu, External: %zu", v291, v292, v293, v294, v295, v296, pas_immortal_heap_allocated_internal);
      pas_stream_printf(v624, (uint64_t)"\n", v297, v298, v299, v300, v301, v302, v610);
      StatusReg = v623;
    }
    pas_stream_printf(v624, (uint64_t)"    Compact Large Utility Free Heap: ", v111, v112, v113, v114, v115, v116, v599);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v635 = 0;
    v633 = 0u;
    v634 = 0u;
    v632 = 0u;
    v630 = 0u;
    v631 = 0u;
    pas_fast_large_free_heap_for_each_free((uint64_t)&pas_compact_large_utility_free_heap, (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback, (uint64_t)&v630);
    v309 = *((_QWORD *)&v630 + 1) + pas_compact_large_utility_free_heap_num_allocated_object_bytes;
    v310 = *((_QWORD *)&v631 + 1) + pas_compact_large_utility_free_heap_num_allocated_object_bytes;
    *((_QWORD *)&v630 + 1) += pas_compact_large_utility_free_heap_num_allocated_object_bytes;
    *((_QWORD *)&v631 + 1) = v310;
    v311 = v635;
    v312 = 0.0;
    if ((_QWORD)v632 + v310)
      v312 = (double)(unint64_t)(v631 + v309) * 100.0 / (double)(unint64_t)(v632 + v310);
    pas_stream_printf(v624, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
      v303,
      v304,
      v305,
      v306,
      v307,
      v308,
      *(uint64_t *)&v312);
    if (v311)
      pas_stream_printf(v624, (uint64_t)"; Cached: %zu", v313, v314, v315, v316, v317, v318, v311);
    pas_stream_printf(v624, (uint64_t)"\n", v313, v314, v315, v316, v317, v318, v611);
    pas_stream_printf(v624, (uint64_t)"    Large Utility Free Heap: ", v319, v320, v321, v322, v323, v324, v612);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v635 = 0;
    v633 = 0u;
    v634 = 0u;
    v632 = 0u;
    v630 = 0u;
    v631 = 0u;
    pas_fast_large_free_heap_for_each_free((uint64_t)pas_large_utility_free_heap, (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback, (uint64_t)&v630);
    v331 = *((_QWORD *)&v630 + 1) + pas_large_utility_free_heap_num_allocated_object_bytes;
    v332 = *((_QWORD *)&v631 + 1) + pas_large_utility_free_heap_num_allocated_object_bytes;
    *((_QWORD *)&v630 + 1) += pas_large_utility_free_heap_num_allocated_object_bytes;
    *((_QWORD *)&v631 + 1) = v332;
    v333 = v635;
    v334 = 0.0;
    if ((_QWORD)v632 + v332)
      v334 = (double)(unint64_t)(v631 + v331) * 100.0 / (double)(unint64_t)(v632 + v332);
    pas_stream_printf(v624, (uint64_t)"%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)",
      v325,
      v326,
      v327,
      v328,
      v329,
      v330,
      *(uint64_t *)&v334);
    if (v333)
      pas_stream_printf(v624, (uint64_t)"; Cached: %zu", v335, v336, v337, v338, v339, v340, v333);
    pas_stream_printf(v624, (uint64_t)"\n", v335, v336, v337, v338, v339, v340, v613);
    if (pas_status_reporter_enabled >= 3)
      break;
LABEL_298:
    pas_stream_printf(v624, (uint64_t)"    Compact Bootstrap Free Heap: ", v341, v342, v343, v344, v345, v346, v614);
    v495 = qword_1ECF551C0;
    if (qword_1ECF551C0)
    {
      v496 = 0;
      v497 = pas_compact_bootstrap_free_heap + 24 * qword_1ECF551C0 - 24;
      v498 = qword_1ECF551C0 - 1;
      do
      {
        v499 = (_QWORD *)((char *)&bootstrap_free_list + 24 * (--v495 - qword_1ECF551C8));
        if (qword_1ECF551C8 > v498)
          v499 = (_QWORD *)v497;
        v496 = v496 - (*v499 & 0xFFFFFFFFFFFFLL) + (v499[1] & 0xFFFFFFFFFFFFLL);
        v497 -= 24;
        --v498;
      }
      while (v498 != -1);
    }
    pas_stream_printf(v624, (uint64_t)"Alloc: %zu, Peak Alloc: %zu, Mapped: %zu, Free: %zu", v489, v490, v491, v492, v493, v494, pas_compact_bootstrap_free_heap_num_allocated_object_bytes);
    pas_stream_printf(v624, (uint64_t)"\n", v500, v501, v502, v503, v504, v505, v616);
    pas_stream_printf(v624, (uint64_t)"    Bootstrap Free Heap: ", v506, v507, v508, v509, v510, v511, v617);
    v518 = qword_1ECF551A0;
    if (qword_1ECF551A0)
    {
      v519 = 0;
      v520 = pas_bootstrap_free_heap + 24 * qword_1ECF551A0 - 24;
      v521 = qword_1ECF551A0 - 1;
      do
      {
        v522 = (_QWORD *)((char *)&bootstrap_free_list + 24 * (--v518 - qword_1ECF551A8));
        if (qword_1ECF551A8 > v521)
          v522 = (_QWORD *)v520;
        v519 = v519 - (*v522 & 0xFFFFFFFFFFFFLL) + (v522[1] & 0xFFFFFFFFFFFFLL);
        v520 -= 24;
        --v521;
      }
      while (v521 != -1);
    }
    pas_stream_printf(v624, (uint64_t)"Alloc: %zu, Peak Alloc: %zu, Mapped: %zu, Free: %zu", v512, v513, v514, v515, v516, v517, pas_bootstrap_free_heap_num_allocated_object_bytes);
    pas_stream_printf(v624, (uint64_t)"\n", v523, v524, v525, v526, v527, v528, v618);
    pas_stream_printf(v624, (uint64_t)"    Mprotect Decommitted: %s\n", v529, v530, v531, v532, v533, v534, (uint64_t)"no");
    pas_stream_printf(v624, (uint64_t)"    Physical Page Sharing Pool Balance: %ld\n", v535, v536, v537, v538, v539, v540, pas_physical_page_sharing_pool_balance);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    pas_stream_printf(v624, (uint64_t)"    Compact Expendable Memory: ", v541, v542, v543, v544, v545, v546, v619);
    pas_stream_printf(v624, (uint64_t)"Header = %p, Payload = %p...%p, Page States: ", v547, v548, v549, v550, v551, v552, (uint64_t)pas_compact_expendable_memory_header);
    if (LODWORD(pas_compact_expendable_memory_header[0]))
    {
      v559 = ((unint64_t)LODWORD(pas_compact_expendable_memory_header[0]) + 0x3FFF) >> 14;
      v560 = &dword_1ECF551E8;
      do
      {
        v562 = *v560;
        v560 += 2;
        v563 = v562 & 7;
        if (v563 == 1)
        {
          v561 = "I";
        }
        else if (v563)
        {
          v620 = (v563 - 2);
          v561 = "%u";
        }
        else
        {
          v561 = "D";
        }
        pas_stream_printf(v624, (uint64_t)v561, v553, v554, v555, v556, v557, v558, v620);
        --v559;
      }
      while (v559);
    }
    pas_stream_printf(v624, (uint64_t)"\n", v553, v554, v555, v556, v557, v558, v620);
    for (j = pas_large_expendable_memory_head; j; j = *(_QWORD *)j)
    {
      pas_stream_printf(v624, (uint64_t)"    Large Expendable Memory: ", v564, v565, v566, v567, v568, v569, v621);
      pas_stream_printf(v624, (uint64_t)"Header = %p, Payload = %p...%p, Page States: ", v573, v574, v575, v576, v577, v578, j + 8);
      v585 = *(unsigned int *)(j + 8);
      if ((_DWORD)v585)
      {
        v586 = (unint64_t)(v585 + 0x3FFF) >> 14;
        v587 = (int *)(j + 16);
        do
        {
          v589 = *v587;
          v587 += 2;
          v590 = v589 & 7;
          if (v590 == 1)
          {
            v588 = "I";
          }
          else if (v590)
          {
            v622 = (v590 - 2);
            v588 = "%u";
          }
          else
          {
            v588 = "D";
          }
          pas_stream_printf(v624, (uint64_t)v588, v579, v580, v581, v582, v583, v584, v622);
          --v586;
        }
        while (v586);
      }
      pas_stream_printf(v624, (uint64_t)"\n", v579, v580, v581, v582, v583, v584, v622);
    }
    v571 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v572 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v572 != v571)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_3;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
  bzero(&v630, 0x1028uLL);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v347 = 0;
  if (dword_1ECF32488)
  {
    v348 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * dword_1ECF32488);
    if (v348)
    {
      do
      {
        if (!total_fragmentation_size_directory_callback(v348, (uint64_t)&v630))
          break;
        v349 = v348[11];
        v348 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v349);
      }
      while ((_DWORD)v349 && v348 != 0);
      v347 = v638;
    }
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v644 = 0;
  v643 = 0u;
  v642 = 0u;
  v641 = 0u;
  v640 = 0u;
  v639 = 0u;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v625.i64[0] = (uint64_t)&unk_1ECF32498;
  v625.i64[1] = (uint64_t)compute_summary_live_object_callback;
  v626 = &v639;
  pas_large_map_for_each_entry((uint64_t (*)(_QWORD *, uint64_t))for_each_live_object_entry_callback, (uint64_t)&v625);
  if (*(_BYTE *)(pas_heap_config_kind_for_config_table[byte_1ECF324C3 & 0x3F] + 1024))
    v351 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback;
  else
    v351 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback_without_physical_sharing;
  pas_fast_large_free_heap_for_each_free((uint64_t)&unk_1ECF32498, v351, (uint64_t)&v639);
  v352 = v643 + *((_QWORD *)&v641 + 1) + v347;
  v638 = v352;
  if (dword_1EE342890)
  {
    v353 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * dword_1EE342890);
    if (v353)
    {
      do
      {
        if (!total_fragmentation_size_directory_callback(v353, (uint64_t)&v630))
          break;
        v354 = v353[11];
        v353 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v354);
      }
      while ((_DWORD)v354 && v353 != 0);
      v352 = v638;
    }
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v644 = 0;
  v643 = 0u;
  v642 = 0u;
  v641 = 0u;
  v640 = 0u;
  v639 = 0u;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v625.i64[0] = (uint64_t)&unk_1EE3428A0;
  v625.i64[1] = (uint64_t)compute_summary_live_object_callback;
  v626 = &v639;
  pas_large_map_for_each_entry((uint64_t (*)(_QWORD *, uint64_t))for_each_live_object_entry_callback, (uint64_t)&v625);
  if (*(_BYTE *)(pas_heap_config_kind_for_config_table[byte_1EE3428CB & 0x3F] + 1024))
    v356 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback;
  else
    v356 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback_without_physical_sharing;
  pas_fast_large_free_heap_for_each_free((uint64_t)&unk_1EE3428A0, v356, (uint64_t)&v639);
  v357 = v643 + *((_QWORD *)&v641 + 1) + v352;
  v638 = v357;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v358 = pas_all_heaps_first_heap;
  if (pas_all_heaps_first_heap)
  {
    v359 = pas_compact_heap_reservation_base;
    do
    {
      v360 = *(unsigned int *)(v358 + 24);
      v361 = (unsigned int *)(v359 + 8 * v360);
      if ((_DWORD)v360)
        v362 = v361 == 0;
      else
        v362 = 1;
      if (!v362)
      {
        do
        {
          if (!total_fragmentation_size_directory_callback(v361, (uint64_t)&v630))
            break;
          v363 = v361[11];
          v361 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v363);
        }
        while ((_DWORD)v363 && v361 != 0);
      }
      os_unfair_lock_assert_owner(&pas_heap_lock);
      v644 = 0;
      v643 = 0u;
      v642 = 0u;
      v641 = 0u;
      v640 = 0u;
      v639 = 0u;
      os_unfair_lock_assert_owner(&pas_heap_lock);
      v625.i64[0] = v358 + 40;
      v625.i64[1] = (uint64_t)compute_summary_live_object_callback;
      v626 = &v639;
      pas_large_map_for_each_entry((uint64_t (*)(_QWORD *, uint64_t))for_each_live_object_entry_callback, (uint64_t)&v625);
      if (*(_BYTE *)(pas_heap_config_kind_for_config_table[*(_BYTE *)(v358 + 83) & 0x3F] + 1024))
        v365 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback;
      else
        v365 = (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback_without_physical_sharing;
      pas_fast_large_free_heap_for_each_free(v358 + 40, v365, (uint64_t)&v639);
      v357 = v643 + *((_QWORD *)&v641 + 1) + v638;
      v638 = v357;
      v366 = *(unsigned __int16 *)(v358 + 80) | ((unint64_t)*(unsigned __int8 *)(v358 + 82) << 16);
      if (!v366)
        break;
      v359 = pas_compact_heap_reservation_base;
      v358 = pas_compact_heap_reservation_base + 8 * v366;
    }
    while (v358);
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v367 = pas_first_shared_page_directory;
  if (pas_first_shared_page_directory)
  {
    v368 = v637;
    do
    {
      pas_segregated_directory_compute_summary((unsigned int *)v367, (uint64_t)&v639);
      v368 += *((_QWORD *)&v641 + 1) + v643;
      v367 = *(_QWORD *)(v367 + 16);
    }
    while (v367);
    v637 = v368;
  }
  v369 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * dword_1ECF426A0);
  if (dword_1ECF426A0)
    v370 = v369 == 0;
  else
    v370 = 1;
  if (!v370)
  {
    do
    {
      if (!total_fragmentation_size_directory_callback(v369, (uint64_t)&v630))
        break;
      v371 = v369[11];
      v369 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v371);
    }
    while ((_DWORD)v371 && v369 != 0);
    v357 = v638;
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v644 = 0;
  v643 = 0u;
  v642 = 0u;
  v641 = 0u;
  v640 = 0u;
  v639 = 0u;
  pas_fast_large_free_heap_for_each_free((uint64_t)pas_large_utility_free_heap, (uint64_t (*)(__int128 *, uint64_t))pas_compute_summary_dead_object_callback, (uint64_t)&v639);
  v639.i64[1] += pas_large_utility_free_heap_num_allocated_object_bytes;
  *((_QWORD *)&v640 + 1) += pas_large_utility_free_heap_num_allocated_object_bytes;
  v373 = v643 + *((_QWORD *)&v641 + 1) + v357;
  v638 = v373;
  pas_stream_printf(v624, (uint64_t)"    Segregated Exclusive Fragmentation Histogram:\n", v374, v375, v376, v377, v378, v379, v614);
  v386 = -256;
  v387 = &v630;
  do
  {
    v388 = v386 + 256;
    v389 = *(_QWORD *)v387;
    v387 = (__int128 *)((char *)v387 + 8);
    if (v389)
      pas_stream_printf(v624, (uint64_t)"        %zu..%zu: %zu\n", v380, v381, v382, v383, v384, v385, v388);
    v386 = v388;
  }
  while (v388 < 0xFF01);
  pas_stream_printf(v624, (uint64_t)"    Segregated Partial Fragmentation Histogram:\n", v380, v381, v382, v383, v384, v385, v615);
  v396 = -256;
  v397 = 2056;
  do
  {
    v398 = v396 + 256;
    if (*(_QWORD *)((char *)&v630 + v397))
      pas_stream_printf(v624, (uint64_t)"        %zu..%zu: %zu\n", v390, v391, v392, v393, v394, v395, v398);
    v397 += 8;
    v396 = v398;
  }
  while (v398 < 0xFF01);
  v399 = v636;
  pas_stream_printf(v624, (uint64_t)"    Segregated Exclusive Fragmentation: %zu\n", v390, v391, v392, v393, v394, v395, v636);
  v400 = v637;
  pas_stream_printf(v624, (uint64_t)"    Segregated Shared Fragmentation: %zu\n", v401, v402, v403, v404, v405, v406, v637);
  v407 = v400 + v399;
  pas_stream_printf(v624, (uint64_t)"    Total Segregated Fragmentation: %zu\n", v408, v409, v410, v411, v412, v413, v407);
  pas_stream_printf(v624, (uint64_t)"    Large Fragmentation: %zu\n", v414, v415, v416, v417, v418, v419, v373);
  pas_stream_printf(v624, (uint64_t)"    Total Fragmentation: %zu\n", v420, v421, v422, v423, v424, v425, v407 + v373);
  pas_stream_printf(v624, (uint64_t)"    Number of Partial Views: %zu\n", v426, v427, v428, v429, v430, v431, pas_segregated_partial_view_count);
  pas_stream_printf(v624, (uint64_t)"    Number of Shared Views: %zu\n", v432, v433, v434, v435, v436, v437, pas_segregated_shared_view_count);
  pas_stream_printf(v624, (uint64_t)"    Number of Exclusive Views: %zu\n", v438, v439, v440, v441, v442, v443, pas_segregated_exclusive_view_count);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v444 = 0;
  v445 = 0;
  v446 = 0;
  v447 = 0;
  if (dword_1ECF32488)
  {
    v448 = (_DWORD *)(pas_compact_heap_reservation_base + 8 * dword_1ECF32488);
    if (v448)
    {
      v445 = 0;
      v446 = 0;
      v447 = 0;
      v444 = 0;
      do
      {
        v449 = v448[10];
        if (pas_compact_heap_reservation_base + 8 * v449)
          v450 = v449 == 0;
        else
          v450 = 1;
        if (!v450)
          ++v447;
        if (v448[9])
          ++v446;
        v451 = 8 * v449 + pas_compact_heap_reservation_base;
        if ((_DWORD)v449)
          v452 = v451 == 0;
        else
          v452 = 1;
        if (!v452 && *(_BYTE *)(v451 + 8))
          ++v445;
        ++v444;
        v453 = v448[11];
        if (!(_DWORD)v453)
          break;
        v448 = (_DWORD *)(pas_compact_heap_reservation_base + 8 * v453);
      }
      while (v448);
    }
    v454 = dword_1EE342890;
    if (!dword_1EE342890)
      goto LABEL_255;
  }
  else
  {
    v454 = dword_1EE342890;
    if (!dword_1EE342890)
    {
LABEL_255:
      os_unfair_lock_assert_owner(&pas_heap_lock);
      v461 = pas_all_heaps_first_heap;
      if (pas_all_heaps_first_heap)
      {
        do
        {
          v464 = *(unsigned int *)(v461 + 24);
          v465 = (_DWORD *)(pas_compact_heap_reservation_base + 8 * v464);
          if ((_DWORD)v464)
            v466 = v465 == 0;
          else
            v466 = 1;
          if (!v466)
          {
            do
            {
              v467 = v465[10];
              if (pas_compact_heap_reservation_base + 8 * v467)
                v468 = v467 == 0;
              else
                v468 = 1;
              if (!v468)
                ++v447;
              if (v465[9])
                ++v446;
              v469 = 8 * v467 + pas_compact_heap_reservation_base;
              if ((_DWORD)v467)
                v470 = v469 == 0;
              else
                v470 = 1;
              if (!v470 && *(_BYTE *)(v469 + 8))
                ++v445;
              ++v444;
              v471 = v465[11];
              if (!(_DWORD)v471)
                break;
              v465 = (_DWORD *)(pas_compact_heap_reservation_base + 8 * v471);
            }
            while (v465);
          }
          v462 = *(unsigned __int16 *)(v461 + 80) | ((unint64_t)*(unsigned __int8 *)(v461 + 82) << 16);
          v461 = pas_compact_heap_reservation_base + 8 * v462;
          if (v462)
            v463 = v461 == 0;
          else
            v463 = 1;
        }
        while (!v463);
      }
      pas_stream_printf(v624, (uint64_t)"    %s: %zu/%zu (%.0lf%%)\n", v455, v456, v457, v458, v459, v460, (uint64_t)"Num Size Directories With Data");
      pas_stream_printf(v624, (uint64_t)"    %s: %zu/%zu (%.0lf%%)\n", v477, v478, v479, v480, v481, v482, (uint64_t)"Num Size Directories With TLAs");
      pas_stream_printf(v624, (uint64_t)"    %s: %zu/%zu (%.0lf%%)\n", v483, v484, v485, v486, v487, v488, (uint64_t)"Num Size Directories With Exclusives");
      StatusReg = v623;
      goto LABEL_298;
    }
  }
  do
  {
    v472 = (_DWORD *)(pas_compact_heap_reservation_base + 8 * v454);
    if (!v472)
      break;
    v473 = v472[10];
    if (pas_compact_heap_reservation_base + 8 * v473)
      v474 = v473 == 0;
    else
      v474 = 1;
    if (!v474)
      ++v447;
    if (v472[9])
      ++v446;
    v475 = 8 * v473 + pas_compact_heap_reservation_base;
    if ((_DWORD)v473)
      v476 = v475 == 0;
    else
      v476 = 1;
    if (!v476 && *(_BYTE *)(v475 + 8))
      ++v445;
    ++v444;
    v454 = v472[11];
  }
  while ((_DWORD)v454);
  goto LABEL_255;
}

uint64_t pas_stream_printf(uint64_t (***a1)(_QWORD, uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (**a1)(a1, a2, &a9);
}

unint64_t pas_thread_local_cache_create()
{
  int v0;
  unint64_t cache;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = pas_thread_local_cache_layout_next_allocator_index;
  cache = allocate_cache(pas_thread_local_cache_layout_next_allocator_index);
  *(_QWORD *)(cache + 8016) = pas_thread_local_cache_node_allocate();
  *(_QWORD *)(cache + 8040) = pthread_self();
  *(_DWORD *)(cache + 8052) = v0;
  *(_OWORD *)(cache + 8064) = 0u;
  *(_OWORD *)(cache + 8080) = 0u;
  *(_OWORD *)(cache + 8096) = 0u;
  *(_QWORD *)(cache + 8112) = 0;
  *(_DWORD *)(cache + 8064) = 0x2000000;
  *(_BYTE *)(cache + 8069) = 1;
  v2 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
  if (pas_thread_local_cache_layout_first_segment)
  {
    v3 = *(unsigned int *)pas_thread_local_cache_layout_first_segment;
    v4 = pas_compact_heap_reservation_base;
    if (v3 < 8)
      v4 = 0;
    v5 = v4 + v3;
    if (v4 + v3)
    {
      v6 = 0;
      do
      {
        pas_thread_local_cache_layout_node_commit_and_construct(v5, cache);
        v9 = v2[++v6];
        v8 = pas_compact_heap_reservation_base;
        if (v9 >= 8)
          v10 = pas_compact_heap_reservation_base;
        else
          v10 = 0;
        v5 = v10 + v9;
        if (!(v10 + v9))
        {
          v2 = (unsigned int *)*((_QWORD *)v2 + 129);
          if (!v2)
            break;
          v6 = 0;
          v7 = *v2;
          if (v7 < 8)
            v8 = 0;
          v5 = v8 + v7;
        }
      }
      while (v5);
    }
  }
  *(_QWORD *)(*(_QWORD *)(cache + 8016) + 24) = cache;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752) = cache;
  return cache;
}

unint64_t allocate_cache(int a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;

  v2 = pas_page_malloc_cached_alignment;
  if (pas_page_malloc_cached_alignment)
  {
    v3 = (8 * a1) + 8063;
    v4 = (pas_page_malloc_cached_alignment + v3) & -pas_page_malloc_cached_alignment;
  }
  else
  {
    v5 = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = v5;
    v3 = (8 * a1) + 8063;
    v4 = (v5 + v3) & -v5;
    if (v5)
    {
      v2 = v5;
    }
    else
    {
      v2 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v2;
    }
  }
  v6 = pas_large_free_heap_helpers_try_allocate_with_alignment(pas_large_utility_free_heap, (uint64_t)pas_bootstrap_free_heap_try_allocate_with_alignment, &pas_large_utility_free_heap_num_allocated_object_bytes, &pas_large_utility_free_heap_num_allocated_object_bytes_peak, v4, v2, 0, (uint64_t)"pas_thread_local_cache");
  bzero((void *)v6, v4);
  v7 = (void *)pas_large_free_heap_helpers_try_allocate_with_alignment(pas_large_utility_free_heap, (uint64_t)pas_bootstrap_free_heap_try_allocate_with_alignment, &pas_large_utility_free_heap_num_allocated_object_bytes, &pas_large_utility_free_heap_num_allocated_object_bytes_peak, ((a1 + 31) >> 3) & 0x1FFFFFFC, 1uLL, 0, (uint64_t)"pas_thread_local_cache/should_stop_bitvector");
  *(_QWORD *)(v6 + 8024) = v7;
  bzero(v7, ((a1 + 31) >> 3) & 0x1FFFFFFC);
  v8 = pas_page_malloc_cached_alignment;
  if (pas_page_malloc_cached_alignment)
  {
    LOBYTE(v9) = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_9;
    goto LABEL_8;
  }
  v8 = pas_page_malloc_alignment_slow();
  pas_page_malloc_cached_alignment = v8;
  LOBYTE(v9) = pas_page_malloc_cached_alignment_shift;
  if (!pas_page_malloc_cached_alignment_shift)
  {
LABEL_8:
    v9 = pas_page_malloc_alignment_shift_slow();
    pas_page_malloc_cached_alignment_shift = v9;
  }
LABEL_9:
  v10 = (void *)pas_large_free_heap_helpers_try_allocate_with_alignment(pas_large_utility_free_heap, (uint64_t)pas_bootstrap_free_heap_try_allocate_with_alignment, &pas_large_utility_free_heap_num_allocated_object_bytes, &pas_large_utility_free_heap_num_allocated_object_bytes_peak, (((((v8 + v3) & (unint64_t)-v8) >> v9) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL, 1uLL, 0, (uint64_t)"pas_thread_local_cache/pages_committed");
  *(_QWORD *)(v6 + 8032) = v10;
  v11 = pas_page_malloc_cached_alignment;
  if (pas_page_malloc_cached_alignment)
  {
    LOBYTE(v12) = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = pas_page_malloc_alignment_slow();
  pas_page_malloc_cached_alignment = v11;
  LOBYTE(v12) = pas_page_malloc_cached_alignment_shift;
  if (!pas_page_malloc_cached_alignment_shift)
  {
LABEL_11:
    v12 = pas_page_malloc_alignment_shift_slow();
    pas_page_malloc_cached_alignment_shift = v12;
  }
LABEL_12:
  bzero(v10, (((((v11 + v3) & (unint64_t)-v11) >> v12) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  v13 = pas_page_malloc_cached_alignment;
  if (pas_page_malloc_cached_alignment)
  {
    v14 = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_14;
LABEL_21:
    pas_page_malloc_cached_alignment_shift = pas_page_malloc_alignment_shift_slow();
    v15 = ((v13 + v3) & (unint64_t)-v13) >> pas_page_malloc_cached_alignment_shift;
    if (!v15)
      goto LABEL_24;
    goto LABEL_22;
  }
  v13 = pas_page_malloc_alignment_slow();
  pas_page_malloc_cached_alignment = v13;
  v14 = pas_page_malloc_cached_alignment_shift;
  if (!pas_page_malloc_cached_alignment_shift)
    goto LABEL_21;
LABEL_14:
  v15 = ((v13 + v3) & (unint64_t)-v13) >> v14;
  if (!v15)
    goto LABEL_24;
LABEL_22:
  v16 = *(_QWORD *)(v6 + 8032);
  do
  {
    --v15;
    *(_DWORD *)(v16 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v15;
  }
  while (v15);
LABEL_24:
  *(_DWORD *)(v6 + 8056) = a1;
  return v6;
}

unint64_t pas_thread_local_cache_get_slow(uint64_t a1, int a2)
{
  unsigned int v4;
  unint64_t v6;
  int v7;
  void (*v8)(void);
  unint64_t result;
  unint64_t v10;
  int v11;
  unsigned int v12;

  if (!a2)
  {
    v4 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v4, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (!pas_thread_local_cache_fast_tls)
  {
    pthread_key_init_np();
    pas_thread_local_cache_fast_tls = 1;
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = *(unsigned int *)(a1 + 8);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v7 = pas_heap_config_kind_is_active_bitvector[v6 >> 5];
  if ((v7 & (1 << v6)) == 0)
  {
    pas_heap_config_kind_is_active_bitvector[v6 >> 5] = v7 | (1 << v6);
    v8 = *(void (**)(void))(a1 + 16);
    if (v8)
      v8();
  }
  result = pas_thread_local_cache_create();
  v10 = result;
  if (!a2)
  {
    v11 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v12 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v12 != v11)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return result;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
    return v10;
  }
  return result;
}

void destructor(unint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t StatusReg;
  unsigned int v10;
  os_unfair_lock_s *v12;
  unsigned int v13;
  os_unfair_lock_s *v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  int v19;
  unsigned int v20;

  if (a1 != 1)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v10, &pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!a1)
          goto LABEL_19;
        goto LABEL_8;
      }
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
    if (!a1)
      goto LABEL_19;
LABEL_8:
    v12 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8016) + 20);
    v13 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v12->_os_unfair_lock_opaque))
    {
      if (!__stxr(v13, &v12->_os_unfair_lock_opaque))
        goto LABEL_13;
    }
    __clrex();
    os_unfair_lock_lock(v12);
LABEL_13:
    flush_deallocation_log_for_scavenger(a1, a2, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 8000) = 0;
    *(_QWORD *)(a1 + 8008) = 0;
    *(_BYTE *)(a1 + 8004) = 1;
    v15 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8016) + 20);
    v16 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v17 = __ldxr(&v15->_os_unfair_lock_opaque);
      if (v17 != v16)
        break;
      if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
        goto LABEL_18;
    }
    __clrex();
    os_unfair_lock_unlock(v15);
LABEL_18:
    pas_thread_local_cache_stop_local_allocators(a1, 1);
LABEL_19:
    v18 = *(_QWORD **)(a1 + 8016);
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v18[3] = 0;
    *v18 = pas_thread_local_cache_node_first_free;
    pas_thread_local_cache_node_first_free = (uint64_t)v18;
    deallocate_0(a1);
    v19 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v20 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v20 != v19)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

uint64_t pas_thread_local_cache_get_local_allocator_slow(unint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  unsigned int v11;
  os_unfair_lock_s *v13;
  unint64_t StatusReg;
  unsigned int v15;
  unsigned int v17;
  unsigned int v18;
  unint64_t cache;
  unsigned int v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  int v47;
  unsigned int v48;
  os_unfair_lock_s *v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;

  v8 = (int)a3;
  v10 = *(_DWORD *)(a1 + 8052);
  pas_thread_local_cache_flush_deallocation_log(a1, (uint64_t)a3, a3, a4, a5, a6, a7, a8);
  if (!v8)
  {
    v11 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v11, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  v13 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8016) + 20);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v15 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v13->_os_unfair_lock_opaque))
  {
    if (!__stxr(v15, &v13->_os_unfair_lock_opaque))
      goto LABEL_12;
  }
  __clrex();
  os_unfair_lock_lock(v13);
LABEL_12:
  v17 = pas_thread_local_cache_layout_next_allocator_index;
  v18 = *(_DWORD *)(a1 + 8056);
  cache = a1;
  if (pas_thread_local_cache_layout_next_allocator_index > v18)
  {
    v20 = 2 * v18;
    if (v20 <= pas_thread_local_cache_layout_next_allocator_index)
      v21 = pas_thread_local_cache_layout_next_allocator_index;
    else
      v21 = v20;
    cache = allocate_cache(v21);
    *(_QWORD *)(cache + 8016) = *(_QWORD *)(a1 + 8016);
    *(_QWORD *)(cache + 8040) = *(_QWORD *)(a1 + 8040);
    *(_DWORD *)(cache + 8052) = *(_DWORD *)(a1 + 8052);
    *(_OWORD *)(cache + 8064) = 0u;
    *(_QWORD *)(cache + 8112) = 0;
    *(_OWORD *)(cache + 8096) = 0u;
    *(_OWORD *)(cache + 8080) = 0u;
    *(_DWORD *)(cache + 8064) = 0x2000000;
    *(_BYTE *)(cache + 8069) = 1;
    v22 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
    if (pas_thread_local_cache_layout_first_segment)
    {
      v23 = *(unsigned int *)pas_thread_local_cache_layout_first_segment;
      v24 = pas_compact_heap_reservation_base;
      if (v23 < 8)
        v24 = 0;
      v25 = v24 + v23;
      if (v24 + v23)
      {
        v26 = 0;
        do
        {
          v29 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 36;
          if ((v25 & 3) != 0)
            v29 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 32;
          v30 = (unsigned int *)((v25 & 3) == 1 ? (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4 : v29);
          if (*v30 >= v10)
            break;
          pas_thread_local_cache_layout_node_move(v25, cache, a1);
          v31 = v22[++v26];
          v28 = pas_compact_heap_reservation_base;
          if (v31 >= 8)
            v32 = pas_compact_heap_reservation_base;
          else
            v32 = 0;
          v25 = v32 + v31;
          if (!(v32 + v31))
          {
            v22 = (unsigned int *)*((_QWORD *)v22 + 129);
            if (!v22)
              break;
            v26 = 0;
            v27 = *v22;
            if (v27 < 8)
              v28 = 0;
            v25 = v28 + v27;
          }
        }
        while (v25);
      }
    }
    memcpy(*(void **)(cache + 8024), *(const void **)(a1 + 8024), ((*(_DWORD *)(a1 + 8052) + 31) >> 3) & 0x1FFFFFFC);
    *(_QWORD *)(*(_QWORD *)(cache + 8016) + 24) = cache;
  }
  v33 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
  if (pas_thread_local_cache_layout_first_segment)
  {
    v34 = *(unsigned int *)pas_thread_local_cache_layout_first_segment;
    v35 = pas_compact_heap_reservation_base;
    v36 = v34 >= 8 ? pas_compact_heap_reservation_base : 0;
    v37 = v36 + v34;
    if (v36 + v34)
    {
      v38 = 0;
      while (1)
      {
        v41 = (v37 & 0xFFFFFFFFFFFFFFFCLL) + 36;
        if ((v37 & 3) != 0)
          v41 = (v37 & 0xFFFFFFFFFFFFFFFCLL) + 32;
        if ((v37 & 3) == 1)
          v42 = (unsigned int *)((v37 & 0xFFFFFFFFFFFFFFFCLL) + 4);
        else
          v42 = (unsigned int *)v41;
        v43 = *v42;
        if (v43 >= v10)
        {
          if (v43 >= v17)
            break;
          pas_thread_local_cache_layout_node_commit_and_construct(v37, cache);
          v35 = pas_compact_heap_reservation_base;
        }
        v39 = v33[++v38];
        if (v39 >= 8)
          v40 = v35;
        else
          v40 = 0;
        v37 = v40 + v39;
        if (!(v40 + v39))
        {
          v33 = (unsigned int *)*((_QWORD *)v33 + 129);
          if (!v33)
            break;
          v38 = 0;
          v44 = *v33;
          v45 = v44 >= 8 ? v35 : 0;
          v37 = v45 + v44;
          if (!(v45 + v44))
            break;
        }
      }
    }
  }
  *(_DWORD *)(cache + 8052) = v17;
  if (cache == a1)
  {
    v49 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8016) + 20);
    v50 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v51 = __ldxr(&v49->_os_unfair_lock_opaque);
      if (v51 != v50)
        break;
      if (!__stlxr(0, &v49->_os_unfair_lock_opaque))
      {
        if (v8)
          return 1;
        goto LABEL_77;
      }
    }
    __clrex();
    os_unfair_lock_unlock(v49);
    if (v8)
      return 1;
LABEL_77:
    v54 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v55 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v55 != v54)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return 1;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
  else
  {
    deallocate_0(a1);
    v46 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8016) + 20);
    v47 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v48 = __ldxr(&v46->_os_unfair_lock_opaque);
      if (v48 != v47)
        break;
      if (!__stlxr(0, &v46->_os_unfair_lock_opaque))
      {
        if (v8)
          goto LABEL_82;
        goto LABEL_72;
      }
    }
    __clrex();
    os_unfair_lock_unlock(v46);
    if (v8)
      goto LABEL_82;
LABEL_72:
    v52 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v53 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v53 != v52)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_82;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
LABEL_82:
    *(_QWORD *)(StatusReg + 752) = cache;
  }
  return 1;
}

void pas_thread_local_cache_flush_deallocation_log(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  os_unfair_lock_s *v10;
  unint64_t StatusReg;
  unsigned int v12;
  uint64_t v14;
  os_unfair_lock_s *v15;
  int8x16_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL *v27;
  _BOOL8 v28;
  BOOL v29;
  BOOL *v30;
  unint64_t v31;
  os_unfair_lock_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  os_unfair_lock_t v44;
  uint64_t v45;
  BOOL *v46;
  _BOOL8 v47;
  BOOL v48;
  BOOL *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int8x16_t *v61;
  int8x16_t v62;
  unint64_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x8_t v70;
  int8x8_t *v71;
  unint64_t v72;
  int8x8_t v73;
  int8x8_t v74;
  uint64_t v75;
  _BYTE *v76;
  char v77;
  int v78;
  unsigned int v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  os_unfair_lock_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  BOOL *v91;
  _BOOL8 v92;
  BOOL v93;
  BOOL *v94;
  unint64_t v95;
  int v96;
  unsigned int v97;
  os_unfair_lock_s *v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  uint64_t v103;

  if (!a1)
    return;
  v8 = a2;
  v10 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8016) + 20);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_DWORD *)(StatusReg + 24);
  do
  {
    if (__ldaxr(&v10->_os_unfair_lock_opaque))
    {
      __clrex();
      os_unfair_lock_lock(v10);
      v14 = *(unsigned int *)(a1 + 8000);
      if (!(_DWORD)v14)
        goto LABEL_138;
      goto LABEL_6;
    }
  }
  while (__stxr(v12, &v10->_os_unfair_lock_opaque));
  v14 = *(unsigned int *)(a1 + 8000);
  if (!(_DWORD)v14)
    goto LABEL_138;
LABEL_6:
  v102 = v8;
  v15 = 0;
  v103 = a1 + 8064;
  v101 = StatusReg;
  v16.i64[0] = -1;
  v16.i64[1] = -1;
  do
  {
    v17 = v14 - 1;
    v18 = *(_QWORD *)(a1 + 8 * (v14 - 1));
    switch(HIWORD(v18) & 0x3F)
    {
      case 0:
        do
        {
          v17 = v14 - 1;
          if (v14 == 1)
            goto LABEL_132;
          v19 = *(_QWORD *)(a1 - 16 + 8 * v14--);
        }
        while ((v19 & 0x3F000000000000) == 0);
LABEL_10:
        v14 = v17;
        continue;
      case 1:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"null");
      case 2:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"pas_utility_small");
      case 3:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"pas_utility_small");
      case 4:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"bmalloc_small_segregated");
      case 5:
LABEL_13:
        a3 = *(os_unfair_lock_s **)((v18 & 0xFFC0FFFFFFFFC000) + 8);
        if (v15 != a3)
        {
          v32 = pas_segregated_page_switch_lock_slow(v18 & 0xFFC0FFFFFFFFC000, v15, a3);
          v16.i64[0] = -1;
          v16.i64[1] = -1;
          v15 = v32;
        }
        v20 = (v18 & 0xFFC0FFFFFFFFC000) + 4 * ((v18 >> 9) & 0x1F);
        v21 = 1 << (v18 >> 4);
        v22 = (*(_DWORD *)(v20 + 0x2C) & ~v21) == 0;
        *(_DWORD *)(v20 + 44) &= ~v21;
        if (!v22)
        {
          v23 = a1 + 8 * v14;
          *(_QWORD *)(v23 - 8) = 0;
          if (!--v14)
            goto LABEL_132;
          goto LABEL_17;
        }
        v24 = *(_QWORD *)((v18 & 0xFFC0FFFFFFFFC000) + 0x20);
        if ((v24 & 7) == 0)
          goto LABEL_34;
        v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        if (*(_BYTE *)((v18 & 0xFFC0FFFFFFFFC000) + 1))
        {
          *(_BYTE *)((v18 & 0xFFC0FFFFFFFFC000) + 2) = 1;
LABEL_33:
          *(_QWORD *)((v18 & 0xFFC0FFFFFFFFC000) + 0x20) = v25;
LABEL_34:
          if (*(_QWORD *)((v18 & 0xFFC0FFFFFFFFC000) + 0x18) == 1)
          {
            pas_segregated_page_note_emptiness(v18 & 0xFFC0FFFFFFFFC000, 0);
            v16.i64[0] = -1;
            v16.i64[1] = -1;
            v23 = a1 + 8 * v14;
            *(_QWORD *)(v23 - 8) = 0;
            if (!--v14)
              goto LABEL_132;
          }
          else
          {
            --*(_QWORD *)((v18 & 0xFFC0FFFFFFFFC000) + 0x18);
            v23 = a1 + 8 * v14;
            *(_QWORD *)(v23 - 8) = 0;
            if (!--v14)
              goto LABEL_132;
          }
LABEL_17:
          v18 = *(_QWORD *)(v23 - 16);
          if ((v18 & 0x3F000000000000) != 0x5000000000000)
            continue;
          goto LABEL_13;
        }
        v26 = *(unsigned int *)((v18 & 0xFFC0FFFFFFFFC000) + 0x28);
        if (*(_DWORD *)(a1 + 8052) <= v26)
          goto LABEL_25;
        v27 = (BOOL *)(v103 + 8 * v26);
        if (!v27[7])
        {
          if (v27[7])
          {
LABEL_25:
            pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v25 + 8)) | ((unint64_t)*(unsigned __int8 *)(v25 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v25 + 12));
            v16.i64[0] = -1;
            v16.i64[1] = -1;
            goto LABEL_33;
          }
          pas_local_allocator_scavenger_data_commit_if_necessary_slow(v27, 1);
          v16.i64[0] = -1;
          v16.i64[1] = -1;
        }
        *(_BYTE *)((v18 & 0xFFC0FFFFFFFFC000) + 1) = 1;
        v28 = v27[6];
        v29 = v27[4] > (v28 + 1) && v28 + 1;
        if (v27[5] == v29)
          v27[7] = 2;
        v30 = &v27[3 * v28];
        v31 = v25 - pas_compact_heap_reservation_base;
        v30[8] = (v25 - pas_compact_heap_reservation_base) >> 3;
        v30[9] = v31 >> 11;
        v30[10] = v31 >> 19;
        v27[6] = v29;
        goto LABEL_33;
      case 6:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"bmalloc_medium_segregated");
      case 7:
LABEL_39:
        v14 = v17;
        if (!off_1ECF42618)
          goto LABEL_48;
        v33 = v18 & 0xFFC0FFFFFFFE0000;
        v34 = (v33 >> 17) ^ ((v33 >> 17) >> 4);
        v35 = ((v34 ^ 0xDEADBEEF) + 32 * v34) ^ (((v34 ^ 0xDEADBEEF) + 32 * v34) >> 11);
        v36 = (char *)off_1ECF42618 + 32;
        v37 = *((_DWORD *)off_1ECF42618 + 3) & v35;
        v38 = *((_QWORD *)off_1ECF42618 + 2 * v37 + 4);
        if (v38 == (v18 & 0xFFC0FFFFFFFE0000))
        {
LABEL_44:
          v40 = *(_QWORD *)&v36[16 * v37 + 8];
          a3 = *(os_unfair_lock_s **)(v40 + 8);
          if (v15 == a3)
            goto LABEL_45;
          goto LABEL_49;
        }
        v39 = v35 + 1;
        while (v38 != -1)
        {
          v37 = *((_DWORD *)off_1ECF42618 + 3) & v39;
          v38 = *(_QWORD *)&v36[16 * v37];
          ++v39;
          if (v38 == v33)
            goto LABEL_44;
        }
LABEL_48:
        v40 = 0;
        a3 = (os_unfair_lock_s *)MEMORY[8];
        if (v15 != (os_unfair_lock_s *)MEMORY[8])
        {
LABEL_49:
          v44 = pas_segregated_page_switch_lock_slow(v40, v15, a3);
          v16.i64[0] = -1;
          v16.i64[1] = -1;
          v15 = v44;
        }
LABEL_45:
        v41 = v40 + 4 * ((v18 >> 14) & 7);
        v42 = *(_DWORD *)(v41 + 44) & ~(1 << (v18 >> 9));
        *(_DWORD *)(v41 + 44) = v42;
        v43 = *(_QWORD *)(v40 + 32);
        if ((v43 & 7) == 0)
          goto LABEL_62;
        v43 &= 0xFFFFFFFFFFFFFFF8;
        if (*(_BYTE *)(v40 + 1))
        {
          *(_BYTE *)(v40 + 2) = 1;
LABEL_61:
          *(_QWORD *)(v40 + 32) = v43;
LABEL_62:
          v51 = v18 & 0x1FFFF;
          if ((v43 & 6) != 0)
          {
            v52 = *(unsigned int *)((v43 & 0xFFFFFFFFFFFFFFF8) + ((v51 >> 10) & 0x7C) + 20);
            if ((_DWORD)v52)
              v53 = pas_compact_heap_reservation_base + 8 * v52;
            else
              v53 = 0;
            v54 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v53 + 7)) | ((unint64_t)*(unsigned __int8 *)(v53 + 9) << 19))
                            + pas_compact_heap_reservation_base
                            + 24) & 0x7FFFFFF;
            if (!v54)
              goto LABEL_70;
          }
          else
          {
            v54 = *(unsigned int *)(v40 + 4);
            if (!*(_DWORD *)(v40 + 4))
            {
LABEL_70:
              LOBYTE(v57) = 0;
              goto LABEL_88;
            }
          }
          v55 = v51 >> 14;
          v56 = (v51 + v54 - 1) >> 14;
          if (v55 > v56)
            goto LABEL_70;
          v58 = v56 - v55 + 1;
          if (v58 < 8)
          {
            LOBYTE(v57) = 0;
            v59 = v55;
            goto LABEL_84;
          }
          if (v58 >= 0x20)
          {
            v60 = v58 & 0xFFFFFFFFFFFFFFE0;
            v61 = (int8x16_t *)(v40 + v55 + 92);
            v62 = 0uLL;
            v63 = v58 & 0xFFFFFFFFFFFFFFE0;
            v64 = 0uLL;
            do
            {
              v65 = vaddq_s8(v61[-1], v16);
              v66 = vaddq_s8(*v61, v16);
              v61[-1] = v65;
              *v61 = v66;
              v67 = vceqzq_s8(v65);
              v68 = vceqzq_s8(v66);
              v62 = vsubq_s8(vbicq_s8(v62, v67), v67);
              v64 = vsubq_s8(vbicq_s8(v64, v68), v68);
              v61 += 2;
              v63 -= 32;
            }
            while (v63);
            v69 = vorrq_s8(v62, v64);
            v57 = vmaxvq_u8((uint8x16_t)vtstq_s8(v69, v69)) & 1;
            if (v58 == v60)
              goto LABEL_88;
            if ((v58 & 0x18) == 0)
            {
              v59 = v55 | v60;
LABEL_84:
              v75 = v56 - v59 + 1;
              v76 = (_BYTE *)(v40 + v59 + 76);
              do
              {
                v77 = *v76 - 1;
                *v76++ = v77;
                if (!v77)
                  LOBYTE(v57) = 1;
                --v75;
              }
              while (v75);
LABEL_88:
              if (pas_segregated_page_deallocate_should_verify_granules)
              {
                pas_segregated_page_verify_granules((unsigned __int8 *)v40);
                v16.i64[0] = -1;
                v16.i64[1] = -1;
              }
              if ((_BYTE)v57)
              {
                pas_segregated_page_note_emptiness(v40, 1);
                v16.i64[0] = -1;
                v16.i64[1] = -1;
              }
              if (v42)
              {
                *(_QWORD *)(a1 + 8 * v14) = 0;
                if (!v14)
                  goto LABEL_132;
              }
              else if (*(_QWORD *)(v40 + 24) == 1)
              {
                pas_segregated_page_note_emptiness(v40, 0);
                v16.i64[0] = -1;
                v16.i64[1] = -1;
                *(_QWORD *)(a1 + 8 * v14) = 0;
                if (!v14)
                  goto LABEL_132;
              }
              else
              {
                --*(_QWORD *)(v40 + 24);
                *(_QWORD *)(a1 + 8 * v14) = 0;
                if (!v14)
                  goto LABEL_132;
              }
              v17 = v14 - 1;
              v18 = *(_QWORD *)(a1 + 8 * (v14 - 1));
              if ((v18 & 0x3F000000000000) != 0x7000000000000)
                continue;
              goto LABEL_39;
            }
          }
          else
          {
            v57 = 0;
            v60 = 0;
          }
          v59 = v55 | v58 & 0xFFFFFFFFFFFFFFF8;
          v70 = vdup_n_s8(v57);
          v71 = (int8x8_t *)(v40 + v60 + v55 + 76);
          v72 = v60 - (v58 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v73 = vadd_s8(*v71, (int8x8_t)-1);
            *v71++ = v73;
            v74 = vceqz_s8(v73);
            v70 = vsub_s8(vbic_s8(v70, v74), v74);
            v72 += 8;
          }
          while (v72);
          LOBYTE(v57) = *(_QWORD *)&v70 != 0;
          if (v58 == (v58 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_88;
          goto LABEL_84;
        }
        v45 = *(unsigned int *)(v40 + 40);
        if (*(_DWORD *)(a1 + 8052) <= v45)
          goto LABEL_53;
        v46 = (BOOL *)(v103 + 8 * v45);
        if (!v46[7])
        {
          if (v46[7])
          {
LABEL_53:
            pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v43 + 8)) | ((unint64_t)*(unsigned __int8 *)(v43 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v43 + 12));
            v16.i64[0] = -1;
            v16.i64[1] = -1;
            goto LABEL_61;
          }
          pas_local_allocator_scavenger_data_commit_if_necessary_slow(v46, 1);
          v16.i64[0] = -1;
          v16.i64[1] = -1;
        }
        *(_BYTE *)(v40 + 1) = 1;
        v47 = v46[6];
        v48 = v46[4] > (v47 + 1) && v47 + 1;
        if (v46[5] == v48)
          v46[7] = 2;
        v49 = &v46[3 * v47];
        v50 = v43 - pas_compact_heap_reservation_base;
        v49[8] = (unint64_t)(v43 - pas_compact_heap_reservation_base) >> 3;
        v49[9] = v50 >> 11;
        v49[10] = v50 >> 19;
        v46[6] = v48;
        goto LABEL_61;
      case 8:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"jit_small_segregated");
      case 9:
        goto LABEL_101;
      default:
        goto LABEL_10;
    }
    do
    {
LABEL_101:
      v14 = v17;
      if (!off_1EE342948)
        goto LABEL_111;
      v78 = ((v18 & 0xFFC0FFFFFFFFC000) >> 14) ^ (((v18 & 0xFFC0FFFFFFFFC000) >> 14) >> 4);
      v79 = ((v78 ^ 0xDEADBEEF) + 32 * v78) ^ (((v78 ^ 0xDEADBEEF) + 32 * v78) >> 11);
      v80 = (char *)off_1EE342948 + 32;
      v81 = *((_DWORD *)off_1EE342948 + 3) & v79;
      v82 = *((_QWORD *)off_1EE342948 + 2 * v81 + 4);
      if (v82 != (v18 & 0xFFC0FFFFFFFFC000))
      {
        v83 = v79 + 1;
        while (v82 != -1)
        {
          v81 = *((_DWORD *)off_1EE342948 + 3) & v83;
          v82 = *(_QWORD *)&v80[16 * v81];
          ++v83;
          if (v82 == (v18 & 0xFFC0FFFFFFFFC000))
            goto LABEL_106;
        }
LABEL_111:
        v84 = 0;
        a3 = (os_unfair_lock_s *)MEMORY[8];
        if (v15 == (os_unfair_lock_s *)MEMORY[8])
          goto LABEL_107;
        goto LABEL_112;
      }
LABEL_106:
      v84 = *(_QWORD *)&v80[16 * v81 + 8];
      a3 = *(os_unfair_lock_s **)(v84 + 8);
      if (v15 == a3)
        goto LABEL_107;
LABEL_112:
      v87 = pas_segregated_page_switch_lock_slow(v84, v15, a3);
      v16.i64[0] = -1;
      v16.i64[1] = -1;
      v15 = v87;
LABEL_107:
      v85 = v84 + 4 * ((v18 >> 9) & 0x1F);
      v86 = 1 << (v18 >> 4);
      v22 = (*(_DWORD *)(v85 + 44) & ~v86) == 0;
      *(_DWORD *)(v85 + 44) &= ~v86;
      if (!v22)
      {
        *(_QWORD *)(a1 + 8 * v14) = 0;
        if (!v14)
          goto LABEL_132;
        goto LABEL_109;
      }
      v88 = *(_QWORD *)(v84 + 32);
      if ((v88 & 7) != 0)
      {
        v89 = v88 & 0xFFFFFFFFFFFFFFF8;
        if (*(_BYTE *)(v84 + 1))
        {
          *(_BYTE *)(v84 + 2) = 1;
LABEL_127:
          *(_QWORD *)(v84 + 32) = v89;
          goto LABEL_128;
        }
        v90 = *(unsigned int *)(v84 + 40);
        if (*(_DWORD *)(a1 + 8052) > v90)
        {
          v91 = (BOOL *)(v103 + 8 * v90);
          if (!v91[7])
          {
            if (v91[7])
              goto LABEL_119;
            pas_local_allocator_scavenger_data_commit_if_necessary_slow(v91, 1);
            v16.i64[0] = -1;
            v16.i64[1] = -1;
          }
          *(_BYTE *)(v84 + 1) = 1;
          v92 = v91[6];
          v93 = v91[4] > (v92 + 1) && v92 + 1;
          if (v91[5] == v93)
            v91[7] = 2;
          v94 = &v91[3 * v92];
          v95 = v89 - pas_compact_heap_reservation_base;
          v94[8] = (v89 - pas_compact_heap_reservation_base) >> 3;
          v94[9] = v95 >> 11;
          v94[10] = v95 >> 19;
          v91[6] = v93;
          goto LABEL_127;
        }
LABEL_119:
        pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v89 + 8)) | ((unint64_t)*(unsigned __int8 *)(v89 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v89 + 12));
        v16.i64[0] = -1;
        v16.i64[1] = -1;
        goto LABEL_127;
      }
LABEL_128:
      if (*(_QWORD *)(v84 + 24) == 1)
      {
        pas_segregated_page_note_emptiness(v84, 0);
        v16.i64[0] = -1;
        v16.i64[1] = -1;
        *(_QWORD *)(a1 + 8 * v14) = 0;
        if (!v14)
          goto LABEL_132;
      }
      else
      {
        --*(_QWORD *)(v84 + 24);
        *(_QWORD *)(a1 + 8 * v14) = 0;
        if (!v14)
          goto LABEL_132;
      }
LABEL_109:
      v17 = v14 - 1;
      v18 = *(_QWORD *)(a1 + 8 * (v14 - 1));
    }
    while ((v18 & 0x3F000000000000) == 0x9000000000000);
  }
  while (v14);
LABEL_132:
  v8 = v102;
  StatusReg = v101;
  if (v15)
  {
    v96 = *(_DWORD *)(v101 + 24);
    while (1)
    {
      v97 = __ldxr(&v15->_os_unfair_lock_opaque);
      if (v97 != v96)
        break;
      if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
        goto LABEL_138;
    }
    __clrex();
    os_unfair_lock_unlock(v15);
  }
LABEL_138:
  *(_DWORD *)(a1 + 8000) = 0;
  *(_QWORD *)(a1 + 8008) = 0;
  *(_BYTE *)(a1 + 8004) = 1;
  v98 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8016) + 20);
  v99 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v100 = __ldxr(&v98->_os_unfair_lock_opaque);
    if (v100 != v99)
      break;
    if (!__stlxr(0, &v98->_os_unfair_lock_opaque))
    {
      if (v8)
        return;
      goto LABEL_144;
    }
  }
  __clrex();
  os_unfair_lock_unlock(v98);
  if (v8)
    return;
LABEL_144:
  pas_scavenger_notify_eligibility_if_needed();
}

void deallocate_0(unint64_t a1)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  pas_large_free_heap_helpers_deallocate((uint64_t)pas_large_utility_free_heap, (uint64_t)pas_bootstrap_free_heap_try_allocate_with_alignment, &pas_large_utility_free_heap_num_allocated_object_bytes, *(_QWORD *)(a1 + 8024), ((*(_DWORD *)(a1 + 8056) + 31) >> 3) & 0x1FFFFFFC);
  v2 = *(_QWORD *)(a1 + 8032);
  v3 = *(_DWORD *)(a1 + 8056);
  v4 = pas_page_malloc_cached_alignment;
  if (pas_page_malloc_cached_alignment)
  {
    LOBYTE(v5) = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_3;
  }
  else
  {
    v4 = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = v4;
    LOBYTE(v5) = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_3;
  }
  v5 = pas_page_malloc_alignment_shift_slow();
  pas_page_malloc_cached_alignment_shift = v5;
LABEL_3:
  pas_large_free_heap_helpers_deallocate((uint64_t)pas_large_utility_free_heap, (uint64_t)pas_bootstrap_free_heap_try_allocate_with_alignment, &pas_large_utility_free_heap_num_allocated_object_bytes, v2, ((((((8 * v3) + v4 + 8063) & (unint64_t)-v4) >> v5) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  v6 = *(_DWORD *)(a1 + 8056);
  v7 = pas_page_malloc_cached_alignment;
  if (!pas_page_malloc_cached_alignment)
  {
    v7 = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = v7;
  }
  pas_large_free_heap_helpers_deallocate((uint64_t)pas_large_utility_free_heap, (uint64_t)pas_bootstrap_free_heap_try_allocate_with_alignment, &pas_large_utility_free_heap_num_allocated_object_bytes, a1, ((8 * v6) + v7 + 8063) & -v7);
}

void pas_thread_local_cache_ensure_committed(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = a1;
  LOBYTE(a1) = pas_page_malloc_cached_alignment_shift;
  if (!pas_page_malloc_cached_alignment_shift)
  {
    a1 = pas_page_malloc_alignment_shift_slow();
    pas_page_malloc_cached_alignment_shift = a1;
  }
  v6 = (8 * (unint64_t)a2 + 8064) >> a1;
  v7 = (8 * (unint64_t)a3 + 8063) >> a1;
  if (v6 <= v7)
  {
    v8 = *(_QWORD *)(v5 + 8032);
    v9 = v7 + 1;
    do
    {
      if (((1 << v6) & *(_DWORD *)(v8 + 4 * (v6 >> 5))) != 0)
        goto LABEL_7;
      os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(v5 + 8016) + 20));
      if (pas_page_malloc_cached_alignment_shift)
      {
        if (!pas_page_malloc_cached_alignment)
          goto LABEL_13;
      }
      else
      {
        pas_page_malloc_cached_alignment_shift = pas_page_malloc_alignment_shift_slow();
        if (!pas_page_malloc_cached_alignment)
LABEL_13:
          pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
      }
      v8 = *(_QWORD *)(v5 + 8032);
      *(_DWORD *)(v8 + 4 * (v6 >> 5)) |= 1 << v6;
LABEL_7:
      ++v6;
    }
    while (v9 != v6);
  }
}

uint64_t pas_thread_local_cache_get_local_allocator_if_can_set_cache_for_possibly_uninitialized_index_slow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  _BYTE *SlowCase;
  uint64_t v12;
  unint64_t StatusReg;
  unint64_t v14;
  unsigned int v15;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;

  if (pthread_self_is_exiting_np())
    return 0;
  result = pas_msl_is_enabled_flag_value;
  if (pas_msl_is_enabled_flag_value)
  {
    if (pas_msl_is_enabled_flag_value == 2)
    {
      pthread_once(&pas_compute_msl_is_enabled_key, (void (*)(void))compute_msl_status);
      if (!pas_msl_is_enabled_flag_value)
        return 0;
    }
    v10 = *(_DWORD *)(a2 + 8);
    if (v10 != 1 && v10 != 3)
    {
      if (v10 != 2)
        goto LABEL_38;
      if (bmalloc::debugHeapCache != 1)
      {
        if (bmalloc::debugHeapCache)
          return 0;
        SlowCase = (_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
        if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
          SlowCase = (_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
        if (*SlowCase)
        {
          v12 = bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
          if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
            v12 = bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
          bmalloc::debugHeapCache = v12;
          if (v12)
            return 0;
LABEL_38:
          __break(0xC471u);
          JUMPOUT(0x198FE97ACLL);
        }
        bmalloc::debugHeapCache = 1;
      }
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v14 = *(_QWORD *)(StatusReg + 752);
    if (!v14)
    {
      v20 = StatusReg;
      v15 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v15, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_31;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_31:
      os_unfair_lock_assert_owner(&pas_heap_lock);
      if (!pas_thread_local_cache_fast_tls)
      {
        pthread_key_init_np();
        pas_thread_local_cache_fast_tls = 1;
      }
      pas_heap_config_activate(a2);
      v14 = pas_thread_local_cache_create();
      v17 = *(_DWORD *)(v20 + 24);
      while (1)
      {
        v18 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v18 != v17)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_21;
      }
      __clrex();
      v19 = v14;
      os_unfair_lock_unlock(&pas_heap_lock);
      v14 = v19;
    }
LABEL_21:
    if (!(_DWORD)a1)
      return 0;
    if (*(_DWORD *)(v14 + 8052) > a1)
      return 1;
    if ((_DWORD)a1 != -1)
      return pas_thread_local_cache_get_local_allocator_slow(v14, a1, 0, v4, v5, v6, v7, v8);
    return 0;
  }
  return result;
}

void pas_thread_local_cache_stop_local_allocators(uint64_t a1, int a2)
{
  unsigned int v4;
  os_unfair_lock_s *v6;
  unint64_t StatusReg;
  unsigned int v8;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int *v20;
  _BYTE *v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;

  if (!a2)
  {
    v4 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v4, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  v6 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8016) + 20);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v6->_os_unfair_lock_opaque))
  {
    if (!__stxr(v8, &v6->_os_unfair_lock_opaque))
    {
      v10 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
      if (!pas_thread_local_cache_layout_first_segment)
        goto LABEL_38;
      goto LABEL_13;
    }
  }
  __clrex();
  os_unfair_lock_lock(v6);
  v10 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
  if (!pas_thread_local_cache_layout_first_segment)
    goto LABEL_38;
LABEL_13:
  v11 = *v10;
  v12 = pas_compact_heap_reservation_base;
  if (v11 < 8)
    v12 = 0;
  v13 = v12 + v11;
  if (v12 + v11)
  {
    v14 = 0;
    while (1)
    {
      v18 = v13 & 3;
      v19 = (_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 36);
      if ((v13 & 3) != 0)
        v19 = (_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 32);
      if (v18 == 1)
        v19 = (_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 4);
      if (*v19 >= *(_DWORD *)(a1 + 8052))
        break;
      if (pas_thread_local_cache_layout_node_is_committed(v13, a1))
      {
        v20 = (unsigned int *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 36);
        if ((v13 & 3) != 0)
          v20 = (unsigned int *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 32);
        if (v18 == 1)
          v20 = (unsigned int *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 4);
        v21 = (_BYTE *)(a1 + 8064 + 8 * *v20);
        if ((v13 & 2) != 0)
          pas_local_view_cache_stop(v21, 1);
        else
          pas_local_allocator_stop(v21, 1, 1);
      }
      v15 = v10[++v14];
      v16 = pas_compact_heap_reservation_base;
      v17 = v15 >= 8 ? pas_compact_heap_reservation_base : 0;
      v13 = v17 + v15;
      if (!(v17 + v15))
      {
        v10 = (unsigned int *)*((_QWORD *)v10 + 129);
        if (!v10)
          break;
        v14 = 0;
        v22 = *v10;
        if (v22 < 8)
          v16 = 0;
        v13 = v16 + v22;
        if (!(v16 + v22))
          break;
      }
    }
  }
LABEL_38:
  v23 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8016) + 20);
  v24 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v25 = __ldxr(&v23->_os_unfair_lock_opaque);
    if (v25 != v24)
      break;
    if (!__stlxr(0, &v23->_os_unfair_lock_opaque))
    {
      if (a2)
        return;
      goto LABEL_44;
    }
  }
  __clrex();
  os_unfair_lock_unlock(v23);
  if (a2)
    return;
LABEL_44:
  v26 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v27 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v27 != v26)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
}

uint64_t pas_thread_local_cache_stop_local_allocators_if_necessary(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int i;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE *v14;

  if (*(_BYTE *)(result + 8048))
  {
    v14 = (_BYTE *)(result + 8048);
    v3 = *(_DWORD *)(result + 8052) + 31;
    if (v3 >= 0x20)
    {
      v6 = 0;
      v7 = *(_QWORD *)(result + 8024);
      v8 = v3 >> 5;
      v9 = result + 8064;
      do
      {
        for (i = *(_DWORD *)(v7 + 4 * v6); i; i &= ~v12)
        {
          v11 = __clz(__rbit32(i));
          v12 = 1 << v11;
          *(_DWORD *)(v7 + 4 * v6) &= ~(1 << v11);
          result = v9 + 8 * ((32 * v6) | v11);
          if (result != a2 && *(_BYTE *)(result + 1))
          {
            v13 = *(unsigned __int8 *)(result + 3);
            if (v13 == 4)
            {
              result = pas_local_view_cache_stop((_BYTE *)result, 1);
            }
            else if (v13 == 2)
            {
              result = pas_local_allocator_stop((_BYTE *)result, 1, a3);
            }
          }
        }
        ++v6;
      }
      while (v6 != v8);
    }
    *v14 = 0;
  }
  return result;
}

BOOL pas_thread_local_cache_for_all(int a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  unint64_t StatusReg;
  unsigned int v12;
  unsigned int v14;
  uint64_t v16;
  os_unfair_lock_s *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  size_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int16 *v83;
  unint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  _BYTE *v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  thread_read_t target_act[2];
  BOOL v141;

  v8 = (int)a3;
  v9 = a2;
  v10 = pas_page_malloc_cached_alignment;
  if (pas_page_malloc_cached_alignment)
  {
    LOBYTE(v137) = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_3;
  }
  else
  {
    v10 = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = v10;
    LOBYTE(v137) = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_3;
  }
  v137 = pas_page_malloc_alignment_shift_slow();
  pas_page_malloc_cached_alignment_shift = v137;
LABEL_3:
  v141 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr((unsigned int *)&pas_thread_suspend_lock))
  {
    if (!__stxr(v12, (unsigned int *)&pas_thread_suspend_lock))
      goto LABEL_8;
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)&pas_thread_suspend_lock);
LABEL_8:
  v14 = *(_DWORD *)(StatusReg + 24);
  do
  {
    if (__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
      v16 = pas_thread_local_cache_node_first;
      if (pas_thread_local_cache_node_first)
        goto LABEL_14;
      goto LABEL_230;
    }
  }
  while (__stxr(v14, &pas_heap_lock._os_unfair_lock_opaque));
  v16 = pas_thread_local_cache_node_first;
  if (!pas_thread_local_cache_node_first)
    goto LABEL_230;
LABEL_14:
  if (a1)
  {
    v127 = -v10;
    v128 = v10 - 1;
    v130 = StatusReg;
    v129 = v9;
    v132 = v8;
    while (1)
    {
      v138 = *(_QWORD *)(v16 + 24);
      if (v138)
        break;
LABEL_17:
      v16 = *(_QWORD *)(v16 + 8);
      if (!v16)
        goto LABEL_230;
    }
    v17 = (os_unfair_lock_s *)(v16 + 20);
    v18 = *(_DWORD *)(StatusReg + 24);
    v19 = *(_QWORD *)(v16 + 24);
    do
    {
      if (__ldaxr(&v17->_os_unfair_lock_opaque))
      {
        __clrex();
        os_unfair_lock_lock((os_unfair_lock_t)(v16 + 20));
        if (v9 == 2)
          goto LABEL_30;
        goto LABEL_25;
      }
    }
    while (__stxr(v18, &v17->_os_unfair_lock_opaque));
    if (v9 == 2)
    {
LABEL_30:
      flush_deallocation_log_for_scavenger(v138, a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)target_act = 0;
      v21 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
      v131 = v16;
      if (pas_thread_local_cache_layout_first_segment)
        goto LABEL_31;
LABEL_108:
      v26 = 0;
      v27 = 0;
      v139 = 0;
      v28 = 8120;
      v29 = (_QWORD *)&unk_1ECF57000;
      goto LABEL_113;
    }
LABEL_25:
    if (v9 == 1)
    {
      if (!*(_BYTE *)(v138 + 8004))
        goto LABEL_30;
      *(_BYTE *)(v138 + 8004) = 0;
      v141 = *(_DWORD *)(v138 + 8000) != 0;
    }
    *(_QWORD *)target_act = 0;
    v21 = (unsigned int *)pas_thread_local_cache_layout_first_segment;
    v131 = v16;
    if (!pas_thread_local_cache_layout_first_segment)
      goto LABEL_108;
LABEL_31:
    v22 = *v21;
    v23 = pas_compact_heap_reservation_base;
    if (v22 >= 8)
      v24 = pas_compact_heap_reservation_base;
    else
      v24 = 0;
    v25 = v24 + v22;
    if (!v25)
      goto LABEL_108;
    v26 = 0;
    v27 = 0;
    v139 = 0;
    v135 = v138 + 8064;
    v28 = 8120;
    v29 = (_QWORD *)&unk_1ECF57000;
    do
    {
      v30 = v25 & 3;
      v31 = (unsigned int *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 36);
      if ((v25 & 3) != 0)
        v31 = (unsigned int *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 32);
      if (v30 == 1)
        v31 = (unsigned int *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 4);
      v32 = *v31;
      if (v32 >= *(_DWORD *)(v19 + 8052))
        break;
      v33 = (_BYTE *)(v135 + 8 * v32);
      if (v8 != 1)
      {
        stop_allocator(v19, a1, v32, (_BYTE *)(v135 + 8 * v32), &v141, (uint64_t)target_act);
        goto LABEL_99;
      }
      if (v30 == 1)
      {
        v34 = ((8 * *(unsigned __int16 *)(v25 & 0xFFFFFFFFFFFFFFFCLL)) | ((unint64_t)*(unsigned __int8 *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 2) << 19))
            + v23;
        v35 = *(unsigned __int8 *)(v34 + 12);
        if ((v25 & 2) != 0)
        {
LABEL_54:
          if (v35 && (a2 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + v35), *(_BYTE *)(a2 + 172)))
          {
            v38 = 8
                * (((3
                   * (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)(v34 + 16) + 24))(*(_DWORD *)(v34 + 24) & 0x7FFFFFF)
                   + 15) >> 3)
                 + v32);
            v39 = v29[365];
            if (v39)
              goto LABEL_50;
          }
          else
          {
            v38 = 8 * (v32 + 1);
            v39 = v29[365];
            if (v39)
              goto LABEL_50;
          }
          goto LABEL_59;
        }
      }
      else
      {
        v34 = v25 & 0xFFFFFFFFFFFFFFFCLL;
        v35 = *(unsigned __int8 *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 12);
        if ((v25 & 2) != 0)
          goto LABEL_54;
      }
      if (v35)
      {
        v36 = *((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v35) + 15) + 63;
        if ((v36 & 0xFFFFFFFFFFFFFFC0) <= 0x80)
          v37 = 9;
        else
          v37 = ((v36 >> 3) + 56) >> 3;
        v38 = 8 * (v37 + v32);
        v39 = v29[365];
        if (v39)
        {
LABEL_50:
          v40 = (unint64_t)(v38 + 8063) >> v39;
          LOBYTE(v41) = v39;
          v42 = 8 * v32 + 8064;
          v43 = v38 + 8064;
          v44 = v42 >> v39;
          if (v42 >> v39 <= v40)
            goto LABEL_65;
          goto LABEL_51;
        }
      }
      else
      {
        v38 = 8 * (v32 + 9);
        v39 = v29[365];
        if (v39)
          goto LABEL_50;
      }
LABEL_59:
      v47 = v28;
      v41 = pas_page_malloc_alignment_shift_slow();
      v29[365] = v41;
      v48 = v29;
      v40 = (unint64_t)(v38 + 8063) >> v41;
      if (v41)
      {
        v49 = v41;
      }
      else
      {
        v41 = pas_page_malloc_alignment_shift_slow();
        v49 = 0;
        v48[365] = v41;
      }
      v28 = v47;
      v8 = v132;
      v42 = 8 * v32 + 8064;
      v43 = v38 + 8064;
      v44 = v42 >> v49;
      if (v42 >> v49 <= v40)
      {
LABEL_65:
        v50 = v40 + 1;
        v46 = v42;
        v45 = v43;
        do
        {
          v51 = *(_DWORD *)(*(_QWORD *)(v138 + 8032) + ((v44 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v44;
          v52 = v44 << v41;
          v53 = v44 + 1;
          v54 = (v44 + 1) << v41;
          if (v43 < v54)
            v54 = v43;
          if (v46 > v54)
            v54 = v46;
          if (v42 > v52)
            v52 = v42;
          if (v45 < v52)
            v52 = v45;
          if ((v51 & 1) == 0)
          {
            v45 = v52;
            v46 = v54;
          }
          v44 = v53;
        }
        while (v50 != v53);
        goto LABEL_77;
      }
LABEL_51:
      v45 = v43;
      v46 = v42;
LABEL_77:
      if (v46 < v45)
      {
        stop_allocator(v138, a1, v32, v33, &v141, (uint64_t)target_act);
        v55 = v33[3];
        if (v27)
          v56 = v27;
        else
          v56 = v21;
        v57 = v139;
        if (v27)
          v57 = v26;
        if (v55 == 2)
        {
          v56 = v27;
          v57 = v26;
          v58 = v45;
        }
        else
        {
          v58 = v46;
        }
        if (v55 == 2)
          v59 = v46;
        else
          v59 = v45;
        v60 = v55 > 3;
        if (v55 > 3)
        {
          v61 = v45;
        }
        else
        {
          v27 = v56;
          v26 = v57;
          v61 = v58;
        }
        if (v60)
          v45 = v46;
        else
          v45 = v59;
        v46 = v61;
      }
      if (v46 <= v45)
      {
        v29 = &unk_1ECF57000;
        v19 = v138;
      }
      else
      {
        v62 = v45;
        v19 = v138;
        decommit_allocator_range(v138, v27, v26, v28, v62, v21, v139);
        v27 = 0;
        v26 = 0;
        v28 = v46;
        v29 = (_QWORD *)&unk_1ECF57000;
      }
LABEL_99:
      v63 = v21[++v139];
      v23 = pas_compact_heap_reservation_base;
      if (v63 >= 8)
        v64 = pas_compact_heap_reservation_base;
      else
        v64 = 0;
      v25 = v64 + v63;
      if (!v25)
      {
        v21 = (unsigned int *)*((_QWORD *)v21 + 129);
        if (!v21)
        {
          v139 = 0;
          break;
        }
        v139 = 0;
        v65 = *v21;
        if (v65 >= 8)
          v66 = pas_compact_heap_reservation_base;
        else
          v66 = 0;
        v25 = v66 + v65;
      }
    }
    while (v25);
    if (LOBYTE(target_act[0]) && !BYTE1(target_act[0]))
      thread_resume(target_act[1]);
LABEL_113:
    if (v8 != 1)
    {
LABEL_183:
      StatusReg = v130;
      v16 = v131;
      v102 = *(_DWORD *)(v130 + 24);
      v9 = v129;
      while (1)
      {
        v103 = __ldxr(&v17->_os_unfair_lock_opaque);
        if (v103 != v102)
          break;
        if (!__stlxr(0, &v17->_os_unfair_lock_opaque))
          goto LABEL_17;
      }
      __clrex();
      os_unfair_lock_unlock(v17);
      goto LABEL_17;
    }
    v67 = *(_DWORD *)(v19 + 8056);
    v68 = pas_page_malloc_cached_alignment;
    if (!pas_page_malloc_cached_alignment)
    {
      v68 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v68;
    }
    v69 = ((v128 + v28) & (unint64_t)v127) >> v137;
    v70 = (((8 * v67) + v68 + 8063) & (unint64_t)-v68) >> v137;
    if (v69 >= v70)
    {
LABEL_180:
      v101 = *(_DWORD *)(v19 + 8056);
      if (!v68)
      {
        v68 = pas_page_malloc_alignment_slow();
        pas_page_malloc_cached_alignment = v68;
      }
      decommit_allocator_range(v19, v27, v26, v28, ((8 * v101) + v68 + 8063) & -v68, v21, v139);
      goto LABEL_183;
    }
    v136 = v19 + 8067;
    v133 = (((8 * v67) + v68 + 8063) & (unint64_t)-v68) >> v137;
    while (2)
    {
      while (((*(_DWORD *)(*(_QWORD *)(v19 + 8032) + ((v69 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v69) & 1) != 0)
      {
        if (++v69 == v70)
        {
LABEL_179:
          v68 = pas_page_malloc_cached_alignment;
          goto LABEL_180;
        }
      }
      os_unfair_lock_assert_owner(&pas_heap_lock);
      os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(v19 + 8016) + 20));
      v71 = pas_page_malloc_cached_alignment;
      if (pas_page_malloc_cached_alignment)
      {
        v72 = v29[365];
        if (v72)
          goto LABEL_124;
LABEL_135:
        v72 = pas_page_malloc_alignment_shift_slow();
        v29[365] = v72;
      }
      else
      {
        v71 = pas_page_malloc_alignment_slow();
        pas_page_malloc_cached_alignment = v71;
        v72 = v29[365];
        if (!v72)
          goto LABEL_135;
      }
LABEL_124:
      v73 = ((v28 + v71 - 1) & (unint64_t)-v71) >> v72;
      v74 = v69 << v137 >> v72;
      if (v73 >= v74)
      {
LABEL_118:
        v27 = 0;
        v26 = 0;
        v28 = ++v69 << v137;
        v29 = &unk_1ECF57000;
        v70 = v133;
        if (v69 == v133)
          goto LABEL_179;
        continue;
      }
      break;
    }
    v75 = v73 << v72;
    v76 = v74 << v72;
    if (!v27 || v26 == v139 && v27 == v21)
    {
LABEL_128:
      v77 = *(_QWORD *)(v138 + 8032);
      do
      {
        *(_DWORD *)(v77 + ((v73 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v73);
        ++v73;
      }
      while (v74 != v73);
      v78 = (void *)(v138 + v75);
      v79 = v76 - v75;
      v19 = v138;
      v8 = v132;
      while (madvise(v78, v79, 7) == -1 && *__error() == 35)
        ;
      goto LABEL_118;
    }
    v80 = v27[v26];
    v81 = pas_compact_heap_reservation_base;
    if (v80 < 8)
      v81 = 0;
    v82 = v81 + v80;
    while (2)
    {
      v83 = (unsigned __int16 *)(v82 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v82 & 3) == 1)
      {
        v84 = ((8 * *v83) | ((unint64_t)*((unsigned __int8 *)v83 + 2) << 19))
            + pas_compact_heap_reservation_base;
        v86 = *((unsigned int *)v83 + 1);
        v87 = *(unsigned __int8 *)(v84 + 12);
        if ((v82 & 2) == 0)
          goto LABEL_146;
      }
      else
      {
        v84 = v82 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v82 & 3) != 0)
          v85 = (unsigned int *)(v83 + 16);
        else
          v85 = (unsigned int *)(v83 + 18);
        v86 = *v85;
        v87 = *(unsigned __int8 *)(v84 + 12);
        if ((v82 & 2) == 0)
        {
LABEL_146:
          if (v87)
          {
            v88 = *((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v87) + 15) + 63;
            if ((v88 & 0xFFFFFFFFFFFFFFC0) <= 0x80)
              v89 = 9;
            else
              v89 = ((v88 >> 3) + 56) >> 3;
            if (v76 == v75)
            {
LABEL_167:
              if (v27)
                goto LABEL_168;
LABEL_174:
              v27 = (unsigned int *)*((_QWORD *)v27 + 129);
              if (v27)
              {
                v26 = 0;
                v99 = *v27;
                v100 = pas_compact_heap_reservation_base;
                if (v99 < 8)
                  v100 = 0;
                v82 = v100 + v99;
                if (v27 != v21)
                  continue;
              }
              else
              {
                v26 = 0;
                v82 = 0;
                if (v21)
                  continue;
              }
              goto LABEL_140;
            }
          }
          else
          {
            v89 = 9;
            if (v76 == v75)
              goto LABEL_167;
          }
LABEL_160:
          v90 = v89 + v86;
          v91 = 8 * v86;
          v92 = 8 * v90;
          v93 = v91 == v92;
          v94 = v92 + 8064;
          if (v93 || v76 <= v91 + 8064 || v94 <= v75)
            goto LABEL_167;
          os_unfair_lock_assert_owner(&pas_heap_lock);
          *(_BYTE *)(v136 + v91) = 0;
          if (!v27)
            goto LABEL_174;
LABEL_168:
          v97 = v27[++v26];
          v98 = pas_compact_heap_reservation_base;
          if (v97 < 8)
            v98 = 0;
          v82 = v98 + v97;
          if (!v82)
            goto LABEL_174;
          if (v27 != v21)
            continue;
LABEL_140:
          if (v26 == v139)
            goto LABEL_128;
          continue;
        }
      }
      break;
    }
    if (v87 && *((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + v87) + 172))
    {
      v89 = (3
           * (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)(v84 + 16) + 24))(*(_DWORD *)(v84 + 24) & 0x7FFFFFF)
           + 15) >> 3;
      if (v76 == v75)
        goto LABEL_167;
    }
    else
    {
      v89 = 1;
      if (v76 == v75)
        goto LABEL_167;
    }
    goto LABEL_160;
  }
  if (v9 == 2)
  {
    do
    {
      v104 = *(_QWORD *)(v16 + 24);
      if (v104)
      {
        v105 = (unsigned int *)(v16 + 20);
        v106 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(v105))
        {
          if (!__stxr(v106, v105))
            goto LABEL_200;
        }
        __clrex();
        os_unfair_lock_lock((os_unfair_lock_t)(v16 + 20));
LABEL_200:
        flush_deallocation_log_for_scavenger(v104, a2, a3, a4, a5, a6, a7, a8);
        v108 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v109 = __ldxr(v105);
          if (v109 != v108)
            break;
          if (!__stlxr(0, v105))
            goto LABEL_193;
        }
        __clrex();
        os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 20));
      }
LABEL_193:
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16);
  }
  else if (v9 == 1)
  {
    do
    {
      v115 = *(_QWORD *)(v16 + 24);
      if (v115)
      {
        v116 = (unsigned int *)(v16 + 20);
        v117 = *(_DWORD *)(StatusReg + 24);
        do
        {
          if (__ldaxr(v116))
          {
            __clrex();
            os_unfair_lock_lock((os_unfair_lock_t)(v16 + 20));
            v119 = (_BYTE *)(v115 + 8004);
            if (*(_BYTE *)(v115 + 8004))
              goto LABEL_223;
            goto LABEL_225;
          }
        }
        while (__stxr(v117, v116));
        v119 = (_BYTE *)(v115 + 8004);
        if (*(_BYTE *)(v115 + 8004))
        {
LABEL_223:
          *v119 = 0;
          v141 = *(_DWORD *)(v115 + 8000) != 0;
          goto LABEL_226;
        }
LABEL_225:
        flush_deallocation_log_for_scavenger(v115, a2, a3, a4, a5, a6, a7, a8);
LABEL_226:
        v120 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v121 = __ldxr(v116);
          if (v121 != v120)
            break;
          if (!__stlxr(0, v116))
            goto LABEL_217;
        }
        __clrex();
        os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 20));
      }
LABEL_217:
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16);
  }
  else
  {
    do
    {
      if (*(_QWORD *)(v16 + 24))
      {
        v110 = (unsigned int *)(v16 + 20);
        v111 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(v110))
        {
          if (!__stxr(v111, v110))
            goto LABEL_212;
        }
        __clrex();
        os_unfair_lock_lock((os_unfair_lock_t)(v16 + 20));
LABEL_212:
        v113 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v114 = __ldxr(v110);
          if (v114 != v113)
            break;
          if (!__stlxr(0, v110))
            goto LABEL_205;
        }
        __clrex();
        os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 20));
      }
LABEL_205:
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16);
  }
LABEL_230:
  v122 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v123 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v123 != v122)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_235;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_235:
  v124 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v125 = __ldxr((unsigned int *)&pas_thread_suspend_lock);
    if (v125 != v124)
      break;
    if (!__stlxr(0, (unsigned int *)&pas_thread_suspend_lock))
      return v141;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)&pas_thread_suspend_lock);
  return v141;
}

void flush_deallocation_log_for_scavenger(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  os_unfair_lock_s *v10;
  uint64_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  os_unfair_lock_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  os_unfair_lock_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int8x16_t *v45;
  int8x16_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x8_t v54;
  int8x8_t *v55;
  unint64_t v56;
  int8x8_t v57;
  int8x8_t v58;
  uint64_t v59;
  _BYTE *v60;
  char v61;
  int v62;
  unsigned int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  os_unfair_lock_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unsigned int v75;

  v8 = *(unsigned int *)(a1 + 8000);
  if (!(_DWORD)v8)
    return;
  v10 = 0;
  v11 = a1 - 16;
  v12.i64[0] = -1;
  v12.i64[1] = -1;
  do
  {
    v13 = v8 - 1;
    v14 = *(_QWORD *)(a1 + 8 * (v8 - 1));
    switch(HIWORD(v14) & 0x3F)
    {
      case 0:
        do
        {
          v13 = v8 - 1;
          if (v8 == 1)
            goto LABEL_98;
          v15 = *(_QWORD *)(v11 + 8 * v8--);
        }
        while ((v15 & 0x3F000000000000) == 0);
LABEL_6:
        v8 = v13;
        continue;
      case 1:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"null");
      case 2:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"pas_utility_small");
      case 3:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"pas_utility_small");
      case 4:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"bmalloc_small_segregated");
      case 5:
LABEL_9:
        a3 = *(os_unfair_lock_s **)((v14 & 0xFFC0FFFFFFFFC000) + 8);
        if (v10 != a3)
        {
          v22 = pas_segregated_page_switch_lock_slow(v14 & 0xFFC0FFFFFFFFC000, v10, a3);
          v12.i64[0] = -1;
          v12.i64[1] = -1;
          v10 = v22;
        }
        v16 = (v14 & 0xFFC0FFFFFFFFC000) + 4 * ((v14 >> 9) & 0x1F);
        v17 = 1 << (v14 >> 4);
        v18 = (*(_DWORD *)(v16 + 0x2C) & ~v17) == 0;
        *(_DWORD *)(v16 + 44) &= ~v17;
        if (v18)
        {
          v20 = *(_QWORD *)((v14 & 0xFFC0FFFFFFFFC000) + 0x20);
          if ((v20 & 7) != 0)
          {
            v21 = v20 & 0xFFFFFFFFFFFFFFF8;
            if (*(_BYTE *)((v14 & 0xFFC0FFFFFFFFC000) + 1))
            {
              *(_BYTE *)((v14 & 0xFFC0FFFFFFFFC000) + 2) = 1;
            }
            else
            {
              pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v21 + 8)) | ((unint64_t)*(unsigned __int8 *)(v21 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v21 + 12));
              v12.i64[0] = -1;
              v12.i64[1] = -1;
            }
            *(_QWORD *)((v14 & 0xFFC0FFFFFFFFC000) + 0x20) = v21;
          }
          if (*(_QWORD *)((v14 & 0xFFC0FFFFFFFFC000) + 0x18) == 1)
          {
            pas_segregated_page_note_emptiness(v14 & 0xFFC0FFFFFFFFC000, 0);
            v12.i64[0] = -1;
            v12.i64[1] = -1;
            v19 = a1 + 8 * v8;
            *(_QWORD *)(v19 - 8) = 0;
            if (!--v8)
              goto LABEL_98;
          }
          else
          {
            --*(_QWORD *)((v14 & 0xFFC0FFFFFFFFC000) + 0x18);
            v19 = a1 + 8 * v8;
            *(_QWORD *)(v19 - 8) = 0;
            if (!--v8)
              goto LABEL_98;
          }
        }
        else
        {
          v19 = a1 + 8 * v8;
          *(_QWORD *)(v19 - 8) = 0;
          if (!--v8)
            goto LABEL_98;
        }
        v14 = *(_QWORD *)(v19 - 16);
        if ((v14 & 0x3F000000000000) != 0x5000000000000)
          continue;
        goto LABEL_9;
      case 6:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"bmalloc_medium_segregated");
      case 7:
LABEL_25:
        v8 = v13;
        if (!off_1ECF42618)
          goto LABEL_34;
        v23 = v14 & 0xFFC0FFFFFFFE0000;
        v24 = (v23 >> 17) ^ ((v23 >> 17) >> 4);
        v25 = ((v24 ^ 0xDEADBEEF) + 32 * v24) ^ (((v24 ^ 0xDEADBEEF) + 32 * v24) >> 11);
        v26 = (char *)off_1ECF42618 + 32;
        v27 = *((_DWORD *)off_1ECF42618 + 3) & v25;
        v28 = *((_QWORD *)off_1ECF42618 + 2 * v27 + 4);
        if (v28 == (v14 & 0xFFC0FFFFFFFE0000))
        {
LABEL_30:
          v30 = *(_QWORD *)&v26[16 * v27 + 8];
          a3 = *(os_unfair_lock_s **)(v30 + 8);
          if (v10 == a3)
            goto LABEL_31;
          goto LABEL_35;
        }
        v29 = v25 + 1;
        while (v28 != -1)
        {
          v27 = *((_DWORD *)off_1ECF42618 + 3) & v29;
          v28 = *(_QWORD *)&v26[16 * v27];
          ++v29;
          if (v28 == v23)
            goto LABEL_30;
        }
LABEL_34:
        v30 = 0;
        a3 = (os_unfair_lock_s *)MEMORY[8];
        if (v10 != (os_unfair_lock_s *)MEMORY[8])
        {
LABEL_35:
          v34 = pas_segregated_page_switch_lock_slow(v30, v10, a3);
          v12.i64[0] = -1;
          v12.i64[1] = -1;
          v10 = v34;
        }
LABEL_31:
        v31 = v30 + 4 * ((v14 >> 14) & 7);
        v32 = *(_DWORD *)(v31 + 44) & ~(1 << (v14 >> 9));
        *(_DWORD *)(v31 + 44) = v32;
        v33 = *(_QWORD *)(v30 + 32);
        if ((v33 & 7) != 0)
        {
          v33 &= 0xFFFFFFFFFFFFFFF8;
          if (*(_BYTE *)(v30 + 1))
          {
            *(_BYTE *)(v30 + 2) = 1;
          }
          else
          {
            pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v33 + 8)) | ((unint64_t)*(unsigned __int8 *)(v33 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v33 + 12));
            v12.i64[0] = -1;
            v12.i64[1] = -1;
          }
          *(_QWORD *)(v30 + 32) = v33;
        }
        v35 = v14 & 0x1FFFF;
        if ((v33 & 6) != 0)
        {
          v36 = *(unsigned int *)((v33 & 0xFFFFFFFFFFFFFFF8) + ((v35 >> 10) & 0x7C) + 20);
          if ((_DWORD)v36)
            v37 = pas_compact_heap_reservation_base + 8 * v36;
          else
            v37 = 0;
          v38 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v37 + 7)) | ((unint64_t)*(unsigned __int8 *)(v37 + 9) << 19))
                          + pas_compact_heap_reservation_base
                          + 24) & 0x7FFFFFF;
          if (!v38)
            goto LABEL_46;
        }
        else
        {
          v38 = *(unsigned int *)(v30 + 4);
          if (!*(_DWORD *)(v30 + 4))
          {
LABEL_46:
            LOBYTE(v41) = 0;
            goto LABEL_64;
          }
        }
        v39 = v35 >> 14;
        v40 = (v35 + v38 - 1) >> 14;
        if (v39 > v40)
          goto LABEL_46;
        v42 = v40 - v39 + 1;
        if (v42 < 8)
        {
          LOBYTE(v41) = 0;
          v43 = v39;
          goto LABEL_60;
        }
        if (v42 >= 0x20)
        {
          v44 = v42 & 0xFFFFFFFFFFFFFFE0;
          v45 = (int8x16_t *)(v30 + v39 + 92);
          v46 = 0uLL;
          v47 = v42 & 0xFFFFFFFFFFFFFFE0;
          v48 = 0uLL;
          do
          {
            v49 = vaddq_s8(v45[-1], v12);
            v50 = vaddq_s8(*v45, v12);
            v45[-1] = v49;
            *v45 = v50;
            v51 = vceqzq_s8(v49);
            v52 = vceqzq_s8(v50);
            v46 = vsubq_s8(vbicq_s8(v46, v51), v51);
            v48 = vsubq_s8(vbicq_s8(v48, v52), v52);
            v45 += 2;
            v47 -= 32;
          }
          while (v47);
          v53 = vorrq_s8(v46, v48);
          v41 = vmaxvq_u8((uint8x16_t)vtstq_s8(v53, v53)) & 1;
          if (v42 == v44)
            goto LABEL_64;
          if ((v42 & 0x18) == 0)
          {
            v43 = v39 | v44;
LABEL_60:
            v59 = v40 - v43 + 1;
            v60 = (_BYTE *)(v30 + v43 + 76);
            do
            {
              v61 = *v60 - 1;
              *v60++ = v61;
              if (!v61)
                LOBYTE(v41) = 1;
              --v59;
            }
            while (v59);
LABEL_64:
            if (pas_segregated_page_deallocate_should_verify_granules)
            {
              pas_segregated_page_verify_granules((unsigned __int8 *)v30);
              v12.i64[0] = -1;
              v12.i64[1] = -1;
            }
            if ((_BYTE)v41)
            {
              pas_segregated_page_note_emptiness(v30, 1);
              v12.i64[0] = -1;
              v12.i64[1] = -1;
            }
            if (v32)
            {
              *(_QWORD *)(a1 + 8 * v8) = 0;
              if (!v8)
                goto LABEL_98;
            }
            else if (*(_QWORD *)(v30 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v30, 0);
              v12.i64[0] = -1;
              v12.i64[1] = -1;
              *(_QWORD *)(a1 + 8 * v8) = 0;
              if (!v8)
                goto LABEL_98;
            }
            else
            {
              --*(_QWORD *)(v30 + 24);
              *(_QWORD *)(a1 + 8 * v8) = 0;
              if (!v8)
                goto LABEL_98;
            }
            v13 = v8 - 1;
            v14 = *(_QWORD *)(a1 + 8 * (v8 - 1));
            if ((v14 & 0x3F000000000000) != 0x7000000000000)
              continue;
            goto LABEL_25;
          }
        }
        else
        {
          v41 = 0;
          v44 = 0;
        }
        v43 = v39 | v42 & 0xFFFFFFFFFFFFFFF8;
        v54 = vdup_n_s8(v41);
        v55 = (int8x8_t *)(v30 + v44 + v39 + 76);
        v56 = v44 - (v42 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v57 = vadd_s8(*v55, (int8x8_t)-1);
          *v55++ = v57;
          v58 = vceqz_s8(v57);
          v54 = vsub_s8(vbic_s8(v54, v58), v58);
          v56 += 8;
        }
        while (v56);
        LOBYTE(v41) = *(_QWORD *)&v54 != 0;
        if (v42 == (v42 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_64;
        goto LABEL_60;
      case 8:
        pas_panic("Deallocation logging is disabled for %s/%s, but here we are.\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"jit_small_segregated");
      case 9:
        goto LABEL_77;
      default:
        goto LABEL_6;
    }
    do
    {
LABEL_77:
      v8 = v13;
      if (!off_1EE342948)
        goto LABEL_87;
      v62 = ((v14 & 0xFFC0FFFFFFFFC000) >> 14) ^ (((v14 & 0xFFC0FFFFFFFFC000) >> 14) >> 4);
      v63 = ((v62 ^ 0xDEADBEEF) + 32 * v62) ^ (((v62 ^ 0xDEADBEEF) + 32 * v62) >> 11);
      v64 = (char *)off_1EE342948 + 32;
      v65 = *((_DWORD *)off_1EE342948 + 3) & v63;
      v66 = *((_QWORD *)off_1EE342948 + 2 * v65 + 4);
      if (v66 != (v14 & 0xFFC0FFFFFFFFC000))
      {
        v67 = v63 + 1;
        while (v66 != -1)
        {
          v65 = *((_DWORD *)off_1EE342948 + 3) & v67;
          v66 = *(_QWORD *)&v64[16 * v65];
          ++v67;
          if (v66 == (v14 & 0xFFC0FFFFFFFFC000))
            goto LABEL_82;
        }
LABEL_87:
        v68 = 0;
        a3 = (os_unfair_lock_s *)MEMORY[8];
        if (v10 == (os_unfair_lock_s *)MEMORY[8])
          goto LABEL_83;
        goto LABEL_88;
      }
LABEL_82:
      v68 = *(_QWORD *)&v64[16 * v65 + 8];
      a3 = *(os_unfair_lock_s **)(v68 + 8);
      if (v10 == a3)
        goto LABEL_83;
LABEL_88:
      v71 = pas_segregated_page_switch_lock_slow(v68, v10, a3);
      v12.i64[0] = -1;
      v12.i64[1] = -1;
      v10 = v71;
LABEL_83:
      v69 = v68 + 4 * ((v14 >> 9) & 0x1F);
      v70 = 1 << (v14 >> 4);
      v18 = (*(_DWORD *)(v69 + 44) & ~v70) == 0;
      *(_DWORD *)(v69 + 44) &= ~v70;
      if (v18)
      {
        v72 = *(_QWORD *)(v68 + 32);
        if ((v72 & 7) != 0)
        {
          v73 = v72 & 0xFFFFFFFFFFFFFFF8;
          if (*(_BYTE *)(v68 + 1))
          {
            *(_BYTE *)(v68 + 2) = 1;
          }
          else
          {
            pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v73 + 8)) | ((unint64_t)*(unsigned __int8 *)(v73 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v73 + 12));
            v12.i64[0] = -1;
            v12.i64[1] = -1;
          }
          *(_QWORD *)(v68 + 32) = v73;
        }
        if (*(_QWORD *)(v68 + 24) == 1)
        {
          pas_segregated_page_note_emptiness(v68, 0);
          v12.i64[0] = -1;
          v12.i64[1] = -1;
          *(_QWORD *)(a1 + 8 * v8) = 0;
          if (!v8)
            goto LABEL_98;
        }
        else
        {
          --*(_QWORD *)(v68 + 24);
          *(_QWORD *)(a1 + 8 * v8) = 0;
          if (!v8)
            goto LABEL_98;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 8 * v8) = 0;
        if (!v8)
          goto LABEL_98;
      }
      v13 = v8 - 1;
      v14 = *(_QWORD *)(a1 + 8 * (v8 - 1));
    }
    while ((v14 & 0x3F000000000000) == 0x9000000000000);
  }
  while (v8);
LABEL_98:
  if (v10)
  {
    v74 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v75 = __ldxr(&v10->_os_unfair_lock_opaque);
      if (v75 != v74)
        break;
      if (!__stlxr(0, &v10->_os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(v10);
  }
}

uint64_t stop_allocator(uint64_t result, int a2, unsigned int a3, _BYTE *a4, _BYTE *a5, uint64_t a6)
{
  const void *v9;
  unsigned int v10;
  unsigned int v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  int v16;
  pid_t v17;
  int v18;
  int v19;
  __uint64_t v20;
  char v21[256];
  uint64_t v22;

  v9 = (const void *)result;
  v22 = *MEMORY[0x1E0C80C00];
  if (a2 != 1)
  {
    v10 = a4[3];
LABEL_5:
    if (v10 > 3 || v10 == 2)
    {
      if (!*(_BYTE *)a6)
      {
        *(_BYTE *)a6 = 1;
        v14 = *(_opaque_pthread_t **)(result + 8040);
        result = (uint64_t)pthread_self();
        *(_BYTE *)(a6 + 1) = v14 == (_opaque_pthread_t *)result;
        if (v14 != (_opaque_pthread_t *)result)
        {
          v15 = pthread_mach_thread_np(v14);
          *(_DWORD *)(a6 + 4) = v15;
          result = thread_suspend(v15);
          if ((_DWORD)result)
          {
            v16 = result;
            v17 = getpid();
            pas_log("[%d] Failed to suspend pthread %p (mach thread %d) associated with TLC %p: %d\n", v17, v14, *(_DWORD *)(a6 + 4), v9, v16);
            v20 = 0;
            v18 = pthread_threadid_np(v14, &v20);
            getpid();
            if (v18)
              pas_log("[%d] thread %p does not have id\n");
            else
              pas_log("[%d] thread %p has id %llu\n");
            v19 = pthread_getname_np(v14, v21, 0x100uLL);
            getpid();
            if (v19)
              result = pas_log("[%d] thread %p does not have name\n");
            else
              result = pas_log("[%d] thread %p has name %s\n");
          }
        }
      }
      if (*a4)
        goto LABEL_22;
      switch(a4[3])
      {
        case 0:
        case 1:
        case 3:
          return result;
        case 2:
          result = pas_local_allocator_stop(a4, 0, 1);
          if ((result & 1) == 0)
            goto LABEL_22;
          break;
        case 4:
          result = pas_local_view_cache_stop(a4, 0);
          if ((result & 1) == 0)
            goto LABEL_22;
          break;
        default:
          goto LABEL_22;
      }
    }
    return result;
  }
  if (a4[2])
  {
    a4[2] = 0;
LABEL_22:
    *a5 = 1;
    return result;
  }
  v10 = a4[3];
  if (v10 > 3 || v10 == 2)
  {
    v13 = a4[1];
    if (v13 < pas_local_allocator_should_stop_count_for_suspend)
    {
      a4[1] = v13 + 1;
      *(_DWORD *)(*(_QWORD *)(result + 8024) + 4 * (a3 >> 5)) |= 1 << a3;
      *(_BYTE *)(result + 8048) = 1;
      goto LABEL_22;
    }
    goto LABEL_5;
  }
  return result;
}

uint64_t decommit_allocator_range(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned int *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 8016) + 20));
  v14 = pas_page_malloc_cached_alignment;
  if (pas_page_malloc_cached_alignment)
  {
    result = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_4;
    goto LABEL_3;
  }
  v14 = pas_page_malloc_alignment_slow();
  pas_page_malloc_cached_alignment = v14;
  result = pas_page_malloc_cached_alignment_shift;
  if (!pas_page_malloc_cached_alignment_shift)
  {
LABEL_3:
    result = pas_page_malloc_alignment_shift_slow();
    pas_page_malloc_cached_alignment_shift = result;
  }
LABEL_4:
  v16 = (a4 + v14 - 1) & -v14;
  v17 = v16 >> result;
  v18 = a5 >> result;
  if (v16 >> result >= a5 >> result)
    return result;
  v19 = v17 << result;
  v20 = v18 << result;
  if (a2 && (a2 != a6 || a3 != a7))
  {
    v23 = a2[a3];
    v24 = pas_compact_heap_reservation_base;
    if (v23 < 8)
      v24 = 0;
    v25 = v24 + v23;
    while (1)
    {
      while (1)
      {
        pas_thread_local_cache_layout_node_prepare_to_decommit(v25, a1, v19, v20);
        if (a2)
        {
          v26 = a2[++a3];
          v27 = pas_compact_heap_reservation_base;
          if (v26 < 8)
            v27 = 0;
          v25 = v27 + v26;
          if (v27 + v26)
            break;
        }
        a2 = (unsigned int *)*((_QWORD *)a2 + 129);
        if (a2)
        {
          a3 = 0;
          v28 = *a2;
          v29 = pas_compact_heap_reservation_base;
          if (v28 < 8)
            v29 = 0;
          v25 = v29 + v28;
          if (a2 == a6)
            goto LABEL_24;
        }
        else
        {
          a3 = 0;
          v25 = 0;
          if (!a6)
            goto LABEL_24;
        }
      }
      if (a2 == a6)
      {
LABEL_24:
        if (a3 == a7)
          break;
      }
    }
  }
  v21 = *(_QWORD *)(a1 + 8032);
  do
  {
    *(_DWORD *)(v21 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v17);
    ++v17;
  }
  while (v18 != v17);
  v22 = (void *)(a1 + v19);
  do
  {
    result = madvise(v22, v20 - v19, 7);
    if ((_DWORD)result != -1)
      break;
    result = (uint64_t)__error();
  }
  while (*(_DWORD *)result == 35);
  return result;
}

void pas_thread_local_cache_append_deallocation_slow(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(unsigned int *)(a1 + 8000);
  *(_QWORD *)(a1 + 8 * v8) = a2 | ((_QWORD)a3 << 48);
  *(_DWORD *)(a1 + 8000) = v8 + 1;
  pas_thread_local_cache_flush_deallocation_log(a1, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t pas_thread_local_cache_layout_add_node(unint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  unsigned int v5;
  unsigned __int8 v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t *v17;
  unint64_t StatusReg;
  unsigned int v19;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  _DWORD *v51;
  unint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  int v62;
  unsigned int v63;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v2 = pas_thread_local_cache_layout_next_allocator_index;
  v3 = &unk_1ECF57000;
  if ((a1 & 3) == 1)
  {
    *(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 4) = pas_thread_local_cache_layout_next_allocator_index;
    v4 = ((8 * *(unsigned __int16 *)(a1 & 0xFFFFFFFFFFFFFFFCLL)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 2) << 19))
       + pas_compact_heap_reservation_base;
    v5 = *(unsigned __int8 *)(v4 + 12);
    if ((a1 & 2) == 0)
      goto LABEL_11;
    goto LABEL_6;
  }
  if ((a1 & 3) != 0)
  {
    v4 = a1 & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 32) = pas_thread_local_cache_layout_next_allocator_index;
    v5 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 12);
    if ((a1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    if (v5)
    {
      if (*((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + v5) + 172))
      {
        v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 24))(*(_DWORD *)(v4 + 24) & 0x7FFFFFF);
        v3 = (_DWORD *)&unk_1ECF57000;
        pas_thread_local_cache_layout_next_allocator_index = ((3 * v6 + 15) >> 3) + v2;
        v7 = (_DWORD *)&unk_1ECF57000;
        if (!pas_thread_local_cache_layout_last_segment)
          goto LABEL_24;
      }
      else
      {
        pas_thread_local_cache_layout_next_allocator_index = v2 + 1;
        v7 = &unk_1ECF57000;
        if (!pas_thread_local_cache_layout_last_segment)
          goto LABEL_24;
      }
      goto LABEL_19;
    }
    v8 = 1;
LABEL_18:
    pas_thread_local_cache_layout_next_allocator_index = v8 + v2;
    v7 = &unk_1ECF57000;
    if (!pas_thread_local_cache_layout_last_segment)
      goto LABEL_24;
    goto LABEL_19;
  }
  v4 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 36) = pas_thread_local_cache_layout_next_allocator_index;
  v5 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 12);
  if ((a1 & 2) != 0)
    goto LABEL_6;
LABEL_11:
  v8 = 9;
  if (!v5)
    goto LABEL_18;
  v9 = *((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v5) + 15) + 63;
  if ((v9 & 0xFFFFFFFFFFFFFFC0) <= 0x80)
    v10 = 9;
  else
    v10 = ((v9 >> 3) + 56) >> 3;
  pas_thread_local_cache_layout_next_allocator_index = v10 + v2;
  v7 = (_DWORD *)&unk_1ECF57000;
  if (!pas_thread_local_cache_layout_last_segment)
    goto LABEL_24;
LABEL_19:
  if (v7[810] != 257)
  {
    __dmb(0xBu);
    v11 = pas_thread_local_cache_layout_last_segment;
    v12 = v7[810];
    v7[810] = v12 + 1;
    v13 = v3[634];
    if (a1 < 8)
      v13 = 0;
    *(_DWORD *)(v11 + 4 * v12) = a1 - v13;
    goto LABEL_30;
  }
LABEL_24:
  v14 = v2;
  v15 = (_DWORD *)pas_utility_heap_try_allocate_with_alignment(1040, 1, "pas_thread_local_cache_layout_segment");
  bzero(v15, 0x410uLL);
  v3 = &unk_1ECF57000;
  v16 = pas_compact_heap_reservation_base;
  if (a1 < 8)
    v16 = 0;
  *v15 = a1 - v16;
  v7[810] = 1;
  __dmb(0xBu);
  if (pas_thread_local_cache_layout_last_segment)
    v17 = (uint64_t *)(pas_thread_local_cache_layout_last_segment + 1032);
  else
    v17 = &pas_thread_local_cache_layout_first_segment;
  *v17 = (uint64_t)v15;
  pas_thread_local_cache_layout_last_segment = (uint64_t)v15;
  v2 = v14;
LABEL_30:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v19 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr((unsigned int *)&pas_thread_local_cache_layout_hashtable_lock))
  {
    if (!__stxr(v19, (unsigned int *)&pas_thread_local_cache_layout_hashtable_lock))
      goto LABEL_35;
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)&pas_thread_local_cache_layout_hashtable_lock);
  v3 = &unk_1ECF57000;
LABEL_35:
  if (a1 >= 8)
    v21 = *((_QWORD *)v3 + 317);
  else
    LODWORD(v21) = 0;
  v22 = a1 - v21;
  v23 = *((_QWORD *)v3 + 317) + (a1 - v21);
  v24 = v23 & 3;
  v23 &= 0xFFFFFFFFFFFFFFFCLL;
  v25 = (unsigned int *)(v23 + 4);
  v26 = (unsigned int *)(v23 + 32);
  v27 = (unsigned int *)(v23 + 36);
  if (v24)
    v27 = v26;
  if (v24 == 1)
    v27 = v25;
  v28 = *v27;
  if (dword_1ECF57C88 <= (2 * (dword_1ECF57C94 + dword_1ECF57C90)))
  {
    if (6 * dword_1ECF57C90 >= (2 * dword_1ECF57C88))
      v29 = 2 * dword_1ECF57C88;
    else
      v29 = dword_1ECF57C88;
    if (dword_1ECF57C88)
      v30 = v29;
    else
      v30 = 16;
    v31 = (void *)pas_large_utility_free_heap_allocate_for_allocation_config(4 * v30, (uint64_t)"pas_thread_local_cache_layout_hashtable/table");
    v32 = (uint64_t)v31;
    if (v30)
      bzero(v31, 4 * v30);
    v33 = pas_thread_local_cache_layout_hashtable_instance;
    v34 = dword_1ECF57C88;
    if (dword_1ECF57C88)
    {
      v35 = 0;
      v36 = pas_compact_heap_reservation_base;
      do
      {
        v37 = *(unsigned int *)(v33 + 4 * v35);
        if (v37 >= 8)
          v38 = v36;
        else
          v38 = 0;
        if ((unint64_t)(v38 + v37) >= 2)
        {
          v39 = (v36 + v37) & 3;
          v40 = (v36 + v37) & 0xFFFFFFFFFFFFFFFCLL;
          v41 = (_DWORD *)(v40 + 4);
          v42 = (_DWORD *)(v40 + 32);
          v43 = (_DWORD *)(v40 + 36);
          if (v39)
            v43 = v42;
          if (v39 == 1)
            v43 = v41;
          v44 = ((*v43 ^ (*v43 >> 4) ^ 0xDEADBEEF) + 32 * (*v43 ^ (*v43 >> 4))) ^ (((*v43 ^ (*v43 >> 4) ^ 0xDEADBEEF)
                                                                                  + 32 * (*v43 ^ (*v43 >> 4))) >> 11);
          do
          {
            v45 = v44 & (v30 - 1);
            v46 = *(unsigned int *)(v32 + 4 * v45);
            if (v46 >= 8)
              v47 = v36;
            else
              v47 = 0;
            ++v44;
          }
          while ((unint64_t)(v47 + v46) > 1);
          *(_DWORD *)(v32 + 4 * v45) = v37;
          v36 = pas_compact_heap_reservation_base;
        }
        ++v35;
      }
      while (v35 != v34);
      v48 = 4 * v34;
    }
    else
    {
      v48 = 0;
    }
    pas_thread_local_cache_layout_hashtable_instance = v32;
    dword_1ECF57C88 = v30;
    dword_1ECF57C8C = v30 - 1;
    dword_1ECF57C94 = 0;
    pas_large_utility_free_heap_deallocate_for_allocation_config(v33, v48);
    v3 = &unk_1ECF57000;
  }
  v49 = (v28 ^ (v28 >> 4) ^ 0xDEADBEEF) + 32 * (v28 ^ (v28 >> 4));
  v50 = v49 ^ (v49 >> 11);
  v51 = (_DWORD *)(pas_thread_local_cache_layout_hashtable_instance + 4 * (dword_1ECF57C8C & v50));
  v52 = *v51;
  if ((_DWORD)v52)
  {
    v53 = 0;
    v54 = *((_QWORD *)v3 + 317);
    v55 = v50 + 1;
    do
    {
      if (v52 >= 8)
        v56 = v54;
      else
        v56 = 0;
      if (v56 + v52 == 1)
      {
        if (!v53)
          v53 = v51;
      }
      else
      {
        v57 = v54 + v52;
        v58 = v57 & 3;
        v57 &= 0xFFFFFFFFFFFFFFFCLL;
        v59 = (_DWORD *)(v57 + 4);
        v60 = (_DWORD *)(v57 + 32);
        v61 = (_DWORD *)(v57 + 36);
        if (v58)
          v61 = v60;
        if (v58 == 1)
          v61 = v59;
        if (*v61 == v28)
          goto LABEL_89;
      }
      v51 = (_DWORD *)(pas_thread_local_cache_layout_hashtable_instance + 4 * (v55 & dword_1ECF57C8C));
      v52 = *v51;
      ++v55;
    }
    while ((_DWORD)v52);
    if (v53)
    {
      --dword_1ECF57C94;
      v51 = v53;
    }
  }
  ++dword_1ECF57C90;
LABEL_89:
  *v51 = v22;
  v62 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v63 = __ldxr((unsigned int *)&pas_thread_local_cache_layout_hashtable_lock);
    if (v63 != v62)
      break;
    if (!__stlxr(0, (unsigned int *)&pas_thread_local_cache_layout_hashtable_lock))
      return v2;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)&pas_thread_local_cache_layout_hashtable_lock);
  return v2;
}

uint64_t pas_thread_local_cache_layout_get_node_for_index(unsigned int a1)
{
  unint64_t StatusReg;
  unsigned int v3;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr((unsigned int *)&pas_thread_local_cache_layout_hashtable_lock))
  {
    if (!__stxr(v3, (unsigned int *)&pas_thread_local_cache_layout_hashtable_lock))
    {
      v5 = pas_thread_local_cache_layout_hashtable_instance;
      v6 = (_QWORD *)&unk_1ECF57000;
      if (!pas_thread_local_cache_layout_hashtable_instance)
        goto LABEL_19;
LABEL_7:
      v7 = (a1 ^ (a1 >> 4) ^ 0xDEADBEEF) + 32 * (a1 ^ (a1 >> 4));
      v8 = v7 ^ (v7 >> 11);
      v9 = v6[317];
      while (1)
      {
        v15 = *(unsigned int *)(v5 + 4 * (v8 & dword_1ECF57C8C));
        if (v15 >= 8)
          v16 = v6[317];
        else
          v16 = 0;
        v17 = v16 + v15;
        if (v17 > 1)
        {
          v10 = (v9 + v15) & 3;
          v11 = (v9 + v15) & 0xFFFFFFFFFFFFFFFCLL;
          v12 = (_DWORD *)(v11 + 4);
          v13 = (_DWORD *)(v11 + 32);
          v14 = (_DWORD *)(v11 + 36);
          if (v10)
            v14 = v13;
          if (v10 == 1)
            v14 = v12;
          if (*v14 == a1)
            goto LABEL_20;
        }
        else if (v17 != 1)
        {
          goto LABEL_19;
        }
        ++v8;
      }
    }
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)&pas_thread_local_cache_layout_hashtable_lock);
  v5 = pas_thread_local_cache_layout_hashtable_instance;
  v6 = &unk_1ECF57000;
  if (pas_thread_local_cache_layout_hashtable_instance)
    goto LABEL_7;
LABEL_19:
  LODWORD(v15) = 0;
LABEL_20:
  v18 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v19 = __ldxr((unsigned int *)&pas_thread_local_cache_layout_hashtable_lock);
    if (v19 != v18)
      break;
    if (!__stlxr(0, (unsigned int *)&pas_thread_local_cache_layout_hashtable_lock))
      goto LABEL_25;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)&pas_thread_local_cache_layout_hashtable_lock);
LABEL_25:
  v20 = v6[317];
  if (v15 < 8)
    v20 = 0;
  return v20 + v15;
}

double pas_thread_local_cache_layout_node_commit_and_construct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  __int16 v21;
  char v22;
  unint64_t v23;
  unsigned int v24;
  char v25;
  char v26;

  v4 = a1 & 3;
  v5 = (unsigned __int16 *)(a1 & 0xFFFFFFFFFFFFFFFCLL);
  if (v4 != 1)
  {
    v6 = (unsigned int *)(v5 + 16);
    if ((a1 & 3) == 0)
      v6 = (unsigned int *)(v5 + 18);
    v7 = *v6;
    v8 = *((unsigned __int8 *)v5 + 12);
    if ((a1 & 2) == 0)
      goto LABEL_5;
LABEL_13:
    if (v8 && *((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + v8) + 172))
      v14 = (3
           * (*(unsigned __int8 (**)(_QWORD))(**((_QWORD **)v5 + 2) + 24))(*((_DWORD *)v5 + 6) & 0x7FFFFFF)
           + 15) >> 3;
    else
      v14 = 1;
    pas_thread_local_cache_ensure_committed(a2, v7, v14 + v7);
    v15 = (unsigned __int16 *)(a1 & 0xFFFFFFFFFFFFFFFCLL);
    if (v4 == 1)
    {
      v16 = a2 + 8 * *((unsigned int *)v15 + 1) + 8064;
      v15 = (unsigned __int16 *)(((8 * *v15) | ((unint64_t)*((unsigned __int8 *)v15 + 2) << 19))
                               + pas_compact_heap_reservation_base);
      v17 = *((unsigned __int8 *)v15 + 12);
      if (!*((_BYTE *)v15 + 12))
        goto LABEL_40;
    }
    else if (v4)
    {
      v16 = a2 + 8 * *((unsigned int *)v15 + 8) + 8064;
      v17 = *((unsigned __int8 *)v15 + 12);
      if (!*((_BYTE *)v15 + 12))
        goto LABEL_40;
    }
    else
    {
      v16 = a2 + 8 * *((unsigned int *)v15 + 9) + 8064;
      v17 = *((unsigned __int8 *)v15 + 12);
      if (!*((_BYTE *)v15 + 12))
        goto LABEL_40;
    }
    if (*((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + v17) + 172))
    {
      v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v15 + 2) + 24))(*((_DWORD *)v15 + 6) & 0x7FFFFFF);
LABEL_41:
      result = 2.05226843e-289;
      *(_DWORD *)v16 = 0x4000000;
      *(_BYTE *)(v16 + 4) = v26;
      *(_WORD *)(v16 + 5) = 0;
      *(_BYTE *)(v16 + 7) = 1;
      return result;
    }
LABEL_40:
    v26 = 0;
    goto LABEL_41;
  }
  v13 = (unsigned int *)(v5 + 2);
  v5 = (unsigned __int16 *)(((8 * *v5) | ((unint64_t)*((unsigned __int8 *)v5 + 2) << 19))
                          + pas_compact_heap_reservation_base);
  v7 = *v13;
  v8 = *((unsigned __int8 *)v5 + 12);
  if ((a1 & 2) != 0)
    goto LABEL_13;
LABEL_5:
  v9 = 9;
  if (v8)
  {
    v10 = *((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v8) + 15) + 63;
    if ((v10 & 0xFFFFFFFFFFFFFFC0) <= 0x80)
      v9 = 9;
    else
      v9 = ((v10 >> 3) + 56) >> 3;
  }
  pas_thread_local_cache_ensure_committed(a2, v7, v9 + v7);
  v11 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  if (v4 == 1)
  {
    v18 = a2 + 8 * *(unsigned int *)(v11 + 4) + 8064;
    v11 = ((8 * *(unsigned __int16 *)v11) | ((unint64_t)*(unsigned __int8 *)(v11 + 2) << 19))
        + pas_compact_heap_reservation_base;
  }
  else
  {
    if (v4)
      v12 = *(unsigned int *)(v11 + 32);
    else
      v12 = *(unsigned int *)(v11 + 36);
    v18 = a2 + 8 * v12 + 8064;
  }
  result = 4.77830976e-299;
  *(_DWORD *)v18 = 0x2000000;
  *(_QWORD *)(v18 + 8) = 0;
  *(_DWORD *)(v18 + 16) = 0;
  *(_DWORD *)(v18 + 20) = *(_DWORD *)(v11 + 24) & 0x7FFFFFF;
  *(_BYTE *)(v18 + 4) = *(_DWORD *)(v11 + 24) >> 27;
  v20 = v11 | 5;
  if (!v11)
    v20 = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 48) = v20;
  v21 = *(_WORD *)(v11 + 12);
  if ((_BYTE)v21)
  {
    if (v21 >= 5u)
      v22 = 0;
    else
      v22 = 2 * v21 + 2;
    *(_BYTE *)(v18 + 5) = v22;
    *(_BYTE *)(v18 + 6) = 0;
  }
  else
  {
    v23 = v11 + 48;
    v24 = *(unsigned __int8 *)(((8 * *(unsigned __int16 *)(v11 + 72)) | ((unint64_t)*(unsigned __int8 *)(v11 + 74) << 19))
                             + pas_compact_heap_reservation_base
                             + 124);
    if (v24 >= 6)
      v25 = 0;
    else
      v25 = v24 + 12;
    *(_BYTE *)(v18 + 5) = v25;
    *(_QWORD *)(v18 + 56) = v23;
    *(_QWORD *)(v18 + 64) = 0;
    *(_BYTE *)(v18 + 6) = 0;
  }
  return result;
}

void pas_thread_local_cache_layout_node_move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  if ((a1 & 3) == 1)
  {
    v7 = ((8 * *(unsigned __int16 *)(a1 & 0xFFFFFFFFFFFFFFFCLL)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 2) << 19))
       + pas_compact_heap_reservation_base;
    v8 = *(unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    v9 = *(unsigned __int8 *)(v7 + 12);
    if ((a1 & 2) == 0)
      goto LABEL_5;
  }
  else
  {
    v6 = (unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 32);
    if ((a1 & 3) == 0)
      v6 = (unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 36);
    v7 = a1 & 0xFFFFFFFFFFFFFFFCLL;
    v8 = *v6;
    v9 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 12);
    if ((a1 & 2) == 0)
    {
LABEL_5:
      v10 = 9;
      if (v9)
      {
        v11 = *((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v9) + 15) + 63;
        if ((v11 & 0xFFFFFFFFFFFFFFC0) <= 0x80)
          v12 = 9;
        else
          v12 = ((v11 >> 3) + 56) >> 3;
        v13 = v12 + v8;
        LOBYTE(v14) = pas_page_malloc_cached_alignment_shift;
        if (!pas_page_malloc_cached_alignment_shift)
          goto LABEL_18;
        goto LABEL_19;
      }
LABEL_17:
      v13 = v10 + v8;
      LOBYTE(v14) = pas_page_malloc_cached_alignment_shift;
      if (pas_page_malloc_cached_alignment_shift)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  if (!v9)
  {
    v10 = 1;
    goto LABEL_17;
  }
  if (*((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + v9) + 172))
  {
    v13 = ((3
          * (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 24))(*(_DWORD *)(v7 + 24) & 0x7FFFFFF)
          + 15) >> 3)
        + v8;
    LOBYTE(v14) = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_19;
    goto LABEL_18;
  }
  v13 = v8 + 1;
  LOBYTE(v14) = pas_page_malloc_cached_alignment_shift;
  if (!pas_page_malloc_cached_alignment_shift)
  {
LABEL_18:
    v14 = pas_page_malloc_alignment_shift_slow();
    pas_page_malloc_cached_alignment_shift = v14;
  }
LABEL_19:
  v15 = (unint64_t)(8 * v8 + 8064) >> v14;
  v16 = (8 * (unint64_t)v13 + 8063) >> v14;
  if (v15 <= v16)
  {
    v19 = *(_QWORD *)(a3 + 8032);
    if (((*(_DWORD *)(v19 + ((v15 >> 3) & 0x1FFFFFFFCLL)) >> v15) & 1) == 0)
      goto LABEL_28;
    v20 = v15 + 1;
    while (v20 - v16 != 1)
    {
      v21 = v20 + 1;
      v22 = *(_DWORD *)(v19 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v20;
      ++v20;
      if ((v22 & 1) == 0)
      {
        if (v21 - 2 >= v16)
          break;
        goto LABEL_28;
      }
    }
  }
  v17 = (_QWORD *)(a3 + 8 * v8 + 8064);
  if (!*(_BYTE *)(a3 + 8 * v8 + 8067))
  {
LABEL_28:
    pas_thread_local_cache_layout_node_commit_and_construct(a1, a2);
    return;
  }
  v18 = (void *)(a2 + 8 * v8 + 8064);
  if ((a1 & 2) != 0)
    memcpy(v18, v17, (3 * *(unsigned __int8 *)(a3 + 8 * v8 + 8068) + 15) & 0x7F8);
  else
    pas_local_allocator_move((uint64_t)v18, v17);
}

BOOL pas_thread_local_cache_layout_node_is_committed(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if ((a1 & 3) == 1)
  {
    v3 = ((8 * *(unsigned __int16 *)(a1 & 0xFFFFFFFFFFFFFFFCLL)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 2) << 19))
       + pas_compact_heap_reservation_base;
    v5 = *(unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    v6 = *(unsigned __int8 *)(v3 + 12);
    if ((a1 & 2) == 0)
      goto LABEL_6;
  }
  else
  {
    v3 = a1 & 0xFFFFFFFFFFFFFFFCLL;
    if ((a1 & 3) != 0)
      v4 = (unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 32);
    else
      v4 = (unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 36);
    v5 = *v4;
    v6 = *(unsigned __int8 *)(v3 + 12);
    if ((a1 & 2) == 0)
    {
LABEL_6:
      v7 = 9;
      if (v6)
      {
        v8 = *((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v6) + 15) + 63;
        if ((v8 & 0xFFFFFFFFFFFFFFC0) <= 0x80)
          v9 = 9;
        else
          v9 = ((v8 >> 3) + 56) >> 3;
        v10 = v9 + v5;
        LOBYTE(v11) = pas_page_malloc_cached_alignment_shift;
        if (!pas_page_malloc_cached_alignment_shift)
          goto LABEL_19;
        goto LABEL_20;
      }
LABEL_18:
      v10 = v7 + v5;
      LOBYTE(v11) = pas_page_malloc_cached_alignment_shift;
      if (pas_page_malloc_cached_alignment_shift)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
  if (!v6)
  {
    v7 = 1;
    goto LABEL_18;
  }
  if (*((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + v6) + 172))
  {
    v10 = ((3
          * (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 24))(*(_DWORD *)(v3 + 24) & 0x7FFFFFF)
          + 15) >> 3)
        + v5;
    LOBYTE(v11) = pas_page_malloc_cached_alignment_shift;
    if (pas_page_malloc_cached_alignment_shift)
      goto LABEL_20;
    goto LABEL_19;
  }
  v10 = v5 + 1;
  LOBYTE(v11) = pas_page_malloc_cached_alignment_shift;
  if (!pas_page_malloc_cached_alignment_shift)
  {
LABEL_19:
    v11 = pas_page_malloc_alignment_shift_slow();
    pas_page_malloc_cached_alignment_shift = v11;
  }
LABEL_20:
  v12 = (unint64_t)(8 * v5 + 8064) >> v11;
  v13 = (8 * (unint64_t)v10 + 8063) >> v11;
  if (v12 > v13)
    return 1;
  v15 = *(_QWORD *)(a2 + 8032);
  if (((*(_DWORD *)(v15 + ((v12 >> 3) & 0x1FFFFFFFCLL)) >> v12) & 1) == 0)
    return 0;
  while (v13 != v12)
  {
    ++v12;
    if (((*(_DWORD *)(v15 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v12) & 1) == 0)
      return v12 - 1 >= v13;
  }
  return 1;
}

void pas_thread_local_cache_layout_node_prepare_to_decommit(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;

  if ((a1 & 3) == 1)
  {
    v7 = ((8 * *(unsigned __int16 *)(a1 & 0xFFFFFFFFFFFFFFFCLL)) | ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 2) << 19))
       + pas_compact_heap_reservation_base;
    v9 = *(unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    v10 = *(unsigned __int8 *)(v7 + 12);
    if ((a1 & 2) == 0)
      goto LABEL_6;
LABEL_13:
    if (v10)
    {
      if (*((_BYTE *)*(&pas_segregated_page_config_kind_for_config_table + v10) + 172))
      {
        v11 = (3
             * (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 24))(*(_DWORD *)(v7 + 24) & 0x7FFFFFF)
             + 15) >> 3;
        if (a3 == a4)
          return;
      }
      else
      {
        v11 = 1;
        if (a3 == a4)
          return;
      }
      goto LABEL_19;
    }
    v11 = 1;
LABEL_18:
    if (a3 == a4)
      return;
    goto LABEL_19;
  }
  v7 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a1 & 3) != 0)
    v8 = (unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 32);
  else
    v8 = (unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 36);
  v9 = *v8;
  v10 = *(unsigned __int8 *)(v7 + 12);
  if ((a1 & 2) != 0)
    goto LABEL_13;
LABEL_6:
  v11 = 9;
  if (!v10)
    goto LABEL_18;
  v12 = *((_QWORD *)*(&pas_segregated_page_config_kind_for_config_table + v10) + 15) + 63;
  if ((v12 & 0xFFFFFFFFFFFFFFC0) <= 0x80)
    v11 = 9;
  else
    v11 = ((v12 >> 3) + 56) >> 3;
  if (a3 != a4)
  {
LABEL_19:
    v13 = 8 * (v11 + v9);
    v14 = 8 * v9 == v13;
    v15 = v13 + 8064;
    if (!v14 && a4 > 8 * v9 + 8064 && v15 > a3)
    {
      os_unfair_lock_assert_owner(&pas_heap_lock);
      *(_BYTE *)(a2 + 8 * v9 + 8067) = 0;
    }
  }
}

_QWORD *pas_thread_local_cache_node_allocate()
{
  _QWORD *result;
  uint64_t v1;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  result = (_QWORD *)pas_thread_local_cache_node_first_free;
  if (pas_thread_local_cache_node_first_free)
  {
    pas_thread_local_cache_node_first_free = *(_QWORD *)pas_thread_local_cache_node_first_free;
    *result = 0;
    result[3] = 0;
  }
  else
  {
    result = (_QWORD *)pas_immortal_heap_allocate_with_alignment(0x40uLL, 0x40uLL, (uint64_t)"pas_thread_local_cache_node", 0);
    *result = 0;
    v1 = pas_thread_local_cache_node_first;
    result[2] = 0;
    result[3] = 0;
    result[1] = v1;
    __dmb(0xBu);
    pas_thread_local_cache_node_first = (uint64_t)result;
  }
  return result;
}

uint64_t pas_utility_heap_try_allocate_with_alignment(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t small_segregated_slow;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = (a1 + a2 - 1) & -(uint64_t)a2;
  v7 = (unint64_t)(v6 + 7) >> 3;
  if ((unint64_t)(v6 + 7) < 0x580)
  {
    v8 = qword_1ECF57F88;
    if (qword_1ECF57F88)
      goto LABEL_3;
LABEL_6:
    v10 = 54912;
    v11 = pas_immortal_heap_allocate(0xD680uLL, (uint64_t)"pas_utility_heap_allocators", 0);
    v8 = v11;
    do
    {
      *(_DWORD *)(v11 + v10 - 312) = 0x2000000;
      v12 = (_OWORD *)(v11 + v10 - 308);
      *v12 = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *(_OWORD *)((char *)v12 + 44) = 0uLL;
      v10 -= 312;
    }
    while (v10);
    qword_1ECF57F88 = v11;
    v9 = v11 + 312 * v7;
    if (!*(_QWORD *)(v9 + 48))
      goto LABEL_10;
LABEL_9:
    if (1 << *(_BYTE *)(v9 + 4) >= a2)
      goto LABEL_21;
    goto LABEL_10;
  }
  pas_log("Cannot allocate size = %zu (alignment = %zu, aligned_size = %zu, index = %zu) with utility heap.\n", a1, a2, (a1 + a2 - 1) & -(uint64_t)a2, (unint64_t)(v6 + 7) >> 3);
  v8 = qword_1ECF57F88;
  if (!qword_1ECF57F88)
    goto LABEL_6;
LABEL_3:
  v9 = v8 + 312 * v7;
  if (*(_QWORD *)(v9 + 48))
    goto LABEL_9;
LABEL_10:
  ++qword_1ECF57F90;
  v13 = pas_segregated_heap_ensure_size_directory_for_size((uint64_t)&pas_utility_segregated_heap, (a1 + a2 - 1) & -(uint64_t)a2, a2, 1, (uint64_t)&pas_utility_heap_config, 0, 1);
  *(_DWORD *)v9 = 0x2000000;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(v13 + 24) & 0x7FFFFFF;
  *(_BYTE *)(v9 + 4) = *(_DWORD *)(v13 + 24) >> 27;
  v14 = v13 | 5;
  if (!v13)
    v14 = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 48) = v14;
  v15 = *(_WORD *)(v13 + 12);
  if ((_BYTE)v15)
  {
    v16 = 2 * v15 + 2;
    if (v15 >= 5u)
      v16 = 0;
    *(_BYTE *)(v9 + 5) = v16;
  }
  else
  {
    v17 = *(unsigned __int8 *)(((8 * *(unsigned __int16 *)(v13 + 72)) | ((unint64_t)*(unsigned __int8 *)(v13 + 74) << 19))
                             + pas_compact_heap_reservation_base
                             + 124);
    if (v17 >= 6)
      v18 = 0;
    else
      v18 = v17 + 12;
    *(_BYTE *)(v9 + 5) = v18;
    *(_QWORD *)(v9 + 56) = v13 + 48;
    *(_QWORD *)(v9 + 64) = 0;
  }
  *(_BYTE *)(v9 + 6) = 0;
LABEL_21:
  *(_BYTE *)v9 = 1;
  v19 = *(unsigned int *)(v9 + 16);
  if ((_DWORD)v19)
  {
    *(_DWORD *)(v9 + 16) = v19 - *(_DWORD *)(v9 + 20);
    v20 = *(_QWORD *)(v9 + 8) - v19;
    *(_BYTE *)v9 = 0;
    if (!v20)
      return v20;
    goto LABEL_26;
  }
  v21 = *(_QWORD *)(v9 + 40);
  v22 = *(_QWORD *)(v9 + 24);
  if (v21)
  {
LABEL_25:
    v23 = __clz(v21);
    *(_QWORD *)(v9 + 40) = v21 & ~(0x8000000000000000 >> v23);
    v20 = v22 + 8 * v23;
    *(_BYTE *)v9 = 0;
    if (!v20)
      return v20;
    goto LABEL_26;
  }
  if (*(_BYTE *)(v9 + 5) == 4)
  {
    v25 = *(unsigned int *)(v9 + 32);
    v26 = *(_DWORD *)(v9 + 36);
    if (v25 < v26)
    {
      *(_QWORD *)(v9 + 8 * v25 + 56) = 0;
      v27 = (unint64_t *)(8 * v25 + 312 * v7 + v8 + 64);
      v28 = v26 - 1 - v25;
      while (v28)
      {
        v22 += 512;
        v30 = *v27++;
        v29 = v30;
        LODWORD(v25) = v25 + 1;
        --v28;
        if (v30)
        {
          v21 = __rbit64(v29);
          *(_DWORD *)(v9 + 32) = v25;
          *(_QWORD *)(v9 + 24) = v22;
          goto LABEL_25;
        }
      }
      *(_DWORD *)(v9 + 32) = v26;
    }
    small_segregated_slow = pas_utility_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v9, 0, (uint64_t)&pas_utility_allocator_counts, (uint64_t (*)(uint64_t, uint64_t))pas_allocation_result_identity_3);
  }
  else
  {
    small_segregated_slow = pas_utility_heap_config_specialized_local_allocator_try_allocate_slow(v9, (a1 + a2 - 1) & -(uint64_t)a2, a2, 0, (uint64_t)&pas_utility_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_identity_3);
  }
  v20 = small_segregated_slow;
  if (small_segregated_slow)
  {
LABEL_26:
    if (pas_allocation_callback)
      pas_allocation_callback(v20, a1, 4, a3, 0);
  }
  return v20;
}

void pas_utility_heap_deallocate(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (a1)
  {
    if (pas_deallocation_callback)
      pas_deallocation_callback(a1, 0, 4, 0);
    v2 = a1 & 0xFFFFFFFFFFFFC000;
    v3 = a1 & 0xFFFFFFFFFFFFC000 | (4 * ((a1 >> 8) & 0x3F));
    v4 = *(_DWORD *)(v3 + 0x2C) & ~(1 << (a1 >> 3));
    *(_DWORD *)(v3 + 44) = v4;
    v5 = *(_QWORD *)(v2 + 32);
    if ((v5 & 7) != 0)
    {
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (*(_BYTE *)(v2 + 1))
        *(_BYTE *)(v2 + 2) = 1;
      else
        pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v6 + 8)) | ((unint64_t)*(unsigned __int8 *)(v6 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v6 + 12));
      *(_QWORD *)(v2 + 32) = v6;
    }
    if (!v4)
    {
      if (*(_QWORD *)(v2 + 24) == 1)
        pas_segregated_page_note_emptiness(v2, 0);
      else
        --*(_QWORD *)(v2 + 24);
    }
  }
}

unint64_t pas_utility_heap_allocate_page()
{
  unint64_t v0;
  unint64_t v1;
  _OWORD v3[3];

  memset(v3, 0, sizeof(v3));
  os_unfair_lock_assert_owner(&pas_heap_lock);
  initialize_config_0((uint64_t)v3);
  v0 = try_allocate_without_fixing(&pas_compact_bootstrap_free_heap, 0x4000uLL, 0x4000uLL, 0, (unint64_t *)v3);
  v1 = v0;
  if (v0 && pas_allocation_callback)
    pas_allocation_callback(v0, 0x4000, 1, "pas_utility_heap/page", 1);
  return v1;
}

uint64_t pas_utility_heap_shared_page_directory_selector()
{
  return 0;
}

uint64_t pas_utility_heap_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(uint64_t a1)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  v1 = ((8 * *(unsigned __int16 *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
     + pas_compact_heap_reservation_base;
  v2 = *(_DWORD *)(a1 + 20);
  v3 = (1 << *(_BYTE *)(a1 + 4));
  v4 = (*(unsigned int *)(v1 + 20) + v3 - 1) & -v3;
  if (v2 + (_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = a1 + 56;
    v9 = -1;
    v10 = -1;
    do
    {
      v11 = *(_DWORD *)(v7 + 4 * v6);
      v12 = v11 == 0;
      v13 = v11 != 0;
      v14 = v12;
      if (!v12)
        v10 = v6;
      if (((v14 | v5) & 1) == 0)
        v9 = v6;
      v5 |= v13;
      ++v6;
    }
    while (v6 != 64);
    v8 = *(_QWORD *)(a1 + 48);
    v15 = v8 & 0xFFFFFFFFFFFFFFF8;
    v16 = v10 - v9 + 1;
    *(_BYTE *)(v15 + 17) = v16;
    *(_BYTE *)(v15 + 18) = v9;
    if (v10 == v9)
    {
      v17 = 4;
      v18 = (void *)(v8 & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v17 = 4 * v16;
      v18 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v16, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
    }
    v19 = (unint64_t)v18 - 4 * v9;
    memcpy(v18, (const void *)(v7 + 4 * v9), v17);
    __dmb(0xAu);
    v20 = *(unsigned int *)(v15 + 12);
    v21 = pas_compact_heap_reservation_base;
    if (v20 >= 8)
      v22 = pas_compact_heap_reservation_base;
    else
      v22 = 0;
    v23 = v22 + v20;
    if ((v23 & 1) != 0)
    {
      pas_utility_heap_deallocate(v23 & 0xFFFFFFFFFFFFFFFELL);
      v21 = pas_compact_heap_reservation_base;
    }
    if (v19 >= 8 && v19 - v21 >= pas_compact_heap_reservation_size)
    {
      v24 = pas_utility_heap_try_allocate_with_alignment(8, 1, "pas_lenient_compact_unsigned_ptr/box");
      *(_QWORD *)v24 = v19;
      v19 = v24 | 1;
      LODWORD(v21) = pas_compact_heap_reservation_base;
    }
    result = 0;
    if (v19 < 8)
      LODWORD(v21) = 0;
    *(_DWORD *)(v15 + 12) = v19 - v21;
  }
  else
  {
    if (!v2 && (v4 & 0xFFFFFF00) == 0)
    {
      while (1)
        ;
    }
    *(_DWORD *)(v1 + 20) = 0;
    v26 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = v26 + (v2 + v4);
    *(_DWORD *)(a1 + 16) = 0;
    return v26 + v4;
  }
  return result;
}

BOOL pas_utility_heap_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t StatusReg;
  uint64_t v9;
  unint64_t first_eligible;
  os_unfair_lock_s *v11;
  os_unfair_lock *v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;

  v4 = *(_DWORD *)(a1 + 20);
  v5 = 1 << *(_BYTE *)(a1 + 4);
  v6 = v5 - 1;
  v7 = -(uint64_t)v5;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (2)
  {
    v9 = *(_QWORD *)(a3 + 16);
    first_eligible = pas_segregated_shared_page_directory_find_first_eligible(0, v4, v5, 0);
    v11 = (os_unfair_lock_s *)first_eligible;
    v12 = (os_unfair_lock *)(first_eligible + 8);
    v13 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v12->_os_unfair_lock_opaque))
    {
      if (!__stxr(v13, &v12->_os_unfair_lock_opaque))
      {
        v15 = *(_QWORD *)first_eligible;
        if ((*(_QWORD *)first_eligible & 1) == 0)
          goto LABEL_6;
LABEL_9:
        v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        if ((v15 & 0xFFFFFFFFFFFFFFFELL) != 0)
          goto LABEL_10;
LABEL_12:
        v18 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v19 = __ldxr(&v12->_os_unfair_lock_opaque);
          if (v19 != v18)
            break;
          if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
            return v16 != 0;
        }
        goto LABEL_50;
      }
    }
    __clrex();
    os_unfair_lock_lock((os_unfair_lock_t)(first_eligible + 8));
    v15 = *(_QWORD *)&v11->_os_unfair_lock_opaque;
    if ((*(_QWORD *)&v11->_os_unfair_lock_opaque & 1) != 0)
      goto LABEL_9;
LABEL_6:
    v16 = (uint64_t *)pas_segregated_shared_view_commit_page(v11, v9, 0, a2, (uint64_t)&unk_1E35BEF30);
    if (!v16)
      goto LABEL_12;
LABEL_10:
    v17 = *v16;
    if (v4 + ((v6 + v11[5]._os_unfair_lock_opaque) & v7))
      continue;
    break;
  }
  if (!v4 && ((v6 + v11[5]._os_unfair_lock_opaque) & v7 & 0xFFFFFF00) == 0)
  {
    while (1)
      ;
  }
  v11[5]._os_unfair_lock_opaque = 0;
  *(_BYTE *)(a2 + 19) |= 1u;
  ++v11[6]._os_unfair_lock_opaque;
  *(_BYTE *)(a2 + 19) &= ~4u;
  v20 = (unint64_t)v11 - pas_compact_heap_reservation_base;
  *(_BYTE *)(a2 + 4) = ((unint64_t)v11 - pas_compact_heap_reservation_base) >> 3;
  *(_BYTE *)(a2 + 5) = v20 >> 11;
  *(_BYTE *)(a2 + 6) = v20 >> 19;
  if (((*(_BYTE *)(a1 + 5) - 4) & 0xF8) != 0)
    v21 = 3;
  else
    v21 = 0xB0B090907070505uLL >> (8 * (*(_BYTE *)(a1 + 5) - 4));
  *(_BYTE *)(a1 + 5) = v21;
  *(_OWORD *)(a1 + 56) = 0u;
  v22 = a1 + 56;
  *(_QWORD *)(a1 + 24) = v17;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 48) = a2 | 4;
  *(_BYTE *)(a2 + 19) |= 0x10u;
  v23 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v24 = __ldxr(&v12->_os_unfair_lock_opaque);
    if (v24 != v23)
      break;
    if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
      goto LABEL_27;
  }
  __clrex();
  os_unfair_lock_unlock(v12);
LABEL_27:
  v25 = *(_DWORD *)(StatusReg + 24);
  v12 = &pas_heap_lock;
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v25, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_36;
  }
  __clrex();
  v27 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v27, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_36;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_36:
  v29 = *(unsigned int *)(a2 + 12);
  v30 = pas_compact_heap_reservation_base;
  if (v29 >= 8)
    v31 = pas_compact_heap_reservation_base;
  else
    v31 = 0;
  v32 = v31 + v29;
  if ((v32 & 1) != 0)
  {
    pas_utility_heap_deallocate(v32 & 0xFFFFFFFFFFFFFFFELL);
    v30 = pas_compact_heap_reservation_base;
  }
  if (v22 >= 8 && v22 - v30 >= pas_compact_heap_reservation_size)
  {
    v33 = pas_utility_heap_try_allocate_with_alignment(8, 1, "pas_lenient_compact_unsigned_ptr/box");
    *(_QWORD *)v33 = v22;
    v22 = v33 | 1;
    LODWORD(v30) = pas_compact_heap_reservation_base;
  }
  if (v22 < 8)
    LODWORD(v30) = 0;
  *(_DWORD *)(a2 + 12) = v22 - v30;
  *(_BYTE *)(a2 + 17) = 64;
  v34 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v35 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v35 != v34)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v16 != 0;
  }
LABEL_50:
  __clrex();
  os_unfair_lock_unlock(v12);
  return v16 != 0;
}

BOOL pas_utility_heap_page_config_specialized_local_allocator_refill(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t eligible;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  os_unfair_lock_s *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  unint64_t v87;
  _DWORD *v88;
  int32x2_t *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int32x2_t v104;
  int32x2_t v105;
  int32x2_t v106;
  unint64_t v107;
  unint64_t v108;
  os_unfair_lock_s *v109;
  unint64_t StatusReg;
  unsigned int v111;
  unint64_t v113;
  int v114;
  unsigned int v115;
  unint64_t v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const os_unfair_lock *v131;
  _BOOL4 v132;
  char v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v140;
  int v141;
  unint64_t v142;
  _OWORD *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  int *v162;
  int *v163;
  int *v164;
  int v165;
  int v166;
  int v167;
  BOOL v168;
  uint64_t v169;
  _OWORD v170[3];

  v2 = *(_QWORD *)(a1 + 48);
  v3 = &unk_1ECF57000;
  if ((v2 & 7) == 5)
  {
    v4 = v2 & 0xFFFFFFFFFFFFFFF8;
    v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 16);
    if ((*(_BYTE *)(*(_QWORD *)v5 + 2) & 1) != 0)
      goto LABEL_33;
    goto LABEL_12;
  }
  if (!v2)
    goto LABEL_11;
  if ((v2 & 7u) < 2)
  {
    v6 = v2 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(unsigned __int8 *)(v6 + 10);
    v8 = *(unsigned __int16 *)(v6 + 8);
    goto LABEL_9;
  }
  if ((v2 & 7) != 4)
  {
LABEL_11:
    v4 = 0;
    v5 = MEMORY[0x10];
    if ((*(_BYTE *)(*MEMORY[0x10] + 2) & 1) != 0)
      goto LABEL_33;
    goto LABEL_12;
  }
  v9 = (unsigned __int16 *)(v2 | 7);
  v7 = *((unsigned __int8 *)v9 + 2);
  v8 = *v9;
LABEL_9:
  v4 = ((8 * v8) | (v7 << 19)) + pas_compact_heap_reservation_base;
  v5 = *(_QWORD *)(v4 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v5 + 2) & 1) == 0)
  {
LABEL_12:
    v10 = *(unsigned int *)(v5 + 36);
    if (!(_DWORD)v10)
      goto LABEL_33;
    v11 = *(_QWORD *)(v5 + 8);
    if (v11)
    {
      v12 = v11 & 0xFFFFFFFFFE000000;
      v13 = *(_QWORD *)(v5 + 8) & 0x1FFFFFFLL;
      v14 = (unint64_t)(v13 - 16392) >> 14;
      v15 = (unint64_t)(v13 + 4 * v10 - 16385) >> 14;
      v16 = v12 | 0x10;
      v17 = (unint64_t *)(v16 + 8 * v14);
      while (1)
      {
        v18 = *v17;
        if ((*v17 & 7) < 3)
        {
LABEL_22:
          if (v14 == v15)
            goto LABEL_23;
          v96 = (unint64_t *)(v16 + 8 * v15);
          while (2)
          {
            v97 = *v96;
            if ((*v96 & 7) < 3)
              goto LABEL_23;
            v98 = __ldxr(v96);
            if (v98 == v97)
            {
              if (!__stlxr(v97 & 0xFFFFFFFFFFFFFFF8 | 2, v96))
              {
                v99 = 1;
                goto LABEL_129;
              }
            }
            else
            {
              __clrex();
            }
            v99 = 0;
LABEL_129:
            __dmb(0xBu);
            if (v99)
              goto LABEL_23;
            continue;
          }
        }
        v19 = __ldxr(v17);
        if (v19 != v18)
          break;
        if (__stlxr(v18 & 0xFFFFFFFFFFFFFFF8 | 2, v17))
          goto LABEL_20;
        v20 = 1;
LABEL_21:
        __dmb(0xBu);
        if (v20)
          goto LABEL_22;
      }
      __clrex();
LABEL_20:
      v20 = 0;
      goto LABEL_21;
    }
LABEL_23:
    v21 = *(_QWORD *)(v5 + 16);
    if (!v21)
      goto LABEL_33;
    v22 = v21 & 0xFFFFFFFFFE000000;
    v23 = *(_QWORD *)(v5 + 16) & 0x1FFFFFFLL;
    v24 = v23 + 4 * v10;
    v25 = (unint64_t)(v23 - 16392) >> 14;
    v26 = (unint64_t)(v24 - 16385) >> 14;
    v27 = v22 | 0x10;
    v28 = (unint64_t *)(v27 + 8 * v25);
    while (1)
    {
      v29 = *v28;
      if ((*v28 & 7) < 3)
      {
LABEL_32:
        if (v25 == v26)
          goto LABEL_33;
        v100 = (unint64_t *)(v27 + 8 * v26);
        while (2)
        {
          v101 = *v100;
          if ((*v100 & 7) < 3)
            goto LABEL_33;
          v102 = __ldxr(v100);
          if (v102 == v101)
          {
            if (!__stlxr(v101 & 0xFFFFFFFFFFFFFFF8 | 2, v100))
            {
              v103 = 1;
              goto LABEL_138;
            }
          }
          else
          {
            __clrex();
          }
          v103 = 0;
LABEL_138:
          __dmb(0xBu);
          if (v103)
            goto LABEL_33;
          continue;
        }
      }
      v30 = __ldxr(v28);
      if (v30 != v29)
        break;
      if (__stlxr(v29 & 0xFFFFFFFFFFFFFFF8 | 2, v28))
        goto LABEL_30;
      v31 = 1;
LABEL_31:
      __dmb(0xBu);
      if (v31)
        goto LABEL_32;
    }
    __clrex();
LABEL_30:
    v31 = 0;
    goto LABEL_31;
  }
LABEL_33:
  v32 = *(unsigned int *)(v5 + 28);
  v33 = pas_compact_heap_reservation_base + 8 * v32;
  if ((_DWORD)v32)
    v34 = v33 == 0;
  else
    v34 = 1;
  if (!v34)
  {
    v35 = *(unsigned int *)(v33 + 12);
    if ((_DWORD)v35)
    {
      v36 = *(unsigned int *)(v33 + 8);
      if ((_DWORD)v36)
        v37 = pas_compact_heap_reservation_base + 8 * v36;
      else
        v37 = 0;
      v38 = v37 - pas_compact_expendable_memory_payload;
      v39 = (unint64_t)(v37 - pas_compact_expendable_memory_payload - 8) >> 14;
      v40 = (unint64_t)(v38 + 16 * v35 - 1) >> 14;
      v41 = (unint64_t *)&pas_compact_expendable_memory_header[v39 + 1];
      while (1)
      {
        v42 = *v41;
        if ((*v41 & 7) < 3)
        {
LABEL_49:
          if (v39 == v40)
            goto LABEL_50;
          v91 = (unint64_t *)&pas_compact_expendable_memory_header[v40 + 1];
          while (2)
          {
            v92 = *v91;
            if ((*v91 & 7) < 3)
              goto LABEL_50;
            v93 = __ldxr(v91);
            if (v93 == v92)
            {
              if (!__stlxr(v92 & 0xFFFFFFFFFFFFFFF8 | 2, v91))
              {
                v94 = 1;
                goto LABEL_119;
              }
            }
            else
            {
              __clrex();
            }
            v94 = 0;
LABEL_119:
            __dmb(0xBu);
            if (v94)
              goto LABEL_50;
            continue;
          }
        }
        v43 = __ldxr(v41);
        if (v43 != v42)
          break;
        if (__stlxr(v42 & 0xFFFFFFFFFFFFFFF8 | 2, v41))
          goto LABEL_47;
        v44 = 1;
LABEL_48:
        __dmb(0xBu);
        if (v44)
          goto LABEL_49;
      }
      __clrex();
LABEL_47:
      v44 = 0;
      goto LABEL_48;
    }
  }
LABEL_50:
  *(_WORD *)(a1 + 1) = 256;
  if (pas_scavenger_current_state != 1 && pas_scavenger_eligibility_notification_has_been_deferred == 0)
  {
    __dmb(0xBu);
    pas_scavenger_eligibility_notification_has_been_deferred = 1;
  }
  else if (pas_scavenger_current_state == 1)
  {
    v46 = *(_QWORD *)(a1 + 24);
    if (v46)
      goto LABEL_56;
    goto LABEL_60;
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v46 = *(_QWORD *)(a1 + 24);
  if (v46)
  {
LABEL_56:
    v47 = v46 & 0xFFFFFFFFFFFFC000;
    v48 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFC000) + 0x20);
    if ((v48 & 6) != 0)
      v48 = *(_QWORD *)(a1 + 48);
    goto LABEL_61;
  }
LABEL_60:
  v47 = 0;
  v48 = 0;
LABEL_61:
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v49 = v4 | 5;
  if (!v4)
    v49 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v49;
  *(_WORD *)(a1 + 5) = 4;
  if (v48)
  {
    if ((v48 & 7) == 4)
    {
      v61 = v48 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)((v48 & 0xFFFFFFFFFFFFFFF8) + 19) & 4) != 0)
      {
        v95 = -7;
LABEL_216:
        *(_BYTE *)(v61 + 19) &= v95;
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        v156 = *(unsigned int *)(v61 + 12);
        v157 = v3[317];
        v158 = *(unsigned __int8 *)(v61 + 18);
        v159 = *(unsigned __int8 *)(v61 + 17);
        v160 = (v159 + v158);
        *(_QWORD *)(a1 + 48) = v61 | 4;
        *(_DWORD *)(a1 + 32) = v158 >> 1;
        *(_DWORD *)(a1 + 36) = (v160 + 1) >> 1;
        bzero((void *)(a1 + 8 * (v158 >> 1) + 56), (4 * (v160 - (v158 & 0xFE)) + 4) & 0x3FFFFFFF8);
        v161 = 0;
        *(_QWORD *)(a1 + 24) = v47 + (v158 >> 1 << 9);
        if (v158 < v160)
        {
          LODWORD(v161) = 0;
          v162 = (int *)(4 * v158 + a1 + 56);
          v163 = (int *)(4 * v158 + v47 + 44);
          v164 = (int *)(v157 + v156 + 4 * v158);
          do
          {
            v166 = *v164++;
            v165 = v166;
            v167 = *v163;
            *v162++ = v166 & ~*v163;
            *v163++ = v167 | v166;
            if (v167)
              v168 = 1;
            else
              v168 = v165 == 0;
            if (v168)
              v161 = v161;
            else
              v161 = (v161 + 1);
            --v159;
          }
          while (v159);
        }
        *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 8 * (v158 >> 1) + 56));
        *(_BYTE *)(a1 + 6) = 1;
        v60 = *(_QWORD *)(v47 + 24) + v161;
        goto LABEL_226;
      }
    }
    else if ((v48 & 7) == 0)
    {
      *(_QWORD *)(v47 + 32) = v48 | 1;
      *(_BYTE *)(v47 + 2) = 0;
      if (*(_QWORD *)(v47 + 24))
        goto LABEL_67;
      goto LABEL_212;
    }
  }
  eligible = pas_segregated_size_directory_take_first_eligible((unsigned int *)v4);
  v63 = eligible;
  if (!eligible)
    goto LABEL_177;
  if ((eligible & 7) < 2)
  {
    v64 = eligible & 0xFFFFFFFFFFFFFFF8;
    if (*(_BYTE *)((eligible & 0xFFFFFFFFFFFFFFF8) + 11))
      goto LABEL_177;
    v65 = ((8 * *(unsigned __int16 *)(v64 + 8)) | ((unint64_t)*(unsigned __int8 *)(v64 + 10) << 19))
        + pas_compact_heap_reservation_base;
    if (*(_QWORD *)v64)
    {
      os_unfair_lock_assert_owner(&pas_heap_lock);
      if (*(unsigned __int8 *)(v65 + 13) << 8 == 512
        && pas_physical_page_sharing_pool_balancing_enabled != 0
        && pas_physical_page_sharing_pool_balancing_enabled_for_utility != 0)
      {
        while (1)
        {
          v68 = pas_physical_page_sharing_pool_balance;
          v69 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
          if (v69 != v68)
            break;
          if (__stlxr(pas_physical_page_sharing_pool_balance - 0x4000, (unint64_t *)&pas_physical_page_sharing_pool_balance))
          {
            goto LABEL_86;
          }
          v70 = 1;
LABEL_87:
          __dmb(0xBu);
          if (v70)
            goto LABEL_88;
        }
        __clrex();
LABEL_86:
        v70 = 0;
        goto LABEL_87;
      }
LABEL_88:
      v71 = *(_QWORD *)v64;
      goto LABEL_156;
    }
    if (*(unsigned __int8 *)(v65 + 13) << 8 == 512)
    {
      pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BEF30, 1u, 0, 0);
      v71 = *(_QWORD *)v64;
      if (*(_QWORD *)v64)
        goto LABEL_156;
    }
    memset(v170, 0, sizeof(v170));
    os_unfair_lock_assert_owner(&pas_heap_lock);
    initialize_config_0((uint64_t)v170);
    v107 = try_allocate_without_fixing(&pas_compact_bootstrap_free_heap, 0x4000uLL, 0x4000uLL, 0, (unint64_t *)v170);
    v108 = v107;
    if (v107 && pas_allocation_callback)
      pas_allocation_callback(v107, 0x4000, 1, "pas_utility_heap/page", 1);
    *(_QWORD *)v64 = v108;
    v71 = *(_QWORD *)v64;
    if (*(_QWORD *)v64)
    {
LABEL_156:
      pas_segregated_page_construct(v71, v64 | 1, 0, (uint64_t)&unk_1E35BEF30);
      *(_BYTE *)(v64 + 11) = 1;
      goto LABEL_177;
    }
    goto LABEL_157;
  }
  if ((eligible & 7) != 4)
  {
LABEL_157:
    v63 = 0;
    goto LABEL_177;
  }
  v72 = eligible & 0xFFFFFFFFFFFFFFF8;
  v73 = *(unsigned __int16 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 4) | ((unint64_t)*(unsigned __int8 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 6) << 16);
  if (!v73)
    goto LABEL_177;
  v74 = (os_unfair_lock_s *)(pas_compact_heap_reservation_base + 8 * v73);
  if (!v74)
    goto LABEL_177;
  v75 = *(_QWORD *)&v74->_os_unfair_lock_opaque;
  if ((*(_QWORD *)&v74->_os_unfair_lock_opaque & 1) != 0)
  {
    v76 = v75 & 0xFFFFFFFFFFFFFFFELL;
    if ((v75 & 0xFFFFFFFFFFFFFFFELL) != 0)
      goto LABEL_94;
LABEL_159:
    v63 = 0;
    goto LABEL_177;
  }
  v76 = pas_segregated_shared_view_commit_page((os_unfair_lock_s *)(pas_compact_heap_reservation_base + 8 * v73), *(_QWORD *)(((8 * *(unsigned __int16 *)(v72 + 7)) | ((unint64_t)*(unsigned __int8 *)(v72 + 9) << 19))+ pas_compact_heap_reservation_base+ 16), 0, eligible & 0xFFFFFFFFFFFFFFF8, (uint64_t)&unk_1E35BEF30);
  if (!v76)
    goto LABEL_159;
LABEL_94:
  if ((*(_BYTE *)(v72 + 19) & 0x10) != 0)
    goto LABEL_177;
  v77 = *(unsigned __int8 *)(v72 + 17);
  if (*(_BYTE *)(v72 + 17))
  {
    v78 = pas_compact_heap_reservation_base + *(unsigned int *)(v72 + 12);
    v79 = *(unsigned __int8 *)(v72 + 18);
    v80 = v79 + v77;
    if (v77 < 0x1C)
      goto LABEL_167;
    v81 = 4 * v79;
    v82 = 4 * v79 + v76 + 20;
    v83 = 4 * v80 + v76 + 20;
    v84 = v82 < (unint64_t)&pas_compact_heap_reservation_available_size
       && v83 > (unint64_t)&pas_compact_heap_reservation_base;
    v85 = v84;
    v86 = v78 + 4 * v79 >= v83 || v82 >= v78 + 4 * v80;
    if (!v86 || v85)
      goto LABEL_167;
    v79 += v77 & 0xFC;
    v87 = (v72 - pas_compact_heap_reservation_base) >> 3;
    if (!v72)
      LODWORD(v87) = 0;
    v88 = (_DWORD *)(v81 + v76 + 32);
    v89 = (int32x2_t *)(v81 + v78 + 8);
    v90 = v77 & 0xFC;
    while (1)
    {
      v104 = *v89;
      v105 = vtst_s32(v89[-1], v89[-1]);
      if ((v105.i8[0] & 1) != 0)
      {
        *(v88 - 3) = v87;
        if ((v105.i8[4] & 1) == 0)
          goto LABEL_143;
      }
      else if ((v105.i8[4] & 1) == 0)
      {
LABEL_143:
        v106 = vtst_s32(v104, v104);
        if ((v106.i8[0] & 1) != 0)
          goto LABEL_144;
        goto LABEL_148;
      }
      *(v88 - 2) = v87;
      v106 = vtst_s32(v104, v104);
      if ((v106.i8[0] & 1) != 0)
      {
LABEL_144:
        *(v88 - 1) = v87;
        if ((v106.i8[4] & 1) != 0)
          goto LABEL_149;
        goto LABEL_140;
      }
LABEL_148:
      if ((v106.i8[4] & 1) != 0)
LABEL_149:
        *v88 = v87;
LABEL_140:
      v88 += 4;
      v89 += 2;
      v90 -= 4;
      if (!v90)
      {
        if ((v77 & 0xFC) == v77)
          break;
        do
        {
LABEL_167:
          if (*(_DWORD *)(v78 + 4 * v79))
          {
            v113 = (v72 - pas_compact_heap_reservation_base) >> 3;
            if (!v72)
              LODWORD(v113) = 0;
            *(_DWORD *)(v76 + 20 + 4 * v79) = v113;
          }
          ++v79;
        }
        while (v79 < v80);
        break;
      }
    }
  }
  v109 = v74 + 3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v111 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v109->_os_unfair_lock_opaque))
  {
    if (!__stxr(v111, &v109->_os_unfair_lock_opaque))
      goto LABEL_172;
  }
  __clrex();
  os_unfair_lock_lock(v109);
LABEL_172:
  *(_BYTE *)(v72 + 19) |= 0x10u;
  v114 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v115 = __ldxr(&v109->_os_unfair_lock_opaque);
    if (v115 != v114)
      break;
    if (!__stlxr(0, &v109->_os_unfair_lock_opaque))
      goto LABEL_177;
  }
  __clrex();
  os_unfair_lock_unlock(v109);
LABEL_177:
  if (!v48)
    goto LABEL_202;
  if ((v48 & 7u) >= 2)
  {
    if ((v48 & 7) != 4)
      goto LABEL_202;
    v125 = v48 & 0xFFFFFFFFFFFFFFF8;
    v126 = (8 * *(unsigned __int16 *)((v48 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v48 & 0xFFFFFFFFFFFFFFF8) + 6) << 19);
    v127 = pas_compact_heap_reservation_base;
    v128 = v126 + pas_compact_heap_reservation_base;
    v129 = *(unsigned __int8 *)(v125 + 9);
    v130 = *(unsigned __int16 *)(v125 + 7);
    v169 = *(_QWORD *)((*(_QWORD *)(v126 + pas_compact_heap_reservation_base) & 0xFFFFFFFFFFFFFFFELL) + 8);
    v131 = *(const os_unfair_lock **)(v47 + 8);
    if (v131)
      os_unfair_lock_assert_owner(v131);
    if (*(_DWORD *)(v128 + 24) == 1)
    {
      v132 = *(_QWORD *)(v47 + 24) == 0;
      v133 = *(_BYTE *)(v125 + 19);
      if ((v133 & 2) != 0)
        goto LABEL_190;
    }
    else
    {
      v132 = 0;
      v133 = *(_BYTE *)(v125 + 19);
      if ((v133 & 2) != 0)
      {
LABEL_190:
        *(_BYTE *)(v125 + 19) = v133 & 0xFC;
        --*(_DWORD *)(v128 + 24);
        pas_segregated_directory_view_did_become_eligible_at_index(((8 * v130) | (v129 << 19)) + v127, *(unsigned __int8 *)(v125 + 16));
        v3 = (_QWORD *)&unk_1ECF57000;
        if (!v132)
          goto LABEL_202;
LABEL_194:
        v134 = v127 & 5 | 2;
        if (v134 == 3)
        {
          v135 = ((8 * *(unsigned __int16 *)((v128 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((v128 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
               + v3[317];
        }
        else
        {
          if (v134 != 2)
          {
            v124 = 0;
            goto LABEL_200;
          }
          v135 = v128 & 0xFFFFFFFFFFFFFFF8;
        }
        v124 = *(_DWORD *)(v135 + 16) & 0x7FFFFFFF;
LABEL_200:
        v123 = v169;
        goto LABEL_201;
      }
    }
    *(_BYTE *)(v125 + 19) = v133 & 0xFE;
    --*(_DWORD *)(v128 + 24);
    v3 = &unk_1ECF57000;
    if (!v132)
      goto LABEL_202;
    goto LABEL_194;
  }
  v116 = v48 & 0xFFFFFFFFFFFFFFF8;
  v117 = *(unsigned __int8 *)(v47 + 2);
  if (*(_BYTE *)(v47 + 2))
    *(_BYTE *)(v47 + 2) = 0;
  v118 = (8 * *(unsigned __int16 *)(v116 + 8)) | ((unint64_t)*(unsigned __int8 *)(v116 + 10) << 19);
  v119 = pas_compact_heap_reservation_base;
  v120 = v118 + pas_compact_heap_reservation_base;
  v121 = *(unsigned int *)(v116 + 12);
  v122 = *(_QWORD *)(v47 + 24);
  *(_BYTE *)(v47 + 1) = 0;
  if (v117)
    pas_segregated_directory_view_did_become_eligible_at_index(v118 + v119, v121);
  if (!v122)
  {
    v123 = v120;
    v124 = v121;
LABEL_201:
    pas_segregated_directory_view_did_become_empty_at_index(v123, v124);
  }
LABEL_202:
  if (!v63)
    return 0;
  v61 = v63 & 0xFFFFFFFFFFFFFFF8;
  if ((v63 & 6) != 0)
  {
    v136 = *(unsigned __int16 *)(v61 + 4) | ((unint64_t)*(unsigned __int8 *)(v61 + 6) << 16);
    v137 = v3[317] + 8 * v136;
    if (v136)
      v138 = v137 == 0;
    else
      v138 = 1;
    if (v138)
      return pas_utility_heap_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(a1, v61, v4);
    v47 = *(_QWORD *)v137;
    if ((*(_QWORD *)v137 & 1) != 0)
      v47 = *(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFFELL);
    *(_BYTE *)(v61 + 19) |= 1u;
    ++*(_DWORD *)(v137 + 24);
    v95 = -5;
    goto LABEL_216;
  }
  v47 = *(_QWORD *)v61;
  *(_BYTE *)(v47 + 1) = 1;
  *(_QWORD *)(v47 + 32) = v63 | 1;
  if (*(_QWORD *)(v47 + 24))
  {
LABEL_67:
    v50 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v51 = v3[317];
    v52 = (unsigned int *)(v51 + 8 * *(unsigned int *)(v4 + 40));
    v53 = *v52;
    v54 = v53 >> 9;
    v55 = ((v52[1] >> 3) - 1) >> 6;
    v56 = v51 + *(unsigned int *)((char *)v52 + 9);
    *(_OWORD *)(a1 + 56) = 0u;
    *(_DWORD *)(a1 + 32) = v53 >> 9;
    *(_DWORD *)(a1 + 36) = v55 + 1;
    v57 = v47 + 44;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_QWORD *)(a1 + 24) = (v53 & 0xFFFFFE00) + v47;
    do
    {
      v58 = *(_DWORD *)(v56 + v50);
      v59 = *(_DWORD *)(v57 + v50);
      *(_DWORD *)(a1 + 56 + v50) = v58 & ~v59;
      *(_DWORD *)(v57 + v50) = v59 | v58;
      v50 += 4;
    }
    while (v50 != 256);
    *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 8 * v54 + 56));
    *(_BYTE *)(a1 + 6) = 1;
    v60 = *(unsigned __int8 *)(v3[317] + 8 * *(unsigned int *)(v4 + 40) + 8);
LABEL_226:
    *(_QWORD *)(v47 + 24) = v60;
    return 1;
  }
LABEL_212:
  v140 = v3[317] + 8 * *(unsigned int *)(v4 + 40);
  v141 = *(_DWORD *)v140;
  v142 = *(unsigned int *)(v140 + 4) + v47;
  *(_QWORD *)(v47 + 24) = *(unsigned __int8 *)(v140 + 8);
  *(_QWORD *)(a1 + 8) = v142;
  *(_DWORD *)(a1 + 16) = v142 - (v141 + v47);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v47;
  v143 = (_OWORD *)(v3[317] + *(unsigned int *)(v140 + 9));
  v144 = v143[2];
  v145 = v143[3];
  v146 = v143[1];
  *(_OWORD *)(v47 + 44) = *v143;
  *(_OWORD *)(v47 + 92) = v145;
  *(_OWORD *)(v47 + 76) = v144;
  *(_OWORD *)(v47 + 60) = v146;
  v147 = v143[6];
  v148 = v143[7];
  v149 = v143[5];
  *(_OWORD *)(v47 + 108) = v143[4];
  *(_OWORD *)(v47 + 156) = v148;
  *(_OWORD *)(v47 + 140) = v147;
  *(_OWORD *)(v47 + 124) = v149;
  v150 = v143[10];
  v151 = v143[11];
  v152 = v143[9];
  *(_OWORD *)(v47 + 172) = v143[8];
  *(_OWORD *)(v47 + 220) = v151;
  *(_OWORD *)(v47 + 204) = v150;
  *(_OWORD *)(v47 + 188) = v152;
  v153 = v143[14];
  v154 = v143[15];
  v155 = v143[13];
  *(_OWORD *)(v47 + 236) = v143[12];
  *(_OWORD *)(v47 + 268) = v153;
  *(_OWORD *)(v47 + 284) = v154;
  *(_OWORD *)(v47 + 252) = v155;
  return 1;
}

void pas_utility_heap_page_config_specialized_local_allocator_return_memory_to_page(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v8;
  BOOL v9;
  int v10;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  BOOL v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t StatusReg;
  unsigned int v24;
  uint64_t v26;
  size_t v27;
  void *v28;
  int v29;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  BOOL v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v45;
  size_t v46;
  void *v47;
  unsigned int v48;
  unsigned int v50;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int128 *v70;
  char v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  const os_unfair_lock *v77;
  unint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned __int128 *v84;
  int v85;
  int *v86;
  char v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  const os_unfair_lock *v93;
  unint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int128 *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned __int128 *v128;
  int v129;
  int *v130;
  int v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;

  v8 = *(unsigned __int8 *)(a1 + 5);
  if ((a2 & 7) == 4)
  {
    v9 = v8 > 0xB;
    v10 = (1 << v8) & 0xAA8;
    if (v9 || v10 == 0)
      goto LABEL_65;
    v12 = 0;
    v13 = 0;
    v14 = a1 + 56;
    v15 = -1;
    v16 = -1;
    do
    {
      v17 = *(_DWORD *)(v14 + 4 * v13);
      v18 = v17 == 0;
      v19 = v17 != 0;
      v20 = v18;
      if (!v18)
        v16 = v13;
      if (((v20 | v12) & 1) == 0)
        v15 = v13;
      v12 |= v19;
      ++v13;
    }
    while (v13 != 64);
    v21 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
    v22 = v16 - v15 + 1;
    *(_BYTE *)(v21 + 17) = v22;
    *(_BYTE *)(v21 + 18) = v15;
    if (a5)
    {
LABEL_19:
      v26 = -v15;
      if (v22 != 1)
      {
LABEL_50:
        v27 = 4 * v22;
        v28 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v22, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
LABEL_51:
        v52 = (unint64_t)v28 + 4 * v26;
        memcpy(v28, (const void *)(v14 + 4 * v15), v27);
        __dmb(0xAu);
        v53 = *(unsigned int *)(v21 + 12);
        v54 = pas_compact_heap_reservation_base;
        if (v53 >= 8)
          v55 = pas_compact_heap_reservation_base;
        else
          v55 = 0;
        v56 = v55 + v53;
        if ((v56 & 1) != 0)
        {
          pas_utility_heap_deallocate(v56 & 0xFFFFFFFFFFFFFFFELL);
          v54 = pas_compact_heap_reservation_base;
        }
        if (v52 >= 8 && v52 - v54 >= pas_compact_heap_reservation_size)
        {
          v57 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
          *(_QWORD *)v57 = v52;
          v52 = v57 | 1;
          LODWORD(v54) = pas_compact_heap_reservation_base;
        }
        if (v52 < 8)
          LODWORD(v54) = 0;
        *(_DWORD *)(v21 + 12) = v52 - v54;
        if (!a5)
        {
          v58 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          while (1)
          {
            v59 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
            if (v59 != v58)
              break;
            if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
              goto LABEL_65;
          }
          __clrex();
          os_unfair_lock_unlock(&pas_heap_lock);
          v60 = *(unsigned int *)(a1 + 16);
          if (!(_DWORD)v60)
            goto LABEL_67;
LABEL_66:
          v61 = *(_QWORD *)(a1 + 8);
          v62 = v61 - v60;
          if (v61 < v60)
            goto LABEL_67;
          v69 = *(unsigned int *)(a1 + 20);
          v70 = (unsigned __int128 *)(a3 + 16);
          while (1)
          {
            v72 = 4 * ((v62 >> 8) & 0x3F);
            v73 = *(_DWORD *)(a3 + v72 + 44) & ~(1 << (v62 >> 3));
            *(_DWORD *)(a3 + v72 + 44) = v73;
            v74 = *(unsigned int *)((*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8) + v72 + 20);
            if ((_DWORD)v74)
              v75 = pas_compact_heap_reservation_base + 8 * v74;
            else
              v75 = 0;
            v76 = *(_BYTE *)(v75 + 19);
            if ((v76 & 4) == 0)
            {
              v77 = *(const os_unfair_lock **)(a3 + 8);
              if (v77)
              {
                os_unfair_lock_assert_owner(v77);
                v76 = *(_BYTE *)(v75 + 19);
              }
              if ((v76 & 1) != 0)
              {
                v71 = v76 | 2;
              }
              else
              {
                if ((v75 & 3) != 0)
                  v78 = 0;
                else
                  v78 = *(unsigned __int8 *)((v75 & 0xFFFFFFFFFFFFFFF8) + 16);
                pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v75 + 7)) | ((unint64_t)*(unsigned __int8 *)(v75 + 9) << 19))+ pas_compact_heap_reservation_base, v78);
                v71 = *(_BYTE *)(v75 + 19);
              }
              *(_BYTE *)(v75 + 19) = v71 | 4;
            }
            if (v73)
              goto LABEL_79;
            if (*(_QWORD *)(a3 + 24) == 1)
              break;
            --*(_QWORD *)(a3 + 24);
LABEL_79:
            v62 += v69;
            if (v62 >= v61)
              goto LABEL_67;
          }
          v79 = (unsigned int *)timebase_info_ptr;
          if (timebase_info_ptr)
          {
            v80 = mach_approximate_time();
            v81 = *v79;
            v82 = v79[1];
            if ((pas_get_epoch_first & 1) != 0)
              goto LABEL_94;
          }
          else
          {
            get_timebase_info_slow();
            v80 = mach_approximate_time();
            v81 = timebase_info;
            v82 = *(unsigned int *)algn_1ECF57B54;
            if ((pas_get_epoch_first & 1) != 0)
            {
LABEL_94:
              v83 = v80 * v81 / v82;
              do
                __ldxp(v70);
              while (__stxp(v83, v70));
              pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
              goto LABEL_79;
            }
          }
          pas_get_epoch_first = 1;
          goto LABEL_94;
        }
LABEL_65:
        v60 = *(unsigned int *)(a1 + 16);
        if (!(_DWORD)v60)
        {
LABEL_67:
          v63 = *(unsigned int *)(a1 + 32);
          if ((_DWORD)v63 == *(_DWORD *)(a1 + 36))
            return;
          *(_QWORD *)(a1 + 8 * v63 + 56) = __rbit64(*(_QWORD *)(a1 + 40));
          if ((a2 & 6) != 0)
          {
            v64 = a2 & 0xFFFFFFFFFFFFFFF8;
            v65 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
            v66 = pas_compact_heap_reservation_base;
            if (v65 < 8)
              v66 = 0;
            v146 = v66 + v65;
            if ((((_DWORD)v66 + (_DWORD)v65) & 1) != 0)
              v146 = *(_QWORD *)(v146 & 0xFFFFFFFFFFFFFFFELL);
            v67 = *(unsigned __int8 *)(v64 + 18) | ((unint64_t)(*(unsigned __int8 *)(v64 + 17)
                                                                     + *(unsigned __int8 *)(v64 + 18)) << 32);
            v68 = v67;
            v143 = HIDWORD(v67);
            if (v67 >= HIDWORD(v67))
              return;
          }
          else
          {
            v146 = pas_compact_heap_reservation_base
                 + *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a4 + 40) + 9);
            v68 = 0;
            v143 = 64;
          }
          v140 = a1 + 56;
          v84 = (unsigned __int128 *)(a3 + 16);
          while (1)
          {
            v85 = *(_DWORD *)(v140 + 4 * v68) & *(_DWORD *)(v146 + 4 * v68);
            if (v85)
              break;
LABEL_103:
            if (++v68 == v143)
              return;
          }
          v86 = (int *)(a3 + 4 * (v68 & 0x3F) + 44);
          while (1)
          {
            v88 = v85 & -v85;
            v89 = *v86 & ~v88;
            *v86 = v89;
            v90 = *(unsigned int *)((*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * (v68 & 0x3F) + 20);
            if ((_DWORD)v90)
              v91 = pas_compact_heap_reservation_base + 8 * v90;
            else
              v91 = 0;
            v92 = *(_BYTE *)(v91 + 19);
            if ((v92 & 4) == 0)
            {
              v93 = *(const os_unfair_lock **)(a3 + 8);
              if (v93)
              {
                os_unfair_lock_assert_owner(v93);
                v92 = *(_BYTE *)(v91 + 19);
              }
              if ((v92 & 1) != 0)
              {
                v87 = v92 | 2;
              }
              else
              {
                if ((v91 & 3) != 0)
                  v94 = 0;
                else
                  v94 = *(unsigned __int8 *)((v91 & 0xFFFFFFFFFFFFFFF8) + 16);
                pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v91 + 7)) | ((unint64_t)*(unsigned __int8 *)(v91 + 9) << 19))+ pas_compact_heap_reservation_base, v94);
                v87 = *(_BYTE *)(v91 + 19);
              }
              *(_BYTE *)(v91 + 19) = v87 | 4;
            }
            if (v89)
              goto LABEL_109;
            if (*(_QWORD *)(a3 + 24) == 1)
              break;
            --*(_QWORD *)(a3 + 24);
LABEL_109:
            v85 ^= v88;
            if (!v85)
              goto LABEL_103;
          }
          v95 = (unsigned int *)timebase_info_ptr;
          if (timebase_info_ptr)
          {
            v96 = mach_approximate_time();
            v97 = *v95;
            v98 = v95[1];
            if ((pas_get_epoch_first & 1) != 0)
              goto LABEL_124;
          }
          else
          {
            get_timebase_info_slow();
            v96 = mach_approximate_time();
            v97 = timebase_info;
            v98 = *(unsigned int *)algn_1ECF57B54;
            if ((pas_get_epoch_first & 1) != 0)
            {
LABEL_124:
              v99 = v96 * v97 / v98;
              do
                __ldxp(v84);
              while (__stxp(v99, v84));
              pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
              goto LABEL_109;
            }
          }
          pas_get_epoch_first = 1;
          goto LABEL_124;
        }
        goto LABEL_66;
      }
    }
    else
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v24 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v24, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_19;
      }
      __clrex();
      v48 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v48, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_49;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_49:
      v26 = -v15;
      if (v22 != 1)
        goto LABEL_50;
    }
    v27 = 4;
    v28 = (void *)v21;
    goto LABEL_51;
  }
  v9 = v8 > 0xB;
  v29 = (1 << v8) & 0xAA8;
  if (v9 || v29 == 0)
  {
LABEL_150:
    v108 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v108)
      goto LABEL_152;
    goto LABEL_151;
  }
  v31 = 0;
  v32 = 0;
  v33 = a1 + 56;
  v34 = -1;
  v35 = -1;
  do
  {
    v36 = *(_DWORD *)(v33 + 4 * v32);
    v37 = v36 == 0;
    v38 = v36 != 0;
    v39 = v37;
    if (!v37)
      v35 = v32;
    if (((v39 | v31) & 1) == 0)
      v34 = v32;
    v31 |= v38;
    ++v32;
  }
  while (v32 != 64);
  v40 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  v41 = v35 - v34 + 1;
  *(_BYTE *)(v40 + 17) = v41;
  *(_BYTE *)(v40 + 18) = v34;
  if (!a5)
  {
    v42 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v43 = *(_DWORD *)(v42 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v43, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_38;
    }
    __clrex();
    v50 = *(_DWORD *)(v42 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v50, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_134;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_134:
    v45 = -v34;
    if (v41 != 1)
      goto LABEL_135;
LABEL_39:
    v46 = 4;
    v47 = (void *)v40;
    goto LABEL_136;
  }
LABEL_38:
  v45 = -v34;
  if (v41 == 1)
    goto LABEL_39;
LABEL_135:
  v46 = 4 * v41;
  v47 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v41, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
LABEL_136:
  v100 = (unint64_t)v47 + 4 * v45;
  memcpy(v47, (const void *)(v33 + 4 * v34), v46);
  __dmb(0xAu);
  v101 = *(unsigned int *)(v40 + 12);
  v102 = pas_compact_heap_reservation_base;
  if (v101 >= 8)
    v103 = pas_compact_heap_reservation_base;
  else
    v103 = 0;
  v104 = v103 + v101;
  if ((v104 & 1) != 0)
  {
    pas_utility_heap_deallocate(v104 & 0xFFFFFFFFFFFFFFFELL);
    v102 = pas_compact_heap_reservation_base;
  }
  if (v100 >= 8 && v100 - v102 >= pas_compact_heap_reservation_size)
  {
    v105 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
    *(_QWORD *)v105 = v100;
    v100 = v105 | 1;
    LODWORD(v102) = pas_compact_heap_reservation_base;
  }
  if (v100 < 8)
    LODWORD(v102) = 0;
  *(_DWORD *)(v40 + 12) = v100 - v102;
  if (a5)
    goto LABEL_150;
  v106 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v107 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v107 != v106)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_150;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  v108 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v108)
  {
LABEL_151:
    v109 = *(_QWORD *)(a1 + 8);
    v110 = v109 - v108;
    if (v109 < v108)
      goto LABEL_152;
    v117 = *(unsigned int *)(a1 + 20);
    v118 = (unsigned __int128 *)(a3 + 16);
    while (1)
    {
      v119 = a3 + 4 * ((v110 >> 8) & 0x3F);
      v120 = *(_DWORD *)(v119 + 44) & ~(1 << (v110 >> 3));
      *(_DWORD *)(v119 + 44) = v120;
      v121 = *(_QWORD *)(a3 + 32);
      if ((v121 & 7) != 0)
      {
        v122 = v121 & 0xFFFFFFFFFFFFFFF8;
        if (*(_BYTE *)(a3 + 1))
          *(_BYTE *)(a3 + 2) = 1;
        else
          pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v122 + 8)) | ((unint64_t)*(unsigned __int8 *)(v122 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v122 + 12));
        *(_QWORD *)(a3 + 32) = v122;
      }
      if (v120)
        goto LABEL_162;
      if (*(_QWORD *)(a3 + 24) == 1)
        break;
      --*(_QWORD *)(a3 + 24);
LABEL_162:
      v110 += v117;
      if (v110 >= v109)
        goto LABEL_152;
    }
    v123 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v124 = mach_approximate_time();
      v125 = *v123;
      v126 = v123[1];
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_173;
    }
    else
    {
      get_timebase_info_slow();
      v124 = mach_approximate_time();
      v125 = timebase_info;
      v126 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_173:
        v127 = v124 * v125 / v126;
        do
          __ldxp(v118);
        while (__stxp(v127, v118));
        pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
        goto LABEL_162;
      }
    }
    pas_get_epoch_first = 1;
    goto LABEL_173;
  }
LABEL_152:
  v111 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v111 == *(_DWORD *)(a1 + 36))
    return;
  *(_QWORD *)(a1 + 8 * v111 + 56) = __rbit64(*(_QWORD *)(a1 + 40));
  if ((a2 & 6) == 0)
  {
    v147 = pas_compact_heap_reservation_base
         + *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a4 + 40) + 9);
    v116 = 0;
    v144 = 64;
    goto LABEL_179;
  }
  v112 = a2 & 0xFFFFFFFFFFFFFFF8;
  v113 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
  v114 = pas_compact_heap_reservation_base;
  if (v113 < 8)
    v114 = 0;
  v147 = v114 + v113;
  if ((((_DWORD)v114 + (_DWORD)v113) & 1) != 0)
    v147 = *(_QWORD *)(v147 & 0xFFFFFFFFFFFFFFFELL);
  v115 = *(unsigned __int8 *)(v112 + 18) | ((unint64_t)(*(unsigned __int8 *)(v112 + 17)
                                                             + *(unsigned __int8 *)(v112 + 18)) << 32);
  v116 = v115;
  v144 = HIDWORD(v115);
  if (v115 < HIDWORD(v115))
  {
LABEL_179:
    v141 = a1 + 56;
    v128 = (unsigned __int128 *)(a3 + 16);
    while (1)
    {
      v129 = *(_DWORD *)(v141 + 4 * v116) & *(_DWORD *)(v147 + 4 * v116);
      if (v129)
        break;
LABEL_180:
      if (++v116 == v144)
        return;
    }
    v130 = (int *)(a3 + 4 * (v116 & 0x3F) + 44);
    while (1)
    {
      v131 = v129 & -v129;
      v132 = *v130 & ~v131;
      *v130 = v132;
      v133 = *(_QWORD *)(a3 + 32);
      if ((v133 & 7) != 0)
      {
        v134 = v133 & 0xFFFFFFFFFFFFFFF8;
        if (*(_BYTE *)(a3 + 1))
          *(_BYTE *)(a3 + 2) = 1;
        else
          pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v134 + 8)) | ((unint64_t)*(unsigned __int8 *)(v134 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v134 + 12));
        *(_QWORD *)(a3 + 32) = v134;
      }
      if (v132)
        goto LABEL_184;
      if (*(_QWORD *)(a3 + 24) == 1)
        break;
      --*(_QWORD *)(a3 + 24);
LABEL_184:
      v129 ^= v131;
      if (!v129)
        goto LABEL_180;
    }
    v135 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v136 = mach_approximate_time();
      v137 = *v135;
      v138 = v135[1];
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_195;
    }
    else
    {
      get_timebase_info_slow();
      v136 = mach_approximate_time();
      v137 = timebase_info;
      v138 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_195:
        v139 = v136 * v137 / v138;
        do
          __ldxp(v128);
        while (__stxp(v139, v128));
        pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
        goto LABEL_184;
      }
    }
    pas_get_epoch_first = 1;
    goto LABEL_195;
  }
}

uint64_t pas_utility_heap_config_for_each_shared_page_directory()
{
  return 1;
}

uint64_t pas_utility_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  _QWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  unint64_t eligible;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  os_unfair_lock_s *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  unint64_t v104;
  _DWORD *v105;
  int32x2_t *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int32x2_t v121;
  int32x2_t v122;
  int32x2_t v123;
  unint64_t v124;
  unint64_t v125;
  os_unfair_lock_s *v126;
  unsigned int v127;
  unint64_t v129;
  int v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const os_unfair_lock *v143;
  uint64_t v144;
  _BOOL4 v145;
  char v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  int *v169;
  int *v170;
  int *v171;
  int v172;
  int v173;
  int v174;
  BOOL v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v189;
  uint64_t v190;
  unint64_t StatusReg;
  _QWORD *v192;
  _OWORD v194[3];

  if (*(_BYTE *)(a1 + 3) != 2)
    *(_BYTE *)(a1 + 3) = 2;
  v5 = (_QWORD *)(a1 + 32);
  v6 = (_OWORD *)(a1 + 56);
  v7 = &unk_1ECF57000;
  v8 = &unk_1ECF57000;
  v9 = &unk_1ECF57000;
  v190 = a1 + 64;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_4:
  v10 = &unk_1ECF55000;
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 48);
    if ((v11 & 7) == 5)
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
      if ((*(_BYTE *)(*(_QWORD *)v13 + 2) & 1) == 0)
        goto LABEL_16;
      goto LABEL_37;
    }
    if (!v11)
      goto LABEL_15;
    if ((v11 & 7u) < 2)
    {
      v14 = v11 & 0xFFFFFFFFFFFFFFF8;
      v15 = *(unsigned __int8 *)(v14 + 10);
      v16 = *(unsigned __int16 *)(v14 + 8);
      goto LABEL_13;
    }
    if ((v11 & 7) != 4)
    {
LABEL_15:
      v12 = 0;
      v13 = MEMORY[0x10];
      if ((*(_BYTE *)(*MEMORY[0x10] + 2) & 1) != 0)
        goto LABEL_37;
LABEL_16:
      v18 = *(unsigned int *)(v13 + 36);
      if (!(_DWORD)v18)
        goto LABEL_37;
      v19 = *(_QWORD *)(v13 + 8);
      if (v19)
      {
        v20 = v19 & 0xFFFFFFFFFE000000;
        v21 = *(_QWORD *)(v13 + 8) & 0x1FFFFFFLL;
        v22 = (unint64_t)(v21 - 16392) >> 14;
        v23 = (unint64_t)(v21 + 4 * v18 - 16385) >> 14;
        v24 = v20 | 0x10;
        v25 = (unint64_t *)(v24 + 8 * v22);
        while (1)
        {
          v26 = *v25;
          if ((*v25 & 7) < 3)
          {
LABEL_26:
            if (v22 == v23)
              goto LABEL_27;
            v113 = (unint64_t *)(v24 + 8 * v23);
            while (2)
            {
              v114 = *v113;
              if ((*v113 & 7) < 3)
                goto LABEL_27;
              v115 = __ldxr(v113);
              if (v115 == v114)
              {
                if (!__stlxr(v114 & 0xFFFFFFFFFFFFFFF8 | 2, v113))
                {
                  v116 = 1;
                  goto LABEL_131;
                }
              }
              else
              {
                __clrex();
              }
              v116 = 0;
LABEL_131:
              __dmb(0xBu);
              if (v116)
                goto LABEL_27;
              continue;
            }
          }
          v27 = __ldxr(v25);
          if (v27 != v26)
            break;
          if (__stlxr(v26 & 0xFFFFFFFFFFFFFFF8 | 2, v25))
            goto LABEL_24;
          v28 = 1;
LABEL_25:
          __dmb(0xBu);
          if (v28)
            goto LABEL_26;
        }
        __clrex();
LABEL_24:
        v28 = 0;
        goto LABEL_25;
      }
LABEL_27:
      v29 = *(_QWORD *)(v13 + 16);
      if (!v29)
        goto LABEL_37;
      v30 = v29 & 0xFFFFFFFFFE000000;
      v31 = *(_QWORD *)(v13 + 16) & 0x1FFFFFFLL;
      v32 = (unint64_t)(v31 - 16392) >> 14;
      v33 = (unint64_t)(v31 + 4 * v18 - 16385) >> 14;
      v34 = v30 | 0x10;
      v35 = (unint64_t *)((v30 | 0x10) + 8 * v32);
      while (2)
      {
        v36 = *v35;
        if ((*v35 & 7) < 3)
        {
LABEL_36:
          if (v32 == v33)
            goto LABEL_37;
          v117 = (unint64_t *)(v34 + 8 * v33);
          while (2)
          {
            v118 = *v117;
            if ((*v117 & 7) < 3)
              goto LABEL_37;
            v119 = __ldxr(v117);
            if (v119 == v118)
            {
              if (!__stlxr(v118 & 0xFFFFFFFFFFFFFFF8 | 2, v117))
              {
                v120 = 1;
                goto LABEL_140;
              }
            }
            else
            {
              __clrex();
            }
            v120 = 0;
LABEL_140:
            __dmb(0xBu);
            if (v120)
              goto LABEL_37;
            continue;
          }
        }
        v37 = __ldxr(v35);
        if (v37 == v36)
        {
          if (!__stlxr(v36 & 0xFFFFFFFFFFFFFFF8 | 2, v35))
          {
            v38 = 1;
            goto LABEL_35;
          }
        }
        else
        {
          __clrex();
        }
        v38 = 0;
LABEL_35:
        __dmb(0xBu);
        if (v38)
          goto LABEL_36;
        continue;
      }
    }
    v17 = (unsigned __int16 *)(v11 | 7);
    v15 = *((unsigned __int8 *)v17 + 2);
    v16 = *v17;
LABEL_13:
    v12 = ((8 * v16) | (v15 << 19)) + v7[317];
    v13 = *(_QWORD *)(v12 + 16);
    if ((*(_BYTE *)(*(_QWORD *)v13 + 2) & 1) == 0)
      goto LABEL_16;
LABEL_37:
    v39 = *(unsigned int *)(v13 + 28);
    v40 = v7[317] + 8 * v39;
    if ((_DWORD)v39)
      v41 = v40 == 0;
    else
      v41 = 1;
    if (!v41)
    {
      v42 = *(unsigned int *)(v40 + 12);
      if ((_DWORD)v42)
      {
        v43 = *(unsigned int *)(v40 + 8);
        v44 = v10[59];
        if ((_DWORD)v43)
          v45 = v7[317] + 8 * v43;
        else
          v45 = 0;
        v46 = v45 - v44;
        v47 = (unint64_t)(v45 - v44 - 8) >> 14;
        v48 = (unint64_t)(v46 + 16 * v42 - 1) >> 14;
        v49 = (unint64_t *)&pas_compact_expendable_memory_header[v47 + 1];
        while (1)
        {
          v50 = *v49;
          if ((*v49 & 7) < 3)
          {
LABEL_53:
            if (v47 == v48)
              goto LABEL_54;
            v108 = (unint64_t *)&pas_compact_expendable_memory_header[v48 + 1];
            while (2)
            {
              v109 = *v108;
              if ((*v108 & 7) < 3)
                goto LABEL_54;
              v110 = __ldxr(v108);
              if (v110 == v109)
              {
                if (!__stlxr(v109 & 0xFFFFFFFFFFFFFFF8 | 2, v108))
                {
                  v111 = 1;
                  goto LABEL_121;
                }
              }
              else
              {
                __clrex();
              }
              v111 = 0;
LABEL_121:
              __dmb(0xBu);
              if (v111)
                goto LABEL_54;
              continue;
            }
          }
          v51 = __ldxr(v49);
          if (v51 != v50)
            break;
          if (__stlxr(v50 & 0xFFFFFFFFFFFFFFF8 | 2, v49))
            goto LABEL_51;
          v52 = 1;
LABEL_52:
          __dmb(0xBu);
          if (v52)
            goto LABEL_53;
        }
        __clrex();
LABEL_51:
        v52 = 0;
        goto LABEL_52;
      }
    }
LABEL_54:
    *(_WORD *)(a1 + 1) = 256;
    v53 = v8[763];
    if (v53 != 1 && v9[3048] == 0)
    {
      __dmb(0xBu);
      v9[3048] = 1;
    }
    else if (v53 == 1)
    {
      v55 = *(_QWORD *)(a1 + 24);
      if (!v55)
        goto LABEL_64;
      goto LABEL_60;
    }
    os_unfair_lock_assert_owner(&pas_heap_lock);
    v55 = *(_QWORD *)(a1 + 24);
    if (!v55)
    {
LABEL_64:
      v56 = 0;
      v57 = 0;
      goto LABEL_65;
    }
LABEL_60:
    v56 = v55 & 0xFFFFFFFFFFFFC000;
    v57 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFC000) + 0x20);
    if ((v57 & 6) != 0)
      v57 = *(_QWORD *)(a1 + 48);
LABEL_65:
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v58 = v12 | 5;
    if (!v12)
      v58 = 0;
    *v5 = 0;
    v5[1] = 0;
    *(_QWORD *)(a1 + 48) = v58;
    *(_WORD *)(a1 + 5) = 4;
    if (!v57)
      goto LABEL_73;
    if ((v57 & 7) != 4)
      break;
    v75 = v57 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)((v57 & 0xFFFFFFFFFFFFFFF8) + 19) & 4) == 0)
      goto LABEL_73;
    v192 = v5;
    v112 = -7;
LABEL_218:
    *(_BYTE *)(v75 + 19) &= v112;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v162 = *(unsigned int *)(v75 + 12);
    v163 = v7;
    v164 = v7[317];
    v165 = *(unsigned __int8 *)(v75 + 18);
    v166 = *(unsigned __int8 *)(v75 + 17);
    v167 = (v166 + v165);
    *(_QWORD *)(a1 + 48) = v75 | 4;
    *(_DWORD *)(a1 + 32) = v165 >> 1;
    *(_DWORD *)(a1 + 36) = (v167 + 1) >> 1;
    bzero((char *)v6 + 8 * (v165 >> 1), (4 * (v167 - (v165 & 0xFE)) + 4) & 0x3FFFFFFF8);
    v168 = 0;
    *(_QWORD *)(a1 + 24) = v56 + (v165 >> 1 << 9);
    if (v165 < v167)
    {
      v168 = 0;
      v169 = (int *)v6 + v165;
      v170 = (int *)(v56 + 4 * v165 + 44);
      v171 = (int *)(v164 + v162 + 4 * v165);
      do
      {
        v173 = *v171++;
        v172 = v173;
        v174 = *v170;
        *v169++ = v173 & ~*v170;
        *v170++ = v174 | v173;
        if (v174)
          v175 = 1;
        else
          v175 = v172 == 0;
        if (!v175)
          ++v168;
        --v166;
      }
      while (v166);
    }
    *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 8 * (v165 >> 1) + 56));
    *(_BYTE *)(a1 + 6) = 1;
    *(_QWORD *)(v56 + 24) += v168;
    v7 = v163;
    v5 = v192;
LABEL_227:
    v176 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v176)
    {
      *(_DWORD *)(a1 + 16) = v176 - *(_DWORD *)(a1 + 20);
      v185 = *(_QWORD *)(a1 + 8) - v176;
LABEL_239:
      v186 = 1;
      goto LABEL_240;
    }
    v177 = *(_QWORD *)(a1 + 40);
    v178 = *(_QWORD *)(a1 + 24);
    if (v177)
    {
LABEL_238:
      v187 = __clz(v177);
      *(_QWORD *)(a1 + 40) = v177 & ~(0x8000000000000000 >> v187);
      v185 = v178 + 8 * v187;
      goto LABEL_239;
    }
    v8 = (_DWORD *)&unk_1ECF57000;
    v9 = (_BYTE *)&unk_1ECF57000;
    v10 = (_QWORD *)&unk_1ECF55000;
    if (*(_BYTE *)(a1 + 5) == 4)
    {
      v179 = *(_DWORD *)(a1 + 36);
      v180 = *(unsigned int *)v5;
      if (v180 < v179)
      {
        *(_QWORD *)(a1 + 8 * v180 + 56) = 0;
        v181 = (unint64_t *)(v190 + 8 * v180);
        v182 = v179 - 1 - v180;
        while (v182)
        {
          v178 += 512;
          v184 = *v181++;
          v183 = v184;
          LODWORD(v180) = v180 + 1;
          --v182;
          if (v184)
          {
            v177 = __rbit64(v183);
            *(_DWORD *)(a1 + 32) = v180;
            *(_QWORD *)(a1 + 24) = v178;
            goto LABEL_238;
          }
        }
        *(_DWORD *)v5 = v179;
        v8 = (_DWORD *)&unk_1ECF57000;
        v9 = (_BYTE *)&unk_1ECF57000;
        goto LABEL_4;
      }
    }
  }
  if ((v57 & 7) == 0)
  {
    *(_QWORD *)(v56 + 32) = v57 | 1;
    *(_BYTE *)(v56 + 2) = 0;
    if (!*(_QWORD *)(v56 + 24))
      goto LABEL_71;
LABEL_212:
    v152 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v153 = v7[317];
    v154 = (unsigned int *)(v153 + 8 * *(unsigned int *)(v12 + 40));
    v156 = *v154;
    v155 = v154[1];
    v157 = v153 + *(unsigned int *)((char *)v154 + 9);
    v158 = v156 >> 9;
    *(_DWORD *)(a1 + 32) = v156 >> 9;
    *(_DWORD *)(a1 + 36) = (((v155 >> 3) - 1) >> 6) + 1;
    v159 = v56 + 44;
    *v6 = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_QWORD *)(a1 + 24) = (v156 & 0xFFFFFE00) + v56;
    do
    {
      v160 = *(_DWORD *)(v157 + v152);
      v161 = *(_DWORD *)(v159 + v152);
      *(_DWORD *)((char *)v6 + v152) = v160 & ~v161;
      *(_DWORD *)(v159 + v152) = v161 | v160;
      v152 += 4;
    }
    while (v152 != 256);
    *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 8 * v158 + 56));
    *(_BYTE *)(a1 + 6) = 1;
    *(_QWORD *)(v56 + 24) = *(unsigned __int8 *)(v7[317] + 8 * *(unsigned int *)(v12 + 40) + 8);
    goto LABEL_227;
  }
LABEL_73:
  eligible = pas_segregated_size_directory_take_first_eligible((unsigned int *)v12);
  v77 = eligible;
  v192 = v5;
  if (!eligible)
    goto LABEL_178;
  if ((eligible & 7) >= 2)
  {
    if ((eligible & 7) != 4)
    {
LABEL_159:
      v77 = 0;
      goto LABEL_178;
    }
    v86 = eligible & 0xFFFFFFFFFFFFFFF8;
    v87 = *(unsigned __int16 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 4) | ((unint64_t)*(unsigned __int8 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 6) << 16);
    if (!v87)
      goto LABEL_178;
    v88 = v7[317];
    v89 = (os_unfair_lock_s *)(v88 + 8 * v87);
    if (!v89)
      goto LABEL_178;
    v90 = *(_QWORD *)(((8 * *(unsigned __int16 *)(v86 + 7)) | ((unint64_t)*(unsigned __int8 *)(v86 + 9) << 19))
                    + v88
                    + 16);
    v91 = *(_QWORD *)&v89->_os_unfair_lock_opaque;
    if ((*(_QWORD *)&v89->_os_unfair_lock_opaque & 1) != 0)
    {
      v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
      if ((v91 & 0xFFFFFFFFFFFFFFFELL) != 0)
        goto LABEL_96;
    }
    else
    {
      v92 = pas_segregated_shared_view_commit_page(v89, v90, 0, eligible & 0xFFFFFFFFFFFFFFF8, (uint64_t)&unk_1E35BEF30);
      if (v92)
      {
LABEL_96:
        if ((*(_BYTE *)(v86 + 19) & 0x10) != 0)
          goto LABEL_178;
        v93 = *(unsigned __int8 *)(v86 + 17);
        if (!*(_BYTE *)(v86 + 17))
        {
LABEL_163:
          v126 = v89 + 3;
          v127 = *(_DWORD *)(StatusReg + 24);
          while (!__ldaxr(&v126->_os_unfair_lock_opaque))
          {
            if (!__stxr(v127, &v126->_os_unfair_lock_opaque))
              goto LABEL_173;
          }
          __clrex();
          os_unfair_lock_lock(v126);
LABEL_173:
          *(_BYTE *)(v86 + 19) |= 0x10u;
          v130 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v131 = __ldxr(&v126->_os_unfair_lock_opaque);
            if (v131 != v130)
              break;
            if (!__stlxr(0, &v126->_os_unfair_lock_opaque))
              goto LABEL_178;
          }
          __clrex();
          os_unfair_lock_unlock(v126);
          goto LABEL_178;
        }
        v94 = v7[317] + *(unsigned int *)(v86 + 12);
        v95 = *(unsigned __int8 *)(v86 + 18);
        v96 = v95 + v93;
        v97 = v92 + 20;
        if (v93 < 0x18)
          goto LABEL_168;
        v98 = 4 * v95;
        v99 = v97 + 4 * v95;
        v100 = v97 + 4 * v96;
        v101 = v99 < (unint64_t)&pas_compact_heap_reservation_available_size
            && v100 > (unint64_t)&pas_compact_heap_reservation_base;
        v102 = v101;
        v103 = v94 + 4 * v95 >= v100 || v99 >= v94 + 4 * v96;
        if (!v103 || v102)
          goto LABEL_168;
        v95 += v93 & 0xFC;
        v104 = (v86 - v7[317]) >> 3;
        if (!v86)
          LODWORD(v104) = 0;
        v105 = (_DWORD *)(v92 + v98 + 32);
        v106 = (int32x2_t *)(v94 + v98 + 8);
        v107 = v93 & 0xFC;
        while (1)
        {
          v121 = *v106;
          v122 = vtst_s32(v106[-1], v106[-1]);
          if ((v122.i8[0] & 1) != 0)
          {
            *(v105 - 3) = v104;
            if ((v122.i8[4] & 1) == 0)
              goto LABEL_145;
          }
          else if ((v122.i8[4] & 1) == 0)
          {
LABEL_145:
            v123 = vtst_s32(v121, v121);
            if ((v123.i8[0] & 1) != 0)
              goto LABEL_146;
            goto LABEL_150;
          }
          *(v105 - 2) = v104;
          v123 = vtst_s32(v121, v121);
          if ((v123.i8[0] & 1) != 0)
          {
LABEL_146:
            *(v105 - 1) = v104;
            if ((v123.i8[4] & 1) != 0)
              goto LABEL_151;
            goto LABEL_142;
          }
LABEL_150:
          if ((v123.i8[4] & 1) != 0)
LABEL_151:
            *v105 = v104;
LABEL_142:
          v105 += 4;
          v106 += 2;
          v107 -= 4;
          if (!v107)
          {
            if ((v93 & 0xFC) == v93)
              goto LABEL_163;
            do
            {
LABEL_168:
              if (*(_DWORD *)(v94 + 4 * v95))
              {
                v129 = (v86 - v7[317]) >> 3;
                if (!v86)
                  LODWORD(v129) = 0;
                *(_DWORD *)(v97 + 4 * v95) = v129;
              }
              ++v95;
            }
            while (v95 < v96);
            goto LABEL_163;
          }
        }
      }
    }
    v77 = 0;
    goto LABEL_178;
  }
  v78 = eligible & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)((eligible & 0xFFFFFFFFFFFFFFF8) + 11))
    goto LABEL_178;
  v79 = ((8 * *(unsigned __int16 *)(v78 + 8)) | ((unint64_t)*(unsigned __int8 *)(v78 + 10) << 19)) + v7[317];
  if (!*(_QWORD *)v78)
  {
    if (*(unsigned __int8 *)(v79 + 13) << 8 == 512)
    {
      pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BEF30, 1u, 0, 0);
      v85 = *(_QWORD *)v78;
      if (*(_QWORD *)v78)
        goto LABEL_158;
    }
    memset(v194, 0, sizeof(v194));
    os_unfair_lock_assert_owner(&pas_heap_lock);
    initialize_config_0((uint64_t)v194);
    v124 = try_allocate_without_fixing(&pas_compact_bootstrap_free_heap, 0x4000uLL, 0x4000uLL, 0, (unint64_t *)v194);
    v125 = v124;
    if (v124 && pas_allocation_callback)
      pas_allocation_callback(v124, 0x4000, 1, "pas_utility_heap/page", 1);
    *(_QWORD *)v78 = v125;
    v85 = *(_QWORD *)v78;
    if (*(_QWORD *)v78)
      goto LABEL_158;
    goto LABEL_159;
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (*(unsigned __int8 *)(v79 + 13) << 8 == 512
    && pas_physical_page_sharing_pool_balancing_enabled != 0
    && pas_physical_page_sharing_pool_balancing_enabled_for_utility != 0)
  {
    while (1)
    {
      v82 = pas_physical_page_sharing_pool_balance;
      v83 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v83 != v82)
        break;
      if (__stlxr(pas_physical_page_sharing_pool_balance - 0x4000, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        goto LABEL_88;
      }
      v84 = 1;
LABEL_89:
      __dmb(0xBu);
      if (v84)
        goto LABEL_90;
    }
    __clrex();
LABEL_88:
    v84 = 0;
    goto LABEL_89;
  }
LABEL_90:
  v85 = *(_QWORD *)v78;
LABEL_158:
  pas_segregated_page_construct(v85, v78 | 1, 0, (uint64_t)&unk_1E35BEF30);
  *(_BYTE *)(v78 + 11) = 1;
LABEL_178:
  if (!v57)
    goto LABEL_202;
  if ((v57 & 7u) >= 2)
  {
    if ((v57 & 7) != 4)
      goto LABEL_202;
    v138 = v57 & 0xFFFFFFFFFFFFFFF8;
    v139 = pas_compact_heap_reservation_base;
    v140 = ((8 * *(unsigned __int16 *)((v57 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v57 & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
         + pas_compact_heap_reservation_base;
    v141 = *(unsigned __int8 *)(v138 + 9);
    v142 = *(unsigned __int16 *)(v138 + 7);
    v189 = *(_QWORD *)((*(_QWORD *)v140 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v143 = *(const os_unfair_lock **)(v56 + 8);
    if (v143)
    {
      v144 = *(unsigned __int8 *)(v138 + 9);
      os_unfair_lock_assert_owner(v143);
      v141 = v144;
    }
    if (*(_DWORD *)(v140 + 24) == 1)
    {
      v145 = *(_QWORD *)(v56 + 24) == 0;
      v146 = *(_BYTE *)(v138 + 19);
      if ((v146 & 2) != 0)
        goto LABEL_191;
    }
    else
    {
      v145 = 0;
      v146 = *(_BYTE *)(v138 + 19);
      if ((v146 & 2) != 0)
      {
LABEL_191:
        *(_BYTE *)(v138 + 19) = v146 & 0xFC;
        --*(_DWORD *)(v140 + 24);
        pas_segregated_directory_view_did_become_eligible_at_index(((8 * v142) | (v141 << 19)) + v139, *(unsigned __int8 *)(v138 + 16));
        if (!v145)
          goto LABEL_202;
LABEL_195:
        v147 = v139 & 5 | 2;
        if (v147 == 3)
        {
          v148 = ((8 * *(unsigned __int16 *)((v140 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((v140 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
               + pas_compact_heap_reservation_base;
          v136 = v189;
        }
        else
        {
          v136 = v189;
          if (v147 != 2)
          {
            v137 = 0;
            goto LABEL_201;
          }
          v148 = v140 & 0xFFFFFFFFFFFFFFF8;
        }
        v137 = *(_DWORD *)(v148 + 16) & 0x7FFFFFFF;
LABEL_201:
        pas_segregated_directory_view_did_become_empty_at_index(v136, v137);
        goto LABEL_202;
      }
    }
    *(_BYTE *)(v138 + 19) = v146 & 0xFE;
    --*(_DWORD *)(v140 + 24);
    if (!v145)
      goto LABEL_202;
    goto LABEL_195;
  }
  v132 = *(unsigned __int8 *)(v56 + 2);
  if (*(_BYTE *)(v56 + 2))
    *(_BYTE *)(v56 + 2) = 0;
  v133 = ((8 * *(unsigned __int16 *)((v57 & 0xFFFFFFFFFFFFFFF8) + 8)) | ((unint64_t)*(unsigned __int8 *)((v57 & 0xFFFFFFFFFFFFFFF8) + 10) << 19))
       + pas_compact_heap_reservation_base;
  v134 = *(unsigned int *)((v57 & 0xFFFFFFFFFFFFFFF8) + 12);
  v135 = *(_QWORD *)(v56 + 24);
  *(_BYTE *)(v56 + 1) = 0;
  if (v132)
    pas_segregated_directory_view_did_become_eligible_at_index(v133, v134);
  if (!v135)
  {
    v136 = v133;
    v137 = v134;
    goto LABEL_201;
  }
LABEL_202:
  if (!v77)
  {
    v185 = 0;
    v186 = 0;
    goto LABEL_240;
  }
  v75 = v77 & 0xFFFFFFFFFFFFFFF8;
  if ((v77 & 6) == 0)
  {
    v56 = *(_QWORD *)v75;
    *(_BYTE *)(v56 + 1) = 1;
    *(_QWORD *)(v56 + 32) = v77 | 1;
    v7 = &unk_1ECF57000;
    v5 = v192;
    if (!*(_QWORD *)(v56 + 24))
    {
LABEL_71:
      v59 = v7[317] + 8 * *(unsigned int *)(v12 + 40);
      v60 = *(_DWORD *)v59;
      v61 = *(unsigned int *)(v59 + 4) + v56;
      *(_QWORD *)(v56 + 24) = *(unsigned __int8 *)(v59 + 8);
      *(_QWORD *)(a1 + 8) = v61;
      *(_DWORD *)(a1 + 16) = v61 - (v60 + v56);
      *v5 = 0;
      v5[1] = 0;
      *(_QWORD *)(a1 + 24) = v56;
      v62 = (_OWORD *)(v7[317] + *(unsigned int *)(v59 + 9));
      v63 = v62[2];
      v64 = v62[3];
      v65 = v62[1];
      *(_OWORD *)(v56 + 44) = *v62;
      *(_OWORD *)(v56 + 92) = v64;
      *(_OWORD *)(v56 + 76) = v63;
      *(_OWORD *)(v56 + 60) = v65;
      v66 = v62[6];
      v67 = v62[7];
      v68 = v62[5];
      *(_OWORD *)(v56 + 108) = v62[4];
      *(_OWORD *)(v56 + 156) = v67;
      *(_OWORD *)(v56 + 140) = v66;
      *(_OWORD *)(v56 + 124) = v68;
      v69 = v62[10];
      v70 = v62[11];
      v71 = v62[9];
      *(_OWORD *)(v56 + 172) = v62[8];
      *(_OWORD *)(v56 + 220) = v70;
      *(_OWORD *)(v56 + 204) = v69;
      *(_OWORD *)(v56 + 188) = v71;
      v72 = v62[14];
      v73 = v62[15];
      v74 = v62[13];
      *(_OWORD *)(v56 + 236) = v62[12];
      *(_OWORD *)(v56 + 268) = v72;
      *(_OWORD *)(v56 + 284) = v73;
      *(_OWORD *)(v56 + 252) = v74;
      goto LABEL_227;
    }
    goto LABEL_212;
  }
  v149 = *(unsigned __int16 *)(v75 + 4) | ((unint64_t)*(unsigned __int8 *)(v75 + 6) << 16);
  v7 = &unk_1ECF57000;
  v150 = pas_compact_heap_reservation_base + 8 * v149;
  if (v149)
    v151 = v150 == 0;
  else
    v151 = 1;
  if (!v151)
  {
    v56 = *(_QWORD *)v150;
    if ((*(_QWORD *)v150 & 1) != 0)
      v56 = *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFFELL);
    *(_BYTE *)(v75 + 19) |= 1u;
    ++*(_DWORD *)(v150 + 24);
    v112 = -5;
    goto LABEL_218;
  }
  v5 = v192;
  if (pas_utility_heap_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(a1, v75, v12))
  {
    goto LABEL_227;
  }
  v185 = 0;
  v186 = 0;
LABEL_240:
  *(_BYTE *)a1 = 0;
  return a4(v185, v186);
}

uint64_t pas_utility_heap_config_specialized_local_allocator_try_allocate_medium_segregated_with_free_bits(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
LABEL_2:
    v3 = __clz(__rbit64(v1));
    *(_QWORD *)(a1 + 40) = v1 & ~(1 << v3);
    return v2 + v3;
  }
  else if (*(_BYTE *)(a1 + 5) == 2
         && (v6 = *(unsigned int *)(a1 + 32), v5 = *(_DWORD *)(a1 + 36), v6 < v5))
  {
    v7 = a1 + 8 * v6;
    *(_QWORD *)(v7 + 56) = 0;
    v8 = (unint64_t *)(v7 + 64);
    v9 = v5 - 1 - v6;
    while (v9)
    {
      v2 += 64;
      v10 = *v8++;
      v1 = v10;
      LODWORD(v6) = v6 + 1;
      --v9;
      if (v10)
      {
        *(_DWORD *)(a1 + 32) = v6;
        *(_QWORD *)(a1 + 24) = v2;
        goto LABEL_2;
      }
    }
    *(_DWORD *)(a1 + 32) = v5;
    return 0;
  }
  else
  {
    return 0;
  }
}

uint64_t pas_utility_heap_config_specialized_local_allocator_try_allocate_inline_cases(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    *(_DWORD *)(a1 + 16) = v1 - *(_DWORD *)(a1 + 20);
    return *(_QWORD *)(a1 + 8) - v1;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
LABEL_4:
      v5 = __clz(v3);
      *(_QWORD *)(a1 + 40) = v3 & ~(0x8000000000000000 >> v5);
      return v4 + 8 * v5;
    }
    else if (*(_BYTE *)(a1 + 5) == 4
           && (v6 = *(unsigned int *)(a1 + 32), v7 = *(_DWORD *)(a1 + 36), v6 < v7))
    {
      v8 = a1 + 8 * v6;
      *(_QWORD *)(v8 + 56) = 0;
      v9 = (unint64_t *)(v8 + 64);
      v10 = v7 - 1 - v6;
      while (v10)
      {
        v4 += 512;
        v12 = *v9++;
        v11 = v12;
        LODWORD(v6) = v6 + 1;
        --v10;
        if (v12)
        {
          v3 = __rbit64(v11);
          *(_DWORD *)(a1 + 32) = v6;
          *(_QWORD *)(a1 + 24) = v4;
          goto LABEL_4;
        }
      }
      *(_DWORD *)(a1 + 32) = v7;
      return 0;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t pas_utility_heap_config_specialized_local_allocator_try_allocate_slow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _BOOL8))
{
  uint64_t inline_cases;
  char v9;
  uint64_t v10;
  _BOOL8 v11;

  if (*(_BYTE *)(a1 + 3) != 2)
    *(_BYTE *)(a1 + 3) = 2;
  while (1)
  {
    if (*(_BYTE *)(a1 + 5) == 5)
    {
      inline_cases = pas_utility_heap_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(a1);
      if ((v9 & 1) != 0)
      {
        v11 = (v9 & 1) != 0;
        goto LABEL_13;
      }
    }
    v10 = (*(_BYTE *)(a1 + 5) - 4) > 7u ? 0 : qword_19919FDF0[(char)(*(_BYTE *)(a1 + 5) - 4)];
    (*((void (**)(uint64_t, uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v10) + 26))(a1, a5);
    if (!*(_QWORD *)(a1 + 24))
      break;
    inline_cases = pas_utility_heap_config_specialized_local_allocator_try_allocate_inline_cases(a1);
    if (v11)
      goto LABEL_13;
  }
  inline_cases = 0;
  v11 = 0;
LABEL_13:
  *(_BYTE *)a1 = 0;
  return a6(inline_cases, v11);
}

uint64_t pas_utility_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  const os_unfair_lock *v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 *v17;
  uint64_t v18;

  if (a4 != 2)
  {
    result = pas_msl_free_logging_slow(a2);
    __break(1u);
    return result;
  }
  v4 = a2 & 0xFFFFFFFFFFFFC000;
  v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFC000 | (4 * ((a2 >> 8) & 0x3F))) + 0x2C) & ~(1 << (a2 >> 3));
  *(_DWORD *)((a2 & 0xFFFFFFFFFFFFC000 | (4 * ((a2 >> 8) & 0x3F))) + 0x2C) = v5;
  v6 = *(unsigned int *)((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 0x20) & 0xFFFFFFFFFFFFFFF8)
                       + 4 * ((a2 >> 8) & 0x3F)
                       + 20);
  if ((_DWORD)v6)
    v7 = pas_compact_heap_reservation_base + 8 * v6;
  else
    v7 = 0;
  v8 = *(_BYTE *)(v7 + 19);
  if ((v8 & 4) != 0)
  {
    if (v5)
      return 1;
  }
  else
  {
    v10 = *(const os_unfair_lock **)((a2 & 0xFFFFFFFFFFFFC000) + 8);
    if (v10)
    {
      os_unfair_lock_assert_owner(v10);
      v8 = *(_BYTE *)(v7 + 19);
    }
    if ((v8 & 1) != 0)
    {
      *(_BYTE *)(v7 + 19) = v8 | 6;
      if (v5)
        return 1;
    }
    else
    {
      if ((v7 & 3) != 0)
        v11 = 0;
      else
        v11 = *(unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFF8) + 16);
      pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v7 + 7)) | ((unint64_t)*(unsigned __int8 *)(v7 + 9) << 19))+ pas_compact_heap_reservation_base, v11);
      *(_BYTE *)(v7 + 19) |= 4u;
      if (v5)
        return 1;
    }
  }
  if (*(_QWORD *)(v4 + 24) != 1)
  {
    --*(_QWORD *)(v4 + 24);
    return 1;
  }
  v12 = (unsigned int *)timebase_info_ptr;
  if (timebase_info_ptr)
  {
    v13 = mach_approximate_time();
    v15 = *v12;
    v14 = v12[1];
    if ((pas_get_epoch_first & 1) != 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  get_timebase_info_slow();
  v13 = mach_approximate_time();
  v15 = timebase_info;
  v14 = *(unsigned int *)algn_1ECF57B54;
  if ((pas_get_epoch_first & 1) == 0)
LABEL_21:
    pas_get_epoch_first = 1;
LABEL_22:
  v16 = v13 * v15;
  v17 = (unsigned __int128 *)(v4 + 16);
  v18 = v16 / v14;
  do
    __ldxp(v17);
  while (__stxp(v18, v17));
  pas_segregated_view_note_emptiness(*(_QWORD *)(v4 + 32), v4);
  return 1;
}

void pas_panic(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  pid_t v10;

  v10 = getpid();
  pas_log("[%d] pas panic: ", v10);
  pas_vlog(a1, &a9);
  pas_crash_with_info_impl();
}

void pas_crash_with_info_impl()
{
  __break(0xC471u);
}

void pas_deallocation_did_fail(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  pas_panic("deallocation did fail at %p: %s\n", a2, a3, a4, a5, a6, a7, a8, a2);
}

void pas_reallocation_did_fail(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  pas_panic("reallocation did fail with source_heap = %p, target_heap = %p, old_ptr = %p, old_size = %zu, new_size = %zu: %s\n", a2, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t vmEntryToJavaScript(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v12[22];

  v12[0] = a2;
  v8 = *((_QWORD *)a2 + 6);
  v12[1] = *((_QWORD *)a2 + 5);
  v12[2] = v8;
  v9 = 8 * (*(unsigned int *)(a3 + 32) + 5);
  v10 = &v12[v9 / 0xFFFFFFFFFFFFFFF8];
  if (v12 <= &v12[v9 / 0xFFFFFFFFFFFFFFF8] || (unint64_t)v10 < *((_QWORD *)a2 + 1))
    return llint_throw_stack_overflow_error_from_vm_entry(a1, a2, a3, (uint64_t)v10, v9, a6, a7, a8);
  else
    return jsc_llint_doVMEntry__copyHeaderLoop(a1, (uint64_t)a2, a3);
}

uint64_t jsc_llint_doVMEntry__copyHeaderLoop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (*(_DWORD *)(a3 + 16) - 1);
  v4 = (*(_DWORD *)(a3 + 32) - 1);
  if ((_DWORD)v3 == (_DWORD)v4)
    return jsc_llint_doVMEntry__copyArgs(a1, a2, a3, *(_QWORD *)(a3 + 24), v3, v4);
  else
    return jsc_llint_doVMEntry__fillExtraArgsLoop(a1, a2);
}

uint64_t jsc_llint_doVMEntry__fillExtraArgsLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  do
  {
    a6 = (a6 - 1);
    *(&a9 + a6 + 6) = a4;
  }
  while ((_DWORD)a5 != (_DWORD)a6);
  return jsc_llint_doVMEntry__copyArgs(a1, a2, a3, a4, a5, a6);
}

uint64_t jsc_llint_doVMEntry__copyArgsLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while ((_DWORD)a5)
  {
    a5 = (a5 - 1);
    a6 = *(_QWORD *)(a4 + 8 * a5);
    *(&a9 + a5 + 6) = a6;
  }
  return jsc_llint_doVMEntry__copyArgsDone(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_doVMEntry__copyArgsDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(a2 + 40) = &a9;
  *(_QWORD *)(a2 + 48) = v9;
  return llint_call_javascript();
}

uint64_t llint_call_javascript(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = a1();
  v3 = *(_QWORD *)(v1 - 176);
  v4 = *(_QWORD *)(v1 - 160);
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(v1 - 168);
  *(_QWORD *)(v3 + 48) = v4;
  return result;
}

uint64_t vmEntryToJavaScriptWith0Arguments(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[28];
  uint64_t vars0;

  v7[6] = a2;
  v5 = *(_QWORD *)(a2 + 48);
  v7[7] = *(_QWORD *)(a2 + 40);
  v7[8] = v5;
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = 1;
  v7[5] = a5;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = &vars0;
  return llint_call_javascript(a1);
}

uint64_t vmEntryToJavaScriptWith1Arguments(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[30];
  uint64_t vars0;

  v8[8] = a2;
  v6 = *(_QWORD *)(a2 + 48);
  v8[9] = *(_QWORD *)(a2 + 40);
  v8[10] = v6;
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = 2;
  v8[5] = a5;
  v8[6] = a6;
  v8[7] = a6;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = &vars0;
  return llint_call_javascript(a1);
}

uint64_t vmEntryToJavaScriptWith2Arguments(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD v9[30];
  uint64_t vars0;

  v9[8] = a2;
  v7 = *(_QWORD *)(a2 + 48);
  v9[9] = *(_QWORD *)(a2 + 40);
  v9[10] = v7;
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = 3;
  v9[5] = a5;
  v9[6] = a6;
  v9[7] = a7;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = &vars0;
  return llint_call_javascript(a1);
}

uint64_t vmEntryToJavaScriptWith3Arguments(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD v10[32];
  uint64_t vars0;

  v10[10] = a2;
  v8 = *(_QWORD *)(a2 + 48);
  v10[11] = *(_QWORD *)(a2 + 40);
  v10[12] = v8;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = 4;
  v10[5] = a5;
  v10[6] = a6;
  v10[7] = a7;
  v10[8] = a8;
  v10[9] = a8;
  *(_QWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = &vars0;
  return llint_call_javascript(a1);
}

uint64_t vmEntryToNative(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v12[22];

  v12[0] = a2;
  v8 = *((_QWORD *)a2 + 6);
  v12[1] = *((_QWORD *)a2 + 5);
  v12[2] = v8;
  v9 = 8 * (*(unsigned int *)(a3 + 32) + 5);
  v10 = &v12[v9 / 0xFFFFFFFFFFFFFFF8];
  if (v12 <= &v12[v9 / 0xFFFFFFFFFFFFFFF8] || (unint64_t)v10 < *((_QWORD *)a2 + 1))
    return llint_throw_stack_overflow_error_from_vm_entry(a1, a2, a3, (uint64_t)v10, v9, a6, a7, a8);
  else
    return jsc_llint_0_doVMEntry__copyHeaderLoop(a1, (uint64_t)a2, a3);
}

uint64_t jsc_llint_0_doVMEntry__copyHeaderLoop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (*(_DWORD *)(a3 + 16) - 1);
  v4 = (*(_DWORD *)(a3 + 32) - 1);
  if ((_DWORD)v3 == (_DWORD)v4)
    return jsc_llint_0_doVMEntry__copyArgs(a1, a2, a3, *(_QWORD *)(a3 + 24), v3, v4);
  else
    return jsc_llint_0_doVMEntry__fillExtraArgsLoop(a1, a2);
}

uint64_t jsc_llint_0_doVMEntry__fillExtraArgsLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  do
  {
    a6 = (a6 - 1);
    *(&a9 + a6 + 6) = a4;
  }
  while ((_DWORD)a5 != (_DWORD)a6);
  return jsc_llint_0_doVMEntry__copyArgs(a1, a2, a3, a4, a5, a6);
}

uint64_t jsc_llint_0_doVMEntry__copyArgsLoop(uint64_t (*a1)(_QWORD, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while ((_DWORD)a5)
  {
    a5 = (a5 - 1);
    *(&a9 + a5 + 6) = *(_QWORD *)(a4 + 8 * a5);
  }
  return jsc_llint_0_doVMEntry__copyArgsDone(a1, a2, a3);
}

uint64_t jsc_llint_0_doVMEntry__copyArgsDone(uint64_t (*a1)(_QWORD, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v3;
  v7[0] = v3;
  result = a1(*(_QWORD *)(a3 + 48), v7);
  v5 = *(_QWORD *)(v3 - 176);
  v6 = *(_QWORD *)(v3 - 160);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(v3 - 168);
  *(_QWORD *)(v5 + 48) = v6;
  return result;
}

void sanitizeStackForVMImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v9;
  unint64_t v10;

  v9 = (unint64_t *)(a1 + 93112);
  v10 = *v9;
  *v9 = (unint64_t)&a9;
  if ((unint64_t)&a9 <= v10
    || (v10 & 0xF) != 0 && (*(_QWORD *)v10 = 0, v10 += 8, (unint64_t)&a9 <= v10))
  {
    jsc_llint_zeroFillDone();
  }
  else
  {
    jsc_llint_zeroFillLoop((unint64_t)&a9, (_QWORD *)v10);
  }
}

uint64_t jsc_llint_zeroFillLoop(unint64_t a1, _QWORD *a2)
{
  do
  {
    *a2 = 0;
    a2[1] = 0;
    a2 += 2;
  }
  while (a1 > (unint64_t)a2);
  return jsc_llint_zeroFillDone();
}

uint64_t vmEntryRecord(uint64_t a1)
{
  return a1 - 176;
}

void llint_entry(uint64_t (**a1)(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12), uint64_t (**a2)(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12), uint64_t (**a3)(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12))
{
  *a1 = llint_op_tail_call_varargs;
  a1[1] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_varargs;
  a1[2] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_iterator_next;
  a1[3] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_construct_varargs;
  a1[4] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_iterator_open;
  a1[5] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_set_private_brand;
  a1[6] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_check_private_brand;
  a1[7] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_id;
  a1[8] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_construct;
  a1[9] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_tail_call;
  a1[10] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_direct_eval;
  a1[11] = llint_op_tail_call_forward_arguments;
  a1[12] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_generator;
  a1[13] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_async_generator;
  a1[14] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_promise;
  a1[15] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_catch;
  a1[16] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_with_size;
  a1[17] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_buffer;
  a1[18] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_id;
  a1[19] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_length;
  a1[20] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_profile_type;
  a1[21] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_profile_control_flow;
  a1[22] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_with_species;
  a1[23] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call;
  a1[24] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_ignore_result;
  a1[25] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_resolve_scope;
  a1[26] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_from_scope;
  a1[27] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_to_scope;
  a1[28] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_this;
  a1[29] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_object;
  a1[30] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array;
  a1[31] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_val_with_this;
  a1[32] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_val;
  a1[33] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_private_name;
  a1[34] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_private_name;
  a1[35] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_val;
  a1[36] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_val_direct;
  a1[37] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_in_by_val;
  a1[38] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_next;
  a1[39] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_in_by_val;
  a1[40] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_has_own_property;
  a1[41] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_put_by_val;
  a1[42] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_this;
  a1[43] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_get_by_val;
  a1[44] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_id_direct;
  a1[45] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_try_get_by_id;
  a1[46] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jneq_ptr;
  a1[47] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_argument;
  a1[48] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_from_arguments;
  a1[49] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_prototype_of;
  a1[50] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_internal_field;
  a1[51] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_id_with_this;
  a1[52] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_object;
  a1[53] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_in_by_id;
  a1[54] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_has_private_name;
  a1[55] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_has_private_brand;
  a1[56] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_id_with_this;
  a1[57] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_del_by_id;
  a1[58] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_val_with_this;
  a1[59] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_del_by_val;
  a1[60] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_getter_by_id;
  a1[61] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_setter_by_id;
  a1[62] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_getter_setter_by_id;
  a1[63] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_getter_by_val;
  a1[64] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_setter_by_val;
  a1[65] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_define_data_property;
  a1[66] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_define_accessor_property;
  a1[67] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jmp;
  a1[68] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jtrue;
  a1[69] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jfalse;
  a1[70] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jeq_null;
  a1[71] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jneq_null;
  a1[72] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jundefined_or_null;
  a1[73] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnundefined_or_null;
  a1[74] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jeq_ptr;
  a1[75] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jeq;
  a1[76] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jstricteq;
  a1[77] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jneq;
  a1[78] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnstricteq;
  a1[79] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jless;
  a1[80] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jlesseq;
  a1[81] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jgreater;
  a1[82] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jgreatereq;
  a1[83] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnless;
  a1[84] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnlesseq;
  a1[85] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jngreater;
  a1[86] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jngreatereq;
  a1[87] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jbelow;
  a1[88] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jbeloweq;
  a1[89] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_loop_hint;
  a1[90] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_switch_imm;
  a1[91] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_switch_char;
  a1[92] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_switch_string;
  a1[93] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_func;
  a1[94] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_func_exp;
  a1[95] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_generator_func;
  a1[96] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_generator_func_exp;
  a1[97] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_func;
  a1[98] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_func_exp;
  a1[99] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_generator_func;
  a1[100] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_generator_func_exp;
  a1[101] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_set_function_name;
  a1[102] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_ret;
  a1[103] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_strcat;
  a1[104] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_primitive;
  a1[105] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_property_key;
  a1[106] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_property_key_or_number;
  a1[107] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_to_arguments;
  a1[108] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_push_with_scope;
  a1[109] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_lexical_environment;
  a1[110] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_generator_frame_environment;
  a1[111] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_parent_scope;
  a1[112] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_throw;
  a1[113] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_throw_static_error;
  a1[114] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_debug;
  a1[115] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_end;
  a1[116] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_property_enumerator;
  a1[117] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_unreachable;
  a1[118] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_rest;
  a1[119] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_rest_length;
  a1[120] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_yield;
  a1[121] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_check_traps;
  a1[122] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_log_shadow_chicken_prologue;
  a1[123] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_log_shadow_chicken_tail;
  a1[124] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_resolve_scope_for_hoisting_func_decl_in_eval;
  a1[125] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_internal_field;
  a1[126] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_nop;
  a1[127] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_super_sampler_begin;
  a1[128] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_wide16;
  a1[129] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_super_sampler_end;
  a1[130] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_wide32;
  a1[131] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enter;
  a1[132] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_scope;
  a1[133] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_direct_arguments;
  a1[134] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_scoped_arguments;
  a1[135] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_cloned_arguments;
  a1[136] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_promise;
  a1[137] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_generator;
  a1[138] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_argument_count;
  a1[139] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_check_tdz;
  a1[140] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_with_spread;
  a1[141] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_spread;
  a1[142] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_regexp;
  a1[143] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_mov;
  a1[144] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_eq;
  a1[145] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_neq;
  a1[146] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_stricteq;
  a1[147] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_nstricteq;
  a1[148] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_less;
  a1[149] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_lesseq;
  a1[150] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_greater;
  a1[151] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_greatereq;
  a1[152] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_below;
  a1[153] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_beloweq;
  a1[154] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_mod;
  a1[155] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_pow;
  a1[156] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_urshift;
  a1[157] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_add;
  a1[158] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_mul;
  a1[159] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_div;
  a1[160] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_sub;
  a1[161] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitand;
  a1[162] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitor;
  a1[163] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitxor;
  a1[164] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_lshift;
  a1[165] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_rshift;
  a1[166] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_eq_null;
  a1[167] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_neq_null;
  a1[168] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_string;
  a1[169] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_unsigned;
  a1[170] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_empty;
  a1[171] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_is_undefined;
  a1[172] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_is_object;
  a1[173] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_is_function;
  a1[174] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_undefined_or_null;
  a1[175] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_BOOLean;
  a1[176] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_number;
  a1[177] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_big_int;
  a1[178] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_object;
  a1[179] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_callable;
  a1[180] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_constructor;
  a1[181] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_inc;
  a1[182] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_dec;
  a1[183] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_negate;
  a1[184] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_not;
  a1[185] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_identity_with_profile;
  a1[186] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_overrides_has_instance;
  a1[187] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_instanceof;
  a1[188] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_instanceof_custom;
  a1[189] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof;
  a1[190] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_cell_with_type;
  a1[191] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_has_structure_with_flags;
  a1[192] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_number;
  a1[193] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_numeric;
  a1[194] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitnot;
  a1[195] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_tail_call_indirect;
  a1[196] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_eval_prologue;
  a1[197] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_module_program_prologue;
  a1[198] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_call_prologue;
  a1[199] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_construct_prologue;
  a1[200] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_call_arity_check;
  a1[201] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_construct_arity_check;
  a1[202] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_generic_return_point;
  a1[203] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_throw_from_slow_path_trampoline;
  a1[204] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_throw_during_call_trampoline;
  a1[205] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_native_call_trampoline;
  a1[206] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_native_construct_trampoline;
  a1[207] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_internal_function_call_trampoline;
  a1[208] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_internal_function_construct_trampoline;
  a1[209] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_default_call_trampoline;
  a1[210] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_virtual_call_trampoline;
  a1[211] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_virtual_construct_trampoline;
  a1[212] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_virtual_tail_call_trampoline;
  a1[213] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_polymorphic_normal_call_trampoline;
  a1[214] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_polymorphic_closure_call_trampoline;
  a1[215] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))checkpoint_osr_exit_from_inlined_call_trampoline;
  a1[216] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))checkpoint_osr_exit_trampoline;
  a1[217] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))normal_osr_exit_trampoline;
  a1[218] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))fuzzer_return_early_from_loop_hint;
  a1[219] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))loop_osr_entry_gate;
  a1[220] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_get_host_call_return_value;
  a1[221] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_handle_uncaught_exception;
  a1[222] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_return_location;
  a1[223] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_ignore_result_return_location;
  a1[224] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_construct_return_location;
  a1[225] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_varargs_return_location;
  a1[226] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_construct_varargs_return_location;
  a1[227] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_get_by_id_return_location;
  a1[228] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_get_length_return_location;
  a1[229] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_get_by_val_return_location;
  a1[230] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_put_by_id_return_location;
  a1[231] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_put_by_val_return_location;
  a1[232] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_iterator_open_return_location;
  a1[233] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_iterator_next_return_location;
  a1[234] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_direct_eval_slow_return_location;
  a1[235] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_function_prologue_trampoline;
  a1[236] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_function_prologue;
  a1[237] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_program_prologue;
  a1[238] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_to_wasm_wrapper_entry;
  a1[239] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call;
  a1[240] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_ignore_result;
  a1[241] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_construct;
  a1[242] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_varargs;
  a1[243] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_construct_varargs;
  a1[244] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_iterator_next;
  a1[245] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_iterator_open;
  a1[246] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_direct_eval_slow;
  a1[247] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_untag;
  a1[248] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_tag;
  a1[249] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_construct_arity_check_untag;
  a1[250] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_construct_arity_check_tag;
  a1[251] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_call;
  a1[252] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_call_indirect;
  a1[253] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_call_ref;
  a1[254] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_tail_call;
  a1[255] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_function_prologue_simd;
  *a2 = llint_op_tail_call_varargs_wide16;
  a2[1] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_varargs_wide16;
  a2[2] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_iterator_next_wide16;
  a2[3] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_construct_varargs_wide16;
  a2[4] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_iterator_open_wide16;
  a2[5] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_set_private_brand_wide16;
  a2[6] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_check_private_brand_wide16;
  a2[7] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_id_wide16;
  a2[8] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_construct_wide16;
  a2[9] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_tail_call_wide16;
  a2[10] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_direct_eval_wide16;
  a2[11] = llint_op_tail_call_forward_arguments_wide16;
  a2[12] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_generator_wide16;
  a2[13] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_async_generator_wide16;
  a2[14] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_promise_wide16;
  a2[15] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_catch_wide16;
  a2[16] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_with_size_wide16;
  a2[17] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_buffer_wide16;
  a2[18] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_id_wide16;
  a2[19] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_length_wide16;
  a2[20] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_profile_type_wide16;
  a2[21] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_profile_control_flow_wide16;
  a2[22] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_with_species_wide16;
  a2[23] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_wide16;
  a2[24] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_ignore_result_wide16;
  a2[25] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_resolve_scope_wide16;
  a2[26] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_from_scope_wide16;
  a2[27] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_to_scope_wide16;
  a2[28] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_this_wide16;
  a2[29] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_object_wide16;
  a2[30] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_wide16;
  a2[31] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_val_with_this_wide16;
  a2[32] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_val_wide16;
  a2[33] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_private_name_wide16;
  a2[34] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_private_name_wide16;
  a2[35] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_val_wide16;
  a2[36] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_val_direct_wide16;
  a2[37] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_in_by_val_wide16;
  a2[38] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_next_wide16;
  a2[39] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_in_by_val_wide16;
  a2[40] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_has_own_property_wide16;
  a2[41] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_put_by_val_wide16;
  a2[42] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_this_wide16;
  a2[43] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_get_by_val_wide16;
  a2[44] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_id_direct_wide16;
  a2[45] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_try_get_by_id_wide16;
  a2[46] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jneq_ptr_wide16;
  a2[47] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_argument_wide16;
  a2[48] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_from_arguments_wide16;
  a2[49] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_prototype_of_wide16;
  a2[50] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_internal_field_wide16;
  a2[51] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_id_with_this_wide16;
  a2[52] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_object_wide16;
  a2[53] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_in_by_id_wide16;
  a2[54] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_has_private_name_wide16;
  a2[55] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_has_private_brand_wide16;
  a2[56] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_id_with_this_wide16;
  a2[57] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_del_by_id_wide16;
  a2[58] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_val_with_this_wide16;
  a2[59] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_del_by_val_wide16;
  a2[60] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_getter_by_id_wide16;
  a2[61] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_setter_by_id_wide16;
  a2[62] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_getter_setter_by_id_wide16;
  a2[63] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_getter_by_val_wide16;
  a2[64] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_setter_by_val_wide16;
  a2[65] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_define_data_property_wide16;
  a2[66] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_define_accessor_property_wide16;
  a2[67] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jmp_wide16;
  a2[68] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jtrue_wide16;
  a2[69] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jfalse_wide16;
  a2[70] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jeq_null_wide16;
  a2[71] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jneq_null_wide16;
  a2[72] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jundefined_or_null_wide16;
  a2[73] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnundefined_or_null_wide16;
  a2[74] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jeq_ptr_wide16;
  a2[75] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jeq_wide16;
  a2[76] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jstricteq_wide16;
  a2[77] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jneq_wide16;
  a2[78] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnstricteq_wide16;
  a2[79] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jless_wide16;
  a2[80] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jlesseq_wide16;
  a2[81] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jgreater_wide16;
  a2[82] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jgreatereq_wide16;
  a2[83] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnless_wide16;
  a2[84] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnlesseq_wide16;
  a2[85] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jngreater_wide16;
  a2[86] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jngreatereq_wide16;
  a2[87] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jbelow_wide16;
  a2[88] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jbeloweq_wide16;
  a2[89] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_loop_hint_wide16;
  a2[90] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_switch_imm_wide16;
  a2[91] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_switch_char_wide16;
  a2[92] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_switch_string_wide16;
  a2[93] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_func_wide16;
  a2[94] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_func_exp_wide16;
  a2[95] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_generator_func_wide16;
  a2[96] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_generator_func_exp_wide16;
  a2[97] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_func_wide16;
  a2[98] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_func_exp_wide16;
  a2[99] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_generator_func_wide16;
  a2[100] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_generator_func_exp_wide16;
  a2[101] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_set_function_name_wide16;
  a2[102] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_ret_wide16;
  a2[103] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_strcat_wide16;
  a2[104] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_primitive_wide16;
  a2[105] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_property_key_wide16;
  a2[106] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_property_key_or_number_wide16;
  a2[107] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_to_arguments_wide16;
  a2[108] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_push_with_scope_wide16;
  a2[109] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_lexical_environment_wide16;
  a2[110] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_generator_frame_environment_wide16;
  a2[111] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_parent_scope_wide16;
  a2[112] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_throw_wide16;
  a2[113] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_throw_static_error_wide16;
  a2[114] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_debug_wide16;
  a2[115] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_end_wide16;
  a2[116] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_property_enumerator_wide16;
  a2[117] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_unreachable_wide16;
  a2[118] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_rest_wide16;
  a2[119] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_rest_length_wide16;
  a2[120] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_yield_wide16;
  a2[121] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_check_traps_wide16;
  a2[122] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_log_shadow_chicken_prologue_wide16;
  a2[123] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_log_shadow_chicken_tail_wide16;
  a2[124] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_resolve_scope_for_hoisting_func_decl_in_eval_wide16;
  a2[125] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_internal_field_wide16;
  a2[126] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_nop_wide16;
  a2[127] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_super_sampler_begin_wide16;
  a2[128] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_wide16_wide16;
  a2[129] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_super_sampler_end_wide16;
  a2[130] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_wide32_wide16;
  a2[131] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enter_wide16;
  a2[132] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_scope_wide16;
  a2[133] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_direct_arguments_wide16;
  a2[134] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_scoped_arguments_wide16;
  a2[135] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_cloned_arguments_wide16;
  a2[136] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_promise_wide16;
  a2[137] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_generator_wide16;
  a2[138] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_argument_count_wide16;
  a2[139] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_check_tdz_wide16;
  a2[140] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_with_spread_wide16;
  a2[141] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_spread_wide16;
  a2[142] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_regexp_wide16;
  a2[143] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_mov_wide16;
  a2[144] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_eq_wide16;
  a2[145] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_neq_wide16;
  a2[146] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_stricteq_wide16;
  a2[147] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_nstricteq_wide16;
  a2[148] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_less_wide16;
  a2[149] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_lesseq_wide16;
  a2[150] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_greater_wide16;
  a2[151] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_greatereq_wide16;
  a2[152] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_below_wide16;
  a2[153] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_beloweq_wide16;
  a2[154] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_mod_wide16;
  a2[155] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_pow_wide16;
  a2[156] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_urshift_wide16;
  a2[157] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_add_wide16;
  a2[158] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_mul_wide16;
  a2[159] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_div_wide16;
  a2[160] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_sub_wide16;
  a2[161] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitand_wide16;
  a2[162] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitor_wide16;
  a2[163] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitxor_wide16;
  a2[164] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_lshift_wide16;
  a2[165] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_rshift_wide16;
  a2[166] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_eq_null_wide16;
  a2[167] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_neq_null_wide16;
  a2[168] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_string_wide16;
  a2[169] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_unsigned_wide16;
  a2[170] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_empty_wide16;
  a2[171] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_is_undefined_wide16;
  a2[172] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_is_object_wide16;
  a2[173] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_is_function_wide16;
  a2[174] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_undefined_or_null_wide16;
  a2[175] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_BOOLean_wide16;
  a2[176] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_number_wide16;
  a2[177] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_big_int_wide16;
  a2[178] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_object_wide16;
  a2[179] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_callable_wide16;
  a2[180] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_constructor_wide16;
  a2[181] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_inc_wide16;
  a2[182] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_dec_wide16;
  a2[183] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_negate_wide16;
  a2[184] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_not_wide16;
  a2[185] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_identity_with_profile_wide16;
  a2[186] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_overrides_has_instance_wide16;
  a2[187] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_instanceof_wide16;
  a2[188] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_instanceof_custom_wide16;
  a2[189] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_wide16;
  a2[190] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_cell_with_type_wide16;
  a2[191] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_has_structure_with_flags_wide16;
  a2[192] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_number_wide16;
  a2[193] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_numeric_wide16;
  a2[194] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitnot_wide16;
  a2[195] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_tail_call_indirect_wide16;
  a2[196] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_eval_prologue_wide16;
  a2[197] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_module_program_prologue_wide16;
  a2[198] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_call_prologue_wide16;
  a2[199] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_construct_prologue_wide16;
  a2[200] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_call_arity_check_wide16;
  a2[201] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_construct_arity_check_wide16;
  a2[202] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_generic_return_point_wide16;
  a2[203] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_throw_from_slow_path_trampoline_wide16;
  a2[204] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_throw_during_call_trampoline_wide16;
  a2[205] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_native_call_trampoline_wide16;
  a2[206] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_native_construct_trampoline_wide16;
  a2[207] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_internal_function_call_trampoline_wide16;
  a2[208] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_internal_function_construct_trampoline_wide16;
  a2[209] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_default_call_trampoline_wide16;
  a2[210] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_virtual_call_trampoline_wide16;
  a2[211] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_virtual_construct_trampoline_wide16;
  a2[212] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_virtual_tail_call_trampoline_wide16;
  a2[213] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_polymorphic_normal_call_trampoline_wide16;
  a2[214] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_polymorphic_closure_call_trampoline_wide16;
  a2[215] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))checkpoint_osr_exit_from_inlined_call_trampoline_wide16;
  a2[216] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))checkpoint_osr_exit_trampoline_wide16;
  a2[217] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))normal_osr_exit_trampoline_wide16;
  a2[218] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))fuzzer_return_early_from_loop_hint_wide16;
  a2[219] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))loop_osr_entry_gate_wide16;
  a2[220] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_get_host_call_return_value_wide16;
  a2[221] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_handle_uncaught_exception_wide16;
  a2[222] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_return_location_wide16;
  a2[223] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_ignore_result_return_location_wide16;
  a2[224] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_construct_return_location_wide16;
  a2[225] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_varargs_return_location_wide16;
  a2[226] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_construct_varargs_return_location_wide16;
  a2[227] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_get_by_id_return_location_wide16;
  a2[228] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_get_length_return_location_wide16;
  a2[229] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_get_by_val_return_location_wide16;
  a2[230] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_put_by_id_return_location_wide16;
  a2[231] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_put_by_val_return_location_wide16;
  a2[232] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_iterator_open_return_location_wide16;
  a2[233] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_iterator_next_return_location_wide16;
  a2[234] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_direct_eval_slow_return_location_wide16;
  a2[235] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_function_prologue_trampoline_wide16;
  a2[236] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_function_prologue_wide16;
  a2[237] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_program_prologue_wide16;
  a2[238] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_to_wasm_wrapper_entry_wide16;
  a2[239] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_wide16;
  a2[240] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_ignore_result_wide16;
  a2[241] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_construct_wide16;
  a2[242] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_varargs_wide16;
  a2[243] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_construct_varargs_wide16;
  a2[244] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_iterator_next_wide16;
  a2[245] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_iterator_open_wide16;
  a2[246] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_direct_eval_slow_wide16;
  a2[247] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_tag_wide16;
  a2[248] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_tag_wide16;
  a2[249] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_tag_wide16;
  a2[250] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_tag_wide16;
  a2[251] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_call_wide16;
  a2[252] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_call_indirect_wide16;
  a2[253] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_call_ref_wide16;
  a2[254] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_tail_call_wide16;
  a2[255] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_function_prologue_simd_wide16;
  *a3 = llint_op_tail_call_varargs_wide32;
  a3[1] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_varargs_wide32;
  a3[2] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_iterator_next_wide32;
  a3[3] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_construct_varargs_wide32;
  a3[4] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_iterator_open_wide32;
  a3[5] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_set_private_brand_wide32;
  a3[6] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_check_private_brand_wide32;
  a3[7] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_id_wide32;
  a3[8] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_construct_wide32;
  a3[9] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_tail_call_wide32;
  a3[10] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_direct_eval_wide32;
  a3[11] = llint_op_tail_call_forward_arguments_wide32;
  a3[12] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_generator_wide32;
  a3[13] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_async_generator_wide32;
  a3[14] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_promise_wide32;
  a3[15] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_catch_wide32;
  a3[16] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_with_size_wide32;
  a3[17] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_buffer_wide32;
  a3[18] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_id_wide32;
  a3[19] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_length_wide32;
  a3[20] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_profile_type_wide32;
  a3[21] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_profile_control_flow_wide32;
  a3[22] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_with_species_wide32;
  a3[23] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_wide32;
  a3[24] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_call_ignore_result_wide32;
  a3[25] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_resolve_scope_wide32;
  a3[26] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_from_scope_wide32;
  a3[27] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_to_scope_wide32;
  a3[28] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_this_wide32;
  a3[29] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_object_wide32;
  a3[30] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_wide32;
  a3[31] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_val_with_this_wide32;
  a3[32] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_val_wide32;
  a3[33] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_private_name_wide32;
  a3[34] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_private_name_wide32;
  a3[35] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_val_wide32;
  a3[36] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_val_direct_wide32;
  a3[37] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_in_by_val_wide32;
  a3[38] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_next_wide32;
  a3[39] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_in_by_val_wide32;
  a3[40] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_has_own_property_wide32;
  a3[41] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_put_by_val_wide32;
  a3[42] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_this_wide32;
  a3[43] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enumerator_get_by_val_wide32;
  a3[44] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_id_direct_wide32;
  a3[45] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_try_get_by_id_wide32;
  a3[46] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jneq_ptr_wide32;
  a3[47] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_argument_wide32;
  a3[48] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_from_arguments_wide32;
  a3[49] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_prototype_of_wide32;
  a3[50] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_internal_field_wide32;
  a3[51] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_by_id_with_this_wide32;
  a3[52] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_object_wide32;
  a3[53] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_in_by_id_wide32;
  a3[54] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_has_private_name_wide32;
  a3[55] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_has_private_brand_wide32;
  a3[56] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_id_with_this_wide32;
  a3[57] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_del_by_id_wide32;
  a3[58] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_by_val_with_this_wide32;
  a3[59] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_del_by_val_wide32;
  a3[60] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_getter_by_id_wide32;
  a3[61] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_setter_by_id_wide32;
  a3[62] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_getter_setter_by_id_wide32;
  a3[63] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_getter_by_val_wide32;
  a3[64] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_setter_by_val_wide32;
  a3[65] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_define_data_property_wide32;
  a3[66] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_define_accessor_property_wide32;
  a3[67] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jmp_wide32;
  a3[68] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jtrue_wide32;
  a3[69] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jfalse_wide32;
  a3[70] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jeq_null_wide32;
  a3[71] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jneq_null_wide32;
  a3[72] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jundefined_or_null_wide32;
  a3[73] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnundefined_or_null_wide32;
  a3[74] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jeq_ptr_wide32;
  a3[75] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jeq_wide32;
  a3[76] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jstricteq_wide32;
  a3[77] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jneq_wide32;
  a3[78] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnstricteq_wide32;
  a3[79] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jless_wide32;
  a3[80] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jlesseq_wide32;
  a3[81] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jgreater_wide32;
  a3[82] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jgreatereq_wide32;
  a3[83] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnless_wide32;
  a3[84] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jnlesseq_wide32;
  a3[85] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jngreater_wide32;
  a3[86] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jngreatereq_wide32;
  a3[87] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jbelow_wide32;
  a3[88] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_jbeloweq_wide32;
  a3[89] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_loop_hint_wide32;
  a3[90] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_switch_imm_wide32;
  a3[91] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_switch_char_wide32;
  a3[92] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_switch_string_wide32;
  a3[93] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_func_wide32;
  a3[94] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_func_exp_wide32;
  a3[95] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_generator_func_wide32;
  a3[96] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_generator_func_exp_wide32;
  a3[97] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_func_wide32;
  a3[98] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_func_exp_wide32;
  a3[99] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_generator_func_wide32;
  a3[100] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_async_generator_func_exp_wide32;
  a3[101] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_set_function_name_wide32;
  a3[102] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_ret_wide32;
  a3[103] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_strcat_wide32;
  a3[104] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_primitive_wide32;
  a3[105] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_property_key_wide32;
  a3[106] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_property_key_or_number_wide32;
  a3[107] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_to_arguments_wide32;
  a3[108] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_push_with_scope_wide32;
  a3[109] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_lexical_environment_wide32;
  a3[110] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_generator_frame_environment_wide32;
  a3[111] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_parent_scope_wide32;
  a3[112] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_throw_wide32;
  a3[113] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_throw_static_error_wide32;
  a3[114] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_debug_wide32;
  a3[115] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_end_wide32;
  a3[116] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_property_enumerator_wide32;
  a3[117] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_unreachable_wide32;
  a3[118] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_rest_wide32;
  a3[119] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_rest_length_wide32;
  a3[120] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_yield_wide32;
  a3[121] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_check_traps_wide32;
  a3[122] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_log_shadow_chicken_prologue_wide32;
  a3[123] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_log_shadow_chicken_tail_wide32;
  a3[124] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_resolve_scope_for_hoisting_func_decl_in_eval_wide32;
  a3[125] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_put_internal_field_wide32;
  a3[126] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_nop_wide32;
  a3[127] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_super_sampler_begin_wide32;
  a3[128] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_wide16_wide32;
  a3[129] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_super_sampler_end_wide32;
  a3[130] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_wide32_wide32;
  a3[131] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_enter_wide32;
  a3[132] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_get_scope_wide32;
  a3[133] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_direct_arguments_wide32;
  a3[134] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_scoped_arguments_wide32;
  a3[135] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_create_cloned_arguments_wide32;
  a3[136] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_promise_wide32;
  a3[137] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_generator_wide32;
  a3[138] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_argument_count_wide32;
  a3[139] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_check_tdz_wide32;
  a3[140] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_array_with_spread_wide32;
  a3[141] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_spread_wide32;
  a3[142] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_new_regexp_wide32;
  a3[143] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_mov_wide32;
  a3[144] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_eq_wide32;
  a3[145] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_neq_wide32;
  a3[146] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_stricteq_wide32;
  a3[147] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_nstricteq_wide32;
  a3[148] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_less_wide32;
  a3[149] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_lesseq_wide32;
  a3[150] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_greater_wide32;
  a3[151] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_greatereq_wide32;
  a3[152] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_below_wide32;
  a3[153] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_beloweq_wide32;
  a3[154] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_mod_wide32;
  a3[155] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_pow_wide32;
  a3[156] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_urshift_wide32;
  a3[157] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_add_wide32;
  a3[158] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_mul_wide32;
  a3[159] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_div_wide32;
  a3[160] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_sub_wide32;
  a3[161] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitand_wide32;
  a3[162] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitor_wide32;
  a3[163] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitxor_wide32;
  a3[164] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_lshift_wide32;
  a3[165] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_rshift_wide32;
  a3[166] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_eq_null_wide32;
  a3[167] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_neq_null_wide32;
  a3[168] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_string_wide32;
  a3[169] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_unsigned_wide32;
  a3[170] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_empty_wide32;
  a3[171] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_is_undefined_wide32;
  a3[172] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_is_object_wide32;
  a3[173] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_is_function_wide32;
  a3[174] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_undefined_or_null_wide32;
  a3[175] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_BOOLean_wide32;
  a3[176] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_number_wide32;
  a3[177] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_big_int_wide32;
  a3[178] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_object_wide32;
  a3[179] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_callable_wide32;
  a3[180] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_constructor_wide32;
  a3[181] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_inc_wide32;
  a3[182] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_dec_wide32;
  a3[183] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_negate_wide32;
  a3[184] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_not_wide32;
  a3[185] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_identity_with_profile_wide32;
  a3[186] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_overrides_has_instance_wide32;
  a3[187] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_instanceof_wide32;
  a3[188] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_instanceof_custom_wide32;
  a3[189] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_typeof_wide32;
  a3[190] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_is_cell_with_type_wide32;
  a3[191] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_has_structure_with_flags_wide32;
  a3[192] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_number_wide32;
  a3[193] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_to_numeric_wide32;
  a3[194] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_op_bitnot_wide32;
  a3[195] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_tail_call_indirect_wide32;
  a3[196] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_eval_prologue_wide32;
  a3[197] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_module_program_prologue_wide32;
  a3[198] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_call_prologue_wide32;
  a3[199] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_construct_prologue_wide32;
  a3[200] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_call_arity_check_wide32;
  a3[201] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_function_for_construct_arity_check_wide32;
  a3[202] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_generic_return_point_wide32;
  a3[203] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_throw_from_slow_path_trampoline_wide32;
  a3[204] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_throw_during_call_trampoline_wide32;
  a3[205] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_native_call_trampoline_wide32;
  a3[206] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_native_construct_trampoline_wide32;
  a3[207] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_internal_function_call_trampoline_wide32;
  a3[208] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_internal_function_construct_trampoline_wide32;
  a3[209] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_default_call_trampoline_wide32;
  a3[210] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_virtual_call_trampoline_wide32;
  a3[211] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_virtual_construct_trampoline_wide32;
  a3[212] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_virtual_tail_call_trampoline_wide32;
  a3[213] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_polymorphic_normal_call_trampoline_wide32;
  a3[214] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_polymorphic_closure_call_trampoline_wide32;
  a3[215] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))checkpoint_osr_exit_from_inlined_call_trampoline_wide32;
  a3[216] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))checkpoint_osr_exit_trampoline_wide32;
  a3[217] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))normal_osr_exit_trampoline_wide32;
  a3[218] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))fuzzer_return_early_from_loop_hint_wide32;
  a3[219] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))loop_osr_entry_gate_wide32;
  a3[220] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_get_host_call_return_value_wide32;
  a3[221] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_handle_uncaught_exception_wide32;
  a3[222] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_return_location_wide32;
  a3[223] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_ignore_result_return_location_wide32;
  a3[224] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_construct_return_location_wide32;
  a3[225] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_varargs_return_location_wide32;
  a3[226] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_construct_varargs_return_location_wide32;
  a3[227] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_get_by_id_return_location_wide32;
  a3[228] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_get_length_return_location_wide32;
  a3[229] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_get_by_val_return_location_wide32;
  a3[230] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_put_by_id_return_location_wide32;
  a3[231] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_put_by_val_return_location_wide32;
  a3[232] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_iterator_open_return_location_wide32;
  a3[233] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_iterator_next_return_location_wide32;
  a3[234] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))op_call_direct_eval_slow_return_location_wide32;
  a3[235] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_function_prologue_trampoline_wide32;
  a3[236] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_function_prologue_wide32;
  a3[237] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))llint_program_prologue_wide32;
  a3[238] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_to_wasm_wrapper_entry_wide32;
  a3[239] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_wide32;
  a3[240] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_ignore_result_wide32;
  a3[241] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_construct_wide32;
  a3[242] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_varargs_wide32;
  a3[243] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_construct_varargs_wide32;
  a3[244] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_iterator_next_wide32;
  a3[245] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_iterator_open_wide32;
  a3[246] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_op_call_direct_eval_slow_wide32;
  a3[247] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_tag_wide16;
  a3[248] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_tag_wide16;
  a3[249] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_tag_wide16;
  a3[250] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))js_trampoline_llint_function_for_call_arity_check_tag_wide16;
  a3[251] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_call_wide32;
  a3[252] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_call_indirect_wide32;
  a3[253] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_call_ref_wide32;
  a3[254] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_trampoline_wasm_tail_call_wide32;
  a3[255] = (uint64_t (*)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))wasm_function_prologue_simd_wide32;
  if (byte_1ECF4C1E5)
    JSC::FixedVMPoolExecutableAllocator::RegionAllocator::crashOnJumpIslandExhaustion((JSC::FixedVMPoolExecutableAllocator::RegionAllocator *)a1);
  jsc_llint_entry__notFrozen();
}

uint64_t llint_op_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMapWide16[*(unsigned __int8 *)(v5 + a5 + 1)]();
}

uint64_t llint_op_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMapWide32[*(unsigned __int8 *)(v5 + a5 + 1)]();
}

uint64_t llint_program_prologue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t (*v12)(void);
  uint64_t vars0;

  v9 = *(_QWORD *)(a9 + 56);
  v10 = *(_DWORD *)(v9 + 168) + 5;
  *(_DWORD *)(v9 + 168) = v10;
  if (v10 < 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__prologue__continue(v9, a9, a3, a4, a5, a6, a7, a8);
  v12 = (uint64_t (*)(void))llint_entry_osr((uint64_t)&vars0);
  if (v12)
    return v12();
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__prologue__recover();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__prologue__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v12 - 16) = v10;
  *(_QWORD *)(v12 - 8) = v11;
  *(_QWORD *)(v12 - 32) = v8;
  *(_QWORD *)(v12 - 24) = v9;
  v13 = v12 - 8 * *(unsigned int *)(a2 + 20);
  if (v13 > v12)
    return jsc_llint_op__commonOp__fn__size__k__gen__prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  a3 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a3 + 8) > v13)
    return jsc_llint_op__commonOp__fn__size__k__gen__prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__prologue__stackHeightOK();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__prologue__needStackCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;

  v10 = llint_stack_check(v9, (void *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  if (v11)
    return llint_throw_from_slow_path_trampoline((uint64_t)v10);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__prologue__stackHeightOKGetCodeBlock();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__prologue__stackHeightOKGetCodeBlock()
{
  uint64_t v0;

  return jsc_llint_op__commonOp__fn__size__k__gen__prologue__stackHeightOK(v0 - 8
                                                                              * *(unsigned int *)(*(_QWORD *)(v0 + 16)
                                                                                                + 20));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__prologue__stackHeightOK()
{
  return jsc_llint_op__commonOp__fn__size__k__gen__prologue__zeroStackLoop();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__prologue__zeroStackLoop(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (&a9 != a3)
    *--a3 = 0;
  return jsc_llint_op__commonOp__fn__size__k__gen__prologue__zeroStackDone(a1, a2, (uint64_t)a3, a4, a5);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__prologue__zeroStackDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5)]();
}

uint64_t llint_module_program_prologue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t (*v12)(void);
  uint64_t vars0;

  v9 = *(_QWORD *)(a9 + 56);
  v10 = *(_DWORD *)(v9 + 168) + 5;
  *(_DWORD *)(v9 + 168) = v10;
  if (v10 < 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__continue(v9, a9, a3, a4, a5, a6, a7, a8);
  v12 = (uint64_t (*)(void))llint_entry_osr((uint64_t)&vars0);
  if (v12)
    return v12();
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__recover();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v12 - 16) = v10;
  *(_QWORD *)(v12 - 8) = v11;
  *(_QWORD *)(v12 - 32) = v8;
  *(_QWORD *)(v12 - 24) = v9;
  v13 = v12 - 8 * *(unsigned int *)(a2 + 20);
  if (v13 > v12)
    return jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  a3 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a3 + 8) > v13)
    return jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__stackHeightOK();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__needStackCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;

  v10 = llint_stack_check(v9, (void *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  if (v11)
    return llint_throw_from_slow_path_trampoline((uint64_t)v10);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__stackHeightOKGetCodeBlock();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__stackHeightOKGetCodeBlock()
{
  uint64_t v0;

  return jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__stackHeightOK(v0 - 8
                                                                                * *(unsigned int *)(*(_QWORD *)(v0 + 16)
                                                                                                  + 20));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__stackHeightOK()
{
  return jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__zeroStackLoop();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__zeroStackLoop(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (&a9 != a3)
    *--a3 = 0;
  return jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__zeroStackDone(a1, a2, (uint64_t)a3, a4, a5);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__0_prologue__zeroStackDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5)]();
}

uint64_t llint_eval_prologue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t (*v12)(void);
  uint64_t vars0;

  v9 = *(_QWORD *)(a9 + 56);
  v10 = *(_DWORD *)(v9 + 168) + 5;
  *(_DWORD *)(v9 + 168) = v10;
  if (v10 < 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__continue(v9, a9, a3, a4, a5, a6, a7, a8);
  v12 = (uint64_t (*)(void))llint_entry_osr((uint64_t)&vars0);
  if (v12)
    return v12();
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__recover();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v12 - 16) = v10;
  *(_QWORD *)(v12 - 8) = v11;
  *(_QWORD *)(v12 - 32) = v8;
  *(_QWORD *)(v12 - 24) = v9;
  v13 = v12 - 8 * *(unsigned int *)(a2 + 20);
  if (v13 > v12)
    return jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  a3 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a3 + 8) > v13)
    return jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__stackHeightOK();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__needStackCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;

  v10 = llint_stack_check(v9, (void *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  if (v11)
    return llint_throw_from_slow_path_trampoline((uint64_t)v10);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__stackHeightOKGetCodeBlock();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__stackHeightOKGetCodeBlock()
{
  uint64_t v0;

  return jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__stackHeightOK(v0 - 8
                                                                                * *(unsigned int *)(*(_QWORD *)(v0 + 16)
                                                                                                  + 20));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__stackHeightOK()
{
  return jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__zeroStackLoop();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__zeroStackLoop(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (&a9 != a3)
    *--a3 = 0;
  return jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__zeroStackDone(a1, a2, (uint64_t)a3, a4, a5);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__1_prologue__zeroStackDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5)]();
}

uint64_t llint_function_for_call_prologue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t (*v12)(void);
  uint64_t vars0;

  v9 = *(_QWORD *)(a9 + 56);
  v10 = *(_DWORD *)(v9 + 168) + 5;
  *(_DWORD *)(v9 + 168) = v10;
  if (v10 < 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__continue(v9, a9, a3, a4, a5, a6, a7, a8);
  v12 = (uint64_t (*)(void))llint_entry_osr_function_for_call((uint64_t)&vars0);
  if (v12)
    return v12();
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__recover();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v12 - 16) = v10;
  *(_QWORD *)(v12 - 8) = v11;
  *(_QWORD *)(v12 - 32) = v8;
  *(_QWORD *)(v12 - 24) = v9;
  v13 = v12 - 8 * *(unsigned int *)(a2 + 20);
  if (v13 > v12)
    return jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  a3 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a3 + 8) > v13)
    return jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__stackHeightOK();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__needStackCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;

  v10 = llint_stack_check(v9, (void *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  if (v11)
    return llint_throw_from_slow_path_trampoline((uint64_t)v10);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__stackHeightOKGetCodeBlock();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__stackHeightOKGetCodeBlock()
{
  uint64_t v0;

  return jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__stackHeightOK(v0 - 8
                                                                                * *(unsigned int *)(*(_QWORD *)(v0 + 16)
                                                                                                  + 20));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__stackHeightOK()
{
  return jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__zeroStackLoop();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__zeroStackLoop(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (&a9 != a3)
    *--a3 = 0;
  return jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__zeroStackDone(a1, a2, (uint64_t)a3, a4, a5);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__2_prologue__zeroStackDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = *(unsigned int *)(a2 + 28);
  if (*(_DWORD *)(a2 + 28) && (a4 = *(_QWORD *)(a2 + 152)) != 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__functionInitialization__argumentProfileLoop(8 * v5, a2, 24 * v5, (_QWORD *)(a4 + 8 + 24 * v5));
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__functionInitialization__argumentProfileDone(v5, a2, a3, a4, a5);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__functionInitialization__argumentProfileLoop(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  do
  {
    a4 -= 3;
    *a4 = *(_QWORD *)(v4 + a1 + 32);
    a1 -= 8;
  }
  while (a1);
  return jsc_llint_op__commonOp__fn__size__k__gen__functionInitialization__argumentProfileDone();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__functionInitialization__argumentProfileDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5)]();
}

uint64_t llint_function_for_construct_prologue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t (*v12)(void);
  uint64_t vars0;

  v9 = *(_QWORD *)(a9 + 56);
  v10 = *(_DWORD *)(v9 + 168) + 5;
  *(_DWORD *)(v9 + 168) = v10;
  if (v10 < 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__continue(v9, a9, a3, a4, a5, a6, a7, a8);
  v12 = (uint64_t (*)(void))llint_entry_osr_function_for_construct((uint64_t)&vars0);
  if (v12)
    return v12();
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__recover();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v12 - 16) = v10;
  *(_QWORD *)(v12 - 8) = v11;
  *(_QWORD *)(v12 - 32) = v8;
  *(_QWORD *)(v12 - 24) = v9;
  v13 = v12 - 8 * *(unsigned int *)(a2 + 20);
  if (v13 > v12)
    return jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  a3 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a3 + 8) > v13)
    return jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__stackHeightOK();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__needStackCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;

  v10 = llint_stack_check(v9, (void *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  if (v11)
    return llint_throw_from_slow_path_trampoline((uint64_t)v10);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__stackHeightOKGetCodeBlock();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__stackHeightOKGetCodeBlock()
{
  uint64_t v0;

  return jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__stackHeightOK(v0 - 8
                                                                                * *(unsigned int *)(*(_QWORD *)(v0 + 16)
                                                                                                  + 20));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__stackHeightOK()
{
  return jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__zeroStackLoop();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__zeroStackLoop(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (&a9 != a3)
    *--a3 = 0;
  return jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__zeroStackDone(a1, a2, (uint64_t)a3, a4, a5);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__3_prologue__zeroStackDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = *(unsigned int *)(a2 + 28) - 1;
  if (*(_DWORD *)(a2 + 28) == 1)
    return jsc_llint_op__commonOp__fn__size__k__gen__3_functionInitialization__argumentProfileDone(v5, a2, a3, a4, a5);
  a4 = *(_QWORD *)(a2 + 152);
  if (!a4)
    return jsc_llint_op__commonOp__fn__size__k__gen__3_functionInitialization__argumentProfileDone(v5, a2, a3, a4, a5);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__3_functionInitialization__argumentProfileLoop(8 * v5, a2, 24 * v5, a4 + 8 + 24 * v5);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__3_functionInitialization__argumentProfileLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  do
  {
    a4 -= 24;
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(v4 + a1 + 40);
    a1 -= 8;
  }
  while (a1);
  return jsc_llint_op__commonOp__fn__size__k__gen__3_functionInitialization__argumentProfileDone();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__3_functionInitialization__argumentProfileDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5)]();
}

uint64_t llint_function_for_call_arity_check(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t (*v12)(void);
  uint64_t vars0;

  v9 = *(_QWORD *)(a9 + 56);
  v10 = *(_DWORD *)(v9 + 168) + 5;
  *(_DWORD *)(v9 + 168) = v10;
  if (v10 < 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__continue(v9, a9, a3, a4, a5, a6, a7, a8);
  v12 = (uint64_t (*)(void))llint_entry_osr_function_for_call_arityCheck((uint64_t)&vars0);
  if (v12)
    return v12();
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__recover();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v12 - 16) = v10;
  *(_QWORD *)(v12 - 8) = v11;
  *(_QWORD *)(v12 - 32) = v8;
  *(_QWORD *)(v12 - 24) = v9;
  v13 = v12 - 8 * *(unsigned int *)(a2 + 20);
  if (v13 > v12)
    return jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  a3 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a3 + 8) > v13)
    return jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__stackHeightOK();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__needStackCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;

  v10 = llint_stack_check(v9, (void *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  if (v11)
    return llint_throw_from_slow_path_trampoline((uint64_t)v10);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__stackHeightOKGetCodeBlock();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__stackHeightOKGetCodeBlock()
{
  uint64_t v0;

  return jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__stackHeightOK(v0 - 8
                                                                                * *(unsigned int *)(*(_QWORD *)(v0 + 16)
                                                                                                  + 20));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__stackHeightOK()
{
  return jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__zeroStackLoop();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__zeroStackLoop(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (&a9 != a3)
    *--a3 = 0;
  return jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__zeroStackDone(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__4_prologue__zeroStackDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v9 = *(unsigned int *)(v8 + 32);
  v10 = *(unsigned int *)(a2 + 28);
  if (v9 >= v10)
    return jsc_llint_op__commonOp__fn__size__k__gen__functionForCallBegin(v9, a2, v10, a4, a5);
  v12 = (v10 + 5);
  if ((((_BYTE)v10 + 5) & 1) != 0)
    LODWORD(v10) = v10 + 1;
  return jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__arityCheck(v9, a2, v10, v12, a5, a6, a7, a8);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__arityCheck(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (a3 - a1);
  v11 = 8 * (((_DWORD)v10 + 1) & 0xFFFFFFFE);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 72) + 8) <= (unint64_t)(v9 - v11))
    return jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__stackHeightOK();
  v13 = llint_slow_path_arityCheck(v9, (void *)(a5 + v8), v10, v11, a5 + v8, v9 - v11, a7, a8);
  if ((_DWORD)v13)
    return llint_throw_from_slow_path_trampoline(v13);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__noError(v13, v14, v15, v16);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__noError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(_DWORD)a2)
    return js_trampoline_llint_function_for_call_arity_check_tag(a1, a2, a3, a4);
  if ((a2 & 1) != 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__fillExtraSlots(10);
  return js_trampoline_llint_function_for_call_arity_check_untag();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__fillExtraSlots(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  do
  {
    *(_QWORD *)(v4 + 8 * a3) = a1;
    a3 = (a3 + 1);
    a4 = (a4 - 1);
  }
  while ((_DWORD)a4);
  v5 = a2 & 0xFFFFFFFE;
  if ((_DWORD)v5)
    return js_trampoline_llint_function_for_call_arity_check_untag();
  else
    return js_trampoline_llint_function_for_call_arity_check_tag(a1, v5, a3, a4);
}

uint64_t js_trampoline_llint_function_for_call_arity_check_untag()
{
  return jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__copyLoop();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__copyLoop(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  do
  {
    a4[a2] = *a4;
    ++a4;
    --a3;
  }
  while (a3);
  return jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__fillLoop(10, a2, a2, a4);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__functionArityCheck__fillLoop(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  do
  {
    *(_QWORD *)(a4 + 8 * a2) = a1;
    a4 += 8;
    ++a3;
  }
  while (a3);
  return js_trampoline_llint_function_for_call_arity_check_tag();
}

uint64_t js_trampoline_llint_function_for_call_arity_check_tag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_op__commonOp__fn__size__k__gen__functionForCallBegin(a1, *(_QWORD *)(v4 + 16), a3, a4, 0);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__functionForCallBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = *(unsigned int *)(a2 + 28);
  if (*(_DWORD *)(a2 + 28) && (a4 = *(_QWORD *)(a2 + 152)) != 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__4_functionInitialization__argumentProfileLoop(8 * v5, a2, 24 * v5, (_QWORD *)(a4 + 8 + 24 * v5));
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__4_functionInitialization__argumentProfileDone(v5, a2, a3, a4, a5);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__4_functionInitialization__argumentProfileLoop(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  do
  {
    a4 -= 3;
    *a4 = *(_QWORD *)(v4 + a1 + 32);
    a1 -= 8;
  }
  while (a1);
  return jsc_llint_op__commonOp__fn__size__k__gen__4_functionInitialization__argumentProfileDone();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__4_functionInitialization__argumentProfileDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5)]();
}

uint64_t llint_function_for_construct_arity_check(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t (*v12)(void);
  uint64_t vars0;

  v9 = *(_QWORD *)(a9 + 56);
  v10 = *(_DWORD *)(v9 + 168) + 5;
  *(_DWORD *)(v9 + 168) = v10;
  if (v10 < 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__continue(v9, a9, a3, a4, a5, a6, a7, a8);
  v12 = (uint64_t (*)(void))llint_entry_osr_function_for_construct_arityCheck((uint64_t)&vars0);
  if (v12)
    return v12();
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__recover();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v12 - 16) = v10;
  *(_QWORD *)(v12 - 8) = v11;
  *(_QWORD *)(v12 - 32) = v8;
  *(_QWORD *)(v12 - 24) = v9;
  v13 = v12 - 8 * *(unsigned int *)(a2 + 20);
  if (v13 > v12)
    return jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  a3 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a3 + 8) > v13)
    return jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__needStackCheck(v13, a2, a3, a4, 0, a6, a7, a8);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__stackHeightOK();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__needStackCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;

  v10 = llint_stack_check(v9, (void *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  if (v11)
    return llint_throw_from_slow_path_trampoline((uint64_t)v10);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__stackHeightOKGetCodeBlock();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__stackHeightOKGetCodeBlock()
{
  uint64_t v0;

  return jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__stackHeightOK(v0 - 8
                                                                                * *(unsigned int *)(*(_QWORD *)(v0 + 16)
                                                                                                  + 20));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__stackHeightOK()
{
  return jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__zeroStackLoop();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__zeroStackLoop(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (&a9 != a3)
    *--a3 = 0;
  return jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__zeroStackDone(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_prologue__zeroStackDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v9 = *(unsigned int *)(v8 + 32);
  v10 = *(unsigned int *)(a2 + 28);
  if (v9 >= v10)
    return jsc_llint_op__commonOp__fn__size__k__gen__functionForConstructBegin(v9, a2, v10, a4, a5);
  v12 = (v10 + 5);
  if ((((_BYTE)v10 + 5) & 1) != 0)
    LODWORD(v10) = v10 + 1;
  return jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__arityCheck(v9, a2, v10, v12, a5, a6, a7, a8);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__arityCheck(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (a3 - a1);
  v11 = 8 * (((_DWORD)v10 + 1) & 0xFFFFFFFE);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 72) + 8) <= (unint64_t)(v9 - v11))
    return jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__stackHeightOK();
  v13 = llint_slow_path_arityCheck(v9, (void *)(a5 + v8), v10, v11, a5 + v8, v9 - v11, a7, a8);
  if ((_DWORD)v13)
    return llint_throw_from_slow_path_trampoline(v13);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__noError(v13, v14, v15, v16);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__noError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(_DWORD)a2)
    return js_trampoline_llint_function_for_construct_arity_check_tag(a1, a2, a3, a4);
  if ((a2 & 1) != 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__fillExtraSlots(10);
  return js_trampoline_llint_function_for_construct_arity_check_untag();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__fillExtraSlots(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  do
  {
    *(_QWORD *)(v4 + 8 * a3) = a1;
    a3 = (a3 + 1);
    a4 = (a4 - 1);
  }
  while ((_DWORD)a4);
  v5 = a2 & 0xFFFFFFFE;
  if ((_DWORD)v5)
    return js_trampoline_llint_function_for_construct_arity_check_untag();
  else
    return js_trampoline_llint_function_for_construct_arity_check_tag(a1, v5, a3, a4);
}

uint64_t js_trampoline_llint_function_for_construct_arity_check_untag()
{
  return jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__copyLoop();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__copyLoop(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  do
  {
    a4[a2] = *a4;
    ++a4;
    --a3;
  }
  while (a3);
  return jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__fillLoop(10, a2, a2, a4);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_functionArityCheck__fillLoop(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  do
  {
    *(_QWORD *)(a4 + 8 * a2) = a1;
    a4 += 8;
    ++a3;
  }
  while (a3);
  return js_trampoline_llint_function_for_construct_arity_check_tag();
}

uint64_t js_trampoline_llint_function_for_construct_arity_check_tag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_op__commonOp__fn__size__k__gen__functionForConstructBegin(a1, *(_QWORD *)(v4 + 16), a3, a4, 0);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__functionForConstructBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = *(unsigned int *)(a2 + 28) - 1;
  if (*(_DWORD *)(a2 + 28) == 1)
    return jsc_llint_op__commonOp__fn__size__k__gen__5_functionInitialization__argumentProfileDone(v5, a2, a3, a4, a5);
  a4 = *(_QWORD *)(a2 + 152);
  if (!a4)
    return jsc_llint_op__commonOp__fn__size__k__gen__5_functionInitialization__argumentProfileDone(v5, a2, a3, a4, a5);
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__5_functionInitialization__argumentProfileLoop(8 * v5, a2, 24 * v5, a4 + 8 + 24 * v5);
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_functionInitialization__argumentProfileLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  do
  {
    a4 -= 24;
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(v4 + a1 + 40);
    a1 -= 8;
  }
  while (a1);
  return jsc_llint_op__commonOp__fn__size__k__gen__5_functionInitialization__argumentProfileDone();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_functionInitialization__argumentProfileDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5)]();
}

uint64_t llint_throw_stack_overflow_error_from_vm_entry(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  llint_throw_stack_overflow_error(a2, a3, a3, a4, a5, a6, a7, a8);
  v9 = *(_QWORD *)(v8 - 176);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v8 - 168);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v8 - 160);
  return 10;
}

uint64_t llint_handle_uncaught_exception(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 24);
  if ((v4 & 0xFFFE000000000007) == 3)
    return jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__isWasmCallee(3, a2, a3);
  if ((v4 & 8) != 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__convertJSCalleeToVM__preciseAllocation();
  return jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__convertJSCalleeToVM__done();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__isWasmCallee(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__loaded(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__loaded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a4 + 90480) = 0;
  v4 = (uint64_t *)(*(_QWORD *)(a4 + 48) - 176);
  v5 = *v4;
  *(_QWORD *)(v5 + 40) = v4[1];
  *(_QWORD *)(v5 + 48) = v4[2];
  return 10;
}

uint64_t llint_get_host_call_return_value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 8) != 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__5_convertJSCalleeToVM__preciseAllocation();
  else
    return jsc_llint_op__commonOp__fn__size__k__gen__5_convertJSCalleeToVM__done(*(_QWORD *)((a10 & 0xFFFFFFFFFFFFC000)
                                                                                           + 8));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__5_convertJSCalleeToVM__done(uint64_t a1)
{
  return *(_QWORD *)(a1 + 90464);
}

uint64_t llint_op_enter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = v5 - 32;
  if (*(_DWORD *)(*(_QWORD *)(v5 + 16) + 24) == 4)
    return jsc_llint_opEnterDone(a1, v6, *(unsigned int *)(*(_QWORD *)(v5 + 16) + 24) - 4, a4, a5);
  else
    return jsc_llint_opEnterLoop(10, v6, 4 - *(_DWORD *)(*(_QWORD *)(v5 + 16) + 24));
}

uint64_t jsc_llint_opEnterLoop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
    *(_QWORD *)(a2 + 8 * a3++) = a1;
  while (a3);
  return jsc_llint_opEnterDone();
}

uint64_t jsc_llint_opEnterDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = (char *)slow_path_enter(v6, (const void *)(a5 + v5)) - v5;
  v13 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 72);
  v14 = *(_DWORD *)(v13 + 80) & 0xF;
  if ((*(_DWORD *)(v13 + 80) & 0xF) != 0)
    return jsc_llint_checkTraps__handleTraps(v14, v13, v7, v8, (uint64_t)v9, v10, v11, v12);
  else
    return jsc_llint_checkTraps__afterHandlingTraps(v14, v13, v7, v8, (uint64_t)v9);
}

uint64_t jsc_llint_checkTraps__afterHandlingTraps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 1)]();
}

uint64_t jsc_llint_checkTraps__handleTraps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(v9 + 36) = a5;
  if (llint_slow_path_handle_traps(v9, a5 + v8, a3, a4, a5 + v8, a6, a7, a8))
    return jsc_llint_checkTraps__throwHandler();
  else
    return jsc_llint_checkTraps__afterHandlingTraps(0, v10, v11, v12, *(unsigned int *)(v9 + 36));
}

uint64_t llint_op_get_argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = *(char *)(v6 + a5 + 2);
  v9 = *(unsigned int *)(v7 + 32);
  if ((int)v9 <= (int)v8)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opGetArgumentOutOfBounds(v9, a2, v8, a4, a5);
  v11 = *(_QWORD *)(v7 + 8 * v8 + 40);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 3) - 16) = v11;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v11;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 4)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opGetArgumentOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 3) - 16) = 10;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 4)]();
}

uint64_t llint_op_get_argument_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = *(__int16 *)(v6 + a5 + 4);
  v9 = *(unsigned int *)(v7 + 32);
  if ((int)v9 <= (int)v8)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__5_fn__opGetArgumentOutOfBounds(v9, a2, v8, a4, a5);
  v11 = *(_QWORD *)(v7 + 8 * v8 + 40);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 6) - 16) = v11;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v11;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__5_fn__opGetArgumentOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 6) - 16) = 10;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 8)]();
}

uint64_t llint_op_get_argument_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = *(int *)(v6 + a5 + 6);
  v9 = *(unsigned int *)(v7 + 32);
  if ((int)v9 <= (int)v8)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__6_fn__opGetArgumentOutOfBounds(v9, a2, v8, a4, a5);
  v11 = *(_QWORD *)(v7 + 8 * v8 + 40);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 10) - 16) = v11;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v11;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__6_fn__opGetArgumentOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 10) - 16) = 10;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 14)]();
}

uint64_t llint_op_argument_count(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = (*(_DWORD *)(v6 + 32) - 1) | 0xFFFE000000000000;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 2)]();
}

uint64_t llint_op_argument_count_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = (*(_DWORD *)(v6 + 32) - 1) | 0xFFFE000000000000;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t llint_op_argument_count_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = (*(_DWORD *)(v6 + 32) - 1) | 0xFFFE000000000000;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_get_scope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 2)]();
}

uint64_t llint_op_get_scope_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t llint_op_get_scope_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_to_this(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;

  v12 = *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1));
  if ((v12 & v10) != 0 || *(_BYTE *)(v12 + 5) != 24)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opToThisSlow(v12, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(unsigned __int16 *)(v8 + 84);
  if (!*(_WORD *)(v8 + 84))
    v14 = *(_DWORD *)(v8 + 264);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__metadata__setUpOffset(v12, *(unsigned int *)v12, v14, (uint64_t)a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  JSC::Symbol *v10;
  JSC::Structure *v11;

  v10 = (JSC::Symbol *)(8 * *(unsigned __int8 *)(v9 + a5 + 4));
  v11 = (JSC::Structure *)*(unsigned int *)(((a3 + (_DWORD)v10) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((_DWORD)a2 == (_DWORD)v11)
    return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 5)]();
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opToThisSlow(a1, a2, v11, v10, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opToThisSlow(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_this(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 5)]();
}

uint64_t llint_op_to_this_wide16(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;

  v12 = *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2));
  if ((v12 & v10) != 0 || *(_BYTE *)(v12 + 5) != 24)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__6_fn__opToThisSlow(v12, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(unsigned __int16 *)(v8 + 84);
  if (!*(_WORD *)(v8 + 84))
    v14 = *(_DWORD *)(v8 + 264);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__6_metadata__setUpOffset(v12, *(unsigned int *)v12, v14, (uint64_t)a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__6_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  JSC::Symbol *v10;
  JSC::Structure *v11;

  v10 = (JSC::Symbol *)(8 * *(unsigned __int16 *)(v9 + a5 + 8));
  v11 = (JSC::Structure *)*(unsigned int *)(((a3 + (_DWORD)v10) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((_DWORD)a2 == (_DWORD)v11)
    return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 10)]();
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__6_fn__opToThisSlow(a1, a2, v11, v10, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__6_fn__opToThisSlow(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_this(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_to_this_wide32(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;

  v12 = *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2));
  if ((v12 & v10) != 0 || *(_BYTE *)(v12 + 5) != 24)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__7_fn__opToThisSlow(v12, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(unsigned __int16 *)(v8 + 84);
  if (!*(_WORD *)(v8 + 84))
    v14 = *(_DWORD *)(v8 + 264);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__7_metadata__setUpOffset(v12, *(unsigned int *)v12, v14, (uint64_t)a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__7_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  JSC::Symbol *v10;
  JSC::Structure *v11;

  v10 = (JSC::Symbol *)(8 * *(_DWORD *)(v9 + a5 + 14));
  v11 = (JSC::Structure *)*(unsigned int *)(((a3 + (_DWORD)v10) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((_DWORD)a2 == (_DWORD)v11)
    return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 18)]();
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__7_fn__opToThisSlow(a1, a2, v11, v10, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__7_fn__opToThisSlow(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_this(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 18)]();
}

uint64_t llint_op_check_tdz(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = (__int128 *)*(char *)(v5 + a5 + 1);
  if ((uint64_t)v7 < 16)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__load__done(v7, *(_QWORD *)(v6 + 8 * (_QWORD)v7), a3, a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__load__constant();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__load__constant()
{
  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__load__done();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__load__done(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if (!a2)
  {
    a1 = slow_path_check_tdz(v6, (unsigned __int8 *)(a5 + v5));
    a5 = (uint64_t)a1 - v5;
  }
  return jsc_llint_llintOp__commonOp__fn__fn__opNotTDZ((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__opNotTDZ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 2)]();
}

uint64_t llint_op_check_tdz_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = (__int128 *)*(__int16 *)(v5 + a5 + 2);
  if ((uint64_t)v7 < 64)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__7_load__done(v7, *(_QWORD *)(v6 + 8 * (_QWORD)v7), a3, a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__7_load__constant();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__7_load__constant()
{
  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__7_load__done();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__7_load__done(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if (!a2)
  {
    a1 = slow_path_check_tdz(v6, (unsigned __int8 *)(a5 + v5));
    a5 = (uint64_t)a1 - v5;
  }
  return jsc_llint_llintOp__commonOp__fn__7_fn__opNotTDZ((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__7_fn__opNotTDZ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t llint_op_check_tdz_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = (__int128 *)*(int *)(v5 + a5 + 2);
  if ((uint64_t)v7 < 0x40000000)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__8_load__done(v7, *(_QWORD *)(v6 + 8 * (_QWORD)v7), a3, a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__8_load__constant();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__8_load__constant()
{
  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__8_load__done();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__8_load__done(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if (!a2)
  {
    a1 = slow_path_check_tdz(v6, (unsigned __int8 *)(a5 + v5));
    a5 = (uint64_t)a1 - v5;
  }
  return jsc_llint_llintOp__commonOp__fn__8_fn__opNotTDZ((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__8_fn__opNotTDZ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_mov(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__9_load__done(a1, v7, *(_QWORD *)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__9_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__9_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__9_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__9_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_mov_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__10_load__done(a1, v7, *(_QWORD *)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__10_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__10_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__10_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__10_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_mov_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__11_load__done(a1, v7, *(_QWORD *)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__11_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__11_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__11_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__11_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_not(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__12_load__done(v7, a2, *(_QWORD *)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__12_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__12_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__12_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__12_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a3 ^ 6;
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opNotSlow(a1, a2, v7, a4, a5);
  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = v7 ^ 7;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opNotSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_not(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 3)]();
}

uint64_t llint_op_not_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__13_load__done(v7, a2, *(_QWORD *)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__13_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__13_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__13_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__13_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a3 ^ 6;
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__13_fn__opNotSlow(a1, a2, v7, a4, a5);
  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = v7 ^ 7;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__13_fn__opNotSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_not(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 6)]();
}

uint64_t llint_op_not_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__14_load__done(v7, a2, *(_QWORD *)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__14_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__14_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__14_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__14_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a3 ^ 6;
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__opNotSlow(a1, a2, v7, a4, a5);
  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = v7 ^ 7;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__opNotSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_not(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

uint64_t llint_op_eq_null(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 2));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__immediate(v8);
  if ((*(_BYTE *)(v8 + 6) & 1) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__masqueradesAsUndefined((unsigned int *)v8, a2, a3, a4, a5);
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__done(0, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__masqueradesAsUndefined(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__done(*(_QWORD *)(16 * *a1 + 0x28) == *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8), a2, 16 * *a1, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__immediate(uint64_t a1)
{
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__done((a1 & 0xFFFFFFFFFFFFFFF7) == 2);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a1 | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_eq_null_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 4));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__immediate(v8);
  if ((*(_BYTE *)(v8 + 6) & 1) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__masqueradesAsUndefined((unsigned int *)v8, a2, a3, a4, a5);
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__done(0, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__masqueradesAsUndefined(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__done(*(_QWORD *)(16 * *a1 + 0x28) == *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8), a2, 16 * *a1, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__immediate(uint64_t a1)
{
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__done((a1 & 0xFFFFFFFFFFFFFFF7) == 2);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__14_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a1 | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_eq_null_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 6));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__15_fn__immediate(v8);
  if ((*(_BYTE *)(v8 + 6) & 1) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__15_fn__masqueradesAsUndefined((unsigned int *)v8, a2, a3, a4, a5);
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__15_fn__done(0, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__15_fn__masqueradesAsUndefined(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__15_fn__done(*(_QWORD *)(16 * *a1 + 0x28) == *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8), a2, 16 * *a1, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__15_fn__immediate(uint64_t a1)
{
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__15_fn__done((a1 & 0xFFFFFFFFFFFFFFF7) == 2);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__15_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a1 | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_neq_null(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 2));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__16_fn__immediate(v8);
  if ((*(_BYTE *)(v8 + 6) & 1) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__16_fn__masqueradesAsUndefined((unsigned int *)v8, a2, a3, a4, a5);
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__16_fn__done(0, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__16_fn__masqueradesAsUndefined(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__16_fn__done(*(_QWORD *)(16 * *a1 + 0x28) == *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8), a2, 16 * *a1, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__16_fn__immediate(uint64_t a1)
{
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__16_fn__done((a1 & 0xFFFFFFFFFFFFFFF7) == 2);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__16_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a1 ^ 7;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_neq_null_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 4));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__17_fn__immediate(v8);
  if ((*(_BYTE *)(v8 + 6) & 1) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__17_fn__masqueradesAsUndefined((unsigned int *)v8, a2, a3, a4, a5);
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__17_fn__done(0, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__17_fn__masqueradesAsUndefined(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__17_fn__done(*(_QWORD *)(16 * *a1 + 0x28) == *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8), a2, 16 * *a1, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__17_fn__immediate(uint64_t a1)
{
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__17_fn__done((a1 & 0xFFFFFFFFFFFFFFF7) == 2);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__17_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a1 ^ 7;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_neq_null_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 6));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__18_fn__immediate(v8);
  if ((*(_BYTE *)(v8 + 6) & 1) != 0)
    return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__18_fn__masqueradesAsUndefined((unsigned int *)v8, a2, a3, a4, a5);
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__18_fn__done(0, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__18_fn__masqueradesAsUndefined(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__18_fn__done(*(_QWORD *)(16 * *a1 + 0x28) == *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8), a2, 16 * *a1, a4, a5);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__18_fn__immediate(uint64_t a1)
{
  return jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__18_fn__done((a1 & 0xFFFFFFFFFFFFFFF7) == 2);
}

uint64_t jsc_llint_equalNullComparisonOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__18_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a1 ^ 7;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_is_undefined_or_null(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__18_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__18_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__18_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__18_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__18_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = ((a1 & 0xFFFFFFFFFFFFFFF7) == 2) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_is_undefined_or_null_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__19_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__19_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__19_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__19_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__19_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = ((a1 & 0xFFFFFFFFFFFFFFF7) == 2) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_is_undefined_or_null_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__20_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__20_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__20_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__20_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__20_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = ((a1 & 0xFFFFFFFFFFFFFFF7) == 2) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_stricteq(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__21_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__21_load__constant();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__21_load__constant()
{
  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__21_load__done();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__21_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__22_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__22_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__22_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__22_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__22_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = a1 + 0x2000000000000;
  v11 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  v12 = 0x4000000000000;
  if (v11 < 0x4000000000000 && ((v12 = a1 == a2) != 0 || (v10 = a1 & a2, (a1 & a2 & v9) != 0)))
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__22_fn__done(a1, a2, v10, v11, a6, v12);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__slow(a3, a1, a2, v10, v11, a6, v12, a8, a9);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__22_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = a6 ^ 6;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 4)]();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_stricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 4)]();
}

uint64_t llint_op_stricteq_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__23_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__23_load__constant();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__23_load__constant()
{
  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__23_load__done();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__23_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__24_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__24_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__24_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__24_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__24_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = a1 + 0x2000000000000;
  v11 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  v12 = 0x4000000000000;
  if (v11 < 0x4000000000000 && ((v12 = a1 == a2) != 0 || (v10 = a1 & a2, (a1 & a2 & v9) != 0)))
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__24_fn__done(a1, a2, v10, v11, a6, v12);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__24_fn__slow(a3, a1, a2, v10, v11, a6, v12, a8, a9);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__24_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = a6 ^ 6;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 8)]();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__24_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_stricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_stricteq_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__25_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__25_load__constant();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__25_load__constant()
{
  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__25_load__done();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__25_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__26_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__26_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__26_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__26_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__26_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = a1 + 0x2000000000000;
  v11 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  v12 = 0x4000000000000;
  if (v11 < 0x4000000000000 && ((v12 = a1 == a2) != 0 || (v10 = a1 & a2, (a1 & a2 & v9) != 0)))
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__26_fn__done(a1, a2, v10, v11, a6, v12);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__26_fn__slow(a3, a1, a2, v10, v11, a6, v12, a8, a9);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__26_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = a6 ^ 6;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 14)]();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__26_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_stricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_nstricteq(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__27_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__27_load__constant();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__27_load__constant()
{
  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__27_load__done();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__27_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__28_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__28_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__28_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__28_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__28_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = a1 + 0x2000000000000;
  v11 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  v12 = 0x4000000000000;
  if (v11 < 0x4000000000000 && ((v12 = a1 == a2) != 0 || (v10 = a1 & a2, (a1 & a2 & v9) != 0)))
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__28_fn__done(a1, a2, v10, v11, a6, v12);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__28_fn__slow(a3, a1, a2, v10, v11, a6, v12, a8, a9);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__28_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = a6 ^ 7;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 4)]();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__28_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_nstricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 4)]();
}

uint64_t llint_op_nstricteq_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__29_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__29_load__constant();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__29_load__constant()
{
  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__29_load__done();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__29_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__30_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__30_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__30_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__30_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__30_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = a1 + 0x2000000000000;
  v11 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  v12 = 0x4000000000000;
  if (v11 < 0x4000000000000 && ((v12 = a1 == a2) != 0 || (v10 = a1 & a2, (a1 & a2 & v9) != 0)))
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__30_fn__done(a1, a2, v10, v11, a6, v12);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__30_fn__slow(a3, a1, a2, v10, v11, a6, v12, a8, a9);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__30_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = a6 ^ 7;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 8)]();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__30_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_nstricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_nstricteq_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__31_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__31_load__constant();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__31_load__constant()
{
  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__31_load__done();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__31_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__32_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__32_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__32_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__32_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__32_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = a1 + 0x2000000000000;
  v11 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  v12 = 0x4000000000000;
  if (v11 < 0x4000000000000 && ((v12 = a1 == a2) != 0 || (v10 = a1 & a2, (a1 & a2 & v9) != 0)))
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__32_fn__done(a1, a2, v10, v11, a6, v12);
  else
    return jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__32_fn__slow(a3, a1, a2, v10, v11, a6, v12, a8, a9);
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__32_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = a6 ^ 7;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 14)]();
}

uint64_t jsc_llint_strictEqOp__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__32_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_nstricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_jstricteq(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 1);
  if (v11 < 16)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__33_load__done(*(_QWORD *)(v10 + 8 * v11), a2, v11, *(char *)(v9 + a6 + 2), a6, a7, a8, a9, a3);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__33_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__33_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__33_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__33_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a4 < 16)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__34_load__done(a1, *(_QWORD *)(v9 + 8 * a4), a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__34_load__constant(a1, a2, a3, a4);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__34_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__34_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__34_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v11 = a1 + 0x2000000000000;
  v12 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  if (v12 >= 0x4000000000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  if (a1 == a2)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__equal(a1, a2, v11, v12, a6);
  v11 = a1 & a2;
  if ((a1 & a2 & v10) == 0)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a6 + 4)]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(char *)(v5 + a5 + 3);
  if (*(_BYTE *)(v5 + a5 + 3))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfEqual__jump__jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfEqual__jump__jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_jstricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*(unsigned __int8 *)v11]();
}

uint64_t llint_op_jstricteq_wide16(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 2);
  if (v11 < 64)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__35_load__done(*(_QWORD *)(v10 + 8 * v11), a2, v11, *(__int16 *)(v9 + a6 + 4), a6, a7, a8, a9, a3);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__35_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__35_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__35_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__35_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a4 < 64)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__36_load__done(a1, *(_QWORD *)(v9 + 8 * a4), a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__36_load__constant(a1, a2, a3, a4);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__36_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__36_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__36_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v11 = a1 + 0x2000000000000;
  v12 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  if (v12 >= 0x4000000000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__36_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  if (a1 == a2)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__36_impl__equal(a1, a2, v11, v12, a6);
  v11 = a1 & a2;
  if ((a1 & a2 & v10) == 0)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__36_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a6 + 8)]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__36_impl__equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(__int16 *)(v5 + a5 + 6);
  if (*(_WORD *)(v5 + a5 + 6))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfEqual__jump__36_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfEqual__jump__36_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__36_impl__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_jstricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*(unsigned __int8 *)v11]();
}

uint64_t llint_op_jstricteq_wide32(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 2);
  if (v11 < 0x40000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__37_load__done(*(_QWORD *)(v10 + 8 * v11), a2, v11, *(int *)(v9 + a6 + 6), a6, a7, a8, a9, a3);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__37_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__37_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__37_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__37_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a4 < 0x40000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__38_load__done(a1, *(_QWORD *)(v9 + 8 * a4), a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__38_load__constant(a1, a2, a3, a4);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__38_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__38_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__38_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v11 = a1 + 0x2000000000000;
  v12 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  if (v12 >= 0x4000000000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__38_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  if (a1 == a2)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__38_impl__equal(a1, a2, v11, v12, a6);
  v11 = a1 & a2;
  if ((a1 & a2 & v10) == 0)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__38_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a6 + 14)]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__38_impl__equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(int *)(v5 + a5 + 10);
  if ((_DWORD)v6)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfEqual__jump__38_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfEqual__jump__38_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__38_impl__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_jstricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*(unsigned __int8 *)v11]();
}

uint64_t llint_op_jnstricteq(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 1);
  if (v11 < 16)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__39_load__done(*(_QWORD *)(v10 + 8 * v11), a2, v11, *(char *)(v9 + a6 + 2), a6, a7, a8, a9, a3);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__39_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__39_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__39_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__39_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a4 < 16)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__40_load__done(a1, *(_QWORD *)(v9 + 8 * a4), a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__40_load__constant(a1, a2, a3, a4);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__40_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__40_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__40_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v11 = a1 + 0x2000000000000;
  v12 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  if (v12 >= 0x4000000000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__40_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  if (a1 == a2)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__40_impl__equal(a1, a2, v11, v12, a6);
  v11 = a1 & a2;
  if ((a1 & a2 & v10) == 0)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__40_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  v14 = *(char *)(v9 + a6 + 3);
  if (*(_BYTE *)(v9 + a6 + 3))
    return g_opcodeMap[*(unsigned __int8 *)(v9 + a6 + v14)]();
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfNotEqual__jump__40_jumpImpl__outOfLineJumpTarget(v14, a2, v11, v12, a6);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfNotEqual__jump__40_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__40_impl__equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__40_impl__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_jnstricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*(unsigned __int8 *)v11]();
}

uint64_t llint_op_jnstricteq_wide16(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 2);
  if (v11 < 64)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__41_load__done(*(_QWORD *)(v10 + 8 * v11), a2, v11, *(__int16 *)(v9 + a6 + 4), a6, a7, a8, a9, a3);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__41_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__41_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__41_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__41_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a4 < 64)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__42_load__done(a1, *(_QWORD *)(v9 + 8 * a4), a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__42_load__constant(a1, a2, a3, a4);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__42_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__42_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__42_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v11 = a1 + 0x2000000000000;
  v12 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  if (v12 >= 0x4000000000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__42_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  if (a1 == a2)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__42_impl__equal(a1, a2, v11, v12, a6);
  v11 = a1 & a2;
  if ((a1 & a2 & v10) == 0)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__42_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  v14 = *(__int16 *)(v9 + a6 + 6);
  if (*(_WORD *)(v9 + a6 + 6))
    return g_opcodeMap[*(unsigned __int8 *)(v9 + a6 + v14)]();
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfNotEqual__jump__42_jumpImpl__outOfLineJumpTarget(v14, a2, v11, v12, a6);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfNotEqual__jump__42_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__42_impl__equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__42_impl__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_jnstricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*(unsigned __int8 *)v11]();
}

uint64_t llint_op_jnstricteq_wide32(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 2);
  if (v11 < 0x40000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__43_load__done(*(_QWORD *)(v10 + 8 * v11), a2, v11, *(int *)(v9 + a6 + 6), a6, a7, a8, a9, a3);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__43_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__43_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__43_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__43_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a4 < 0x40000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__44_load__done(a1, *(_QWORD *)(v9 + 8 * a4), a9, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__44_load__constant(a1, a2, a3, a4);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__44_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__44_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__44_load__done(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v11 = a1 + 0x2000000000000;
  v12 = (a2 + 0x2000000000000) | (a1 + 0x2000000000000);
  if (v12 >= 0x4000000000000)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__44_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  if (a1 == a2)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__44_impl__equal(a1, a2, v11, v12, a6);
  v11 = a1 & a2;
  if ((a1 & a2 & v10) == 0)
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__44_impl__slow(a3, a1, a2, v11, v12, a6, 0x4000000000000, a8, a9);
  v14 = *(int *)(v9 + a6 + 10);
  if ((_DWORD)v14)
    return g_opcodeMap[*(unsigned __int8 *)(v9 + a6 + v14)]();
  else
    return jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfNotEqual__jump__44_jumpImpl__outOfLineJumpTarget(v14, a2, v11, v12, a6);
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jumpIfNotEqual__jump__44_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__44_impl__equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t jsc_llint_strictEqualityJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__44_impl__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_jnstricteq(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*(unsigned __int8 *)v11]();
}

uint64_t llint_op_to_number(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 2);
  if (v11 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__45_load__done(v11, a3, *(_QWORD *)(v10 + 8 * v11), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__45_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__45_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__45_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__45_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a3 >= v10)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumberIsInt(a1, a2, a3, a4, a5);
  if ((a3 & v10) != 0)
  {
    a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208);
    v13 = a4 + 2 * *(unsigned __int8 *)(v9 + a5 + 3);
    *(_WORD *)(v13 + 4) |= 0x100u;
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumberIsInt(a1, a2, a3, a4, a5);
  }
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumberSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumberIsInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumberSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_to_number(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 4)]();
}

uint64_t llint_op_to_number_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 4);
  if (v11 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__46_load__done(v11, a3, *(_QWORD *)(v10 + 8 * v11), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__46_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__46_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__46_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__46_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a3 >= v10)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__46_fn__opToNumberIsInt(a1, a2, a3, a4, a5);
  if ((a3 & v10) != 0)
  {
    a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208);
    v13 = a4 + 2 * *(unsigned __int16 *)(v9 + a5 + 6);
    *(_WORD *)(v13 + 4) |= 0x100u;
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__46_fn__opToNumberIsInt(a1, a2, a3, a4, a5);
  }
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__46_fn__opToNumberSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__46_fn__opToNumberIsInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__46_fn__opToNumberSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_to_number(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_to_number_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 6);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__47_load__done(v11, a3, *(_QWORD *)(v10 + 8 * v11), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__47_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__47_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__47_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__47_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a3 >= v10)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__47_fn__opToNumberIsInt(a1, a2, a3, a4, a5);
  if ((a3 & v10) != 0)
  {
    a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208);
    v13 = a4 + 2 * *(unsigned int *)(v9 + a5 + 10);
    *(_WORD *)(v13 + 4) |= 0x100u;
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__47_fn__opToNumberIsInt(a1, a2, a3, a4, a5);
  }
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__47_fn__opToNumberSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__47_fn__opToNumberIsInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__47_fn__opToNumberSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_to_number(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_to_numeric(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 2);
  if (v11 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__48_load__done(v11, a3, *(_QWORD *)(v10 + 8 * v11), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__48_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__48_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__48_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__48_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a3 >= v10)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumericIsInt(a1, a2, a3, a4, a5);
  if ((a3 & v10) != 0)
  {
    a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208);
    v13 = a4 + 2 * *(unsigned __int8 *)(v9 + a5 + 3);
    *(_WORD *)(v13 + 4) |= 0x100u;
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumericIsInt(a1, a2, a3, a4, a5);
  }
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumericSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumericIsInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToNumericSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_to_numeric(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 4)]();
}

uint64_t llint_op_to_numeric_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 4);
  if (v11 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__49_load__done(v11, a3, *(_QWORD *)(v10 + 8 * v11), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__49_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__49_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__49_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__49_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a3 >= v10)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__49_fn__opToNumericIsInt(a1, a2, a3, a4, a5);
  if ((a3 & v10) != 0)
  {
    a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208);
    v13 = a4 + 2 * *(unsigned __int16 *)(v9 + a5 + 6);
    *(_WORD *)(v13 + 4) |= 0x100u;
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__49_fn__opToNumericIsInt(a1, a2, a3, a4, a5);
  }
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__49_fn__opToNumericSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__49_fn__opToNumericIsInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__49_fn__opToNumericSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_to_numeric(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_to_numeric_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 6);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__50_load__done(v11, a3, *(_QWORD *)(v10 + 8 * v11), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__50_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__50_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__50_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__50_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a3 >= v10)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__50_fn__opToNumericIsInt(a1, a2, a3, a4, a5);
  if ((a3 & v10) != 0)
  {
    a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208);
    v13 = a4 + 2 * *(unsigned int *)(v9 + a5 + 10);
    *(_WORD *)(v13 + 4) |= 0x100u;
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__50_fn__opToNumericIsInt(a1, a2, a3, a4, a5);
  }
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__50_fn__opToNumericSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__50_fn__opToNumericIsInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__50_fn__opToNumericSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_to_numeric(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_to_string(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__51_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__51_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__51_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__51_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__51_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & v5) == 0 && *(_BYTE *)(a1 + 5) == 2)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToStringIsString(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToStringSlow(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToStringIsString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToStringSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_to_string(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 3)]();
}

uint64_t llint_op_to_string_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__52_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__52_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__52_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__52_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__52_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & v5) == 0 && *(_BYTE *)(a1 + 5) == 2)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__52_fn__opToStringIsString(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__52_fn__opToStringSlow(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__52_fn__opToStringIsString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__52_fn__opToStringSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_to_string(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 6)]();
}

uint64_t llint_op_to_string_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__53_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__53_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__53_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__53_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__53_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & v5) == 0 && *(_BYTE *)(a1 + 5) == 2)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__53_fn__opToStringIsString(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__53_fn__opToStringSlow(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__53_fn__opToStringIsString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__53_fn__opToStringSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_to_string(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

uint64_t llint_op_to_object(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(char *)(v8 + a5 + 2);
  if (v10 < 16)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__54_load__done(v10, a2, *(const WTF::String **)(v9 + 8 * v10), a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__54_load__constant();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__54_load__constant()
{
  return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__54_load__done();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__54_load__done(uint64_t a1, uint64_t a2, const WTF::String *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (((unint64_t)a3 & v10) != 0 || *((unsigned __int8 *)a3 + 5) < 0x17u)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opToObjectSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 - 16 * *(unsigned __int8 *)(v9 + a5 + 4) - 16) = a3;
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 5)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opToObjectSlow(uint64_t a1, uint64_t a2, const WTF::String *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_object(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 5)]();
}

uint64_t llint_op_to_object_wide16(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(__int16 *)(v8 + a5 + 4);
  if (v10 < 64)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__55_load__done(v10, a2, *(const WTF::String **)(v9 + 8 * v10), a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__55_load__constant();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__55_load__constant()
{
  return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__55_load__done();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__55_load__done(uint64_t a1, uint64_t a2, const WTF::String *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (((unint64_t)a3 & v10) != 0 || *((unsigned __int8 *)a3 + 5) < 0x17u)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__55_fn__opToObjectSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 - 16 * *(unsigned __int16 *)(v9 + a5 + 8) - 16) = a3;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__55_fn__opToObjectSlow(uint64_t a1, uint64_t a2, const WTF::String *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_object(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_to_object_wide32(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(int *)(v8 + a5 + 6);
  if (v10 < 0x40000000)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__56_load__done(v10, a2, *(const WTF::String **)(v9 + 8 * v10), a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__56_load__constant();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__56_load__constant()
{
  return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__56_load__done();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__56_load__done(uint64_t a1, uint64_t a2, const WTF::String *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (((unint64_t)a3 & v10) != 0 || *((unsigned __int8 *)a3 + 5) < 0x17u)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__56_fn__opToObjectSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 - 16 * *(unsigned int *)(v9 + a5 + 14) - 16) = a3;
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__56_fn__opToObjectSlow(uint64_t a1, uint64_t a2, const WTF::String *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_object(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 18)]();
}

uint64_t llint_op_negate(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 2);
  if (v11 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__57_load__done(v11, a3, a4, *(_QWORD *)(v10 + 8 * v11), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__57_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__57_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__57_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__57_load__done(uint64_t a1, uint64_t a2, JSC::JSBigInt *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a4 < v10)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opNegateNotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if ((a4 & 0x7FFFFFFF) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opNegateSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208) + 2 * *(unsigned __int8 *)(v9 + a5 + 3);
  *(_WORD *)(v13 + 4) |= 0x80u;
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = -(int)a4 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 5)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opNegateNotInt(uint64_t a1, uint64_t a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a4 & v10) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opNegateSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208) + 2 * *(unsigned __int8 *)(v9 + a5 + 3);
  *(_WORD *)(v12 + 4) |= 0x100u;
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = a4 ^ 0x8000000000000000;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 5)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opNegateSlow(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_negate(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 5)]();
}

uint64_t llint_op_negate_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 4);
  if (v11 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__58_load__done(v11, a3, a4, *(_QWORD *)(v10 + 8 * v11), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__58_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__58_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__58_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__58_load__done(uint64_t a1, uint64_t a2, JSC::JSBigInt *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a4 < v10)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__58_fn__opNegateNotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if ((a4 & 0x7FFFFFFF) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__58_fn__opNegateSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208) + 2 * *(unsigned __int16 *)(v9 + a5 + 6);
  *(_WORD *)(v13 + 4) |= 0x80u;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = -(int)a4 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__58_fn__opNegateNotInt(uint64_t a1, uint64_t a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a4 & v10) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__58_fn__opNegateSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208) + 2 * *(unsigned __int16 *)(v9 + a5 + 6);
  *(_WORD *)(v12 + 4) |= 0x100u;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = a4 ^ 0x8000000000000000;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__58_fn__opNegateSlow(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_negate(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 10)]();
}

uint64_t llint_op_negate_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 6);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__59_load__done(v11, a3, a4, *(_QWORD *)(v10 + 8 * v11), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__59_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__59_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__59_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__59_load__done(uint64_t a1, uint64_t a2, JSC::JSBigInt *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a4 < v10)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__59_fn__opNegateNotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if ((a4 & 0x7FFFFFFF) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__59_fn__opNegateSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208) + 2 * *(unsigned int *)(v9 + a5 + 10);
  *(_WORD *)(v13 + 4) |= 0x80u;
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = -(int)a4 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__59_fn__opNegateNotInt(uint64_t a1, uint64_t a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a4 & v10) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__59_fn__opNegateSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 208) + 2 * *(unsigned int *)(v9 + a5 + 10);
  *(_WORD *)(v12 + 4) |= 0x100u;
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = a4 ^ 0x8000000000000000;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__59_fn__opNegateSlow(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_negate(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 18)]();
}

uint64_t llint_op_div(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_div(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_div_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_div(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_div_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_div(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_mul(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__60_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__60_load__constant();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__60_load__constant()
{
  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__60_load__done();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__60_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__61_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__61_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__61_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__61_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__61_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  if (a1 < v10)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__op1NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a2 < v10)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__op2NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(char *)(v9 + a5 + 1);
  v13 = (int)a2 * (uint64_t)(int)a1;
  v14 = v13 >> 32;
  v15 = (int)v13 >> 31;
  v16 = (a2 * a1);
  if ((_DWORD)v14 == v15 && ((_DWORD)v16 || (a2 & 0x80000000) == 0 && (a1 & 0x80000000) == 0))
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__integerOperationAndStore__done(a1, a2, v12, v16, a5);
  else
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__61_fn__slow(a9, a1, a2, v12, (JSC::JSBigInt *)v16, a5, a6, a7, a8);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__integerOperationAndStore__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 8 * a3) = a4 | v6;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int8 *)(v5 + a5 + 4);
  *(_WORD *)(v8 + 4) |= 0x480u;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__op1NotInt(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & v10) == 0)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__61_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a2 >= v10)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__op1NotIntOp2Int((__n128)a9, a1, a2, a3, (uint64_t)a4, a5);
  if ((a2 & v10) == 0)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__61_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200);
  v14 = v13 + 2 * *(unsigned __int8 *)(v9 + a5 + 4);
  *(_WORD *)(v14 + 4) |= 0x900u;
  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__op1NotIntReady(a1, *(double *)a9.i64, COERCE_DOUBLE(a2 + v10), a2 + v10, v13, (uint64_t)a4, a5);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__op1NotIntOp2Int(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int8 *)(v6 + a6 + 4);
  *(_WORD *)(v8 + 4) |= 0x880u;
  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__op1NotIntReady(a1, (double)a3);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__op1NotIntReady(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 8 * *(char *)(v7 + a7 + 1)) = COERCE__INT64(COERCE_DOUBLE(a1 + v8) * a3) - v8;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 6)]();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__op2NotInt(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a2 & v10) == 0)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__61_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200) + 2 * *(unsigned __int8 *)(v9 + a5 + 4);
  *(_WORD *)(v12 + 4) |= 0x500u;
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = COERCE__INT64((double)(int)a1 * COERCE_DOUBLE(a2 + v10)) - v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 6)]();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__61_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_mul(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_mul_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__62_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__62_load__constant();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__62_load__constant()
{
  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__62_load__done();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__62_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__63_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__63_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__63_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__63_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__63_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  if (a1 < v10)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__op1NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a2 < v10)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__op2NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(__int16 *)(v9 + a5 + 2);
  v13 = (int)a2 * (uint64_t)(int)a1;
  v14 = v13 >> 32;
  v15 = (int)v13 >> 31;
  v16 = (a2 * a1);
  if ((_DWORD)v14 == v15 && ((_DWORD)v16 || (a2 & 0x80000000) == 0 && (a1 & 0x80000000) == 0))
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__63_integerOperationAndStore__done(a1, a2, v12, v16, a5);
  else
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__slow(a9, a1, a2, v12, (JSC::JSBigInt *)v16, a5, a6, a7, a8);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__63_integerOperationAndStore__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 8 * a3) = a4 | v6;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int16 *)(v5 + a5 + 8);
  *(_WORD *)(v8 + 4) |= 0x480u;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__op1NotInt(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & v10) == 0)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a2 >= v10)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__op1NotIntOp2Int((__n128)a9, a1, a2, a3, (uint64_t)a4, a5);
  if ((a2 & v10) == 0)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200);
  v14 = v13 + 2 * *(unsigned __int16 *)(v9 + a5 + 8);
  *(_WORD *)(v14 + 4) |= 0x900u;
  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__op1NotIntReady(a1, *(double *)a9.i64, COERCE_DOUBLE(a2 + v10), a2 + v10, v13, (uint64_t)a4, a5);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__op1NotIntOp2Int(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int16 *)(v6 + a6 + 8);
  *(_WORD *)(v8 + 4) |= 0x880u;
  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__op1NotIntReady(a1, (double)a3);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__op1NotIntReady(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 8 * *(__int16 *)(v7 + a7 + 2)) = COERCE__INT64(COERCE_DOUBLE(a1 + v8) * a3) - v8;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 12)]();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__op2NotInt(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a2 & v10) == 0)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200) + 2 * *(unsigned __int16 *)(v9 + a5 + 8);
  *(_WORD *)(v12 + 4) |= 0x500u;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = COERCE__INT64((double)(int)a1 * COERCE_DOUBLE(a2 + v10)) - v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 12)]();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__63_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_mul(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_mul_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__64_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__64_load__constant();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__64_load__constant()
{
  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__64_load__done();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__64_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__65_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__65_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__65_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__65_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__65_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  if (a1 < v10)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__op1NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a2 < v10)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__op2NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(int *)(v9 + a5 + 2);
  v13 = (int)a2 * (uint64_t)(int)a1;
  v14 = v13 >> 32;
  v15 = (int)v13 >> 31;
  v16 = (a2 * a1);
  if ((_DWORD)v14 == v15 && ((_DWORD)v16 || (a2 & 0x80000000) == 0 && (a1 & 0x80000000) == 0))
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__65_integerOperationAndStore__done(a1, a2, v12, v16, a5);
  else
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__slow(a9, a1, a2, v12, (JSC::JSBigInt *)v16, a5, a6, a7, a8);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__65_integerOperationAndStore__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 8 * a3) = a4 | v6;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned int *)(v5 + a5 + 14);
  *(_WORD *)(v8 + 4) |= 0x480u;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__op1NotInt(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & v10) == 0)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a2 >= v10)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__op1NotIntOp2Int((__n128)a9, a1, a2, a3, (uint64_t)a4, a5);
  if ((a2 & v10) == 0)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200);
  v14 = v13 + 2 * *(unsigned int *)(v9 + a5 + 14);
  *(_WORD *)(v14 + 4) |= 0x900u;
  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__op1NotIntReady(a1, *(double *)a9.i64, COERCE_DOUBLE(a2 + v10), a2 + v10, v13, (uint64_t)a4, a5);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__op1NotIntOp2Int(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned int *)(v6 + a6 + 14);
  *(_WORD *)(v8 + 4) |= 0x880u;
  return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__op1NotIntReady(a1, (double)a3);
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__op1NotIntReady(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 8 * *(int *)(v7 + a7 + 2)) = COERCE__INT64(COERCE_DOUBLE(a1 + v8) * a3) - v8;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 22)]();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__op2NotInt(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a2 & v10) == 0)
    return jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200) + 2 * *(unsigned int *)(v9 + a5 + 14);
  *(_WORD *)(v12 + 4) |= 0x500u;
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = COERCE__INT64((double)(int)a1 * COERCE_DOUBLE(a2 + v10)) - v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 22)]();
}

uint64_t jsc_llint_binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__65_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_mul(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_add(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(char *)(v6 + a6 + 3);
  if (v8 < 16)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__66_load__done(v8, *(_QWORD *)(v7 + 8 * v8), *(char *)(v6 + a6 + 2), a5, a6, a1);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__66_load__constant();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__66_load__constant()
{
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__66_load__done();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__66_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;

  if (a3 < 16)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__67_load__done(*(_QWORD *)(v6 + 8 * a3), a2, a3, a4, a5, a6);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__67_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__67_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__67_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__67_load__done(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 < v7)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__op1NotInt(a1, a2, a3, a4, a5, a6);
  if (a2 < v7)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__op2NotInt(a1, a2, a3, a4, a5);
  v10 = *(char *)(v6 + a5 + 1);
  v11 = __OFADD__((_DWORD)a1, (_DWORD)a2);
  v12 = (a1 + a2);
  if (v11)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__slow(v12, a2, v10, a4, a5);
  *(_QWORD *)(v8 + 8 * v10) = v12 | v7;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 56) + 200) + 2 * *(unsigned __int8 *)(v6 + a5 + 4);
  *(_WORD *)(v13 + 4) |= 0x480u;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__op1NotInt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & v7) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__slow(a1, a2, a3, a4, a5);
  if (a2 >= v7)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__op1NotIntOp2Int(a6, a1, a2, a3, a4, a5);
  if ((a2 & v7) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__slow(a1, a2, a3, a4, a5);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 56) + 200);
  v11 = v10 + 2 * *(unsigned __int8 *)(v6 + a5 + 4);
  *(_WORD *)(v11 + 4) |= 0x900u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__op1NotIntReady(a1, a6.n128_f64[0], COERCE_DOUBLE(a2 + v7), a2 + v7, v10, a4, a5);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__op1NotIntOp2Int(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int8 *)(v6 + a6 + 4);
  *(_WORD *)(v8 + 4) |= 0x880u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__op1NotIntReady(a1, (double)a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__op1NotIntReady(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 8 * *(char *)(v7 + a7 + 1)) = COERCE__INT64(COERCE_DOUBLE(a1 + v8) + a3) - v8;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 6)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__op2NotInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & v6) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__slow(a1, a2, a3, a4, a5);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int8 *)(v5 + a5 + 4);
  *(_WORD *)(v8 + 4) |= 0x500u;
  *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 1)) = COERCE__INT64((double)(int)a1 + COERCE_DOUBLE(a2 + v6)) - v6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__67_fn__slow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  slow_path_add(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*(unsigned __int8 *)(v7 + 6)]();
}

uint64_t llint_op_add_wide16(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(__int16 *)(v6 + a6 + 6);
  if (v8 < 64)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__68_load__done(v8, *(_QWORD *)(v7 + 8 * v8), *(__int16 *)(v6 + a6 + 4), a5, a6, a1);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__68_load__constant();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__68_load__constant()
{
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__68_load__done();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__68_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;

  if (a3 < 64)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__69_load__done(*(_QWORD *)(v6 + 8 * a3), a2, a3, a4, a5, a6);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__69_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__69_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__69_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__69_load__done(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 < v7)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__op1NotInt(a1, a2, a3, a4, a5, a6);
  if (a2 < v7)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__op2NotInt(a1, a2, a3, a4, a5);
  v10 = *(__int16 *)(v6 + a5 + 2);
  v11 = __OFADD__((_DWORD)a1, (_DWORD)a2);
  v12 = (a1 + a2);
  if (v11)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__slow(v12, a2, v10, a4, a5);
  *(_QWORD *)(v8 + 8 * v10) = v12 | v7;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 56) + 200) + 2 * *(unsigned __int16 *)(v6 + a5 + 8);
  *(_WORD *)(v13 + 4) |= 0x480u;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__op1NotInt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & v7) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__slow(a1, a2, a3, a4, a5);
  if (a2 >= v7)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__op1NotIntOp2Int(a6, a1, a2, a3, a4, a5);
  if ((a2 & v7) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__slow(a1, a2, a3, a4, a5);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 56) + 200);
  v11 = v10 + 2 * *(unsigned __int16 *)(v6 + a5 + 8);
  *(_WORD *)(v11 + 4) |= 0x900u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__op1NotIntReady(a1, a6.n128_f64[0], COERCE_DOUBLE(a2 + v7), a2 + v7, v10, a4, a5);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__op1NotIntOp2Int(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int16 *)(v6 + a6 + 8);
  *(_WORD *)(v8 + 4) |= 0x880u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__op1NotIntReady(a1, (double)a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__op1NotIntReady(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 8 * *(__int16 *)(v7 + a7 + 2)) = COERCE__INT64(COERCE_DOUBLE(a1 + v8) + a3) - v8;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 12)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__op2NotInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & v6) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__slow(a1, a2, a3, a4, a5);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int16 *)(v5 + a5 + 8);
  *(_WORD *)(v8 + 4) |= 0x500u;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 2)) = COERCE__INT64((double)(int)a1 + COERCE_DOUBLE(a2 + v6)) - v6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__69_fn__slow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  slow_path_add(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*(unsigned __int8 *)(v7 + 12)]();
}

uint64_t llint_op_add_wide32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(int *)(v6 + a6 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__70_load__done(v8, *(_QWORD *)(v7 + 8 * v8), *(int *)(v6 + a6 + 6), a5, a6, a1);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__70_load__constant();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__70_load__constant()
{
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__70_load__done();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__70_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;

  if (a3 < 0x40000000)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__71_load__done(*(_QWORD *)(v6 + 8 * a3), a2, a3, a4, a5, a6);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__71_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__71_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__71_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__71_load__done(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 < v7)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__op1NotInt(a1, a2, a3, a4, a5, a6);
  if (a2 < v7)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__op2NotInt(a1, a2, a3, a4, a5);
  v10 = *(int *)(v6 + a5 + 2);
  v11 = __OFADD__((_DWORD)a1, (_DWORD)a2);
  v12 = (a1 + a2);
  if (v11)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__slow(v12, a2, v10, a4, a5);
  *(_QWORD *)(v8 + 8 * v10) = v12 | v7;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 56) + 200) + 2 * *(unsigned int *)(v6 + a5 + 14);
  *(_WORD *)(v13 + 4) |= 0x480u;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__op1NotInt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & v7) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__slow(a1, a2, a3, a4, a5);
  if (a2 >= v7)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__op1NotIntOp2Int(a6, a1, a2, a3, a4, a5);
  if ((a2 & v7) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__slow(a1, a2, a3, a4, a5);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 56) + 200);
  v11 = v10 + 2 * *(unsigned int *)(v6 + a5 + 14);
  *(_WORD *)(v11 + 4) |= 0x900u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__op1NotIntReady(a1, a6.n128_f64[0], COERCE_DOUBLE(a2 + v7), a2 + v7, v10, a4, a5);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__op1NotIntOp2Int(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned int *)(v6 + a6 + 14);
  *(_WORD *)(v8 + 4) |= 0x880u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__op1NotIntReady(a1, (double)a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__op1NotIntReady(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 8 * *(int *)(v7 + a7 + 2)) = COERCE__INT64(COERCE_DOUBLE(a1 + v8) + a3) - v8;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 22)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__op2NotInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & v6) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__slow(a1, a2, a3, a4, a5);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned int *)(v5 + a5 + 14);
  *(_WORD *)(v8 + 4) |= 0x500u;
  *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 2)) = COERCE__INT64((double)(int)a1 + COERCE_DOUBLE(a2 + v6)) - v6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__71_fn__slow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  slow_path_add(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*(unsigned __int8 *)(v7 + 22)]();
}

uint64_t llint_op_sub(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__72_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__72_load__constant();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__72_load__constant()
{
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__72_load__done();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__72_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__73_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__73_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__73_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__73_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__73_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 < v10)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__op1NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a2 < v10)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__op2NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(char *)(v9 + a5 + 1);
  v14 = __OFSUB__((_DWORD)a1, (_DWORD)a2);
  v15 = (a1 - a2);
  if (v14)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__slow(a9, v15, a2, v13, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * v13) = v15 | v10;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200) + 2 * *(unsigned __int8 *)(v9 + a5 + 4);
  *(_WORD *)(v16 + 4) |= 0x480u;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 6)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__op1NotInt(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & v10) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a2 >= v10)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__op1NotIntOp2Int((__n128)a9, a1, a2, a3, (uint64_t)a4, a5);
  if ((a2 & v10) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200);
  v14 = v13 + 2 * *(unsigned __int8 *)(v9 + a5 + 4);
  *(_WORD *)(v14 + 4) |= 0x900u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__op1NotIntReady(a1, *(double *)a9.i64, COERCE_DOUBLE(a2 + v10), a2 + v10, v13, (uint64_t)a4, a5);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__op1NotIntOp2Int(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int8 *)(v6 + a6 + 4);
  *(_WORD *)(v8 + 4) |= 0x880u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__op1NotIntReady(a1, (double)a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__op1NotIntReady(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 8 * *(char *)(v7 + a7 + 1)) = COERCE__INT64(COERCE_DOUBLE(a1 + v8) - a3) - v8;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 6)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__op2NotInt(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a2 & v10) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200) + 2 * *(unsigned __int8 *)(v9 + a5 + 4);
  *(_WORD *)(v12 + 4) |= 0x500u;
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = COERCE__INT64((double)(int)a1 - COERCE_DOUBLE(a2 + v10)) - v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 6)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__73_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_sub(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_sub_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__74_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__74_load__constant();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__74_load__constant()
{
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__74_load__done();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__74_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__75_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__75_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__75_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__75_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__75_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 < v10)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__op1NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a2 < v10)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__op2NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(__int16 *)(v9 + a5 + 2);
  v14 = __OFSUB__((_DWORD)a1, (_DWORD)a2);
  v15 = (a1 - a2);
  if (v14)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__slow(a9, v15, a2, v13, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * v13) = v15 | v10;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200) + 2 * *(unsigned __int16 *)(v9 + a5 + 8);
  *(_WORD *)(v16 + 4) |= 0x480u;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 12)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__op1NotInt(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & v10) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a2 >= v10)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__op1NotIntOp2Int((__n128)a9, a1, a2, a3, (uint64_t)a4, a5);
  if ((a2 & v10) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200);
  v14 = v13 + 2 * *(unsigned __int16 *)(v9 + a5 + 8);
  *(_WORD *)(v14 + 4) |= 0x900u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__op1NotIntReady(a1, *(double *)a9.i64, COERCE_DOUBLE(a2 + v10), a2 + v10, v13, (uint64_t)a4, a5);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__op1NotIntOp2Int(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned __int16 *)(v6 + a6 + 8);
  *(_WORD *)(v8 + 4) |= 0x880u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__op1NotIntReady(a1, (double)a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__op1NotIntReady(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 8 * *(__int16 *)(v7 + a7 + 2)) = COERCE__INT64(COERCE_DOUBLE(a1 + v8) - a3) - v8;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 12)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__op2NotInt(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a2 & v10) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200) + 2 * *(unsigned __int16 *)(v9 + a5 + 8);
  *(_WORD *)(v12 + 4) |= 0x500u;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = COERCE__INT64((double)(int)a1 - COERCE_DOUBLE(a2 + v10)) - v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 12)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__75_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_sub(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_sub_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__76_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__76_load__constant();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__76_load__constant()
{
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__76_load__done();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__76_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__77_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__77_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__77_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__77_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__77_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 < v10)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__op1NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a2 < v10)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__op2NotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(int *)(v9 + a5 + 2);
  v14 = __OFSUB__((_DWORD)a1, (_DWORD)a2);
  v15 = (a1 - a2);
  if (v14)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__slow(a9, v15, a2, v13, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * v13) = v15 | v10;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200) + 2 * *(unsigned int *)(v9 + a5 + 14);
  *(_WORD *)(v16 + 4) |= 0x480u;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 22)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__op1NotInt(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & v10) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a2 >= v10)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__op1NotIntOp2Int((__n128)a9, a1, a2, a3, (uint64_t)a4, a5);
  if ((a2 & v10) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200);
  v14 = v13 + 2 * *(unsigned int *)(v9 + a5 + 14);
  *(_WORD *)(v14 + 4) |= 0x900u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__op1NotIntReady(a1, *(double *)a9.i64, COERCE_DOUBLE(a2 + v10), a2 + v10, v13, (uint64_t)a4, a5);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__op1NotIntOp2Int(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 200) + 2 * *(unsigned int *)(v6 + a6 + 14);
  *(_WORD *)(v8 + 4) |= 0x880u;
  return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__op1NotIntReady(a1, (double)a3);
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__op1NotIntReady(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 8 * *(int *)(v7 + a7 + 2)) = COERCE__INT64(COERCE_DOUBLE(a1 + v8) - a3) - v8;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 22)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__op2NotInt(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a2 & v10) == 0)
    return jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 200) + 2 * *(unsigned int *)(v9 + a5 + 14);
  *(_WORD *)(v12 + 4) |= 0x500u;
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = COERCE__INT64((double)(int)a1 - COERCE_DOUBLE(a2 + v10)) - v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 22)]();
}

uint64_t jsc_llint_binaryOp__binaryOpCustomStore__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__77_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_sub(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_mod(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_mod(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 4)]();
}

uint64_t llint_op_mod_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_mod(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_mod_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_mod(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_pow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__78_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__78_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__78_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__78_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__78_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;

  if (a2 < v9)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__79_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a3 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__79_load__done(*(_QWORD *)(v10 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__79_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__79_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__79_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__79_load__done(unint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;

  if (a2 > 0x3E8)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__79_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a1 < v9)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__lhsNotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  *(double *)a9.i64 = (double)(int)a1;
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__lhsReady((__n128)a9);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__lhsNotInt(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if ((a1 & v9) == 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__79_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a9.i64[0] = a1 + v9;
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__lhsReady((__n128)a9);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__lhsReady(__n128 a1)
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loop(a1, (double)1);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loop(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, double a7)
{
  if ((a2 & 1) != 0)
    a7 = a7 * a6.n128_f64[0];
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__exponentIsEven(a6, a7, a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__exponentIsEven(__n128 a1, double a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  a1.n128_f64[0] = a1.n128_f64[0] * a1.n128_f64[0];
  if (a4 >> 1)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loop(a1, a2);
  *(_QWORD *)(v9 + 8 * a5) = *(_QWORD *)&a2 - v8;
  return ((uint64_t (*)(double))g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 4)])(a1.n128_f64[0]);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__79_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_pow(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 4)]();
}

uint64_t llint_op_pow_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__80_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__80_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__80_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__80_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__80_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;

  if (a2 < v9)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a3 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__81_load__done(*(_QWORD *)(v10 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__81_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__81_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__81_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__81_load__done(unint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;

  if (a2 > 0x3E8)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a1 < v9)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__lhsNotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  *(double *)a9.i64 = (double)(int)a1;
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__lhsReady((__n128)a9);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__lhsNotInt(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if ((a1 & v9) == 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a9.i64[0] = a1 + v9;
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__lhsReady((__n128)a9);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__lhsReady(__n128 a1)
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__loop(a1, (double)1);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__loop(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, double a7)
{
  if ((a2 & 1) != 0)
    a7 = a7 * a6.n128_f64[0];
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__exponentIsEven(a6, a7, a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__exponentIsEven(__n128 a1, double a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  a1.n128_f64[0] = a1.n128_f64[0] * a1.n128_f64[0];
  if (a4 >> 1)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__loop(a1, a2);
  *(_QWORD *)(v9 + 8 * a5) = *(_QWORD *)&a2 - v8;
  return ((uint64_t (*)(double))g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 8)])(a1.n128_f64[0]);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__81_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_pow(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_pow_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__82_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__82_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__82_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__82_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__82_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;

  if (a2 < v9)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a3 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__83_load__done(*(_QWORD *)(v10 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__83_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__83_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__83_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__83_load__done(unint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;

  if (a2 > 0x3E8)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  if (a1 < v9)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__lhsNotInt(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  *(double *)a9.i64 = (double)(int)a1;
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__lhsReady((__n128)a9);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__lhsNotInt(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if ((a1 & v9) == 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a9.i64[0] = a1 + v9;
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__lhsReady((__n128)a9);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__lhsReady(__n128 a1)
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__loop(a1, (double)1);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__loop(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, double a7)
{
  if ((a2 & 1) != 0)
    a7 = a7 * a6.n128_f64[0];
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__exponentIsEven(a6, a7, a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__exponentIsEven(__n128 a1, double a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  a1.n128_f64[0] = a1.n128_f64[0] * a1.n128_f64[0];
  if (a4 >> 1)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__loop(a1, a2);
  *(_QWORD *)(v9 + 8 * a5) = *(_QWORD *)&a2 - v8;
  return ((uint64_t (*)(double))g_opcodeMap[*(unsigned __int8 *)(v7 + a7 + 14)])(a1.n128_f64[0]);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__83_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_pow(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_unsigned(uint64_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 2);
  if (v11 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__84_load__done(a1, v11, *(_QWORD *)(v10 + 8 * v11), a5, a6, a7, a8, a9, a2);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__84_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__84_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__84_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__84_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if ((int)a3 < 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opUnsignedSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 8 * *(char *)(v9 + a5 + 1)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opUnsignedSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_unsigned(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 3)]();
}

uint64_t llint_op_unsigned_wide16(uint64_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 4);
  if (v11 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__85_load__done(a1, v11, *(_QWORD *)(v10 + 8 * v11), a5, a6, a7, a8, a9, a2);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__85_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__85_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__85_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__85_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if ((int)a3 < 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__85_fn__opUnsignedSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 8 * *(__int16 *)(v9 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__85_fn__opUnsignedSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_unsigned(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_unsigned_wide32(uint64_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 6);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__86_load__done(a1, v11, *(_QWORD *)(v10 + 8 * v11), a5, a6, a7, a8, a9, a2);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__86_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__86_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__86_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__86_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if ((int)a3 < 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__86_fn__opUnsignedSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 8 * *(int *)(v9 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__86_fn__opUnsignedSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_unsigned(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 10)]();
}

uint64_t llint_op_lshift(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__87_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__87_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__87_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__87_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__87_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__88_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__88_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__88_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__88_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__88_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__88_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = ((_DWORD)a1 << (a2 & 0x1F)) | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 5)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__88_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_lshift(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 5)]();
}

uint64_t llint_op_lshift_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__89_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__89_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__89_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__89_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__89_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__90_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__90_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__90_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__90_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__90_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__90_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = ((_DWORD)a1 << (a2 & 0x1F)) | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 10)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__90_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_lshift(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 10)]();
}

uint64_t llint_op_lshift_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__91_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__91_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__91_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__91_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__91_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__92_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__92_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__92_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__92_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__92_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__92_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = ((_DWORD)a1 << (a2 & 0x1F)) | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 18)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__92_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_lshift(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 18)]();
}

uint64_t llint_op_rshift(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__93_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__93_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__93_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__93_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__93_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__94_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__94_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__94_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__94_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__94_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__94_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = ((int)a1 >> (a2 & 0x1F)) | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 5)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__94_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_rshift(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 5)]();
}

uint64_t llint_op_rshift_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__95_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__95_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__95_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__95_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__95_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__96_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__96_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__96_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__96_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__96_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__96_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = ((int)a1 >> (a2 & 0x1F)) | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 10)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__96_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_rshift(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 10)]();
}

uint64_t llint_op_rshift_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__97_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__97_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__97_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__97_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__97_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__98_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__98_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__98_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__98_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__98_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__98_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = ((int)a1 >> (a2 & 0x1F)) | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 18)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__98_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_rshift(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 18)]();
}

uint64_t llint_op_urshift(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__99_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__99_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__99_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__99_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__99_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__100_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__100_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__100_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__100_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__100_load__done(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__100_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = (a1 >> (a2 & 0x1F)) | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 4)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__100_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_urshift(v10, (JSC::JSGlobalObject *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 4)]();
}

uint64_t llint_op_urshift_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__101_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__101_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__101_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__101_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__101_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__102_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__102_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__102_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__102_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__102_load__done(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__102_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = (a1 >> (a2 & 0x1F)) | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 8)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__102_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_urshift(v10, (JSC::JSGlobalObject *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_urshift_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__103_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__103_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__103_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__103_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__103_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__104_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__104_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__104_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__104_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__104_load__done(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__104_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = (a1 >> (a2 & 0x1F)) | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 14)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__104_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_urshift(v10, (JSC::JSGlobalObject *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_bitand(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__105_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__105_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__105_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__105_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__105_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__106_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__106_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__106_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__106_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__106_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__106_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = a1 & a2 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 6)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__106_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitand(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_bitand_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__107_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__107_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__107_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__107_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__107_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__108_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__108_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__108_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__108_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__108_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__108_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = a1 & a2 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 12)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__108_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitand(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_bitand_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__109_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__109_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__109_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__109_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__109_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__110_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__110_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__110_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__110_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__110_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__110_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = a1 & a2 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 22)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__110_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitand(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_bitor(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__111_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__111_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__111_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__111_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__111_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__112_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__112_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__112_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__112_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__112_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__112_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = a1 | a2 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 6)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__112_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitor(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_bitor_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__113_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__113_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__113_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__113_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__113_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__114_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__114_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__114_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__114_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__114_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__114_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = a1 | a2 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 12)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__114_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitor(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_bitor_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__115_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__115_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__115_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__115_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__115_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__116_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__116_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__116_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__116_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__116_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__116_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = a1 | a2 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 22)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__116_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitor(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_bitxor(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__117_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(char *)(v9 + a6 + 2), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__117_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__117_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__117_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__117_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 16)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__118_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__118_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__118_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__118_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__118_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__118_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = a1 ^ a2 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 6)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__118_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitxor(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_bitxor_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__119_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(__int16 *)(v9 + a6 + 4), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__119_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__119_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__119_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__119_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 64)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__120_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__120_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__120_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__120_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__120_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__120_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = a1 ^ a2 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 12)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__120_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitxor(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_bitxor_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__121_load__done(v11, *(_QWORD *)(v10 + 8 * v11), *(int *)(v9 + a6 + 6), a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__121_load__constant();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__121_load__constant()
{
  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__121_load__done();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__121_load__done(uint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a3 < 0x40000000)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__122_load__done(*(_QWORD *)(v9 + 8 * a3), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__122_load__constant(a1, a2, a3);
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__122_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__122_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__122_load__done(unint64_t a1, unint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 < v10 || a2 < v10)
    return jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__122_fn__slow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = a1 ^ a2 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 22)]();
}

uint64_t jsc_llint_bitOp__commonBitOp__opKind__llintOp__commonOp__fn__fn__makeReturn__fn__122_fn__slow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSBigInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitxor(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_bitnot(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 2);
  if (v11 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__123_load__done(v11, a3, a4, *(_QWORD *)(v10 + 8 * v11), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__123_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__123_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__123_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__123_load__done(uint64_t a1, uint64_t a2, JSC::JSBigInt *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a4 < v10)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opBitNotSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = ~(_DWORD)a4 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 4)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opBitNotSlow(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitnot(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 4)]();
}

uint64_t llint_op_bitnot_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 4);
  if (v11 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__124_load__done(v11, a3, a4, *(_QWORD *)(v10 + 8 * v11), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__124_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__124_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__124_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__124_load__done(uint64_t a1, uint64_t a2, JSC::JSBigInt *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a4 < v10)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__124_fn__opBitNotSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = ~(_DWORD)a4 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__124_fn__opBitNotSlow(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitnot(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_bitnot_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 6);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__125_load__done(v11, a3, a4, *(_QWORD *)(v10 + 8 * v11), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__125_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__125_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__125_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__125_load__done(uint64_t a1, uint64_t a2, JSC::JSBigInt *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a4 < v10)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__125_fn__opBitNotSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = ~(_DWORD)a4 | v10;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__125_fn__opBitNotSlow(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_bitnot(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_overrides_has_instance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__126_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, *(char *)(v5 + a5 + 1), a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__126_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__126_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__126_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__126_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 560);
  if (a1 != v7)
    return jsc_llint_llintOp__commonOp__fn__fn__opOverridesHasInstanceNotDefaultSymbol(a1, a2, v7, a4, a5);
  v9 = *(char *)(v5 + a5 + 2);
  if (v9 < 16)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__127_load__done(*(_QWORD *)(v6 + 8 * v9), v9, v7, a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__127_load__constant(a1, v9);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__127_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__127_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__127_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * a4) = ((*(_BYTE *)(a1 + 6) & 2) == 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__opOverridesHasInstanceNotDefaultSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * a4) = 7;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t llint_op_overrides_has_instance_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__128_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, *(__int16 *)(v5 + a5 + 2), a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__128_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__128_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__128_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__128_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 560);
  if (a1 != v7)
    return jsc_llint_llintOp__commonOp__fn__129_fn__opOverridesHasInstanceNotDefaultSymbol(a1, a2, v7, a4, a5);
  v9 = *(__int16 *)(v5 + a5 + 4);
  if (v9 < 64)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__129_load__done(*(_QWORD *)(v6 + 8 * v9), v9, v7, a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__129_load__constant(a1, v9);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__129_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__129_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__129_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * a4) = ((*(_BYTE *)(a1 + 6) & 2) == 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__129_fn__opOverridesHasInstanceNotDefaultSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * a4) = 7;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t llint_op_overrides_has_instance_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__130_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, *(int *)(v5 + a5 + 2), a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__130_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__130_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__130_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__130_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 560);
  if (a1 != v7)
    return jsc_llint_llintOp__commonOp__fn__131_fn__opOverridesHasInstanceNotDefaultSymbol(a1, a2, v7, a4, a5);
  v9 = *(int *)(v5 + a5 + 6);
  if (v9 < 0x40000000)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__131_load__done(*(_QWORD *)(v6 + 8 * v9), v9, v7, a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__131_load__constant(a1, v9);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__131_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__131_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__131_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * a4) = ((*(_BYTE *)(a1 + 6) & 2) == 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__131_fn__opOverridesHasInstanceNotDefaultSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * a4) = 7;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t llint_op_is_empty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__132_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__132_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__132_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__132_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__132_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = (a1 == 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_is_empty_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__133_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__133_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__133_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__133_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__133_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = (a1 == 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_is_empty_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__134_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__134_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__134_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__134_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__134_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = (a1 == 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_typeof_is_undefined(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__135_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__135_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__135_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__135_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__135_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a1 & v6) == 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opIsUndefinedCell(a1, a2, a3, a4, a5);
  *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 1)) = (a1 == 10) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opIsUndefinedCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 6) & 1) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__135_fn__masqueradesAsUndefined((unsigned int *)a1, a2, a3, a4, a5);
  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__135_fn__masqueradesAsUndefined(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = (*(_QWORD *)(16 * *a1 + 0x28) == *(_QWORD *)(*(_QWORD *)(v6 + 16)
                                                                                                + 8)) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_typeof_is_undefined_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__136_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__136_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__136_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__136_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__136_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a1 & v6) == 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__136_fn__opIsUndefinedCell(a1, a2, a3, a4, a5);
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 2)) = (a1 == 10) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__136_fn__opIsUndefinedCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 6) & 1) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__136_fn__masqueradesAsUndefined((unsigned int *)a1, a2, a3, a4, a5);
  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__136_fn__masqueradesAsUndefined(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = (*(_QWORD *)(16 * *a1 + 0x28) == *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8)) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_typeof_is_undefined_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__137_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__137_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__137_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__137_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__137_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a1 & v6) == 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__137_fn__opIsUndefinedCell(a1, a2, a3, a4, a5);
  *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 2)) = (a1 == 10) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__137_fn__opIsUndefinedCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 6) & 1) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__137_fn__masqueradesAsUndefined((unsigned int *)a1, a2, a3, a4, a5);
  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__137_fn__masqueradesAsUndefined(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = (*(_QWORD *)(16 * *a1 + 0x28) == *(_QWORD *)(*(_QWORD *)(v6 + 16)
                                                                                               + 8)) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_typeof_is_function(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__138_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__138_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__138_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__138_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__138_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & v5) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opTypeOfIsFunctionIsImm(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opTypeOfIsFunctionSlowCase(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opTypeOfIsFunctionIsImm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opTypeOfIsFunctionSlowCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_typeof_is_function(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 3)]();
}

uint64_t llint_op_typeof_is_function_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__139_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__139_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__139_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__139_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__139_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & v5) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__139_fn__opTypeOfIsFunctionIsImm(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__139_fn__opTypeOfIsFunctionSlowCase(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__139_fn__opTypeOfIsFunctionIsImm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__139_fn__opTypeOfIsFunctionSlowCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_typeof_is_function(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 6)]();
}

uint64_t llint_op_typeof_is_function_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__140_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__140_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__140_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__140_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__140_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & v5) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__140_fn__opTypeOfIsFunctionIsImm(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__140_fn__opTypeOfIsFunctionSlowCase(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__140_fn__opTypeOfIsFunctionIsImm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__140_fn__opTypeOfIsFunctionSlowCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_typeof_is_function(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

uint64_t llint_op_is_BOOLean(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__141_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__141_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__141_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__141_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__141_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = (((a1 ^ 6) & 0xFFFFFFFFFFFFFFFELL) == 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_is_BOOLean_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__142_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__142_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__142_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__142_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__142_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = (((a1 ^ 6) & 0xFFFFFFFFFFFFFFFELL) == 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_is_BOOLean_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__143_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__143_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__143_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__143_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__143_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = (((a1 ^ 6) & 0xFFFFFFFFFFFFFFFELL) == 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_is_number(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__144_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__144_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__144_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__144_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__144_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 1)) = ((a1 & v6) != 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_is_number_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__145_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__145_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__145_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__145_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__145_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 2)) = ((a1 & v6) != 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_is_number_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__146_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__146_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__146_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__146_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__146_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 2)) = ((a1 & v6) != 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_is_cell_with_type(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__147_load__done(*(unsigned __int8 *)(v5 + a5 + 3), v7, a3, *(_QWORD *)(v6 + 8 * v7), a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__147_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__147_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__147_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__147_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a4 & v6) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__notCellCase(a1, a2, a3, a4, a5);
  *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 1)) = (*(unsigned __int8 *)(a4 + 5) == (_DWORD)a1) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__notCellCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t llint_op_is_cell_with_type_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__148_load__done(*(unsigned __int16 *)(v5 + a5 + 6), v7, a3, *(_QWORD *)(v6 + 8 * v7), a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__148_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__148_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__148_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__148_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a4 & v6) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__148_fn__notCellCase(a1, a2, a3, a4, a5);
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 2)) = (*(unsigned __int8 *)(a4 + 5) == (_DWORD)a1) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__148_fn__notCellCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t llint_op_is_cell_with_type_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__149_load__done(*(unsigned int *)(v5 + a5 + 10), v7, a3, *(_QWORD *)(v6 + 8 * v7), a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__149_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__149_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__149_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__149_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a4 & v6) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__149_fn__notCellCase(a1, a2, a3, a4, a5);
  *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 2)) = (*(unsigned __int8 *)(a4 + 5) == (_DWORD)a1) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__149_fn__notCellCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t llint_op_has_structure_with_flags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__150_load__done(*(unsigned __int8 *)(v5 + a5 + 3), v7, *(unsigned int **)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__150_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__150_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__150_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__150_load__done(int a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = ((*(_DWORD *)(16 * *a3 + 0x10) & a1) != 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t llint_op_has_structure_with_flags_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__151_load__done(*(unsigned __int16 *)(v5 + a5 + 6), v7, *(unsigned int **)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__151_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__151_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__151_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__151_load__done(int a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = ((*(_DWORD *)(16 * *a3 + 0x10) & a1) != 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t llint_op_has_structure_with_flags_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__152_load__done(*(_DWORD *)(v5 + a5 + 10), v7, *(unsigned int **)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__152_load__constant();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__152_load__constant()
{
  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__152_load__done();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__152_load__done(int a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = ((*(_DWORD *)(16 * *a3 + 0x10) & a1) != 0) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t llint_op_is_object(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__153_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__153_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__153_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__153_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__153_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a1 & v6) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opIsObjectNotCell(a1, a2, a3, a4, a5);
  *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 1)) = (*(unsigned __int8 *)(a1 + 5) >= 0x17u) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opIsObjectNotCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_is_object_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__154_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__154_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__154_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__154_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__154_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a1 & v6) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__154_fn__opIsObjectNotCell(a1, a2, a3, a4, a5);
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 2)) = (*(unsigned __int8 *)(a1 + 5) >= 0x17u) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__154_fn__opIsObjectNotCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_is_object_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__155_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__155_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__155_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__155_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__155_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a1 & v6) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__155_fn__opIsObjectNotCell(a1, a2, a3, a4, a5);
  *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 2)) = (*(unsigned __int8 *)(a1 + 5) >= 0x17u) | 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__155_fn__opIsObjectNotCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = 6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_try_get_by_id(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 90);
  if (!*(_WORD *)(v9 + 90))
    v10 = *(_DWORD *)(v9 + 276);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__155_metadata__setUpOffset(a3, a1, a2, v10, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__155_metadata__setUpOffset(int8x16_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v12 = (unsigned int *)((a4 + 8 * *(unsigned __int8 *)(v10 + a6 + 5) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = *(char *)(v10 + a6 + 2);
  if (v13 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__156_load__done(v13, a3, v12, *(_QWORD *)(v11 + 8 * v13), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__156_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__156_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__156_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__156_load__done(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int v11;

  if ((a4 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opTryGetByIdSlow(a9, a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  a2 = *(unsigned int *)a4;
  a1 = *a3;
  if ((_DWORD)a1 != (_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opTryGetByIdSlow(a9, a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = a3[1];
  if (v11 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadPropertyAtVariableOffset__ready(a1, -v11, (uint64_t)a3, *(_QWORD *)(a4 + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opTryGetByIdSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_try_get_by_id(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_try_get_by_id_wide16(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 90);
  if (!*(_WORD *)(v9 + 90))
    v10 = *(_DWORD *)(v9 + 276);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__156_metadata__setUpOffset(a3, a1, a2, v10, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__156_metadata__setUpOffset(int8x16_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v12 = (unsigned int *)((a4 + 8 * *(unsigned __int16 *)(v10 + a6 + 10) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = *(__int16 *)(v10 + a6 + 4);
  if (v13 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__157_load__done(v13, a3, v12, *(_QWORD *)(v11 + 8 * v13), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__157_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__157_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__157_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__157_load__done(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int v11;

  if ((a4 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__157_fn__opTryGetByIdSlow(a9, a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  a2 = *(unsigned int *)a4;
  a1 = *a3;
  if ((_DWORD)a1 != (_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__157_fn__opTryGetByIdSlow(a9, a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = a3[1];
  if (v11 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__157_loadPropertyAtVariableOffset__ready(a1, -v11, (uint64_t)a3, *(_QWORD *)(a4 + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__157_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__157_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__157_fn__opTryGetByIdSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_try_get_by_id(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_try_get_by_id_wide32(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 90);
  if (!*(_WORD *)(v9 + 90))
    v10 = *(_DWORD *)(v9 + 276);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__157_metadata__setUpOffset(a3, a1, a2, v10, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__157_metadata__setUpOffset(int8x16_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v12 = (unsigned int *)(((a4 + 8 * *(_DWORD *)(v10 + a6 + 18)) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = *(int *)(v10 + a6 + 6);
  if (v13 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__158_load__done(v13, a3, v12, *(_QWORD *)(v11 + 8 * v13), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__158_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__158_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__158_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__158_load__done(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int v11;

  if ((a4 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__158_fn__opTryGetByIdSlow(a9, a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  a2 = *(unsigned int *)a4;
  a1 = *a3;
  if ((_DWORD)a1 != (_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__158_fn__opTryGetByIdSlow(a9, a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = a3[1];
  if (v11 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__158_loadPropertyAtVariableOffset__ready(a1, -v11, (uint64_t)a3, *(_QWORD *)(a4 + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__158_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__158_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__158_fn__opTryGetByIdSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_try_get_by_id(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_get_by_id_direct(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 88);
  if (!*(_WORD *)(v9 + 88))
    v10 = *(_DWORD *)(v9 + 272);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__158_metadata__setUpOffset(a3, a1, a2, v10, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__158_metadata__setUpOffset(int8x16_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v12 = (unsigned int *)((a4 + 8 * *(unsigned __int8 *)(v10 + a6 + 5) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = *(char *)(v10 + a6 + 2);
  if (v13 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__159_load__done(v13, a3, v12, *(_QWORD *)(v11 + 8 * v13), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__159_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__159_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__159_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__159_load__done(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int v11;

  if ((a4 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdDirectSlow(a9, a1, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
  a2 = *(unsigned int *)a4;
  a1 = *a3;
  if ((_DWORD)a1 != (_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdDirectSlow(a9, a1, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
  v11 = a3[1];
  if (v11 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__159_loadPropertyAtVariableOffset__ready(a1, -v11, (uint64_t)a3, *(_QWORD *)(a4 + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__159_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__159_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdDirectSlow(int8x16_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_get_by_id_direct(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_get_by_id_direct_wide16(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 88);
  if (!*(_WORD *)(v9 + 88))
    v10 = *(_DWORD *)(v9 + 272);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__159_metadata__setUpOffset(a3, a1, a2, v10, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__159_metadata__setUpOffset(int8x16_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v12 = (unsigned int *)((a4 + 8 * *(unsigned __int16 *)(v10 + a6 + 10) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = *(__int16 *)(v10 + a6 + 4);
  if (v13 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__160_load__done(v13, a3, v12, *(_QWORD *)(v11 + 8 * v13), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__160_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__160_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__160_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__160_load__done(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int v11;

  if ((a4 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__160_fn__opGetByIdDirectSlow(a9, a1, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
  a2 = *(unsigned int *)a4;
  a1 = *a3;
  if ((_DWORD)a1 != (_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__160_fn__opGetByIdDirectSlow(a9, a1, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
  v11 = a3[1];
  if (v11 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__160_loadPropertyAtVariableOffset__ready(a1, -v11, (uint64_t)a3, *(_QWORD *)(a4 + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__160_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__160_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__160_fn__opGetByIdDirectSlow(int8x16_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_get_by_id_direct(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_get_by_id_direct_wide32(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 88);
  if (!*(_WORD *)(v9 + 88))
    v10 = *(_DWORD *)(v9 + 272);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__160_metadata__setUpOffset(a3, a1, a2, v10, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__160_metadata__setUpOffset(int8x16_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v12 = (unsigned int *)(((a4 + 8 * *(_DWORD *)(v10 + a6 + 18)) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = *(int *)(v10 + a6 + 6);
  if (v13 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__161_load__done(v13, a3, v12, *(_QWORD *)(v11 + 8 * v13), a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__161_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__161_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__161_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__161_load__done(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int v11;

  if ((a4 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__161_fn__opGetByIdDirectSlow(a9, a1, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
  a2 = *(unsigned int *)a4;
  a1 = *a3;
  if ((_DWORD)a1 != (_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__161_fn__opGetByIdDirectSlow(a9, a1, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
  v11 = a3[1];
  if (v11 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__161_loadPropertyAtVariableOffset__ready(a1, -v11, (uint64_t)a3, *(_QWORD *)(a4 + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__161_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__161_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__161_fn__opGetByIdDirectSlow(int8x16_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_get_by_id_direct(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_get_by_id(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(char *)(v6 + a6 + 2);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__162_load__done(v8, a3, a4, *(_QWORD *)(v7 + 8 * v8), a6, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__162_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__162_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__162_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__162_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  if ((a4 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdSlow(a6, a1, a2, a3, a4, a5);
  v8 = *(unsigned __int16 *)(v6 + 36);
  if (!*(_WORD *)(v6 + 36))
    v8 = *(_DWORD *)(v6 + 168);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__162_metadata__setUpOffset(a1, a2, v8, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__162_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(((a3 + 16 * *(unsigned __int8 *)(v6 + a5 + 5) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)+ 14));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *a3;
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdSlow(a6, v8, v7, (uint64_t)a3, (uint64_t)a4, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__162_loadPropertyAtVariableOffset__ready(v8, -v9, (uint64_t)a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__162_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__162_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *a3;
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdSlow(a6, a1, v6, (uint64_t)a3, v7, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__163_loadPropertyAtVariableOffset__ready(a1, -v9, (uint64_t)a3, *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__163_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__163_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a5 + 4) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(char *)(v7 + a5 + 1)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__opGetByIdUnset(int8x16_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *a4;
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdSlow(a1, v10, v9, (uint64_t)a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a6 + 4) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(char *)(v7 + a6 + 1)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByIdSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;

  v8 = llint_slow_path_get_by_id(v7, (unsigned __int8 *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)v8 + 6)]();
}

uint64_t op_get_by_id_return_location(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v1 - 16 * *(unsigned __int8 *)(v2 + v4 + 4) - 16) = a1;
  *(_QWORD *)(v3 + 8 * *(char *)(v2 + v4 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v2 + v4 + 6)]();
}

uint64_t llint_op_get_by_id_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(__int16 *)(v6 + a6 + 4);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__163_load__done(v8, a3, a4, *(_QWORD *)(v7 + 8 * v8), a6, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__163_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__163_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__163_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__163_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  if ((a4 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__165_fn__opGetByIdSlow(a6, a1, a2, a3, a4, a5);
  v8 = *(unsigned __int16 *)(v6 + 36);
  if (!*(_WORD *)(v6 + 36))
    v8 = *(_DWORD *)(v6 + 168);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__163_metadata__setUpOffset(a1, a2, v8, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__163_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__165_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(((a3 + 16 * *(unsigned __int16 *)(v6 + a5 + 10) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)+ 14));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__165_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__165_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *a3;
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__165_fn__opGetByIdSlow(a6, v8, v7, (uint64_t)a3, (uint64_t)a4, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__164_loadPropertyAtVariableOffset__ready(v8, -v9, (uint64_t)a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__164_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__164_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__165_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__165_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *a3;
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__165_fn__opGetByIdSlow(a6, a1, v6, (uint64_t)a3, v7, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__165_loadPropertyAtVariableOffset__ready(a1, -v9, (uint64_t)a3, *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__165_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__165_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__165_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__165_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__165_fn__opGetByIdSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__165_fn__opGetByIdSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__165_fn__opGetByIdSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a5 + 8) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v7 + a5 + 2)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__165_performGetByIDHelper__opGetByIdUnset(int8x16_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *a4;
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__165_fn__opGetByIdSlow(a1, v10, v9, (uint64_t)a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a6 + 8) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v7 + a6 + 2)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__165_fn__opGetByIdSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;

  v8 = llint_slow_path_get_by_id(v7, (unsigned __int8 *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)v8 + 12)]();
}

uint64_t op_get_by_id_return_location_wide16(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v1 - 16 * *(unsigned __int16 *)(v2 + v4 + 8) - 16) = a1;
  *(_QWORD *)(v3 + 8 * *(__int16 *)(v2 + v4 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v2 + v4 + 12)]();
}

uint64_t llint_op_get_by_id_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(int *)(v6 + a6 + 6);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__165_load__done(v8, a3, a4, *(_QWORD *)(v7 + 8 * v8), a6, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__165_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__165_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__165_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__165_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  if ((a4 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__167_fn__opGetByIdSlow(a6, a1, a2, a3, a4, a5);
  v8 = *(unsigned __int16 *)(v6 + 36);
  if (!*(_WORD *)(v6 + 36))
    v8 = *(_DWORD *)(v6 + 168);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__165_metadata__setUpOffset(a1, a2, v8, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__165_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__167_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)((((a3 + 16 * *(_DWORD *)(v6 + a5 + 18)) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)+ 14));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__167_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__167_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *a3;
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__167_fn__opGetByIdSlow(a6, v8, v7, (uint64_t)a3, (uint64_t)a4, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__166_loadPropertyAtVariableOffset__ready(v8, -v9, (uint64_t)a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__166_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__166_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__167_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__167_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *a3;
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__167_fn__opGetByIdSlow(a6, a1, v6, (uint64_t)a3, v7, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__167_loadPropertyAtVariableOffset__ready(a1, -v9, (uint64_t)a3, *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__167_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__167_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__167_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__167_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__167_fn__opGetByIdSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__167_fn__opGetByIdSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__167_fn__opGetByIdSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a5 + 14) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(int *)(v7 + a5 + 2)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__167_performGetByIDHelper__opGetByIdUnset(int8x16_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *a4;
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__167_fn__opGetByIdSlow(a1, v10, v9, (uint64_t)a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a6 + 14) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(int *)(v7 + a6 + 2)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__167_fn__opGetByIdSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;

  v8 = llint_slow_path_get_by_id(v7, (unsigned __int8 *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)v8 + 22)]();
}

uint64_t op_get_by_id_return_location_wide32(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v1 - 16 * *(unsigned int *)(v2 + v4 + 14) - 16) = a1;
  *(_QWORD *)(v3 + 8 * *(int *)(v2 + v4 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v2 + v4 + 22)]();
}

uint64_t llint_op_get_length(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(char *)(v6 + a6 + 2);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__167_load__done(v8, a3, a4, *(_QWORD *)(v7 + 8 * v8), a6, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__167_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__167_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__167_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__167_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  if ((a4 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetLengthSlow(a6, a1, a2, a3, a4, a5);
  v8 = *(unsigned __int16 *)(v6 + 38);
  if (!*(_WORD *)(v6 + 38))
    v8 = *(_DWORD *)(v6 + 172);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__167_metadata__setUpOffset(a1, a2, v8, (_DWORD *)a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__167_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v7 = (a3 + 32 * *(unsigned __int8 *)(v6 + a5 + 4) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)(v7 + 16) = *a4;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__169_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(v7 + 14));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__169_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__169_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *a3;
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetLengthSlow(a6, v8, v7, (uint64_t)a3, (uint64_t)a4, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__168_loadPropertyAtVariableOffset__ready(v8, -v9, (uint64_t)a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__168_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__168_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 3) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 5)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__169_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__169_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *a3;
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetLengthSlow(a6, a1, v6, (uint64_t)a3, v7, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__169_loadPropertyAtVariableOffset__ready(a1, -v9, (uint64_t)a3, *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__169_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__169_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 3) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 5)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__169_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__169_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetLengthSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetLengthSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetLengthSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a5 + 3) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(char *)(v7 + a5 + 1)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 5)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__169_performGetByIDHelper__opGetByIdUnset(int8x16_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *a4;
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetLengthSlow(a1, v10, v9, (uint64_t)a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a6 + 3) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(char *)(v7 + a6 + 1)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 5)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetLengthSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *length;

  length = llint_slow_path_get_length(v7, (unsigned __int8 *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)length + 5)]();
}

uint64_t op_get_length_return_location(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v1 - 16 * *(unsigned __int8 *)(v2 + v4 + 3) - 16) = a1;
  *(_QWORD *)(v3 + 8 * *(char *)(v2 + v4 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v2 + v4 + 5)]();
}

uint64_t llint_op_get_length_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(__int16 *)(v6 + a6 + 4);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__169_load__done(v8, a3, a4, *(_QWORD *)(v7 + 8 * v8), a6, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__169_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__169_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__169_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__169_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  if ((a4 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__171_fn__opGetLengthSlow(a6, a1, a2, a3, a4, a5);
  v8 = *(unsigned __int16 *)(v6 + 38);
  if (!*(_WORD *)(v6 + 38))
    v8 = *(_DWORD *)(v6 + 172);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__169_metadata__setUpOffset(a1, a2, v8, (_DWORD *)a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__169_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v7 = (a3 + 32 * *(unsigned __int16 *)(v6 + a5 + 8) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)(v7 + 16) = *a4;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__171_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(v7 + 14));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__171_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__171_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *a3;
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__171_fn__opGetLengthSlow(a6, v8, v7, (uint64_t)a3, (uint64_t)a4, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__170_loadPropertyAtVariableOffset__ready(v8, -v9, (uint64_t)a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__170_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__170_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 6) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__171_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__171_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *a3;
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__171_fn__opGetLengthSlow(a6, a1, v6, (uint64_t)a3, v7, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__171_loadPropertyAtVariableOffset__ready(a1, -v9, (uint64_t)a3, *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__171_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__171_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 6) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__171_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__171_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__171_fn__opGetLengthSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__171_fn__opGetLengthSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__171_fn__opGetLengthSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a5 + 6) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v7 + a5 + 2)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__171_performGetByIDHelper__opGetByIdUnset(int8x16_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *a4;
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__171_fn__opGetLengthSlow(a1, v10, v9, (uint64_t)a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a6 + 6) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v7 + a6 + 2)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__171_fn__opGetLengthSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *length;

  length = llint_slow_path_get_length(v7, (unsigned __int8 *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)length + 10)]();
}

uint64_t op_get_length_return_location_wide16(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v1 - 16 * *(unsigned __int16 *)(v2 + v4 + 6) - 16) = a1;
  *(_QWORD *)(v3 + 8 * *(__int16 *)(v2 + v4 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v2 + v4 + 10)]();
}

uint64_t llint_op_get_length_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(int *)(v6 + a6 + 6);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__171_load__done(v8, a3, a4, *(_QWORD *)(v7 + 8 * v8), a6, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__171_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__171_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__171_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__171_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  if ((a4 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__173_fn__opGetLengthSlow(a6, a1, a2, a3, a4, a5);
  v8 = *(unsigned __int16 *)(v6 + 38);
  if (!*(_WORD *)(v6 + 38))
    v8 = *(_DWORD *)(v6 + 172);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__171_metadata__setUpOffset(a1, a2, v8, (_DWORD *)a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__171_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v7 = ((a3 + 32 * *(_DWORD *)(v6 + a5 + 14)) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)(v7 + 16) = *a4;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__173_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(v7 + 14));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__173_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__173_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *a3;
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__173_fn__opGetLengthSlow(a6, v8, v7, (uint64_t)a3, (uint64_t)a4, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__172_loadPropertyAtVariableOffset__ready(v8, -v9, (uint64_t)a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__172_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__172_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 10) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__173_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__173_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *a3;
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__173_fn__opGetLengthSlow(a6, a1, v6, (uint64_t)a3, v7, a5);
  v9 = a3[1];
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__173_loadPropertyAtVariableOffset__ready(a1, -v9, (uint64_t)a3, *(_QWORD *)(*((_QWORD *)a3 + 1) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__173_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__173_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 10) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__173_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__173_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__173_fn__opGetLengthSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__173_fn__opGetLengthSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__173_fn__opGetLengthSlow(a6, v11, a2, (uint64_t)a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a5 + 10) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(int *)(v7 + a5 + 2)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__173_performGetByIDHelper__opGetByIdUnset(int8x16_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *a4;
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__173_fn__opGetLengthSlow(a1, v10, v9, (uint64_t)a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a6 + 10) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(int *)(v7 + a6 + 2)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__173_fn__opGetLengthSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *length;

  length = llint_slow_path_get_length(v7, (unsigned __int8 *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)length + 18)]();
}

uint64_t op_get_length_return_location_wide32(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v1 - 16 * *(unsigned int *)(v2 + v4 + 10) - 16) = a1;
  *(_QWORD *)(v3 + 8 * *(int *)(v2 + v4 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v2 + v4 + 18)]();
}

uint64_t llint_op_get_prototype_of(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 2);
  if (v7 < 16)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__173_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__173_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__173_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__173_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__173_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if ((a1 & v7) != 0)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opGetPrototypeOfSlow(a1, a2, a3, a4, a5);
  if (*(unsigned __int8 *)(a1 + 5) < 0x17u)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opGetPrototypeOfSlow(a1, a2, a3, a4, a5);
  a3 = 16 * *(unsigned int *)a1;
  a4 = *(unsigned __int16 *)(a3 + 0xC);
  if ((a4 & 0x800) != 0)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opGetPrototypeOfSlow(a1, a2, a3, a4, a5);
  v10 = *(_QWORD *)(16 * *(unsigned int *)a1 + 0x30);
  if (!v10)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opGetPrototypeOfPolyProto(a1, a2, 0, a4, a5);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 3) - 16) = v10;
  *(_QWORD *)(v8 + 8 * *(char *)(v6 + a5 + 1)) = v10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 4)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opGetPrototypeOfSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *prototype_of;

  prototype_of = slow_path_get_prototype_of(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)prototype_of + 4)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__opGetPrototypeOfPolyProto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 3) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 4)]();
}

uint64_t llint_op_get_prototype_of_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 4);
  if (v7 < 64)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__174_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__174_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__174_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__174_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__174_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if ((a1 & v7) != 0)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__174_fn__opGetPrototypeOfSlow(a1, a2, a3, a4, a5);
  if (*(unsigned __int8 *)(a1 + 5) < 0x17u)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__174_fn__opGetPrototypeOfSlow(a1, a2, a3, a4, a5);
  a3 = 16 * *(unsigned int *)a1;
  a4 = *(unsigned __int16 *)(a3 + 0xC);
  if ((a4 & 0x800) != 0)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__174_fn__opGetPrototypeOfSlow(a1, a2, a3, a4, a5);
  v10 = *(_QWORD *)(16 * *(unsigned int *)a1 + 0x30);
  if (!v10)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__174_fn__opGetPrototypeOfPolyProto(a1, a2, 0, a4, a5);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 6) - 16) = v10;
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v6 + a5 + 2)) = v10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__174_fn__opGetPrototypeOfSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *prototype_of;

  prototype_of = slow_path_get_prototype_of(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)prototype_of + 8)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__174_fn__opGetPrototypeOfPolyProto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 6) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 8)]();
}

uint64_t llint_op_get_prototype_of_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 6);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__175_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__175_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__175_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__175_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__fn__loadConstantOrVariable__size__k__175_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if ((a1 & v7) != 0)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__175_fn__opGetPrototypeOfSlow(a1, a2, a3, a4, a5);
  if (*(unsigned __int8 *)(a1 + 5) < 0x17u)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__175_fn__opGetPrototypeOfSlow(a1, a2, a3, a4, a5);
  a3 = 16 * *(unsigned int *)a1;
  a4 = *(unsigned __int16 *)(a3 + 0xC);
  if ((a4 & 0x800) != 0)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__175_fn__opGetPrototypeOfSlow(a1, a2, a3, a4, a5);
  v10 = *(_QWORD *)(16 * *(unsigned int *)a1 + 0x30);
  if (!v10)
    return jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__175_fn__opGetPrototypeOfPolyProto(a1, a2, 0, a4, a5);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 10) - 16) = v10;
  *(_QWORD *)(v8 + 8 * *(int *)(v6 + a5 + 2)) = v10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__175_fn__opGetPrototypeOfSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *prototype_of;

  prototype_of = slow_path_get_prototype_of(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)prototype_of + 14)]();
}

uint64_t jsc_llint_llintOpWithProfile__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__makeReturnProfiled__fn__175_fn__opGetPrototypeOfPolyProto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 10) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 14)]();
}

uint64_t llint_op_put_by_id(uint64_t a1, uint64_t a2, JSC::ExecutableBase *a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 1);
  if (v11 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__176_load__done(*(_QWORD *)(v10 + 8 * v11), a2, a3, (const JSC::PropertyTable *)v11, a6, a7, a8, a9, a4);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__176_load__constant(a1, a2, (uint64_t)a3, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__176_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__176_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__176_load__done(uint64_t a1, uint64_t a2, JSC::ExecutableBase *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 14);
  if (!*(_WORD *)(v9 + 14))
    v11 = *(_DWORD *)(v9 + 124);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__176_metadata__setUpOffset((_DWORD *)a1, a2, a9, (uint64_t)a3, a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__176_metadata__setUpOffset(_DWORD *a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = (unsigned int *)((a7 + 24 * *(unsigned __int8 *)(v10 + a6 + 5) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  if ((_DWORD)v12 != *a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdSlow(a3, (uint64_t)a1, a2, (JSC::ExecutableBase *)v12, a5, a6, (uint64_t)v11, a8, a9);
  v14 = v11[2];
  if (!(_DWORD)v14)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdNotTransition((uint64_t)a1, v14, v12, (uint64_t)a5, a6, (uint64_t)v11);
  v15 = *((_QWORD *)v11 + 2);
  if (!v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__177_load__done(a1, v14, v12, 0, a6, (uint64_t)v11);
  v16 = *(_QWORD *)(v15 + 8);
  if (*(_QWORD *)(16 * v12 + 0x30) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdTransitionChainDone((uint64_t)a1, v14, 2, v16, a6, (uint64_t)v11);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdTransitionChainLoop();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdTransitionChainLoop(uint64_t a1, uint64_t a2, unsigned int *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::ExecutableBase *v9;

  do
  {
    v9 = (JSC::ExecutableBase *)*a3;
    if ((_DWORD)v9 != *(_DWORD *)a4)
      return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdSlow(a9, a1, a2, v9, a4, a5, a6, a7, a8);
    a4 = (const JSC::PropertyTable *)((char *)a4 + 4);
    a3 = *(unsigned int **)(16 * (_QWORD)v9 + 0x30);
  }
  while (a3 != (unsigned int *)2);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdTransitionChainDone(a1, a2, 2, (uint64_t)a4, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdTransitionChainDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(unsigned int *)(a6 + 8);
  v9 = *(char *)(v6 + a5 + 1);
  if (v9 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__177_load__done(*(_DWORD **)(v7 + 8 * v9), v8, a3, v9, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__177_load__constant(a1, v8, a3, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__177_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__177_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__177_load__done(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = a2;
  v8 = *(char *)(v6 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__178_load__done((uint64_t)a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__178_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__178_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__178_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__178_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if ((a3 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdNotTransition(a1, a2, a3, a4, a5, a6);
  __dmb(0xFu);
  if (*(_BYTE *)(a3 + 7))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdNotTransition(a1, a2, a3, a4, a5, a6);
  v10 = llint_write_barrier_slow(v8, a3);
  v14 = *(unsigned __int16 *)(v6 + 14);
  if (!*(_WORD *)(v6 + 14))
    v14 = *(_DWORD *)(v6 + 124);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__178_metadata__setUpOffset(v10, v11, v12, v13, a5, v14);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__178_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = (a6 + 24 * *(unsigned __int8 *)(v7 + a5 + 5) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(char *)(v7 + a5 + 1);
  if (v10 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdNotTransition(*(_QWORD *)(v8 + 8 * v10), v10, a3, a4, a5, v9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__179_load__constant(a1, v10);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__179_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdNotTransition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdNotTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(char *)(v6 + a5 + 3);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__180_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__180_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__180_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__180_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__180_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  v6 = *(_DWORD *)(a6 + 4);
  if (v6 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -v6, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__181_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__181_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__181_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__181_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__181_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__182_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__182_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__182_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__182_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__182_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByIdSlow(__n128 a1, uint64_t a2, uint64_t a3, JSC::ExecutableBase *a4, const JSC::PropertyTable *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_by_id(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a1, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t op_put_by_id_return_location()
{
  uint64_t v0;
  uint64_t v1;

  return g_opcodeMap[*(unsigned __int8 *)(v0 + *(unsigned int *)(v1 + 36) + 6)]();
}

uint64_t llint_op_put_by_id_wide16(uint64_t a1, uint64_t a2, JSC::ExecutableBase *a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 2);
  if (v11 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__183_load__done(*(_QWORD *)(v10 + 8 * v11), a2, a3, (const JSC::PropertyTable *)v11, a6, a7, a8, a9, a4);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__183_load__constant(a1, a2, (uint64_t)a3, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__183_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__183_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__183_load__done(uint64_t a1, uint64_t a2, JSC::ExecutableBase *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 14);
  if (!*(_WORD *)(v9 + 14))
    v11 = *(_DWORD *)(v9 + 124);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__183_metadata__setUpOffset((_DWORD *)a1, a2, a9, (uint64_t)a3, a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__183_metadata__setUpOffset(_DWORD *a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = (unsigned int *)((a7 + 24 * *(unsigned __int16 *)(v10 + a6 + 10) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  if ((_DWORD)v12 != *a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdSlow(a3, (uint64_t)a1, a2, (JSC::ExecutableBase *)v12, a5, a6, (uint64_t)v11, a8, a9);
  v14 = v11[2];
  if (!(_DWORD)v14)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdNotTransition((uint64_t)a1, v14, v12, (uint64_t)a5, a6, (uint64_t)v11);
  v15 = *((_QWORD *)v11 + 2);
  if (!v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdTransitionDirect(a1, v14, v12, 0, a6, (uint64_t)v11);
  v16 = *(_QWORD *)(v15 + 8);
  if (*(_QWORD *)(16 * v12 + 0x30) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdTransitionChainDone((uint64_t)a1, v14, 2, v16, a6, (uint64_t)v11);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdTransitionChainLoop();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdTransitionChainLoop(uint64_t a1, uint64_t a2, unsigned int *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::ExecutableBase *v9;

  do
  {
    v9 = (JSC::ExecutableBase *)*a3;
    if ((_DWORD)v9 != *(_DWORD *)a4)
      return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdSlow(a9, a1, a2, v9, a4, a5, a6, a7, a8);
    a4 = (const JSC::PropertyTable *)((char *)a4 + 4);
    a3 = *(unsigned int **)(16 * (_QWORD)v9 + 0x30);
  }
  while (a3 != (unsigned int *)2);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdTransitionChainDone(a1, a2, 2, (uint64_t)a4, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdTransitionChainDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(unsigned int *)(a6 + 8);
  v9 = *(__int16 *)(v6 + a5 + 2);
  if (v9 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdTransitionDirect(*(_DWORD **)(v7 + 8 * v9), v8, a3, v9, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__184_load__constant(a1, v8, a3, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__184_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdTransitionDirect(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdTransitionDirect(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = a2;
  v8 = *(__int16 *)(v6 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__185_load__done((uint64_t)a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__185_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__185_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__185_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__185_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if ((a3 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdNotTransition(a1, a2, a3, a4, a5, a6);
  __dmb(0xFu);
  if (*(_BYTE *)(a3 + 7))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdNotTransition(a1, a2, a3, a4, a5, a6);
  v10 = llint_write_barrier_slow(v8, a3);
  v14 = *(unsigned __int16 *)(v6 + 14);
  if (!*(_WORD *)(v6 + 14))
    v14 = *(_DWORD *)(v6 + 124);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__185_metadata__setUpOffset(v10, v11, v12, v13, a5, v14);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__185_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = (a6 + 24 * *(unsigned __int16 *)(v7 + a5 + 10) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(__int16 *)(v7 + a5 + 2);
  if (v10 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdNotTransition(*(_QWORD *)(v8 + 8 * v10), v10, a3, a4, a5, v9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__186_load__constant(a1, v10);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__186_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdNotTransition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdNotTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(__int16 *)(v6 + a5 + 6);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__187_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__187_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__187_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__187_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__187_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  v6 = *(_DWORD *)(a6 + 4);
  if (v6 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__187_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -v6, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__187_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__187_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__188_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__188_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__188_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__188_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__188_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__189_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__189_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__189_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__189_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__189_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__189_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__189_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__189_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__189_fn__opPutByIdSlow(__n128 a1, uint64_t a2, uint64_t a3, JSC::ExecutableBase *a4, const JSC::PropertyTable *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_by_id(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a1, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t op_put_by_id_return_location_wide16()
{
  uint64_t v0;
  uint64_t v1;

  return g_opcodeMap[*(unsigned __int8 *)(v0 + *(unsigned int *)(v1 + 36) + 12)]();
}

uint64_t llint_op_put_by_id_wide32(uint64_t a1, uint64_t a2, JSC::ExecutableBase *a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 2);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__190_load__done(*(_QWORD *)(v10 + 8 * v11), a2, a3, (const JSC::PropertyTable *)v11, a6, a7, a8, a9, a4);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__190_load__constant(a1, a2, (uint64_t)a3, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__190_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__190_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__190_load__done(uint64_t a1, uint64_t a2, JSC::ExecutableBase *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 14);
  if (!*(_WORD *)(v9 + 14))
    v11 = *(_DWORD *)(v9 + 124);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__190_metadata__setUpOffset((_DWORD *)a1, a2, a9, (uint64_t)a3, a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__190_metadata__setUpOffset(_DWORD *a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = (unsigned int *)(((a7 + 24 * *(_DWORD *)(v10 + a6 + 18)) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  if ((_DWORD)v12 != *a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdSlow(a3, (uint64_t)a1, a2, (JSC::ExecutableBase *)v12, a5, a6, (uint64_t)v11, a8, a9);
  v14 = v11[2];
  if (!(_DWORD)v14)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdNotTransition((uint64_t)a1, v14, v12, (uint64_t)a5, a6, (uint64_t)v11);
  v15 = *((_QWORD *)v11 + 2);
  if (!v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdTransitionDirect(a1, v14, v12, 0, a6, (uint64_t)v11);
  v16 = *(_QWORD *)(v15 + 8);
  if (*(_QWORD *)(16 * v12 + 0x30) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdTransitionChainDone((uint64_t)a1, v14, 2, v16, a6, (uint64_t)v11);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdTransitionChainLoop();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdTransitionChainLoop(uint64_t a1, uint64_t a2, unsigned int *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::ExecutableBase *v9;

  do
  {
    v9 = (JSC::ExecutableBase *)*a3;
    if ((_DWORD)v9 != *(_DWORD *)a4)
      return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdSlow(a9, a1, a2, v9, a4, a5, a6, a7, a8);
    a4 = (const JSC::PropertyTable *)((char *)a4 + 4);
    a3 = *(unsigned int **)(16 * (_QWORD)v9 + 0x30);
  }
  while (a3 != (unsigned int *)2);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdTransitionChainDone(a1, a2, 2, (uint64_t)a4, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdTransitionChainDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(unsigned int *)(a6 + 8);
  v9 = *(int *)(v6 + a5 + 2);
  if (v9 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdTransitionDirect(*(_DWORD **)(v7 + 8 * v9), v8, a3, v9, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__191_load__constant(a1, v8, a3, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__191_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdTransitionDirect(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdTransitionDirect(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = a2;
  v8 = *(int *)(v6 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__192_load__done((uint64_t)a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__192_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__192_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__192_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__192_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if ((a3 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdNotTransition(a1, a2, a3, a4, a5, a6);
  __dmb(0xFu);
  if (*(_BYTE *)(a3 + 7))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdNotTransition(a1, a2, a3, a4, a5, a6);
  v10 = llint_write_barrier_slow(v8, a3);
  v14 = *(unsigned __int16 *)(v6 + 14);
  if (!*(_WORD *)(v6 + 14))
    v14 = *(_DWORD *)(v6 + 124);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__192_metadata__setUpOffset(v10, v11, v12, v13, a5, v14);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__192_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = ((a6 + 24 * *(_DWORD *)(v7 + a5 + 18)) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(int *)(v7 + a5 + 2);
  if (v10 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdNotTransition(*(_QWORD *)(v8 + 8 * v10), v10, a3, a4, a5, v9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__193_load__constant(a1, v10);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__193_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdNotTransition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdNotTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(int *)(v6 + a5 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__194_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__194_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__194_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__194_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__194_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  v6 = *(_DWORD *)(a6 + 4);
  if (v6 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__194_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -v6, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__194_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__194_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__195_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__195_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__195_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__195_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__195_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__196_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__196_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__196_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__196_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__196_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__196_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__196_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__196_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__196_fn__opPutByIdSlow(__n128 a1, uint64_t a2, uint64_t a3, JSC::ExecutableBase *a4, const JSC::PropertyTable *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_by_id(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a1, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t op_put_by_id_return_location_wide32()
{
  uint64_t v0;
  uint64_t v1;

  return g_opcodeMap[*(unsigned __int8 *)(v0 + *(unsigned int *)(v1 + 36) + 22)]();
}

uint64_t llint_op_get_by_val(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 64);
  if (!*(_WORD *)(v9 + 64))
    v10 = *(_DWORD *)(v9 + 224);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__196_metadata__setUpOffset(a1, a2, a6, a3, a4, a5, v10, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__196_metadata__setUpOffset(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;

  v12 = (_DWORD *)((a7 + 24 * *(unsigned __int8 *)(v10 + a6 + 5) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(char *)(v10 + a6 + 2);
  if (v13 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__197_load__done(*(_QWORD *)(v11 + 8 * v13), a2, v13, a5, a6, v12, a8, a9, a3);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__197_load__constant(a1, a2, v13);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__197_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__197_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__197_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, (unint64_t)a6, a7, a8);
  v12 = *(unsigned int *)a1;
  *a6 = v12;
  v13 = *(unsigned __int8 *)(a1 + 4);
  v14 = *(char *)(v9 + a5 + 3);
  if (v14 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__198_load__done(a1, *(_QWORD *)(v11 + 8 * v14), v13, v14, a5, (unint64_t)a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__198_load__constant(a1, v12, v13, v14);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__198_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__198_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__198_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (a2 < v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = a3 & 0xE;
  if ((_DWORD)v12 == 4 || (_DWORD)v12 == 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValIsContiguous(a1, (int)a2, v12, v11, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValNotContiguous(a1, (int)a2, v12, v11, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValIsContiguous(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a2 < *(_DWORD *)(a4 - 8) && (a1 = *(char *)(v9 + a5 + 1), (a3 = *(_QWORD *)(a4 + 8 * a2)) != 0))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValDone(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValNotContiguous(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a3 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValNotDouble(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a2 < *(_DWORD *)(a4 - 8))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValDone(*(char *)(v9 + a5 + 1), a2, *(_QWORD *)(a4 + 8 * a2) - v10, a4, a5);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValNotDouble(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;

  v10 = (a3 - 10);
  if (v10 > 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValNotIndexedStorage(a1, a2, a9, v10, a4, a5, a6, a7, a8);
  if (a2 < *(_DWORD *)(a4 - 4))
  {
    a1 = *(char *)(v9 + a5 + 1);
    v10 = *(_QWORD *)(a4 + 8 * a2 + 16);
    if (v10)
      return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValDone(a1, a2, v10, a4, a5);
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValSlow(a9, a1, a2, v10, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * a1) = a3;
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValNotIndexedStorage(uint64_t a1, unint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(unsigned __int8 *)(a1 + 5) - 39;
  if (v9 >= 9 || (*(_BYTE *)(a1 + 40) & 6) != 0 || a2 >= *(_QWORD *)(a1 + 24))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValSlow(a3, a1, a2, v9, a5, a6, a7, a8, a9);
  if (a2 > 0x7FFFFFFF)
  {
    a5 = *(_DWORD *)(a7 + 4) | 4u;
    *(_DWORD *)(a7 + 4) = a5;
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__smallTypedArray(a1, a2, v9, a3, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__smallTypedArray(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = byte_1ECF4C022;
  if (!byte_1ECF4C022 && (v10 = disablePrimitiveGigacageRequested, disablePrimitiveGigacageRequested))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__cagePrimitive__cage__done(disablePrimitiveGigacageRequested, a2, a3, v9, a6, a7, a8, a9, a4);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__cagePrimitive__doCaging(a4, v10, a2, a3, v9, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__cagePrimitive__doCaging(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if (qword_1ECF4C038)
    a5 = (a5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__cagePrimitive__cage__done(qword_1ECF4C038, a3, a4, a5, a6, a7, a8, a9, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__cagePrimitive__cage__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;

  if (a3 > 4)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValAboveUint16Array(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a3 > 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValInt16ArrayOrUint16Array(a1, a2, a3, a4, a5);
  if ((_DWORD)a3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValUint8ArrayOrUint8ClampedArray(a1, a2, a3, a4, a5);
  v14 = *(char *)(a4 + a2) | v11;
  *(_QWORD *)(v12 + 8 * *(char *)(v10 + a5 + 1)) = v14;
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a5 + 4) - 16) = v14;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValUint8ArrayOrUint8ClampedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  if (a3 > 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValUint8ClampedArray(a1, a2, a3, a4, a5);
  v10 = *(unsigned __int8 *)(a4 + a2) | v7;
  *(_QWORD *)(v8 + 8 * *(char *)(v6 + a5 + 1)) = v10;
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValUint8ClampedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v9 = *(unsigned __int8 *)(a4 + a2) | v7;
  *(_QWORD *)(v8 + 8 * *(char *)(v6 + a5 + 1)) = v9;
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v9;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValInt16ArrayOrUint16Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  if (a3 > 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValUint16Array(a1, a2, a3, a4, a5);
  v10 = *(__int16 *)(a4 + 2 * a2) | v7;
  *(_QWORD *)(v8 + 8 * *(char *)(v6 + a5 + 1)) = v10;
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValUint16Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v9 = *(unsigned __int16 *)(a4 + 2 * a2) | v7;
  *(_QWORD *)(v8 + 8 * *(char *)(v6 + a5 + 1)) = v9;
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v9;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValAboveUint16Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;

  if (a3 > 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValFloat32ArrayOrFloat64Array(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a3 > 5)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValUint32Array(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(unsigned int *)(a4 + 4 * a2) | v11;
  *(_QWORD *)(v12 + 8 * *(char *)(v10 + a5 + 1)) = v14;
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a5 + 4) - 16) = v14;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValUint32Array(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v13 = *(unsigned int *)(a5 + 4 * a3);
  if ((int)v13 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValSlow(a1, v13, a3, a4, a5, a6, a7, a8, a9);
  v15 = v13 | v11;
  *(_QWORD *)(v12 + 8 * *(char *)(v10 + a6 + 1)) = v15;
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a6 + 4) - 16) = v15;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a6 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__opGetByValFloat32ArrayOrFloat64Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if ((_DWORD)a3 == 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a4 + 8 * a2);
  *(_QWORD *)(v12 + 8 * *(char *)(v10 + a5 + 1)) = v14 - v11;
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a5 + 4) - 16) = v14 - v11;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetByValSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_get_by_val(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t op_get_by_val_return_location(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v1 - 16 * *(unsigned __int8 *)(v2 + v4 + 4) - 16) = a1;
  *(_QWORD *)(v3 + 8 * *(char *)(v2 + v4 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v2 + v4 + 6)]();
}

uint64_t llint_op_get_by_val_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 64);
  if (!*(_WORD *)(v9 + 64))
    v10 = *(_DWORD *)(v9 + 224);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__198_metadata__setUpOffset(a1, a2, a6, a3, a4, a5, v10, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__198_metadata__setUpOffset(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;

  v12 = (_DWORD *)((a7 + 24 * *(unsigned __int16 *)(v10 + a6 + 10) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(__int16 *)(v10 + a6 + 4);
  if (v13 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__199_load__done(*(_QWORD *)(v11 + 8 * v13), a2, v13, a5, a6, v12, a8, a9, a3);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__199_load__constant(a1, a2, v13);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__199_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__199_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__199_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, (unint64_t)a6, a7, a8);
  v12 = *(unsigned int *)a1;
  *a6 = v12;
  v13 = *(unsigned __int8 *)(a1 + 4);
  v14 = *(__int16 *)(v9 + a5 + 6);
  if (v14 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__200_load__done(a1, *(_QWORD *)(v11 + 8 * v14), v13, v14, a5, (unint64_t)a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__200_load__constant(a1, v12, v13, v14);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__200_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__200_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__200_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (a2 < v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = a3 & 0xE;
  if ((_DWORD)v12 == 4 || (_DWORD)v12 == 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValIsContiguous(a1, (int)a2, v12, v11, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValNotContiguous(a1, (int)a2, v12, v11, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValIsContiguous(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a2 < *(_DWORD *)(a4 - 8) && (a1 = *(__int16 *)(v9 + a5 + 2), (a3 = *(_QWORD *)(a4 + 8 * a2)) != 0))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValDone(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValNotContiguous(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a3 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValNotDouble(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a2 < *(_DWORD *)(a4 - 8))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValDone(*(__int16 *)(v9 + a5 + 2), a2, *(_QWORD *)(a4 + 8 * a2) - v10, a4, a5);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValNotDouble(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;

  v10 = (a3 - 10);
  if (v10 > 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValNotIndexedStorage(a1, a2, a9, v10, a4, a5, a6, a7, a8);
  if (a2 < *(_DWORD *)(a4 - 4))
  {
    a1 = *(__int16 *)(v9 + a5 + 2);
    v10 = *(_QWORD *)(a4 + 8 * a2 + 16);
    if (v10)
      return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValDone(a1, a2, v10, a4, a5);
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValSlow(a9, a1, a2, v10, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * a1) = a3;
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValNotIndexedStorage(uint64_t a1, unint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(unsigned __int8 *)(a1 + 5) - 39;
  if (v9 >= 9 || (*(_BYTE *)(a1 + 40) & 6) != 0 || a2 >= *(_QWORD *)(a1 + 24))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValSlow(a3, a1, a2, v9, a5, a6, a7, a8, a9);
  if (a2 > 0x7FFFFFFF)
  {
    a5 = *(_DWORD *)(a7 + 4) | 4u;
    *(_DWORD *)(a7 + 4) = a5;
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__smallTypedArray(a1, a2, v9, a3, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__smallTypedArray(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = byte_1ECF4C022;
  if (!byte_1ECF4C022 && (v10 = disablePrimitiveGigacageRequested, disablePrimitiveGigacageRequested))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__200_cagePrimitive__done(disablePrimitiveGigacageRequested, a2, a3, v9, a6, a7, a8, a9, a4);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__200_cagePrimitive__doCaging(a4, v10, a2, a3, v9, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__200_cagePrimitive__doCaging(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if (qword_1ECF4C038)
    a5 = (a5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__200_cagePrimitive__done(qword_1ECF4C038, a3, a4, a5, a6, a7, a8, a9, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__200_cagePrimitive__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;

  if (a3 > 4)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValAboveUint16Array(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a3 > 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValInt16ArrayOrUint16Array(a1, a2, a3, a4, a5);
  if ((_DWORD)a3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValUint8ArrayOrUint8ClampedArray(a1, a2, a3, a4, a5);
  v14 = *(char *)(a4 + a2) | v11;
  *(_QWORD *)(v12 + 8 * *(__int16 *)(v10 + a5 + 2)) = v14;
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a5 + 8) - 16) = v14;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValUint8ArrayOrUint8ClampedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  if (a3 > 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValUint8ClampedArray(a1, a2, a3, a4, a5);
  v10 = *(unsigned __int8 *)(a4 + a2) | v7;
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v6 + a5 + 2)) = v10;
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValUint8ClampedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v9 = *(unsigned __int8 *)(a4 + a2) | v7;
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v6 + a5 + 2)) = v9;
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v9;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValInt16ArrayOrUint16Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  if (a3 > 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValUint16Array(a1, a2, a3, a4, a5);
  v10 = *(__int16 *)(a4 + 2 * a2) | v7;
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v6 + a5 + 2)) = v10;
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValUint16Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v9 = *(unsigned __int16 *)(a4 + 2 * a2) | v7;
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v6 + a5 + 2)) = v9;
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v9;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValAboveUint16Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;

  if (a3 > 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValFloat32ArrayOrFloat64Array(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a3 > 5)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValUint32Array(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(unsigned int *)(a4 + 4 * a2) | v11;
  *(_QWORD *)(v12 + 8 * *(__int16 *)(v10 + a5 + 2)) = v14;
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a5 + 8) - 16) = v14;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValUint32Array(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v13 = *(unsigned int *)(a5 + 4 * a3);
  if ((int)v13 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValSlow(a1, v13, a3, a4, a5, a6, a7, a8, a9);
  v15 = v13 | v11;
  *(_QWORD *)(v12 + 8 * *(__int16 *)(v10 + a6 + 2)) = v15;
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a6 + 8) - 16) = v15;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a6 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__200_getByValTypedArray__opGetByValFloat32ArrayOrFloat64Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if ((_DWORD)a3 == 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a4 + 8 * a2);
  *(_QWORD *)(v12 + 8 * *(__int16 *)(v10 + a5 + 2)) = v14 - v11;
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a5 + 8) - 16) = v14 - v11;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__200_fn__opGetByValSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_get_by_val(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t op_get_by_val_return_location_wide16(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v1 - 16 * *(unsigned __int16 *)(v2 + v4 + 8) - 16) = a1;
  *(_QWORD *)(v3 + 8 * *(__int16 *)(v2 + v4 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v2 + v4 + 12)]();
}

uint64_t llint_op_get_by_val_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 64);
  if (!*(_WORD *)(v9 + 64))
    v10 = *(_DWORD *)(v9 + 224);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__200_metadata__setUpOffset(a1, a2, a6, a3, a4, a5, v10, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__200_metadata__setUpOffset(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;

  v12 = (_DWORD *)(((a7 + 24 * *(_DWORD *)(v10 + a6 + 18)) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(int *)(v10 + a6 + 6);
  if (v13 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__201_load__done(*(_QWORD *)(v11 + 8 * v13), a2, v13, a5, a6, v12, a8, a9, a3);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__201_load__constant(a1, a2, v13);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__201_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__201_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__201_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, (unint64_t)a6, a7, a8);
  v12 = *(unsigned int *)a1;
  *a6 = v12;
  v13 = *(unsigned __int8 *)(a1 + 4);
  v14 = *(int *)(v9 + a5 + 10);
  if (v14 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__202_load__done(a1, *(_QWORD *)(v11 + 8 * v14), v13, v14, a5, (unint64_t)a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__202_load__constant(a1, v12, v13, v14);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__202_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__202_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__202_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (a2 < v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = a3 & 0xE;
  if ((_DWORD)v12 == 4 || (_DWORD)v12 == 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValIsContiguous(a1, (int)a2, v12, v11, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValNotContiguous(a1, (int)a2, v12, v11, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValIsContiguous(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (a2 < *(_DWORD *)(a4 - 8) && (a1 = *(int *)(v9 + a5 + 2), (a3 = *(_QWORD *)(a4 + 8 * a2)) != 0))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValDone(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValNotContiguous(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a3 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValNotDouble(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a2 < *(_DWORD *)(a4 - 8))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValDone(*(int *)(v9 + a5 + 2), a2, *(_QWORD *)(a4 + 8 * a2) - v10, a4, a5);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValNotDouble(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;

  v10 = (a3 - 10);
  if (v10 > 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValNotIndexedStorage(a1, a2, a9, v10, a4, a5, a6, a7, a8);
  if (a2 < *(_DWORD *)(a4 - 4))
  {
    a1 = *(int *)(v9 + a5 + 2);
    v10 = *(_QWORD *)(a4 + 8 * a2 + 16);
    if (v10)
      return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValDone(a1, a2, v10, a4, a5);
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValSlow(a9, a1, a2, v10, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * a1) = a3;
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValNotIndexedStorage(uint64_t a1, unint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(unsigned __int8 *)(a1 + 5) - 39;
  if (v9 >= 9 || (*(_BYTE *)(a1 + 40) & 6) != 0 || a2 >= *(_QWORD *)(a1 + 24))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValSlow(a3, a1, a2, v9, a5, a6, a7, a8, a9);
  if (a2 > 0x7FFFFFFF)
  {
    a5 = *(_DWORD *)(a7 + 4) | 4u;
    *(_DWORD *)(a7 + 4) = a5;
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__smallTypedArray(a1, a2, v9, a3, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__smallTypedArray(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = byte_1ECF4C022;
  if (!byte_1ECF4C022 && (v10 = disablePrimitiveGigacageRequested, disablePrimitiveGigacageRequested))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__202_cagePrimitive__done(disablePrimitiveGigacageRequested, a2, a3, v9, a6, a7, a8, a9, a4);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__202_cagePrimitive__doCaging(a4, v10, a2, a3, v9, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__202_cagePrimitive__doCaging(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if (qword_1ECF4C038)
    a5 = (a5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__202_cagePrimitive__done(qword_1ECF4C038, a3, a4, a5, a6, a7, a8, a9, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByValTypedArray__cagedPrimitive__202_cagePrimitive__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;

  if (a3 > 4)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValAboveUint16Array(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a3 > 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValInt16ArrayOrUint16Array(a1, a2, a3, a4, a5);
  if ((_DWORD)a3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValUint8ArrayOrUint8ClampedArray(a1, a2, a3, a4, a5);
  v14 = *(char *)(a4 + a2) | v11;
  *(_QWORD *)(v12 + 8 * *(int *)(v10 + a5 + 2)) = v14;
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a5 + 14) - 16) = v14;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValUint8ArrayOrUint8ClampedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  if (a3 > 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValUint8ClampedArray(a1, a2, a3, a4, a5);
  v10 = *(unsigned __int8 *)(a4 + a2) | v7;
  *(_QWORD *)(v8 + 8 * *(int *)(v6 + a5 + 2)) = v10;
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValUint8ClampedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v9 = *(unsigned __int8 *)(a4 + a2) | v7;
  *(_QWORD *)(v8 + 8 * *(int *)(v6 + a5 + 2)) = v9;
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v9;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValInt16ArrayOrUint16Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  if (a3 > 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValUint16Array(a1, a2, a3, a4, a5);
  v10 = *(__int16 *)(a4 + 2 * a2) | v7;
  *(_QWORD *)(v8 + 8 * *(int *)(v6 + a5 + 2)) = v10;
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v10;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValUint16Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v9 = *(unsigned __int16 *)(a4 + 2 * a2) | v7;
  *(_QWORD *)(v8 + 8 * *(int *)(v6 + a5 + 2)) = v9;
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v9;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValAboveUint16Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;

  if (a3 > 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValFloat32ArrayOrFloat64Array(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a3 > 5)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValUint32Array(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(unsigned int *)(a4 + 4 * a2) | v11;
  *(_QWORD *)(v12 + 8 * *(int *)(v10 + a5 + 2)) = v14;
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a5 + 14) - 16) = v14;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValUint32Array(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v13 = *(unsigned int *)(a5 + 4 * a3);
  if ((int)v13 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValSlow(a1, v13, a3, a4, a5, a6, a7, a8, a9);
  v15 = v13 | v11;
  *(_QWORD *)(v12 + 8 * *(int *)(v10 + a6 + 2)) = v15;
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a6 + 14) - 16) = v15;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a6 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__202_getByValTypedArray__opGetByValFloat32ArrayOrFloat64Array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if ((_DWORD)a3 == 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a4 + 8 * a2);
  *(_QWORD *)(v12 + 8 * *(int *)(v10 + a5 + 2)) = v14 - v11;
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a5 + 14) - 16) = v14 - v11;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__202_fn__opGetByValSlow(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_get_by_val(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t op_get_by_val_return_location_wide32(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v1 - 16 * *(unsigned int *)(v2 + v4 + 14) - 16) = a1;
  *(_QWORD *)(v3 + 8 * *(int *)(v2 + v4 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v2 + v4 + 22)]();
}

uint64_t llint_op_get_private_name(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 68);
  if (!*(_WORD *)(v8 + 68))
    v9 = *(_DWORD *)(v8 + 232);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__202_metadata__setUpOffset(a1, a2, v9, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__202_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  uint64_t v13;

  v11 = 16 * *(unsigned __int8 *)(v9 + a5 + 5);
  v12 = (JSC::Structure *)(((a3 + v11) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(char *)(v9 + a5 + 3);
  if (v13 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__203_load__done(*(_QWORD *)(v10 + 8 * v13), v13, v12, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__203_load__constant(v11, v13);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__203_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__203_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__203_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v10 = *((_QWORD *)a3 + 1);
  if (v10 != a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetPrivateNameSlow(a1, v10, a3, a4, a5, a6, a7, a8);
  v12 = *(char *)(v8 + a5 + 2);
  if (v12 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__204_load__done(v12, v10, a3, *(JSC::Symbol **)(v9 + 8 * v12), a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__204_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__204_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__204_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__204_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;

  if (((unint64_t)a4 & v8) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetPrivateNameSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(unsigned int *)a4;
  a1 = *(unsigned int *)a3;
  if ((_DWORD)a1 != (_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetPrivateNameSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_DWORD *)a3 + 1);
  if (v10 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__204_loadPropertyAtVariableOffset__ready(a1, -v10, (uint64_t)a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__204_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__204_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opGetPrivateNameSlow(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *private_name;

  private_name = llint_slow_path_get_private_name(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)private_name + 6)]();
}

uint64_t llint_op_get_private_name_wide16(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 68);
  if (!*(_WORD *)(v8 + 68))
    v9 = *(_DWORD *)(v8 + 232);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__204_metadata__setUpOffset(a1, a2, v9, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__204_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  uint64_t v13;

  v11 = 16 * *(unsigned __int16 *)(v9 + a5 + 10);
  v12 = (JSC::Structure *)(((a3 + v11) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(__int16 *)(v9 + a5 + 6);
  if (v13 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__205_load__done(*(_QWORD *)(v10 + 8 * v13), v13, v12, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__205_load__constant(v11, v13);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__205_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__205_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__205_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v10 = *((_QWORD *)a3 + 1);
  if (v10 != a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__206_fn__opGetPrivateNameSlow(a1, v10, a3, a4, a5, a6, a7, a8);
  v12 = *(__int16 *)(v8 + a5 + 4);
  if (v12 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__206_load__done(v12, v10, a3, *(JSC::Symbol **)(v9 + 8 * v12), a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__206_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__206_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__206_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__206_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;

  if (((unint64_t)a4 & v8) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__206_fn__opGetPrivateNameSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(unsigned int *)a4;
  a1 = *(unsigned int *)a3;
  if ((_DWORD)a1 != (_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__206_fn__opGetPrivateNameSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_DWORD *)a3 + 1);
  if (v10 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__206_loadPropertyAtVariableOffset__ready(a1, -v10, (uint64_t)a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__206_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__206_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__206_fn__opGetPrivateNameSlow(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *private_name;

  private_name = llint_slow_path_get_private_name(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)private_name + 12)]();
}

uint64_t llint_op_get_private_name_wide32(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 68);
  if (!*(_WORD *)(v8 + 68))
    v9 = *(_DWORD *)(v8 + 232);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__206_metadata__setUpOffset(a1, a2, v9, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__206_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  uint64_t v13;

  v11 = (16 * *(_DWORD *)(v9 + a5 + 18));
  v12 = (JSC::Structure *)(((a3 + v11) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(int *)(v9 + a5 + 10);
  if (v13 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__207_load__done(*(_QWORD *)(v10 + 8 * v13), v13, v12, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__207_load__constant(v11, v13);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__207_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__207_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__207_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v10 = *((_QWORD *)a3 + 1);
  if (v10 != a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__208_fn__opGetPrivateNameSlow(a1, v10, a3, a4, a5, a6, a7, a8);
  v12 = *(int *)(v8 + a5 + 6);
  if (v12 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__208_load__done(v12, v10, a3, *(JSC::Symbol **)(v9 + 8 * v12), a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__208_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__208_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__208_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__208_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;

  if (((unint64_t)a4 & v8) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__208_fn__opGetPrivateNameSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(unsigned int *)a4;
  a1 = *(unsigned int *)a3;
  if ((_DWORD)a1 != (_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__208_fn__opGetPrivateNameSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_DWORD *)a3 + 1);
  if (v10 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__208_loadPropertyAtVariableOffset__ready(a1, -v10, (uint64_t)a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__208_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__208_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__208_fn__opGetPrivateNameSlow(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *private_name;

  private_name = llint_slow_path_get_private_name(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)private_name + 22)]();
}

uint64_t llint_op_put_private_name(uint64_t a1, uint64_t a2, JSC::Structure *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 1);
  if (v11 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__209_load__done(*(_QWORD *)(v10 + 8 * v11), a2, a3, v11, a6, a7, a8, a9, a4);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__209_load__constant(a1, a2, (uint64_t)a3, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__209_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__209_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__209_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutPrivateNameSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(char *)(v9 + a5 + 2);
  if (v12 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__210_load__done((_DWORD *)a1, *(_QWORD *)(v11 + 8 * v12), a3, v12, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__210_load__constant(a1, a2, (uint64_t)a3, v12);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__210_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__210_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__210_load__done(_DWORD *a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a2 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutPrivateNameSlow(a9, (uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 66);
  if (!*(_WORD *)(v9 + 66))
    v11 = *(_DWORD *)(v9 + 228);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__210_metadata__setUpOffset(a1, a2, a9, (uint64_t)a3, a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__210_metadata__setUpOffset(_DWORD *a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v12 = (a7 + 24 * *(unsigned __int8 *)(v10 + a6 + 5) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned int *)(v12 + 8);
  if ((_DWORD)v13 != *a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutPrivateNameSlow(a3, (uint64_t)a1, a2, (JSC::Structure *)v13, a5, a6, v12, a8, a9);
  a5 = *(_QWORD *)v12;
  if (*(_QWORD *)v12 != a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutPrivateNameSlow(a3, (uint64_t)a1, a2, (JSC::Structure *)v13, a5, a6, v12, a8, a9);
  v15 = *(unsigned int *)(v12 + 16);
  if (!(_DWORD)v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__212_writeBarrierOnOperandWithReload__writeBarrierDone((uint64_t)a1, v15, v13, a5, a6, v12);
  *a1 = v15;
  v16 = *(char *)(v10 + a6 + 1);
  if (v16 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__211_load__done((uint64_t)a1, v16, *(_QWORD *)(v11 + 8 * v16), a5, a6, v12);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__211_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__211_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__211_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__211_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if ((a3 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__212_writeBarrierOnOperandWithReload__writeBarrierDone(a1, a2, a3, a4, a5, a6);
  __dmb(0xFu);
  if (*(_BYTE *)(a3 + 7))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__212_writeBarrierOnOperandWithReload__writeBarrierDone(a1, a2, a3, a4, a5, a6);
  v10 = llint_write_barrier_slow(v8, a3);
  v14 = *(unsigned __int16 *)(v6 + 66);
  if (!*(_WORD *)(v6 + 66))
    v14 = *(_DWORD *)(v6 + 228);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__211_metadata__setUpOffset(v10, v11, v12, v13, a5, v14);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__211_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = (a6 + 24 * *(unsigned __int8 *)(v7 + a5 + 5) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(char *)(v7 + a5 + 1);
  if (v10 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__212_writeBarrierOnOperandWithReload__writeBarrierDone(*(_QWORD *)(v8 + 8 * v10), v10, a3, a4, a5, v9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__212_load__constant(a1, v10);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__212_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__212_writeBarrierOnOperandWithReload__writeBarrierDone(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__212_writeBarrierOnOperandWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(char *)(v6 + a5 + 3);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__213_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__213_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__213_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__213_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__213_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  v6 = *(_DWORD *)(a6 + 12);
  if (v6 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__213_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -v6, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__213_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__213_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__214_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__214_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__214_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__214_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__214_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__215_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__215_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__215_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__215_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__215_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__215_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__215_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__215_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutPrivateNameSlow(__n128 a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_private_name(v10, (unsigned __int8 *)(a6 + v9), a4, a1, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_put_private_name_wide16(uint64_t a1, uint64_t a2, JSC::Structure *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 2);
  if (v11 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__216_load__done(*(_QWORD *)(v10 + 8 * v11), a2, a3, v11, a6, a7, a8, a9, a4);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__216_load__constant(a1, a2, (uint64_t)a3, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__216_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__216_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__216_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutPrivateNameSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(__int16 *)(v9 + a5 + 4);
  if (v12 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__217_load__done((_DWORD *)a1, *(_QWORD *)(v11 + 8 * v12), a3, v12, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__217_load__constant(a1, a2, (uint64_t)a3, v12);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__217_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__217_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__217_load__done(_DWORD *a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a2 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutPrivateNameSlow(a9, (uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 66);
  if (!*(_WORD *)(v9 + 66))
    v11 = *(_DWORD *)(v9 + 228);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__217_metadata__setUpOffset(a1, a2, a9, (uint64_t)a3, a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__217_metadata__setUpOffset(_DWORD *a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v12 = (a7 + 24 * *(unsigned __int16 *)(v10 + a6 + 10) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned int *)(v12 + 8);
  if ((_DWORD)v13 != *a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutPrivateNameSlow(a3, (uint64_t)a1, a2, (JSC::Structure *)v13, a5, a6, v12, a8, a9);
  a5 = *(_QWORD *)v12;
  if (*(_QWORD *)v12 != a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutPrivateNameSlow(a3, (uint64_t)a1, a2, (JSC::Structure *)v13, a5, a6, v12, a8, a9);
  v15 = *(unsigned int *)(v12 + 16);
  if (!(_DWORD)v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutNotTransition((uint64_t)a1, v15, v13, a5, a6, v12);
  *a1 = v15;
  v16 = *(__int16 *)(v10 + a6 + 2);
  if (v16 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__218_load__done((uint64_t)a1, v16, *(_QWORD *)(v11 + 8 * v16), a5, a6, v12);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__218_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__218_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__218_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__218_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if ((a3 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutNotTransition(a1, a2, a3, a4, a5, a6);
  __dmb(0xFu);
  if (*(_BYTE *)(a3 + 7))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutNotTransition(a1, a2, a3, a4, a5, a6);
  v10 = llint_write_barrier_slow(v8, a3);
  v14 = *(unsigned __int16 *)(v6 + 66);
  if (!*(_WORD *)(v6 + 66))
    v14 = *(_DWORD *)(v6 + 228);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__218_metadata__setUpOffset(v10, v11, v12, v13, a5, v14);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__218_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = (a6 + 24 * *(unsigned __int16 *)(v7 + a5 + 10) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(__int16 *)(v7 + a5 + 2);
  if (v10 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutNotTransition(*(_QWORD *)(v8 + 8 * v10), v10, a3, a4, a5, v9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__219_load__constant(a1, v10);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__219_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutNotTransition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutNotTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(__int16 *)(v6 + a5 + 6);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__220_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__220_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__220_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__220_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__220_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  v6 = *(_DWORD *)(a6 + 12);
  if (v6 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__220_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -v6, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__220_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__220_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__221_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__221_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__221_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__221_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__221_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__222_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__222_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__222_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__222_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__222_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__222_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__222_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__222_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__222_fn__opPutPrivateNameSlow(__n128 a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_private_name(v10, (unsigned __int8 *)(a6 + v9), a4, a1, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_put_private_name_wide32(uint64_t a1, uint64_t a2, JSC::Structure *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 2);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__223_load__done(*(_QWORD *)(v10 + 8 * v11), a2, a3, v11, a6, a7, a8, a9, a4);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__223_load__constant(a1, a2, (uint64_t)a3, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__223_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__223_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__223_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutPrivateNameSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(int *)(v9 + a5 + 6);
  if (v12 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__224_load__done((_DWORD *)a1, *(_QWORD *)(v11 + 8 * v12), a3, v12, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__224_load__constant(a1, a2, (uint64_t)a3, v12);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__224_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__224_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__224_load__done(_DWORD *a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a2 & v10) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutPrivateNameSlow(a9, (uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 66);
  if (!*(_WORD *)(v9 + 66))
    v11 = *(_DWORD *)(v9 + 228);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__224_metadata__setUpOffset(a1, a2, a9, (uint64_t)a3, a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__224_metadata__setUpOffset(_DWORD *a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v12 = ((a7 + 24 * *(_DWORD *)(v10 + a6 + 18)) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned int *)(v12 + 8);
  if ((_DWORD)v13 != *a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutPrivateNameSlow(a3, (uint64_t)a1, a2, (JSC::Structure *)v13, a5, a6, v12, a8, a9);
  a5 = *(_QWORD *)v12;
  if (*(_QWORD *)v12 != a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutPrivateNameSlow(a3, (uint64_t)a1, a2, (JSC::Structure *)v13, a5, a6, v12, a8, a9);
  v15 = *(unsigned int *)(v12 + 16);
  if (!(_DWORD)v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutNotTransition((uint64_t)a1, v15, v13, a5, a6, v12);
  *a1 = v15;
  v16 = *(int *)(v10 + a6 + 2);
  if (v16 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__225_load__done((uint64_t)a1, v16, *(_QWORD *)(v11 + 8 * v16), a5, a6, v12);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__225_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__225_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__225_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__225_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if ((a3 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutNotTransition(a1, a2, a3, a4, a5, a6);
  __dmb(0xFu);
  if (*(_BYTE *)(a3 + 7))
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutNotTransition(a1, a2, a3, a4, a5, a6);
  v10 = llint_write_barrier_slow(v8, a3);
  v14 = *(unsigned __int16 *)(v6 + 66);
  if (!*(_WORD *)(v6 + 66))
    v14 = *(_DWORD *)(v6 + 228);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__225_metadata__setUpOffset(v10, v11, v12, v13, a5, v14);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__metadata__225_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = ((a6 + 24 * *(_DWORD *)(v7 + a5 + 18)) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(int *)(v7 + a5 + 2);
  if (v10 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutNotTransition(*(_QWORD *)(v8 + 8 * v10), v10, a3, a4, a5, v9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__226_load__constant(a1, v10);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperandWithReload__writeBarrierOnCellWithReload__skipIfIsRememberedOrInEden__slowPath__reloadAfterSlowPath__loadConstantOrVariable__size__k__226_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutNotTransition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutNotTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(int *)(v6 + a5 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__227_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__227_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__227_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__227_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__227_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  v6 = *(_DWORD *)(a6 + 12);
  if (v6 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__227_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -v6, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__227_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__227_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__228_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__228_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__228_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__228_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__228_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__229_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__229_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__229_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__229_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__229_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__229_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__229_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__229_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__229_fn__opPutPrivateNameSlow(__n128 a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_private_name(v10, (unsigned __int8 *)(a6 + v9), a4, a1, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_set_private_brand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 1);
  if (v7 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__230_load__done(*(_QWORD *)(v6 + 8 * v7), a2, a3, v7, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__230_load__constant(a1, a2, a3, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__230_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__230_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__230_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opSetPrivateBrandSlow(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 2);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__231_load__done((_DWORD *)a1, *(_QWORD *)(v7 + 8 * v8), a3, v8, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__231_load__constant(a1, a2, a3, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__231_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__231_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__231_load__done(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  if ((a2 & v6) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opSetPrivateBrandSlow((uint64_t)a1, a2, a3, a4, a5);
  v7 = *(unsigned __int16 *)(v5 + 10);
  if (!*(_WORD *)(v5 + 10))
    v7 = *(_DWORD *)(v5 + 116);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__231_metadata__setUpOffset(a1, a2, a3, a4, a5, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__231_metadata__setUpOffset(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v12;

  v9 = (unsigned int *)((a6 + 16 * *(unsigned __int8 *)(v7 + a5 + 3) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  if ((_DWORD)v10 != *a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opSetPrivateBrandSlow((uint64_t)a1, a2, v10, a4, a5);
  a4 = *((_QWORD *)v9 + 1);
  if (a4 != a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opSetPrivateBrandSlow((uint64_t)a1, a2, v10, a4, a5);
  *a1 = v9[1];
  v12 = *(char *)(v7 + a5 + 1);
  if (v12 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__232_load__done((uint64_t)a1, v12, *(_QWORD *)(v8 + 8 * v12), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__232_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__232_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__232_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__232_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__232_writeBarrierOnOperandWithReload__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__232_writeBarrierOnOperandWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opSetPrivateBrandSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_set_private_brand(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 4)]();
}

uint64_t llint_op_set_private_brand_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 2);
  if (v7 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__233_load__done(*(_QWORD *)(v6 + 8 * v7), a2, a3, v7, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__233_load__constant(a1, a2, a3, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__233_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__233_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__233_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__235_fn__opSetPrivateBrandSlow(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 4);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__234_load__done((_DWORD *)a1, *(_QWORD *)(v7 + 8 * v8), a3, v8, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__234_load__constant(a1, a2, a3, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__234_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__234_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__234_load__done(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  if ((a2 & v6) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__235_fn__opSetPrivateBrandSlow((uint64_t)a1, a2, a3, a4, a5);
  v7 = *(unsigned __int16 *)(v5 + 10);
  if (!*(_WORD *)(v5 + 10))
    v7 = *(_DWORD *)(v5 + 116);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__234_metadata__setUpOffset(a1, a2, a3, a4, a5, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__234_metadata__setUpOffset(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v12;

  v9 = (unsigned int *)((a6 + 16 * *(unsigned __int16 *)(v7 + a5 + 6) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  if ((_DWORD)v10 != *a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__235_fn__opSetPrivateBrandSlow((uint64_t)a1, a2, v10, a4, a5);
  a4 = *((_QWORD *)v9 + 1);
  if (a4 != a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__235_fn__opSetPrivateBrandSlow((uint64_t)a1, a2, v10, a4, a5);
  *a1 = v9[1];
  v12 = *(__int16 *)(v7 + a5 + 2);
  if (v12 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__235_load__done((uint64_t)a1, v12, *(_QWORD *)(v8 + 8 * v12), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__235_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__235_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__235_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__235_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__235_writeBarrierOnOperandWithReload__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__235_writeBarrierOnOperandWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__235_fn__opSetPrivateBrandSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_set_private_brand(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 8)]();
}

uint64_t llint_op_set_private_brand_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 2);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__236_load__done(*(_QWORD *)(v6 + 8 * v7), a2, a3, v7, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__236_load__constant(a1, a2, a3, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__236_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__236_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__236_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__238_fn__opSetPrivateBrandSlow(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 6);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__237_load__done((_DWORD *)a1, *(_QWORD *)(v7 + 8 * v8), a3, v8, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__237_load__constant(a1, a2, a3, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__237_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__237_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__237_load__done(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  if ((a2 & v6) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__238_fn__opSetPrivateBrandSlow((uint64_t)a1, a2, a3, a4, a5);
  v7 = *(unsigned __int16 *)(v5 + 10);
  if (!*(_WORD *)(v5 + 10))
    v7 = *(_DWORD *)(v5 + 116);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__237_metadata__setUpOffset(a1, a2, a3, a4, a5, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__237_metadata__setUpOffset(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v12;

  v9 = (unsigned int *)(((a6 + 16 * *(_DWORD *)(v7 + a5 + 10)) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  if ((_DWORD)v10 != *a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__238_fn__opSetPrivateBrandSlow((uint64_t)a1, a2, v10, a4, a5);
  a4 = *((_QWORD *)v9 + 1);
  if (a4 != a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__238_fn__opSetPrivateBrandSlow((uint64_t)a1, a2, v10, a4, a5);
  *a1 = v9[1];
  v12 = *(int *)(v7 + a5 + 2);
  if (v12 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__238_load__done((uint64_t)a1, v12, *(_QWORD *)(v8 + 8 * v12), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__238_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__238_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__238_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__238_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__238_writeBarrierOnOperandWithReload__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperand__238_writeBarrierOnOperandWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__238_fn__opSetPrivateBrandSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_set_private_brand(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 14)]();
}

uint64_t llint_op_check_private_brand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 12);
  if (!*(_WORD *)(v8 + 12))
    v9 = *(_DWORD *)(v8 + 120);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__238_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__238_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v11 = 16 * *(unsigned __int8 *)(v9 + a5 + 3);
  v12 = (unsigned int *)(((a6 + v11) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(char *)(v9 + a5 + 1);
  if (v13 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__239_load__done(*(_QWORD *)(v10 + 8 * v13), a2, (JSC::Structure *)v11, (JSC::Symbol *)v13, a5, v12, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__239_load__constant(a1, a2, v11, v13);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__239_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__239_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__239_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opCheckPrivateBrandSlow(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  v11 = *(char *)(v8 + a5 + 2);
  if (v11 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__240_load__done((_DWORD *)a1, *(_QWORD *)(v10 + 8 * v11), a3, (JSC::Symbol *)v11, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__240_load__constant(a1, a2, (uint64_t)a3, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__240_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__240_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__240_load__done(_DWORD *a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((a2 & v9) == 0
    && (a4 = (JSC::Symbol *)*((_QWORD *)a6 + 1), a4 == (JSC::Symbol *)a2)
    && (a3 = (JSC::Structure *)*a6, (_DWORD)a3 == *a1))
  {
    return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 4)]();
  }
  else
  {
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opCheckPrivateBrandSlow((uint64_t)a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  }
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opCheckPrivateBrandSlow(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_check_private_brand(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_check_private_brand_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 12);
  if (!*(_WORD *)(v8 + 12))
    v9 = *(_DWORD *)(v8 + 120);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__240_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__240_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v11 = 16 * *(unsigned __int16 *)(v9 + a5 + 6);
  v12 = (unsigned int *)(((a6 + v11) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(__int16 *)(v9 + a5 + 2);
  if (v13 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__241_load__done(*(_QWORD *)(v10 + 8 * v13), a2, (JSC::Structure *)v11, (JSC::Symbol *)v13, a5, v12, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__241_load__constant(a1, a2, v11, v13);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__241_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__241_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__241_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__242_fn__opCheckPrivateBrandSlow(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  v11 = *(__int16 *)(v8 + a5 + 4);
  if (v11 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__242_load__done((_DWORD *)a1, *(_QWORD *)(v10 + 8 * v11), a3, (JSC::Symbol *)v11, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__242_load__constant(a1, a2, (uint64_t)a3, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__242_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__242_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__242_load__done(_DWORD *a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((a2 & v9) == 0
    && (a4 = (JSC::Symbol *)*((_QWORD *)a6 + 1), a4 == (JSC::Symbol *)a2)
    && (a3 = (JSC::Structure *)*a6, (_DWORD)a3 == *a1))
  {
    return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 8)]();
  }
  else
  {
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__242_fn__opCheckPrivateBrandSlow((uint64_t)a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  }
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__242_fn__opCheckPrivateBrandSlow(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_check_private_brand(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_check_private_brand_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 12);
  if (!*(_WORD *)(v8 + 12))
    v9 = *(_DWORD *)(v8 + 120);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__242_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__242_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v11 = (16 * *(_DWORD *)(v9 + a5 + 10));
  v12 = (unsigned int *)(((a6 + v11) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = *(int *)(v9 + a5 + 2);
  if (v13 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__243_load__done(*(_QWORD *)(v10 + 8 * v13), a2, (JSC::Structure *)v11, (JSC::Symbol *)v13, a5, v12, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__243_load__constant(a1, a2, v11, v13);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__243_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__243_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__243_load__done(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__244_fn__opCheckPrivateBrandSlow(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  v11 = *(int *)(v8 + a5 + 6);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__244_load__done((_DWORD *)a1, *(_QWORD *)(v10 + 8 * v11), a3, (JSC::Symbol *)v11, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__244_load__constant(a1, a2, (uint64_t)a3, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__244_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__244_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__244_load__done(_DWORD *a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((a2 & v9) == 0
    && (a4 = (JSC::Symbol *)*((_QWORD *)a6 + 1), a4 == (JSC::Symbol *)a2)
    && (a3 = (JSC::Structure *)*a6, (_DWORD)a3 == *a1))
  {
    return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 14)]();
  }
  else
  {
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__244_fn__opCheckPrivateBrandSlow((uint64_t)a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  }
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__244_fn__opCheckPrivateBrandSlow(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_check_private_brand(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_put_by_val(__n128 a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 1);
  if (v11 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__245_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a4, a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__245_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__245_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__245_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__245_load__done(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a2 & v10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValSlow(a9.n128_f64[0], a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 70);
  if (!*(_WORD *)(v9 + 70))
    v11 = *(_DWORD *)(v9 + 236);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__245_metadata__setUpOffset(a9, a1, a2, a2, a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__245_metadata__setUpOffset(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;

  v12 = (_DWORD *)((a7 + 12 * *(unsigned __int8 *)(v10 + a6 + 5) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *(_DWORD *)a4;
  v13 = (const WTF::StringImpl *)*(unsigned __int8 *)(a4 + 4);
  v14 = *(char *)(v10 + a6 + 2);
  if (v14 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__246_load__done(v14, a3, v13, *(_QWORD *)(v11 + 8 * v14), a6, (unint64_t)v12, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__246_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__246_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__246_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__246_load__done(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  const WTF::StringImpl *v11;

  if (a4 < v9)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValSlow(a9.n128_f64[0], a1, a2, a3, a4, a5, a6, a7, a8);
  a4 = (int)a4;
  a1 = *(_QWORD *)(a2 + 8);
  if ((a3 & 0x10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValSlow(a9.n128_f64[0], a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = (const WTF::StringImpl *)(a3 & 0xE);
  if ((_DWORD)v11 != 4)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValNotInt32(a9, a1, a2, v11, (int)a4, a5, a6, a7, a8);
  if (a4 < *(_DWORD *)(a1 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeResult(a1, a2, a9.n128_f64[0], (uint64_t)v11, (int)a4, a5, a6, a7, a8);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__outOfBounds(a1, a2, (uint64_t)v11, (int)a4, a5, a6, a7, a8, a9.n128_f64[0]);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__247_load__done(a1, *(_QWORD *)(v10 + 8 * v11), (const WTF::StringImpl *)v11, a5, a6, a7, a8, a9, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__247_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__247_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__247_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__247_load__done(uint64_t a1, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a2 < v10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 8 * a4) = a2;
  v13 = *(char *)(v9 + a5 + 3);
  if (v13 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__248_load__done(*(_QWORD *)(v11 + 8 * v13), v13, (uint64_t)a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__248_load__constant(a1, v13);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__248_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__248_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__248_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__249_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__249_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__249_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__249_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__249_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__249_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__249_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__249_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v10 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v10;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeResult(a1, a2, a9, v10, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValNotInt32(__n128 a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValNotDouble(a1.n128_f64[0], a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__252_contiguousPutByVal__storeResult(a2, a3, a1, (uint64_t)a4, a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__252_contiguousPutByVal__outOfBounds(a2, a3, (uint64_t)a4, a5, a6, a7, a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__252_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(char *)(v6 + a6 + 3);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__250_load__done(a1, *(_QWORD *)(v7 + 8 * v8), v8, a5, a6, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__250_load__constant(a1, a2, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__250_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__250_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__250_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  unint64_t v6;

  if (a2 >= v6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__ready(a1, (double)(int)a2, a2, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__notInt(a6, a1, a2);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__notInt(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  a1.n128_u64[0] = a3 + v3;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__ready(a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__ready(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(double *)(a1 + 8 * a5) = a2;
  v8 = *(char *)(v6 + a6 + 3);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__251_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a4, a5, a6);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__251_load__constant(a1, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__251_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__251_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__251_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__252_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__252_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__252_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__252_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__252_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__252_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__252_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__252_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__252_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v8;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v8 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v8;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__252_contiguousPutByVal__storeResult(a1, a2, a7, v8, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValNotDouble(double a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 8)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValNotContiguous(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__255_contiguousPutByVal__storeResult(a2, a3, (uint64_t)a4, a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__255_contiguousPutByVal__outOfBounds(a2, a3, (uint64_t)a4, a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__255_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__253_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__253_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__253_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__253_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__253_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4) = a2;
  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__254_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__254_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__254_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__254_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__254_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__255_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__255_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__255_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__255_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__255_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__255_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__255_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__255_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__255_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v7 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v7;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__255_contiguousPutByVal__storeResult(a1, a2, v7, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValNotContiguous(double a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValSlow(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 >= *(_DWORD *)(a2 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValOutOfBounds(a2, a3, (uint64_t)a4, a5, a6, a7);
  if (*(_QWORD *)(a2 + 8 * a5 + 16))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValArrayStorageStoreResult(a2, a3, (uint64_t)a4, a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValArrayStorageEmpty(a2, a3, (uint64_t)a4, a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValArrayStorageStoreResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__256_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__256_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__256_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__256_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__256_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4 + 16) = a2;
  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__257_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__257_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__257_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__257_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__257_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__258_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__258_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__258_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__258_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__258_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__258_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__258_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__258_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValArrayStorageEmpty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = *(_DWORD *)(a6 + 4) | 1u;
  *(_DWORD *)(a6 + 4) = v6;
  ++*(_DWORD *)(a1 + 12);
  if (a4 >= *(_DWORD *)(a1 - 8))
  {
    a2 = (a4 + 1);
    *(_DWORD *)(a1 - 8) = a2;
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValArrayStorageStoreResult(a1, a2, v6, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a6 + 4) |= 2u;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValSlow();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opPutByValSlow(double a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_by_val(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t op_put_by_val_return_location()
{
  uint64_t v0;
  uint64_t v1;

  return g_opcodeMap[*(unsigned __int8 *)(v0 + *(unsigned int *)(v1 + 36) + 6)]();
}

uint64_t llint_op_put_by_val_wide16(__n128 a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 2);
  if (v11 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__259_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a4, a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__259_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__259_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__259_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__259_load__done(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a2 & v10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValSlow(a9.n128_f64[0], a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 70);
  if (!*(_WORD *)(v9 + 70))
    v11 = *(_DWORD *)(v9 + 236);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__259_metadata__setUpOffset(a9, a1, a2, a2, a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__259_metadata__setUpOffset(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;

  v12 = (_DWORD *)((a7 + 12 * *(unsigned __int16 *)(v10 + a6 + 10) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *(_DWORD *)a4;
  v13 = (const WTF::StringImpl *)*(unsigned __int8 *)(a4 + 4);
  v14 = *(__int16 *)(v10 + a6 + 4);
  if (v14 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__260_load__done(v14, a3, v13, *(_QWORD *)(v11 + 8 * v14), a6, (unint64_t)v12, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__260_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__260_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__260_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__260_load__done(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  const WTF::StringImpl *v11;

  if (a4 < v9)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValSlow(a9.n128_f64[0], a1, a2, a3, a4, a5, a6, a7, a8);
  a4 = (int)a4;
  a1 = *(_QWORD *)(a2 + 8);
  if ((a3 & 0x10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValSlow(a9.n128_f64[0], a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = (const WTF::StringImpl *)(a3 & 0xE);
  if ((_DWORD)v11 != 4)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValNotInt32(a9, a1, a2, v11, (int)a4, a5, a6, a7, a8);
  if (a4 < *(_DWORD *)(a1 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__263_contiguousPutByVal__storeResult(a1, a2, a9.n128_f64[0], (uint64_t)v11, (int)a4, a5, a6, a7, a8);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__263_contiguousPutByVal__outOfBounds(a1, a2, (uint64_t)v11, (int)a4, a5, a6, a7, a8, a9.n128_f64[0]);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__263_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__261_load__done(a1, *(_QWORD *)(v10 + 8 * v11), (const WTF::StringImpl *)v11, a5, a6, a7, a8, a9, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__261_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__261_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__261_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__261_load__done(uint64_t a1, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a2 < v10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 8 * a4) = a2;
  v13 = *(__int16 *)(v9 + a5 + 6);
  if (v13 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__262_load__done(*(_QWORD *)(v11 + 8 * v13), v13, (uint64_t)a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__262_load__constant(a1, v13);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__262_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__262_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__262_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__263_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__263_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__263_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__263_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__263_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__263_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__263_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__263_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__263_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v10 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v10;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__263_contiguousPutByVal__storeResult(a1, a2, a9, v10, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValNotInt32(__n128 a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValNotDouble(a1.n128_f64[0], a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__266_contiguousPutByVal__storeResult(a2, a3, a1, (uint64_t)a4, a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__266_contiguousPutByVal__outOfBounds(a2, a3, (uint64_t)a4, a5, a6, a7, a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__266_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(__int16 *)(v6 + a6 + 6);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__264_load__done(a1, *(_QWORD *)(v7 + 8 * v8), v8, a5, a6, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__264_load__constant(a1, a2, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__264_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__264_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__264_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  unint64_t v6;

  if (a2 >= v6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__266_storeCallback__ready(a1, (double)(int)a2, a2, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__266_storeCallback__notInt(a6, a1, a2);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__266_storeCallback__notInt(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  a1.n128_u64[0] = a3 + v3;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__266_storeCallback__ready(a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__266_storeCallback__ready(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(double *)(a1 + 8 * a5) = a2;
  v8 = *(__int16 *)(v6 + a6 + 6);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__265_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a4, a5, a6);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__265_load__constant(a1, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__265_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__265_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__265_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__266_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__266_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__266_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__266_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__266_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__266_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__266_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__266_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__266_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v8;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v8 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v8;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__266_contiguousPutByVal__storeResult(a1, a2, a7, v8, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValNotDouble(double a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 8)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValNotContiguous(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__269_contiguousPutByVal__storeResult(a2, a3, (uint64_t)a4, a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__269_contiguousPutByVal__outOfBounds(a2, a3, (uint64_t)a4, a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__269_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__267_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__267_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__267_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__267_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__267_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4) = a2;
  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__268_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__268_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__268_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__268_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__268_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__269_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__269_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__269_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__269_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__269_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__269_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__269_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__269_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__269_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v7 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v7;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__269_contiguousPutByVal__storeResult(a1, a2, v7, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValNotContiguous(double a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValSlow(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 >= *(_DWORD *)(a2 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValOutOfBounds(a2, a3, (uint64_t)a4, a5, a6, a7);
  if (*(_QWORD *)(a2 + 8 * a5 + 16))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValArrayStorageStoreResult(a2, a3, (uint64_t)a4, a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValArrayStorageEmpty(a2, a3, (uint64_t)a4, a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValArrayStorageStoreResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__270_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__270_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__270_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__270_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__270_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4 + 16) = a2;
  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__271_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__271_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__271_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__271_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__271_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__272_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__272_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__272_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__272_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__272_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__272_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__272_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__272_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValArrayStorageEmpty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = *(_DWORD *)(a6 + 4) | 1u;
  *(_DWORD *)(a6 + 4) = v6;
  ++*(_DWORD *)(a1 + 12);
  if (a4 >= *(_DWORD *)(a1 - 8))
  {
    a2 = (a4 + 1);
    *(_DWORD *)(a1 - 8) = a2;
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValArrayStorageStoreResult(a1, a2, v6, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a6 + 4) |= 2u;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValSlow();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__272_fn__opPutByValSlow(double a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_by_val(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t op_put_by_val_return_location_wide16()
{
  uint64_t v0;
  uint64_t v1;

  return g_opcodeMap[*(unsigned __int8 *)(v0 + *(unsigned int *)(v1 + 36) + 12)]();
}

uint64_t llint_op_put_by_val_wide32(__n128 a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 2);
  if (v11 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__273_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a4, a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__273_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__273_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__273_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__273_load__done(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a2 & v10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValSlow(a9.n128_f64[0], a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 70);
  if (!*(_WORD *)(v9 + 70))
    v11 = *(_DWORD *)(v9 + 236);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__273_metadata__setUpOffset(a9, a1, a2, a2, a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__273_metadata__setUpOffset(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;

  v12 = (_DWORD *)(((a7 + 12 * *(_DWORD *)(v10 + a6 + 18)) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *(_DWORD *)a4;
  v13 = (const WTF::StringImpl *)*(unsigned __int8 *)(a4 + 4);
  v14 = *(int *)(v10 + a6 + 6);
  if (v14 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__274_load__done(v14, a3, v13, *(_QWORD *)(v11 + 8 * v14), a6, (unint64_t)v12, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__274_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__274_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__274_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__274_load__done(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  const WTF::StringImpl *v11;

  if (a4 < v9)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValSlow(a9.n128_f64[0], a1, a2, a3, a4, a5, a6, a7, a8);
  a4 = (int)a4;
  a1 = *(_QWORD *)(a2 + 8);
  if ((a3 & 0x10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValSlow(a9.n128_f64[0], a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = (const WTF::StringImpl *)(a3 & 0xE);
  if ((_DWORD)v11 != 4)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValNotInt32(a9, a1, a2, v11, (int)a4, a5, a6, a7, a8);
  if (a4 < *(_DWORD *)(a1 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__277_contiguousPutByVal__storeResult(a1, a2, a9.n128_f64[0], (uint64_t)v11, (int)a4, a5, a6, a7, a8);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__277_contiguousPutByVal__outOfBounds(a1, a2, (uint64_t)v11, (int)a4, a5, a6, a7, a8, a9.n128_f64[0]);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__277_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__275_load__done(a1, *(_QWORD *)(v10 + 8 * v11), (const WTF::StringImpl *)v11, a5, a6, a7, a8, a9, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__275_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__275_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__275_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__275_load__done(uint64_t a1, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a2 < v10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 8 * a4) = a2;
  v13 = *(int *)(v9 + a5 + 10);
  if (v13 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__276_load__done(*(_QWORD *)(v11 + 8 * v13), v13, (uint64_t)a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__276_load__constant(a1, v13);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__276_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__276_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__276_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__277_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__277_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__277_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__277_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__277_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__277_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__277_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__277_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__277_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v10 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v10;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__277_contiguousPutByVal__storeResult(a1, a2, a9, v10, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValNotInt32(__n128 a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValNotDouble(a1.n128_f64[0], a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__280_contiguousPutByVal__storeResult(a2, a3, a1, (uint64_t)a4, a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__280_contiguousPutByVal__outOfBounds(a2, a3, (uint64_t)a4, a5, a6, a7, a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__280_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(int *)(v6 + a6 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__278_load__done(a1, *(_QWORD *)(v7 + 8 * v8), v8, a5, a6, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__278_load__constant(a1, a2, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__278_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__278_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__278_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  unint64_t v6;

  if (a2 >= v6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__280_storeCallback__ready(a1, (double)(int)a2, a2, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__280_storeCallback__notInt(a6, a1, a2);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__280_storeCallback__notInt(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  a1.n128_u64[0] = a3 + v3;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__280_storeCallback__ready(a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__280_storeCallback__ready(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(double *)(a1 + 8 * a5) = a2;
  v8 = *(int *)(v6 + a6 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__279_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a4, a5, a6);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__279_load__constant(a1, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__279_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__279_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__279_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__280_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__280_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__280_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__280_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__280_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__280_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__280_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__280_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__280_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v8;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v8 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v8;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__280_contiguousPutByVal__storeResult(a1, a2, a7, v8, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValNotDouble(double a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 8)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValNotContiguous(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__283_contiguousPutByVal__storeResult(a2, a3, (uint64_t)a4, a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__283_contiguousPutByVal__outOfBounds(a2, a3, (uint64_t)a4, a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__283_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__281_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__281_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__281_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__281_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__281_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4) = a2;
  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__282_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__282_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__282_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__282_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__282_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__283_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__283_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__283_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__283_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__283_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__283_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__283_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__283_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__283_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v7 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v7;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__283_contiguousPutByVal__storeResult(a1, a2, v7, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValNotContiguous(double a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValSlow(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 >= *(_DWORD *)(a2 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValOutOfBounds(a2, a3, (uint64_t)a4, a5, a6, a7);
  if (*(_QWORD *)(a2 + 8 * a5 + 16))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValArrayStorageStoreResult(a2, a3, (uint64_t)a4, a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValArrayStorageEmpty(a2, a3, (uint64_t)a4, a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValArrayStorageStoreResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__284_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__284_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__284_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__284_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__284_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4 + 16) = a2;
  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__285_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__285_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__285_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__285_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__285_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__286_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__286_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__286_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__286_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__286_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__286_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__286_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__286_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValArrayStorageEmpty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = *(_DWORD *)(a6 + 4) | 1u;
  *(_DWORD *)(a6 + 4) = v6;
  ++*(_DWORD *)(a1 + 12);
  if (a4 >= *(_DWORD *)(a1 - 8))
  {
    a2 = (a4 + 1);
    *(_DWORD *)(a1 - 8) = a2;
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValArrayStorageStoreResult(a1, a2, v6, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a6 + 4) |= 2u;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValSlow();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__286_fn__opPutByValSlow(double a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_by_val(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t op_put_by_val_return_location_wide32()
{
  uint64_t v0;
  uint64_t v1;

  return g_opcodeMap[*(unsigned __int8 *)(v0 + *(unsigned int *)(v1 + 36) + 22)]();
}

uint64_t llint_op_put_by_val_direct(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 1);
  if (v11 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__287_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a4, a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__287_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__287_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__287_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__287_load__done(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a2 & v10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 72);
  if (!*(_WORD *)(v9 + 72))
    v11 = *(_DWORD *)(v9 + 240);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__287_metadata__setUpOffset(a9, a1, a2, a2, (uint64_t)a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__287_metadata__setUpOffset(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (_DWORD *)((a7 + 12 * *(unsigned __int8 *)(v10 + a6 + 5) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *(_DWORD *)a4;
  v13 = *(unsigned __int8 *)(a4 + 4);
  v14 = *(char *)(v10 + a6 + 2);
  if (v14 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__288_load__done(v14, a3, v13, *(const JSC::PropertyTable **)(v11 + 8 * v14), a6, (unint64_t)v12, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__288_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__288_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__288_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__288_load__done(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  uint64_t v11;

  if ((unint64_t)a4 < v9)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a4 = (const JSC::PropertyTable *)(int)a4;
  a1 = *(_QWORD *)(a2 + 8);
  if ((a3 & 0x10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = a3 & 0xE;
  if ((_DWORD)v11 != 4)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValNotInt32(a9, a1, a2, v11, (const JSC::PropertyTable *)(int)a4, a5, a6, a7, a8);
  if (a4 < *(_DWORD *)(a1 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__291_contiguousPutByVal__storeResult(a1, a2, a9, v11, (int)a4, a5, a6, a7, a8);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__291_contiguousPutByVal__outOfBounds(a1, a2, v11, (int)a4, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__291_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__289_load__done(a1, *(_QWORD *)(v10 + 8 * v11), v11, a5, a6, a7, a8, a9, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__289_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__289_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__289_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__289_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a2 < v10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValSlow(a9, a1, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 8 * a4) = a2;
  v13 = *(char *)(v9 + a5 + 3);
  if (v13 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__290_load__done(*(_QWORD *)(v11 + 8 * v13), v13, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__290_load__constant(a1, v13);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__290_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__290_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__290_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__291_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__291_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__291_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__291_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__291_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__291_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__291_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__291_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__291_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v10 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v10;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__291_contiguousPutByVal__storeResult(a1, a2, a9, v10, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValNotInt32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValNotDouble(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__294_contiguousPutByVal__storeResult(a2, a3, a1, a4, (uint64_t)a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__294_contiguousPutByVal__outOfBounds(a2, a3, a4, (uint64_t)a5, a6, a7, a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__294_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(char *)(v6 + a6 + 3);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__292_load__done(a1, *(_QWORD *)(v7 + 8 * v8), v8, a5, a6, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__292_load__constant(a1, a2, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__292_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__292_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__292_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  unint64_t v6;

  if (a2 >= v6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__294_storeCallback__ready(a1, (double)(int)a2, a2, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__294_storeCallback__notInt(a6, a1, a2);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__294_storeCallback__notInt(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  a1.n128_u64[0] = a3 + v3;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__294_storeCallback__ready(a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__294_storeCallback__ready(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(double *)(a1 + 8 * a5) = a2;
  v8 = *(char *)(v6 + a6 + 3);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__293_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a4, a5, a6);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__293_load__constant(a1, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__293_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__293_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__293_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__294_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__294_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__294_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__294_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__294_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__294_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__294_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__294_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__294_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v8;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v8 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v8;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__294_contiguousPutByVal__storeResult(a1, a2, a7, v8, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValNotDouble(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 8)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValNotContiguous(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__297_contiguousPutByVal__storeResult(a2, a3, a4, (uint64_t)a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__297_contiguousPutByVal__outOfBounds(a2, a3, a4, (uint64_t)a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__297_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__295_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__295_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__295_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__295_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__295_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4) = a2;
  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__296_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__296_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__296_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__296_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__296_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__297_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__297_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__297_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__297_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__297_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__297_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__297_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__297_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__297_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v7 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v7;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__297_contiguousPutByVal__storeResult(a1, a2, v7, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValNotContiguous(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValSlow(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 >= *(_DWORD *)(a2 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValOutOfBounds(a2, a3, a4, (uint64_t)a5, a6, a7);
  if (*(_QWORD *)(a2 + 8 * (_QWORD)a5 + 16))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValArrayStorageStoreResult(a2, a3, a4, (uint64_t)a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValArrayStorageEmpty(a2, a3, a4, (uint64_t)a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValArrayStorageStoreResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__298_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__298_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__298_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__298_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__298_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4 + 16) = a2;
  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__299_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__299_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__299_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__299_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__299_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__300_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__300_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__300_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__300_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__300_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__300_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__300_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__300_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValArrayStorageEmpty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = *(_DWORD *)(a6 + 4) | 1u;
  *(_DWORD *)(a6 + 4) = v6;
  ++*(_DWORD *)(a1 + 12);
  if (a4 >= *(_DWORD *)(a1 - 8))
  {
    a2 = (a4 + 1);
    *(_DWORD *)(a1 - 8) = a2;
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValArrayStorageStoreResult(a1, a2, v6, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a6 + 4) |= 2u;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValSlow();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__300_fn__opPutByValSlow(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_by_val_direct(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_put_by_val_direct_wide16(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 2);
  if (v11 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__301_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a4, a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__301_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__301_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__301_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__301_load__done(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a2 & v10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 72);
  if (!*(_WORD *)(v9 + 72))
    v11 = *(_DWORD *)(v9 + 240);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__301_metadata__setUpOffset(a9, a1, a2, a2, (uint64_t)a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__301_metadata__setUpOffset(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (_DWORD *)((a7 + 12 * *(unsigned __int16 *)(v10 + a6 + 10) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *(_DWORD *)a4;
  v13 = *(unsigned __int8 *)(a4 + 4);
  v14 = *(__int16 *)(v10 + a6 + 4);
  if (v14 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__302_load__done(v14, a3, v13, *(const JSC::PropertyTable **)(v11 + 8 * v14), a6, (unint64_t)v12, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__302_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__302_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__302_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__302_load__done(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  uint64_t v11;

  if ((unint64_t)a4 < v9)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a4 = (const JSC::PropertyTable *)(int)a4;
  a1 = *(_QWORD *)(a2 + 8);
  if ((a3 & 0x10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = a3 & 0xE;
  if ((_DWORD)v11 != 4)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValNotInt32(a9, a1, a2, v11, (const JSC::PropertyTable *)(int)a4, a5, a6, a7, a8);
  if (a4 < *(_DWORD *)(a1 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__305_contiguousPutByVal__storeResult(a1, a2, a9, v11, (int)a4, a5, a6, a7, a8);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__305_contiguousPutByVal__outOfBounds(a1, a2, v11, (int)a4, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__305_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__303_load__done(a1, *(_QWORD *)(v10 + 8 * v11), v11, a5, a6, a7, a8, a9, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__303_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__303_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__303_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__303_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a2 < v10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValSlow(a9, a1, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 8 * a4) = a2;
  v13 = *(__int16 *)(v9 + a5 + 6);
  if (v13 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__304_load__done(*(_QWORD *)(v11 + 8 * v13), v13, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__304_load__constant(a1, v13);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__304_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__304_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__304_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__305_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__305_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__305_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__305_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__305_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__305_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__305_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__305_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__305_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v10 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v10;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__305_contiguousPutByVal__storeResult(a1, a2, a9, v10, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValNotInt32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValNotDouble(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__308_contiguousPutByVal__storeResult(a2, a3, a1, a4, (uint64_t)a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__308_contiguousPutByVal__outOfBounds(a2, a3, a4, (uint64_t)a5, a6, a7, a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__308_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(__int16 *)(v6 + a6 + 6);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__306_load__done(a1, *(_QWORD *)(v7 + 8 * v8), v8, a5, a6, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__306_load__constant(a1, a2, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__306_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__306_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__306_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  unint64_t v6;

  if (a2 >= v6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__308_storeCallback__ready(a1, (double)(int)a2, a2, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__308_storeCallback__notInt(a6, a1, a2);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__308_storeCallback__notInt(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  a1.n128_u64[0] = a3 + v3;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__308_storeCallback__ready(a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__308_storeCallback__ready(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(double *)(a1 + 8 * a5) = a2;
  v8 = *(__int16 *)(v6 + a6 + 6);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__307_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a4, a5, a6);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__307_load__constant(a1, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__307_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__307_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__307_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__308_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__308_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__308_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__308_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__308_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__308_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__308_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__308_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__308_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v8;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v8 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v8;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__308_contiguousPutByVal__storeResult(a1, a2, a7, v8, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValNotDouble(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 8)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValNotContiguous(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__311_contiguousPutByVal__storeResult(a2, a3, a4, (uint64_t)a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__311_contiguousPutByVal__outOfBounds(a2, a3, a4, (uint64_t)a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__311_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__309_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__309_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__309_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__309_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__309_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4) = a2;
  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__310_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__310_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__310_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__310_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__310_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__311_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__311_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__311_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__311_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__311_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__311_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__311_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__311_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__311_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v7 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v7;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__311_contiguousPutByVal__storeResult(a1, a2, v7, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValNotContiguous(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValSlow(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 >= *(_DWORD *)(a2 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValOutOfBounds(a2, a3, a4, (uint64_t)a5, a6, a7);
  if (*(_QWORD *)(a2 + 8 * (_QWORD)a5 + 16))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValArrayStorageStoreResult(a2, a3, a4, (uint64_t)a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValArrayStorageEmpty(a2, a3, a4, (uint64_t)a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValArrayStorageStoreResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__312_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__312_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__312_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__312_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__312_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4 + 16) = a2;
  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__313_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__313_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__313_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__313_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__313_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__314_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__314_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__314_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__314_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__314_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__314_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__314_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__314_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 12)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValArrayStorageEmpty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = *(_DWORD *)(a6 + 4) | 1u;
  *(_DWORD *)(a6 + 4) = v6;
  ++*(_DWORD *)(a1 + 12);
  if (a4 >= *(_DWORD *)(a1 - 8))
  {
    a2 = (a4 + 1);
    *(_DWORD *)(a1 - 8) = a2;
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValArrayStorageStoreResult(a1, a2, v6, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a6 + 4) |= 2u;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValSlow();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__314_fn__opPutByValSlow(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_by_val_direct(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_put_by_val_direct_wide32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 2);
  if (v11 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__315_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a4, a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__315_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__315_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__315_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__315_load__done(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((a2 & v10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int16 *)(v9 + 72);
  if (!*(_WORD *)(v9 + 72))
    v11 = *(_DWORD *)(v9 + 240);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__315_metadata__setUpOffset(a9, a1, a2, a2, (uint64_t)a4, a5, v11, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__315_metadata__setUpOffset(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = (_DWORD *)(((a7 + 12 * *(_DWORD *)(v10 + a6 + 18)) + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *(_DWORD *)a4;
  v13 = *(unsigned __int8 *)(a4 + 4);
  v14 = *(int *)(v10 + a6 + 6);
  if (v14 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__316_load__done(v14, a3, v13, *(const JSC::PropertyTable **)(v11 + 8 * v14), a6, (unint64_t)v12, a8, a9, a1);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__316_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__316_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__316_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableInt32__loadConstantOrVariable__size__k__316_load__done(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  uint64_t v11;

  if ((unint64_t)a4 < v9)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a4 = (const JSC::PropertyTable *)(int)a4;
  a1 = *(_QWORD *)(a2 + 8);
  if ((a3 & 0x10) != 0)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValSlow(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = a3 & 0xE;
  if ((_DWORD)v11 != 4)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValNotInt32(a9, a1, a2, v11, (const JSC::PropertyTable *)(int)a4, a5, a6, a7, a8);
  if (a4 < *(_DWORD *)(a1 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__319_contiguousPutByVal__storeResult(a1, a2, a9, v11, (int)a4, a5, a6, a7, a8);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__319_contiguousPutByVal__outOfBounds(a1, a2, v11, (int)a4, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__319_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__317_load__done(a1, *(_QWORD *)(v10 + 8 * v11), v11, a5, a6, a7, a8, a9, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__317_load__constant(a1, a2, v11);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__317_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__317_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__317_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (a2 < v10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValSlow(a9, a1, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 8 * a4) = a2;
  v13 = *(int *)(v9 + a5 + 10);
  if (v13 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__318_load__done(*(_QWORD *)(v11 + 8 * v13), v13, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__318_load__constant(a1, v13);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__318_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__318_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__318_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__319_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__319_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__319_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__319_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__319_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__319_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__319_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__319_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__319_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v10 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v10;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__319_contiguousPutByVal__storeResult(a1, a2, a9, v10, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValNotInt32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValNotDouble(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__322_contiguousPutByVal__storeResult(a2, a3, a1, a4, (uint64_t)a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__322_contiguousPutByVal__outOfBounds(a2, a3, a4, (uint64_t)a5, a6, a7, a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__322_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(int *)(v6 + a6 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__320_load__done(a1, *(_QWORD *)(v7 + 8 * v8), v8, a5, a6, a3);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__320_load__constant(a1, a2, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__320_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__320_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__320_load__done(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  unint64_t v6;

  if (a2 >= v6)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__322_storeCallback__ready(a1, (double)(int)a2, a2, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__322_storeCallback__notInt(a6, a1, a2);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__322_storeCallback__notInt(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  a1.n128_u64[0] = a3 + v3;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__322_storeCallback__ready(a1);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__322_storeCallback__ready(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(double *)(a1 + 8 * a5) = a2;
  v8 = *(int *)(v6 + a6 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__321_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a4, a5, a6);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__321_load__constant(a1, v8);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__321_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__321_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__321_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__322_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__322_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__322_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__322_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__322_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__322_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__322_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__322_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__322_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v8;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v8 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v8;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__322_contiguousPutByVal__storeResult(a1, a2, a7, v8, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValNotDouble(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 8)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValNotContiguous(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 < *(_DWORD *)(a2 - 8))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__325_contiguousPutByVal__storeResult(a2, a3, a4, (uint64_t)a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__325_contiguousPutByVal__outOfBounds(a2, a3, a4, (uint64_t)a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__325_contiguousPutByVal__storeResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__323_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__323_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__323_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__323_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__loadConstantOrVariable__size__k__323_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4) = a2;
  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__324_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__324_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__324_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__324_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__324_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__325_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__325_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__325_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__325_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__325_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__325_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__325_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__contiguousPutByVal__storeCallback__325_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__325_contiguousPutByVal__outOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if (a4 >= *(_DWORD *)(a1 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValOutOfBounds(a1, a2, a3, a4, a5, a6);
  *(_DWORD *)(a6 + 4) |= 1u;
  v7 = (a4 + 1);
  *(_DWORD *)(a1 - 8) = v7;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__325_contiguousPutByVal__storeResult(a1, a2, v7, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValNotContiguous(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 != 10)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValSlow(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a5 >= *(_DWORD *)(a2 - 4))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValOutOfBounds(a2, a3, a4, (uint64_t)a5, a6, a7);
  if (*(_QWORD *)(a2 + 8 * (_QWORD)a5 + 16))
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValArrayStorageStoreResult(a2, a3, a4, (uint64_t)a5, a6);
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValArrayStorageEmpty(a2, a3, a4, (uint64_t)a5, a6, a7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValArrayStorageStoreResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__326_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__326_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__326_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__326_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__326_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a4 + 16) = a2;
  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__327_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__327_load__constant(a1, v7);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__327_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__327_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__327_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__328_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__328_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__328_load__constant();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__328_load__constant()
{
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__328_load__done();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__328_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__328_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__328_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 22)]();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValArrayStorageEmpty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = *(_DWORD *)(a6 + 4) | 1u;
  *(_DWORD *)(a6 + 4) = v6;
  ++*(_DWORD *)(a1 + 12);
  if (a4 >= *(_DWORD *)(a1 - 8))
  {
    a2 = (a4 + 1);
    *(_DWORD *)(a1 - 8) = a2;
  }
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValArrayStorageStoreResult(a1, a2, v6, a4, a5);
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a6 + 4) |= 2u;
  return jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValSlow();
}

uint64_t jsc_llint_putByValOp__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__328_fn__opPutByValSlow(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_by_val_direct(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_jeq_null(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 1));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__immediate(v8, a2, a3, a4, a5);
  v9 = 16 * *(unsigned int *)v8;
  if ((*(_BYTE *)(v8 + 6) & 1) != 0 && (v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), *(_QWORD *)(v9 + 40) == v8))
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__target(v8, a2, v9, a4, a5);
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__cellHandler__notMasqueradesAsUndefined(v8, a2, v9, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__cellHandler__notMasqueradesAsUndefined(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(char *)(v5 + a5 + 2);
  if (*(_BYTE *)(v5 + a5 + 2))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__328_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__328_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__immediate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & 0xFFFFFFFFFFFFFFF7) == 2)
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__target(2, a2, a3, a4, a5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_jeq_null_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 2));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__329_impl__immediate(v8, a2, a3, a4, a5);
  v9 = 16 * *(unsigned int *)v8;
  if ((*(_BYTE *)(v8 + 6) & 1) != 0 && (v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), *(_QWORD *)(v9 + 40) == v8))
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__329_impl__target(v8, a2, v9, a4, a5);
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__328_cellHandler__notMasqueradesAsUndefined(v8, a2, v9, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__328_cellHandler__notMasqueradesAsUndefined(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__329_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(__int16 *)(v5 + a5 + 4);
  if (*(_WORD *)(v5 + a5 + 4))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__329_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__329_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__329_impl__immediate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & 0xFFFFFFFFFFFFFFF7) == 2)
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__329_impl__target(2, a2, a3, a4, a5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_jeq_null_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 2));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__330_impl__immediate(v8, a2, a3, a4, a5);
  v9 = 16 * *(unsigned int *)v8;
  if ((*(_BYTE *)(v8 + 6) & 1) != 0 && (v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), *(_QWORD *)(v9 + 40) == v8))
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__330_impl__target(v8, a2, v9, a4, a5);
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__329_cellHandler__notMasqueradesAsUndefined(v8, a2, v9, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__329_cellHandler__notMasqueradesAsUndefined(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__330_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(int *)(v5 + a5 + 6);
  if ((_DWORD)v6)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__330_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__330_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__330_impl__immediate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & 0xFFFFFFFFFFFFFFF7) == 2)
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__330_impl__target(2, a2, a3, a4, a5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_jneq_null(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 1));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__331_impl__immediate(v8, a2, a3, a4, a5);
  v9 = 16 * *(unsigned int *)v8;
  if ((*(_BYTE *)(v8 + 6) & 1) != 0 && (v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), *(_QWORD *)(v9 + 40) == v8))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__331_impl__target(v8, a2, v9, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__331_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(char *)(v5 + a5 + 2);
  if (*(_BYTE *)(v5 + a5 + 2))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__331_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__331_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__331_impl__immediate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;

  v6 = a1 & 0xFFFFFFFFFFFFFFF7;
  if (v6 == 2)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__331_impl__target(v6, a2, a3, a4, a5);
}

uint64_t llint_op_jneq_null_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 2));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__332_impl__immediate(v8, a2, a3, a4, a5);
  v9 = 16 * *(unsigned int *)v8;
  if ((*(_BYTE *)(v8 + 6) & 1) != 0 && (v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), *(_QWORD *)(v9 + 40) == v8))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__332_impl__target(v8, a2, v9, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__332_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(__int16 *)(v5 + a5 + 4);
  if (*(_WORD *)(v5 + a5 + 4))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__332_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__332_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__332_impl__immediate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;

  v6 = a1 & 0xFFFFFFFFFFFFFFF7;
  if (v6 == 2)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__332_impl__target(v6, a2, a3, a4, a5);
}

uint64_t llint_op_jneq_null_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 2));
  if ((v8 & v6) != 0)
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__333_impl__immediate(v8, a2, a3, a4, a5);
  v9 = 16 * *(unsigned int *)v8;
  if ((*(_BYTE *)(v8 + 6) & 1) != 0 && (v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), *(_QWORD *)(v9 + 40) == v8))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__333_impl__target(v8, a2, v9, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__333_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(int *)(v5 + a5 + 6);
  if ((_DWORD)v6)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__333_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__333_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__333_impl__immediate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;

  v6 = a1 & 0xFFFFFFFFFFFFFFF7;
  if (v6 == 2)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
  else
    return jsc_llint_equalNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__333_impl__target(v6, a2, a3, a4, a5);
}

uint64_t llint_op_jundefined_or_null(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 1);
  if (v7 < 16)
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__333_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__333_load__constant(a1, v7);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__333_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__333_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__333_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & 0xFFFFFFFFFFFFFFF7) == 2)
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__334_impl__target(2, a2, a3, a4, a5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__334_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(char *)(v5 + a5 + 2);
  if (*(_BYTE *)(v5 + a5 + 2))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__334_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__334_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jundefined_or_null_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 2);
  if (v7 < 64)
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__334_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__334_load__constant(a1, v7);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__334_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__334_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__334_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & 0xFFFFFFFFFFFFFFF7) == 2)
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__335_impl__target(2, a2, a3, a4, a5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__335_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(__int16 *)(v5 + a5 + 4);
  if (*(_WORD *)(v5 + a5 + 4))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__335_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__335_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jundefined_or_null_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 2);
  if (v7 < 0x40000000)
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__335_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__335_load__constant(a1, v7);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__335_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__335_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__335_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a1 & 0xFFFFFFFFFFFFFFF7) == 2)
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__336_impl__target(2, a2, a3, a4, a5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__336_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(int *)(v5 + a5 + 6);
  if ((_DWORD)v6)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__336_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__336_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jnundefined_or_null(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 1);
  if (v7 < 16)
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__336_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__336_load__constant(a1, v7);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__336_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__336_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__336_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;

  v6 = a1 & 0xFFFFFFFFFFFFFFF7;
  if (v6 == 2)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__337_impl__target(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__337_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(char *)(v5 + a5 + 2);
  if (*(_BYTE *)(v5 + a5 + 2))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__337_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__337_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jnundefined_or_null_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 2);
  if (v7 < 64)
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__337_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__337_load__constant(a1, v7);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__337_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__337_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__337_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;

  v6 = a1 & 0xFFFFFFFFFFFFFFF7;
  if (v6 == 2)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__338_impl__target(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__338_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(__int16 *)(v5 + a5 + 4);
  if (*(_WORD *)(v5 + a5 + 4))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__338_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__338_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jnundefined_or_null_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 2);
  if (v7 < 0x40000000)
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__338_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__338_load__constant(a1, v7);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__338_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__338_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__338_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;

  v6 = a1 & 0xFFFFFFFFFFFFFFF7;
  if (v6 == 2)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__339_impl__target(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__339_impl__target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(int *)(v5 + a5 + 6);
  if ((_DWORD)v6)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__339_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_undefinedOrNullJumpOp__llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__339_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jeq_ptr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(char *)(v5 + a5 + 1);
  v8 = *(char *)(v5 + a5 + 2);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 160) + 8 * v8 - 128);
  if (v9 == *(_QWORD *)(v6 + 8 * v7))
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opJeqPtrTarget(v7, v8, v9, a4, a5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opJeqPtrTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(char *)(v5 + a5 + 3);
  if (*(_BYTE *)(v5 + a5 + 3))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__340_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__340_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jeq_ptr_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(__int16 *)(v5 + a5 + 2);
  v8 = *(__int16 *)(v5 + a5 + 4);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 160) + 8 * v8 - 512);
  if (v9 == *(_QWORD *)(v6 + 8 * v7))
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__341_fn__opJeqPtrTarget(v7, v8, v9, a4, a5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__341_fn__opJeqPtrTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(__int16 *)(v5 + a5 + 6);
  if (*(_WORD *)(v5 + a5 + 6))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__341_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__341_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jeq_ptr_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(v5 + a5 + 2);
  v8 = *(int *)(v5 + a5 + 6) - 0x40000000;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 160) + 8 * v8);
  if (v9 == *(_QWORD *)(v6 + 8 * v7))
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__342_fn__opJeqPtrTarget(v7, v8, v9, a4, a5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__342_fn__opJeqPtrTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(int *)(v5 + a5 + 10);
  if ((_DWORD)v6)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__342_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__342_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jneq_ptr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(char *)(v5 + a5 + 1);
  v8 = *(char *)(v5 + a5 + 2);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 160) + 8 * v8 - 128);
  if (v9 == *(_QWORD *)(v6 + 8 * v7))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 5)]();
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opJneqPtrTarget(v7, v8, v9, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opJneqPtrTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 92);
  if (!*(_WORD *)(v5 + 92))
    v6 = *(_DWORD *)(v5 + 280);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__342_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__342_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(a6 + *(unsigned __int8 *)(v7 + a5 + 4) + v6) = 1;
  v8 = *(char *)(v7 + a5 + 3);
  if (*(_BYTE *)(v7 + a5 + 3))
    return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + v8)]();
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__343_jumpImpl__outOfLineJumpTarget(v8, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__343_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jneq_ptr_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(__int16 *)(v5 + a5 + 2);
  v8 = *(__int16 *)(v5 + a5 + 4);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 160) + 8 * v8 - 512);
  if (v9 == *(_QWORD *)(v6 + 8 * v7))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__344_fn__opJneqPtrTarget(v7, v8, v9, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__344_fn__opJneqPtrTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 92);
  if (!*(_WORD *)(v5 + 92))
    v6 = *(_DWORD *)(v5 + 280);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__343_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__343_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(a6 + *(unsigned __int16 *)(v7 + a5 + 8) + v6) = 1;
  v8 = *(__int16 *)(v7 + a5 + 6);
  if (*(_WORD *)(v7 + a5 + 6))
    return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + v8)]();
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__344_jumpImpl__outOfLineJumpTarget(v8, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__344_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_jneq_ptr_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(v5 + a5 + 2);
  v8 = *(int *)(v5 + a5 + 6) - 0x40000000;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 160) + 8 * v8);
  if (v9 == *(_QWORD *)(v6 + 8 * v7))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 18)]();
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__345_fn__opJneqPtrTarget(v7, v8, v9, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__345_fn__opJneqPtrTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 92);
  if (!*(_WORD *)(v5 + 92))
    v6 = *(_DWORD *)(v5 + 280);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__344_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__344_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)((a6 + *(_DWORD *)(v7 + a5 + 14)) + v6) = 1;
  v8 = *(int *)(v7 + a5 + 10);
  if ((_DWORD)v8)
    return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + v8)]();
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__345_jumpImpl__outOfLineJumpTarget(v8, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__345_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t llint_op_switch_imm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__345_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, *(unsigned __int8 *)(v5 + a5 + 1), a5);
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__345_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__345_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__345_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__345_load__done(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD *v12;

  v8 = (16 * a4);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 152) + 8) + 8 + v8;
  if (a2 < v6)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchImmNotInt(a1, a2, v9, v8, a5);
  v11 = (a2 - *(_DWORD *)(v9 + 8));
  v12 = *(_DWORD **)v9;
  if (v12 && v11 < *v12 && (v11 = (int)v12[v11 + 1], (_DWORD)v11))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v11)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchImmFallThrough(a1, v11, (uint64_t)v12, v8, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchImmNotInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a2 & v5) != 0)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchImmSlow(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchImmFallThrough();
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchImmFallThrough(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(char *)(v5 + a5 + 2);
  if (*(_BYTE *)(v5 + a5 + 2))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__346_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__346_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchImmSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_switch_imm(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*(unsigned __int8 *)v7]();
}

uint64_t llint_op_switch_imm_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__346_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, *(unsigned __int16 *)(v5 + a5 + 2), a5);
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__346_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__346_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__346_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__346_load__done(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD *v12;

  v8 = (16 * a4);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 152) + 8) + 8 + v8;
  if (a2 < v6)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__347_impl__opSwitchImmNotInt(a1, a2, v9, v8, a5);
  v11 = (a2 - *(_DWORD *)(v9 + 8));
  v12 = *(_DWORD **)v9;
  if (v12 && v11 < *v12 && (v11 = (int)v12[v11 + 1], (_DWORD)v11))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v11)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__347_impl__opSwitchImmFallThrough(a1, v11, (uint64_t)v12, v8, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__347_impl__opSwitchImmNotInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a2 & v5) != 0)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__347_impl__opSwitchImmSlow(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__347_impl__opSwitchImmFallThrough();
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__347_impl__opSwitchImmFallThrough(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(__int16 *)(v5 + a5 + 4);
  if (*(_WORD *)(v5 + a5 + 4))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__347_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__347_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__347_impl__opSwitchImmSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_switch_imm(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*(unsigned __int8 *)v7]();
}

uint64_t llint_op_switch_imm_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__347_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, *(_DWORD *)(v5 + a5 + 2), a5);
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__347_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__347_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__347_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__347_load__done(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD *v12;

  v8 = (16 * a4);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 56) + 152) + 8) + 8 + v8;
  if (a2 < v6)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__348_impl__opSwitchImmNotInt(a1, a2, v9, v8, a5);
  v11 = (a2 - *(_DWORD *)(v9 + 8));
  v12 = *(_DWORD **)v9;
  if (v12 && v11 < *v12 && (v11 = (int)v12[v11 + 1], (_DWORD)v11))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v11)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__348_impl__opSwitchImmFallThrough(a1, v11, (uint64_t)v12, v8, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__348_impl__opSwitchImmNotInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((a2 & v5) != 0)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__348_impl__opSwitchImmSlow(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__348_impl__opSwitchImmFallThrough();
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__348_impl__opSwitchImmFallThrough(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(int *)(v5 + a5 + 6);
  if ((_DWORD)v6)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__348_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__348_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__348_impl__opSwitchImmSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_switch_imm(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*(unsigned __int8 *)v7]();
}

uint64_t llint_op_switch_char(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__348_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, *(unsigned __int8 *)(v5 + a5 + 1), a5);
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__348_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__348_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__348_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__348_load__done(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = (16 * a4);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 56) + 152) + 8) + 8 + v7;
  if ((a2 & v5) != 0 || *(_BYTE *)(a2 + 5) != 2)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchCharFallThrough(a1, a2, v8, v7, a5);
  a1 = *(_QWORD *)(a2 + 8);
  if ((a1 & 1) != 0)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchOnRope(a1, a2, v8, v7, a5);
  if (*(_DWORD *)(a1 + 4) != 1)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchCharFallThrough(a1, a2, v8, v7, a5);
  if ((*(_DWORD *)(a1 + 16) & 4) != 0)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchChar8Bit();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchCharReady(**(unsigned __int16 **)(a1 + 8), *(_QWORD *)(a1 + 8), v8, v7, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchCharReady(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v6 = (a1 - *(_DWORD *)(a3 + 8));
  v7 = *(_DWORD **)a3;
  if (v7 && v6 < *v7 && (a2 = (int)v7[v6 + 1], (_DWORD)a2))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + a2)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchCharFallThrough(v6, a2, (uint64_t)v7, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchCharFallThrough(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(char *)(v5 + a5 + 2);
  if (*(_BYTE *)(v5 + a5 + 2))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__349_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__349_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchOnRope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a2 + 16) == 1)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchOnRopeChar();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchCharFallThrough(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__opSwitchOnRopeChar(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_switch_char(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*(unsigned __int8 *)v11]();
}

uint64_t llint_op_switch_char_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__349_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, *(unsigned __int16 *)(v5 + a5 + 2), a5);
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__349_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__349_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__349_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__349_load__done(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = (16 * a4);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 56) + 152) + 8) + 8 + v7;
  if ((a2 & v5) != 0 || *(_BYTE *)(a2 + 5) != 2)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchCharFallThrough(a1, a2, v8, v7, a5);
  a1 = *(_QWORD *)(a2 + 8);
  if ((a1 & 1) != 0)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchOnRope(a1, a2, v8, v7, a5);
  if (*(_DWORD *)(a1 + 4) != 1)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchCharFallThrough(a1, a2, v8, v7, a5);
  if ((*(_DWORD *)(a1 + 16) & 4) != 0)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchChar8Bit();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchCharReady(**(unsigned __int16 **)(a1 + 8), *(_QWORD *)(a1 + 8), v8, v7, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchCharReady(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v6 = (a1 - *(_DWORD *)(a3 + 8));
  v7 = *(_DWORD **)a3;
  if (v7 && v6 < *v7 && (a2 = (int)v7[v6 + 1], (_DWORD)a2))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + a2)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchCharFallThrough(v6, a2, (uint64_t)v7, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchCharFallThrough(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(__int16 *)(v5 + a5 + 4);
  if (*(_WORD *)(v5 + a5 + 4))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__350_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__350_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchOnRope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a2 + 16) == 1)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchOnRopeChar();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchCharFallThrough(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__350_impl__opSwitchOnRopeChar(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_switch_char(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*(unsigned __int8 *)v11]();
}

uint64_t llint_op_switch_char_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__350_load__done(a1, *(_QWORD *)(v6 + 8 * v7), v7, *(_DWORD *)(v5 + a5 + 2), a5);
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__350_load__constant(a1, a2, v7);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__350_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__350_load__done(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__loadConstantOrVariable__size__k__350_load__done(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = (16 * a4);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 56) + 152) + 8) + 8 + v7;
  if ((a2 & v5) != 0 || *(_BYTE *)(a2 + 5) != 2)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchCharFallThrough(a1, a2, v8, v7, a5);
  a1 = *(_QWORD *)(a2 + 8);
  if ((a1 & 1) != 0)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchOnRope(a1, a2, v8, v7, a5);
  if (*(_DWORD *)(a1 + 4) != 1)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchCharFallThrough(a1, a2, v8, v7, a5);
  if ((*(_DWORD *)(a1 + 16) & 4) != 0)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchChar8Bit();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchCharReady(**(unsigned __int16 **)(a1 + 8), *(_QWORD *)(a1 + 8), v8, v7, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchCharReady(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v6 = (a1 - *(_DWORD *)(a3 + 8));
  v7 = *(_DWORD **)a3;
  if (v7 && v6 < *v7 && (a2 = (int)v7[v6 + 1], (_DWORD)a2))
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + a2)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchCharFallThrough(v6, a2, (uint64_t)v7, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchCharFallThrough(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(int *)(v5 + a5 + 6);
  if ((_DWORD)v6)
    return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + v6)]();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__351_jumpImpl__outOfLineJumpTarget(v6, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__impl__jump__351_jumpImpl__outOfLineJumpTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = (unsigned __int8 *)llint_slow_path_out_of_line_jump_target(v6, a5 + v5);
  return g_opcodeMap[*v7]();
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchOnRope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a2 + 16) == 1)
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchOnRopeChar();
  else
    return jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchCharFallThrough(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithJump__llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__351_impl__opSwitchOnRopeChar(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_switch_char(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*(unsigned __int8 *)v11]();
}

void llint_op_ret(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 56);
  v8 = *(_DWORD *)(v7 + 168) + 10;
  *(_DWORD *)(v7 + 168) = v8;
  if (v8 >= 0)
  {
    v7 = llint_replace(v6, a5 + v5);
    a5 = v7 - v5;
  }
  jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__checkSwitchToJIT__continue(v7, a2, a3, a4, a5);
}

void jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__checkSwitchToJIT__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(char *)(v5 + a5 + 1);
  if (v6 < 16)
    jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__351_load__done();
  else
    jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__351_load__constant(a1, a2, v6);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__351_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__351_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

void llint_op_ret_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 56);
  v8 = *(_DWORD *)(v7 + 168) + 10;
  *(_DWORD *)(v7 + 168) = v8;
  if (v8 >= 0)
  {
    v7 = llint_replace(v6, a5 + v5);
    a5 = v7 - v5;
  }
  jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__351_checkSwitchToJIT__continue(v7, a2, a3, a4, a5);
}

void jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__351_checkSwitchToJIT__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(__int16 *)(v5 + a5 + 2);
  if (v6 < 64)
    jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__352_load__done();
  else
    jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__352_load__constant(a1, a2, v6);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__352_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__352_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

void llint_op_ret_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 56);
  v8 = *(_DWORD *)(v7 + 168) + 10;
  *(_DWORD *)(v7 + 168) = v8;
  if (v8 >= 0)
  {
    v7 = llint_replace(v6, a5 + v5);
    a5 = v7 - v5;
  }
  jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__352_checkSwitchToJIT__continue(v7, a2, a3, a4, a5);
}

void jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__352_checkSwitchToJIT__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(int *)(v5 + a5 + 2);
  if (v6 < 0x40000000)
    jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__353_load__done();
  else
    jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__353_load__constant(a1, a2, v6);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__353_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__353_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t llint_op_to_primitive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(char *)(v8 + a5 + 2);
  if (v10 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__354_load__done(*(_QWORD *)(v9 + 8 * v10), a2, v10, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__354_load__constant(a1, a2, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__354_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__354_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__354_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if ((a1 & v8) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToPrimitiveIsImm(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToPrimitiveSlowCase(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToPrimitiveIsImm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToPrimitiveSlowCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_primitive(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 3)]();
}

uint64_t llint_op_to_primitive_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(__int16 *)(v8 + a5 + 4);
  if (v10 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__355_load__done(*(_QWORD *)(v9 + 8 * v10), a2, v10, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__355_load__constant(a1, a2, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__355_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__355_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__355_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if ((a1 & v8) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__355_fn__opToPrimitiveIsImm(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__355_fn__opToPrimitiveSlowCase(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__355_fn__opToPrimitiveIsImm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__355_fn__opToPrimitiveSlowCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_primitive(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_to_primitive_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(int *)(v8 + a5 + 6);
  if (v10 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__356_load__done(*(_QWORD *)(v9 + 8 * v10), a2, v10, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__356_load__constant(a1, a2, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__356_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__356_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__356_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if ((a1 & v8) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__356_fn__opToPrimitiveIsImm(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__356_fn__opToPrimitiveSlowCase(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__356_fn__opToPrimitiveIsImm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__356_fn__opToPrimitiveSlowCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_primitive(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_to_property_key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(char *)(v8 + a5 + 2);
  if (v10 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__357_load__done(*(_QWORD *)(v9 + 8 * v10), a2, v10, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__357_load__constant(a1, a2, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__357_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__357_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__357_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if ((a1 & v8) == 0 && (*(_BYTE *)(a1 + 5) == 4 || *(_BYTE *)(a1 + 5) == 2))
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__357_fn__done(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToPropertyKeySlow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__357_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToPropertyKeySlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_property_key(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 3)]();
}

uint64_t llint_op_to_property_key_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(__int16 *)(v8 + a5 + 4);
  if (v10 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__358_load__done(*(_QWORD *)(v9 + 8 * v10), a2, v10, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__358_load__constant(a1, a2, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__358_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__358_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__358_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if ((a1 & v8) == 0 && (*(_BYTE *)(a1 + 5) == 4 || *(_BYTE *)(a1 + 5) == 2))
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__358_fn__done(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__358_fn__opToPropertyKeySlow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__358_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__358_fn__opToPropertyKeySlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_property_key(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_to_property_key_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(int *)(v8 + a5 + 6);
  if (v10 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__359_load__done(*(_QWORD *)(v9 + 8 * v10), a2, v10, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__359_load__constant(a1, a2, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__359_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__359_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__359_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if ((a1 & v8) == 0 && (*(_BYTE *)(a1 + 5) == 4 || *(_BYTE *)(a1 + 5) == 2))
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__359_fn__done(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__359_fn__opToPropertyKeySlow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__359_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__359_fn__opToPropertyKeySlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_property_key(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_to_property_key_or_number(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(char *)(v8 + a5 + 2);
  if (v10 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__360_load__done(*(_QWORD *)(v9 + 8 * v10), a2, v10, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__360_load__constant(a1, a2, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__360_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__360_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__360_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((a1 & v8) != 0 || (a1 & v9) == 0 && (*(_BYTE *)(a1 + 5) == 4 || *(_BYTE *)(a1 + 5) == 2))
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__360_fn__done(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToPropertyKeyOrNumberSlow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__360_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__opToPropertyKeyOrNumberSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_property_key_or_number(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 3)]();
}

uint64_t llint_op_to_property_key_or_number_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(__int16 *)(v8 + a5 + 4);
  if (v10 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__361_load__done(*(_QWORD *)(v9 + 8 * v10), a2, v10, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__361_load__constant(a1, a2, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__361_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__361_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * a3 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__361_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((a1 & v8) != 0 || (a1 & v9) == 0 && (*(_BYTE *)(a1 + 5) == 4 || *(_BYTE *)(a1 + 5) == 2))
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__361_fn__done(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__361_fn__opToPropertyKeyOrNumberSlow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__361_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__361_fn__opToPropertyKeyOrNumberSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_property_key_or_number(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_to_property_key_or_number_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(int *)(v8 + a5 + 6);
  if (v10 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__362_load__done(*(_QWORD *)(v9 + 8 * v10), a2, v10, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__362_load__constant(a1, a2, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__362_load__constant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__362_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 160) + 8 * (a3 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariable__size__k__362_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((a1 & v8) != 0 || (a1 & v9) == 0 && (*(_BYTE *)(a1 + 5) == 4 || *(_BYTE *)(a1 + 5) == 2))
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__362_fn__done(a1, a2, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__362_fn__opToPropertyKeyOrNumberSlow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__362_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__362_fn__opToPropertyKeyOrNumberSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_to_property_key_or_number(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_catch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 24);
  if ((v4 & 0xFFFE000000000007) == 3)
    return jsc_llint_commonOp__fn__362_getVMFromCallFrame__isWasmCallee(3, a2, a3);
  if ((v4 & 8) != 0)
    return jsc_llint_commonOp__fn__getVMFromCallFrame__362_convertJSCalleeToVM__preciseAllocation();
  return jsc_llint_commonOp__fn__getVMFromCallFrame__362_convertJSCalleeToVM__done();
}

uint64_t jsc_llint_commonOp__fn__362_getVMFromCallFrame__isWasmCallee(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_commonOp__fn__362_getVMFromCallFrame__loaded(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8));
}

uint64_t jsc_llint_commonOp__fn__362_getVMFromCallFrame__loaded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a4 + 90480);
  *(_QWORD *)(a4 + 90480) = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 80);
  v6 = llint_slow_path_retrieve_and_clear_exception_if_catchable(v4, *(_QWORD *)(a4 + 90504));
  if (v7)
    return jsc_llint_commonOp__fn__isCatchableException(v6, v7, v8, v9, v6 - v5);
  else
    return llint_throw_from_slow_path_trampoline(v6);
}

uint64_t jsc_llint_commonOp__fn__isCatchableException(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a2;
  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 2)) = *(_QWORD *)(a2 + 8);
  v7 = llint_slow_path_profile_catch(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 4)]();
}

uint64_t llint_op_catch_wide16(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 24);
  if ((v4 & 0xFFFE000000000007) == 3)
    return jsc_llint_commonOp__fn__363_getVMFromCallFrame__isWasmCallee(3, a2, a3);
  if ((v4 & 8) != 0)
    return jsc_llint_commonOp__fn__getVMFromCallFrame__363_convertJSCalleeToVM__preciseAllocation();
  return jsc_llint_commonOp__fn__getVMFromCallFrame__363_convertJSCalleeToVM__done();
}

uint64_t jsc_llint_commonOp__fn__363_getVMFromCallFrame__isWasmCallee(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_commonOp__fn__363_getVMFromCallFrame__loaded(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8));
}

uint64_t jsc_llint_commonOp__fn__363_getVMFromCallFrame__loaded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a4 + 90480);
  *(_QWORD *)(a4 + 90480) = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 80);
  v6 = llint_slow_path_retrieve_and_clear_exception_if_catchable(v4, *(_QWORD *)(a4 + 90504));
  if (v7)
    return jsc_llint_commonOp__363_fn__isCatchableException(v6, v7, v8, v9, v6 - v5);
  else
    return llint_throw_from_slow_path_trampoline(v6);
}

uint64_t jsc_llint_commonOp__363_fn__isCatchableException(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a2;
  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 4)) = *(_QWORD *)(a2 + 8);
  v7 = llint_slow_path_profile_catch(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 8)]();
}

uint64_t llint_op_catch_wide32(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 24);
  if ((v4 & 0xFFFE000000000007) == 3)
    return jsc_llint_commonOp__fn__364_getVMFromCallFrame__isWasmCallee(3, a2, a3);
  if ((v4 & 8) != 0)
    return jsc_llint_commonOp__fn__getVMFromCallFrame__364_convertJSCalleeToVM__preciseAllocation();
  return jsc_llint_commonOp__fn__getVMFromCallFrame__364_convertJSCalleeToVM__done();
}

uint64_t jsc_llint_commonOp__fn__364_getVMFromCallFrame__isWasmCallee(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return jsc_llint_commonOp__fn__364_getVMFromCallFrame__loaded(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8));
}

uint64_t jsc_llint_commonOp__fn__364_getVMFromCallFrame__loaded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a4 + 90480);
  *(_QWORD *)(a4 + 90480) = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 80);
  v6 = llint_slow_path_retrieve_and_clear_exception_if_catchable(v4, *(_QWORD *)(a4 + 90504));
  if (v7)
    return jsc_llint_commonOp__364_fn__isCatchableException(v6, v7, v8, v9, v6 - v5);
  else
    return llint_throw_from_slow_path_trampoline(v6);
}

uint64_t jsc_llint_commonOp__364_fn__isCatchableException(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a2;
  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 6)) = *(_QWORD *)(a2 + 8);
  v7 = llint_slow_path_profile_catch(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 14)]();
}

uint64_t llint_op_end(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 56);
  v8 = *(_DWORD *)(v7 + 168) + 10;
  *(_DWORD *)(v7 + 168) = v8;
  if (v8 >= 0)
  {
    v7 = llint_replace(v6, a5 + v5);
    a5 = v7 - v5;
  }
  return jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__364_checkSwitchToJIT__continue(v7, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__364_checkSwitchToJIT__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1));
}

uint64_t llint_op_end_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 56);
  v8 = *(_DWORD *)(v7 + 168) + 10;
  *(_DWORD *)(v7 + 168) = v8;
  if (v8 >= 0)
  {
    v7 = llint_replace(v6, a5 + v5);
    a5 = v7 - v5;
  }
  return jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__365_checkSwitchToJIT__continue(v7, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__365_checkSwitchToJIT__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2));
}

uint64_t llint_op_end_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 56);
  v8 = *(_DWORD *)(v7 + 168) + 10;
  *(_DWORD *)(v7 + 168) = v8;
  if (v8 >= 0)
  {
    v7 = llint_replace(v6, a5 + v5);
    a5 = v7 - v5;
  }
  return jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__366_checkSwitchToJIT__continue(v7, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__checkSwitchToJITForEpilogue__366_checkSwitchToJIT__continue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2));
}

uint64_t llint_throw_from_slow_path_trampoline(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  if ((v2 & 0xFFFE000000000007) == 3)
    return jsc_llint_op__commonOp__fn__size__k__gen__366_getVMFromCallFrame__isWasmCallee(a1);
  if ((v2 & 8) != 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__366_convertJSCalleeToVM__preciseAllocation(a1);
  return jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__366_convertJSCalleeToVM__done(a1, *(_QWORD *)((v2 & 0xFFFFFFFFFFFFC000) + 8));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__366_getVMFromCallFrame__isWasmCallee(uint64_t a1)
{
  uint64_t v1;

  return jsc_llint_op__commonOp__fn__size__k__gen__366_getVMFromCallFrame__loaded(a1, *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__366_getVMFromCallFrame__loaded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::CallFrame *v27;
  uint64_t v28;
  uint64_t v29;

  v27 = (JSC::CallFrame *)(*(_QWORD *)(a2 + 48) - 152);
  *(_QWORD *)v27 = v8;
  *((_QWORD *)v27 + 1) = v9;
  *((_QWORD *)v27 + 2) = v10;
  *((_QWORD *)v27 + 3) = v11;
  *((_QWORD *)v27 + 4) = v12;
  *((_QWORD *)v27 + 5) = v13;
  *((_QWORD *)v27 + 6) = v14;
  *((_QWORD *)v27 + 7) = v15;
  *((_QWORD *)v27 + 8) = v16;
  *((_QWORD *)v27 + 9) = v17;
  *((_QWORD *)v27 + 10) = v19;
  *((_QWORD *)v27 + 11) = v20;
  *((_QWORD *)v27 + 12) = v21;
  *((_QWORD *)v27 + 13) = v22;
  *((_QWORD *)v27 + 14) = v23;
  *((_QWORD *)v27 + 15) = v24;
  *((_QWORD *)v27 + 16) = v25;
  *((_QWORD *)v27 + 17) = v26;
  v28 = llint_slow_path_handle_exception(v18, a5 + v15, v27, a4, a5 + v15, a6, a7, a8);
  v29 = *((_QWORD *)v18 + 3);
  if ((v29 & 0xFFFE000000000007) == 3)
    return jsc_llint_op__commonOp__fn__size__k__gen__367_getVMFromCallFrame__isWasmCallee(v28);
  if ((v29 & 8) != 0)
    return jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__367_convertJSCalleeToVM__preciseAllocation();
  return jsc_llint_op__commonOp__fn__size__k__gen__getVMFromCallFrame__367_convertJSCalleeToVM__done();
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__367_getVMFromCallFrame__isWasmCallee(uint64_t a1)
{
  uint64_t v1;

  return jsc_llint_op__commonOp__fn__size__k__gen__367_getVMFromCallFrame__loaded(a1, *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8));
}

uint64_t jsc_llint_op__commonOp__fn__size__k__gen__367_getVMFromCallFrame__loaded(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 90488))();
}

uint64_t llint_throw_during_call_trampoline(uint64_t a1)
{
  return llint_throw_from_slow_path_trampoline(a1);
}

uint64_t llint_op_resolve_scope(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 50);
  if (!*(_WORD *)(v8 + 50))
    v9 = *(_DWORD *)(v8 + 196);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__367_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__367_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = (unsigned int *)((a6 + 16 * *(unsigned __int8 *)(v9 + a5 + 6) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  if ((_DWORD)v12)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalVar(v12, a2, a3, a4, a5, (unint64_t)v11, a7, a8);
  v13 = *((_QWORD *)v11 + 1);
  v14 = v11[1];
  if (*(_DWORD *)(v13 + 3176) != (_DWORD)v14)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rDynamic(v13, a2, v14, a4, a5, (unint64_t)v11, a7, a8);
  *(_QWORD *)(v10 + 8 * *(char *)(v9 + a5 + 1)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 7)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a1 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalLexicalVar(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 1)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 7)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalLexicalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a1 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rClosureVar(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 1)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 7)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rClosureVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a1 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rModuleVar(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned int *)(a6 + 4);
  v12 = *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 2));
  if ((_DWORD)v11)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__resolveScope__resolveScopeLoop(v12, a2, v11);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__resolveScope__resolveScopeLoopEnd(v12, a2, v11, (uint64_t)a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__resolveScope__resolveScopeLoop(uint64_t a1, uint64_t a2, int a3)
{
  do
  {
    a1 = *(_QWORD *)(a1 + 16);
    --a3;
  }
  while (a3);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__resolveScope__resolveScopeLoopEnd(a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__resolveScope__resolveScopeLoopEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 7)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rModuleVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a1 != 5)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalPropertyWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 1)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 7)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalPropertyWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  a1 = *(_QWORD *)(a6 + 8);
  v11 = *(unsigned int *)(a6 + 4);
  if (*(_DWORD *)(a1 + 3176) != (_DWORD)v11)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 7)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalLexicalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 1)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 7)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rGlobalLexicalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rClosureVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 1)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 7)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rClosureVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a1 != 9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rDynamic(a1, a2, a3, a4, a5, a6, a7, a8);
  a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(a3 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rDynamic(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned int *)(a6 + 4);
  v12 = *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 2));
  if ((_DWORD)v11)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__367_resolveScope__resolveScopeLoop(v12, a2, v11);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__367_resolveScope__resolveScopeLoopEnd(v12, a2, v11, (uint64_t)a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__367_resolveScope__resolveScopeLoop(uint64_t a1, uint64_t a2, int a3)
{
  do
  {
    a1 = *(_QWORD *)(a1 + 16);
    --a3;
  }
  while (a3);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__367_resolveScope__resolveScopeLoopEnd(a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__367_resolveScope__resolveScopeLoopEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 7)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__rDynamic(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_resolve_scope(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 7)]();
}

uint64_t llint_op_resolve_scope_wide16(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 50);
  if (!*(_WORD *)(v8 + 50))
    v9 = *(_DWORD *)(v8 + 196);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__368_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__368_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = (unsigned int *)((a6 + 16 * *(unsigned __int16 *)(v9 + a5 + 12) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  if ((_DWORD)v12)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalVar(v12, a2, a3, a4, a5, (unint64_t)v11, a7, a8);
  v13 = *((_QWORD *)v11 + 1);
  v14 = v11[1];
  if (*(_DWORD *)(v13 + 3176) != (_DWORD)v14)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rDynamic(v13, a2, v14, a4, a5, (unint64_t)v11, a7, a8);
  *(_QWORD *)(v10 + 8 * *(__int16 *)(v9 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a1 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalLexicalVar(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalLexicalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a1 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rClosureVar(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rClosureVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a1 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rModuleVar(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned int *)(a6 + 4);
  v12 = *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 4));
  if ((_DWORD)v11)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__368_resolveScope__resolveScopeLoop(v12, a2, v11);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__368_resolveScope__resolveScopeLoopEnd(v12, a2, v11, (uint64_t)a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__368_resolveScope__resolveScopeLoop(uint64_t a1, uint64_t a2, int a3)
{
  do
  {
    a1 = *(_QWORD *)(a1 + 16);
    --a3;
  }
  while (a3);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__368_resolveScope__resolveScopeLoopEnd(a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__368_resolveScope__resolveScopeLoopEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rModuleVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a1 != 5)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalPropertyWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalPropertyWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  a1 = *(_QWORD *)(a6 + 8);
  v11 = *(unsigned int *)(a6 + 4);
  if (*(_DWORD *)(a1 + 3176) != (_DWORD)v11)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalLexicalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rGlobalLexicalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rClosureVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rClosureVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a1 != 9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rDynamic(a1, a2, a3, a4, a5, a6, a7, a8);
  a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(a3 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rDynamic(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned int *)(a6 + 4);
  v12 = *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 4));
  if ((_DWORD)v11)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__369_resolveScope__resolveScopeLoop(v12, a2, v11);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__369_resolveScope__resolveScopeLoopEnd(v12, a2, v11, (uint64_t)a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__369_resolveScope__resolveScopeLoop(uint64_t a1, uint64_t a2, int a3)
{
  do
  {
    a1 = *(_QWORD *)(a1 + 16);
    --a3;
  }
  while (a3);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__369_resolveScope__resolveScopeLoopEnd(a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__369_resolveScope__resolveScopeLoopEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__369_fn__rDynamic(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_resolve_scope(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_resolve_scope_wide32(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 50);
  if (!*(_WORD *)(v8 + 50))
    v9 = *(_DWORD *)(v8 + 196);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__369_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__369_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = (unsigned int *)(((a6 + 16 * *(_DWORD *)(v9 + a5 + 22)) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  if ((_DWORD)v12)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalVar(v12, a2, a3, a4, a5, (unint64_t)v11, a7, a8);
  v13 = *((_QWORD *)v11 + 1);
  v14 = v11[1];
  if (*(_DWORD *)(v13 + 3176) != (_DWORD)v14)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rDynamic(v13, a2, v14, a4, a5, (unint64_t)v11, a7, a8);
  *(_QWORD *)(v10 + 8 * *(int *)(v9 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 26)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a1 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalLexicalVar(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 26)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalLexicalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a1 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rClosureVar(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 26)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rClosureVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a1 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rModuleVar(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned int *)(a6 + 4);
  v12 = *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 6));
  if ((_DWORD)v11)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__370_resolveScope__resolveScopeLoop(v12, a2, v11);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__370_resolveScope__resolveScopeLoopEnd(v12, a2, v11, (uint64_t)a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__370_resolveScope__resolveScopeLoop(uint64_t a1, uint64_t a2, int a3)
{
  do
  {
    a1 = *(_QWORD *)(a1 + 16);
    --a3;
  }
  while (a3);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__370_resolveScope__resolveScopeLoopEnd(a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__370_resolveScope__resolveScopeLoopEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 26)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rModuleVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a1 != 5)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalPropertyWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 26)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalPropertyWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  a1 = *(_QWORD *)(a6 + 8);
  v11 = *(unsigned int *)(a6 + 4);
  if (*(_DWORD *)(a1 + 3176) != (_DWORD)v11)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 26)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalLexicalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 26)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rGlobalLexicalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rClosureVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rDynamic(a1, a2, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 2)) = *(_QWORD *)(a6 + 8);
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 26)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rClosureVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a1 != 9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rDynamic(a1, a2, a3, a4, a5, a6, a7, a8);
  a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(a3 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rDynamic(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned int *)(a6 + 4);
  v12 = *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 6));
  if ((_DWORD)v11)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__371_resolveScope__resolveScopeLoop(v12, a2, v11);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__371_resolveScope__resolveScopeLoopEnd(v12, a2, v11, (uint64_t)a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__371_resolveScope__resolveScopeLoop(uint64_t a1, uint64_t a2, int a3)
{
  do
  {
    a1 = *(_QWORD *)(a1 + 16);
    --a3;
  }
  while (a3);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__371_resolveScope__resolveScopeLoopEnd(a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__371_resolveScope__resolveScopeLoopEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 26)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__371_fn__rDynamic(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_resolve_scope(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 26)]();
}

uint64_t llint_op_get_from_scope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint8x8_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 52);
  if (!*(_WORD *)(v9 + 52))
    v10 = *(_DWORD *)(v9 + 200);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__371_metadata__setUpOffset(a6, a1, a2, a3, a4, a5, v10, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__371_metadata__setUpOffset(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = (a7 + 24 * *(unsigned __int8 *)(v10 + a6 + 8) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)v12 & 0x3FF) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalVar(*(_DWORD *)v12 & 0x3FF, a3, a4, a5, a6, v12, a8, a9, a1);
  v13 = (uint64_t *)(v11 + 8 * *(char *)(v10 + a6 + 2));
  v14 = *v13;
  v15 = 16 * *(unsigned int *)*v13;
  v16 = *(_QWORD *)(v12 + 8);
  if (v15 != v16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gDynamic(a1, v14, v16, v15, a5, a6, v12, a8, a9);
  if ((int)*(_QWORD *)(v12 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__371_loadPropertyAtVariableOffset__ready(*(_QWORD *)(v14 + 8), -*(_DWORD *)(v12 + 16), v15, a5, a6);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__371_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__371_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 7) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalLexicalVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = **(_QWORD **)(a6 + 16);
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a5 + 7) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(char *)(v10 + a5 + 1)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalLexicalVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gClosureVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = **(_QWORD **)(a6 + 16);
  if (!v13)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gDynamic(a9, 0, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a5 + 7) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(char *)(v10 + a5 + 1)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gClosureVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalPropertyWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * *(char *)(v10 + a5 + 2)) + 8 * *(_QWORD *)(a6 + 16) + 32);
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a5 + 7) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(char *)(v10 + a5 + 1)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalPropertyWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((_DWORD)a1 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = (uint64_t *)(v10 + 8 * *(char *)(v9 + a5 + 2));
  v13 = *v12;
  v14 = 16 * *(unsigned int *)*v12;
  v15 = *(_QWORD *)(a6 + 8);
  if (v14 != v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gDynamic(a9, v13, v15, v14, a4, a5, a6, a7, a8);
  if ((int)*(_QWORD *)(a6 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__372_loadPropertyAtVariableOffset__ready(*(_QWORD *)(v13 + 8), -*(_DWORD *)(a6 + 16), v14, a4, a5);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__372_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__372_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 7) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a1 != 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalLexicalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 2056);
  if (*(_BYTE *)(v13 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gDynamic(a9, a1, a2, v13, a4, a5, a6, a7, a8);
  v14 = **(_QWORD **)(a6 + 16);
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a5 + 7) - 16) = v14;
  *(_QWORD *)(v11 + 8 * *(char *)(v10 + a5 + 1)) = v14;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gGlobalLexicalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gClosureVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 2056);
  if (*(_BYTE *)(v13 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gDynamic(a9, a1, a2, v13, a4, a5, a6, a7, a8);
  a1 = **(_QWORD **)(a6 + 16);
  if (!a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gDynamic(a9, a1, a2, v13, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a5 + 7) - 16) = a1;
  *(_QWORD *)(v11 + 8 * *(char *)(v10 + a5 + 1)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gClosureVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gDynamic(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 2056);
  if (*(_BYTE *)(a3 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gDynamic(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * *(char *)(v10 + a5 + 2)) + 8 * *(_QWORD *)(a6 + 16) + 32);
  *(_QWORD *)(v9 - 16 * *(unsigned __int8 *)(v10 + a5 + 7) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(char *)(v10 + a5 + 1)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__gDynamic(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_get_from_scope(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 9)]();
}

uint64_t llint_op_get_from_scope_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint8x8_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 52);
  if (!*(_WORD *)(v9 + 52))
    v10 = *(_DWORD *)(v9 + 200);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__372_metadata__setUpOffset(a6, a1, a2, a3, a4, a5, v10, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__372_metadata__setUpOffset(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = (a7 + 24 * *(unsigned __int16 *)(v10 + a6 + 16) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)v12 & 0x3FF) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalVar(*(_DWORD *)v12 & 0x3FF, a3, a4, a5, a6, v12, a8, a9, a1);
  v13 = (uint64_t *)(v11 + 8 * *(__int16 *)(v10 + a6 + 4));
  v14 = *v13;
  v15 = 16 * *(unsigned int *)*v13;
  v16 = *(_QWORD *)(v12 + 8);
  if (v15 != v16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gDynamic(a1, v14, v16, v15, a5, a6, v12, a8, a9);
  if ((int)*(_QWORD *)(v12 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__373_loadPropertyAtVariableOffset__ready(*(_QWORD *)(v14 + 8), -*(_DWORD *)(v12 + 16), v15, a5, a6);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__373_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__373_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 14) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalLexicalVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = **(_QWORD **)(a6 + 16);
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a5 + 14) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v10 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalLexicalVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gClosureVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = **(_QWORD **)(a6 + 16);
  if (!v13)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gDynamic(a9, 0, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a5 + 14) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v10 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gClosureVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalPropertyWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * *(__int16 *)(v10 + a5 + 4)) + 8 * *(_QWORD *)(a6 + 16) + 32);
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a5 + 14) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v10 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalPropertyWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((_DWORD)a1 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = (uint64_t *)(v10 + 8 * *(__int16 *)(v9 + a5 + 4));
  v13 = *v12;
  v14 = 16 * *(unsigned int *)*v12;
  v15 = *(_QWORD *)(a6 + 8);
  if (v14 != v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gDynamic(a9, v13, v15, v14, a4, a5, a6, a7, a8);
  if ((int)*(_QWORD *)(a6 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__374_loadPropertyAtVariableOffset__ready(*(_QWORD *)(v13 + 8), -*(_DWORD *)(a6 + 16), v14, a4, a5);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__374_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__374_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 14) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a1 != 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalLexicalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 2056);
  if (*(_BYTE *)(v13 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gDynamic(a9, a1, a2, v13, a4, a5, a6, a7, a8);
  v14 = **(_QWORD **)(a6 + 16);
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a5 + 14) - 16) = v14;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v10 + a5 + 2)) = v14;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gGlobalLexicalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gClosureVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 2056);
  if (*(_BYTE *)(v13 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gDynamic(a9, a1, a2, v13, a4, a5, a6, a7, a8);
  a1 = **(_QWORD **)(a6 + 16);
  if (!a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gDynamic(a9, a1, a2, v13, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a5 + 14) - 16) = a1;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v10 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gClosureVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gDynamic(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 2056);
  if (*(_BYTE *)(a3 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gDynamic(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * *(__int16 *)(v10 + a5 + 4)) + 8 * *(_QWORD *)(a6 + 16) + 32);
  *(_QWORD *)(v9 - 16 * *(unsigned __int16 *)(v10 + a5 + 14) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v10 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__374_fn__gDynamic(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_get_from_scope(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 18)]();
}

uint64_t llint_op_get_from_scope_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint8x8_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 52);
  if (!*(_WORD *)(v9 + 52))
    v10 = *(_DWORD *)(v9 + 200);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__374_metadata__setUpOffset(a6, a1, a2, a3, a4, a5, v10, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__374_metadata__setUpOffset(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = ((a7 + 24 * *(_DWORD *)(v10 + a6 + 30)) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)v12 & 0x3FF) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalVar(*(_DWORD *)v12 & 0x3FF, a3, a4, a5, a6, v12, a8, a9, a1);
  v13 = (uint64_t *)(v11 + 8 * *(int *)(v10 + a6 + 6));
  v14 = *v13;
  v15 = 16 * *(unsigned int *)*v13;
  v16 = *(_QWORD *)(v12 + 8);
  if (v15 != v16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gDynamic(a1, v14, v16, v15, a5, a6, v12, a8, a9);
  if ((int)*(_QWORD *)(v12 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__375_loadPropertyAtVariableOffset__ready(*(_QWORD *)(v14 + 8), -*(_DWORD *)(v12 + 16), v15, a5, a6);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__375_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__375_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 26) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalLexicalVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = **(_QWORD **)(a6 + 16);
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a5 + 26) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(int *)(v10 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalLexicalVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gClosureVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = **(_QWORD **)(a6 + 16);
  if (!v13)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gDynamic(a9, 0, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a5 + 26) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(int *)(v10 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gClosureVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalPropertyWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * *(int *)(v10 + a5 + 6)) + 8 * *(_QWORD *)(a6 + 16) + 32);
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a5 + 26) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(int *)(v10 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalPropertyWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((_DWORD)a1 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = (uint64_t *)(v10 + 8 * *(int *)(v9 + a5 + 6));
  v13 = *v12;
  v14 = 16 * *(unsigned int *)*v12;
  v15 = *(_QWORD *)(a6 + 8);
  if (v14 != v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gDynamic(a9, v13, v15, v14, a4, a5, a6, a7, a8);
  if ((int)*(_QWORD *)(a6 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__376_loadPropertyAtVariableOffset__ready(*(_QWORD *)(v13 + 8), -*(_DWORD *)(a6 + 16), v14, a4, a5);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__376_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getProperty__376_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 26) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a1 != 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalLexicalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 2056);
  if (*(_BYTE *)(v13 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gDynamic(a9, a1, a2, v13, a4, a5, a6, a7, a8);
  v14 = **(_QWORD **)(a6 + 16);
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a5 + 26) - 16) = v14;
  *(_QWORD *)(v11 + 8 * *(int *)(v10 + a5 + 2)) = v14;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gGlobalLexicalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gClosureVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 2056);
  if (*(_BYTE *)(v13 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gDynamic(a9, a1, a2, v13, a4, a5, a6, a7, a8);
  a1 = **(_QWORD **)(a6 + 16);
  if (!a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gDynamic(a9, a1, a2, v13, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a5 + 26) - 16) = a1;
  *(_QWORD *)(v11 + 8 * *(int *)(v10 + a5 + 2)) = a1;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gClosureVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((_DWORD)a1 != 9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gDynamic(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 2056);
  if (*(_BYTE *)(a3 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gDynamic(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * *(int *)(v10 + a5 + 6)) + 8 * *(_QWORD *)(a6 + 16) + 32);
  *(_QWORD *)(v9 - 16 * *(unsigned int *)(v10 + a5 + 26) - 16) = v13;
  *(_QWORD *)(v11 + 8 * *(int *)(v10 + a5 + 2)) = v13;
  return g_opcodeMap[*(unsigned __int8 *)(v10 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__376_fn__gDynamic(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_get_from_scope(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 34)]();
}

uint64_t llint_op_put_to_scope(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 54);
  if (!*(_WORD *)(v9 + 54))
    v10 = *(_DWORD *)(v9 + 204);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__376_metadata__setUpOffset(a6, a1, a2, a3, a4, a5, v10, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__376_metadata__setUpOffset(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;

  v12 = (_DWORD *)((a7 + 24 * *(unsigned __int8 *)(v10 + a6 + 7) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((*v12 & 0x3FF) != 4)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalProperty(*v12 & 0x3FF, a3, a4, a5, a6, (unint64_t)v12, a8, a9, a1);
  v14 = *(char *)(v10 + a6 + 3);
  if (v14 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__376_load__done(*(_QWORD *)(v11 + 8 * *(char *)(v10 + a6 + 1)), v14, *(_QWORD *)(v11 + 8 * v14), a1, (uint64_t)a5, a6, (unint64_t)v12, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__376_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__376_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__376_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__376_load__done(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v9;

  v9 = *(const JSC::PropertyTable **)(a7 + 8);
  if (!v9 || *((_BYTE *)v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__noVariableWatchpointSet(a1, a2, a3, (uint64_t)v9, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a4, a1, a2, a3, v9, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8 * *(_QWORD *)(a6 + 16) + 32) = a3;
  v8 = *(char *)(v6 + a5 + 3);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__377_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__377_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__377_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__377_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__377_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__378_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__378_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__378_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__378_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__378_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__378_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__378_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__378_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalProperty(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if ((_DWORD)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v11 = (uint64_t *)(v10 + 8 * *(char *)(v9 + a5 + 1));
  v12 = *v11;
  v13 = 16 * *(unsigned int *)*v11;
  v14 = *(_QWORD *)(a6 + 8);
  if (v13 != v14)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a9, v12, v14, v13, a4, a5, a6, a7, a8);
  v16 = *(char *)(v9 + a5 + 3);
  if (v16 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__379_load__done(v12, v16, *(_QWORD *)(v10 + 8 * v16), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__379_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__379_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__379_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__379_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)*(_QWORD *)(a6 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__379_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -*(_DWORD *)(a6 + 16), a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__379_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__379_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__380_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__380_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__380_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__380_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__380_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__381_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__381_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__381_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__381_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__381_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__381_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__381_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__381_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a1 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalLexicalVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2064);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v13 = *(char *)(v9 + a5 + 3);
  if (v13 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__382_load__done(v13, *(_QWORD *)(v10 + 8 * v13), a9, v12, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__382_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__382_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__382_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__382_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(char *)(v6 + a5 + 3);
  if (v9 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__383_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__383_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__383_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__383_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__383_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalLexicalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;

  if ((_DWORD)a1 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pClosureVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v10 = (*(_DWORD *)a6 & 0xFFC00) >> 10;
  if ((int)v10 < 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(a9, v10, a2, a3, a4, a5, a6, a7, a8);
  v10 = **(_QWORD **)(a6 + 16);
  if (v10)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(a9, v10, a2, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a9, 0, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__384_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a1, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__384_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__384_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__384_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__384_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__384_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__384_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(char *)(v6 + a5 + 3);
  if (v9 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__385_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__385_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__385_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__385_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__385_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 72);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__385_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__385_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pClosureVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((_DWORD)a1 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalPropertyWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(char *)(v9 + a5 + 3);
  if (v12 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__386_load__done(*(_QWORD *)(v10 + 8 * *(char *)(v9 + a5 + 1)), v12, *(_QWORD *)(v10 + 8 * v12), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__386_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__386_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__386_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__386_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8 * *(_QWORD *)(a6 + 16) + 32) = a3;
  v8 = *(char *)(v6 + a5 + 3);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__387_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__387_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__387_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__387_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__387_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__388_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__388_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__388_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__388_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__388_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__388_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__388_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__388_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalPropertyWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((_DWORD)a1 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = (uint64_t *)(v10 + 8 * *(char *)(v9 + a5 + 1));
  v13 = *v12;
  v14 = 16 * *(unsigned int *)*v12;
  v15 = *(_QWORD *)(a6 + 8);
  if (v14 != v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a9, v13, v15, v14, a4, a5, a6, a7, a8);
  v16 = *(char *)(v9 + a5 + 3);
  if (v16 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__389_load__done(v13, v16, *(_QWORD *)(v10 + 8 * v16), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__389_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__389_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__389_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__389_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)*(_QWORD *)(a6 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__389_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -*(_DWORD *)(a6 + 16), a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__389_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__389_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__390_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__390_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__390_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__390_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__390_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__391_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__391_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__391_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__391_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__391_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__391_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__391_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__391_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a1 != 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalLexicalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2056);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2064);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v13 = *(char *)(v9 + a5 + 3);
  if (v13 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__392_load__done(v13, *(_QWORD *)(v10 + 8 * v13), a9, v12, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__392_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__392_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__392_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__392_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__392_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__392_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(char *)(v6 + a5 + 3);
  if (v9 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__393_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__393_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__393_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__393_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__393_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__393_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__393_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pGlobalLexicalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pClosureVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) != 2
    && ((a1 = (*(_DWORD *)a6 & 0xFFC00) >> 10, (int)a1 < 2) || (a1 = **(_QWORD **)(a6 + 16)) != 0))
  {
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__393_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(a9, a1, a2, v11, a4, a5, a6, a7, a8);
  }
  else
  {
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a9, a1, a2, v11, a4, a5, a6, a7, a8);
  }
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__393_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(char *)(v9 + a6 + 3);
  if (v11 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__394_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a1, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__394_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__394_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__394_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__394_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__394_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__394_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(char *)(v6 + a5 + 3);
  if (v9 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__395_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__395_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__395_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__395_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__395_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 72);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__395_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__395_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pClosureVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a1 != 9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pModuleVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2056);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v13 = *(char *)(v9 + a5 + 3);
  if (v13 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__396_load__done(*(_QWORD *)(v10 + 8 * *(char *)(v9 + a5 + 1)), v13, *(_QWORD *)(v10 + 8 * v13), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__396_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__396_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__396_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__396_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8 * *(_QWORD *)(a6 + 16) + 32) = a3;
  v8 = *(char *)(v6 + a5 + 3);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__397_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__397_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__397_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__397_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__397_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__398_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__398_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__398_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__398_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__398_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__398_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__398_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__398_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pModuleVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((_DWORD)a1 != 5)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = slow_path_throw_strict_mode_readonly_property_write_error(v10, a5 + v9);
  return g_opcodeMap[*(unsigned __int8 *)(v12 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__pDynamic(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_to_scope(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_put_to_scope_wide16(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 54);
  if (!*(_WORD *)(v9 + 54))
    v10 = *(_DWORD *)(v9 + 204);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__398_metadata__setUpOffset(a6, a1, a2, a3, a4, a5, v10, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__398_metadata__setUpOffset(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;

  v12 = (_DWORD *)((a7 + 24 * *(unsigned __int16 *)(v10 + a6 + 14) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((*v12 & 0x3FF) != 4)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalProperty(*v12 & 0x3FF, a3, a4, a5, a6, (unint64_t)v12, a8, a9, a1);
  v14 = *(__int16 *)(v10 + a6 + 6);
  if (v14 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__399_load__done(*(_QWORD *)(v11 + 8 * *(__int16 *)(v10 + a6 + 2)), v14, *(_QWORD *)(v11 + 8 * v14), a1, (uint64_t)a5, a6, (unint64_t)v12, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__399_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__399_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__399_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__399_load__done(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v9;

  v9 = *(const JSC::PropertyTable **)(a7 + 8);
  if (!v9 || *((_BYTE *)v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__399_putResolvedClosureVar__noVariableWatchpointSet(a1, a2, a3, (uint64_t)v9, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a4, a1, a2, a3, v9, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__399_putResolvedClosureVar__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8 * *(_QWORD *)(a6 + 16) + 32) = a3;
  v8 = *(__int16 *)(v6 + a5 + 6);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__400_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__400_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__400_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__400_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__400_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__401_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__401_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__401_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__401_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__401_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__401_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__401_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__401_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalProperty(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if ((_DWORD)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v11 = (uint64_t *)(v10 + 8 * *(__int16 *)(v9 + a5 + 2));
  v12 = *v11;
  v13 = 16 * *(unsigned int *)*v11;
  v14 = *(_QWORD *)(a6 + 8);
  if (v13 != v14)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a9, v12, v14, v13, a4, a5, a6, a7, a8);
  v16 = *(__int16 *)(v9 + a5 + 6);
  if (v16 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__402_load__done(v12, v16, *(_QWORD *)(v10 + 8 * v16), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__402_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__402_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__402_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__402_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)*(_QWORD *)(a6 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__402_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -*(_DWORD *)(a6 + 16), a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__402_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__402_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__403_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__403_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__403_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__403_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__403_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__404_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__404_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__404_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__404_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__404_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__404_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__404_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__404_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a1 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalLexicalVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2064);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v13 = *(__int16 *)(v9 + a5 + 6);
  if (v13 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__405_load__done(v13, *(_QWORD *)(v10 + 8 * v13), a9, v12, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__405_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__405_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__405_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__405_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__405_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__405_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(__int16 *)(v6 + a5 + 6);
  if (v9 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__406_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__406_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__406_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__406_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__406_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__406_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__406_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalLexicalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;

  if ((_DWORD)a1 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pClosureVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v10 = (*(_DWORD *)a6 & 0xFFC00) >> 10;
  if ((int)v10 < 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__406_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(a9, v10, a2, a3, a4, a5, a6, a7, a8);
  v10 = **(_QWORD **)(a6 + 16);
  if (v10)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__406_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(a9, v10, a2, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a9, 0, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__406_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__407_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a1, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__407_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__407_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__407_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__407_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__407_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__407_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(__int16 *)(v6 + a5 + 6);
  if (v9 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__408_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__408_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__408_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__408_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__408_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 72);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__408_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__408_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pClosureVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((_DWORD)a1 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalPropertyWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(__int16 *)(v9 + a5 + 6);
  if (v12 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__409_load__done(*(_QWORD *)(v10 + 8 * *(__int16 *)(v9 + a5 + 2)), v12, *(_QWORD *)(v10 + 8 * v12), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__409_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__409_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__409_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__409_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8 * *(_QWORD *)(a6 + 16) + 32) = a3;
  v8 = *(__int16 *)(v6 + a5 + 6);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__410_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__410_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__410_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__410_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__410_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__411_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__411_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__411_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__411_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__411_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__411_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__411_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__411_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalPropertyWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((_DWORD)a1 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = (uint64_t *)(v10 + 8 * *(__int16 *)(v9 + a5 + 2));
  v13 = *v12;
  v14 = 16 * *(unsigned int *)*v12;
  v15 = *(_QWORD *)(a6 + 8);
  if (v14 != v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a9, v13, v15, v14, a4, a5, a6, a7, a8);
  v16 = *(__int16 *)(v9 + a5 + 6);
  if (v16 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__412_load__done(v13, v16, *(_QWORD *)(v10 + 8 * v16), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__412_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__412_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__412_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__412_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)*(_QWORD *)(a6 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__412_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -*(_DWORD *)(a6 + 16), a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__412_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__412_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__413_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__413_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__413_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__413_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__413_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__414_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__414_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__414_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__414_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__414_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__414_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__414_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__414_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a1 != 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalLexicalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2056);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2064);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v13 = *(__int16 *)(v9 + a5 + 6);
  if (v13 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__415_load__done(v13, *(_QWORD *)(v10 + 8 * v13), a9, v12, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__415_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__415_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__415_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__415_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__415_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__415_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(__int16 *)(v6 + a5 + 6);
  if (v9 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__416_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__416_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__416_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__416_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__416_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__416_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__416_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pGlobalLexicalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pClosureVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) != 2
    && ((a1 = (*(_DWORD *)a6 & 0xFFC00) >> 10, (int)a1 < 2) || (a1 = **(_QWORD **)(a6 + 16)) != 0))
  {
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__416_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(a9, a1, a2, v11, a4, a5, a6, a7, a8);
  }
  else
  {
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a9, a1, a2, v11, a4, a5, a6, a7, a8);
  }
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__416_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(__int16 *)(v9 + a6 + 6);
  if (v11 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__417_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a1, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__417_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__417_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__417_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__417_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__417_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__417_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(__int16 *)(v6 + a5 + 6);
  if (v9 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__418_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__418_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__418_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__418_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__418_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 72);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__418_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__418_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pClosureVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a1 != 9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pModuleVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2056);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v13 = *(__int16 *)(v9 + a5 + 6);
  if (v13 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__419_load__done(*(_QWORD *)(v10 + 8 * *(__int16 *)(v9 + a5 + 2)), v13, *(_QWORD *)(v10 + 8 * v13), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__419_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__419_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__419_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__419_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8 * *(_QWORD *)(a6 + 16) + 32) = a3;
  v8 = *(__int16 *)(v6 + a5 + 6);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__420_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__420_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__420_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__420_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__420_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__421_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__421_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__421_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__421_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__421_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__421_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__421_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__421_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pModuleVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((_DWORD)a1 != 5)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = slow_path_throw_strict_mode_readonly_property_write_error(v10, a5 + v9);
  return g_opcodeMap[*(unsigned __int8 *)(v12 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__421_fn__pDynamic(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_to_scope(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 16)]();
}

uint64_t llint_op_put_to_scope_wide32(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;

  v10 = *(unsigned __int16 *)(v9 + 54);
  if (!*(_WORD *)(v9 + 54))
    v10 = *(_DWORD *)(v9 + 204);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__421_metadata__setUpOffset(a6, a1, a2, a3, a4, a5, v10, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__421_metadata__setUpOffset(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;

  v12 = (_DWORD *)(((a7 + 24 * *(_DWORD *)(v10 + a6 + 26)) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((*v12 & 0x3FF) != 4)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalProperty(*v12 & 0x3FF, a3, a4, a5, a6, (unint64_t)v12, a8, a9, a1);
  v14 = *(int *)(v10 + a6 + 10);
  if (v14 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__422_load__done(*(_QWORD *)(v11 + 8 * *(int *)(v10 + a6 + 2)), v14, *(_QWORD *)(v11 + 8 * v14), a1, (uint64_t)a5, a6, (unint64_t)v12, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__422_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__422_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__422_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putResolvedClosureVar__loadConstantOrVariable__size__k__422_load__done(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v9;

  v9 = *(const JSC::PropertyTable **)(a7 + 8);
  if (!v9 || *((_BYTE *)v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__422_putResolvedClosureVar__noVariableWatchpointSet(a1, a2, a3, (uint64_t)v9, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a4, a1, a2, a3, v9, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__422_putResolvedClosureVar__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8 * *(_QWORD *)(a6 + 16) + 32) = a3;
  v8 = *(int *)(v6 + a5 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__423_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__423_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__423_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__423_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__423_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__424_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__424_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__424_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__424_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__424_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__424_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__424_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__424_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalProperty(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if ((_DWORD)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v11 = (uint64_t *)(v10 + 8 * *(int *)(v9 + a5 + 2));
  v12 = *v11;
  v13 = 16 * *(unsigned int *)*v11;
  v14 = *(_QWORD *)(a6 + 8);
  if (v13 != v14)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a9, v12, v14, v13, a4, a5, a6, a7, a8);
  v16 = *(int *)(v9 + a5 + 10);
  if (v16 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__425_load__done(v12, v16, *(_QWORD *)(v10 + 8 * v16), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__425_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__425_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__425_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__425_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)*(_QWORD *)(a6 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__425_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -*(_DWORD *)(a6 + 16), a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__425_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__425_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__426_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__426_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__426_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__426_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__426_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__427_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__427_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__427_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__427_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__427_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__427_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__427_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__427_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a1 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalLexicalVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2064);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v13 = *(int *)(v9 + a5 + 10);
  if (v13 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__428_load__done(v13, *(_QWORD *)(v10 + 8 * v13), a9, v12, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__428_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__428_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__428_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__428_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__428_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__428_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(int *)(v6 + a5 + 10);
  if (v9 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__429_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__429_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__429_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__429_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__429_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__429_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__429_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalLexicalVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;

  if ((_DWORD)a1 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pClosureVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v10 = (*(_DWORD *)a6 & 0xFFC00) >> 10;
  if ((int)v10 < 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__429_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(a9, v10, a2, a3, a4, a5, a6, a7, a8);
  v10 = **(_QWORD **)(a6 + 16);
  if (v10)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__429_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(a9, v10, a2, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a9, 0, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__429_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__430_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a1, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__430_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__430_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__430_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__430_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__430_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__430_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(int *)(v6 + a5 + 10);
  if (v9 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__431_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__431_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__431_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__431_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__431_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 72);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__431_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__431_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pClosureVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((_DWORD)a1 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalPropertyWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(int *)(v9 + a5 + 10);
  if (v12 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__432_load__done(*(_QWORD *)(v10 + 8 * *(int *)(v9 + a5 + 2)), v12, *(_QWORD *)(v10 + 8 * v12), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__432_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__432_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__432_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__432_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8 * *(_QWORD *)(a6 + 16) + 32) = a3;
  v8 = *(int *)(v6 + a5 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__433_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__433_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__433_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__433_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__433_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__434_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__434_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__434_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__434_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__434_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__434_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__434_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__434_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalPropertyWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((_DWORD)a1 != 6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = (uint64_t *)(v10 + 8 * *(int *)(v9 + a5 + 2));
  v13 = *v12;
  v14 = 16 * *(unsigned int *)*v12;
  v15 = *(_QWORD *)(a6 + 8);
  if (v14 != v15)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a9, v13, v15, v14, a4, a5, a6, a7, a8);
  v16 = *(int *)(v9 + a5 + 10);
  if (v16 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__435_load__done(v13, v16, *(_QWORD *)(v10 + 8 * v16), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__435_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__435_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__435_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__loadConstantOrVariable__size__k__435_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)*(_QWORD *)(a6 + 16) >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__435_storePropertyAtVariableOffset__ready(*(_QWORD *)(a1 + 8), -*(_DWORD *)(a6 + 16), a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__435_storePropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putProperty__435_storePropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 496) = a3;
  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__436_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__436_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__436_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__436_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__436_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__437_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__437_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__437_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__437_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__437_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__437_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__437_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__437_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a1 != 7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalLexicalVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2056);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2064);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v13 = *(int *)(v9 + a5 + 10);
  if (v13 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__438_load__done(v13, *(_QWORD *)(v10 + 8 * v13), a9, v12, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__438_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__438_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__438_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__438_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__438_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__438_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(int *)(v6 + a5 + 10);
  if (v9 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__439_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__439_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__439_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__439_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__439_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__439_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalObject__439_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pGlobalLexicalVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v11;

  if ((_DWORD)a1 != 8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pClosureVarWithVarInjectionChecks(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 2056);
  if (*(_BYTE *)(v11 + 4) != 2
    && ((a1 = (*(_DWORD *)a6 & 0xFFC00) >> 10, (int)a1 < 2) || (a1 = **(_QWORD **)(a6 + 16)) != 0))
  {
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__439_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(a9, a1, a2, v11, a4, a5, a6, a7, a8);
  }
  else
  {
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a9, a1, a2, v11, a4, a5, a6, a7, a8);
  }
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__439_checkTDZInGlobalPutToScopeIfNecessary__noNeedForTDZCheck(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(int *)(v9 + a6 + 10);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__440_load__done(v11, *(_QWORD *)(v10 + 8 * v11), a1, a4, a5, a6, a7, a8, a9);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__440_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__440_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__440_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putGlobalVariable__loadConstantOrVariable__size__k__440_load__done(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  if (!v9 || *(_BYTE *)(v9 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__440_putGlobalVariable__noVariableWatchpointSet(a1, a2, v9, (unint64_t)a5, a6, a7);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a3, a1, a2, v9, a5, a6, a7, a8, a9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__440_putGlobalVariable__noVariableWatchpointSet(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = *(_QWORD **)(a6 + 16);
  *v8 = a2;
  v9 = *(int *)(v6 + a5 + 10);
  if (v9 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__441_load__done(*(_QWORD *)(v7 + 8 * v9), v9, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__441_load__constant((uint64_t)v8, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__441_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__441_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__writeBarrierOnGlobal__loadConstantOrVariableCell__loadConstantOrVariable__size__k__441_load__done(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & v5) == 0)
  {
    if (a1)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 72);
      __dmb(0xFu);
      if (!*(_BYTE *)(a4 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a4);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__441_writeBarrierOnGlobal__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnGlobalLexicalEnvironment__441_writeBarrierOnGlobal__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pClosureVarWithVarInjectionChecks(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a1 != 9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pModuleVar(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 2056);
  if (*(_BYTE *)(v12 + 4) == 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a9, a1, a2, v12, a4, a5, a6, a7, a8);
  v13 = *(int *)(v9 + a5 + 10);
  if (v13 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__442_load__done(*(_QWORD *)(v10 + 8 * *(int *)(v9 + a5 + 2)), v13, *(_QWORD *)(v10 + 8 * v13), (uint64_t)a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__442_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__442_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__442_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putClosureVar__loadConstantOrVariable__size__k__442_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8 * *(_QWORD *)(a6 + 16) + 32) = a3;
  v8 = *(int *)(v6 + a5 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__443_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__443_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__443_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__443_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__443_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__444_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__444_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__444_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__444_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__444_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__444_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__444_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__444_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pModuleVar(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((_DWORD)a1 != 5)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = slow_path_throw_strict_mode_readonly_property_write_error(v10, a5 + v9);
  return g_opcodeMap[*(unsigned __int8 *)(v12 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__444_fn__pDynamic(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_put_to_scope(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 30)]();
}

uint64_t llint_op_get_from_arguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 2)) + 8 * *(unsigned __int8 *)(v6 + a5 + 3) + 48);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 5)]();
}

uint64_t llint_op_get_from_arguments_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 4)) + 8 * *(unsigned __int16 *)(v6 + a5 + 6) + 48);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 10)]();
}

uint64_t llint_op_get_from_arguments_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 6)) + 8 * *(unsigned int *)(v6 + a5 + 10) + 48);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 18)]();
}

uint64_t llint_op_put_to_arguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1));
  v8 = *(unsigned __int8 *)(v5 + a5 + 2);
  v9 = *(char *)(v5 + a5 + 3);
  if (v9 < 16)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__445_load__done(v7, v8, *(_QWORD *)(v6 + 8 * v9), v9, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__445_load__constant(v7, v8, a3, v9);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__445_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__445_load__done(a1, a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__445_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 48) = a3;
  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__446_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__446_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__446_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__446_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__446_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOp__commonOp__fn__fn__447_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(char *)(v5 + a5 + 1);
  if (v8 < 16)
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__447_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__447_load__constant();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__447_load__constant()
{
  return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__447_load__done();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__447_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOp__commonOp__fn__fn__447_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__447_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t llint_op_put_to_arguments_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2));
  v8 = *(unsigned __int16 *)(v5 + a5 + 4);
  v9 = *(__int16 *)(v5 + a5 + 6);
  if (v9 < 64)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__448_load__done(v7, v8, *(_QWORD *)(v6 + 8 * v9), v9, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__448_load__constant(v7, v8, a3, v9);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__448_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__448_load__done(a1, a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__448_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 48) = a3;
  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__449_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__449_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__449_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__449_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__449_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOp__commonOp__fn__fn__450_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(__int16 *)(v5 + a5 + 2);
  if (v8 < 64)
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__450_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__450_load__constant();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__450_load__constant()
{
  return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__450_load__done();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__450_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOp__commonOp__fn__fn__450_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__450_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t llint_op_put_to_arguments_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2));
  v8 = *(unsigned int *)(v5 + a5 + 6);
  v9 = *(int *)(v5 + a5 + 10);
  if (v9 < 0x40000000)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__451_load__done(v7, v8, *(_QWORD *)(v6 + 8 * v9), v9, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__451_load__constant(v7, v8, a3, v9);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__451_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__451_load__done(a1, a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__451_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8 * a2 + 48) = a3;
  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__452_load__done(*(_QWORD *)(v6 + 8 * v7), v7, a3, a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__452_load__constant(a1, v7);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__452_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__452_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__loadConstantOrVariableCell__loadConstantOrVariable__size__k__452_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v6) != 0 || !a1)
    return jsc_llint_llintOp__commonOp__fn__fn__453_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
  v8 = *(int *)(v5 + a5 + 2);
  if (v8 < 0x40000000)
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__453_load__done(a1, v8, *(_QWORD *)(v7 + 8 * v8), a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__453_load__constant();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__453_load__constant()
{
  return jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__453_load__done();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__writeBarrierOnOperands__writeBarrierOnOperand__writeBarrierOnOperandWithReload__loadConstantOrVariableCell__loadConstantOrVariable__size__k__453_load__done(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a3 & v5) == 0)
  {
    __dmb(0xFu);
    if (!*(_BYTE *)(a3 + 7))
    {
      v8 = a5;
      a1 = llint_write_barrier_slow(v6, a3);
      a5 = v8;
    }
  }
  return jsc_llint_llintOp__commonOp__fn__fn__453_writeBarrierOnOperands__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__453_writeBarrierOnOperands__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t llint_op_get_parent_scope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)) = *(_QWORD *)(*(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 2)) + 16);
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_get_parent_scope_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)) = *(_QWORD *)(*(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 4))
                                                                + 16);
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_get_parent_scope_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)) = *(_QWORD *)(*(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 6)) + 16);
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_profile_type(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 **v9;
  uint64_t v10;

  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 72) + 93176;
  v8 = *(_QWORD *)v7;
  v9 = *(__int128 ***)(*(_QWORD *)v7 + 24);
  v10 = *(char *)(v5 + a5 + 1);
  if (v10 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__454_load__done(*(__int128 **)(v6 + 8 * v10), v8, v9, v10, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__454_load__constant(a1, v8, (uint64_t)v9, v10);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__454_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__454_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__454_load__done(__int128 *a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  if (!a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opProfileTypeDone(0, a2, (uint64_t)a3, a4, a5);
  *a3 = a1;
  v6 = *(unsigned __int16 *)(v5 + 40);
  if (!*(_WORD *)(v5 + 40))
    v6 = *(_DWORD *)(v5 + 176);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__454_metadata__setUpOffset(a1, a2, (uint64_t)a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__454_metadata__setUpOffset(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v9 = (uint64_t *)((a6 + 8 * *(unsigned __int8 *)(v7 + a5 + 6) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  *(_QWORD *)(a3 + 8) = *v9;
  if (((unint64_t)a1 & v8) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opProfileTypeIsCell(a1, a2, a3);
  *(_DWORD *)(a3 + 16) = 0;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opProfileTypeSkipIsCell(a1, a2, a3, v10, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opProfileTypeIsCell(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 16) = *a1;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opProfileTypeSkipIsCell();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opProfileTypeSkipIsCell(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a3 + 24;
  *(_QWORD *)(a2 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  if (v7 == v8)
  {
    a1 = slow_path_profile_type_clear_log(v6, (const void *)(a5 + v5));
    a5 = (uint64_t)a1 - v5;
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opProfileTypeDone((uint64_t)a1, v8, v7, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__opProfileTypeDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 7)]();
}

uint64_t llint_op_profile_type_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 **v9;
  uint64_t v10;

  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 72) + 93176;
  v8 = *(_QWORD *)v7;
  v9 = *(__int128 ***)(*(_QWORD *)v7 + 24);
  v10 = *(__int16 *)(v5 + a5 + 2);
  if (v10 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__455_load__done(*(__int128 **)(v6 + 8 * v10), v8, v9, v10, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__455_load__constant(a1, v8, (uint64_t)v9, v10);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__455_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__455_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * a4 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__455_load__done(__int128 *a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  if (!a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__455_fn__opProfileTypeDone(0, a2, (uint64_t)a3, a4, a5);
  *a3 = a1;
  v6 = *(unsigned __int16 *)(v5 + 40);
  if (!*(_WORD *)(v5 + 40))
    v6 = *(_DWORD *)(v5 + 176);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__455_metadata__setUpOffset(a1, a2, (uint64_t)a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__455_metadata__setUpOffset(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v9 = (uint64_t *)((a6 + 8 * *(unsigned __int16 *)(v7 + a5 + 12) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  *(_QWORD *)(a3 + 8) = *v9;
  if (((unint64_t)a1 & v8) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__455_fn__opProfileTypeIsCell(a1, a2, a3);
  *(_DWORD *)(a3 + 16) = 0;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__455_fn__opProfileTypeSkipIsCell(a1, a2, a3, v10, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__455_fn__opProfileTypeIsCell(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 16) = *a1;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__455_fn__opProfileTypeSkipIsCell();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__455_fn__opProfileTypeSkipIsCell(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a3 + 24;
  *(_QWORD *)(a2 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  if (v7 == v8)
  {
    a1 = slow_path_profile_type_clear_log(v6, (const void *)(a5 + v5));
    a5 = (uint64_t)a1 - v5;
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__455_fn__opProfileTypeDone((uint64_t)a1, v8, v7, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__455_fn__opProfileTypeDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t llint_op_profile_type_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 **v9;
  uint64_t v10;

  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 72) + 93176;
  v8 = *(_QWORD *)v7;
  v9 = *(__int128 ***)(*(_QWORD *)v7 + 24);
  v10 = *(int *)(v5 + a5 + 2);
  if (v10 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__456_load__done(*(__int128 **)(v6 + 8 * v10), v8, v9, v10, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__456_load__constant(a1, v8, (uint64_t)v9, v10);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__456_load__constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__456_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 160) + 8 * (a4 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__456_load__done(__int128 *a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  if (!a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__456_fn__opProfileTypeDone(0, a2, (uint64_t)a3, a4, a5);
  *a3 = a1;
  v6 = *(unsigned __int16 *)(v5 + 40);
  if (!*(_WORD *)(v5 + 40))
    v6 = *(_DWORD *)(v5 + 176);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__456_metadata__setUpOffset(a1, a2, (uint64_t)a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__456_metadata__setUpOffset(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v9 = (uint64_t *)(((a6 + 8 * *(_DWORD *)(v7 + a5 + 22)) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  *(_QWORD *)(a3 + 8) = *v9;
  if (((unint64_t)a1 & v8) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__456_fn__opProfileTypeIsCell(a1, a2, a3);
  *(_DWORD *)(a3 + 16) = 0;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__456_fn__opProfileTypeSkipIsCell(a1, a2, a3, v10, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__456_fn__opProfileTypeIsCell(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 16) = *a1;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__456_fn__opProfileTypeSkipIsCell();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__456_fn__opProfileTypeSkipIsCell(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a3 + 24;
  *(_QWORD *)(a2 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  if (v7 == v8)
  {
    a1 = slow_path_profile_type_clear_log(v6, (const void *)(a5 + v5));
    a5 = (uint64_t)a1 - v5;
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__456_fn__opProfileTypeDone((uint64_t)a1, v8, v7, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__456_fn__opProfileTypeDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 26)]();
}

uint64_t llint_op_profile_control_flow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 42);
  if (!*(_WORD *)(v5 + 42))
    v6 = *(_DWORD *)(v5 + 180);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__457_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__457_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v8 = (a6 + 8 * *(unsigned __int8 *)(v7 + a5 + 2) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  ++*(_QWORD *)(*(_QWORD *)v8 + 24);
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 3)]();
}

uint64_t llint_op_profile_control_flow_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 42);
  if (!*(_WORD *)(v5 + 42))
    v6 = *(_DWORD *)(v5 + 180);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__458_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__458_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v8 = (a6 + 8 * *(unsigned __int16 *)(v7 + a5 + 4) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  ++*(_QWORD *)(*(_QWORD *)v8 + 24);
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 6)]();
}

uint64_t llint_op_profile_control_flow_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 42);
  if (!*(_WORD *)(v5 + 42))
    v6 = *(_DWORD *)(v5 + 180);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__459_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__459_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v8 = ((a6 + 8 * *(_DWORD *)(v7 + a5 + 6)) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  ++*(_QWORD *)(*(_QWORD *)v8 + 24);
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 10)]();
}

uint64_t llint_op_get_rest_length(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v7 = *(_DWORD *)(v6 + 32) - 1;
  v8 = *(unsigned __int8 *)(v5 + a5 + 2);
  if (v7 > (int)v8)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__boxUp((v7 - v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__storeZero();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__boxUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(char *)(v5 + a5 + 1)) = a1 | v6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 3)]();
}

uint64_t llint_op_get_rest_length_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v7 = *(_DWORD *)(v6 + 32) - 1;
  v8 = *(unsigned __int16 *)(v5 + a5 + 4);
  if (v7 > (int)v8)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__459_fn__boxUp((v7 - v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__459_fn__storeZero();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__459_fn__boxUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(__int16 *)(v5 + a5 + 2)) = a1 | v6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 6)]();
}

uint64_t llint_op_get_rest_length_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v7 = *(_DWORD *)(v6 + 32) - 1;
  v8 = *(unsigned int *)(v5 + a5 + 6);
  if (v7 > (int)v8)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__460_fn__boxUp((v7 - v8), v8, a3, a4, a5);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__460_fn__storeZero();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__460_fn__boxUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 8 * *(int *)(v5 + a5 + 2)) = a1 | v6;
  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 10)]();
}

uint64_t llint_op_iterator_open(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = iterator_open_try_fast_narrow(v9, (char *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  if ((_DWORD)v11 == 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGeneric((uint64_t)v10, v11, v12, v13, (uint64_t)&v10[-v8]);
  else
    return g_opcodeMap[v10[10]]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGeneric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 8);
  if (!*(_WORD *)(v5 + 8))
    v6 = *(_DWORD *)(v5 + 112);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__460_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__460_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = (a6 + 112 * *(unsigned __int8 *)(v7 + a5 + 9) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(char *)(v7 + a5 + 4);
  if ((v10 & v8) == 0)
  {
    a4 = *(unsigned int *)v10;
    *(_DWORD *)(v9 + 96) = a4;
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__462_fn__done(v10, a2, a3, a4, a5, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__462_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(char *)(v6 + a5 + 3);
  if (v8 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__460_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__460_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__460_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__460_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__460_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v7 - 8 * *(unsigned __int8 *)(v6 + a5 + 5);
  *(_DWORD *)(v8 + 32) = 1;
  *(_DWORD *)(v7 + 36) = a5;
  *(_QWORD *)(v8 + 24) = a1;
  v9 = *(_QWORD *)(a6 + 40);
  if ((v9 & 1) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__notPolymorphic(a1, v9, 1, v8, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__notPolymorphic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__opCallSlow(a1, a2, a3, a4, a5, a6);
}

uint64_t op_iterator_open_return_location(uint64_t a1, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(unsigned int *)(v7 + 36);
  v9 = *(char *)(v6 + v8 + 1);
  *(_QWORD *)(v7 + 8 * v9) = a1;
  v10 = -16 * *(unsigned __int8 *)(v6 + v8 + 7);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + v8 + 7) - 16) = a1;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByIdStart(a1, v9, v10, a2, a5, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__opCallSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__dispatch(a1, a2, a6, a4, a5, qword_1ECF4C220);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getByIdStart(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(v9 + 8 * *(char *)(v7 + a6 + 1));
  if ((v10 & v8) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGenericGetNextSlow(a4, a1, a2, a3, v10, a6);
  v11 = *(unsigned __int16 *)(v6 + 8);
  if (!*(_WORD *)(v6 + 8))
    v11 = *(_DWORD *)(v6 + 112);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__461_metadata__setUpOffset(a1, a2, v11, v10, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__461_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(((a3 + 112 * *(unsigned __int8 *)(v6 + a5 + 9) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)+ 94));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGenericGetNextSlow(a6, v8, v7, a3, (uint64_t)a4, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__461_loadPropertyAtVariableOffset__ready(v8, -v9, a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__461_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__461_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 8) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGenericGetNextSlow(a6, a1, v6, a3, v7, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__462_loadPropertyAtVariableOffset__ready(a1, -v9, a3, *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__462_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__462_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 8) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGenericGetNextSlow(a6, v11, a2, a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGenericGetNextSlow(a6, v11, a2, a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGenericGetNextSlow(a6, v11, a2, a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a5 + 8) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(char *)(v7 + a5 + 2)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_performGetByIDHelper__opGetByIdUnset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *(unsigned int *)(a4 + 80);
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGenericGetNextSlow(a1, v10, v9, a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a6 + 8) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(char *)(v7 + a6 + 2)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 10)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorOpenGenericGetNextSlow(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *next;

  next = llint_slow_path_iterator_open_get_next(v7, (JSC::OpIteratorOpen *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)next + 10)]();
}

uint64_t llint_op_iterator_open_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = iterator_open_try_fast_wide16(v9, a5 + v8, a3, a4, a5 + v8, a6, a7, a8);
  if ((_DWORD)v11 == 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGeneric(v10, v11, v12, v13, v10 - v8);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v10 + 20)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGeneric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 8);
  if (!*(_WORD *)(v5 + 8))
    v6 = *(_DWORD *)(v5 + 112);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__462_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__462_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = (a6 + 112 * *(unsigned __int16 *)(v7 + a5 + 18) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(__int16 *)(v7 + a5 + 8);
  if ((v10 & v8) == 0)
  {
    a4 = *(unsigned int *)v10;
    *(_DWORD *)(v9 + 96) = a4;
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__done(v10, a2, a3, a4, a5, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(__int16 *)(v6 + a5 + 6);
  if (v8 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__462_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__462_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__462_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__462_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__462_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v7 - 8 * *(unsigned __int16 *)(v6 + a5 + 10);
  *(_DWORD *)(v8 + 32) = 1;
  *(_DWORD *)(v7 + 36) = a5;
  *(_QWORD *)(v8 + 24) = a1;
  v9 = *(_QWORD *)(a6 + 40);
  if ((v9 & 1) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_callHelper__notPolymorphic(a1, v9, 1, v8, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_callHelper__notPolymorphic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_callHelper__opCallSlow(a1, a2, a3, a4, a5, a6);
}

uint64_t op_iterator_open_return_location_wide16(uint64_t a1, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(unsigned int *)(v7 + 36);
  v9 = *(__int16 *)(v6 + v8 + 2);
  *(_QWORD *)(v7 + 8 * v9) = a1;
  v10 = -16 * *(unsigned __int16 *)(v6 + v8 + 14);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + v8 + 14) - 16) = a1;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__getByIdStart(a1, v9, v10, a2, a5, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_callHelper__opCallSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__462_callHelper__dispatch(a1, a2, a6, a4, a5, qword_1ECF4C220);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__getByIdStart(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(v9 + 8 * *(__int16 *)(v7 + a6 + 2));
  if ((v10 & v8) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGenericGetNextSlow(a4, a1, a2, a3, v10, a6);
  v11 = *(unsigned __int16 *)(v6 + 8);
  if (!*(_WORD *)(v6 + 8))
    v11 = *(_DWORD *)(v6 + 112);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__463_metadata__setUpOffset(a1, a2, v11, v10, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__463_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(((a3 + 112 * *(unsigned __int16 *)(v6 + a5 + 18) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)+ 94));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGenericGetNextSlow(a6, v8, v7, a3, (uint64_t)a4, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__463_loadPropertyAtVariableOffset__ready(v8, -v9, a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__463_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__463_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 16) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 4)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 20)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGenericGetNextSlow(a6, a1, v6, a3, v7, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__464_loadPropertyAtVariableOffset__ready(a1, -v9, a3, *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__464_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__464_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 16) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 4)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 20)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGenericGetNextSlow(a6, v11, a2, a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGenericGetNextSlow(a6, v11, a2, a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGenericGetNextSlow(a6, v11, a2, a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a5 + 16) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v7 + a5 + 4)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 20)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_performGetByIDHelper__opGetByIdUnset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *(unsigned int *)(a4 + 80);
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGenericGetNextSlow(a1, v10, v9, a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a6 + 16) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v7 + a6 + 4)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 20)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__464_fn__iteratorOpenGenericGetNextSlow(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *next;

  next = llint_slow_path_iterator_open_get_next(v7, (JSC::OpIteratorOpen *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)next + 20)]();
}

uint64_t llint_op_iterator_open_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = iterator_open_try_fast_wide32(v6, a5 + v5);
  if ((_DWORD)v8 == 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGeneric(v7, v8, v9, v10, v7 - v5);
  else
    return g_opcodeMap[*(unsigned __int8 *)(v7 + 38)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGeneric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 8);
  if (!*(_WORD *)(v5 + 8))
    v6 = *(_DWORD *)(v5 + 112);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__464_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__464_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = ((a6 + 112 * *(_DWORD *)(v7 + a5 + 34)) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(int *)(v7 + a5 + 14);
  if ((v10 & v8) == 0)
  {
    a4 = *(unsigned int *)v10;
    *(_DWORD *)(v9 + 96) = a4;
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__done(v10, a2, a3, a4, a5, v9);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(int *)(v6 + a5 + 10);
  if (v8 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__464_load__done(*(_QWORD *)(v7 + 8 * v8), v8, a3, a4, a5, a6);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__464_load__constant(a1, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__464_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__464_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__464_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v7 - (8 * *(_DWORD *)(v6 + a5 + 18));
  *(_DWORD *)(v8 + 32) = 1;
  *(_DWORD *)(v7 + 36) = a5;
  *(_QWORD *)(v8 + 24) = a1;
  v9 = *(_QWORD *)(a6 + 40);
  if ((v9 & 1) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_callHelper__notPolymorphic(a1, v9, 1, v8, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_callHelper__notPolymorphic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_callHelper__opCallSlow(a1, a2, a3, a4, a5, a6);
}

uint64_t op_iterator_open_return_location_wide32(uint64_t a1, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(unsigned int *)(v7 + 36);
  v9 = *(int *)(v6 + v8 + 2);
  *(_QWORD *)(v7 + 8 * v9) = a1;
  v10 = -16 * *(unsigned int *)(v6 + v8 + 26);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + v8 + 26) - 16) = a1;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__getByIdStart(a1, v9, v10, a2, a5, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_callHelper__opCallSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__464_callHelper__dispatch(a1, a2, a6, a4, a5, qword_1ECF4C220);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__getByIdStart(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(v9 + 8 * *(int *)(v7 + a6 + 2));
  if ((v10 & v8) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGenericGetNextSlow(a4, a1, a2, a3, v10, a6);
  v11 = *(unsigned __int16 *)(v6 + 8);
  if (!*(_WORD *)(v6 + 8))
    v11 = *(_DWORD *)(v6 + 112);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__465_metadata__setUpOffset(a1, a2, v11, v10, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__465_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)((((a3 + 112 * *(_DWORD *)(v6 + a5 + 34)) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)+ 94));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGenericGetNextSlow(a6, v8, v7, a3, (uint64_t)a4, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__465_loadPropertyAtVariableOffset__ready(v8, -v9, a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__465_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__465_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 30) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 6)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 38)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGenericGetNextSlow(a6, a1, v6, a3, v7, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__466_loadPropertyAtVariableOffset__ready(a1, -v9, a3, *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__466_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__466_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 30) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 6)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 38)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGenericGetNextSlow(a6, v11, a2, a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGenericGetNextSlow(a6, v11, a2, a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGenericGetNextSlow(a6, v11, a2, a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a5 + 30) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(int *)(v7 + a5 + 6)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 38)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_performGetByIDHelper__opGetByIdUnset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *(unsigned int *)(a4 + 80);
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGenericGetNextSlow(a1, v10, v9, a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a6 + 30) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(int *)(v7 + a6 + 6)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 38)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__466_fn__iteratorOpenGenericGetNextSlow(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *next;

  next = llint_slow_path_iterator_open_get_next(v7, (JSC::OpIteratorOpen *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)next + 38)]();
}

uint64_t llint_op_iterator_next(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *try_fast_narrow;

  try_fast_narrow = *(__int128 **)(v9 + 8 * *(char *)(v8 + a5 + 4));
  if (try_fast_narrow)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorNextGeneric((uint64_t)try_fast_narrow, a2, a3, a4, a5);
  try_fast_narrow = iterator_next_try_fast_narrow(v9, a5 + v8, a3, a4, a5 + v8, a6, a7, a8);
  a5 = (uint64_t)try_fast_narrow - v8;
  if ((_DWORD)a2 == 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorNextGeneric((uint64_t)try_fast_narrow, a2, a3, a4, a5);
  else
    return g_opcodeMap[*((unsigned __int8 *)try_fast_narrow + 11)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__iteratorNextGeneric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 4);
  if (!*(_WORD *)(v5 + 4))
    v6 = *(_DWORD *)(v5 + 104);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__466_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__466_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v9 = *(unsigned __int8 *)(v7 + a5 + 10) << 7;
  v10 = ((a6 + v9) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(char *)(v7 + a5 + 4);
  if (v11 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__466_load__done(*(_QWORD *)(v8 + 8 * v11), v11, a3, a4, a5, v10);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__466_load__constant(v9, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__466_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__466_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__466_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v7 - 8 * *(unsigned __int8 *)(v6 + a5 + 6);
  *(_DWORD *)(v8 + 32) = 1;
  *(_DWORD *)(v7 + 36) = a5;
  *(_QWORD *)(v8 + 24) = a1;
  v9 = *(_QWORD *)(a6 + 40);
  if ((v9 & 1) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_callHelper__notPolymorphic(a1, v9, 1, v8, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_callHelper__notPolymorphic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_callHelper__opCallSlow(a1, a2, a3, a4, a5, a6);
}

uint64_t op_iterator_next_return_location(uint64_t a1, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(unsigned int *)(v7 + 36);
  v9 = *(char *)(v6 + v8 + 2);
  *(_QWORD *)(v7 + 8 * v9) = a1;
  v10 = -16 * *(unsigned __int8 *)(v6 + v8 + 7);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + v8 + 7) - 16) = a1;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneStart(a1, v9, v10, a2, a5, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_callHelper__opCallSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__466_callHelper__dispatch(a1, a2, a6, a4, a5, qword_1ECF4C220);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneStart(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(v9 + 8 * *(char *)(v7 + a6 + 2));
  if ((v10 & v8) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneSlow(a4, a1, a2, a3, v10, a6);
  v11 = *(unsigned __int16 *)(v6 + 4);
  if (!*(_WORD *)(v6 + 4))
    v11 = *(_DWORD *)(v6 + 104);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__467_metadata__setUpOffset(a1, a2, v11, v10, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__467_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__468_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(((a3 + (*(unsigned __int8 *)(v6 + a5 + 10) << 7) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 94));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__468_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__468_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneSlow(a6, v8, v7, a3, (uint64_t)a4, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__467_loadPropertyAtVariableOffset__ready(a6, v8, -v9, a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__467_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__467_loadPropertyAtVariableOffset__ready(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a5 + 8 * a3 + 496);
  v10 = -16 * *(unsigned __int8 *)(v7 + a6 + 8);
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a6 + 8) - 16) = v9;
  v11 = *(char *)(v7 + a6 + 1);
  *(_QWORD *)(v8 + 8 * v11) = v9;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueStart(v9, v11, v10, a5, a6, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__468_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__468_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneSlow(a6, a1, v6, a3, v7, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__468_loadPropertyAtVariableOffset__ready(a6, a1, -v9, a3, *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__468_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__468_loadPropertyAtVariableOffset__ready(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a5 + 8 * a3 + 496);
  v10 = -16 * *(unsigned __int8 *)(v7 + a6 + 8);
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a6 + 8) - 16) = v9;
  v11 = *(char *)(v7 + a6 + 1);
  *(_QWORD *)(v8 + 8 * v11) = v9;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueStart(v9, v11, v10, a5, a6, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__468_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__468_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneSlow(a6, v11, a2, a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneSlow(a6, v11, a2, a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneSlow(a6, v11, a2, a3, a4, a5);
  v12 = v11 | v8;
  v13 = -16 * *(unsigned __int8 *)(v7 + a5 + 8);
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a5 + 8) - 16) = v12;
  v14 = *(char *)(v7 + a5 + 1);
  *(_QWORD *)(v9 + 8 * v14) = v12;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueStart(v12, v14, v13, a4, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__468_performGetByIDHelper__opGetByIdUnset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v9 = *a5;
  v10 = *(unsigned int *)(a4 + 80);
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneSlow(a1, v10, v9, a4, (uint64_t)a5, a6);
  v12 = -16 * *(unsigned __int8 *)(v7 + a6 + 8);
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a6 + 8) - 16) = 10;
  v13 = *(char *)(v7 + a6 + 1);
  *(_QWORD *)(v8 + 8 * v13) = 10;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueStart(10, v13, v12, (uint64_t)a5, a6, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getDoneSlow(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *done;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  done = llint_slow_path_iterator_next_get_done(v7, (JSC::OpIteratorNext *)(a6 + v6), a1);
  v11 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 72);
  if (*(_QWORD *)(v11 + 16))
    return llint_throw_from_slow_path_trampoline((uint64_t)done);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__branchIfException__noException((uint64_t)done, v9, v10, v11, (uint64_t)done - v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__branchIfException__noException(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueStart(*(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;

  if ((a1 & 0xFFFFFFFFFFFFFFF0) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueSlow(a6, a1, a2, a3, a4, a5);
  if ((a1 & 1) != 0)
    return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 11)]();
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__notDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__notDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = *(unsigned __int16 *)(v5 + 4);
  if (!*(_WORD *)(v5 + 4))
    v8 = *(_DWORD *)(v5 + 104);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__468_metadata__setUpOffset(a1, a2, v8, *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 2)), a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__468_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(((a3 + (*(unsigned __int8 *)(v6 + a5 + 10) << 7) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 110));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueSlow(a6, v8, v7, a3, (uint64_t)a4, a5);
  v9 = *(_DWORD *)(a3 + 100);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__469_loadPropertyAtVariableOffset__ready(v8, -v9, a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__469_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__469_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 9) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 11)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueSlow(a6, a1, v6, a3, v7, a5);
  v9 = *(_DWORD *)(a3 + 100);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__470_loadPropertyAtVariableOffset__ready(a1, -v9, a3, *(_QWORD *)(*(_QWORD *)(a3 + 104) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__470_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__470_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 9) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 11)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueSlow(a6, v11, a2, a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueSlow(a6, v11, a2, a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueSlow(a6, v11, a2, a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a5 + 9) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(char *)(v7 + a5 + 2)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 11)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_performGetByIDHelper__opGetByIdUnset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *(unsigned int *)(a4 + 96);
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueSlow(a1, v10, v9, a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned __int8 *)(v7 + a6 + 9) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(char *)(v7 + a6 + 2)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 11)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getValueSlow(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *value;

  value = llint_slow_path_iterator_next_get_value(v7, (JSC::OpIteratorNext *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)value + 11)]();
}

uint64_t llint_op_iterator_next_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *try_fast_wide16;

  try_fast_wide16 = *(__int128 **)(v9 + 8 * *(__int16 *)(v8 + a5 + 8));
  if (try_fast_wide16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__iteratorNextGeneric((uint64_t)try_fast_wide16, a2, a3, a4, a5);
  try_fast_wide16 = iterator_next_try_fast_wide16(v9, a5 + v8, a3, a4, a5 + v8, a6, a7, a8);
  a5 = (uint64_t)try_fast_wide16 - v8;
  if ((_DWORD)a2 == 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__iteratorNextGeneric((uint64_t)try_fast_wide16, a2, a3, a4, a5);
  else
    return g_opcodeMap[*((unsigned __int8 *)try_fast_wide16 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__iteratorNextGeneric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 4);
  if (!*(_WORD *)(v5 + 4))
    v6 = *(_DWORD *)(v5 + 104);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__470_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__470_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v9 = *(unsigned __int16 *)(v7 + a5 + 20) << 7;
  v10 = ((a6 + v9) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(__int16 *)(v7 + a5 + 8);
  if (v11 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__470_load__done(*(_QWORD *)(v8 + 8 * v11), v11, a3, a4, a5, v10);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__470_load__constant(v9, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__470_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__470_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__470_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v7 - 8 * *(unsigned __int16 *)(v6 + a5 + 12);
  *(_DWORD *)(v8 + 32) = 1;
  *(_DWORD *)(v7 + 36) = a5;
  *(_QWORD *)(v8 + 24) = a1;
  v9 = *(_QWORD *)(a6 + 40);
  if ((v9 & 1) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_callHelper__notPolymorphic(a1, v9, 1, v8, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_callHelper__notPolymorphic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_callHelper__opCallSlow(a1, a2, a3, a4, a5, a6);
}

uint64_t op_iterator_next_return_location_wide16(uint64_t a1, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(unsigned int *)(v7 + 36);
  v9 = *(__int16 *)(v6 + v8 + 4);
  *(_QWORD *)(v7 + 8 * v9) = a1;
  v10 = -16 * *(unsigned __int16 *)(v6 + v8 + 14);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + v8 + 14) - 16) = a1;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneStart(a1, v9, v10, a2, a5, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_callHelper__opCallSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__470_callHelper__dispatch(a1, a2, a6, a4, a5, qword_1ECF4C220);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneStart(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(v9 + 8 * *(__int16 *)(v7 + a6 + 4));
  if ((v10 & v8) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneSlow(a4, a1, a2, a3, v10, a6);
  v11 = *(unsigned __int16 *)(v6 + 4);
  if (!*(_WORD *)(v6 + 4))
    v11 = *(_DWORD *)(v6 + 104);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__471_metadata__setUpOffset(a1, a2, v11, v10, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__471_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(((a3 + (*(unsigned __int16 *)(v6 + a5 + 20) << 7) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 94));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneSlow(a6, v8, v7, a3, (uint64_t)a4, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__471_loadPropertyAtVariableOffset__ready(a6, v8, -v9, a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__471_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__471_loadPropertyAtVariableOffset__ready(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a5 + 8 * a3 + 496);
  v10 = -16 * *(unsigned __int16 *)(v7 + a6 + 16);
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a6 + 16) - 16) = v9;
  v11 = *(__int16 *)(v7 + a6 + 2);
  *(_QWORD *)(v8 + 8 * v11) = v9;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueStart(v9, v11, v10, a5, a6, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneSlow(a6, a1, v6, a3, v7, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__472_loadPropertyAtVariableOffset__ready(a6, a1, -v9, a3, *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__472_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__472_loadPropertyAtVariableOffset__ready(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a5 + 8 * a3 + 496);
  v10 = -16 * *(unsigned __int16 *)(v7 + a6 + 16);
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a6 + 16) - 16) = v9;
  v11 = *(__int16 *)(v7 + a6 + 2);
  *(_QWORD *)(v8 + 8 * v11) = v9;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueStart(v9, v11, v10, a5, a6, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneSlow(a6, v11, a2, a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneSlow(a6, v11, a2, a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneSlow(a6, v11, a2, a3, a4, a5);
  v12 = v11 | v8;
  v13 = -16 * *(unsigned __int16 *)(v7 + a5 + 16);
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a5 + 16) - 16) = v12;
  v14 = *(__int16 *)(v7 + a5 + 2);
  *(_QWORD *)(v9 + 8 * v14) = v12;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueStart(v12, v14, v13, a4, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_performGetByIDHelper__opGetByIdUnset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v9 = *a5;
  v10 = *(unsigned int *)(a4 + 80);
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneSlow(a1, v10, v9, a4, (uint64_t)a5, a6);
  v12 = -16 * *(unsigned __int16 *)(v7 + a6 + 16);
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a6 + 16) - 16) = 10;
  v13 = *(__int16 *)(v7 + a6 + 2);
  *(_QWORD *)(v8 + 8 * v13) = 10;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueStart(10, v13, v12, (uint64_t)a5, a6, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getDoneSlow(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *done;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  done = llint_slow_path_iterator_next_get_done(v7, (JSC::OpIteratorNext *)(a6 + v6), a1);
  v11 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 72);
  if (*(_QWORD *)(v11 + 16))
    return llint_throw_from_slow_path_trampoline((uint64_t)done);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_branchIfException__noException((uint64_t)done, v9, v10, v11, (uint64_t)done - v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__472_branchIfException__noException(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueStart(*(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;

  if ((a1 & 0xFFFFFFFFFFFFFFF0) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueSlow(a6, a1, a2, a3, a4, a5);
  if ((a1 & 1) != 0)
    return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__notDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__notDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = *(unsigned __int16 *)(v5 + 4);
  if (!*(_WORD *)(v5 + 4))
    v8 = *(_DWORD *)(v5 + 104);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__472_metadata__setUpOffset(a1, a2, v8, *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 4)), a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__472_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)(((a3 + (*(unsigned __int16 *)(v6 + a5 + 20) << 7) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 110));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueSlow(a6, v8, v7, a3, (uint64_t)a4, a5);
  v9 = *(_DWORD *)(a3 + 100);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__473_loadPropertyAtVariableOffset__ready(v8, -v9, a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__473_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__473_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 18) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 4)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueSlow(a6, a1, v6, a3, v7, a5);
  v9 = *(_DWORD *)(a3 + 100);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__474_loadPropertyAtVariableOffset__ready(a1, -v9, a3, *(_QWORD *)(*(_QWORD *)(a3 + 104) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__474_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__474_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 18) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 4)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueSlow(a6, v11, a2, a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueSlow(a6, v11, a2, a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueSlow(a6, v11, a2, a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a5 + 18) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(__int16 *)(v7 + a5 + 4)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_performGetByIDHelper__opGetByIdUnset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *(unsigned int *)(a4 + 96);
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueSlow(a1, v10, v9, a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned __int16 *)(v7 + a6 + 18) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v7 + a6 + 4)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 22)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__474_fn__getValueSlow(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *value;

  value = llint_slow_path_iterator_next_get_value(v7, (JSC::OpIteratorNext *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)value + 22)]();
}

uint64_t llint_op_iterator_next_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *try_fast_wide32;

  try_fast_wide32 = *(__int128 **)(v9 + 8 * *(int *)(v8 + a5 + 14));
  if (try_fast_wide32)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__iteratorNextGeneric((uint64_t)try_fast_wide32, a2, a3, a4, a5);
  try_fast_wide32 = iterator_next_try_fast_wide32(v9, a5 + v8, a3, a4, a5 + v8, a6, a7, a8);
  a5 = (uint64_t)try_fast_wide32 - v8;
  if ((_DWORD)a2 == 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__iteratorNextGeneric((uint64_t)try_fast_wide32, a2, a3, a4, a5);
  else
    return g_opcodeMap[*((unsigned __int8 *)try_fast_wide32 + 42)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__iteratorNextGeneric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int16 *)(v5 + 4);
  if (!*(_WORD *)(v5 + 4))
    v6 = *(_DWORD *)(v5 + 104);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__474_metadata__setUpOffset(a1, a2, a3, a4, a5, v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__474_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v9 = (*(_DWORD *)(v7 + a5 + 38) << 7);
  v10 = ((a6 + v9) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(int *)(v7 + a5 + 14);
  if (v11 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__474_load__done(*(_QWORD *)(v8 + 8 * v11), v11, a3, a4, a5, v10);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__474_load__constant(v9, v11);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__474_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__474_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__callHelper__loadConstantOrVariable__size__k__474_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v7 - (8 * *(_DWORD *)(v6 + a5 + 22));
  *(_DWORD *)(v8 + 32) = 1;
  *(_DWORD *)(v7 + 36) = a5;
  *(_QWORD *)(v8 + 24) = a1;
  v9 = *(_QWORD *)(a6 + 40);
  if ((v9 & 1) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_callHelper__notPolymorphic(a1, v9, 1, v8, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_callHelper__notPolymorphic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_callHelper__goPolymorphic(a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_callHelper__opCallSlow(a1, a2, a3, a4, a5, a6);
}

uint64_t op_iterator_next_return_location_wide32(uint64_t a1, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(unsigned int *)(v7 + 36);
  v9 = *(int *)(v6 + v8 + 6);
  *(_QWORD *)(v7 + 8 * v9) = a1;
  v10 = -16 * *(unsigned int *)(v6 + v8 + 26);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + v8 + 26) - 16) = a1;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneStart(a1, v9, v10, a2, a5, v8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_callHelper__opCallSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__474_callHelper__dispatch(a1, a2, a6, a4, a5, qword_1ECF4C220);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneStart(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(v9 + 8 * *(int *)(v7 + a6 + 6));
  if ((v10 & v8) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneSlow(a4, a1, a2, a3, v10, a6);
  v11 = *(unsigned __int16 *)(v6 + 4);
  if (!*(_WORD *)(v6 + 4))
    v11 = *(_DWORD *)(v6 + 104);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__475_metadata__setUpOffset(a1, a2, v11, v10, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__475_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)((((a3 + (*(_DWORD *)(v6 + a5 + 38) << 7)) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)+ 94));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneSlow(a6, v8, v7, a3, (uint64_t)a4, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__475_loadPropertyAtVariableOffset__ready(a6, v8, -v9, a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__475_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__475_loadPropertyAtVariableOffset__ready(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a5 + 8 * a3 + 496);
  v10 = -16 * *(unsigned int *)(v7 + a6 + 30);
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a6 + 30) - 16) = v9;
  v11 = *(int *)(v7 + a6 + 2);
  *(_QWORD *)(v8 + 8 * v11) = v9;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueStart(v9, v11, v10, a5, a6, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *(unsigned int *)(a3 + 80);
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneSlow(a6, a1, v6, a3, v7, a5);
  v9 = *(_DWORD *)(a3 + 84);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__476_loadPropertyAtVariableOffset__ready(a6, a1, -v9, a3, *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__476_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__476_loadPropertyAtVariableOffset__ready(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a5 + 8 * a3 + 496);
  v10 = -16 * *(unsigned int *)(v7 + a6 + 30);
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a6 + 30) - 16) = v9;
  v11 = *(int *)(v7 + a6 + 2);
  *(_QWORD *)(v8 + 8 * v11) = v9;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueStart(v9, v11, v10, a5, a6, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneSlow(a6, v11, a2, a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneSlow(a6, v11, a2, a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneSlow(a6, v11, a2, a3, a4, a5);
  v12 = v11 | v8;
  v13 = -16 * *(unsigned int *)(v7 + a5 + 30);
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a5 + 30) - 16) = v12;
  v14 = *(int *)(v7 + a5 + 2);
  *(_QWORD *)(v9 + 8 * v14) = v12;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueStart(v12, v14, v13, a4, a5, a6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_performGetByIDHelper__opGetByIdUnset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v9 = *a5;
  v10 = *(unsigned int *)(a4 + 80);
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneSlow(a1, v10, v9, a4, (uint64_t)a5, a6);
  v12 = -16 * *(unsigned int *)(v7 + a6 + 30);
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a6 + 30) - 16) = 10;
  v13 = *(int *)(v7 + a6 + 2);
  *(_QWORD *)(v8 + 8 * v13) = 10;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueStart(10, v13, v12, (uint64_t)a5, a6, a1);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getDoneSlow(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *done;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  done = llint_slow_path_iterator_next_get_done(v7, (JSC::OpIteratorNext *)(a6 + v6), a1);
  v11 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 72);
  if (*(_QWORD *)(v11 + 16))
    return llint_throw_from_slow_path_trampoline((uint64_t)done);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_branchIfException__noException((uint64_t)done, v9, v10, v11, (uint64_t)done - v6);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__476_branchIfException__noException(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueStart(*(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;

  if ((a1 & 0xFFFFFFFFFFFFFFF0) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueSlow(a6, a1, a2, a3, a4, a5);
  if ((a1 & 1) != 0)
    return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 42)]();
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__notDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__notDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = *(unsigned __int16 *)(v5 + 4);
  if (!*(_WORD *)(v5 + 4))
    v8 = *(_DWORD *)(v5 + 104);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__476_metadata__setUpOffset(a1, a2, v8, *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 6)), a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__476_metadata__setUpOffset(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__478_performGetByIDHelper__opGetByIdDefault(a1, *(unsigned __int8 *)((((a3 + (*(_DWORD *)(v6 + a5 + 38) << 7)) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)+ 110));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__478_performGetByIDHelper__opGetByIdDefault(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((_DWORD)a2 != 1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__478_performGetByIDHelper__opGetByIdProtoLoad(a1, a2, a3, a4, a5, a6);
  v7 = *a4;
  v8 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v8 != (_DWORD)v7)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueSlow(a6, v8, v7, a3, (uint64_t)a4, a5);
  v9 = *(_DWORD *)(a3 + 100);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__477_loadPropertyAtVariableOffset__ready(v8, -v9, a3, *((_QWORD *)a4 + 1), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__477_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__477_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 34) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 6)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 42)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__478_performGetByIDHelper__opGetByIdProtoLoad(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__478_performGetByIDHelper__opGetByIdArrayLength(a1, a2, a3, (uint64_t)a4, a5, a6);
  v6 = *a4;
  v7 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v7 != (_DWORD)v6)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueSlow(a6, a1, v6, a3, v7, a5);
  v9 = *(_DWORD *)(a3 + 100);
  if (v9 >= 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__478_loadPropertyAtVariableOffset__ready(a1, -v9, a3, *(_QWORD *)(*(_QWORD *)(a3 + 104) + 8), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__478_loadPropertyAtVariableOffset__isInline();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__performGetByIDHelper__478_loadPropertyAtVariableOffset__ready(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 + 8 * a2 + 496);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 34) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 6)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 42)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__478_performGetByIDHelper__opGetByIdArrayLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 != 3)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__478_performGetByIDHelper__opGetByIdUnset(a6, a1, a2, a3, (unsigned int *)a4, a5);
  v11 = *(unsigned __int8 *)(a4 + 4);
  if ((v11 & 1) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueSlow(a6, v11, a2, a3, a4, a5);
  if ((v11 & 0xE) == 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueSlow(a6, v11, a2, a3, a4, a5);
  v11 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
  if ((int)v11 < 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueSlow(a6, v11, a2, a3, a4, a5);
  v12 = v11 | v8;
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a5 + 34) - 16) = v12;
  *(_QWORD *)(v9 + 8 * *(int *)(v7 + a5 + 6)) = v12;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a5 + 42)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__478_performGetByIDHelper__opGetByIdUnset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *a5;
  v10 = *(unsigned int *)(a4 + 96);
  if ((_DWORD)v10 != (_DWORD)v9)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueSlow(a1, v10, v9, a4, (uint64_t)a5, a6);
  *(_QWORD *)(v6 - 16 * *(unsigned int *)(v7 + a6 + 34) - 16) = 10;
  *(_QWORD *)(v8 + 8 * *(int *)(v7 + a6 + 6)) = 10;
  return g_opcodeMap[*(unsigned __int8 *)(v7 + a6 + 42)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__478_fn__getValueSlow(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *value;

  value = llint_slow_path_iterator_next_get_value(v7, (JSC::OpIteratorNext *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)value + 42)]();
}

uint64_t llint_op_get_property_enumerator(uint64_t a1, uint64_t a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(char *)(v8 + a5 + 2);
  if (v10 < 16)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__478_load__done(*(_QWORD *)(v9 + 8 * v10), v10, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__478_load__constant(a1, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__478_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__478_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__478_load__done(uint64_t a1, uint64_t a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_BYTE *)(a1 + 4) & 0xF;
  if (a2 > 3)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(16 * *(unsigned int *)a1 + 0x40);
  if (!a2)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 5) == 1)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(a2 + 8);
  if (!a2 || (a2 & 1) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 8 * *(char *)(v8 + a5 + 1)) = a2;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 3)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__slowPath(uint64_t a1, uint64_t a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *property_enumerator;

  property_enumerator = slow_path_get_property_enumerator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)property_enumerator + 3)]();
}

uint64_t llint_op_get_property_enumerator_wide16(uint64_t a1, uint64_t a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(__int16 *)(v8 + a5 + 4);
  if (v10 < 64)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__479_load__done(*(_QWORD *)(v9 + 8 * v10), v10, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__479_load__constant(a1, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__479_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__479_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__479_load__done(uint64_t a1, uint64_t a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__479_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_BYTE *)(a1 + 4) & 0xF;
  if (a2 > 3)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__479_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(16 * *(unsigned int *)a1 + 0x40);
  if (!a2)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__479_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 5) == 1)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__479_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(a2 + 8);
  if (!a2 || (a2 & 1) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__479_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 8 * *(__int16 *)(v8 + a5 + 2)) = a2;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 6)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__479_fn__slowPath(uint64_t a1, uint64_t a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *property_enumerator;

  property_enumerator = slow_path_get_property_enumerator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)property_enumerator + 6)]();
}

uint64_t llint_op_get_property_enumerator_wide32(uint64_t a1, uint64_t a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(int *)(v8 + a5 + 6);
  if (v10 < 0x40000000)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__480_load__done(*(_QWORD *)(v9 + 8 * v10), v10, a3, a4, a5, a6, a7, a8);
  else
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__480_load__constant(a1, v10);
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__480_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__480_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__480_load__done(uint64_t a1, uint64_t a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__480_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_BYTE *)(a1 + 4) & 0xF;
  if (a2 > 3)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__480_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(16 * *(unsigned int *)a1 + 0x40);
  if (!a2)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__480_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 5) == 1)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__480_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(a2 + 8);
  if (!a2 || (a2 & 1) != 0)
    return jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__480_fn__slowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 8 * *(int *)(v8 + a5 + 2)) = a2;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 10)]();
}

uint64_t jsc_llint_llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__480_fn__slowPath(uint64_t a1, uint64_t a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *property_enumerator;

  property_enumerator = slow_path_get_property_enumerator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)property_enumerator + 10)]();
}

uint64_t llint_op_enumerator_next(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::Symbol *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v11 = *(_QWORD *)(v10 + 8 * *(char *)(v9 + a6 + 2));
  if ((_DWORD)v11 != 2)
    return jsc_llint_llintOp__commonOp__fn__fn__nextSlowPath(a1, v11, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(char *)(v9 + a6 + 4);
  if (v13 < 16)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__481_load__done(*(_QWORD *)(v10 + 8 * v13), v13, a4, a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__481_load__constant(v11, v13);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__481_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__481_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__481_load__done(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOp__commonOp__fn__fn__nextSlowPath(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 5));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOp__commonOp__fn__fn__nextSlowPath(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a3 = *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 3)) + 1;
  a4 = (JSC::Symbol *)*(unsigned int *)(a2 + 24);
  if (a3 >= a4)
    return jsc_llint_llintOp__commonOp__fn__fn__nextSlowPath(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 3)) = a3;
  *(_QWORD *)(v11 + 8 * *(char *)(v9 + a5 + 1)) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * a3);
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 7)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__nextSlowPath(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::Symbol *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v11 = slow_path_enumerator_next(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 7)]();
}

uint64_t llint_op_enumerator_next_wide16(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::Symbol *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v11 = *(_QWORD *)(v10 + 8 * *(__int16 *)(v9 + a6 + 4));
  if ((_DWORD)v11 != 2)
    return jsc_llint_llintOp__commonOp__fn__482_fn__nextSlowPath(a1, v11, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(__int16 *)(v9 + a6 + 8);
  if (v13 < 64)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__482_load__done(*(_QWORD *)(v10 + 8 * v13), v13, a4, a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__482_load__constant(v11, v13);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__482_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__482_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__482_load__done(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOp__commonOp__fn__482_fn__nextSlowPath(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 10));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOp__commonOp__fn__482_fn__nextSlowPath(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a3 = *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 6)) + 1;
  a4 = (JSC::Symbol *)*(unsigned int *)(a2 + 24);
  if (a3 >= a4)
    return jsc_llint_llintOp__commonOp__fn__482_fn__nextSlowPath(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 6)) = a3;
  *(_QWORD *)(v11 + 8 * *(__int16 *)(v9 + a5 + 2)) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * a3);
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 14)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__482_fn__nextSlowPath(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::Symbol *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v11 = slow_path_enumerator_next(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_enumerator_next_wide32(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::Symbol *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v11 = *(_QWORD *)(v10 + 8 * *(int *)(v9 + a6 + 6));
  if ((_DWORD)v11 != 2)
    return jsc_llint_llintOp__commonOp__fn__483_fn__nextSlowPath(a1, v11, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(int *)(v9 + a6 + 14);
  if (v13 < 0x40000000)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__483_load__done(*(_QWORD *)(v10 + 8 * v13), v13, a4, a5, a6, a7, a8, a9, a1);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__483_load__constant(v11, v13);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__483_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__483_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__483_load__done(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & v10) != 0)
    return jsc_llint_llintOp__commonOp__fn__483_fn__nextSlowPath(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 18));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOp__commonOp__fn__483_fn__nextSlowPath(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  a3 = *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 10)) + 1;
  a4 = (JSC::Symbol *)*(unsigned int *)(a2 + 24);
  if (a3 >= a4)
    return jsc_llint_llintOp__commonOp__fn__483_fn__nextSlowPath(a9, a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 10)) = a3;
  *(_QWORD *)(v11 + 8 * *(int *)(v9 + a5 + 2)) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * a3);
  return g_opcodeMap[*(unsigned __int8 *)(v9 + a5 + 26)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__483_fn__nextSlowPath(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::Symbol *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v11 = slow_path_enumerator_next(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 26)]();
}

uint64_t llint_op_enumerator_get_by_val(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 86);
  if (!*(_WORD *)(v8 + 86))
    v9 = *(_DWORD *)(v8 + 268);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__483_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__483_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v11 = (a6 + 16 * *(unsigned __int8 *)(v9 + a5 + 8) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (uint64_t *)(v10 + 8 * *(char *)(v9 + a5 + 3));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v11 + 12) | *v12;
  *(_BYTE *)(v11 + 12) |= *v12;
  if ((_DWORD)v13 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getSlowPath(v13, v14, a3, a4, a5, v11, a7, a8);
  v16 = *(char *)(v9 + a5 + 2);
  if (v16 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__484_load__done(*(_QWORD *)(v10 + 8 * v16), v16, a3, a4, a5, v11, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__484_load__constant(v13, v16);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__484_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__484_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__484_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v10 + 8 * *(char *)(v8 + a5 + 6));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(unsigned int *)(a2 + 32);
  if (*(_QWORD *)(v10 + 8 * *(char *)(v8 + a5 + 5)) < v12)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__484_fn__done(a1, v12, *(_QWORD *)(a1 + 8 * *(_QWORD *)(v10 + 8 * *(char *)(v8 + a5 + 5)) + 16), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__outOfLine();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__outOfLine()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__484_fn__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__484_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 7) - 16) = a3;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__getSlowPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_enumerator_get_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 9)]();
}

uint64_t llint_op_enumerator_get_by_val_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 86);
  if (!*(_WORD *)(v8 + 86))
    v9 = *(_DWORD *)(v8 + 268);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__484_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__484_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v11 = (a6 + 16 * *(unsigned __int16 *)(v9 + a5 + 16) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (uint64_t *)(v10 + 8 * *(__int16 *)(v9 + a5 + 6));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v11 + 12) | *v12;
  *(_BYTE *)(v11 + 12) |= *v12;
  if ((_DWORD)v13 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__485_fn__getSlowPath(v13, v14, a3, a4, a5, v11, a7, a8);
  v16 = *(__int16 *)(v9 + a5 + 4);
  if (v16 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__485_load__done(*(_QWORD *)(v10 + 8 * v16), v16, a3, a4, a5, v11, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__485_load__constant(v13, v16);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__485_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__485_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__485_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__485_fn__getSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v10 + 8 * *(__int16 *)(v8 + a5 + 12));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__485_fn__getSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(unsigned int *)(a2 + 32);
  if (*(_QWORD *)(v10 + 8 * *(__int16 *)(v8 + a5 + 10)) < v12)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__485_fn__done(a1, v12, *(_QWORD *)(a1 + 8 * *(_QWORD *)(v10 + 8 * *(__int16 *)(v8 + a5 + 10)) + 16), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__485_fn__outOfLine();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__485_fn__outOfLine()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__485_fn__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__485_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 14) - 16) = a3;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__485_fn__getSlowPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_enumerator_get_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 18)]();
}

uint64_t llint_op_enumerator_get_by_val_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 86);
  if (!*(_WORD *)(v8 + 86))
    v9 = *(_DWORD *)(v8 + 268);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__485_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__485_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v11 = ((a6 + 16 * *(_DWORD *)(v9 + a5 + 30)) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (uint64_t *)(v10 + 8 * *(int *)(v9 + a5 + 10));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v11 + 12) | *v12;
  *(_BYTE *)(v11 + 12) |= *v12;
  if ((_DWORD)v13 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__486_fn__getSlowPath(v13, v14, a3, a4, a5, v11, a7, a8);
  v16 = *(int *)(v9 + a5 + 6);
  if (v16 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__486_load__done(*(_QWORD *)(v10 + 8 * v16), v16, a3, a4, a5, v11, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__486_load__constant(v13, v16);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__486_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__486_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__486_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__486_fn__getSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v10 + 8 * *(int *)(v8 + a5 + 22));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__486_fn__getSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(unsigned int *)(a2 + 32);
  if (*(_QWORD *)(v10 + 8 * *(int *)(v8 + a5 + 18)) < v12)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__486_fn__done(a1, v12, *(_QWORD *)(a1 + 8 * *(_QWORD *)(v10 + 8 * *(int *)(v8 + a5 + 18)) + 16), a4, a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__486_fn__outOfLine();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__486_fn__outOfLine()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__486_fn__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__486_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 26) - 16) = a3;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = a3;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__486_fn__getSlowPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_enumerator_get_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 34)]();
}

uint64_t llint_op_enumerator_put_by_val(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 82);
  if (!*(_WORD *)(v8 + 82))
    v9 = *(_DWORD *)(v8 + 260);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__486_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__486_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v11 = (a6 + 16 * *(unsigned __int8 *)(v9 + a5 + 8) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (uint64_t *)(v10 + 8 * *(char *)(v9 + a5 + 2));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v11 + 12) | *v12;
  *(_BYTE *)(v11 + 12) |= *v12;
  if ((_DWORD)v13 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putSlowPath(v13, v14, a3, a4, a5, v11, a7, a8);
  v16 = *(char *)(v9 + a5 + 1);
  if (v16 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__487_load__done(*(_QWORD *)(v10 + 8 * v16), v16, a3, a4, a5, v11, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__487_load__constant(v13, v16);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__487_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__487_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__487_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v10 + 8 * *(char *)(v8 + a5 + 5));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a3 *= 16;
  if ((*(_DWORD *)(a3 + 16) & 0x40000) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(char *)(v8 + a5 + 6);
  if (v12 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__488_load__done(a1, a2, v12, *(_QWORD *)(v10 + 8 * v12), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__488_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__488_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__488_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__488_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 4));
  v8 = *(unsigned int *)(a2 + 32);
  if (v7 >= v8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__488_fn__outOfLine(a1, v8, v7, a4);
  v10 = *(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 4));
  *(_QWORD *)(a1 + 8 * v10 + 16) = a4;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__488_fn__done(a1, v8, v10, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__488_fn__outOfLine(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (a2 - a3) - 16) = a4;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__488_fn__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__488_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a4 & v5) == 0)
  {
    if (a4)
    {
      __dmb(0xFu);
      if (!*(_BYTE *)(a1 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a1);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnCellAndValueWithReload__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__writeBarrierOnCellAndValueWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 9)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__putSlowPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_enumerator_put_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 9)]();
}

uint64_t llint_op_enumerator_put_by_val_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 82);
  if (!*(_WORD *)(v8 + 82))
    v9 = *(_DWORD *)(v8 + 260);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__488_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__488_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v11 = (a6 + 16 * *(unsigned __int16 *)(v9 + a5 + 16) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (uint64_t *)(v10 + 8 * *(__int16 *)(v9 + a5 + 4));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v11 + 12) | *v12;
  *(_BYTE *)(v11 + 12) |= *v12;
  if ((_DWORD)v13 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__putSlowPath(v13, v14, a3, a4, a5, v11, a7, a8);
  v16 = *(__int16 *)(v9 + a5 + 2);
  if (v16 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__489_load__done(*(_QWORD *)(v10 + 8 * v16), v16, a3, a4, a5, v11, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__489_load__constant(v13, v16);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__489_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__489_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__489_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__putSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v10 + 8 * *(__int16 *)(v8 + a5 + 10));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__putSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a3 *= 16;
  if ((*(_DWORD *)(a3 + 16) & 0x40000) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__putSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(__int16 *)(v8 + a5 + 12);
  if (v12 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__490_load__done(a1, a2, v12, *(_QWORD *)(v10 + 8 * v12), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__490_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__490_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__490_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__490_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 8));
  v8 = *(unsigned int *)(a2 + 32);
  if (v7 >= v8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__outOfLine(a1, v8, v7, a4);
  v10 = *(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 8));
  *(_QWORD *)(a1 + 8 * v10 + 16) = a4;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__done(a1, v8, v10, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__outOfLine(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (a2 - a3) - 16) = a4;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a4 & v5) == 0)
  {
    if (a4)
    {
      __dmb(0xFu);
      if (!*(_BYTE *)(a1 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a1);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__490_writeBarrierOnCellAndValueWithReload__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__490_writeBarrierOnCellAndValueWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 18)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__490_fn__putSlowPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_enumerator_put_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 18)]();
}

uint64_t llint_op_enumerator_put_by_val_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 82);
  if (!*(_WORD *)(v8 + 82))
    v9 = *(_DWORD *)(v8 + 260);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__490_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__metadata__490_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v11 = ((a6 + 16 * *(_DWORD *)(v9 + a5 + 30)) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (uint64_t *)(v10 + 8 * *(int *)(v9 + a5 + 6));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v11 + 12) | *v12;
  *(_BYTE *)(v11 + 12) |= *v12;
  if ((_DWORD)v13 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__putSlowPath(v13, v14, a3, a4, a5, v11, a7, a8);
  v16 = *(int *)(v9 + a5 + 2);
  if (v16 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__491_load__done(*(_QWORD *)(v10 + 8 * v16), v16, a3, a4, a5, v11, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__491_load__constant(v13, v16);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__491_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__491_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariableCell__loadConstantOrVariable__size__k__491_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__putSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v10 + 8 * *(int *)(v8 + a5 + 18));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__putSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a3 *= 16;
  if ((*(_DWORD *)(a3 + 16) & 0x40000) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__putSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(int *)(v8 + a5 + 22);
  if (v12 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__492_load__done(a1, a2, v12, *(_QWORD *)(v10 + 8 * v12), a5);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__492_load__constant();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__492_load__constant()
{
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__492_load__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__loadConstantOrVariable__size__k__492_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 14));
  v8 = *(unsigned int *)(a2 + 32);
  if (v7 >= v8)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__outOfLine(a1, v8, v7, a4);
  v10 = *(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 14));
  *(_QWORD *)(a1 + 8 * v10 + 16) = a4;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__done(a1, v8, v10, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__outOfLine(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (a2 - a3) - 16) = a4;
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__done();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a4 & v5) == 0)
  {
    if (a4)
    {
      __dmb(0xFu);
      if (!*(_BYTE *)(a1 + 7))
      {
        v8 = a5;
        a1 = llint_write_barrier_slow(v6, a1);
        a5 = v8;
      }
    }
  }
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__492_writeBarrierOnCellAndValueWithReload__writeBarrierDone(a1, a2, a3, a4, a5);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__492_writeBarrierOnCellAndValueWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 34)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__492_fn__putSlowPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_enumerator_put_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 34)]();
}

uint64_t llint_op_enumerator_in_by_val(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 78);
  if (!*(_WORD *)(v8 + 78))
    v9 = *(_DWORD *)(v8 + 252);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__492_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__492_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v11 = (a6 + 16 * *(unsigned __int8 *)(v9 + a5 + 7) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (uint64_t *)(v10 + 8 * *(char *)(v9 + a5 + 3));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v11 + 12) | *v12;
  *(_BYTE *)(v11 + 12) |= *v12;
  if ((_DWORD)v13 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__callSlowPath(v13, v14, a3, a4, a5, v11, a7, a8);
  v16 = *(char *)(v9 + a5 + 2);
  if (v16 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__493_load__done(*(_QWORD *)(v10 + 8 * v16), v16, a3, a4, a5, v11, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__493_load__constant(v13, v16);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__493_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__493_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__493_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__callSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v10 + 8 * *(char *)(v8 + a5 + 6));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__callSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 8 * *(char *)(v8 + a5 + 1)) = 7;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__callSlowPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_enumerator_in_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_enumerator_in_by_val_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 78);
  if (!*(_WORD *)(v8 + 78))
    v9 = *(_DWORD *)(v8 + 252);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__493_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__493_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v11 = (a6 + 16 * *(unsigned __int16 *)(v9 + a5 + 14) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (uint64_t *)(v10 + 8 * *(__int16 *)(v9 + a5 + 6));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v11 + 12) | *v12;
  *(_BYTE *)(v11 + 12) |= *v12;
  if ((_DWORD)v13 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__494_hasPropertyImpl__callSlowPath(v13, v14, a3, a4, a5, v11, a7, a8);
  v16 = *(__int16 *)(v9 + a5 + 4);
  if (v16 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__494_load__done(*(_QWORD *)(v10 + 8 * v16), v16, a3, a4, a5, v11, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__494_load__constant(v13, v16);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__494_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__494_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__494_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__494_hasPropertyImpl__callSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v10 + 8 * *(__int16 *)(v8 + a5 + 12));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__494_hasPropertyImpl__callSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 8 * *(__int16 *)(v8 + a5 + 2)) = 7;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__494_hasPropertyImpl__callSlowPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_enumerator_in_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 16)]();
}

uint64_t llint_op_enumerator_in_by_val_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int16 *)(v8 + 78);
  if (!*(_WORD *)(v8 + 78))
    v9 = *(_DWORD *)(v8 + 252);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__494_metadata__setUpOffset(a1, a2, a3, a4, a5, v9, a7, a8);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__494_metadata__setUpOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v11 = ((a6 + 16 * *(_DWORD *)(v9 + a5 + 26)) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (uint64_t *)(v10 + 8 * *(int *)(v9 + a5 + 10));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v11 + 12) | *v12;
  *(_BYTE *)(v11 + 12) |= *v12;
  if ((_DWORD)v13 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__495_hasPropertyImpl__callSlowPath(v13, v14, a3, a4, a5, v11, a7, a8);
  v16 = *(int *)(v9 + a5 + 6);
  if (v16 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__495_load__done(*(_QWORD *)(v10 + 8 * v16), v16, a3, a4, a5, v11, a7, a8);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__495_load__constant(v13, v16);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__495_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__495_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__495_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a1 & v9) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__495_hasPropertyImpl__callSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  a2 = *(_QWORD *)(v10 + 8 * *(int *)(v8 + a5 + 22));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__495_hasPropertyImpl__callSlowPath(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 8 * *(int *)(v8 + a5 + 2)) = 7;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__495_hasPropertyImpl__callSlowPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_enumerator_in_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 30)]();
}

uint64_t llint_op_enumerator_has_own_property(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  int v7;

  v7 = *(unsigned __int16 *)(v6 + 80);
  if (!*(_WORD *)(v6 + 80))
    v7 = *(_DWORD *)(v6 + 256);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__495_metadata__setUpOffset(a6, a1, a2, a3, a4, a5, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__495_metadata__setUpOffset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v10 = (a7 + 16 * *(unsigned __int8 *)(v8 + a6 + 7) + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (uint64_t *)(v9 + 8 * *(char *)(v8 + a6 + 3));
  v12 = *v11;
  v13 = *(unsigned __int8 *)(v10 + 12) | *v11;
  *(_BYTE *)(v10 + 12) |= *v11;
  if ((_DWORD)v12 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__496_hasPropertyImpl__callSlowPath(a1, v12, v13, a4, a5, a6);
  v15 = *(char *)(v8 + a6 + 2);
  if (v15 < 16)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__496_load__done(*(_QWORD *)(v9 + 8 * v15), v15, a4, a5, a6, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__496_load__constant(v12, v15);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__496_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__496_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 128));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__496_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__496_hasPropertyImpl__callSlowPath(a6, a1, a2, a3, a4, a5);
  a2 = *(_QWORD *)(v8 + 8 * *(char *)(v6 + a5 + 6));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__496_hasPropertyImpl__callSlowPath(a6, a1, a2, a3, a4, a5);
  *(_QWORD *)(v8 + 8 * *(char *)(v6 + a5 + 1)) = 7;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 8)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__496_hasPropertyImpl__callSlowPath(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;

  v8 = slow_path_enumerator_has_own_property(v7, (JSC::OpEnumeratorHasOwnProperty *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)v8 + 8)]();
}

uint64_t llint_op_enumerator_has_own_property_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  int v7;

  v7 = *(unsigned __int16 *)(v6 + 80);
  if (!*(_WORD *)(v6 + 80))
    v7 = *(_DWORD *)(v6 + 256);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__496_metadata__setUpOffset(a6, a1, a2, a3, a4, a5, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__496_metadata__setUpOffset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v10 = (a7 + 16 * *(unsigned __int16 *)(v8 + a6 + 14) + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (uint64_t *)(v9 + 8 * *(__int16 *)(v8 + a6 + 6));
  v12 = *v11;
  v13 = *(unsigned __int8 *)(v10 + 12) | *v11;
  *(_BYTE *)(v10 + 12) |= *v11;
  if ((_DWORD)v12 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__497_hasPropertyImpl__callSlowPath(a1, v12, v13, a4, a5, a6);
  v15 = *(__int16 *)(v8 + a6 + 4);
  if (v15 < 64)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__497_load__done(*(_QWORD *)(v9 + 8 * v15), v15, a4, a5, a6, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__497_load__constant(v12, v15);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__497_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__497_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * a2 - 512));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__497_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__497_hasPropertyImpl__callSlowPath(a6, a1, a2, a3, a4, a5);
  a2 = *(_QWORD *)(v8 + 8 * *(__int16 *)(v6 + a5 + 12));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__497_hasPropertyImpl__callSlowPath(a6, a1, a2, a3, a4, a5);
  *(_QWORD *)(v8 + 8 * *(__int16 *)(v6 + a5 + 2)) = 7;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 16)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__497_hasPropertyImpl__callSlowPath(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;

  v8 = slow_path_enumerator_has_own_property(v7, (JSC::OpEnumeratorHasOwnProperty *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)v8 + 16)]();
}

uint64_t llint_op_enumerator_has_own_property_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  int v7;

  v7 = *(unsigned __int16 *)(v6 + 80);
  if (!*(_WORD *)(v6 + 80))
    v7 = *(_DWORD *)(v6 + 256);
  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__497_metadata__setUpOffset(a6, a1, a2, a3, a4, a5, v7);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__metadata__497_metadata__setUpOffset(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v10 = ((a7 + 16 * *(_DWORD *)(v8 + a6 + 26)) + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (uint64_t *)(v9 + 8 * *(int *)(v8 + a6 + 10));
  v12 = *v11;
  v13 = *(unsigned __int8 *)(v10 + 12) | *v11;
  *(_BYTE *)(v10 + 12) |= *v11;
  if ((_DWORD)v12 != 2)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__498_hasPropertyImpl__callSlowPath(a1, v12, v13, a4, a5, a6);
  v15 = *(int *)(v8 + a6 + 6);
  if (v15 < 0x40000000)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__498_load__done(*(_QWORD *)(v9 + 8 * v15), v15, a4, a5, a6, a1);
  else
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__498_load__constant(v12, v15);
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__498_load__constant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__498_load__done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 160) + 8 * (a2 - 0x40000000)));
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__hasPropertyImpl__loadConstantOrVariableCell__loadConstantOrVariable__size__k__498_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & v7) != 0)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__498_hasPropertyImpl__callSlowPath(a6, a1, a2, a3, a4, a5);
  a2 = *(_QWORD *)(v8 + 8 * *(int *)(v6 + a5 + 22));
  a3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)a3 != *(_DWORD *)a1)
    return jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__498_hasPropertyImpl__callSlowPath(a6, a1, a2, a3, a4, a5);
  *(_QWORD *)(v8 + 8 * *(int *)(v6 + a5 + 2)) = 7;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 30)]();
}

uint64_t jsc_llint_llintOpWithMetadata__llintOpWithReturn__llintOp__commonOp__fn__fn__makeReturn__fn__fn__fn__498_hasPropertyImpl__callSlowPath(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;

  v8 = slow_path_enumerator_has_own_property(v7, (JSC::OpEnumeratorHasOwnProperty *)(a6 + v6), a1);
  return g_opcodeMap[*((unsigned __int8 *)v8 + 30)]();
}

uint64_t llint_op_get_internal_field(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 2)) + 8 * *(unsigned __int8 *)(v6 + a5 + 3) + 16);
  *(_QWORD *)(v5 - 16 * *(unsigned __int8 *)(v6 + a5 + 4) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(char *)(v6 + a5 + 1)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 5)]();
}

uint64_t llint_op_get_internal_field_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 4)) + 8 * *(unsigned __int16 *)(v6 + a5 + 6) + 16);
  *(_QWORD *)(v5 - 16 * *(unsigned __int16 *)(v6 + a5 + 8) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(__int16 *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 10)]();
}

uint64_t llint_op_get_internal_field_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 6)) + 8 * *(unsigned int *)(v6 + a5 + 10) + 16);
  *(_QWORD *)(v5 - 16 * *(unsigned int *)(v6 + a5 + 14) - 16) = v8;
  *(_QWORD *)(v7 + 8 * *(int *)(v6 + a5 + 2)) = v8;
  return g_opcodeMap[*(unsigned __int8 *)(v6 + a5 + 18)]();
}

uint64_t llint_op_put_internal_field(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(char *)(v5 + a5 + 3);
  if (v7 < 16)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__499_load__done(*(_QWORD *)(v6 + 8 * *(char *)(v5 + a5 + 1)), v7, *(_QWORD *)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__499_load__constant();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__499_load__constant()
{
  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__499_load__done();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__499_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v8 = *(unsigned __int8 *)(v5 + a5 + 2);
  *(_QWORD *)(a1 + 8 * v8 + 16) = a3;
  if ((a3 & v6) == 0)
  {
    if (a3)
    {
      __dmb(0xFu);
      if (!*(_BYTE *)(a1 + 7))
      {
        v10 = a5;
        a1 = llint_write_barrier_slow(v7, a1);
        a5 = v10;
      }
    }
  }
  return jsc_llint_llintOp__commonOp__fn__fn__499_writeBarrierOnCellAndValueWithReload__writeBarrierDone(a1, v8, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__499_writeBarrierOnCellAndValueWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 4)]();
}

uint64_t llint_op_put_internal_field_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(__int16 *)(v5 + a5 + 6);
  if (v7 < 64)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__500_load__done(*(_QWORD *)(v6 + 8 * *(__int16 *)(v5 + a5 + 2)), v7, *(_QWORD *)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__500_load__constant();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__500_load__constant()
{
  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__500_load__done();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__500_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v8 = *(unsigned __int16 *)(v5 + a5 + 4);
  *(_QWORD *)(a1 + 8 * v8 + 16) = a3;
  if ((a3 & v6) == 0)
  {
    if (a3)
    {
      __dmb(0xFu);
      if (!*(_BYTE *)(a1 + 7))
      {
        v10 = a5;
        a1 = llint_write_barrier_slow(v7, a1);
        a5 = v10;
      }
    }
  }
  return jsc_llint_llintOp__commonOp__fn__fn__500_writeBarrierOnCellAndValueWithReload__writeBarrierDone(a1, v8, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__500_writeBarrierOnCellAndValueWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 8)]();
}

uint64_t llint_op_put_internal_field_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(int *)(v5 + a5 + 10);
  if (v7 < 0x40000000)
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__501_load__done(*(_QWORD *)(v6 + 8 * *(int *)(v5 + a5 + 2)), v7, *(_QWORD *)(v6 + 8 * v7), a4, a5);
  else
    return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__501_load__constant();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__501_load__constant()
{
  return jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__501_load__done();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__loadConstantOrVariable__size__k__501_load__done(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v8 = *(unsigned int *)(v5 + a5 + 6);
  *(_QWORD *)(a1 + 8 * v8 + 16) = a3;
  if ((a3 & v6) == 0)
  {
    if (a3)
    {
      __dmb(0xFu);
      if (!*(_BYTE *)(a1 + 7))
      {
        v10 = a5;
        a1 = llint_write_barrier_slow(v7, a1);
        a5 = v10;
      }
    }
  }
  return jsc_llint_llintOp__commonOp__fn__fn__501_writeBarrierOnCellAndValueWithReload__writeBarrierDone(a1, v8, a3, a4, a5);
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__501_writeBarrierOnCellAndValueWithReload__writeBarrierDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return g_opcodeMap[*(unsigned __int8 *)(v5 + a5 + 14)]();
}

uint64_t llint_op_log_shadow_chicken_prologue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *(_QWORD *)(v9[2] + 72);
  v11 = *(_QWORD *)(v10 + 93384);
  v12 = *(_QWORD **)(v11 + 16);
  if ((unint64_t)v12 >= *(_QWORD *)(v11 + 24))
    return jsc_llint_llintOp__commonOp__fn__fn__opLogShadowChickenPrologueSlow((uint64_t)v12, v10, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 16) = v12 + 7;
  v12[2] = v9;
  v12[3] = *v9;
  v12[1] = v9[3];
  v12[4] = v9[*(char *)(v8 + a5 + 1)];
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 2)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__opLogShadowChickenPrologueSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  __int128 *v10;

  v10 = llint_slow_path_log_shadow_chicken_prologue(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 2)]();
}

uint64_t llint_op_log_shadow_chicken_prologue_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *(_QWORD *)(v9[2] + 72);
  v11 = *(_QWORD *)(v10 + 93384);
  v12 = *(_QWORD **)(v11 + 16);
  if ((unint64_t)v12 >= *(_QWORD *)(v11 + 24))
    return jsc_llint_llintOp__commonOp__fn__501_fn__opLogShadowChickenPrologueSlow((uint64_t)v12, v10, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 16) = v12 + 7;
  v12[2] = v9;
  v12[3] = *v9;
  v12[1] = v9[3];
  v12[4] = v9[*(__int16 *)(v8 + a5 + 2)];
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 4)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__501_fn__opLogShadowChickenPrologueSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  __int128 *v10;

  v10 = llint_slow_path_log_shadow_chicken_prologue(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_log_shadow_chicken_prologue_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *(_QWORD *)(v9[2] + 72);
  v11 = *(_QWORD *)(v10 + 93384);
  v12 = *(_QWORD **)(v11 + 16);
  if ((unint64_t)v12 >= *(_QWORD *)(v11 + 24))
    return jsc_llint_llintOp__commonOp__fn__502_fn__opLogShadowChickenPrologueSlow((uint64_t)v12, v10, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 16) = v12 + 7;
  v12[2] = v9;
  v12[3] = *v9;
  v12[1] = v9[3];
  v12[4] = v9[*(int *)(v8 + a5 + 2)];
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 6)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__502_fn__opLogShadowChickenPrologueSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  __int128 *v10;

  v10 = llint_slow_path_log_shadow_chicken_prologue(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_log_shadow_chicken_tail(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 72);
  v11 = *(_QWORD *)(v10 + 93384);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12 >= *(_QWORD *)(v11 + 24))
    return jsc_llint_llintOp__commonOp__fn__fn__opLogShadowChickenTailSlow(v12, v10, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 16) = v12 + 56;
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 8) = 31249;
  *(_QWORD *)v12 = *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 1));
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v9 + 8 * *(char *)(v8 + a5 + 2));
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v9 + 16);
  *(_DWORD *)(v12 + 48) = a5;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 3)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__fn__opLogShadowChickenTailSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  __int128 *v10;

  v10 = llint_slow_path_log_shadow_chicken_tail(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 3)]();
}

uint64_t llint_op_log_shadow_chicken_tail_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 72);
  v11 = *(_QWORD *)(v10 + 93384);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12 >= *(_QWORD *)(v11 + 24))
    return jsc_llint_llintOp__commonOp__fn__502_fn__opLogShadowChickenTailSlow(v12, v10, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 16) = v12 + 56;
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 8) = 31249;
  *(_QWORD *)v12 = *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 2));
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v9 + 8 * *(__int16 *)(v8 + a5 + 4));
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v9 + 16);
  *(_DWORD *)(v12 + 48) = a5;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 6)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__502_fn__opLogShadowChickenTailSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  __int128 *v10;

  v10 = llint_slow_path_log_shadow_chicken_tail(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_log_shadow_chicken_tail_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 72);
  v11 = *(_QWORD *)(v10 + 93384);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12 >= *(_QWORD *)(v11 + 24))
    return jsc_llint_llintOp__commonOp__fn__503_fn__opLogShadowChickenTailSlow(v12, v10, v11, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 16) = v12 + 56;
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 8) = 31249;
  *(_QWORD *)v12 = *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 2));
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v9 + 8 * *(int *)(v8 + a5 + 6));
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v9 + 16);
  *(_DWORD *)(v12 + 48) = a5;
  return g_opcodeMap[*(unsigned __int8 *)(v8 + a5 + 10)]();
}

uint64_t jsc_llint_llintOp__commonOp__fn__503_fn__opLogShadowChickenTailSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  __int128 *v10;

  v10 = llint_slow_path_log_shadow_chicken_tail(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t fuzzer_return_early_from_loop_hint()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 8) + 64);
}

uint64_t llint_op_create_rest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *rest;

  rest = slow_path_create_rest(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)rest + 4)]();
}

uint64_t llint_op_create_rest_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *rest;

  rest = slow_path_create_rest(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)rest + 8)]();
}

uint64_t llint_op_create_rest_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *rest;

  rest = slow_path_create_rest(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)rest + 14)]();
}

uint64_t llint_op_create_this(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *this;

  this = slow_path_create_this(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)this + 5)]();
}

uint64_t llint_op_create_this_wide16(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *this;

  this = slow_path_create_this(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)this + 10)]();
}

uint64_t llint_op_create_this_wide32(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *this;

  this = slow_path_create_this(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)this + 18)]();
}

uint64_t llint_op_create_promise(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *promise;

  promise = slow_path_create_promise(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)promise + 5)]();
}

uint64_t llint_op_create_promise_wide16(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *promise;

  promise = slow_path_create_promise(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)promise + 10)]();
}

uint64_t llint_op_create_promise_wide32(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *promise;

  promise = slow_path_create_promise(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)promise + 18)]();
}

uint64_t llint_op_create_generator(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *generator;

  generator = slow_path_create_generator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)generator + 4)]();
}

uint64_t llint_op_create_generator_wide16(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *generator;

  generator = slow_path_create_generator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)generator + 8)]();
}

uint64_t llint_op_create_generator_wide32(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *generator;

  generator = slow_path_create_generator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)generator + 14)]();
}

uint64_t llint_op_create_async_generator(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *async_generator;

  async_generator = slow_path_create_async_generator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)async_generator + 4)]();
}

uint64_t llint_op_create_async_generator_wide16(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *async_generator;

  async_generator = slow_path_create_async_generator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)async_generator + 8)]();
}

uint64_t llint_op_create_async_generator_wide32(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *async_generator;

  async_generator = slow_path_create_async_generator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)async_generator + 14)]();
}

uint64_t llint_op_define_accessor_property(int8x8_t a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_define_accessor_property(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_define_accessor_property_wide16(int8x8_t a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_define_accessor_property(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_define_accessor_property_wide32(int8x8_t a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_define_accessor_property(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_define_data_property(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_define_data_property(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 5)]();
}

uint64_t llint_op_define_data_property_wide16(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_define_data_property(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_define_data_property_wide32(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_define_data_property(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 18)]();
}

uint64_t llint_op_get_by_val_with_this(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_get_by_val_with_this(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 7)]();
}

uint64_t llint_op_get_by_val_with_this_wide16(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_get_by_val_with_this(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_get_by_val_with_this_wide32(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_get_by_val_with_this(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 26)]();
}

uint64_t llint_op_instanceof_custom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_instanceof_custom(v6, a5 + v5);
  return g_opcodeMap[*((unsigned __int8 *)v7 + 5)]();
}

uint64_t llint_op_instanceof_custom_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_instanceof_custom(v6, a5 + v5);
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

uint64_t llint_op_instanceof_custom_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_instanceof_custom(v6, a5 + v5);
  return g_opcodeMap[*((unsigned __int8 *)v7 + 18)]();
}

uint64_t llint_op_is_callable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_is_callable(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 3)]();
}

uint64_t llint_op_is_callable_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_is_callable(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 6)]();
}

uint64_t llint_op_is_callable_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_is_callable(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

uint64_t llint_op_is_constructor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_is_constructor(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 3)]();
}

uint64_t llint_op_is_constructor_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_is_constructor(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 6)]();
}

uint64_t llint_op_is_constructor_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_is_constructor(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

uint64_t llint_op_new_array_buffer(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_new_array_buffer(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 5)]();
}

uint64_t llint_op_new_array_buffer_wide16(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_new_array_buffer(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 10)]();
}

uint64_t llint_op_new_array_buffer_wide32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_new_array_buffer(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 18)]();
}

uint64_t llint_op_new_array_with_spread(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSImmutableButterfly *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_new_array_with_spread(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 5)]();
}

uint64_t llint_op_new_array_with_spread_wide16(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSImmutableButterfly *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_new_array_with_spread(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 10)]();
}

uint64_t llint_op_new_array_with_spread_wide32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSImmutableButterfly *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_new_array_with_spread(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 18)]();
}

uint64_t llint_op_new_array_with_species(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::ProxyObject *a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_new_array_with_species(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_new_array_with_species_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::ProxyObject *a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_new_array_with_species(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_new_array_with_species_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::ProxyObject *a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_new_array_with_species(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_push_with_scope(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_push_with_scope(v9, (unsigned __int8 *)(a5 + v8), a3, a4, (JSC::JSObject *)(a5 + v8), a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_push_with_scope_wide16(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_push_with_scope(v9, (unsigned __int8 *)(a5 + v8), a3, a4, (JSC::JSObject *)(a5 + v8), a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_push_with_scope_wide32(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_push_with_scope(v9, (unsigned __int8 *)(a5 + v8), a3, a4, (JSC::JSObject *)(a5 + v8), a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_put_by_id_with_this(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_put_by_id_with_this(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_put_by_id_with_this_wide16(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_put_by_id_with_this(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_put_by_id_with_this_wide32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_put_by_id_with_this(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_put_by_val_with_this(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_put_by_val_with_this(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_put_by_val_with_this_wide16(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_put_by_val_with_this(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 12)]();
}

uint64_t llint_op_put_by_val_with_this_wide32(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_put_by_val_with_this(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 22)]();
}

uint64_t llint_op_resolve_scope_for_hoisting_func_decl_in_eval(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_resolve_scope_for_hoisting_func_decl_in_eval(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_resolve_scope_for_hoisting_func_decl_in_eval_wide16(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_resolve_scope_for_hoisting_func_decl_in_eval(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_resolve_scope_for_hoisting_func_decl_in_eval_wide32(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_resolve_scope_for_hoisting_func_decl_in_eval(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_spread(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSString *a4, const JSC::PropertyTable *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_spread(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 3)]();
}

uint64_t llint_op_spread_wide16(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSString *a4, const JSC::PropertyTable *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_spread(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_spread_wide32(int8x16_t a1, uint64_t a2, uint64_t a3, JSC::JSString *a4, const JSC::PropertyTable *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = slow_path_spread(v10, (unsigned __int8 *)(a6 + v9), a4, a5, a6 + v9, a7, a8, a9, a1);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 10)]();
}

uint64_t llint_op_strcat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_strcat(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_strcat_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_strcat(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_strcat_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_strcat(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_throw_static_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_throw_static_error(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 3)]();
}

uint64_t llint_op_throw_static_error_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_throw_static_error(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 6)]();
}

uint64_t llint_op_throw_static_error_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_throw_static_error(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

uint64_t llint_op_typeof(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_typeof(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 3)]();
}

uint64_t llint_op_typeof_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_typeof(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 6)]();
}

uint64_t llint_op_typeof_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_typeof(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

uint64_t llint_op_typeof_is_object(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_typeof_is_object(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 3)]();
}

uint64_t llint_op_typeof_is_object_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_typeof_is_object(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 6)]();
}

uint64_t llint_op_typeof_is_object_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = slow_path_typeof_is_object(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

void llint_op_unreachable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  slow_path_unreachable(v6, a5 + v5);
}

uint64_t sub_19900CC60(uint64_t a1)
{
  return g_opcodeMap[*(unsigned __int8 *)(a1 + 1)]();
}

void llint_op_unreachable_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  slow_path_unreachable(v6, a5 + v5);
}

uint64_t sub_19900CC9C(uint64_t a1)
{
  return g_opcodeMap[*(unsigned __int8 *)(a1 + 2)]();
}

void llint_op_unreachable_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  slow_path_unreachable(v6, a5 + v5);
}

uint64_t sub_19900CCD8(uint64_t a1)
{
  return g_opcodeMap[*(unsigned __int8 *)(a1 + 2)]();
}

uint64_t llint_op_new_promise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_new_promise(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 3)]();
}

uint64_t llint_op_new_promise_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_new_promise(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_new_promise_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_new_promise(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_new_generator(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_new_generator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 2)]();
}

uint64_t llint_op_new_generator_wide16(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_new_generator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_new_generator_wide32(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = slow_path_new_generator(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_in_by_id(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_in_by_id(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_in_by_id_wide16(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_in_by_id(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_in_by_id_wide32(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_in_by_id(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_in_by_val(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_in_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 5)]();
}

uint64_t llint_op_in_by_val_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_in_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_in_by_val_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_in_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 18)]();
}

uint64_t llint_op_has_private_name(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_has_private_name(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_has_private_name_wide16(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_has_private_name(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_has_private_name_wide32(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_has_private_name(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_has_private_brand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_has_private_brand(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 4)]();
}

uint64_t llint_op_has_private_brand_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_has_private_brand(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 8)]();
}

uint64_t llint_op_has_private_brand_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_has_private_brand(v6, (unsigned __int8 *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 14)]();
}

uint64_t llint_op_del_by_id(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_del_by_id(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 5)]();
}

uint64_t llint_op_del_by_id_wide16(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_del_by_id(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_del_by_id_wide32(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_del_by_id(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 18)]();
}

uint64_t llint_op_del_by_val(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_del_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 5)]();
}

uint64_t llint_op_del_by_val_wide16(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_del_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_del_by_val_wide32(uint64_t a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_del_by_val(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 18)]();
}

uint64_t llint_op_instanceof(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_instanceof(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_instanceof_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_instanceof(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_instanceof_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_instanceof(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_create_lexical_environment(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *lexical_environment;

  lexical_environment = llint_slow_path_create_lexical_environment(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)lexical_environment + 5)]();
}

uint64_t llint_op_create_lexical_environment_wide16(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *lexical_environment;

  lexical_environment = llint_slow_path_create_lexical_environment(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)lexical_environment + 10)]();
}

uint64_t llint_op_create_lexical_environment_wide32(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *lexical_environment;

  lexical_environment = llint_slow_path_create_lexical_environment(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)lexical_environment + 18)]();
}

uint64_t llint_op_create_direct_arguments(uint64_t a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *direct_arguments;

  direct_arguments = llint_slow_path_create_direct_arguments(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)direct_arguments + 2)]();
}

uint64_t llint_op_create_direct_arguments_wide16(uint64_t a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *direct_arguments;

  direct_arguments = llint_slow_path_create_direct_arguments(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)direct_arguments + 4)]();
}

uint64_t llint_op_create_direct_arguments_wide32(uint64_t a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *direct_arguments;

  direct_arguments = llint_slow_path_create_direct_arguments(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)direct_arguments + 6)]();
}

uint64_t llint_op_create_scoped_arguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *scoped_arguments;

  scoped_arguments = llint_slow_path_create_scoped_arguments(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)scoped_arguments + 3)]();
}

uint64_t llint_op_create_scoped_arguments_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *scoped_arguments;

  scoped_arguments = llint_slow_path_create_scoped_arguments(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)scoped_arguments + 6)]();
}

uint64_t llint_op_create_scoped_arguments_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *scoped_arguments;

  scoped_arguments = llint_slow_path_create_scoped_arguments(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)scoped_arguments + 10)]();
}

uint64_t llint_op_create_cloned_arguments(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *cloned_arguments;

  cloned_arguments = llint_slow_path_create_cloned_arguments(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)cloned_arguments + 2)]();
}

uint64_t llint_op_create_cloned_arguments_wide16(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *cloned_arguments;

  cloned_arguments = llint_slow_path_create_cloned_arguments(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)cloned_arguments + 4)]();
}

uint64_t llint_op_create_cloned_arguments_wide32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *cloned_arguments;

  cloned_arguments = llint_slow_path_create_cloned_arguments(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)cloned_arguments + 6)]();
}

uint64_t llint_op_new_array(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_new_array(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 6)]();
}

uint64_t llint_op_new_array_wide16(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_new_array(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 12)]();
}

uint64_t llint_op_new_array_wide32(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_new_array(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 22)]();
}

uint64_t llint_op_new_array_with_size(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_new_array_with_size(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 4)]();
}

uint64_t llint_op_new_array_with_size_wide16(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_new_array_with_size(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 8)]();
}

uint64_t llint_op_new_array_with_size_wide32(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;

  v11 = llint_slow_path_new_array_with_size(v10, (unsigned __int8 *)(a6 + v9), a1, a4, a5, a6 + v9, a7, a8, a9);
  return g_opcodeMap[*((unsigned __int8 *)v11 + 14)]();
}

uint64_t llint_op_new_async_func(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_async_func(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_new_async_func_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_async_func(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_new_async_func_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_async_func(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_new_async_func_exp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_async_func_exp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_new_async_func_exp_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_async_func_exp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_new_async_func_exp_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_async_func_exp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_new_async_generator_func(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_async_generator_func(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_new_async_generator_func_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_async_generator_func(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_new_async_generator_func_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_async_generator_func(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_new_async_generator_func_exp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_new_async_generator_func_exp(v6, a5 + v5);
  return g_opcodeMap[*((unsigned __int8 *)v7 + 4)]();
}

uint64_t llint_op_new_async_generator_func_exp_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_new_async_generator_func_exp(v6, a5 + v5);
  return g_opcodeMap[*((unsigned __int8 *)v7 + 8)]();
}

uint64_t llint_op_new_async_generator_func_exp_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_new_async_generator_func_exp(v6, a5 + v5);
  return g_opcodeMap[*((unsigned __int8 *)v7 + 14)]();
}

uint64_t llint_op_new_func(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_func(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_new_func_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_func(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_new_func_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_func(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_new_func_exp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_func_exp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_new_func_exp_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_func_exp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_new_func_exp_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_func_exp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_new_generator_func(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_new_generator_func(v6, a5 + v5);
  return g_opcodeMap[*((unsigned __int8 *)v7 + 4)]();
}

uint64_t llint_op_new_generator_func_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_new_generator_func(v6, a5 + v5);
  return g_opcodeMap[*((unsigned __int8 *)v7 + 8)]();
}

uint64_t llint_op_new_generator_func_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_new_generator_func(v6, a5 + v5);
  return g_opcodeMap[*((unsigned __int8 *)v7 + 14)]();
}

uint64_t llint_op_new_generator_func_exp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_generator_func_exp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_new_generator_func_exp_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_generator_func_exp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_new_generator_func_exp_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_generator_func_exp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_new_object(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_object(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 4)]();
}

uint64_t llint_op_new_object_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_object(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 8)]();
}

uint64_t llint_op_new_object_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_object(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 14)]();
}

uint64_t llint_op_new_regexp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_regexp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 3)]();
}

uint64_t llint_op_new_regexp_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_regexp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_new_regexp_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_new_regexp(v9, (unsigned __int8 *)(a5 + v8), a3, a4, a5 + v8, a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 10)]();
}

uint64_t llint_op_put_getter_by_id(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;

  v12 = llint_slow_path_put_getter_by_id(v11, (unsigned __int8 *)(a7 + v10), a1, a2, a5, a6, a7 + v10, a8, a9, a10);
  return g_opcodeMap[*((unsigned __int8 *)v12 + 5)]();
}

uint64_t llint_op_put_getter_by_id_wide16(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;

  v12 = llint_slow_path_put_getter_by_id(v11, (unsigned __int8 *)(a7 + v10), a1, a2, a5, a6, a7 + v10, a8, a9, a10);
  return g_opcodeMap[*((unsigned __int8 *)v12 + 10)]();
}

uint64_t llint_op_put_getter_by_id_wide32(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;

  v12 = llint_slow_path_put_getter_by_id(v11, (unsigned __int8 *)(a7 + v10), a1, a2, a5, a6, a7 + v10, a8, a9, a10);
  return g_opcodeMap[*((unsigned __int8 *)v12 + 18)]();
}

uint64_t llint_op_put_getter_by_val(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;

  v7 = llint_slow_path_put_getter_by_val(v6, (JSC::OpPutGetterByVal *)(a5 + v5));
  return g_opcodeMap[*(unsigned __int8 *)(v7 + 5)]();
}

uint64_t llint_op_put_getter_by_val_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;

  v7 = llint_slow_path_put_getter_by_val(v6, (JSC::OpPutGetterByVal *)(a5 + v5));
  return g_opcodeMap[*(unsigned __int8 *)(v7 + 10)]();
}

uint64_t llint_op_put_getter_by_val_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;

  v7 = llint_slow_path_put_getter_by_val(v6, (JSC::OpPutGetterByVal *)(a5 + v5));
  return g_opcodeMap[*(unsigned __int8 *)(v7 + 18)]();
}

uint64_t llint_op_put_getter_setter_by_id(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_put_getter_setter_by_id(v9, (unsigned __int8 *)(a5 + v8), a3, a4, (JSC::JSObject *)(a5 + v8), a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 6)]();
}

uint64_t llint_op_put_getter_setter_by_id_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_put_getter_setter_by_id(v9, (unsigned __int8 *)(a5 + v8), a3, a4, (JSC::JSObject *)(a5 + v8), a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 12)]();
}

uint64_t llint_op_put_getter_setter_by_id_wide32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;

  v10 = llint_slow_path_put_getter_setter_by_id(v9, (unsigned __int8 *)(a5 + v8), a3, a4, (JSC::JSObject *)(a5 + v8), a6, a7, a8);
  return g_opcodeMap[*((unsigned __int8 *)v10 + 22)]();
}

uint64_t llint_op_put_setter_by_id(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_put_setter_by_id(v6, (JSC::OpPutSetterById *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 5)]();
}

uint64_t llint_op_put_setter_by_id_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v7 = llint_slow_path_put_setter_by_id(v6, (JSC::OpPutSetterById *)(a5 + v5));
  return g_opcodeMap[*((unsigned __int8 *)v7 + 10)]();
}

