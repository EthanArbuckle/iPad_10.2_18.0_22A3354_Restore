__int128 *JSC::Wasm::LLIntGenerator::addDelegateToUnreachable(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  __int128 *result;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[28];
  uint64_t v35;

  *(_BYTE *)(a2 + 252) = 1;
  JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits>::newLabel(&v35, a2, a3, a4, a5, a6, a7, a8);
  v12 = v35;
  v13 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(v35, a2, v13, v14, v15, v16, v17, v18);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(unsigned int *)(v19 + 84);
  if (!(_DWORD)v20)
  {
    v21 = 0;
    goto LABEL_3;
  }
  v21 = *(unsigned int *)(v19 + 84);
  if (v13 != *(_DWORD *)(*(_QWORD *)(v19 + 72) + 4 * v20 - 4))
  {
LABEL_3:
    *(_DWORD *)v34 = v13;
    v22 = (_QWORD *)(v19 + 72);
    if ((_DWORD)v20 == *(_DWORD *)(v19 + 80))
      *(_DWORD *)(*(_QWORD *)(v19 + 72) + 4 * *(unsigned int *)(v19 + 84)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v21 + 1, (unint64_t)v34);
    else
      *(_DWORD *)(*v22 + 4 * v21) = v13;
    ++*(_DWORD *)(v19 + 84);
    *(_DWORD *)(a2 + 36) = 152;
  }
  if (*(_DWORD *)(a4 + 32) == 4)
  {
    if (*(_DWORD *)(a3 + 32) == 4)
      v23 = *(_DWORD *)(a3 + 8);
    else
      v23 = 0;
    v24 = *(_QWORD *)(a2 + 24);
    v25 = *(_QWORD *)a4;
    *(_BYTE *)(v25 + 8) = 1;
    LODWORD(v25) = *(_DWORD *)(v25 + 4);
    *(_BYTE *)(v12 + 8) = 1;
    v26 = *(_DWORD *)(v12 + 4);
    v27 = *(_DWORD *)(a2 + 248);
    *(_DWORD *)v34 = 2;
    *(_DWORD *)&v34[4] = v25;
    *(_DWORD *)&v34[8] = v26;
    *(_QWORD *)&v34[12] = 0;
    *(_DWORD *)&v34[20] = v27;
    *(_DWORD *)&v34[24] = v23;
    result = (__int128 *)(v24 + 136);
    v29 = *(unsigned int *)(v24 + 148);
    if ((_DWORD)v29 == *(_DWORD *)(v24 + 144))
    {
      result = (__int128 *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v29 + 1, (unint64_t)v34);
      v30 = (_OWORD *)(*(_QWORD *)(v24 + 136) + 28 * *(unsigned int *)(v24 + 148));
      v31 = *result;
      v32 = *(__int128 *)((char *)result + 12);
    }
    else
    {
      v30 = (_OWORD *)(*(_QWORD *)result + 28 * v29);
      v31 = *(_OWORD *)v34;
      v32 = *(_OWORD *)&v34[12];
    }
    *(_OWORD *)((char *)v30 + 12) = v32;
    *v30 = v31;
    ++*(_DWORD *)(v24 + 148);
    *a1 = 0;
    a1[8] = 0;
    --*(_DWORD *)v12;
  }
  else
  {
    v33 = std::__throw_bad_variant_access[abi:sn180100]();
    return (__int128 *)JSC::Wasm::LLIntGenerator::addBranch(v33);
  }
  return result;
}

void JSC::Wasm::LLIntGenerator::addBranch(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;

  v11 = a1;
  if (*(_DWORD *)(a3 + 32))
  {
    v12 = *(_QWORD *)(a3 + 56);
    if (!v12)
      goto LABEL_4;
  }
  else
  {
    v12 = *(_QWORD *)a3;
  }
  ++*(_DWORD *)v12;
LABEL_4:
  v13 = *(unsigned int *)(a5 + 12);
  if ((_DWORD)v13)
  {
    v50 = ~*(_DWORD *)(a2 + 240);
    v51 = -v13;
    v60 = a4;
    v59 = v50;
    do
    {
      v52 = v50 + v13;
      v53 = *(_QWORD *)a5 + 24 * (v51 + *(unsigned int *)(a5 + 12));
      v56 = *(_DWORD *)(v53 + 16);
      v54 = (unsigned int *)(v53 + 16);
      v55 = v56;
      if (v50 + (_DWORD)v13 != v56)
      {
        if ((JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, v52, v55, a4, a5, a6, a7, a8) & 1) == 0&& (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, v52, v55, v57, a5, a6, a7, a8) & 1) == 0)
        {
          JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v52, v55, v58, a5, a6, a7, a8);
        }
        *v54 = v52;
        a4 = v60;
        v11 = a1;
        v50 = v59;
      }
      ++v51;
      LODWORD(v13) = v13 - 1;
    }
    while ((_DWORD)v13);
  }
  v14 = a4;
  if (a4 == 0x3FFFFFFFLL)
  {
    v15 = 0;
  }
  else
  {
    v34 = v11;
    JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits>::newLabel(&v62, a2, a3, a4, a5, a6, a7, a8);
    v15 = (_DWORD *)v62;
    *(_BYTE *)(v62 + 8) = 1;
    v40 = v15[1];
    if ((_DWORD)v40 == -1)
      v41 = (unint64_t)v15;
    else
      v41 = v15[1];
    if ((_DWORD)v40 == -1)
      v42 = 1;
    else
      v42 = 2;
    if (v40 == 0xFFFFFFFFLL)
      v43 = 1;
    else
      v43 = 2;
    LOBYTE(v62) = v43;
    HIDWORD(v62) = 0;
    v63 = a2;
    v64 = (_DWORD *)v41;
    if ((JSC::WasmJfalse::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, v14, (unsigned __int8 *)&v62, v35, v36, v37, v38, v39) & 1) == 0)
    {
      LOBYTE(v62) = v42;
      HIDWORD(v62) = 0;
      v63 = a2;
      v64 = (_DWORD *)v41;
      if ((JSC::WasmJfalse::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, v14, (unsigned __int8 *)&v62, v44, a5, a6, a7, a8) & 1) == 0)
      {
        LOBYTE(v62) = v42;
        HIDWORD(v62) = 0;
        v63 = a2;
        v64 = (_DWORD *)v41;
        JSC::WasmJfalse::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v14, (uint64_t)&v62);
      }
    }
    v11 = v34;
  }
  v16 = *(_DWORD *)(a3 + 48);
  v17 = 12;
  if (!*(_DWORD *)(a3 + 32))
    v17 = 8;
  v18 = *(_DWORD *)(a2 + 240);
  v19 = v18 >= v16;
  v20 = v18 - v16;
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x198CFB12CLL);
  }
  v21 = *(unsigned int *)(*(_QWORD *)(a3 + 40) + v17);
  v22 = v20 - v21;
  if (v20 < v21)
  {
    __break(0xC471u);
    JUMPOUT(0x198CFB134);
  }
  if (!v15)
    *(_DWORD *)(a5 + 12) = v21;
  if ((_DWORD)v21)
    v23 = v20 == (_DWORD)v21;
  else
    v23 = 1;
  if (!v23)
    JSC::WasmDropKeep::emit<JSC::Wasm::LLIntGenerator>(a2, v16 + 1, v22, v21, a5, a6, a7, a8);
  *(_BYTE *)(v12 + 8) = 1;
  v24 = *(unsigned int *)(v12 + 4);
  if ((_DWORD)v24 == -1)
    v25 = v12;
  else
    v25 = *(unsigned int *)(v12 + 4);
  if ((_DWORD)v24 == -1)
    v26 = 1;
  else
    v26 = 2;
  if (v24 == 0xFFFFFFFFLL)
    v27 = 1;
  else
    v27 = 2;
  LOBYTE(v62) = v27;
  HIDWORD(v62) = 0;
  v63 = a2;
  v64 = (_DWORD *)v25;
  if ((JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, (unsigned __int8 *)&v62, v22, v21, a5, a6, a7, a8) & 1) == 0)
  {
    LOBYTE(v62) = v26;
    HIDWORD(v62) = 0;
    v63 = a2;
    v64 = (_DWORD *)v25;
    if ((JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, (unsigned __int8 *)&v62, v28, v29, v30, v31, v32, v33) & 1) == 0)
    {
      LOBYTE(v62) = v26;
      HIDWORD(v62) = 0;
      v63 = a2;
      v64 = (_DWORD *)v25;
      JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((_DWORD *)a2, (uint64_t)&v62);
    }
  }
  if (v15)
  {
    v45 = *(_DWORD *)(a2 + 16);
    JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation((uint64_t)v15, a2, v45, v29, v30, v31, v32, v33);
    v46 = *(_QWORD *)(a2 + 24);
    v47 = *(unsigned int *)(v46 + 84);
    if ((_DWORD)v47)
    {
      v48 = *(unsigned int *)(v46 + 84);
      if (v45 == *(_DWORD *)(*(_QWORD *)(v46 + 72) + 4 * v47 - 4))
      {
LABEL_48:
        *v11 = 0;
        v11[8] = 0;
        --*v15;
        goto LABEL_31;
      }
    }
    else
    {
      v48 = 0;
    }
    LODWORD(v62) = v45;
    v49 = (_QWORD *)(v46 + 72);
    if ((_DWORD)v47 == *(_DWORD *)(v46 + 80))
      *(_DWORD *)(*(_QWORD *)(v46 + 72) + 4 * *(unsigned int *)(v46 + 84)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v48 + 1, (unint64_t)&v62);
    else
      *(_DWORD *)(*v49 + 4 * v48) = v45;
    ++*(_DWORD *)(v46 + 84);
    *(_DWORD *)(a2 + 36) = 152;
    goto LABEL_48;
  }
  *v11 = 0;
  v11[8] = 0;
LABEL_31:
  --*(_DWORD *)v12;
}

void JSC::Wasm::LLIntGenerator::addBranchNull(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  int v9;
  unsigned int v11;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v9 = a6;
  v11 = a4;
  v15 = *(_DWORD *)(a2 + 240);
  if ((a6 & 1) == 0)
  {
    if (v15 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x198CFB344);
    }
    v16 = *(_DWORD *)(a2 + 244);
    if (v16 <= v15)
      v16 = v15 + 1;
    *(_DWORD *)(a2 + 240) = ++v15;
    *(_DWORD *)(a2 + 244) = v16;
  }
  if (v15 == -1)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  v17 = *(_DWORD *)(a2 + 244);
  if (v17 <= v15)
    v17 = v15 + 1;
  *(_DWORD *)(a2 + 240) = v15 + 1;
  *(_DWORD *)(a2 + 244) = v17;
  v18 = ~v15;
  if ((JSC::WasmRefIsNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v15, a4, a4, a5, a6, (uint64_t)a7, a8) & 1) == 0&& (JSC::WasmRefIsNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, v18, v11, v19, v20, v21, v22, v23) & 1) == 0)
  {
    JSC::WasmRefIsNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v18, v11, v19, v20, v21, v22, v23);
  }
  if (v9)
  {
    if ((JSC::WasmI32Eqz::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, v18, v18, v19, v20, v21, v22, v23) & 1) == 0&& (JSC::WasmI32Eqz::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, v18, v18, v24, v25, v21, v22, v23) & 1) == 0)
    {
      JSC::WasmI32Eqz::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v18, v18, v46, v47, v21, v22, v23);
    }
    v26 = -1;
  }
  else
  {
    v26 = -2;
  }
  v27 = v26 + *(unsigned int *)(a2 + 240);
  if (HIDWORD(v27))
  {
    __break(0xC471u);
    JUMPOUT(0x198CFB33CLL);
  }
  *(_DWORD *)(a2 + 240) = v27;
  JSC::Wasm::LLIntGenerator::addBranch(&v48, a2, a3, v18, a5, v21, v22, v23);
  if (!v49)
  {
    if ((v9 & 1) != 0)
    {
LABEL_26:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v33 = *(_DWORD *)(a2 + 240);
    if (v33 != -1)
    {
      v34 = *(_DWORD *)(a2 + 244);
      if (v34 <= v33)
        v34 = v33 + 1;
      *(_DWORD *)(a2 + 240) = v33 + 1;
      *(_DWORD *)(a2 + 244) = v34;
      v35 = ~v33;
      *a7 = ~v33;
      if (v11 != ~v33
        && (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v33, v11, v28, v29, v30, v31, v32) & 1) == 0&& (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, v35, v11, v36, v37, v38, v39, v40) & 1) == 0)
      {
        JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v35, v11, v41, v42, v43, v44, v45);
      }
      goto LABEL_26;
    }
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x198CFB334);
  }
  *(_QWORD *)a1 = v48;
  a1[8] = 1;
}

void JSC::Wasm::LLIntGenerator::addCallBuiltin(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  unsigned int v70;
  unsigned int v71;
  WTF *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;

  v8 = JSC::Wasm::TypeInformation::signatureForLLIntBuiltin(a2);
  if (*(_DWORD *)(v8 + 32))
    v9 = 0;
  else
    v9 = (unsigned __int8 **)(v8 + 8);
  JSC::Wasm::LLIntGenerator::callInformationForCaller((uint64_t)&v70, a1, v9);
  if (v74)
  {
    v16 = 0;
    v17 = *(unsigned int *)(a3 + 12);
    v18 = v17 - v74;
    v19 = 4 * v17 - 4 * v74;
    while (v18 + v16 < (unint64_t)*(unsigned int *)(a3 + 12))
    {
      v20 = *(_QWORD *)a3 + v19;
      v21 = *(unsigned int *)(v20 + 4 * v16);
      v22 = *((_DWORD *)v72 + v16);
      if ((_DWORD)v21 != v22
        && (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, *((_DWORD *)v72 + v16), *(unsigned int *)(v20 + 4 * v16), v11, v12, v13, v14, v15) & 1) == 0&& (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, v22, v21, v11, v12, v13, v14, v15) & 1) == 0)
      {
        JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a1, v22, v21, v11, v12, v13, v14, v15);
      }
      if (++v16 >= (unint64_t)v74)
        goto LABEL_12;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_12:
    v24 = v70;
    v23 = v71;
    v25 = v70 | a2 | v71;
    if (v25 > 0xFF)
    {
      v35 = (_DWORD *)(a1 + 40);
      if (HIWORD(v25))
      {
        v46 = *(_DWORD *)(a1 + 16);
        v77 = a1;
        v78 = v46;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v35, &v77, v10, v11, v12, v13, v14, v15);
        *(_DWORD *)(a1 + 36) = 174;
        LOBYTE(v77) = -114;
        v47 = *(unsigned int *)(a1 + 12);
        v48 = *(unsigned int *)(a1 + 16);
        if (v47 > v48)
        {
          *(_DWORD *)(a1 + 16) = v48 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v48) = -114;
          v51 = *(_DWORD *)(a1 + 12);
          v52 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v47 == *(_DWORD *)(a1 + 8))
          {
            v68 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v47 + 1), (unint64_t)&v77);
            v47 = *(unsigned int *)(a1 + 12);
            v49 = *(_QWORD *)a1;
            v50 = *v68;
          }
          else
          {
            v49 = *(_QWORD *)a1;
            v50 = -114;
          }
          *(_BYTE *)(v49 + v47) = v50;
          v51 = *(_DWORD *)(a1 + 12) + 1;
          v52 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v51;
          *(_DWORD *)(a1 + 16) = v52;
        }
        v53 = -82;
        LOBYTE(v77) = -82;
        if (v51 > v52)
        {
          *(_DWORD *)(a1 + 16) = v52 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v52) = -82;
        }
        else
        {
          v54 = v51;
          if (v51 == *(_DWORD *)(a1 + 8))
          {
            v69 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v51 + 1), (unint64_t)&v77);
            v54 = *(unsigned int *)(a1 + 12);
            v55 = *(_QWORD *)a1;
            v53 = *v69;
          }
          else
          {
            v55 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v55 + v54) = v53;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v24);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v23);
      }
      else
      {
        v36 = *(_DWORD *)(a1 + 16);
        v77 = a1;
        v78 = v36;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v35, &v77, v10, v11, v12, v13, v14, v15);
        *(_DWORD *)(a1 + 36) = 174;
        LOBYTE(v77) = -115;
        v37 = *(unsigned int *)(a1 + 12);
        v38 = *(unsigned int *)(a1 + 16);
        if (v37 > v38)
        {
          *(_DWORD *)(a1 + 16) = v38 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v38) = -115;
          v41 = *(_DWORD *)(a1 + 12);
          v42 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v37 == *(_DWORD *)(a1 + 8))
          {
            v66 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v77);
            v37 = *(unsigned int *)(a1 + 12);
            v39 = *(_QWORD *)a1;
            v40 = *v66;
          }
          else
          {
            v39 = *(_QWORD *)a1;
            v40 = -115;
          }
          *(_BYTE *)(v39 + v37) = v40;
          v41 = *(_DWORD *)(a1 + 12) + 1;
          v42 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v41;
          *(_DWORD *)(a1 + 16) = v42;
        }
        v43 = -82;
        LOBYTE(v77) = -82;
        if (v41 > v42)
        {
          *(_DWORD *)(a1 + 16) = v42 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v42) = -82;
        }
        else
        {
          v44 = v41;
          if (v41 == *(_DWORD *)(a1 + 8))
          {
            v67 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v77);
            v44 = *(unsigned int *)(a1 + 12);
            v45 = *(_QWORD *)a1;
            v43 = *v67;
          }
          else
          {
            v45 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v45 + v44) = v43;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v24);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v23);
      }
    }
    else
    {
      v26 = *(_DWORD *)(a1 + 16);
      v77 = a1;
      v78 = v26;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v77, v10, v11, v12, v13, v14, v15);
      *(_DWORD *)(a1 + 36) = 174;
      LOBYTE(v77) = -82;
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(unsigned int *)(a1 + 16);
      if (v27 > v28)
      {
        *(_DWORD *)(a1 + 16) = v28 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v28) = -82;
        v29 = *(_DWORD *)(a1 + 12);
        v30 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v27 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v77);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v27) = -82;
        v29 = *(_DWORD *)(a1 + 12) + 1;
        v30 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v29;
        *(_DWORD *)(a1 + 16) = v30;
      }
      LOBYTE(v77) = a2;
      if (v29 > v30)
      {
        *(_DWORD *)(a1 + 16) = v30 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v30) = a2;
        v31 = *(_DWORD *)(a1 + 12);
        v32 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v29 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v77);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v29) = a2;
        v31 = *(_DWORD *)(a1 + 12) + 1;
        v32 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v31;
        *(_DWORD *)(a1 + 16) = v32;
      }
      LOBYTE(v77) = v24;
      if (v31 > v32)
      {
        *(_DWORD *)(a1 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v32) = v24;
        v33 = *(_DWORD *)(a1 + 12);
        v34 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v31 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v77);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v31) = v24;
        v33 = *(_DWORD *)(a1 + 12) + 1;
        v34 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v33;
        *(_DWORD *)(a1 + 16) = v34;
      }
      LOBYTE(v77) = v23;
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = v23;
      }
      else
      {
        if (v33 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v77);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v33) = v23;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
    }
    v56 = v76;
    v76 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    v64 = v76;
    v76 = 0;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    v65 = v72;
    if (&v75 != (uint64_t *)v72)
    {
      if (v72)
      {
        v72 = 0;
        v73 = 0;
        WTF::fastFree((unint64_t)v65, v57, v58, v59, v60, v61, v62, v63);
      }
    }
  }
}

uint64_t JSC::Wasm::LLIntGenerator::addSwitch(JSC::VirtualRegister,WTF::Vector<JSC::Wasm::LLIntGenerator::ControlType *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::Wasm::LLIntGenerator::ControlType&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  _DWORD **v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;

  v8 = result;
  v9 = *(_QWORD *)result;
  if (!a2[8])
  {
    v10 = *(_QWORD *)a2;
    goto LABEL_3;
  }
  v10 = *((_QWORD *)a2 + 7);
  if (v10)
LABEL_3:
    ++*(_DWORD *)v10;
  v11 = *(_DWORD **)(result + 16);
  v12 = *v11;
  v13 = **(_DWORD ***)(result + 8);
  if (*v13 <= v12)
    goto LABEL_12;
  v14 = &v13[4 * v12 + 1];
  v14[1] = a2[12] + 1;
  v15 = *((_QWORD *)a2 + 5);
  v16 = 12;
  if (!a2[8])
    v16 = 8;
  v14[3] = *(_DWORD *)(v15 + v16);
  v17 = *(_DWORD *)(v9 + 240);
  v18 = a2[12];
  v19 = v17 >= v18;
  v20 = v17 - v18;
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x198CFBC9CLL);
  }
  v21 = 12;
  if (!a2[8])
    v21 = 8;
  v22 = *(_DWORD *)(v15 + v21);
  v19 = v20 >= v22;
  v23 = v20 - v22;
  if (!v19)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x198CFBC54);
  }
  v14[2] = v23;
  v24 = *(_DWORD *)(v10 + 4);
  if (v24 != -1)
  {
    *(_BYTE *)(v10 + 8) = 1;
    v25 = **(_DWORD **)(result + 24);
    v26 = *v11;
    *v11 = v26 + 1;
    if (*v13 <= v26)
    {
      __break(0xC471u);
      JUMPOUT(0x198CFBC74);
    }
    v13[4 * v26 + 1] = v24 - v25;
    goto LABEL_39;
  }
  v29 = *(_QWORD *)(v9 + 144);
  v28 = (uint64_t *)(v9 + 144);
  v27 = v29;
  if (v29
    || (WTF::HashTable<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::KeyValuePair<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashMap<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashTraits<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashTraits<WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>>::rehash(v28, 8uLL, 0, a4, a5, a6, a7, a8), (v27 = *v28) != 0))
  {
    v30 = *(_DWORD *)(v27 - 8);
  }
  else
  {
    v30 = 0;
  }
  v31 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
  v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
  v34 = v30 & ((v33 >> 31) ^ v33);
  v35 = (_QWORD *)(v27 + 24 * v34);
  v36 = *v35;
  if (*v35)
  {
    v37 = 0;
    v38 = 1;
    while (v36 != v10)
    {
      if (v36 == -1)
        v37 = v35;
      v34 = (v34 + v38) & v30;
      v35 = (_QWORD *)(v27 + 24 * v34);
      v36 = *v35;
      ++v38;
      if (!*v35)
      {
        if (v37)
        {
          *v37 = 0;
          v37[1] = 0;
          v37[2] = 0;
          --*(_DWORD *)(*v28 - 16);
          v35 = v37;
        }
        goto LABEL_26;
      }
    }
    goto LABEL_34;
  }
LABEL_26:
  *v35 = v10;
  v39 = v35[1];
  if (v39)
  {
    v35[1] = 0;
    *((_DWORD *)v35 + 4) = 0;
    WTF::fastFree(v39, a2, a3, a4, a5, a6, a7, a8);
  }
  v35[1] = 0;
  v35[2] = 0;
  v40 = *v28;
  if (*v28)
    v41 = *(_DWORD *)(v40 - 12) + 1;
  else
    v41 = 1;
  *(_DWORD *)(v40 - 12) = v41;
  v42 = *v28;
  if (*v28)
    v43 = *(_DWORD *)(v42 - 12);
  else
    v43 = 0;
  v44 = (*(_DWORD *)(v42 - 16) + v43);
  v45 = *(unsigned int *)(v42 - 4);
  if (v45 > 0x400)
  {
    if (v45 > 2 * v44)
      goto LABEL_34;
    goto LABEL_42;
  }
  if (3 * v45 <= 4 * v44)
  {
    if (!(_DWORD)v45)
    {
      v53 = 8;
      goto LABEL_47;
    }
LABEL_42:
    v53 = ((_DWORD)v45 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v45)));
LABEL_47:
    v35 = WTF::HashTable<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::KeyValuePair<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashMap<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashTraits<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashTraits<WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>>::rehash(v28, v53, (uint64_t)v35, a4, a5, a6, a7, a8);
  }
LABEL_34:
  v46 = *(_DWORD **)(v8 + 16);
  LODWORD(v54) = **(_DWORD **)(v8 + 24);
  v47 = *(_DWORD ***)(v8 + 8);
  v48 = *v46;
  *v46 = v48 + 1;
  v49 = *v47;
  if (*v49 <= v48)
  {
    __break(0xC471u);
    JUMPOUT(0x198CFBC94);
  }
  result = (uint64_t)(v35 + 1);
  *((_QWORD *)&v54 + 1) = &v49[4 * v48 + 1];
  v50 = *((unsigned int *)v35 + 5);
  if ((_DWORD)v50 == *((_DWORD *)v35 + 4))
  {
    result = WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v50 + 1, (unint64_t)&v54);
    v50 = *((unsigned int *)v35 + 5);
    v51 = v35[1];
    v52 = *(_OWORD *)result;
  }
  else
  {
    v51 = *(_QWORD *)result;
    v52 = v54;
  }
  *(_OWORD *)(v51 + 16 * v50) = v52;
  ++*((_DWORD *)v35 + 5);
LABEL_39:
  --*(_DWORD *)v10;
  return result;
}

void JSC::Wasm::LLIntGenerator::addEndToUnreachable(_BYTE *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  int v46;

  v12 = *(_DWORD *)(a3 + 856);
  v13 = *(_DWORD *)(a3 + 840);
  if (v13 == 5)
    v14 = v12 + 1;
  else
    v14 = *(_DWORD *)(a3 + 856);
  if ((a5 & 1) == 0 && *(_DWORD *)(a2 + 240) != *(_DWORD *)(*(_QWORD *)(a3 + 848) + 12) + v14)
  {
    __break(0xC471u);
    goto LABEL_45;
  }
  *(_DWORD *)(a2 + 240) = v12;
  if ((v13 & 0xFFFFFFFE) == 4)
  {
    v15 = *(_DWORD *)(a2 + 248);
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x198CFBF88);
    }
    *(_DWORD *)(a2 + 248) = v15 - 1;
  }
  v16 = *(_QWORD *)(a3 + 848);
  if (*(_DWORD *)(v16 + 12))
  {
    if ((a5 & 1) != 0)
    {
      v34 = 0;
      v35 = 0;
      while (1)
      {
        v36 = *(_DWORD *)(a2 + 240);
        if (v36 == -1)
          break;
        v37 = *(_DWORD *)(a2 + 244);
        if (v37 <= v36)
          v37 = v36 + 1;
        *(_DWORD *)(a2 + 240) = v36 + 1;
        *(_DWORD *)(a2 + 244) = v37;
        v38 = ~v36;
        v46 = v38;
        v39 = (uint64_t *)(*(_QWORD *)v16 + v34);
        v40 = *v39;
        v41 = v39[1];
        *(_QWORD *)&v45 = v40;
        *((_QWORD *)&v45 + 1) = v41;
        v42 = *(_DWORD *)(a3 + 12);
        if (v42 == *(_DWORD *)(a3 + 8))
        {
          v44 = v35;
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(a3, &v45, &v46, (uint64_t)a4, a5, a6, a7, a8);
          v35 = v44;
        }
        else
        {
          v43 = *(_QWORD *)a3 + 24 * v42;
          *(_QWORD *)v43 = v40;
          *(_QWORD *)(v43 + 8) = v41;
          *(_DWORD *)(v43 + 16) = v38;
          ++*(_DWORD *)(a3 + 12);
        }
        ++v35;
        v16 = *(_QWORD *)(a3 + 848);
        v34 += 16;
        if (v35 >= *(unsigned int *)(v16 + 12))
          goto LABEL_10;
      }
    }
    else
    {
      v25 = 0;
      v26 = 0;
      while (1)
      {
        v27 = *(_DWORD *)(a2 + 240);
        if (v27 == -1)
          break;
        v28 = v27 + 1;
        if (*(_DWORD *)(a2 + 244) <= v27)
          v29 = v27 + 1;
        else
          v29 = *(_DWORD *)(a2 + 244);
        *(_DWORD *)(a2 + 240) = v28;
        *(_DWORD *)(a2 + 244) = v29;
        v30 = *a4 + v25;
        v31 = *(_DWORD *)(a3 + 12);
        if (v31 == *(_DWORD *)(a3 + 8))
        {
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression&>(a3, v30, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        else
        {
          v32 = *(_QWORD *)a3 + 24 * v31;
          v33 = *(_OWORD *)v30;
          *(_QWORD *)(v32 + 16) = *(_QWORD *)(v30 + 16);
          *(_OWORD *)v32 = v33;
          ++*(_DWORD *)(a3 + 12);
        }
        ++v26;
        v25 += 24;
        if (v26 >= *(unsigned int *)(*(_QWORD *)(a3 + 848) + 12))
          goto LABEL_10;
      }
    }
    __break(0xC471u);
LABEL_45:
    JUMPOUT(0x198CFBF54);
  }
LABEL_10:
  v17 = *(_QWORD *)(a3 + 864);
  if (*(_DWORD *)(a2 + 36) == 149 && *(_DWORD *)(v17 + 28) == 1)
  {
    v23 = **(unsigned int **)(v17 + 16);
    if ((_DWORD)v23 == *(_DWORD *)(a2 + 48))
    {
      JSC::Wasm::LLIntGenerator::linkSwitchTargets(a2, (void *)v17, v23, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 152;
      v24 = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a2 + 12) = v24;
      *(_DWORD *)(a2 + 16) = v24;
      goto LABEL_19;
    }
  }
  v18 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(v17, a2, v18, (uint64_t)a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(unsigned int *)(v19 + 84);
  if ((_DWORD)v20)
  {
    v21 = *(unsigned int *)(v19 + 84);
    if (v18 == *(_DWORD *)(*(_QWORD *)(v19 + 72) + 4 * v20 - 4))
      goto LABEL_19;
  }
  else
  {
    v21 = 0;
  }
  LODWORD(v45) = v18;
  v22 = (_QWORD *)(v19 + 72);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 80))
    *(_DWORD *)(*(_QWORD *)(v19 + 72) + 4 * *(unsigned int *)(v19 + 84)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v21 + 1, (unint64_t)&v45);
  else
    *(_DWORD *)(*v22 + 4 * v21) = v18;
  ++*(_DWORD *)(v19 + 84);
  *(_DWORD *)(a2 + 36) = 152;
LABEL_19:
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::LLIntGenerator::linkSwitchTargets(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v9 = (uint64_t *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 144);
  if (v8)
  {
    v10 = *(_DWORD *)(v8 - 8);
    v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v8 + 24 * v14;
    v16 = *(void **)v15;
    if (*(void **)v15 != a2)
    {
      v17 = 1;
      while (v16)
      {
        v14 = (v14 + v17) & v10;
        v15 = v8 + 24 * v14;
        v16 = *(void **)v15;
        ++v17;
        if (*(void **)v15 == a2)
          goto LABEL_9;
      }
      v15 = v8 + 24 * *(unsigned int *)(v8 - 4);
    }
LABEL_9:
    v18 = *(_DWORD *)(v8 - 4);
    if (v15 != v8 + 24 * v18)
    {
      v19 = *(_QWORD *)(v15 + 8);
      v20 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(v15 + 8);
        do
        {
          **(_DWORD **)(v21 + 8) = a3 - *(_DWORD *)v21;
          v21 += 16;
        }
        while (v21 != v19 + 16 * v20);
        v8 = *v9;
        if (!*v9)
        {
LABEL_16:
          if (v8 != v15)
          {
            *(_QWORD *)v15 = -1;
            if (v19)
            {
              *(_QWORD *)(v15 + 8) = 0;
              *(_DWORD *)(v15 + 16) = 0;
              WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
            }
            ++*(_DWORD *)(*v9 - 16);
            v22 = *v9;
            if (*v9)
              v23 = *(_DWORD *)(v22 - 12) - 1;
            else
              v23 = -1;
            *(_DWORD *)(v22 - 12) = v23;
            v24 = *v9;
            if (*v9)
            {
              v25 = 6 * *(_DWORD *)(v24 - 12);
              v26 = *(_DWORD *)(v24 - 4);
              if (v25 < v26 && v26 >= 9)
                WTF::HashTable<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::KeyValuePair<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashMap<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashTraits<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashTraits<WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>>::rehash(v9, v26 >> 1, 0, a4, a5, a6, a7, a8);
            }
          }
          return;
        }
        v18 = *(_DWORD *)(v8 - 4);
      }
      v8 += 24 * v18;
      if (v8 == v15)
        return;
      goto LABEL_16;
    }
  }
}

void JSC::Wasm::LLIntGenerator::addCall(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  JSC::Wasm *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 **v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v72;
  unsigned int v73;
  WTF *v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;

  if (*(_DWORD *)(a4 + 32))
    v12 = 0;
  else
    v12 = (unsigned __int8 **)(a4 + 8);
  JSC::Wasm::LLIntGenerator::callInformationForCaller((uint64_t)&v72, a2, v12);
  if (v76)
  {
    v19 = 0;
    v20 = *(unsigned int *)(a5 + 12);
    v21 = v20 - v76;
    v22 = 4 * v20 - 4 * v76;
    while (v21 + v19 < (unint64_t)*(unsigned int *)(a5 + 12))
    {
      v23 = *(_QWORD *)a5 + v22;
      v24 = *(unsigned int *)(v23 + 4 * v19);
      v25 = *((_DWORD *)v74 + v19);
      if ((_DWORD)v24 != v25
        && (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, *((_DWORD *)v74 + v19), *(unsigned int *)(v23 + 4 * v19), v14, v15, v16, v17, v18) & 1) == 0&& (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, v25, v24, v14, v15, v16, v17, v18) & 1) == 0)
      {
        JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v25, v24, v14, v15, v16, v17, v18);
      }
      if (++v19 >= (unint64_t)v76)
        goto LABEL_12;
    }
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x198CFC66CLL);
  }
LABEL_12:
  if (a7 == 5)
  {
    JSC::Wasm::FunctionCodeBlockGenerator::setTailCall(*(JSC::Wasm::FunctionCodeBlockGenerator **)(a2 + 24), a3, *(_DWORD *)(*(_QWORD *)(a2 + 112) + 36) > a3);
    v62 = JSC::Wasm::wasmCallingConvention(v61);
    v63 = *(_QWORD *)(a2 + 112);
    v64 = *(unsigned int *)(a2 + 120);
    if (*(_DWORD *)(v63 + 52) <= v64)
      goto LABEL_65;
    v65 = *(_QWORD *)(*(_QWORD *)(v63 + 40) + 8 * v64);
    if (*(_DWORD *)(v65 + 32))
      v66 = 0;
    else
      v66 = (unsigned __int8 **)(v65 + 8);
    v67 = JSC::Wasm::WasmCallingConvention::numberOfStackValues(*((_DWORD *)v62 + 3), *((_DWORD *)v62 + 7), v66);
    JSC::WasmTailCall::emit<JSC::Wasm::LLIntGenerator>(a2, a3, v72, v73, (v67 + 1) & 0xFFFFFFFE, v68, v69, v70);
    goto LABEL_44;
  }
  v27 = v72;
  v26 = v73;
  v28 = v72 | a3 | v73;
  if (v28 > 0xFF)
  {
    if (HIWORD(v28))
    {
      JSC::WasmCall::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, a3, v72, v73, v15, v16, v17, v18);
    }
    else
    {
      v49 = *(_DWORD *)(a2 + 16);
      v79 = a2;
      v80 = v49;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v79, v13, v14, v15, v16, v17, v18);
      *(_DWORD *)(a2 + 36) = 169;
      LOBYTE(v79) = -115;
      v50 = *(unsigned int *)(a2 + 12);
      v51 = *(unsigned int *)(a2 + 16);
      if (v50 > v51)
      {
        *(_DWORD *)(a2 + 16) = v51 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v51) = -115;
        v54 = *(_DWORD *)(a2 + 12);
        v55 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v50 == *(_DWORD *)(a2 + 8))
        {
          v59 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v50 + 1), (unint64_t)&v79);
          v50 = *(unsigned int *)(a2 + 12);
          v52 = *(_QWORD *)a2;
          v53 = *v59;
        }
        else
        {
          v52 = *(_QWORD *)a2;
          v53 = -115;
        }
        *(_BYTE *)(v52 + v50) = v53;
        v54 = *(_DWORD *)(a2 + 12) + 1;
        v55 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v54;
        *(_DWORD *)(a2 + 16) = v55;
      }
      v56 = -87;
      LOBYTE(v79) = -87;
      if (v54 > v55)
      {
        *(_DWORD *)(a2 + 16) = v55 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v55) = -87;
      }
      else
      {
        v57 = v54;
        if (v54 == *(_DWORD *)(a2 + 8))
        {
          v60 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v54 + 1), (unint64_t)&v79);
          v57 = *(unsigned int *)(a2 + 12);
          v58 = *(_QWORD *)a2;
          v56 = *v60;
        }
        else
        {
          v58 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v58 + v57) = v56;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, (unsigned __int16)a3);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v27);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v26);
    }
LABEL_44:
    v34 = a6;
    goto LABEL_30;
  }
  v29 = *(_DWORD *)(a2 + 16);
  v79 = a2;
  v80 = v29;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v79, v13, v14, v15, v16, v17, v18);
  *(_DWORD *)(a2 + 36) = 169;
  LOBYTE(v79) = -87;
  v30 = *(unsigned int *)(a2 + 12);
  v31 = *(unsigned int *)(a2 + 16);
  if (v30 > v31)
  {
    *(_DWORD *)(a2 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v31) = -87;
    v32 = *(_DWORD *)(a2 + 12);
    v33 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if ((_DWORD)v30 == *(_DWORD *)(a2 + 8))
      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v30 + 1), (unint64_t)&v79);
    else
      *(_BYTE *)(*(_QWORD *)a2 + v30) = -87;
    v32 = *(_DWORD *)(a2 + 12) + 1;
    v33 = *(_DWORD *)(a2 + 16) + 1;
    *(_DWORD *)(a2 + 12) = v32;
    *(_DWORD *)(a2 + 16) = v33;
  }
  LOBYTE(v79) = a3;
  if (v32 > v33)
  {
    *(_DWORD *)(a2 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v33) = a3;
    v35 = *(_DWORD *)(a2 + 12);
    v36 = *(_DWORD *)(a2 + 16);
    v34 = a6;
  }
  else
  {
    if (v32 == *(_DWORD *)(a2 + 8))
      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v32 + 1), (unint64_t)&v79);
    else
      *(_BYTE *)(*(_QWORD *)a2 + v32) = a3;
    v34 = a6;
    v35 = *(_DWORD *)(a2 + 12) + 1;
    v36 = *(_DWORD *)(a2 + 16) + 1;
    *(_DWORD *)(a2 + 12) = v35;
    *(_DWORD *)(a2 + 16) = v36;
  }
  LOBYTE(v79) = v27;
  if (v35 > v36)
  {
    *(_DWORD *)(a2 + 16) = v36 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v36) = v27;
    v37 = *(_DWORD *)(a2 + 12);
    v38 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (v35 == *(_DWORD *)(a2 + 8))
      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v35 + 1), (unint64_t)&v79);
    else
      *(_BYTE *)(*(_QWORD *)a2 + v35) = v27;
    v37 = *(_DWORD *)(a2 + 12) + 1;
    v38 = *(_DWORD *)(a2 + 16) + 1;
    *(_DWORD *)(a2 + 12) = v37;
    *(_DWORD *)(a2 + 16) = v38;
  }
  LOBYTE(v79) = v26;
  if (v37 > v38)
  {
    *(_DWORD *)(a2 + 16) = v38 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v38) = v26;
  }
  else
  {
    if (v37 == *(_DWORD *)(a2 + 8))
      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v37 + 1), (unint64_t)&v79);
    else
      *(_BYTE *)(*(_QWORD *)a2 + v37) = v26;
    *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
  }
LABEL_30:
  v39 = v78;
  v78 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v34);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  *a1 = 0;
  a1[8] = 0;
  v47 = v78;
  v78 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v74;
  if (&v77 != (uint64_t *)v74)
  {
    if (v74)
    {
      v74 = 0;
      v75 = 0;
      WTF::fastFree((unint64_t)v48, v40, v41, v42, v43, v44, v45, v46);
    }
  }
}

uint64_t JSC::Wasm::LLIntGenerator::unifyValuesWithBlock<WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v11 = result;
    v12 = 0;
    v13 = *(unsigned int *)(a3 + 12);
    v14 = v13 - v8;
    v15 = 4 * v13 - 4 * v8;
    while (v14 + v12 < (unint64_t)*(unsigned int *)(a3 + 12))
    {
      v16 = *(_QWORD *)a3 + v15;
      v17 = *(unsigned int *)(v16 + 4 * v12);
      v18 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v12);
      if ((_DWORD)v17 != v18)
      {
        result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v11, *(_DWORD *)(*(_QWORD *)a2 + 4 * v12), *(unsigned int *)(v16 + 4 * v12), a4, a5, a6, a7, a8);
        if ((result & 1) == 0)
        {
          result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v11, v18, v17, a4, a5, a6, a7, a8);
          if ((result & 1) == 0)
            result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v11, v18, v17, a4, a5, a6, a7, a8);
        }
      }
      if (++v12 >= (unint64_t)*(unsigned int *)(a2 + 12))
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::Wasm::WasmCallingConvention::numberOfStackValues(unsigned int a1, unsigned int a2, unsigned __int8 **a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;

  v4 = *((unsigned int *)a3 + 2);
  v3 = *((unsigned int *)a3 + 3);
  v5 = 0;
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = *((_DWORD *)a3 + 3);
    while (1)
    {
      v9 = (*a3)[16 * v8];
      if ((v9 - 254) < 2)
        goto LABEL_4;
      v11 = v9 - 192;
      if (v11 <= 0x3D)
        break;
LABEL_8:
      ++v8;
      if (!--v4)
        goto LABEL_18;
    }
    if (((1 << v11) & 0x3800000000000000) != 0)
    {
      v10 = v6 >= a2;
      if (v6 < a2)
        ++v6;
    }
    else
    {
      if (((1 << v11) & 0xE7C01C001C001) != 0)
      {
LABEL_38:
        __break(0xC471u);
        JUMPOUT(0x198CFC8B0);
      }
      if (((1 << v11) & 0x1801800000000) == 0)
        goto LABEL_8;
LABEL_4:
      v10 = v7 >= a1;
      if (v7 < a1)
        ++v7;
    }
    if (v10)
      ++v5;
    goto LABEL_8;
  }
LABEL_18:
  v12 = 0;
  if ((_DWORD)v3)
  {
    v14 = 0;
    v15 = 0;
    v16 = *a3;
    while (1)
    {
      v18 = *v16;
      v16 += 16;
      v17 = v18;
      if ((v18 - 254) < 2)
        break;
      v20 = v17 - 192;
      if (v20 <= 0x3D)
      {
        if (((1 << v20) & 0x3800000000000000) != 0)
        {
          v19 = v14 >= a2;
          if (v14 < a2)
            ++v14;
          goto LABEL_26;
        }
        if (((1 << v20) & 0xE7C01C001C001) != 0)
          goto LABEL_38;
        if (((1 << v20) & 0x1801800000000) != 0)
          break;
      }
LABEL_28:
      if (!--v3)
        goto LABEL_19;
    }
    v19 = v15 >= a1;
    if (v15 < a1)
      ++v15;
LABEL_26:
    if (v19)
      ++v12;
    goto LABEL_28;
  }
LABEL_19:
  if (v5 <= v12)
    return v12;
  else
    return v5;
}

_BYTE *JSC::WasmTailCall::emit<JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v13;
  int v14;
  _BYTE *result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = a3 | a2 | a4 | a5;
  if (v13 > 0xFF)
  {
    v26 = (_DWORD *)(a1 + 40);
    if (HIWORD(v13))
    {
      v37 = *(_DWORD *)(a1 + 16);
      v51 = a1;
      v52 = v37;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v26, &v51, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 170;
      LOBYTE(v51) = -114;
      v38 = *(unsigned int *)(a1 + 12);
      v39 = *(unsigned int *)(a1 + 16);
      if (v38 > v39)
      {
        *(_DWORD *)(a1 + 16) = v39 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v39) = -114;
        v42 = *(_DWORD *)(a1 + 12);
        v43 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v38 == *(_DWORD *)(a1 + 8))
        {
          v49 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v51);
          v38 = *(unsigned int *)(a1 + 12);
          v40 = *(_QWORD *)a1;
          v41 = *v49;
        }
        else
        {
          v40 = *(_QWORD *)a1;
          v41 = -114;
        }
        *(_BYTE *)(v40 + v38) = v41;
        v42 = *(_DWORD *)(a1 + 12) + 1;
        v43 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v42;
        *(_DWORD *)(a1 + 16) = v43;
      }
      v44 = -86;
      LOBYTE(v51) = -86;
      if (v42 > v43)
      {
        *(_DWORD *)(a1 + 16) = v43 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v43) = -86;
      }
      else
      {
        v45 = v42;
        if (v42 == *(_DWORD *)(a1 + 8))
        {
          v50 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v51);
          v45 = *(unsigned int *)(a1 + 12);
          v46 = *(_QWORD *)a1;
          v44 = *v50;
        }
        else
        {
          v46 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v46 + v45) = v44;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
      return (_BYTE *)JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
    }
    else
    {
      v27 = *(_DWORD *)(a1 + 16);
      v51 = a1;
      v52 = v27;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v26, &v51, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 170;
      LOBYTE(v51) = -115;
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(unsigned int *)(a1 + 16);
      if (v28 > v29)
      {
        *(_DWORD *)(a1 + 16) = v29 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v29) = -115;
        v32 = *(_DWORD *)(a1 + 12);
        v33 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v28 == *(_DWORD *)(a1 + 8))
        {
          v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v51);
          v28 = *(unsigned int *)(a1 + 12);
          v30 = *(_QWORD *)a1;
          v31 = *v47;
        }
        else
        {
          v30 = *(_QWORD *)a1;
          v31 = -115;
        }
        *(_BYTE *)(v30 + v28) = v31;
        v32 = *(_DWORD *)(a1 + 12) + 1;
        v33 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v32;
        *(_DWORD *)(a1 + 16) = v33;
      }
      v34 = -86;
      LOBYTE(v51) = -86;
      if (v32 > v33)
      {
        *(_DWORD *)(a1 + 16) = v33 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v33) = -86;
      }
      else
      {
        v35 = v32;
        if (v32 == *(_DWORD *)(a1 + 8))
        {
          v48 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v51);
          v35 = *(unsigned int *)(a1 + 12);
          v36 = *(_QWORD *)a1;
          v34 = *v48;
        }
        else
        {
          v36 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v36 + v35) = v34;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)a2);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v10);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v9);
      return (_BYTE *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v8);
    }
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 16);
    v51 = a1;
    v52 = v14;
    result = JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v51, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 36) = 170;
    LOBYTE(v51) = -86;
    v16 = *(unsigned int *)(a1 + 12);
    v17 = *(unsigned int *)(a1 + 16);
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = -86;
      v18 = *(_DWORD *)(a1 + 12);
      v19 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v51);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v16) = -86;
      }
      v18 = *(_DWORD *)(a1 + 12) + 1;
      v19 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(_DWORD *)(a1 + 16) = v19;
    }
    LOBYTE(v51) = a2;
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = a2;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v18 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v51);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v18) = a2;
      }
      v20 = *(_DWORD *)(a1 + 12) + 1;
      v21 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v20;
      *(_DWORD *)(a1 + 16) = v21;
    }
    LOBYTE(v51) = v10;
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = v10;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v20 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v51);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v20) = v10;
      }
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    LOBYTE(v51) = v9;
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v9;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v22 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v51);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v22) = v9;
      }
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    LOBYTE(v51) = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v51);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      }
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return result;
}

void JSC::Wasm::LLIntGenerator::addCallIndirect(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v12;
  JSC::Wasm::TypeDefinition *v13;
  int v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  WTF *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t CachedUnrolling;
  uint64_t v85;
  uint64_t v86;
  const JSC::Wasm::Type *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  JSC::Wasm::TypeDefinition **v92;
  const JSC::Wasm::TypeDefinition *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v102;
  unsigned int v103;
  WTF *v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;

  v7 = *(unsigned int *)(a5 + 12);
  if (!(_DWORD)v7)
  {
    __break(0xC471u);
    JUMPOUT(0x198CFD440);
  }
  v12 = *(_DWORD *)(*(_QWORD *)a5 + 4 * v7 - 4);
  *(_DWORD *)(a5 + 12) = v7 - 1;
  v13 = (JSC::Wasm::TypeDefinition *)a4;
  if (*(_DWORD *)(a4 + 32) == 4)
  {
    v75 = *(unsigned int **)(a4 + 8);
    v76 = *(WTF **)v75;
    v13 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v75 + 8) + 8 * v75[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v13))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)a4, v77, v78, v79, v80, v81, v82, v83);
      if (v91)
      {
        v13 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v13 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v13, v76, v85, v86, v87, v88, v89, v90);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)a4, v13, v93, v94, v95, v96, v97, v98);
      }
    }
  }
  v14 = *((_DWORD *)v13 + 8);
  if (v14 == 5)
  {
    v92 = (JSC::Wasm::TypeDefinition **)*((_QWORD *)v13 + 1);
    v13 = *v92;
    v14 = *((_DWORD *)*v92 + 8);
  }
  if (v14)
    v15 = 0;
  else
    v15 = (unsigned __int8 **)((char *)v13 + 8);
  JSC::Wasm::LLIntGenerator::callInformationForCaller((uint64_t)&v102, a2, v15);
  if (v106)
  {
    v23 = 0;
    v24 = *(unsigned int *)(a5 + 12);
    v25 = v24 - v106;
    v26 = 4 * v24 - 4 * v106;
    while (v25 + v23 < (unint64_t)*(unsigned int *)(a5 + 12))
    {
      v27 = *(_QWORD *)a5 + v26;
      v28 = *(unsigned int *)(v27 + 4 * v23);
      v29 = *((_DWORD *)v104 + v23);
      if ((_DWORD)v28 != v29)
      {
        v16 = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, *((_DWORD *)v104 + v23), *(unsigned int *)(v27 + 4 * v23), v18, v19, v20, v21, v22);
        if ((v16 & 1) == 0)
        {
          v16 = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, v29, v28, v18, v19, v20, v21, v22);
          if ((v16 & 1) == 0)
            v16 = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v29, v28, v18, v19, v20, v21, v22);
        }
      }
      if (++v23 >= (unint64_t)v106)
        goto LABEL_16;
    }
LABEL_81:
    __break(0xC471u);
    JUMPOUT(0x198CFD438);
  }
LABEL_16:
  v30 = *(_QWORD *)(a2 + 24);
  if (a7 == 5)
  {
    *(_BYTE *)(v30 + 16) = 1;
    v67 = JSC::Wasm::wasmCallingConvention((JSC::Wasm *)v16);
    v68 = *(_QWORD *)(a2 + 112);
    v69 = *(unsigned int *)(a2 + 120);
    if (*(_DWORD *)(v68 + 52) <= v69)
      goto LABEL_81;
    v70 = *(_QWORD *)(*(_QWORD *)(v68 + 40) + 8 * v69);
    if (*(_DWORD *)(v70 + 32))
      v71 = 0;
    else
      v71 = (unsigned __int8 **)(v70 + 8);
    v72 = (JSC::Wasm::WasmCallingConvention::numberOfStackValues(*((_DWORD *)v67 + 3), *((_DWORD *)v67 + 7), v71)+ 1) & 0xFFFFFFFE;
    v73 = JSC::Wasm::FunctionCodeBlockGenerator::addSignature(*(JSC::Wasm::FunctionCodeBlockGenerator **)(a2 + 24), (const JSC::Wasm::TypeDefinition *)a4);
    JSC::WasmTailCallIndirect::emit<JSC::Wasm::LLIntGenerator>(a2, v12, v73, v102, v103, v72, a3, v74);
  }
  else
  {
    v31 = (_QWORD *)(v30 + 88);
    v109 = a4;
    v32 = *(unsigned int *)(v30 + 100);
    if ((_DWORD)v32 == *(_DWORD *)(v30 + 96))
    {
      v63 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v32 + 1, (unint64_t)&v109);
      v33 = *(unsigned int *)(v30 + 100);
      *(_QWORD *)(*(_QWORD *)(v30 + 88) + 8 * v33) = *v63;
    }
    else
    {
      *(_QWORD *)(*v31 + 8 * v32) = a4;
      LODWORD(v33) = v32;
    }
    *(_DWORD *)(v30 + 100) = v33 + 1;
    v35 = v102;
    v34 = v103;
    v36 = (v12 - 1073741808) < 0x80;
    if (v12 <= 0x3FFFFFFF)
      v36 = (v12 + 128) < 0x90;
    if (v36 && (v32 | a3 | v102 | v103) <= 0xFF)
    {
      v37 = *(_DWORD *)(a2 + 16);
      v109 = a2;
      v110 = v37;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v109, v17, v18, v19, v20, v21, v22);
      *(_DWORD *)(a2 + 36) = 171;
      LOBYTE(v109) = -85;
      v38 = *(unsigned int *)(a2 + 12);
      v39 = *(unsigned int *)(a2 + 16);
      if (v38 > v39)
      {
        *(_DWORD *)(a2 + 16) = v39 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v39) = -85;
        v40 = *(_DWORD *)(a2 + 12);
        v41 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v38 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v38 + 1), (unint64_t)&v109);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v38) = -85;
        v40 = *(_DWORD *)(a2 + 12) + 1;
        v41 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v40;
        *(_DWORD *)(a2 + 16) = v41;
      }
      v42 = v12 + 16;
      if (v12 <= 0x3FFFFFFF)
        v42 = v12;
      LOBYTE(v109) = v42;
      if (v40 > v41)
      {
        *(_DWORD *)(a2 + 16) = v41 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v41) = v42;
        v45 = *(_DWORD *)(a2 + 12);
        v46 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v43 = v40;
        if (v40 == *(_DWORD *)(a2 + 8))
        {
          v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v40 + 1), (unint64_t)&v109);
          v43 = *(unsigned int *)(a2 + 12);
          v44 = *(_QWORD *)a2;
          v42 = *v64;
        }
        else
        {
          v44 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v44 + v43) = v42;
        v45 = *(_DWORD *)(a2 + 12) + 1;
        v46 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v45;
        *(_DWORD *)(a2 + 16) = v46;
      }
      LOBYTE(v109) = v32;
      if (v45 > v46)
      {
        *(_DWORD *)(a2 + 16) = v46 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v46) = v32;
        v47 = *(_DWORD *)(a2 + 12);
        v48 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if (v45 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v45 + 1), (unint64_t)&v109);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v45) = v32;
        v47 = *(_DWORD *)(a2 + 12) + 1;
        v48 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v47;
        *(_DWORD *)(a2 + 16) = v48;
      }
      LOBYTE(v109) = v35;
      if (v47 > v48)
      {
        *(_DWORD *)(a2 + 16) = v48 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v48) = v35;
        v49 = *(_DWORD *)(a2 + 12);
        v50 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if (v47 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v47 + 1), (unint64_t)&v109);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v47) = v35;
        v49 = *(_DWORD *)(a2 + 12) + 1;
        v50 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v49;
        *(_DWORD *)(a2 + 16) = v50;
      }
      LOBYTE(v109) = v34;
      if (v49 > v50)
      {
        *(_DWORD *)(a2 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v50) = v34;
        v51 = *(_DWORD *)(a2 + 12);
        v52 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if (v49 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v49 + 1), (unint64_t)&v109);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v49) = v34;
        v51 = *(_DWORD *)(a2 + 12) + 1;
        v52 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v51;
        *(_DWORD *)(a2 + 16) = v52;
      }
      LOBYTE(v109) = a3;
      if (v51 > v52)
      {
        *(_DWORD *)(a2 + 16) = v52 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v52) = a3;
      }
      else
      {
        if (v51 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v51 + 1), (unint64_t)&v109);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v51) = a3;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
    }
    else if (!JSC::WasmCallIndirect::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)a2, v12, v32, v102, v103, a3, v21, v22))
    {
      JSC::WasmCallIndirect::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v12, v32, v35, v34, a3, v65, v66);
    }
  }
  v53 = v108;
  v108 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, a6);
  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  *a1 = 0;
  a1[8] = 0;
  v61 = v108;
  v108 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = v104;
  if (&v107 != (uint64_t *)v104)
  {
    if (v104)
    {
      v104 = 0;
      v105 = 0;
      WTF::fastFree((unint64_t)v62, v54, v55, v56, v57, v58, v59, v60);
    }
  }
}

_BYTE *JSC::WasmTailCallIndirect::emit<JSC::Wasm::LLIntGenerator>(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v15;
  unsigned int v16;
  int v17;
  _BYTE *result;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _BOOL4 v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v15 = (a2 + 128) < 0x90;
  if (a2 > 0x3FFFFFFF)
    v15 = (a2 - 1073741808) < 0x80;
  v16 = a4 | a3 | a5 | a6 | a7;
  if (v15 && v16 <= 0xFF)
  {
    v17 = *(_DWORD *)(a1 + 16);
    v63 = a1;
    v64 = v17;
    result = JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v63, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 36) = 172;
    LOBYTE(v63) = -84;
    v19 = *(unsigned int *)(a1 + 12);
    v20 = *(unsigned int *)(a1 + 16);
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = -84;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v63);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v19) = -84;
      }
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    v23 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v23 = a2;
    LOBYTE(v63) = v23;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v24 = v21;
      if (v21 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v63);
        v24 = *(unsigned int *)(a1 + 12);
        v25 = *(_QWORD *)a1;
        v23 = *result;
      }
      else
      {
        v25 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v25 + v24) = v23;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    LOBYTE(v63) = v12;
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = v12;
      v28 = *(_DWORD *)(a1 + 12);
      v29 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v63);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v26) = v12;
      }
      v28 = *(_DWORD *)(a1 + 12) + 1;
      v29 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v28;
      *(_DWORD *)(a1 + 16) = v29;
    }
    LOBYTE(v63) = v11;
    if (v28 > v29)
    {
      *(_DWORD *)(a1 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v11;
      v30 = *(_DWORD *)(a1 + 12);
      v31 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v28 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v63);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v28) = v11;
      }
      v30 = *(_DWORD *)(a1 + 12) + 1;
      v31 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v30;
      *(_DWORD *)(a1 + 16) = v31;
    }
    LOBYTE(v63) = v10;
    if (v30 > v31)
    {
      *(_DWORD *)(a1 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
      v32 = *(_DWORD *)(a1 + 12);
      v33 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v30 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v63);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
      }
      v32 = *(_DWORD *)(a1 + 12) + 1;
      v33 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v32;
      *(_DWORD *)(a1 + 16) = v33;
    }
    LOBYTE(v63) = v9;
    if (v32 > v33)
    {
      *(_DWORD *)(a1 + 16) = v33 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v33) = v9;
      v34 = *(_DWORD *)(a1 + 12);
      v35 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v32 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v63);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v32) = v9;
      }
      v34 = *(_DWORD *)(a1 + 12) + 1;
      v35 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v34;
      *(_DWORD *)(a1 + 16) = v35;
    }
    LOBYTE(v63) = v8;
    if (v34 > v35)
    {
      *(_DWORD *)(a1 + 16) = v35 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v35) = v8;
    }
    else
    {
      if (v34 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v63);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v34) = v8;
      }
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
    v36 = (a2 - 1073741760) < 0x8000;
    if (a2 <= 0x3FFFFFFF)
      v36 = (a2 + 0x8000) >> 6 < 0x201;
    v37 = (_DWORD *)(a1 + 40);
    if (!v36 || HIWORD(v16))
    {
      v49 = *(_DWORD *)(a1 + 16);
      v63 = a1;
      v64 = v49;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v37, &v63, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 172;
      LOBYTE(v63) = -114;
      v50 = *(unsigned int *)(a1 + 12);
      v51 = *(unsigned int *)(a1 + 16);
      if (v50 > v51)
      {
        *(_DWORD *)(a1 + 16) = v51 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v51) = -114;
        v54 = *(_DWORD *)(a1 + 12);
        v55 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v50 == *(_DWORD *)(a1 + 8))
        {
          v61 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v50 + 1), (unint64_t)&v63);
          v50 = *(unsigned int *)(a1 + 12);
          v52 = *(_QWORD *)a1;
          v53 = *v61;
        }
        else
        {
          v52 = *(_QWORD *)a1;
          v53 = -114;
        }
        *(_BYTE *)(v52 + v50) = v53;
        v54 = *(_DWORD *)(a1 + 12) + 1;
        v55 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v54;
        *(_DWORD *)(a1 + 16) = v55;
      }
      v56 = -84;
      LOBYTE(v63) = -84;
      if (v54 > v55)
      {
        *(_DWORD *)(a1 + 16) = v55 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v55) = -84;
      }
      else
      {
        v57 = v54;
        if (v54 == *(_DWORD *)(a1 + 8))
        {
          v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v63);
          v57 = *(unsigned int *)(a1 + 12);
          v58 = *(_QWORD *)a1;
          v56 = *v62;
        }
        else
        {
          v58 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v58 + v57) = v56;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v12);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v11);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
      return (_BYTE *)JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
    }
    else
    {
      v38 = *(_DWORD *)(a1 + 16);
      v63 = a1;
      v64 = v38;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v37, &v63, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 172;
      LOBYTE(v63) = -115;
      v39 = *(unsigned int *)(a1 + 12);
      v40 = *(unsigned int *)(a1 + 16);
      if (v39 > v40)
      {
        *(_DWORD *)(a1 + 16) = v40 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v40) = -115;
        v43 = *(_DWORD *)(a1 + 12);
        v44 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v39 == *(_DWORD *)(a1 + 8))
        {
          v59 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v63);
          v39 = *(unsigned int *)(a1 + 12);
          v41 = *(_QWORD *)a1;
          v42 = *v59;
        }
        else
        {
          v41 = *(_QWORD *)a1;
          v42 = -115;
        }
        *(_BYTE *)(v41 + v39) = v42;
        v43 = *(_DWORD *)(a1 + 12) + 1;
        v44 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v43;
        *(_DWORD *)(a1 + 16) = v44;
      }
      v45 = -84;
      LOBYTE(v63) = -84;
      if (v43 > v44)
      {
        *(_DWORD *)(a1 + 16) = v44 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v44) = -84;
      }
      else
      {
        v46 = v43;
        if (v43 == *(_DWORD *)(a1 + 8))
        {
          v60 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v63);
          v46 = *(unsigned int *)(a1 + 12);
          v47 = *(_QWORD *)a1;
          v45 = *v60;
        }
        else
        {
          v47 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v47 + v46) = v45;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v48 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v48 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v48);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v12);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v11);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v10);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v9);
      return (_BYTE *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v8);
    }
  }
  return result;
}

_BYTE *JSC::Wasm::LLIntGenerator::addCrash(JSC::Wasm::LLIntGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  _BYTE *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v10 = *(_DWORD *)(a2 + 16);
  v14 = a2;
  v15 = v10;
  result = JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v14, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a2 + 36) = 152;
  LOBYTE(v14) = -104;
  v12 = *(unsigned int *)(a2 + 12);
  v13 = *(unsigned int *)(a2 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a2 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v13) = -104;
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a2 + 8))
    {
      result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v12 + 1), (unint64_t)&v14);
      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *result;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)a2 + v12) = -104;
    }
    *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  return result;
}

_BYTE *JSC::WasmI64Load8S::emit<JSC::Wasm::LLIntGenerator>(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  signed int v9;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  _BYTE *result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v42;
  unsigned __int16 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;

  v8 = a4;
  v9 = a3;
  v12 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v12 = (a2 + 128) < 0x90;
  if (!v12)
    goto LABEL_28;
  v13 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v13)
  {
    v14 = *(_DWORD *)(a1 + 16);
    v58 = a1;
    v59 = v14;
    result = JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v58, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 36) = 182;
    LOBYTE(v58) = -74;
    v16 = *(unsigned int *)(a1 + 12);
    v17 = *(unsigned int *)(a1 + 16);
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = -74;
      v18 = *(_DWORD *)(a1 + 12);
      v19 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v58);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v16) = -74;
      }
      v18 = *(_DWORD *)(a1 + 12) + 1;
      v19 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(_DWORD *)(a1 + 16) = v19;
    }
    v20 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v20 = a2;
    LOBYTE(v58) = v20;
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
      v23 = *(_DWORD *)(a1 + 12);
      v24 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v21 = v18;
      if (v18 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v58);
        v21 = *(unsigned int *)(a1 + 12);
        v22 = *(_QWORD *)a1;
        v20 = *result;
      }
      else
      {
        v22 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v22 + v21) = v20;
      v23 = *(_DWORD *)(a1 + 12) + 1;
      v24 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
    }
    v25 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v25 = v9;
    LOBYTE(v58) = v25;
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v25;
      v28 = *(_DWORD *)(a1 + 12);
      v29 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v26 = v23;
      if (v23 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v58);
        v26 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        v25 = *result;
      }
      else
      {
        v27 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v27 + v26) = v25;
      v28 = *(_DWORD *)(a1 + 12) + 1;
      v29 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v28;
      *(_DWORD *)(a1 + 16) = v29;
    }
    LOBYTE(v58) = v8;
    if (v28 > v29)
    {
      *(_DWORD *)(a1 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v8;
    }
    else
    {
      if (v28 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v58);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v28) = v8;
      }
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_28:
    if (a2 <= 0x3FFFFFFF)
      v30 = (a2 + 0x8000) >> 6 < 0x201;
    else
      v30 = (a2 - 1073741760) < 0x8000;
    if (!v30)
      goto LABEL_49;
    v31 = (a3 - 1073741760) < 0x8000;
    if ((int)a3 <= 0x3FFFFFFF)
      v31 = (a3 + 0x8000) >> 6 < 0x201;
    if (!WORD1(a4) && v31)
    {
      v32 = *(_DWORD *)(a1 + 16);
      v58 = a1;
      v59 = v32;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v58, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 182;
      LOBYTE(v58) = -115;
      v33 = *(unsigned int *)(a1 + 12);
      v34 = *(unsigned int *)(a1 + 16);
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = -115;
        v37 = *(_DWORD *)(a1 + 12);
        v38 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v33 == *(_DWORD *)(a1 + 8))
        {
          v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v58);
          v33 = *(unsigned int *)(a1 + 12);
          v35 = *(_QWORD *)a1;
          v36 = *v56;
        }
        else
        {
          v35 = *(_QWORD *)a1;
          v36 = -115;
        }
        *(_BYTE *)(v35 + v33) = v36;
        v37 = *(_DWORD *)(a1 + 12) + 1;
        v38 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v37;
        *(_DWORD *)(a1 + 16) = v38;
      }
      v39 = -74;
      LOBYTE(v58) = -74;
      if (v37 > v38)
      {
        *(_DWORD *)(a1 + 16) = v38 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v38) = -74;
      }
      else
      {
        v40 = v37;
        if (v37 == *(_DWORD *)(a1 + 8))
        {
          v57 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v58);
          v40 = *(unsigned int *)(a1 + 12);
          v41 = *(_QWORD *)a1;
          v39 = *v57;
        }
        else
        {
          v41 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v41 + v40) = v39;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v42 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v42 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v42);
      v43 = v9 + 64;
      if (v9 <= 0x3FFFFFFF)
        v43 = v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v43);
      return (_BYTE *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v8);
    }
    else
    {
LABEL_49:
      v44 = *(_DWORD *)(a1 + 16);
      v58 = a1;
      v59 = v44;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v58, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 182;
      LOBYTE(v58) = -114;
      v45 = *(unsigned int *)(a1 + 12);
      v46 = *(unsigned int *)(a1 + 16);
      if (v45 > v46)
      {
        *(_DWORD *)(a1 + 16) = v46 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v46) = -114;
        v49 = *(_DWORD *)(a1 + 12);
        v50 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v45 == *(_DWORD *)(a1 + 8))
        {
          v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v45 + 1), (unint64_t)&v58);
          v45 = *(unsigned int *)(a1 + 12);
          v47 = *(_QWORD *)a1;
          v48 = *v54;
        }
        else
        {
          v47 = *(_QWORD *)a1;
          v48 = -114;
        }
        *(_BYTE *)(v47 + v45) = v48;
        v49 = *(_DWORD *)(a1 + 12) + 1;
        v50 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v49;
        *(_DWORD *)(a1 + 16) = v50;
      }
      v51 = -74;
      LOBYTE(v58) = -74;
      if (v49 > v50)
      {
        *(_DWORD *)(a1 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v50) = -74;
      }
      else
      {
        v52 = v49;
        if (v49 == *(_DWORD *)(a1 + 8))
        {
          v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v58);
          v52 = *(unsigned int *)(a1 + 12);
          v53 = *(_QWORD *)a1;
          v51 = *v55;
        }
        else
        {
          v53 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v53 + v52) = v51;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
      return (_BYTE *)JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
    }
  }
  return result;
}

_BYTE *JSC::WasmI64Load16S::emit<JSC::Wasm::LLIntGenerator>(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  signed int v9;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  _BYTE *result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v42;
  unsigned __int16 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;

  v8 = a4;
  v9 = a3;
  v12 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v12 = (a2 + 128) < 0x90;
  if (!v12)
    goto LABEL_28;
  v13 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v13)
  {
    v14 = *(_DWORD *)(a1 + 16);
    v58 = a1;
    v59 = v14;
    result = JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v58, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 36) = 184;
    LOBYTE(v58) = -72;
    v16 = *(unsigned int *)(a1 + 12);
    v17 = *(unsigned int *)(a1 + 16);
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = -72;
      v18 = *(_DWORD *)(a1 + 12);
      v19 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v58);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v16) = -72;
      }
      v18 = *(_DWORD *)(a1 + 12) + 1;
      v19 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(_DWORD *)(a1 + 16) = v19;
    }
    v20 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v20 = a2;
    LOBYTE(v58) = v20;
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
      v23 = *(_DWORD *)(a1 + 12);
      v24 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v21 = v18;
      if (v18 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v58);
        v21 = *(unsigned int *)(a1 + 12);
        v22 = *(_QWORD *)a1;
        v20 = *result;
      }
      else
      {
        v22 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v22 + v21) = v20;
      v23 = *(_DWORD *)(a1 + 12) + 1;
      v24 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
    }
    v25 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v25 = v9;
    LOBYTE(v58) = v25;
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v25;
      v28 = *(_DWORD *)(a1 + 12);
      v29 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v26 = v23;
      if (v23 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v58);
        v26 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        v25 = *result;
      }
      else
      {
        v27 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v27 + v26) = v25;
      v28 = *(_DWORD *)(a1 + 12) + 1;
      v29 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v28;
      *(_DWORD *)(a1 + 16) = v29;
    }
    LOBYTE(v58) = v8;
    if (v28 > v29)
    {
      *(_DWORD *)(a1 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v8;
    }
    else
    {
      if (v28 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v58);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v28) = v8;
      }
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_28:
    if (a2 <= 0x3FFFFFFF)
      v30 = (a2 + 0x8000) >> 6 < 0x201;
    else
      v30 = (a2 - 1073741760) < 0x8000;
    if (!v30)
      goto LABEL_49;
    v31 = (a3 - 1073741760) < 0x8000;
    if ((int)a3 <= 0x3FFFFFFF)
      v31 = (a3 + 0x8000) >> 6 < 0x201;
    if (!WORD1(a4) && v31)
    {
      v32 = *(_DWORD *)(a1 + 16);
      v58 = a1;
      v59 = v32;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v58, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 184;
      LOBYTE(v58) = -115;
      v33 = *(unsigned int *)(a1 + 12);
      v34 = *(unsigned int *)(a1 + 16);
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = -115;
        v37 = *(_DWORD *)(a1 + 12);
        v38 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v33 == *(_DWORD *)(a1 + 8))
        {
          v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v58);
          v33 = *(unsigned int *)(a1 + 12);
          v35 = *(_QWORD *)a1;
          v36 = *v56;
        }
        else
        {
          v35 = *(_QWORD *)a1;
          v36 = -115;
        }
        *(_BYTE *)(v35 + v33) = v36;
        v37 = *(_DWORD *)(a1 + 12) + 1;
        v38 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v37;
        *(_DWORD *)(a1 + 16) = v38;
      }
      v39 = -72;
      LOBYTE(v58) = -72;
      if (v37 > v38)
      {
        *(_DWORD *)(a1 + 16) = v38 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v38) = -72;
      }
      else
      {
        v40 = v37;
        if (v37 == *(_DWORD *)(a1 + 8))
        {
          v57 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v58);
          v40 = *(unsigned int *)(a1 + 12);
          v41 = *(_QWORD *)a1;
          v39 = *v57;
        }
        else
        {
          v41 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v41 + v40) = v39;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v42 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v42 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v42);
      v43 = v9 + 64;
      if (v9 <= 0x3FFFFFFF)
        v43 = v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v43);
      return (_BYTE *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v8);
    }
    else
    {
LABEL_49:
      v44 = *(_DWORD *)(a1 + 16);
      v58 = a1;
      v59 = v44;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v58, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 184;
      LOBYTE(v58) = -114;
      v45 = *(unsigned int *)(a1 + 12);
      v46 = *(unsigned int *)(a1 + 16);
      if (v45 > v46)
      {
        *(_DWORD *)(a1 + 16) = v46 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v46) = -114;
        v49 = *(_DWORD *)(a1 + 12);
        v50 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v45 == *(_DWORD *)(a1 + 8))
        {
          v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v45 + 1), (unint64_t)&v58);
          v45 = *(unsigned int *)(a1 + 12);
          v47 = *(_QWORD *)a1;
          v48 = *v54;
        }
        else
        {
          v47 = *(_QWORD *)a1;
          v48 = -114;
        }
        *(_BYTE *)(v47 + v45) = v48;
        v49 = *(_DWORD *)(a1 + 12) + 1;
        v50 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v49;
        *(_DWORD *)(a1 + 16) = v50;
      }
      v51 = -72;
      LOBYTE(v58) = -72;
      if (v49 > v50)
      {
        *(_DWORD *)(a1 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v50) = -72;
      }
      else
      {
        v52 = v49;
        if (v49 == *(_DWORD *)(a1 + 8))
        {
          v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v58);
          v52 = *(unsigned int *)(a1 + 12);
          v53 = *(_QWORD *)a1;
          v51 = *v55;
        }
        else
        {
          v53 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v53 + v52) = v51;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
      return (_BYTE *)JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
    }
  }
  return result;
}

_BYTE *JSC::WasmI64Load32S::emit<JSC::Wasm::LLIntGenerator>(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  signed int v9;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  _BYTE *result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v42;
  unsigned __int16 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;

  v8 = a4;
  v9 = a3;
  v12 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v12 = (a2 + 128) < 0x90;
  if (!v12)
    goto LABEL_28;
  v13 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v13)
  {
    v14 = *(_DWORD *)(a1 + 16);
    v58 = a1;
    v59 = v14;
    result = JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v58, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 36) = 185;
    LOBYTE(v58) = -71;
    v16 = *(unsigned int *)(a1 + 12);
    v17 = *(unsigned int *)(a1 + 16);
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = -71;
      v18 = *(_DWORD *)(a1 + 12);
      v19 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v58);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v16) = -71;
      }
      v18 = *(_DWORD *)(a1 + 12) + 1;
      v19 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(_DWORD *)(a1 + 16) = v19;
    }
    v20 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v20 = a2;
    LOBYTE(v58) = v20;
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
      v23 = *(_DWORD *)(a1 + 12);
      v24 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v21 = v18;
      if (v18 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v58);
        v21 = *(unsigned int *)(a1 + 12);
        v22 = *(_QWORD *)a1;
        v20 = *result;
      }
      else
      {
        v22 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v22 + v21) = v20;
      v23 = *(_DWORD *)(a1 + 12) + 1;
      v24 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
    }
    v25 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v25 = v9;
    LOBYTE(v58) = v25;
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v25;
      v28 = *(_DWORD *)(a1 + 12);
      v29 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v26 = v23;
      if (v23 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v58);
        v26 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        v25 = *result;
      }
      else
      {
        v27 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v27 + v26) = v25;
      v28 = *(_DWORD *)(a1 + 12) + 1;
      v29 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v28;
      *(_DWORD *)(a1 + 16) = v29;
    }
    LOBYTE(v58) = v8;
    if (v28 > v29)
    {
      *(_DWORD *)(a1 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v8;
    }
    else
    {
      if (v28 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v58);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v28) = v8;
      }
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_28:
    if (a2 <= 0x3FFFFFFF)
      v30 = (a2 + 0x8000) >> 6 < 0x201;
    else
      v30 = (a2 - 1073741760) < 0x8000;
    if (!v30)
      goto LABEL_49;
    v31 = (a3 - 1073741760) < 0x8000;
    if ((int)a3 <= 0x3FFFFFFF)
      v31 = (a3 + 0x8000) >> 6 < 0x201;
    if (!WORD1(a4) && v31)
    {
      v32 = *(_DWORD *)(a1 + 16);
      v58 = a1;
      v59 = v32;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v58, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 185;
      LOBYTE(v58) = -115;
      v33 = *(unsigned int *)(a1 + 12);
      v34 = *(unsigned int *)(a1 + 16);
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = -115;
        v37 = *(_DWORD *)(a1 + 12);
        v38 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v33 == *(_DWORD *)(a1 + 8))
        {
          v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v58);
          v33 = *(unsigned int *)(a1 + 12);
          v35 = *(_QWORD *)a1;
          v36 = *v56;
        }
        else
        {
          v35 = *(_QWORD *)a1;
          v36 = -115;
        }
        *(_BYTE *)(v35 + v33) = v36;
        v37 = *(_DWORD *)(a1 + 12) + 1;
        v38 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v37;
        *(_DWORD *)(a1 + 16) = v38;
      }
      v39 = -71;
      LOBYTE(v58) = -71;
      if (v37 > v38)
      {
        *(_DWORD *)(a1 + 16) = v38 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v38) = -71;
      }
      else
      {
        v40 = v37;
        if (v37 == *(_DWORD *)(a1 + 8))
        {
          v57 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v58);
          v40 = *(unsigned int *)(a1 + 12);
          v41 = *(_QWORD *)a1;
          v39 = *v57;
        }
        else
        {
          v41 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v41 + v40) = v39;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v42 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v42 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v42);
      v43 = v9 + 64;
      if (v9 <= 0x3FFFFFFF)
        v43 = v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v43);
      return (_BYTE *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v8);
    }
    else
    {
LABEL_49:
      v44 = *(_DWORD *)(a1 + 16);
      v58 = a1;
      v59 = v44;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v58, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 185;
      LOBYTE(v58) = -114;
      v45 = *(unsigned int *)(a1 + 12);
      v46 = *(unsigned int *)(a1 + 16);
      if (v45 > v46)
      {
        *(_DWORD *)(a1 + 16) = v46 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v46) = -114;
        v49 = *(_DWORD *)(a1 + 12);
        v50 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v45 == *(_DWORD *)(a1 + 8))
        {
          v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v45 + 1), (unint64_t)&v58);
          v45 = *(unsigned int *)(a1 + 12);
          v47 = *(_QWORD *)a1;
          v48 = *v54;
        }
        else
        {
          v47 = *(_QWORD *)a1;
          v48 = -114;
        }
        *(_BYTE *)(v47 + v45) = v48;
        v49 = *(_DWORD *)(a1 + 12) + 1;
        v50 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v49;
        *(_DWORD *)(a1 + 16) = v50;
      }
      v51 = -71;
      LOBYTE(v58) = -71;
      if (v49 > v50)
      {
        *(_DWORD *)(a1 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v50) = -71;
      }
      else
      {
        v52 = v49;
        if (v49 == *(_DWORD *)(a1 + 8))
        {
          v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v58);
          v52 = *(unsigned int *)(a1 + 12);
          v53 = *(_QWORD *)a1;
          v51 = *v55;
        }
        else
        {
          v53 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v53 + v52) = v51;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
      return (_BYTE *)JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
    }
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::atomicBinaryRMW(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  signed int v12;
  signed int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  _BOOL4 v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  int v60;
  _BOOL4 v61;
  _BOOL4 v62;
  _BOOL4 v63;
  int v64;
  _BOOL4 v65;
  _BOOL4 v66;
  _BOOL4 v67;
  int v68;
  _BOOL4 v69;
  _BOOL4 v70;
  _BOOL4 v71;
  int v72;
  _BOOL4 v73;
  _BOOL4 v74;
  _BOOL4 v75;
  int v76;
  _BOOL4 v77;
  _BOOL4 v78;
  _BOOL4 v79;
  int v80;
  _BOOL4 v81;
  _BOOL4 v82;
  _BOOL4 v83;
  int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  _BOOL4 v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  _BOOL4 v106;
  _BOOL4 v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  _BOOL4 v128;
  _BOOL4 v129;
  _BOOL4 v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  _BOOL4 v136;
  _BOOL4 v137;
  _BOOL4 v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  _BOOL4 v144;
  _BOOL4 v145;
  _BOOL4 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  _BOOL4 v152;
  _BOOL4 v153;
  _BOOL4 v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  _BOOL4 v160;
  _BOOL4 v161;
  _BOOL4 v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  _BOOL4 v168;
  _BOOL4 v169;
  _BOOL4 v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  _BOOL4 v176;
  _BOOL4 v177;
  _BOOL4 v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  _BOOL4 v184;
  _BOOL4 v185;
  _BOOL4 v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  _BOOL4 v192;
  _BOOL4 v193;
  _BOOL4 v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  _BOOL4 v200;
  _BOOL4 v201;
  _BOOL4 v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  _BOOL4 v208;
  _BOOL4 v209;
  _BOOL4 v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  unsigned int v221;
  unsigned int v222;
  char v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _BOOL4 v287;
  _BOOL4 v288;
  _BOOL4 v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _BOOL4 v299;
  _BOOL4 v300;
  _BOOL4 v301;
  int v302;
  _BOOL4 v303;
  _BOOL4 v304;
  _BOOL4 v305;
  int v306;
  _BOOL4 v307;
  _BOOL4 v308;
  _BOOL4 v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  char v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  _BOOL4 v328;
  _BOOL4 v329;
  _BOOL4 v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  _BOOL4 v336;
  _BOOL4 v337;
  _BOOL4 v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  _BOOL4 v344;
  _BOOL4 v345;
  _BOOL4 v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  char v351;
  _BOOL4 v352;
  _BOOL4 v353;
  _BOOL4 v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char v359;
  uint64_t v360;
  uint64_t v361;
  unsigned __int16 v362;
  unsigned __int16 v363;
  unsigned __int16 v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  char *v388;
  char *v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  char *v397;
  char *v398;
  char *v399;
  char *v400;
  char *v401;
  char *v402;
  char *v403;
  char *v404;
  char *v405;
  char *v406;
  char *v407;
  char *v408;
  char *v409;
  char *v410;
  char *v411;
  char *v412;
  char *v413;
  char *v414;
  char *v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  uint64_t v421;
  int v422;

  *(_BYTE *)(a2 + 253) = 1;
  v8 = *(_DWORD *)(a2 + 240);
  if (v8 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198D01F44);
  }
  v10 = *(_DWORD *)(a2 + 244);
  if (v10 <= v8)
    v10 = v8 + 1;
  *(_DWORD *)(a2 + 240) = v8 + 1;
  *(_DWORD *)(a2 + 244) = v10;
  *a6 = ~v8;
  v12 = a5;
  v13 = a4;
  switch((int)a3)
  {
    case 30:
    case 36:
      v15 = a4;
      v16 = a5;
      result = JSC::WasmI64AtomicRmw32AddU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, a4, a7, a5, (uint64_t)a6, a7, a8);
      if ((result & 1) == 0)
      {
        result = JSC::WasmI64AtomicRmw32AddU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v15, a7, v16, v18, v19, v20);
        if ((result & 1) == 0)
          result = JSC::WasmI64AtomicRmw32AddU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v15, a7, v16, v21, v22, v23);
      }
      goto LABEL_613;
    case 31:
      v291 = a4;
      v292 = a5;
      result = JSC::WasmI64AtomicRmwAdd::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, a4, a7, a5, (uint64_t)a6, a7, a8);
      if ((result & 1) == 0)
      {
        result = JSC::WasmI64AtomicRmwAdd::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v291, a7, v292, v293, v294, v295);
        if ((result & 1) == 0)
          result = JSC::WasmI64AtomicRmwAdd::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v291, a7, v292, v296, v297, v298);
      }
      goto LABEL_613;
    case 32:
    case 34:
      v49 = a4;
      v50 = a5;
      result = JSC::WasmI64AtomicRmw8AddU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, a4, a7, a5, (uint64_t)a6, a7, a8);
      if ((result & 1) == 0)
      {
        result = JSC::WasmI64AtomicRmw8AddU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v49, a7, v50, v51, v52, v53);
        if ((result & 1) == 0)
          result = JSC::WasmI64AtomicRmw8AddU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v49, a7, v50, v54, v55, v56);
      }
      goto LABEL_613;
    case 33:
    case 35:
      v37 = a4;
      v38 = a5;
      result = JSC::WasmI64AtomicRmw16AddU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, a4, a7, a5, (uint64_t)a6, a7, a8);
      if ((result & 1) == 0)
      {
        result = JSC::WasmI64AtomicRmw16AddU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v37, a7, v38, v39, v40, v41);
        if ((result & 1) == 0)
          result = JSC::WasmI64AtomicRmw16AddU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v37, a7, v38, v42, v43, v44);
      }
      goto LABEL_613;
    case 37:
    case 43:
      v57 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v57 = (v8 + 16) < 0x90;
      if (v57)
      {
        v58 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v58 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v58)
        {
          v59 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v59 = (a5 + 128) < 0x90;
          if (v59)
          {
            v60 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v60;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -59;
            *(_DWORD *)(a2 + 36) = 197;
            LOBYTE(v421) = -59;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -59;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v144 = (v8 + 64) >> 6 < 0x201;
      else
        v144 = (v8 + 1073774528) < 0x8000;
      if (v144)
      {
        v145 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v145 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v145)
        {
          v146 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v146 = (a5 + 0x8000) >> 6 < 0x201;
          if (v146)
          {
            v147 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v147;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 197;
            LOBYTE(v421) = -115;
            v148 = *(unsigned int *)(a2 + 12);
            v149 = *(unsigned int *)(a2 + 16);
            if (v148 > v149)
            {
              *(_DWORD *)(a2 + 16) = v149 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v149) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v148 == *(_DWORD *)(a2 + 8))
              {
                v408 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v148 + 1), (unint64_t)&v421);
                v148 = *(unsigned int *)(a2 + 12);
                v150 = *(_QWORD *)a2;
                v151 = *v408;
              }
              else
              {
                v150 = *(_QWORD *)a2;
                v151 = -115;
              }
              *(_BYTE *)(v150 + v148) = v151;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -59;
            goto LABEL_577;
          }
        }
      }
      v239 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v239;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 197;
      LOBYTE(v421) = -114;
      v240 = *(unsigned int *)(a2 + 12);
      v241 = *(unsigned int *)(a2 + 16);
      if (v240 > v241)
      {
        *(_DWORD *)(a2 + 16) = v241 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v241) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v240 == *(_DWORD *)(a2 + 8))
        {
          v393 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v240 + 1), (unint64_t)&v421);
          v240 = *(unsigned int *)(a2 + 12);
          v242 = *(_QWORD *)a2;
          v243 = *v393;
        }
        else
        {
          v242 = *(_QWORD *)a2;
          v243 = -114;
        }
        *(_BYTE *)(v242 + v240) = v243;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -59;
      goto LABEL_608;
    case 38:
      v299 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v299 = (v8 + 16) < 0x90;
      if (v299)
      {
        v300 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v300 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v300)
        {
          v301 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v301 = (a5 + 128) < 0x90;
          if (v301)
          {
            v302 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v302;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -62;
            *(_DWORD *)(a2 + 36) = 194;
            LOBYTE(v421) = -62;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -62;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v336 = (v8 + 64) >> 6 < 0x201;
      else
        v336 = (v8 + 1073774528) < 0x8000;
      if (v336)
      {
        v337 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v337 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v337)
        {
          v338 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v338 = (a5 + 0x8000) >> 6 < 0x201;
          if (v338)
          {
            v339 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v339;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 194;
            LOBYTE(v421) = -115;
            v340 = *(unsigned int *)(a2 + 12);
            v341 = *(unsigned int *)(a2 + 16);
            if (v340 > v341)
            {
              *(_DWORD *)(a2 + 16) = v341 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v341) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v340 == *(_DWORD *)(a2 + 8))
              {
                v418 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v340 + 1), (unint64_t)&v421);
                v340 = *(unsigned int *)(a2 + 12);
                v342 = *(_QWORD *)a2;
                v343 = *v418;
              }
              else
              {
                v342 = *(_QWORD *)a2;
                v343 = -115;
              }
              *(_BYTE *)(v342 + v340) = v343;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -62;
            goto LABEL_577;
          }
        }
      }
      v370 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v370;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 194;
      LOBYTE(v421) = -114;
      v371 = *(unsigned int *)(a2 + 12);
      v372 = *(unsigned int *)(a2 + 16);
      if (v371 > v372)
      {
        *(_DWORD *)(a2 + 16) = v372 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v372) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v371 == *(_DWORD *)(a2 + 8))
        {
          v402 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v371 + 1), (unint64_t)&v421);
          v371 = *(unsigned int *)(a2 + 12);
          v373 = *(_QWORD *)a2;
          v374 = *v402;
        }
        else
        {
          v373 = *(_QWORD *)a2;
          v374 = -114;
        }
        *(_BYTE *)(v373 + v371) = v374;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -62;
      goto LABEL_608;
    case 39:
    case 41:
      v65 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v65 = (v8 + 16) < 0x90;
      if (v65)
      {
        v66 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v66 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v66)
        {
          v67 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v67 = (a5 + 128) < 0x90;
          if (v67)
          {
            v68 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v68;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -61;
            *(_DWORD *)(a2 + 36) = 195;
            LOBYTE(v421) = -61;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -61;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v160 = (v8 + 64) >> 6 < 0x201;
      else
        v160 = (v8 + 1073774528) < 0x8000;
      if (v160)
      {
        v161 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v161 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v161)
        {
          v162 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v162 = (a5 + 0x8000) >> 6 < 0x201;
          if (v162)
          {
            v163 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v163;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 195;
            LOBYTE(v421) = -115;
            v164 = *(unsigned int *)(a2 + 12);
            v165 = *(unsigned int *)(a2 + 16);
            if (v164 > v165)
            {
              *(_DWORD *)(a2 + 16) = v165 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v165) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v164 == *(_DWORD *)(a2 + 8))
              {
                v410 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v164 + 1), (unint64_t)&v421);
                v164 = *(unsigned int *)(a2 + 12);
                v166 = *(_QWORD *)a2;
                v167 = *v410;
              }
              else
              {
                v166 = *(_QWORD *)a2;
                v167 = -115;
              }
              *(_BYTE *)(v166 + v164) = v167;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -61;
            goto LABEL_577;
          }
        }
      }
      v244 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v244;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 195;
      LOBYTE(v421) = -114;
      v245 = *(unsigned int *)(a2 + 12);
      v246 = *(unsigned int *)(a2 + 16);
      if (v245 > v246)
      {
        *(_DWORD *)(a2 + 16) = v246 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v246) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v245 == *(_DWORD *)(a2 + 8))
        {
          v394 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v245 + 1), (unint64_t)&v421);
          v245 = *(unsigned int *)(a2 + 12);
          v247 = *(_QWORD *)a2;
          v248 = *v394;
        }
        else
        {
          v247 = *(_QWORD *)a2;
          v248 = -114;
        }
        *(_BYTE *)(v247 + v245) = v248;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -61;
      goto LABEL_608;
    case 40:
    case 42:
      v69 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v69 = (v8 + 16) < 0x90;
      if (v69)
      {
        v70 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v70 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v70)
        {
          v71 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v71 = (a5 + 128) < 0x90;
          if (v71)
          {
            v72 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v72;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -60;
            *(_DWORD *)(a2 + 36) = 196;
            LOBYTE(v421) = -60;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -60;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v168 = (v8 + 64) >> 6 < 0x201;
      else
        v168 = (v8 + 1073774528) < 0x8000;
      if (v168)
      {
        v169 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v169 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v169)
        {
          v170 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v170 = (a5 + 0x8000) >> 6 < 0x201;
          if (v170)
          {
            v171 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v171;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 196;
            LOBYTE(v421) = -115;
            v172 = *(unsigned int *)(a2 + 12);
            v173 = *(unsigned int *)(a2 + 16);
            if (v172 > v173)
            {
              *(_DWORD *)(a2 + 16) = v173 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v173) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v172 == *(_DWORD *)(a2 + 8))
              {
                v411 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v172 + 1), (unint64_t)&v421);
                v172 = *(unsigned int *)(a2 + 12);
                v174 = *(_QWORD *)a2;
                v175 = *v411;
              }
              else
              {
                v174 = *(_QWORD *)a2;
                v175 = -115;
              }
              *(_BYTE *)(v174 + v172) = v175;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -60;
            goto LABEL_577;
          }
        }
      }
      v249 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v249;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 196;
      LOBYTE(v421) = -114;
      v250 = *(unsigned int *)(a2 + 12);
      v251 = *(unsigned int *)(a2 + 16);
      if (v250 > v251)
      {
        *(_DWORD *)(a2 + 16) = v251 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v251) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v250 == *(_DWORD *)(a2 + 8))
        {
          v395 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v250 + 1), (unint64_t)&v421);
          v250 = *(unsigned int *)(a2 + 12);
          v252 = *(_QWORD *)a2;
          v253 = *v395;
        }
        else
        {
          v252 = *(_QWORD *)a2;
          v253 = -114;
        }
        *(_BYTE *)(v252 + v250) = v253;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -60;
      goto LABEL_608;
    case 44:
    case 50:
      v61 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v61 = (v8 + 16) < 0x90;
      if (v61)
      {
        v62 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v62 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v62)
        {
          v63 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v63 = (a5 + 128) < 0x90;
          if (v63)
          {
            v64 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v64;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -55;
            *(_DWORD *)(a2 + 36) = 201;
            LOBYTE(v421) = -55;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -55;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v152 = (v8 + 64) >> 6 < 0x201;
      else
        v152 = (v8 + 1073774528) < 0x8000;
      if (v152)
      {
        v153 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v153 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v153)
        {
          v154 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v154 = (a5 + 0x8000) >> 6 < 0x201;
          if (v154)
          {
            v155 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v155;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 201;
            LOBYTE(v421) = -115;
            v156 = *(unsigned int *)(a2 + 12);
            v157 = *(unsigned int *)(a2 + 16);
            if (v156 > v157)
            {
              *(_DWORD *)(a2 + 16) = v157 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v157) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v156 == *(_DWORD *)(a2 + 8))
              {
                v409 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v156 + 1), (unint64_t)&v421);
                v156 = *(unsigned int *)(a2 + 12);
                v158 = *(_QWORD *)a2;
                v159 = *v409;
              }
              else
              {
                v158 = *(_QWORD *)a2;
                v159 = -115;
              }
              *(_BYTE *)(v158 + v156) = v159;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -55;
            goto LABEL_577;
          }
        }
      }
      v234 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v234;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 201;
      LOBYTE(v421) = -114;
      v235 = *(unsigned int *)(a2 + 12);
      v236 = *(unsigned int *)(a2 + 16);
      if (v235 > v236)
      {
        *(_DWORD *)(a2 + 16) = v236 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v236) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v235 == *(_DWORD *)(a2 + 8))
        {
          v392 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v235 + 1), (unint64_t)&v421);
          v235 = *(unsigned int *)(a2 + 12);
          v237 = *(_QWORD *)a2;
          v238 = *v392;
        }
        else
        {
          v237 = *(_QWORD *)a2;
          v238 = -114;
        }
        *(_BYTE *)(v237 + v235) = v238;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -55;
      goto LABEL_608;
    case 45:
      v287 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v287 = (v8 + 16) < 0x90;
      if (v287)
      {
        v288 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v288 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v288)
        {
          v289 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v289 = (a5 + 128) < 0x90;
          if (v289)
          {
            v290 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v290;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -58;
            *(_DWORD *)(a2 + 36) = 198;
            LOBYTE(v421) = -58;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -58;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v328 = (v8 + 64) >> 6 < 0x201;
      else
        v328 = (v8 + 1073774528) < 0x8000;
      if (v328)
      {
        v329 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v329 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v329)
        {
          v330 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v330 = (a5 + 0x8000) >> 6 < 0x201;
          if (v330)
          {
            v331 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v331;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 198;
            LOBYTE(v421) = -115;
            v332 = *(unsigned int *)(a2 + 12);
            v333 = *(unsigned int *)(a2 + 16);
            if (v332 > v333)
            {
              *(_DWORD *)(a2 + 16) = v333 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v333) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v332 == *(_DWORD *)(a2 + 8))
              {
                v417 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v332 + 1), (unint64_t)&v421);
                v332 = *(unsigned int *)(a2 + 12);
                v334 = *(_QWORD *)a2;
                v335 = *v417;
              }
              else
              {
                v334 = *(_QWORD *)a2;
                v335 = -115;
              }
              *(_BYTE *)(v334 + v332) = v335;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -58;
            goto LABEL_577;
          }
        }
      }
      v365 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v365;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 198;
      LOBYTE(v421) = -114;
      v366 = *(unsigned int *)(a2 + 12);
      v367 = *(unsigned int *)(a2 + 16);
      if (v366 > v367)
      {
        *(_DWORD *)(a2 + 16) = v367 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v367) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v366 == *(_DWORD *)(a2 + 8))
        {
          v401 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v366 + 1), (unint64_t)&v421);
          v366 = *(unsigned int *)(a2 + 12);
          v368 = *(_QWORD *)a2;
          v369 = *v401;
        }
        else
        {
          v368 = *(_QWORD *)a2;
          v369 = -114;
        }
        *(_BYTE *)(v368 + v366) = v369;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -58;
      goto LABEL_608;
    case 46:
    case 48:
      v73 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v73 = (v8 + 16) < 0x90;
      if (v73)
      {
        v74 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v74 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v74)
        {
          v75 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v75 = (a5 + 128) < 0x90;
          if (v75)
          {
            v76 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v76;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -57;
            *(_DWORD *)(a2 + 36) = 199;
            LOBYTE(v421) = -57;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -57;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v192 = (v8 + 64) >> 6 < 0x201;
      else
        v192 = (v8 + 1073774528) < 0x8000;
      if (v192)
      {
        v193 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v193 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v193)
        {
          v194 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v194 = (a5 + 0x8000) >> 6 < 0x201;
          if (v194)
          {
            v195 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v195;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 199;
            LOBYTE(v421) = -115;
            v196 = *(unsigned int *)(a2 + 12);
            v197 = *(unsigned int *)(a2 + 16);
            if (v196 > v197)
            {
              *(_DWORD *)(a2 + 16) = v197 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v197) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v196 == *(_DWORD *)(a2 + 8))
              {
                v414 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v196 + 1), (unint64_t)&v421);
                v196 = *(unsigned int *)(a2 + 12);
                v198 = *(_QWORD *)a2;
                v199 = *v414;
              }
              else
              {
                v198 = *(_QWORD *)a2;
                v199 = -115;
              }
              *(_BYTE *)(v198 + v196) = v199;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -57;
            goto LABEL_577;
          }
        }
      }
      v264 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v264;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 199;
      LOBYTE(v421) = -114;
      v265 = *(unsigned int *)(a2 + 12);
      v266 = *(unsigned int *)(a2 + 16);
      if (v265 > v266)
      {
        *(_DWORD *)(a2 + 16) = v266 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v266) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v265 == *(_DWORD *)(a2 + 8))
        {
          v398 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v265 + 1), (unint64_t)&v421);
          v265 = *(unsigned int *)(a2 + 12);
          v267 = *(_QWORD *)a2;
          v268 = *v398;
        }
        else
        {
          v267 = *(_QWORD *)a2;
          v268 = -114;
        }
        *(_BYTE *)(v267 + v265) = v268;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -57;
      goto LABEL_608;
    case 47:
    case 49:
      v77 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v77 = (v8 + 16) < 0x90;
      if (v77)
      {
        v78 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v78 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v78)
        {
          v79 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v79 = (a5 + 128) < 0x90;
          if (v79)
          {
            v80 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v80;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -56;
            *(_DWORD *)(a2 + 36) = 200;
            LOBYTE(v421) = -56;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -56;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v200 = (v8 + 64) >> 6 < 0x201;
      else
        v200 = (v8 + 1073774528) < 0x8000;
      if (v200)
      {
        v201 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v201 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v201)
        {
          v202 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v202 = (a5 + 0x8000) >> 6 < 0x201;
          if (v202)
          {
            v203 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v203;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 200;
            LOBYTE(v421) = -115;
            v204 = *(unsigned int *)(a2 + 12);
            v205 = *(unsigned int *)(a2 + 16);
            if (v204 > v205)
            {
              *(_DWORD *)(a2 + 16) = v205 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v205) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v204 == *(_DWORD *)(a2 + 8))
              {
                v415 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v204 + 1), (unint64_t)&v421);
                v204 = *(unsigned int *)(a2 + 12);
                v206 = *(_QWORD *)a2;
                v207 = *v415;
              }
              else
              {
                v206 = *(_QWORD *)a2;
                v207 = -115;
              }
              *(_BYTE *)(v206 + v204) = v207;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -56;
            goto LABEL_577;
          }
        }
      }
      v269 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v269;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 200;
      LOBYTE(v421) = -114;
      v270 = *(unsigned int *)(a2 + 12);
      v271 = *(unsigned int *)(a2 + 16);
      if (v270 > v271)
      {
        *(_DWORD *)(a2 + 16) = v271 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v271) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v270 == *(_DWORD *)(a2 + 8))
        {
          v399 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v270 + 1), (unint64_t)&v421);
          v270 = *(unsigned int *)(a2 + 12);
          v272 = *(_QWORD *)a2;
          v273 = *v399;
        }
        else
        {
          v272 = *(_QWORD *)a2;
          v273 = -114;
        }
        *(_BYTE *)(v272 + v270) = v273;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -56;
      goto LABEL_608;
    case 51:
    case 57:
      v33 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v33 = (v8 + 16) < 0x90;
      if (v33)
      {
        v34 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v34 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v34)
        {
          v35 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v35 = (a5 + 128) < 0x90;
          if (v35)
          {
            v36 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v36;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -51;
            *(_DWORD *)(a2 + 36) = 205;
            LOBYTE(v421) = -51;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -51;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v128 = (v8 + 64) >> 6 < 0x201;
      else
        v128 = (v8 + 1073774528) < 0x8000;
      if (v128)
      {
        v129 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v129 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v129)
        {
          v130 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v130 = (a5 + 0x8000) >> 6 < 0x201;
          if (v130)
          {
            v131 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v131;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 205;
            LOBYTE(v421) = -115;
            v132 = *(unsigned int *)(a2 + 12);
            v133 = *(unsigned int *)(a2 + 16);
            if (v132 > v133)
            {
              *(_DWORD *)(a2 + 16) = v133 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v133) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v132 == *(_DWORD *)(a2 + 8))
              {
                v406 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v132 + 1), (unint64_t)&v421);
                v132 = *(unsigned int *)(a2 + 12);
                v134 = *(_QWORD *)a2;
                v135 = *v406;
              }
              else
              {
                v134 = *(_QWORD *)a2;
                v135 = -115;
              }
              *(_BYTE *)(v134 + v132) = v135;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -51;
            goto LABEL_577;
          }
        }
      }
      v224 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v224;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 205;
      LOBYTE(v421) = -114;
      v225 = *(unsigned int *)(a2 + 12);
      v226 = *(unsigned int *)(a2 + 16);
      if (v225 > v226)
      {
        *(_DWORD *)(a2 + 16) = v226 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v226) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v225 == *(_DWORD *)(a2 + 8))
        {
          v390 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v225 + 1), (unint64_t)&v421);
          v225 = *(unsigned int *)(a2 + 12);
          v227 = *(_QWORD *)a2;
          v228 = *v390;
        }
        else
        {
          v227 = *(_QWORD *)a2;
          v228 = -114;
        }
        *(_BYTE *)(v227 + v225) = v228;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -51;
      goto LABEL_608;
    case 52:
      v307 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v307 = (v8 + 16) < 0x90;
      if (v307)
      {
        v308 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v308 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v308)
        {
          v309 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v309 = (a5 + 128) < 0x90;
          if (v309)
          {
            v310 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v310;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -54;
            *(_DWORD *)(a2 + 36) = 202;
            LOBYTE(v421) = -54;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -54;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v352 = (v8 + 64) >> 6 < 0x201;
      else
        v352 = (v8 + 1073774528) < 0x8000;
      if (v352)
      {
        v353 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v353 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v353)
        {
          v354 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v354 = (a5 + 0x8000) >> 6 < 0x201;
          if (v354)
          {
            v355 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v355;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 202;
            LOBYTE(v421) = -115;
            v356 = *(unsigned int *)(a2 + 12);
            v357 = *(unsigned int *)(a2 + 16);
            if (v356 > v357)
            {
              *(_DWORD *)(a2 + 16) = v357 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v357) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v356 == *(_DWORD *)(a2 + 8))
              {
                v420 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v356 + 1), (unint64_t)&v421);
                v356 = *(unsigned int *)(a2 + 12);
                v358 = *(_QWORD *)a2;
                v359 = *v420;
              }
              else
              {
                v358 = *(_QWORD *)a2;
                v359 = -115;
              }
              *(_BYTE *)(v358 + v356) = v359;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -54;
            goto LABEL_577;
          }
        }
      }
      v380 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v380;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 202;
      LOBYTE(v421) = -114;
      v381 = *(unsigned int *)(a2 + 12);
      v382 = *(unsigned int *)(a2 + 16);
      if (v381 > v382)
      {
        *(_DWORD *)(a2 + 16) = v382 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v382) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v381 == *(_DWORD *)(a2 + 8))
        {
          v404 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v381 + 1), (unint64_t)&v421);
          v381 = *(unsigned int *)(a2 + 12);
          v383 = *(_QWORD *)a2;
          v384 = *v404;
        }
        else
        {
          v383 = *(_QWORD *)a2;
          v384 = -114;
        }
        *(_BYTE *)(v383 + v381) = v384;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -54;
      goto LABEL_608;
    case 53:
    case 55:
      v45 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v45 = (v8 + 16) < 0x90;
      if (v45)
      {
        v46 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v46 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v46)
        {
          v47 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v47 = (a5 + 128) < 0x90;
          if (v47)
          {
            v48 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v48;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -53;
            *(_DWORD *)(a2 + 36) = 203;
            LOBYTE(v421) = -53;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -53;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v136 = (v8 + 64) >> 6 < 0x201;
      else
        v136 = (v8 + 1073774528) < 0x8000;
      if (v136)
      {
        v137 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v137 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v137)
        {
          v138 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v138 = (a5 + 0x8000) >> 6 < 0x201;
          if (v138)
          {
            v139 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v139;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 203;
            LOBYTE(v421) = -115;
            v140 = *(unsigned int *)(a2 + 12);
            v141 = *(unsigned int *)(a2 + 16);
            if (v140 > v141)
            {
              *(_DWORD *)(a2 + 16) = v141 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v141) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v140 == *(_DWORD *)(a2 + 8))
              {
                v407 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v140 + 1), (unint64_t)&v421);
                v140 = *(unsigned int *)(a2 + 12);
                v142 = *(_QWORD *)a2;
                v143 = *v407;
              }
              else
              {
                v142 = *(_QWORD *)a2;
                v143 = -115;
              }
              *(_BYTE *)(v142 + v140) = v143;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -53;
            goto LABEL_577;
          }
        }
      }
      v229 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v229;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 203;
      LOBYTE(v421) = -114;
      v230 = *(unsigned int *)(a2 + 12);
      v231 = *(unsigned int *)(a2 + 16);
      if (v230 > v231)
      {
        *(_DWORD *)(a2 + 16) = v231 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v231) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v230 == *(_DWORD *)(a2 + 8))
        {
          v391 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v230 + 1), (unint64_t)&v421);
          v230 = *(unsigned int *)(a2 + 12);
          v232 = *(_QWORD *)a2;
          v233 = *v391;
        }
        else
        {
          v232 = *(_QWORD *)a2;
          v233 = -114;
        }
        *(_BYTE *)(v232 + v230) = v233;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -53;
      goto LABEL_608;
    case 54:
    case 56:
      v81 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v81 = (v8 + 16) < 0x90;
      if (v81)
      {
        v82 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v82 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v82)
        {
          v83 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v83 = (a5 + 128) < 0x90;
          if (v83)
          {
            v84 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v84;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -52;
            *(_DWORD *)(a2 + 36) = 204;
            LOBYTE(v421) = -52;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -52;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v176 = (v8 + 64) >> 6 < 0x201;
      else
        v176 = (v8 + 1073774528) < 0x8000;
      if (v176)
      {
        v177 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v177 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v177)
        {
          v178 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v178 = (a5 + 0x8000) >> 6 < 0x201;
          if (v178)
          {
            v179 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v179;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 204;
            LOBYTE(v421) = -115;
            v180 = *(unsigned int *)(a2 + 12);
            v181 = *(unsigned int *)(a2 + 16);
            if (v180 > v181)
            {
              *(_DWORD *)(a2 + 16) = v181 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v181) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v180 == *(_DWORD *)(a2 + 8))
              {
                v412 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v180 + 1), (unint64_t)&v421);
                v180 = *(unsigned int *)(a2 + 12);
                v182 = *(_QWORD *)a2;
                v183 = *v412;
              }
              else
              {
                v182 = *(_QWORD *)a2;
                v183 = -115;
              }
              *(_BYTE *)(v182 + v180) = v183;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -52;
            goto LABEL_577;
          }
        }
      }
      v254 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v254;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 204;
      LOBYTE(v421) = -114;
      v255 = *(unsigned int *)(a2 + 12);
      v256 = *(unsigned int *)(a2 + 16);
      if (v255 > v256)
      {
        *(_DWORD *)(a2 + 16) = v256 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v256) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v255 == *(_DWORD *)(a2 + 8))
        {
          v396 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v255 + 1), (unint64_t)&v421);
          v255 = *(unsigned int *)(a2 + 12);
          v257 = *(_QWORD *)a2;
          v258 = *v396;
        }
        else
        {
          v257 = *(_QWORD *)a2;
          v258 = -114;
        }
        *(_BYTE *)(v257 + v255) = v258;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -52;
      goto LABEL_608;
    case 58:
    case 64:
      v24 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v24 = (v8 + 16) < 0x90;
      if (v24)
      {
        v25 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v25 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v25)
        {
          v26 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v26 = (a5 + 128) < 0x90;
          if (v26)
          {
            v27 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v27;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -47;
            *(_DWORD *)(a2 + 36) = 209;
            LOBYTE(v421) = -47;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -47;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v117 = (v8 + 64) >> 6 < 0x201;
      else
        v117 = (v8 + 1073774528) < 0x8000;
      if (v117)
      {
        v118 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v118 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v118)
        {
          v119 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v119 = (a5 + 0x8000) >> 6 < 0x201;
          if (v119)
          {
            v120 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v120;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 209;
            LOBYTE(v421) = -115;
            v121 = *(unsigned int *)(a2 + 12);
            v122 = *(unsigned int *)(a2 + 16);
            if (v121 > v122)
            {
              *(_DWORD *)(a2 + 16) = v122 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v122) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v121 == *(_DWORD *)(a2 + 8))
              {
                v405 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v121 + 1), (unint64_t)&v421);
                v121 = *(unsigned int *)(a2 + 12);
                v123 = *(_QWORD *)a2;
                v124 = *v405;
              }
              else
              {
                v123 = *(_QWORD *)a2;
                v124 = -115;
              }
              *(_BYTE *)(v123 + v121) = v124;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -47;
            goto LABEL_577;
          }
        }
      }
      v216 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v216;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 209;
      LOBYTE(v421) = -114;
      v217 = *(unsigned int *)(a2 + 12);
      v218 = *(unsigned int *)(a2 + 16);
      if (v217 > v218)
      {
        *(_DWORD *)(a2 + 16) = v218 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v218) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v217 == *(_DWORD *)(a2 + 8))
        {
          v389 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v217 + 1), (unint64_t)&v421);
          v217 = *(unsigned int *)(a2 + 12);
          v219 = *(_QWORD *)a2;
          v220 = *v389;
        }
        else
        {
          v219 = *(_QWORD *)a2;
          v220 = -114;
        }
        *(_BYTE *)(v219 + v217) = v220;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -47;
      goto LABEL_608;
    case 59:
      v303 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v303 = (v8 + 16) < 0x90;
      if (v303)
      {
        v304 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v304 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v304)
        {
          v305 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v305 = (a5 + 128) < 0x90;
          if (v305)
          {
            v306 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v306;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -50;
            *(_DWORD *)(a2 + 36) = 206;
            LOBYTE(v421) = -50;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -50;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v344 = (v8 + 64) >> 6 < 0x201;
      else
        v344 = (v8 + 1073774528) < 0x8000;
      if (v344)
      {
        v345 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v345 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v345)
        {
          v346 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v346 = (a5 + 0x8000) >> 6 < 0x201;
          if (v346)
          {
            v347 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v347;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 206;
            LOBYTE(v421) = -115;
            v348 = *(unsigned int *)(a2 + 12);
            v349 = *(unsigned int *)(a2 + 16);
            if (v348 > v349)
            {
              *(_DWORD *)(a2 + 16) = v349 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v349) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v348 == *(_DWORD *)(a2 + 8))
              {
                v419 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v348 + 1), (unint64_t)&v421);
                v348 = *(unsigned int *)(a2 + 12);
                v350 = *(_QWORD *)a2;
                v351 = *v419;
              }
              else
              {
                v350 = *(_QWORD *)a2;
                v351 = -115;
              }
              *(_BYTE *)(v350 + v348) = v351;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -50;
            goto LABEL_577;
          }
        }
      }
      v375 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v375;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 206;
      LOBYTE(v421) = -114;
      v376 = *(unsigned int *)(a2 + 12);
      v377 = *(unsigned int *)(a2 + 16);
      if (v376 > v377)
      {
        *(_DWORD *)(a2 + 16) = v377 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v377) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v376 == *(_DWORD *)(a2 + 8))
        {
          v403 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v376 + 1), (unint64_t)&v421);
          v376 = *(unsigned int *)(a2 + 12);
          v378 = *(_QWORD *)a2;
          v379 = *v403;
        }
        else
        {
          v378 = *(_QWORD *)a2;
          v379 = -114;
        }
        *(_BYTE *)(v378 + v376) = v379;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -50;
      goto LABEL_608;
    case 60:
    case 62:
      v85 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v85 = (v8 + 16) < 0x90;
      if (v85)
      {
        v86 = (a4 - 1073741808) < 0x80;
        if ((int)a4 <= 0x3FFFFFFF)
          v86 = (a4 + 128) < 0x90;
        if (a7 <= 0xFF && v86)
        {
          v87 = (a5 - 1073741808) < 0x80;
          if ((int)a5 <= 0x3FFFFFFF)
            v87 = (a5 + 128) < 0x90;
          if (v87)
          {
            v88 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v88;
            result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            v28 = -49;
            *(_DWORD *)(a2 + 36) = 207;
            LOBYTE(v421) = -49;
            v29 = *(unsigned int *)(a2 + 12);
            v30 = *(unsigned int *)(a2 + 16);
            if (v29 > v30)
              goto LABEL_654;
            if ((_DWORD)v29 != *(_DWORD *)(a2 + 8))
            {
              v31 = *(_QWORD *)a2;
              v32 = -49;
              goto LABEL_489;
            }
            goto LABEL_615;
          }
        }
      }
      if (v8 >= -1073741824)
        v184 = (v8 + 64) >> 6 < 0x201;
      else
        v184 = (v8 + 1073774528) < 0x8000;
      if (v184)
      {
        v185 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v185 = (a4 + 0x8000) >> 6 < 0x201;
        if (!WORD1(a7) && v185)
        {
          v186 = (a5 - 1073741760) < 0x8000;
          if ((int)a5 <= 0x3FFFFFFF)
            v186 = (a5 + 0x8000) >> 6 < 0x201;
          if (v186)
          {
            v187 = *(_DWORD *)(a2 + 16);
            v421 = a2;
            v422 = v187;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
            *(_DWORD *)(a2 + 36) = 207;
            LOBYTE(v421) = -115;
            v188 = *(unsigned int *)(a2 + 12);
            v189 = *(unsigned int *)(a2 + 16);
            if (v188 > v189)
            {
              *(_DWORD *)(a2 + 16) = v189 + 1;
              *(_BYTE *)(*(_QWORD *)a2 + v189) = -115;
              v125 = *(_DWORD *)(a2 + 12);
              v126 = *(_DWORD *)(a2 + 16);
            }
            else
            {
              if ((_DWORD)v188 == *(_DWORD *)(a2 + 8))
              {
                v413 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v188 + 1), (unint64_t)&v421);
                v188 = *(unsigned int *)(a2 + 12);
                v190 = *(_QWORD *)a2;
                v191 = *v413;
              }
              else
              {
                v190 = *(_QWORD *)a2;
                v191 = -115;
              }
              *(_BYTE *)(v190 + v188) = v191;
              v125 = *(_DWORD *)(a2 + 12) + 1;
              v126 = *(_DWORD *)(a2 + 16) + 1;
              *(_DWORD *)(a2 + 12) = v125;
              *(_DWORD *)(a2 + 16) = v126;
            }
            v127 = -49;
            goto LABEL_577;
          }
        }
      }
      v259 = *(_DWORD *)(a2 + 16);
      v421 = a2;
      v422 = v259;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a2 + 36) = 207;
      LOBYTE(v421) = -114;
      v260 = *(unsigned int *)(a2 + 12);
      v261 = *(unsigned int *)(a2 + 16);
      if (v260 > v261)
      {
        *(_DWORD *)(a2 + 16) = v261 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v261) = -114;
        v221 = *(_DWORD *)(a2 + 12);
        v222 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v260 == *(_DWORD *)(a2 + 8))
        {
          v397 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v260 + 1), (unint64_t)&v421);
          v260 = *(unsigned int *)(a2 + 12);
          v262 = *(_QWORD *)a2;
          v263 = *v397;
        }
        else
        {
          v262 = *(_QWORD *)a2;
          v263 = -114;
        }
        *(_BYTE *)(v262 + v260) = v263;
        v221 = *(_DWORD *)(a2 + 12) + 1;
        v222 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v221;
        *(_DWORD *)(a2 + 16) = v222;
      }
      v223 = -49;
      goto LABEL_608;
    case 61:
    case 63:
      v105 = (v8 + 1073741936) < 0x80;
      if (v8 >= -1073741824)
        v105 = (v8 + 16) < 0x90;
      if (!v105)
        goto LABEL_355;
      v106 = (a4 - 1073741808) < 0x80;
      if ((int)a4 <= 0x3FFFFFFF)
        v106 = (a4 + 128) < 0x90;
      if (a7 > 0xFF || !v106)
        goto LABEL_355;
      v107 = (a5 - 1073741808) < 0x80;
      if ((int)a5 <= 0x3FFFFFFF)
        v107 = (a5 + 128) < 0x90;
      if (v107)
      {
        v108 = *(_DWORD *)(a2 + 16);
        v421 = a2;
        v422 = v108;
        result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
        v28 = -48;
        *(_DWORD *)(a2 + 36) = 208;
        LOBYTE(v421) = -48;
        v29 = *(unsigned int *)(a2 + 12);
        v30 = *(unsigned int *)(a2 + 16);
        if (v29 > v30)
        {
LABEL_654:
          *(_DWORD *)(a2 + 16) = v30 + 1;
          *(_BYTE *)(*(_QWORD *)a2 + v30) = v28;
          v311 = *(_DWORD *)(a2 + 12);
          v312 = *(_DWORD *)(a2 + 16);
        }
        else
        {
          if ((_DWORD)v29 == *(_DWORD *)(a2 + 8))
          {
LABEL_615:
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v29 + 1), (unint64_t)&v421);
            *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)result;
          }
          else
          {
            v31 = *(_QWORD *)a2;
            v32 = -48;
LABEL_489:
            *(_BYTE *)(v31 + v29) = v32;
          }
          v311 = *(_DWORD *)(a2 + 12) + 1;
          v312 = *(_DWORD *)(a2 + 16) + 1;
          *(_DWORD *)(a2 + 12) = v311;
          *(_DWORD *)(a2 + 16) = v312;
        }
        v313 = 15 - v8;
        if (v8 >= -1073741824)
          v313 = ~(_BYTE)v8;
        LOBYTE(v421) = v313;
        if (v311 > v312)
        {
          *(_DWORD *)(a2 + 16) = v312 + 1;
          *(_BYTE *)(*(_QWORD *)a2 + v312) = v313;
          v316 = *(_DWORD *)(a2 + 12);
          v317 = *(_DWORD *)(a2 + 16);
        }
        else
        {
          v314 = v311;
          if (v311 == *(_DWORD *)(a2 + 8))
          {
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v311 + 1), (unint64_t)&v421);
            v314 = *(unsigned int *)(a2 + 12);
            v315 = *(_QWORD *)a2;
            v313 = *(_BYTE *)result;
          }
          else
          {
            v315 = *(_QWORD *)a2;
          }
          *(_BYTE *)(v315 + v314) = v313;
          v316 = *(_DWORD *)(a2 + 12) + 1;
          v317 = *(_DWORD *)(a2 + 16) + 1;
          *(_DWORD *)(a2 + 12) = v316;
          *(_DWORD *)(a2 + 16) = v317;
        }
        v318 = v13 + 16;
        if (v13 <= 0x3FFFFFFF)
          v318 = v13;
        LOBYTE(v421) = v318;
        if (v316 > v317)
        {
          *(_DWORD *)(a2 + 16) = v317 + 1;
          *(_BYTE *)(*(_QWORD *)a2 + v317) = v318;
          v321 = *(_DWORD *)(a2 + 12);
          v322 = *(_DWORD *)(a2 + 16);
        }
        else
        {
          v319 = v316;
          if (v316 == *(_DWORD *)(a2 + 8))
          {
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v316 + 1), (unint64_t)&v421);
            v319 = *(unsigned int *)(a2 + 12);
            v320 = *(_QWORD *)a2;
            v318 = *(_BYTE *)result;
          }
          else
          {
            v320 = *(_QWORD *)a2;
          }
          *(_BYTE *)(v320 + v319) = v318;
          v321 = *(_DWORD *)(a2 + 12) + 1;
          v322 = *(_DWORD *)(a2 + 16) + 1;
          *(_DWORD *)(a2 + 12) = v321;
          *(_DWORD *)(a2 + 16) = v322;
        }
        LOBYTE(v421) = a7;
        if (v321 > v322)
        {
          *(_DWORD *)(a2 + 16) = v322 + 1;
          *(_BYTE *)(*(_QWORD *)a2 + v322) = a7;
          v323 = *(_DWORD *)(a2 + 12);
          v324 = *(_DWORD *)(a2 + 16);
        }
        else
        {
          if (v321 == *(_DWORD *)(a2 + 8))
          {
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v321 + 1), (unint64_t)&v421);
            *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)result;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)a2 + v321) = a7;
          }
          v323 = *(_DWORD *)(a2 + 12) + 1;
          v324 = *(_DWORD *)(a2 + 16) + 1;
          *(_DWORD *)(a2 + 12) = v323;
          *(_DWORD *)(a2 + 16) = v324;
        }
        v325 = v12 + 16;
        if (v12 <= 0x3FFFFFFF)
          v325 = v12;
        LOBYTE(v421) = v325;
        if (v323 > v324)
        {
          *(_DWORD *)(a2 + 16) = v324 + 1;
          *(_BYTE *)(*(_QWORD *)a2 + v324) = v325;
        }
        else
        {
          v326 = v323;
          if (v323 == *(_DWORD *)(a2 + 8))
          {
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v323 + 1), (unint64_t)&v421);
            v326 = *(unsigned int *)(a2 + 12);
            v327 = *(_QWORD *)a2;
            v325 = *(_BYTE *)result;
          }
          else
          {
            v327 = *(_QWORD *)a2;
          }
          *(_BYTE *)(v327 + v326) = v325;
          *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
        }
      }
      else
      {
LABEL_355:
        if (v8 >= -1073741824)
          v208 = (v8 + 64) >> 6 < 0x201;
        else
          v208 = (v8 + 1073774528) < 0x8000;
        if (!v208)
          goto LABEL_426;
        v209 = (a4 - 1073741760) < 0x8000;
        if ((int)a4 <= 0x3FFFFFFF)
          v209 = (a4 + 0x8000) >> 6 < 0x201;
        if (WORD1(a7) || !v209)
          goto LABEL_426;
        v210 = (a5 - 1073741760) < 0x8000;
        if ((int)a5 <= 0x3FFFFFFF)
          v210 = (a5 + 0x8000) >> 6 < 0x201;
        if (v210)
        {
          v211 = *(_DWORD *)(a2 + 16);
          v421 = a2;
          v422 = v211;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
          *(_DWORD *)(a2 + 36) = 208;
          LOBYTE(v421) = -115;
          v212 = *(unsigned int *)(a2 + 12);
          v213 = *(unsigned int *)(a2 + 16);
          if (v212 > v213)
          {
            *(_DWORD *)(a2 + 16) = v213 + 1;
            *(_BYTE *)(*(_QWORD *)a2 + v213) = -115;
            v125 = *(_DWORD *)(a2 + 12);
            v126 = *(_DWORD *)(a2 + 16);
          }
          else
          {
            if ((_DWORD)v212 == *(_DWORD *)(a2 + 8))
            {
              v416 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v212 + 1), (unint64_t)&v421);
              v212 = *(unsigned int *)(a2 + 12);
              v214 = *(_QWORD *)a2;
              v215 = *v416;
            }
            else
            {
              v214 = *(_QWORD *)a2;
              v215 = -115;
            }
            *(_BYTE *)(v214 + v212) = v215;
            v125 = *(_DWORD *)(a2 + 12) + 1;
            v126 = *(_DWORD *)(a2 + 16) + 1;
            *(_DWORD *)(a2 + 12) = v125;
            *(_DWORD *)(a2 + 16) = v126;
          }
          v127 = -48;
LABEL_577:
          LOBYTE(v421) = v127;
          if (v125 > v126)
          {
            *(_DWORD *)(a2 + 16) = v126 + 1;
            *(_BYTE *)(*(_QWORD *)a2 + v126) = v127;
          }
          else
          {
            v360 = v125;
            if (v125 == *(_DWORD *)(a2 + 8))
            {
              v388 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v125 + 1), (unint64_t)&v421);
              v360 = *(unsigned int *)(a2 + 12);
              v361 = *(_QWORD *)a2;
              v127 = *v388;
            }
            else
            {
              v361 = *(_QWORD *)a2;
            }
            *(_BYTE *)(v361 + v360) = v127;
            *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
          }
          v362 = 63 - v8;
          if (v8 >= -1073741824)
            v362 = ~(_WORD)v8;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v362);
          v363 = v13 + 64;
          if (v13 <= 0x3FFFFFFF)
            v363 = v13;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v363);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, (unsigned __int16)a7);
          v364 = v12 + 64;
          if (v12 <= 0x3FFFFFFF)
            v364 = v12;
          result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v364);
        }
        else
        {
LABEL_426:
          v274 = *(_DWORD *)(a2 + 16);
          v421 = a2;
          v422 = v274;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), &v421, a3, a4, a5, (uint64_t)a6, a7, a8);
          *(_DWORD *)(a2 + 36) = 208;
          LOBYTE(v421) = -114;
          v275 = *(unsigned int *)(a2 + 12);
          v276 = *(unsigned int *)(a2 + 16);
          if (v275 > v276)
          {
            *(_DWORD *)(a2 + 16) = v276 + 1;
            *(_BYTE *)(*(_QWORD *)a2 + v276) = -114;
            v221 = *(_DWORD *)(a2 + 12);
            v222 = *(_DWORD *)(a2 + 16);
          }
          else
          {
            if ((_DWORD)v275 == *(_DWORD *)(a2 + 8))
            {
              v400 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v275 + 1), (unint64_t)&v421);
              v275 = *(unsigned int *)(a2 + 12);
              v277 = *(_QWORD *)a2;
              v278 = *v400;
            }
            else
            {
              v277 = *(_QWORD *)a2;
              v278 = -114;
            }
            *(_BYTE *)(v277 + v275) = v278;
            v221 = *(_DWORD *)(a2 + 12) + 1;
            v222 = *(_DWORD *)(a2 + 16) + 1;
            *(_DWORD *)(a2 + 12) = v221;
            *(_DWORD *)(a2 + 16) = v222;
          }
          v223 = -48;
LABEL_608:
          LOBYTE(v421) = v223;
          if (v221 > v222)
          {
            *(_DWORD *)(a2 + 16) = v222 + 1;
            *(_BYTE *)(*(_QWORD *)a2 + v222) = v223;
          }
          else
          {
            v385 = v221;
            if (v221 == *(_DWORD *)(a2 + 8))
            {
              v387 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v221 + 1), (unint64_t)&v421);
              v385 = *(unsigned int *)(a2 + 12);
              v386 = *(_QWORD *)a2;
              v223 = *v387;
            }
            else
            {
              v386 = *(_QWORD *)a2;
            }
            *(_BYTE *)(v386 + v385) = v223;
            *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
          }
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a2, ~v8);
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a2, v13);
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a2, a7);
          result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a2, v12);
        }
      }
LABEL_613:
      *a1 = 0;
      a1[8] = 0;
      return result;
    case 65:
    case 71:
      v89 = a4;
      v90 = a5;
      result = JSC::WasmI64AtomicRmw32XchgU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, a4, a7, a5, (uint64_t)a6, a7, a8);
      if ((result & 1) == 0)
      {
        result = JSC::WasmI64AtomicRmw32XchgU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v89, a7, v90, v91, v92, v93);
        if ((result & 1) == 0)
          result = JSC::WasmI64AtomicRmw32XchgU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v89, a7, v90, v94, v95, v96);
      }
      goto LABEL_613;
    case 66:
      v279 = a4;
      v280 = a5;
      result = JSC::WasmI64AtomicRmwXchg::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, a4, a7, a5, (uint64_t)a6, a7, a8);
      if ((result & 1) == 0)
      {
        result = JSC::WasmI64AtomicRmwXchg::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v279, a7, v280, v281, v282, v283);
        if ((result & 1) == 0)
          result = JSC::WasmI64AtomicRmwXchg::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v279, a7, v280, v284, v285, v286);
      }
      goto LABEL_613;
    case 67:
    case 69:
      v109 = a4;
      v110 = a5;
      result = JSC::WasmI64AtomicRmw8XchgU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, a4, a7, a5, (uint64_t)a6, a7, a8);
      if ((result & 1) == 0)
      {
        result = JSC::WasmI64AtomicRmw8XchgU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v109, a7, v110, v111, v112, v113);
        if ((result & 1) == 0)
          result = JSC::WasmI64AtomicRmw8XchgU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v109, a7, v110, v114, v115, v116);
      }
      goto LABEL_613;
    case 68:
    case 70:
      v97 = a4;
      v98 = a5;
      result = JSC::WasmI64AtomicRmw16XchgU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, a4, a7, a5, (uint64_t)a6, a7, a8);
      if ((result & 1) == 0)
      {
        result = JSC::WasmI64AtomicRmw16XchgU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v97, a7, v98, v99, v100, v101);
        if ((result & 1) == 0)
          result = JSC::WasmI64AtomicRmw16XchgU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, ~v8, v97, a7, v98, v102, v103, v104);
      }
      goto LABEL_613;
    default:
      __break(0xC471u);
      JUMPOUT(0x198D01DBCLL);
  }
}

void JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t i;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];
  __int128 v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  _BYTE v31[4];
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;

  if (*(_DWORD *)(a1 + 4) != -1)
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  *(_DWORD *)(a1 + 4) = a3;
  JSC::Wasm::LLIntGenerator::linkSwitchTargets(a2, (void *)a1, a3, a4, a5, a6, a7, a8);
  v15 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v15)
  {
    v16 = *(unsigned int **)(a1 + 16);
    for (i = 4 * v15; i; i -= 4)
    {
      v18 = *v16;
      v29 = a2;
      v30 = v18;
      v19 = *(_DWORD *)(a1 + 4) - v18;
      v28 = v19;
      v20 = (unsigned __int8 *)(*(_QWORD *)a2 + v18);
      v21 = *v20;
      v22 = v21;
      if ((v21 + 115) <= 1u)
        v22 = v20[1];
      switch(v22)
      {
        case 149:
          if (v21 == 141)
          {
            if (v19 != (__int16)v19)
            {
              v23 = *(_QWORD *)(a2 + 24);
              v35 = v19;
              v36 = v18;
              WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v23 + 104), &v36, &v35, v10, v11, v12, v13, v14, (uint64_t)v31);
              LOWORD(v19) = 0;
            }
            *((_WORD *)v20 + 1) = v19;
          }
          else if (v21 == 142)
          {
            *(_DWORD *)(v20 + 2) = v19;
          }
          else
          {
            if (v19 != (char)v19)
            {
              v24 = *(_QWORD *)(a2 + 24);
              v35 = v19;
              v36 = v18;
              WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v24 + 104), &v36, &v35, v10, v11, v12, v13, v14, (uint64_t)v31);
              LOBYTE(v19) = 0;
            }
            v20[1] = v19;
          }
          break;
        case 148:
          if (v21 == 141)
          {
            if (v19 != (__int16)v19)
            {
              JSC::Wasm::FunctionCodeBlockGenerator::addOutOfLineJumpTarget(*(JSC::Wasm::FunctionCodeBlockGenerator **)(a2 + 24), v18, v19, v10, v11, v12, v13, v14);
              LOWORD(v19) = 0;
            }
            *((_WORD *)v20 + 2) = v19;
          }
          else if (v21 == 142)
          {
            v31[0] = 0;
            v32 = 0;
            v33 = 0;
            v34 = v19;
            JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::saveTarget((uint64_t)v31);
            *(_DWORD *)(v20 + 6) = JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::commitTarget((uint64_t)v31);
          }
          else
          {
            if (v19 != (char)v19)
            {
              JSC::Wasm::FunctionCodeBlockGenerator::addOutOfLineJumpTarget(*(JSC::Wasm::FunctionCodeBlockGenerator **)(a2 + 24), v18, v19, v10, v11, v12, v13, v14);
              LOBYTE(v19) = 0;
            }
            v20[2] = v19;
          }
          break;
        case 147:
          LOBYTE(v26) = 0;
          DWORD1(v26) = 0;
          *((_QWORD *)&v26 + 1) = 0;
          v27 = v19;
          v25[0] = a2;
          v25[1] = (uint64_t)&v29;
          v25[2] = (uint64_t)&v28;
          JSC::WasmJtrue::setTargetLabel<JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits> &,unsigned int)::$_1>(v20, &v26, v25, v10, v11, v12, v13, v14);
          break;
        default:
          __break(0xC471u);
LABEL_33:
          JUMPOUT(0x198D021BCLL);
      }
      ++v16;
    }
  }
}

_DWORD *JSC::WasmJtrue::setTargetLabel<JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits> &,unsigned int)::$_1>(_DWORD *result, __int128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE v29[24];
  __int128 v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34[6];
  uint64_t v35;

  v8 = result;
  v35 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int8 *)result;
  if (v9 == 141)
  {
    *(_OWORD *)v29 = *a2;
    *(_QWORD *)&v29[16] = *((_QWORD *)a2 + 2);
    if (v29[0] == 1)
    {
      v10 = *(_DWORD *)(*(_QWORD *)&v29[8] + 16);
      *(_DWORD *)&v29[4] = v10;
      v11 = *(_QWORD *)&v29[16];
      v12 = *(unsigned int *)(*(_QWORD *)&v29[16] + 28);
      if ((_DWORD)v12 == *(_DWORD *)(*(_QWORD *)&v29[16] + 24))
      {
        v26 = *(_QWORD *)&v29[16];
        result = (_DWORD *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)&v29[16] + 16, v12 + 1, (unint64_t)&v29[4]);
        LOWORD(v10) = 0;
        *(_DWORD *)(*(_QWORD *)(v26 + 16) + 4 * (*(_DWORD *)(v26 + 28))++) = *result;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v29[16] + 16) + 4 * v12) = v10;
        LOWORD(v10) = 0;
        ++*(_DWORD *)(v11 + 28);
      }
    }
    else
    {
      v16 = *a3;
      v17 = a3[1];
      v18 = (int *)a3[2];
      if (v29[0])
      {
        if (v29[0] != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198D0254CLL);
        }
        v10 = *(_DWORD *)&v29[16] - *(_DWORD *)(*(_QWORD *)&v29[8] + 16);
      }
      else
      {
        v10 = *(_DWORD *)&v29[16];
      }
      *(_DWORD *)&v29[4] = v10;
      if (v10 != (__int16)v10)
      {
        v22 = *(_QWORD *)(v16 + 24);
        v23 = *(_DWORD *)(v17 + 8);
        v32 = *v18;
        v33 = v23;
        if (!v32)
        {
          __break(0xC471u);
          JUMPOUT(0x198D0250CLL);
        }
        result = WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v22 + 104), &v33, &v32, a4, a5, a6, a7, a8, (uint64_t)v34);
        *(_OWORD *)((char *)v34 + 3) = 0uLL;
        *(_OWORD *)&v29[1] = *(_OWORD *)v34;
        *(_DWORD *)&v29[16] = 0;
        LOWORD(v10) = *(_QWORD *)v34 >> 24;
      }
    }
    *((_WORD *)v8 + 2) = v10;
  }
  else if (v9 == 142)
  {
    v30 = *a2;
    v31 = *((_QWORD *)a2 + 2);
    JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::saveTarget((uint64_t)&v30);
    result = (_DWORD *)JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::commitTarget((uint64_t)&v30);
    *(_DWORD *)((char *)v8 + 6) = (_DWORD)result;
  }
  else
  {
    *(_OWORD *)v28 = *a2;
    *(_QWORD *)&v28[16] = *((_QWORD *)a2 + 2);
    if (v28[0] == 1)
    {
      v13 = *(_DWORD *)(*(_QWORD *)&v28[8] + 16);
      *(_DWORD *)&v28[4] = v13;
      v14 = *(_QWORD *)&v28[16];
      v15 = *(unsigned int *)(*(_QWORD *)&v28[16] + 28);
      if ((_DWORD)v15 == *(_DWORD *)(*(_QWORD *)&v28[16] + 24))
      {
        v27 = *(_QWORD *)&v28[16];
        result = (_DWORD *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)&v28[16] + 16, v15 + 1, (unint64_t)&v28[4]);
        LOBYTE(v13) = 0;
        *(_DWORD *)(*(_QWORD *)(v27 + 16) + 4 * (*(_DWORD *)(v27 + 28))++) = *result;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v28[16] + 16) + 4 * v15) = v13;
        LOBYTE(v13) = 0;
        ++*(_DWORD *)(v14 + 28);
      }
    }
    else
    {
      v19 = *a3;
      v20 = a3[1];
      v21 = (int *)a3[2];
      if (v28[0])
      {
        if (v28[0] != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198D0256CLL);
        }
        v13 = *(_DWORD *)&v28[16] - *(_DWORD *)(*(_QWORD *)&v28[8] + 16);
      }
      else
      {
        v13 = *(_DWORD *)&v28[16];
      }
      *(_DWORD *)&v28[4] = v13;
      if (v13 != (char)v13)
      {
        v24 = *(_QWORD *)(v19 + 24);
        v25 = *(_DWORD *)(v20 + 8);
        v32 = *v21;
        v33 = v25;
        if (!v32)
        {
          __break(0xC471u);
          JUMPOUT(0x198D0252CLL);
        }
        result = WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v24 + 104), &v33, &v32, a4, a5, a6, a7, a8, (uint64_t)v34);
        *(_QWORD *)((char *)&v34[2] + 3) = 0;
        *(_QWORD *)((char *)v34 + 3) = 0;
        *(_OWORD *)&v28[1] = v34[0];
        *(_DWORD *)&v28[16] = 0;
        LOBYTE(v13) = 0;
      }
    }
    *((_BYTE *)v8 + 2) = v13;
  }
  return result;
}

void JSC::Wasm::IPIntPlan::~IPIntPlan(JSC::Wasm::IPIntPlan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::Wasm::IPIntPlan::~IPIntPlan(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  JSC::Wasm::FunctionIPIntMetadataGenerator **v21;
  uint64_t v22;
  JSC::Wasm::FunctionIPIntMetadataGenerator *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v9 = *((_QWORD *)this + 54);
  if (v9)
  {
    v33 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v33)
    {
      v34 = (_QWORD *)(v9 + 8);
      do
      {
        if (*((_DWORD *)v34 - 2) != -2 && *v34)
          WTF::fastFree(*v34 - 16, a2, a3, a4, a5, a6, a7, a8);
        v34 += 2;
        --v33;
      }
      while (v33);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 53);
  if (v10)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v10, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 408, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((unsigned int *)this + 101);
  if ((_DWORD)v18)
    WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>>::destruct(*((unsigned int ***)this + 49), *((_QWORD *)this + 49) + 8 * v18, v12, v13, v14, v15, v16, v17);
  v19 = *((_QWORD *)this + 49);
  if (v19)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v19, v11, v12, v13, v14, v15, v16, v17);
  }
  v20 = *((unsigned int *)this + 95);
  if ((_DWORD)v20)
  {
    v21 = (JSC::Wasm::FunctionIPIntMetadataGenerator **)*((_QWORD *)this + 46);
    v22 = 8 * v20;
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        JSC::Wasm::FunctionIPIntMetadataGenerator::~FunctionIPIntMetadataGenerator(v23, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  v32 = *((_QWORD *)this + 46);
  if (v32)
  {
    *((_QWORD *)this + 46) = 0;
    *((_DWORD *)this + 94) = 0;
    WTF::fastFree(v32, v11, v12, v13, v14, v15, v16, v17);
  }
  JSC::Wasm::EntryPlan::~EntryPlan(this, (WTF::AtomStringImpl *)v11, v12, v13, v14, v15, v16, v17);
}

BOOL JSC::Wasm::IPIntPlan::hasWork(JSC::Wasm::IPIntPlan *this)
{
  return *((unsigned __int8 *)this + 352) < 3u;
}

void `non-virtual thunk to'JSC::Wasm::IPIntPlan::~IPIntPlan(JSC::Wasm::IPIntPlan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::IPIntPlan::~IPIntPlan((JSC::Wasm::IPIntPlan *)((char *)this - 72), a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::Wasm::IPIntPlan::~IPIntPlan((JSC::Wasm::IPIntPlan *)((char *)this - 72), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::Wasm::FunctionIPIntMetadataGenerator::~FunctionIPIntMetadataGenerator(JSC::Wasm::FunctionIPIntMetadataGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  JSC::Wasm::FunctionIPIntMetadataGenerator *v13;
  unint64_t v14;
  uint64_t v15;

  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 17);
  if (v10)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 16);
  if (v11)
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 14);
  if (v12)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (JSC::Wasm::FunctionIPIntMetadataGenerator *)*((_QWORD *)this + 10);
  if ((JSC::Wasm::FunctionIPIntMetadataGenerator *)((char *)this + 96) != v13 && v13)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 4);
  if (v14)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v15, a2, a3, a4, a5, a6, a7, a8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm30FunctionIPIntMetadataGeneratorENS_14default_deleteISB_EEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, JSC::Wasm::FunctionIPIntMetadataGenerator **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::FunctionIPIntMetadataGenerator *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *a2;
  *a2 = 0;
  if (v8)
  {
    JSC::Wasm::FunctionIPIntMetadataGenerator::~FunctionIPIntMetadataGenerator(v8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm30FunctionIPIntMetadataGeneratorENS_14default_deleteISB_EEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJyN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJyS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void JSC::Wasm::FunctionCodeBlockGenerator::~FunctionCodeBlockGenerator(JSC::Wasm::FunctionCodeBlockGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;

  v9 = *((_QWORD *)this + 19);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 17);
  if (v10)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((unsigned int *)this + 33);
  if ((_DWORD)v11)
  {
    v24 = (unint64_t *)*((_QWORD *)this + 15);
    v25 = 8 * v11;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
        WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  v12 = *((_QWORD *)this + 15);
  if (v12)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *((_QWORD *)this + 14);
  if (v13)
  {
    v21 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v21)
    {
      v22 = v13 + 16;
      do
      {
        if (*(_DWORD *)(v22 - 16) != -1)
        {
          v23 = *(_QWORD *)v22;
          if (*(_QWORD *)v22)
          {
            *(_QWORD *)v22 = 0;
            *(_DWORD *)(v22 + 8) = 0;
            WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v22 += 32;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 13);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  v15 = *((_QWORD *)this + 11);
  if (v15)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *((_QWORD *)this + 9);
  if (v16)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v17)
  {
    v18 = *(_QWORD *)v17;
    if (*(_QWORD *)v17)
    {
      *(_QWORD *)v17 = 0;
      *(_DWORD *)(v17 + 8) = 0;
      WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *((_QWORD *)this + 5);
  if (v19)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = *((_QWORD *)this + 3);
  if (v20)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::VectorTypeOperations<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v19 = v8;
    v20 = v9;
    v11 = a1;
    do
    {
      v12 = (_DWORD *)v11[108];
      v11[108] = 0;
      if (v12)
        --*v12;
      v13 = *((unsigned int *)v11 + 210);
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, _QWORD *))off_1E35B5A60[v13])(&v18, v11 + 101);
      *((_DWORD *)v11 + 210) = -1;
      v14 = v11[50];
      if (v11 + 52 != (_QWORD *)v14 && v14 != 0)
      {
        v11[50] = 0;
        *((_DWORD *)v11 + 102) = 0;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      v16 = *v11;
      if (v11 + 2 != (_QWORD *)*v11 && v16 != 0)
      {
        *v11 = 0;
        *((_DWORD *)v11 + 2) = 0;
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      v11 += 109;
    }
    while (v11 != a2);
  }
}

uint64_t JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  char v16;

  v9 = *(_DWORD **)(a1 + 864);
  *(_QWORD *)(a1 + 864) = 0;
  if (v9)
    --*v9;
  v10 = *(unsigned int *)(a1 + 840);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E35B5A60[v10])(&v16, a1 + 808);
  *(_DWORD *)(a1 + 840) = -1;
  v11 = *(_QWORD *)(a1 + 400);
  if (a1 + 416 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 400) = 0;
    *(_DWORD *)(a1 + 408) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v13 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::threadSpecificBuffer(void)::$_0 &&>>()
{
  pthread_key_t *v0;
  uint64_t result;

  v0 = (pthread_key_t *)WTF::fastMalloc((WTF *)8);
  *v0 = 0;
  result = pthread_key_create(v0, (void (__cdecl *)(void *))WTF::ThreadSpecific<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,(WTF::CanBeGCThread)0>::destroy);
  if ((_DWORD)result)
    __break(0xC471u);
  else
    qword_1ECF59030 = (uint64_t)v0;
  return result;
}

void WTF::ThreadSpecific<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,(WTF::CanBeGCThread)0>::destroy(_QWORD **a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  pthread_setspecific(*a1[2], a1);
  v9 = WTF::ThreadSpecific<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,(WTF::CanBeGCThread)0>::Data::~Data((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
  WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t WTF::ThreadSpecific<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,(WTF::CanBeGCThread)0>::Data::~Data(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *(_QWORD *)a1;
  if (v9)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  pthread_setspecific(**(_QWORD **)(a1 + 16), 0);
  return a1;
}

void WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,long long>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *a2;
  *(_DWORD *)(a1 + 12) = v4 + 1;
}

__n128 WTF::Vector<JSC::Wasm::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type const&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unint64_t *WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t *result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _DWORD *v17;
  unint64_t *v18;

  v9 = result + 2;
  v8 = *result;
  if ((unint64_t *)*result != result + 2)
  {
    v16 = result + 2;
    v17 = a2;
    v18 = result;
    if (v8)
    {
      *result = 0;
      *((_DWORD *)result + 2) = 0;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
    result = v18;
    v9 = v16;
    a2 = v17;
    *v18 = (unint64_t)v16;
  }
  v10 = *(__int128 **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v11 = a2[3];
    if ((_DWORD)v11)
    {
      v14 = 24 * v11;
      do
      {
        v15 = *v10;
        v9[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v15;
        v9 += 3;
        v10 = (__int128 *)((char *)v10 + 24);
        v14 -= 24;
      }
      while (v14);
    }
    v12 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *result = (unint64_t)v10;
    v12 = a2[2];
    a2[2] = 16;
  }
  *((_DWORD *)result + 2) = v12;
  v13 = a2[3];
  a2[3] = 0;
  *((_DWORD *)result + 3) = v13;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC4Wasm14LLIntGenerator11ControlLoopENSA_15ControlTopLevelENSA_12ControlBlockENSA_9ControlIfENSA_10ControlTryENSA_12ControlCatchEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    --*v2;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC4Wasm14LLIntGenerator11ControlLoopENSA_15ControlTopLevelENSA_12ControlBlockENSA_9ControlIfENSA_10ControlTryENSA_12ControlCatchEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    --*v2;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC4Wasm14LLIntGenerator11ControlLoopENSA_15ControlTopLevelENSA_12ControlBlockENSA_9ControlIfENSA_10ControlTryENSA_12ControlCatchEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    --*v2;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC4Wasm14LLIntGenerator11ControlLoopENSA_15ControlTopLevelENSA_12ControlBlockENSA_9ControlIfENSA_10ControlTryENSA_12ControlCatchEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v2)
    --*v2;
  v3 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
    --*v3;
}

unint64_t WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _OWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 28 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v22 = *(_QWORD *)a1;
        return v22 + 4 * ((uint64_t)(v3 - v5) >> 2);
      }
      if (v9 < 0x924924A)
      {
        v10 = 28 * v9;
        v11 = WTF::fastMalloc((WTF *)(28 * v9));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10 / 0x1C;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = (_OWORD *)(v11 + v19);
          v21 = *(_OWORD *)(v5 + v19);
          *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)(v5 + v19 + 12);
          *v20 = v21;
          v19 += 28;
        }
        while (28 * v6 != v19);
        v22 = *(_QWORD *)a1;
        if (v5)
        {
          if (v22 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v22 = *(_QWORD *)a1;
        }
        return v22 + 4 * ((uint64_t)(v3 - v5) >> 2);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x198D02EBCLL);
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= a2)
    v25 = a2;
  if (v25 > v23)
  {
    if (v25 >= 0x924924A)
      goto LABEL_33;
    v26 = *(unsigned int *)(a1 + 12);
    v27 = 28 * v25;
    v28 = (_OWORD *)WTF::fastMalloc((WTF *)(28 * v25));
    *(_DWORD *)(a1 + 8) = v27 / 0x1C;
    *(_QWORD *)a1 = v28;
    if ((_DWORD)v26)
    {
      v36 = 28 * v26;
      v37 = (__int128 *)v5;
      do
      {
        v38 = *v37;
        *(_OWORD *)((char *)v28 + 12) = *(__int128 *)((char *)v37 + 12);
        *v28 = v38;
        v28 = (_OWORD *)((char *)v28 + 28);
        v37 = (__int128 *)((char *)v37 + 28);
        v36 -= 28;
      }
      while (v36);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return v3;
}

_BYTE *JSC::WasmDropKeep::emit<JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v12;
  int v13;
  _BYTE *result;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;

  v8 = a4;
  v9 = a3;
  v12 = a3 | a2 | a4;
  if (v12 > 0xFF)
  {
    v23 = (_DWORD *)(a1 + 40);
    if (HIWORD(v12))
    {
      v34 = *(_DWORD *)(a1 + 16);
      v48 = a1;
      v49 = v34;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v23, &v48, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 154;
      LOBYTE(v48) = -114;
      v35 = *(unsigned int *)(a1 + 12);
      v36 = *(unsigned int *)(a1 + 16);
      if (v35 > v36)
      {
        *(_DWORD *)(a1 + 16) = v36 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v36) = -114;
        v39 = *(_DWORD *)(a1 + 12);
        v40 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v35 == *(_DWORD *)(a1 + 8))
        {
          v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v48);
          v35 = *(unsigned int *)(a1 + 12);
          v37 = *(_QWORD *)a1;
          v38 = *v46;
        }
        else
        {
          v37 = *(_QWORD *)a1;
          v38 = -114;
        }
        *(_BYTE *)(v37 + v35) = v38;
        v39 = *(_DWORD *)(a1 + 12) + 1;
        v40 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v39;
        *(_DWORD *)(a1 + 16) = v40;
      }
      v41 = -102;
      LOBYTE(v48) = -102;
      if (v39 > v40)
      {
        *(_DWORD *)(a1 + 16) = v40 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v40) = -102;
      }
      else
      {
        v42 = v39;
        if (v39 == *(_DWORD *)(a1 + 8))
        {
          v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v48);
          v42 = *(unsigned int *)(a1 + 12);
          v43 = *(_QWORD *)a1;
          v41 = *v47;
        }
        else
        {
          v43 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v43 + v42) = v41;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
      return (_BYTE *)JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
    }
    else
    {
      v24 = *(_DWORD *)(a1 + 16);
      v48 = a1;
      v49 = v24;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v23, &v48, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 154;
      LOBYTE(v48) = -115;
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(unsigned int *)(a1 + 16);
      if (v25 > v26)
      {
        *(_DWORD *)(a1 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v26) = -115;
        v29 = *(_DWORD *)(a1 + 12);
        v30 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v25 == *(_DWORD *)(a1 + 8))
        {
          v44 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v48);
          v25 = *(unsigned int *)(a1 + 12);
          v27 = *(_QWORD *)a1;
          v28 = *v44;
        }
        else
        {
          v27 = *(_QWORD *)a1;
          v28 = -115;
        }
        *(_BYTE *)(v27 + v25) = v28;
        v29 = *(_DWORD *)(a1 + 12) + 1;
        v30 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v29;
        *(_DWORD *)(a1 + 16) = v30;
      }
      v31 = -102;
      LOBYTE(v48) = -102;
      if (v29 > v30)
      {
        *(_DWORD *)(a1 + 16) = v30 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v30) = -102;
      }
      else
      {
        v32 = v29;
        if (v29 == *(_DWORD *)(a1 + 8))
        {
          v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v48);
          v32 = *(unsigned int *)(a1 + 12);
          v33 = *(_QWORD *)a1;
          v31 = *v45;
        }
        else
        {
          v33 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v33 + v32) = v31;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)a2);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v9);
      return (_BYTE *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v8);
    }
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 16);
    v48 = a1;
    v49 = v13;
    result = JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v48, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 36) = 154;
    LOBYTE(v48) = -102;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = -102;
      v17 = *(_DWORD *)(a1 + 12);
      v18 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v48);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v15) = -102;
      }
      v17 = *(_DWORD *)(a1 + 12) + 1;
      v18 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v17;
      *(_DWORD *)(a1 + 16) = v18;
    }
    LOBYTE(v48) = a2;
    if (v17 > v18)
    {
      *(_DWORD *)(a1 + 16) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v18) = a2;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v17 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v48);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v17) = a2;
      }
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    LOBYTE(v48) = v9;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = v9;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v48);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v19) = v9;
      }
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    LOBYTE(v48) = v8;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    }
    else
    {
      if (v21 == *(_DWORD *)(a1 + 8))
      {
        result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v48);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v21) = v8;
      }
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return result;
}

_DWORD *JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(_DWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  _DWORD *v9;
  char **v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  char *v19;
  size_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(_QWORD *)a2 != *(_QWORD *)result)
  {
    v8 = a2;
    v9 = result;
    v10 = *(char ***)result;
    v11 = *(_DWORD *)(*(_QWORD *)result + 12);
    v12 = *(_QWORD *)a2;
    v13 = *(_DWORD *)(*(_QWORD *)a2 + 12);
    if (v11 > v13)
    {
      *((_DWORD *)v10 + 3) = v13;
      v11 = v13;
    }
    else
    {
      v14 = *((_DWORD *)v10 + 2);
      if (v13 > v14)
      {
        if (v14)
        {
          if (v11)
            *((_DWORD *)v10 + 3) = 0;
          v17 = (unint64_t)*v10;
          if (*v10)
          {
            *v10 = 0;
            *((_DWORD *)v10 + 2) = 0;
            WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
            v14 = *((_DWORD *)v10 + 2);
          }
        }
        v18 = *(_DWORD *)(v12 + 12);
        if (v14 < v18)
        {
          v19 = *v10;
          v20 = *((unsigned int *)v10 + 3);
          v21 = (char *)WTF::fastMalloc((WTF *)*(unsigned int *)(v12 + 12));
          *((_DWORD *)v10 + 2) = v18;
          *v10 = v21;
          memcpy(v21, v19, v20);
          if (v19)
          {
            if (*v10 == v19)
            {
              *v10 = 0;
              *((_DWORD *)v10 + 2) = 0;
            }
            WTF::fastFree((unint64_t)v19, v22, v23, v24, v25, v26, v27, v28);
          }
        }
        v11 = *((_DWORD *)v10 + 3);
      }
    }
    v15 = *v10;
    if (v11)
    {
      memmove(v15, *(const void **)v12, v11);
      v16 = *((unsigned int *)v10 + 3);
      v15 = *v10;
    }
    else
    {
      v16 = 0;
    }
    memcpy(&v15[v16], (const void *)(*(_QWORD *)v12 + v16), *(_QWORD *)v12 + *(unsigned int *)(v12 + 12) - (*(_QWORD *)v12 + v16));
    *((_DWORD *)v10 + 3) = *(_DWORD *)(v12 + 12);
    result = v9;
    a2 = v8;
  }
  result[2] = a2[2];
  return result;
}

uint64_t JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(uint64_t a1, unsigned int a2)
{
  unsigned int v4;

  v4 = HIBYTE(a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, SBYTE1(a2));
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, SBYTE2(a2));
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v4);
}

_QWORD *WTF::HashTable<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::KeyValuePair<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashMap<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *,WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashTraits<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>,WTF::HashTraits<WTF::Vector<JSC::Wasm::LLIntGenerator::SwitchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::GenericLabel<JSC::Wasm::GeneratorTraits> *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *result;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  v20 = a1;
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v21 = 0;
    v22 = 0;
    v23 = v10;
    v24 = (uint64_t *)a3;
    do
    {
      v25 = (uint64_t *)(v9 + 24 * v21);
      v26 = *v25;
      if (*v25)
      {
        if (v26 != -1)
        {
          v27 = *v20;
          if (*v20)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
          v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
          v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
          v32 = v28 & ((v31 >> 31) ^ v31);
          v33 = 1;
          do
          {
            v34 = v32;
            v35 = (_QWORD *)(v27 + 24 * v32);
            v32 = (v32 + v33++) & v28;
          }
          while (*v35);
          v36 = v34;
          v37 = v27 + 24 * v34;
          v40 = *(_QWORD *)(v37 + 8);
          v39 = (_QWORD *)(v37 + 8);
          v38 = v40;
          if (v40)
          {
            *v39 = 0;
            *(_DWORD *)(v27 + 24 * v34 + 16) = 0;
            WTF::fastFree(v38, v13, v14, v15, v16, v17, v18, v19);
            v24 = (uint64_t *)a3;
            v20 = a1;
            v26 = *v25;
          }
          *v35 = v26;
          v41 = v9 + 24 * v21;
          *v39 = 0;
          v39[1] = 0;
          v43 = *(_QWORD *)(v41 + 8);
          v42 = v41 + 8;
          *(_QWORD *)v42 = 0;
          *v39 = v43;
          v44 = *(_DWORD *)(v42 + 8);
          *(_DWORD *)(v42 + 8) = 0;
          v45 = v27 + 24 * v36;
          *(_DWORD *)(v45 + 16) = v44;
          v46 = *(_DWORD *)(v42 + 12);
          *(_DWORD *)(v42 + 12) = 0;
          *(_DWORD *)(v45 + 20) = v46;
          v47 = *(_QWORD *)v42;
          if (*(_QWORD *)v42)
          {
            *(_QWORD *)v42 = 0;
            *(_DWORD *)(v42 + 8) = 0;
            WTF::fastFree(v47, v13, v14, v15, v16, v17, v18, v19);
            v24 = (uint64_t *)a3;
            v20 = a1;
          }
          if (v25 == v24)
            v22 = v35;
        }
      }
      else
      {
        v48 = v9 + 24 * v21;
        v51 = *(_QWORD *)(v48 + 8);
        v50 = (_QWORD *)(v48 + 8);
        v49 = v51;
        if (v51)
        {
          *v50 = 0;
          *(_DWORD *)(v9 + 24 * v21 + 16) = 0;
          WTF::fastFree(v49, v13, v14, v15, v16, v17, v18, v19);
          v24 = (uint64_t *)a3;
          v20 = a1;
        }
      }
      ++v21;
    }
    while (v21 != v23);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v22;
}

uint64_t WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v10;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
    WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct(*(unsigned int ***)a1, *(_QWORD *)a1 + 8 * v9, a3, a4, a5, a6, a7, a8);
  v10 = *(unsigned int ***)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(JSC::Wasm::Module **a1)
{
  JSC::Wasm::Module *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *a1;
  if (v1)
  {
    JSC::Wasm::Module::~Module(v1);
    WTF::fastFree(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Wasm::IPIntTierUpCounter::OSREntryData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Wasm::IPIntTierUpCounter::OSREntryData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Wasm::IPIntTierUpCounter::OSREntryData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::IPIntTierUpCounter::OSREntryData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (_DWORD *)(v4 + 16 * i);
      if ((*v18 + 1) >= 2)
      {
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 8);
        else
          v20 = 0;
        v21 = 0;
        v22 = 9 * ((*v18 + ~(*v18 << 15)) ^ ((*v18 + ~(*v18 << 15)) >> 10));
        v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
        do
        {
          v24 = v23 & v20;
          v23 = ++v21 + v24;
        }
        while (*(_DWORD *)(v19 + 16 * v24));
        *(_OWORD *)(v19 + 16 * v24) = *(_OWORD *)v18;
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 12);
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  v15 = *(_QWORD *)a1;
  if (v14 <= v10)
  {
LABEL_22:
    *(_OWORD *)(v15 + 24 * (*(_DWORD *)(a1 + 12))++) = *a2;
    return;
  }
  if (v14 < 0x11)
  {
    v17 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 16;
    if (!(_DWORD)v11)
      goto LABEL_16;
    goto LABEL_13;
  }
  if (v14 < 0xAAAAAAB)
  {
    v16 = 24 * v14;
    v17 = WTF::fastMalloc((WTF *)(24 * v14));
    *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v17;
    if (!(_DWORD)v11)
      goto LABEL_16;
LABEL_13:
    v18 = 24 * v11;
    v19 = v15;
    do
    {
      v20 = *(_OWORD *)v19;
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v19 + 16);
      *(_OWORD *)v17 = v20;
      v17 += 24;
      v19 += 24;
      v18 -= 24;
    }
    while (v18);
    v17 = *(_QWORD *)a1;
LABEL_16:
    if (a1 + 16 == v15 || !v15)
    {
      v15 = v17;
    }
    else
    {
      if (v17 == v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_QWORD *)a1;
    }
    goto LABEL_22;
  }
  __break(0xC471u);
}

void WTF::Vector<JSC::Wasm::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  const void *v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(const void **)a1;
  if (*(_QWORD *)a1 > a3 || (v5 = *(unsigned int *)(a1 + 12), (unint64_t)v4 + v5 <= a3))
  {
    v10 = *(unsigned int *)(a1 + 8);
    v11 = v10 + (v10 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= (unint64_t)a2)
      v9 = (unint64_t)a2;
    else
      v9 = v12;
    if (v9 <= v10)
      return;
    v5 = *(unsigned int *)(a1 + 12);
    if (v9 >= 9)
    {
      if (HIDWORD(v9))
      {
LABEL_30:
        __break(0xC471u);
        JUMPOUT(0x198D03B84);
      }
      goto LABEL_22;
    }
LABEL_23:
    v13 = (void *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 8;
    goto LABEL_24;
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return;
  if (v9 < 9)
    goto LABEL_23;
  if (HIDWORD(v9))
    goto LABEL_30;
LABEL_22:
  v13 = (void *)WTF::fastMalloc((WTF *)v9);
  *(_DWORD *)(a1 + 8) = v9;
  *(_QWORD *)a1 = v13;
LABEL_24:
  memcpy(v13, v4, v5);
  if ((const void *)(a1 + 16) != v4 && v4)
  {
    if (*(const void **)a1 == v4)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v4, v14, v15, v16, v17, v18, v19, v20);
  }
}

char *WTF::Vector<unsigned char,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[v3 - (_QWORD)v5];
      }
      if (v10 < 0x11)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 16;
        goto LABEL_31;
      }
      if (!HIDWORD(v10))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)v10);
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[v3 - (_QWORD)v5];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x198D03DD0);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x11)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 16;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)v15);
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, float a9@<S1>)
{
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  const char *v105;
  int v106;
  const char *v107;
  WTF *v108;
  __int128 v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v14 = *a2;
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (__src)
  {
    v15 = a3 - 1;
    if (!a3)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v15, (uint64_t)&v105, a9);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v105 = (const char *)v16;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v24 = v108;
  if (!v108)
  {
    v98 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v98);
  v24 = v108;
  if (v108 != (WTF *)v110)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%llu", a4);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v32 = v108;
  if (!v108)
  {
    v97 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v97);
  v32 = v108;
  if (v108 != (WTF *)v110)
LABEL_17:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (a5)
  {
    v34 = a6 - 1;
    if (!a6)
      v34 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v34, (uint64_t)&v105, v33);
  }
  else
  {
    v35 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v105 = (const char *)v35;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v43 = v108;
  if (!v108)
  {
    v96 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v96);
  v43 = v108;
  if (v108 != (WTF *)v110)
LABEL_29:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%lu", a7);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v51 = v108;
  if (!v108)
  {
    v95 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v95);
  v51 = v108;
  if (v108 != (WTF *)v110)
LABEL_34:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  v107 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v108) = 41;
  v104 = v14;
  v105 = ": ";
  v106 = 2;
  v102 = v97;
  v103 = v98;
  v100 = v95;
  v101 = v96;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v107, &v104, (uint64_t)&v105, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, &v99);
  if (v99)
  {
    *a8 = v99;
    v99 = 0;
    v59 = v95;
    v95 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
    v60 = v96;
    v96 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
    v61 = v97;
    v97 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
    }
    v62 = v98;
    v98 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S1>)
{
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  const char *v84;
  int v85;
  const char *v86;
  WTF *v87;
  __int128 v88;
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v86 = (const char *)off_1E3572250;
  v87 = (WTF *)v89;
  v88 = xmmword_199122F80;
  v89[0] = 0;
  if (__src)
  {
    v13 = a3 - 1;
    if (!a3)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v13, (uint64_t)&v84, a8);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v84 = (const char *)v14;
    v85 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v86, "StringView", &v84);
  if (v85 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v85])(&v83, &v84);
  (*((void (**)(const char **))v86 + 5))(&v86);
  (*((void (**)(const char **))v86 + 5))(&v86);
  v22 = v87;
  if (!v87)
  {
    v78 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v87, v88, (uint64_t *)&v78);
  v22 = v87;
  if (v87 != (WTF *)v89)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v86 = (const char *)off_1E3572250;
  v87 = (WTF *)v89;
  v88 = xmmword_199122F80;
  v89[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v86, "%llu", a4);
  (*((void (**)(const char **))v86 + 5))(&v86);
  v30 = v87;
  if (!v87)
  {
    v77 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v87, v88, (uint64_t *)&v77);
  v30 = v87;
  if (v87 != (WTF *)v89)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v86 = (const char *)off_1E3572250;
  v87 = (WTF *)v89;
  v88 = xmmword_199122F80;
  v89[0] = 0;
  if (a5)
  {
    v32 = a6 - 1;
    if (!a6)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v32, (uint64_t)&v84, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v84 = (const char *)v33;
    v85 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v86, "StringView", &v84);
  if (v85 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v85])(&v83, &v84);
  (*((void (**)(const char **))v86 + 5))(&v86);
  (*((void (**)(const char **))v86 + 5))(&v86);
  v41 = v87;
  if (!v87)
  {
    v76 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v87, v88, (uint64_t *)&v76);
  v41 = v87;
  if (v87 != (WTF *)v89)
LABEL_29:
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  v86 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v87) = 41;
  v83 = v12;
  v84 = ": ";
  v85 = 2;
  v81 = v77;
  v82 = v78;
  v80 = v76;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v86, &v83, (uint64_t)&v84, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, &v79);
  if (v79)
  {
    *a7 = v79;
    v79 = 0;
    v49 = v76;
    v76 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    v50 = v77;
    v77 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    v51 = v78;
    v78 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

BOOL WTF::LEBDecoder::decodeUInt32(uint64_t a1, unint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;

  v4 = *a3;
  v5 = a2 - *a3;
  if (a2 <= *a3)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  *a4 = 0;
  *a3 = v4 + 1;
  v9 = a1 + v4;
  v10 = v4 + 2;
  while (1)
  {
    v11 = *(char *)(v9 + v6);
    v8 |= (v11 & 0x7F) << v7;
    *a4 = v8;
    if ((v11 & 0x80000000) == 0)
      break;
    if (v5 >= 5)
      v13 = 5;
    else
      v13 = v5;
    if (v13 - 1 == v6)
      return 0;
    *a3 = v10 + v6;
    v7 += 7;
    if (v5 == ++v6)
    {
      __break(1u);
      return 0;
    }
  }
  return (_DWORD)v6 != 4 || v11 < 0x10u;
}

BOOL WTF::LEBDecoder::decodeInt32(uint64_t a1, unint64_t a2, uint64_t *a3, int *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  _BOOL8 result;

  v4 = *a3;
  v5 = a2 - *a3;
  if (a2 <= *a3)
    return 0;
  v6 = 0;
  v7 = 0;
  *a4 = 0;
  *a3 = v4 + 1;
  v8 = a1 + v4;
  v9 = v4 + 2;
  v10 = 7;
  while (1)
  {
    v11 = *(char *)(v8 + v6);
    v7 |= (v11 & 0x7F) << (v10 - 7);
    *a4 = v7;
    if ((v11 & 0x80000000) == 0)
      break;
    if (v5 >= 5)
      v12 = 5;
    else
      v12 = v5;
    if (v12 - 1 == v6)
      return 0;
    LOBYTE(v11) = v9 + v6;
    *a3 = v9 + v6;
    v10 += 7;
    if (v5 == ++v6)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v6 != 4)
    goto LABEL_11;
  if ((v11 & 0x40) == 0)
    return v11 < 8u;
  if ((v11 & 0xF8) != 0x78)
    return 0;
LABEL_11:
  result = 1;
  if (v10 <= 0x1F && (v11 & 0x40) != 0)
    *a4 = v7 | (-1 << v10);
  return result;
}

uint64_t WTF::VectorBufferBase<unsigned int,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v6;

  if (a2 >> 30)
    return 0;
  v2 = a2;
  WTF::tryFastMalloc((WTF *)(4 * a2), &v6);
  v4 = v6;
  if (!v6)
    return 0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)a1 = v4;
  return 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseUnreachableExpression(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, uint8x8_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t *v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  char v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  char *v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void (**v89)(WTF::StringPrintStream *__hidden);
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (**v134)(WTF::StringPrintStream *__hidden);
  void (***v135)(WTF::StringPrintStream *__hidden);
  uint64_t v136;
  uint64_t v137;
  void (**v138)(WTF::StringPrintStream *__hidden);
  _BYTE *v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v144;
  unint64_t v145;
  void (**v146)(WTF::StringPrintStream *__hidden);
  double v147;
  float v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  _BYTE *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  int v174;
  char v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  int v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  const JSC::Wasm::Type *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  __int128 *v262;
  int v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  int v282;
  unint64_t v283;
  int v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  unint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  BOOL v295;
  uint64_t v296;
  char v297;
  int v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  char *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unsigned int v323;
  int v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  JSC::Wasm::TypeDefinition *v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  unint64_t v341;
  void (***v342)(WTF::StringPrintStream *__hidden);
  uint64_t v343;
  void (**v344)(WTF::StringPrintStream *__hidden);
  int v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  _BYTE *v361;
  int v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  __int128 v366;
  int v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  _DWORD *v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  int v385;
  unint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  unsigned int v390;
  unint64_t *v391;
  char *v392;
  void (**v393)(WTF::StringPrintStream *__hidden);
  uint64_t v394;
  __int128 v395;
  void (**v396)(WTF::StringPrintStream *__hidden);
  void (***v397)(WTF::StringPrintStream *__hidden);
  uint64_t v398;
  uint64_t v399;
  void (**v400)(WTF::StringPrintStream *__hidden);
  _BYTE *v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  void (**v406)(WTF::StringPrintStream *__hidden);
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  __int128 v410;
  uint64_t v411;
  uint64_t v412;
  void (**v413)(WTF::StringPrintStream *__hidden);
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  char v417;
  uint64_t v418;
  void (**v419)(WTF::StringPrintStream *__hidden);
  uint64_t v420;
  void (**v421)(WTF::StringPrintStream *__hidden);
  __int128 *v422;
  __int128 v423;
  uint64_t v424;
  __int128 v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  char *v429;
  unint64_t *v430;
  uint64_t v431;
  double v432;
  float v433;
  char *v434;
  unint64_t *v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  char *v464;
  unint64_t *v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  char *v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  void (**v551)(WTF::StringPrintStream *__hidden);
  uint64_t v552;
  __int128 v553;
  uint64_t v554;
  char v555;
  uint64_t v556;
  void (**v557)(WTF::StringPrintStream *__hidden);
  uint64_t v558;
  void (**v559)(WTF::StringPrintStream *__hidden);
  __int128 *v560;
  __int128 v561;
  uint64_t v562;
  __int128 v563;
  char *v564;
  unint64_t *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  int v570;
  unsigned __int8 v571;
  int v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t *v575;
  unint64_t v576;
  char v577;
  float v578;
  unsigned int *v579;
  WTF *v580;
  unint64_t CachedUnrolling;
  const JSC::Wasm::TypeDefinition *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int v588;
  void (**v589)(WTF::StringPrintStream *__hidden);
  unsigned __int8 v590;
  __int128 v591;
  _BYTE v592[384];
  void (**v593)(WTF::StringPrintStream *__hidden);
  uint64_t v594;
  _BYTE v595[384];
  _BYTE *v596;
  int v597;
  unsigned int v598;
  _BYTE v599[392];
  JSC::Wasm::FunctionSignature *v600;
  int v601;
  unint64_t v602;
  int v603;
  unsigned int v604[21];

  v12 = *(unsigned __int8 *)(a2 + 14608);
  switch(*(_BYTE *)(a2 + 14608))
  {
    case 0:
    case 1:
    case 0xF:
    case 0x1A:
    case 0x1B:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xD0:
    case 0xD1:
    case 0xD3:
    case 0xD4:
      goto LABEL_2;
    case 2:
    case 3:
    case 4:
    case 6:
      ++*(_DWORD *)(a2 + 14624);
      *(_QWORD *)&v591 = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseBlockSignatureAndNotifySIMDUseIfNeeded((uint64_t)&v593, (unint64_t *)a2, (unsigned __int8 ***)&v591, a4, *(float *)&a5);
      if (!(_BYTE)v594)
        goto LABEL_2;
      if (v593)
      {
        if (*(_DWORD *)v593 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v593, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v351, v352, v353, v354, v355, v356, v357, v358);
        }
        else
        {
          *(_DWORD *)v593 -= 2;
        }
      }
      v30 = "can't get inline type for ";
      v31 = (unint64_t *)a2;
      v32 = 27;
      goto LABEL_29;
    case 5:
      if (*(_DWORD *)(a2 + 14624) >= 2u)
        goto LABEL_2;
      v249 = *(unsigned int *)(a2 + 468);
      if (!(_DWORD)v249)
      {
        __break(0xC471u);
        JUMPOUT(0x198D07544);
      }
      v250 = v249 - 1;
      v251 = *(_QWORD *)(a2 + 456);
      *(_DWORD *)(a2 + 14624) = 0;
      if (*(_DWORD *)(v251 + 864 * (v249 - 1) + 816))
      {
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [37]>(&v593);
        goto LABEL_30;
      }
      JSC::Wasm::IPIntGenerator::addElseToUnreachable(&v593, *(_QWORD **)(a2 + 48), v251 + 864 * v250 + 808, v12, a9, a10, a11, a12);
      if ((_BYTE)v594)
        goto LABEL_30;
      v259 = v251 + 864 * v250 + 400;
      v260 = *(_QWORD *)(a2 + 56);
      v261 = a2 + 72;
      if (v260 != a2 + 72)
      {
        if (v260)
        {
          *(_QWORD *)(a2 + 56) = 0;
          *(_DWORD *)(a2 + 64) = 0;
          WTF::fastFree(v260, v252, v253, v254, v255, v256, v257, v258);
        }
        *(_QWORD *)(a2 + 56) = v261;
      }
      v262 = *(__int128 **)v259;
      if (*(_QWORD *)v259 == v259 + 16)
      {
        v364 = *(unsigned int *)(v259 + 12);
        if ((_DWORD)v364)
        {
          v365 = 24 * v364;
          do
          {
            v366 = *v262;
            *(_QWORD *)(v261 + 16) = *((_QWORD *)v262 + 2);
            *(_OWORD *)v261 = v366;
            v261 += 24;
            v262 = (__int128 *)((char *)v262 + 24);
            v365 -= 24;
          }
          while (v365);
        }
        v263 = *(_DWORD *)(v259 + 8);
      }
      else
      {
        *(_QWORD *)v259 = v259 + 16;
        *(_QWORD *)(a2 + 56) = v262;
        v263 = *(_DWORD *)(v259 + 8);
        *(_DWORD *)(v259 + 8) = 16;
      }
      *(_DWORD *)(a2 + 64) = v263;
      v367 = *(_DWORD *)(v259 + 12);
      *(_DWORD *)(v259 + 12) = 0;
      *(_DWORD *)(a2 + 68) = v367;
      goto LABEL_2;
    case 7:
      LODWORD(v589) = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseExceptionIndex((uint64_t)&v593, (unint64_t *)a2, (unsigned int *)&v589, a4, *(float *)&a5);
      if ((_BYTE)v594)
        goto LABEL_30;
      v244 = *(_QWORD *)(a2 + 14576);
      v245 = v589;
      v246 = *(unsigned int *)(v244 + 68);
      if (v246 <= v589)
      {
        v248 = v589 - v246;
        if (v248 >= *(unsigned int *)(v244 + 84))
        {
          __break(0xC471u);
          JUMPOUT(0x198D0754CLL);
        }
        v247 = (_QWORD *)(v244 + 72);
      }
      else
      {
        v247 = (_QWORD *)(v244 + 56);
        v248 = v589;
      }
      v334 = *(_QWORD *)(*v247 + 8 * v248);
      v335 = (JSC::Wasm::TypeDefinition *)v334;
      if (*(_DWORD *)(v334 + 32) == 4)
      {
        v579 = *(unsigned int **)(v334 + 8);
        v580 = *(WTF **)v579;
        v335 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v579 + 8) + 8 * v579[2]);
        if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v335))
        {
          CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v334, (unint64_t)v237, v238, v239, (uint64_t)v240, v241, v242, v243);
          if ((_BYTE)v237)
          {
            v335 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
          }
          else
          {
            v335 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v335, v580, v238, v239, v240, v241, v242, v243);
            JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v334, v335, v582, v583, v584, v585, v586, v587);
          }
        }
      }
      if (*((_DWORD *)v335 + 8) == 5)
        v335 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v335 + 1);
      if (*(_DWORD *)(a2 + 14624) >= 2u)
        goto LABEL_2;
      v336 = *(_DWORD *)(a2 + 468);
      if (!v336)
      {
        __break(0xC471u);
        JUMPOUT(0x198D07554);
      }
      v337 = *(_QWORD *)(a2 + 456) + 864 * v336;
      v338 = v337 - 56;
      v339 = *(_DWORD *)(v337 - 48);
      if (v339 != 4 && (v339 != 5 || *(_DWORD *)(v338 + 12) != 0))
        goto LABEL_757;
      *(_DWORD *)(a2 + 14624) = 0;
      v593 = (void (**)(WTF::StringPrintStream *__hidden))v595;
      v594 = 16;
      v342 = (void (***)(WTF::StringPrintStream *__hidden))(a2 + 56);
      v341 = *(_QWORD *)(a2 + 56);
      v343 = a2 + 72;
      if (v341 == a2 + 72)
      {
        v345 = 0;
      }
      else if (v341)
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_DWORD *)(a2 + 64) = 0;
        WTF::fastFree(v341, v237, v238, v239, (uint64_t)v240, v241, v242, v243);
        v344 = v593;
        *(_QWORD *)(a2 + 56) = v343;
        v345 = HIDWORD(v594);
        if (v344 == (void (**)(WTF::StringPrintStream *__hidden))v595)
        {
          if (HIDWORD(v594))
            memcpy((void *)(a2 + 72), v595, 24 * ((24 * (unint64_t)HIDWORD(v594) - 24) / 0x18) + 24);
        }
        else
        {
          *v342 = v344;
        }
      }
      else
      {
        v345 = 0;
        *v342 = (void (**)(WTF::StringPrintStream *__hidden))v343;
      }
      *(_DWORD *)(a2 + 64) = v594;
      *(_DWORD *)(a2 + 68) = v345;
      v376 = *(_DWORD **)(a2 + 48);
      v593 = (void (**)(WTF::StringPrintStream *__hidden))v595;
      v594 = 8;
      JSC::Wasm::IPIntGenerator::addCatchToUnreachable(&v591, v376, v245, (uint64_t)v335, v338, (uint64_t)&v593, v242, v243);
      if (BYTE8(v591))
      {
        *(_QWORD *)a1 = v591;
        a1[8] = 1;
      }
      else
      {
        if (*((_DWORD *)v335 + 8))
          v384 = 0;
        else
          v384 = (char *)v335 + 8;
        v385 = *((_DWORD *)v384 + 2);
        if (HIDWORD(v594) != v385)
        {
          __break(0xC471u);
          JUMPOUT(0x198D07224);
        }
        if (v385)
        {
          v386 = 0;
          do
          {
            v387 = (unint64_t *)(*((_QWORD *)v335 + 1) + 16 * (v386 + *((_DWORD *)v335 + 5)));
            v388 = *v387;
            v389 = v387[1];
            v591 = v388;
            *((_QWORD *)&v591 + 1) = v389;
            if (v388 == 251)
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + 57) = 1;
            if (v386 >= HIDWORD(v594))
            {
              __break(0xC471u);
              JUMPOUT(0x198D0751CLL);
            }
            v390 = *(_DWORD *)(a2 + 68);
            if (v390 == *(_DWORD *)(a2 + 64))
            {
              WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &v591, v378, v379, v380, v381, v382, v383);
            }
            else
            {
              v391 = (unint64_t *)(*(_QWORD *)(a2 + 56) + 24 * v390);
              *v391 = v388;
              v391[1] = v389;
              ++*(_DWORD *)(a2 + 68);
            }
            ++v386;
            if (*((_DWORD *)v335 + 8))
              v392 = 0;
            else
              v392 = (char *)v335 + 8;
          }
          while (v386 < *((unsigned int *)v392 + 2));
        }
        *a1 = 0;
        a1[8] = 0;
      }
      v393 = v593;
      if (v595 != (_BYTE *)v593 && v593)
      {
        v593 = 0;
        LODWORD(v594) = 0;
        WTF::fastFree((unint64_t)v393, v377, v378, v379, v380, v381, v382, v383);
      }
      return;
    case 8:
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseExceptionIndex((uint64_t)&v593, (unint64_t *)a2, (unsigned int *)&v591, a4, *(float *)&a5);
      goto LABEL_237;
    case 9:
      v217 = *(_QWORD *)(a2 + 16);
      v218 = *(_QWORD *)a2;
      v44 = v217 > *(_QWORD *)a2;
      v219 = v217 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_803;
      v220 = 0;
      v221 = 0;
      LODWORD(v48) = 0;
      v222 = *(_QWORD *)(a2 + 8);
      v223 = 5;
      if (v219 < 5)
        v223 = v219;
      v224 = v223 - 1;
      *(_QWORD *)a2 = v218 + 1;
      v225 = v222 + v218;
      v226 = v218 + 2;
      while (1)
      {
        v227 = *(char *)(v225 + v220);
        v48 = ((v227 & 0x7F) << v221) | v48;
        if ((v227 & 0x80000000) == 0)
          break;
        if (v224 == v220)
          goto LABEL_803;
        *(_QWORD *)a2 = v226 + v220;
        v221 += 7;
        if (v219 == ++v220)
          goto LABEL_258;
      }
      if ((_DWORD)v220 == 4 && *(unsigned __int8 *)(v225 + v220) >= 0x10u)
        goto LABEL_803;
      v80 = *(unsigned int *)(a2 + 468);
      if (v80 <= v48)
      {
        v83 = (unint64_t *)a2;
        goto LABEL_73;
      }
      if (!__CFADD__(v80, ~v48))
      {
        __break(0xC471u);
        JUMPOUT(0x198D07524);
      }
      if (*(_DWORD *)(*(_QWORD *)(a2 + 456) + 864 * (v80 + ~v48) + 816) != 5)
      {
        v309 = "rethrow doesn't refer to a catch block";
        v310 = 39;
        goto LABEL_766;
      }
      goto LABEL_2;
    case 0xB:
      v122 = *(_DWORD *)(a2 + 14624);
      if (v122 != 1)
        goto LABEL_473;
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v593, (_DWORD *)(a2 + 456), a3, v12, a9, a10, a11, a12);
      if (v601)
      {
        *(_QWORD *)&v591 = v592;
        *((_QWORD *)&v591 + 1) = 16;
        JSC::Wasm::IPIntGenerator::addEndToUnreachable(&v589, *(_QWORD *)(a2 + 48), (uint64_t)&v593, v179, v180, v181, v182, v183);
        v191 = v590;
        if (v590)
        {
          *(_QWORD *)a1 = v589;
          a1[8] = 1;
        }
        v192 = v591;
        if (v592 != (_BYTE *)v591 && (_QWORD)v591)
        {
          *(_QWORD *)&v591 = 0;
          DWORD2(v591) = 0;
          WTF::fastFree(v192, v184, v185, v186, v187, v188, v189, v190);
        }
        if (v191)
        {
          v193 = 0;
          goto LABEL_461;
        }
      }
      else
      {
        JSC::Wasm::IPIntGenerator::addElseToUnreachable(&v591, *(_QWORD **)(a2 + 48), (uint64_t)&v600, v179, v180, v181, v182, v183);
        if (BYTE8(v591))
          goto LABEL_771;
        v359 = *(_QWORD *)(a2 + 56);
        v360 = a2 + 72;
        if (v359 != a2 + 72)
        {
          if (v359)
          {
            *(_QWORD *)(a2 + 56) = 0;
            *(_DWORD *)(a2 + 64) = 0;
            WTF::fastFree(v359, v184, v185, v186, v187, v188, v189, v190);
          }
          *(_QWORD *)(a2 + 56) = v360;
        }
        v361 = v596;
        if (v596 == v599)
        {
          v363 = v598;
          if (v598)
          {
            v394 = 24 * v598;
            do
            {
              v395 = *(_OWORD *)v361;
              *(_QWORD *)(v360 + 16) = *((_QWORD *)v361 + 2);
              *(_OWORD *)v360 = v395;
              v360 += 24;
              v361 += 24;
              v394 -= 24;
            }
            while (v394);
          }
          v362 = v597;
        }
        else
        {
          v596 = v599;
          *(_QWORD *)(a2 + 56) = v361;
          v362 = v597;
          v597 = 16;
          v363 = v598;
        }
        v598 = 0;
        *(_DWORD *)(a2 + 64) = v362;
        *(_DWORD *)(a2 + 68) = v363;
        JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::unify((uint64_t)&v591, a2, v600, v186, v187, v188, v189, v190);
        if (BYTE8(v591)
          || (JSC::Wasm::IPIntGenerator::addEndToUnreachable(&v591, *(_QWORD *)(a2 + 48), (uint64_t)&v593, v186, v187, v188, v189, v190), BYTE8(v591)))
        {
LABEL_771:
          v193 = 0;
          *(_QWORD *)a1 = v591;
          a1[8] = 1;
          goto LABEL_461;
        }
      }
      v397 = (void (***)(WTF::StringPrintStream *__hidden))(a2 + 56);
      v396 = *(void (***)(WTF::StringPrintStream *__hidden))(a2 + 56);
      v398 = HIDWORD(v594);
      v399 = a2 + 72;
      v400 = v593;
      v401 = v595;
      if (v396 == (void (**)(WTF::StringPrintStream *__hidden))(a2 + 72))
      {
        v407 = *(unsigned int *)(a2 + 68);
        if (v593 == (void (**)(WTF::StringPrintStream *__hidden))v595)
        {
          if (v397 != &v593)
          {
            if (HIDWORD(v594) >= v407)
              v549 = *(unsigned int *)(a2 + 68);
            else
              v549 = HIDWORD(v594);
            if (v549)
            {
              v550 = v549;
              v551 = v593;
              v552 = a2 + 72;
              do
              {
                v553 = *(_OWORD *)v552;
                v554 = *(_QWORD *)(v552 + 16);
                v555 = *((_BYTE *)v551 + 16);
                *(_OWORD *)v552 = *(_OWORD *)v551;
                *(_BYTE *)(v552 + 16) = v555;
                *((_BYTE *)v551 + 16) = v554;
                *(_OWORD *)v551 = v553;
                v551 += 3;
                v552 += 24;
                --v550;
              }
              while (v550);
            }
            v556 = v399 + 24 * v549;
            v557 = &v400[3 * v549];
            if (v407 > v398)
            {
              v558 = 24 * v407 - 24 * v549;
              v559 = v557;
              v560 = (__int128 *)v556;
              do
              {
                v561 = *v560;
                v559[2] = (void (*)(WTF::StringPrintStream *__hidden))*((_QWORD *)v560 + 2);
                *(_OWORD *)v559 = v561;
                v559 += 3;
                v560 = (__int128 *)((char *)v560 + 24);
                v558 -= 24;
              }
              while (v558);
            }
            if (v398 > v407)
            {
              v562 = 24 * v398 - 24 * v549;
              do
              {
                v563 = *(_OWORD *)v557;
                *(_QWORD *)(v556 + 16) = v557[2];
                *(_OWORD *)v556 = v563;
                v556 += 24;
                v557 += 3;
                v562 -= 24;
              }
              while (v562);
            }
          }
        }
        else
        {
          *v397 = v593;
          v593 = (void (**)(WTF::StringPrintStream *__hidden))v595;
          if (v397 != &v593 && (_DWORD)v407)
          {
            v408 = 24 * v407;
            do
            {
              *(_OWORD *)v401 = *(_OWORD *)v399;
              *((_QWORD *)v401 + 2) = *(_QWORD *)(v399 + 16);
              v401 += 24;
              v399 += 24;
              v408 -= 24;
            }
            while (v408);
          }
        }
      }
      else if (v593 == (void (**)(WTF::StringPrintStream *__hidden))v595)
      {
        v593 = *(void (***)(WTF::StringPrintStream *__hidden))(a2 + 56);
        *v397 = (void (**)(WTF::StringPrintStream *__hidden))v399;
        if (v397 != &v593 && (_DWORD)v398)
        {
          v409 = 24 * v398;
          do
          {
            v410 = *(_OWORD *)v400;
            *(_QWORD *)(v399 + 16) = v400[2];
            *(_OWORD *)v399 = v410;
            v399 += 24;
            v400 += 3;
            v409 -= 24;
          }
          while (v409);
        }
      }
      else
      {
        *v397 = v593;
        v593 = v396;
      }
      v402 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = v594;
      v594 = v402;
      v193 = 1;
LABEL_461:
      v403 = v602;
      if (v602)
      {
        v602 = 0;
        v603 = 0;
        WTF::fastFree(v403, v184, v185, v186, v187, v188, v189, v190);
      }
      v404 = (unint64_t)v596;
      if (v599 != v596 && v596 != 0)
      {
        v596 = 0;
        v597 = 0;
        WTF::fastFree(v404, v184, v185, v186, v187, v188, v189, v190);
      }
      v406 = v593;
      if (v595 != (_BYTE *)v593 && v593)
      {
        v593 = 0;
        LODWORD(v594) = 0;
        WTF::fastFree((unint64_t)v406, v184, v185, v186, v187, v188, v189, v190);
      }
      if (v193)
        goto LABEL_472;
      return;
    case 0xC:
    case 0xD:
      v55 = *(_QWORD *)(a2 + 16);
      v56 = *(_QWORD *)a2;
      v57 = v55 - *(_QWORD *)a2;
      if (v55 <= *(_QWORD *)a2)
        goto LABEL_803;
      v58 = 0;
      v59 = 0;
      LODWORD(v48) = 0;
      v60 = *(_DWORD *)(a2 + 14624);
      v61 = *(_QWORD *)(a2 + 8);
      v62 = 5;
      if (v57 < 5)
        v62 = v57;
      v63 = v62 - 1;
      *(_QWORD *)a2 = v56 + 1;
      v64 = v61 + v56;
      v65 = v56 + 2;
      while (1)
      {
        v66 = *(char *)(v64 + v58);
        LODWORD(v48) = ((v66 & 0x7F) << v59) | v48;
        if ((v66 & 0x80000000) == 0)
          break;
        if (v63 == v58)
          goto LABEL_803;
        *(_QWORD *)a2 = v65 + v58;
        v59 += 7;
        if (v57 == ++v58)
          goto LABEL_258;
      }
      if ((_DWORD)v58 == 4 && *(unsigned __int8 *)(v64 + v58) >= 0x10u)
        goto LABEL_803;
      v81 = *(unsigned int *)(a2 + 468);
      v295 = v60 != 0;
      LODWORD(v82) = v60 - 1;
      if (v295)
        v82 = v82;
      else
        v82 = 0;
      v80 = v81 + v82;
      if (v81 + v82 <= (unint64_t)v48)
        goto LABEL_72;
      goto LABEL_2;
    case 0xE:
      v151 = *(_QWORD *)(a2 + 16);
      v152 = *(_QWORD *)a2;
      v153 = v151 - *(_QWORD *)a2;
      if (v151 <= *(_QWORD *)a2)
        goto LABEL_796;
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v157 = *(_QWORD *)(a2 + 8);
      if (v153 >= 5)
        v153 = 5;
      v158 = v153 - 1;
      *(_QWORD *)a2 = v152 + 1;
      while (2)
      {
        v159 = *(char *)(v157 + v152 + v154);
        v156 |= (v159 & 0x7F) << v155;
        if (v159 < 0)
        {
          if (v158 != v154)
          {
            *(_QWORD *)a2 = v152 + v154++ + 2;
            v155 += 7;
            if (!(v152 - v151 + v154))
              goto LABEL_258;
            continue;
          }
          goto LABEL_796;
        }
        break;
      }
      if ((_DWORD)v154 == 4 && *(unsigned __int8 *)(v157 + v152 + v154) >= 0x10u)
      {
LABEL_796:
        v68 = "can't get the number of targets for br_table in unreachable context";
        goto LABEL_797;
      }
      v283 = v152 + v154 + 1;
      if (!v156)
      {
LABEL_368:
        v44 = v151 > v283;
        v346 = v151 - v283;
        if (!v44)
          goto LABEL_379;
        v347 = 0;
        v348 = 5;
        if (v346 < 5)
          v348 = v346;
        v349 = v348 - 1;
        *(_QWORD *)a2 = v283 + 1;
        v350 = v157 + v283;
        while (*(char *)(v350 + v347) < 0)
        {
          if (v349 == v347)
            goto LABEL_379;
          *(_QWORD *)a2 = v283 + 2 + v347++;
          if (v346 == v347)
            goto LABEL_258;
        }
        if ((_DWORD)v347 == 4 && *(unsigned __int8 *)(v350 + v347) >= 0x10u)
        {
LABEL_379:
          v68 = "can't get default target for br_table in unreachable context";
          v69 = (unint64_t *)a2;
          v70 = 61;
          goto LABEL_700;
        }
        goto LABEL_2;
      }
      if (v156 == -1)
      {
        v434 = "br_table's number of targets is too big ";
        v435 = (unint64_t *)a2;
        v436 = 41;
        v165 = -1;
        goto LABEL_687;
      }
      v284 = 0;
      while (1)
      {
        v285 = v283;
        v295 = v151 >= v283;
        v286 = v151 - v283;
        if (v286 == 0 || !v295)
          break;
        v287 = 0;
        if (v286 >= 5)
          v286 = 5;
        v288 = v286 - 1;
        *(_QWORD *)a2 = v285 + 1;
        while (*(char *)(v157 + v285 + v287) < 0)
        {
          if (v288 == v287)
            goto LABEL_280;
          *(_QWORD *)a2 = v285 + v287++ + 2;
          if (!(v285 - v151 + v287))
            goto LABEL_258;
        }
        if ((_DWORD)v287 == 4 && *(unsigned __int8 *)(v157 + v285 + v287) >= 0x10u)
          break;
        v283 = v285 + v287 + 1;
        if (++v284 == v156)
        {
          v283 = v285 + v287 + 1;
          goto LABEL_368;
        }
      }
LABEL_280:
      v289 = "can't get ";
      v290 = "th target for br_table in unreachable context";
      v291 = (unint64_t *)a2;
      v292 = 11;
      v293 = 46;
LABEL_281:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(v289, v291, v292, v284, v290, v293, &v593, *(float *)&a5);
      goto LABEL_30;
    case 0x10:
      goto LABEL_236;
    case 0x11:
      goto LABEL_94;
    case 0x12:
      if (!HIBYTE(word_1ECF4C7B4))
        goto LABEL_749;
LABEL_236:
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseFunctionIndex((uint64_t)&v593, (unint64_t *)a2, (unsigned int *)&v591, a4, *(float *)&a5);
      goto LABEL_237;
    case 0x13:
      if (!HIBYTE(word_1ECF4C7B4))
      {
LABEL_749:
        v68 = "wasm tail calls are not enabled";
        v69 = (unint64_t *)a2;
        v70 = 32;
        goto LABEL_700;
      }
LABEL_94:
      v101 = *(_QWORD *)(a2 + 16);
      v102 = *(_QWORD *)a2;
      v103 = v101 - *(_QWORD *)a2;
      if (v101 <= *(_QWORD *)a2)
        goto LABEL_792;
      v104 = 0;
      v105 = *(_QWORD *)(a2 + 8);
      v106 = 5;
      if (v103 < 5)
        v106 = v101 - *(_QWORD *)a2;
      v107 = v106 - 1;
      *(_QWORD *)a2 = v102 + 1;
      while (2)
      {
        if (*(char *)(v105 + v102 + v104) < 0)
        {
          if (v107 != v104)
          {
            *(_QWORD *)a2 = v102 + v104++ + 2;
            if (v103 == v104)
              goto LABEL_258;
            continue;
          }
          goto LABEL_792;
        }
        break;
      }
      if ((_DWORD)v104 == 4 && *(unsigned __int8 *)(v105 + v102 + v104) >= 0x10u)
      {
LABEL_792:
        v68 = "can't get call_indirect's signature index in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 65;
        goto LABEL_700;
      }
      if (v101 <= v102 + v104 + 1)
        goto LABEL_113;
      v108 = 0;
      v109 = ~v104 + v103;
      if (v109 >= 5)
        v109 = 5;
      v110 = v109 - 1;
      v111 = v102 + v104;
      *(_QWORD *)a2 = v102 + v104 + 2;
      v112 = v102 - v101 + v104;
      v113 = v105 + v102;
      while (*(char *)(v113 + v108 + v104 + 1) < 0)
      {
        if (v110 == v108)
          goto LABEL_113;
        v114 = v111 + v108;
        v115 = v112 + v108++;
        *(_QWORD *)a2 = v114 + 3;
        if (v115 == -2)
          goto LABEL_258;
      }
      if ((_DWORD)v108 == 4 && *(unsigned __int8 *)(v113 + v108 + v104 + 1) >= 0x10u)
      {
LABEL_113:
        v68 = "can't get call_indirect's reserved byte in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 63;
        goto LABEL_700;
      }
      goto LABEL_2;
    case 0x14:
      if (!BYTE1(dword_1ECF4C7B0))
      {
        v68 = "function references are not enabled";
        v69 = (unint64_t *)a2;
        v70 = 36;
        goto LABEL_700;
      }
      v264 = *(_QWORD *)(a2 + 16);
      v265 = *(_QWORD *)a2;
      v44 = v264 > *(_QWORD *)a2;
      v266 = v264 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_332;
      v267 = 0;
      v268 = *(_QWORD *)(a2 + 8);
      v269 = 5;
      if (v266 < 5)
        v269 = v266;
      v270 = v269 - 1;
      *(_QWORD *)a2 = v265 + 1;
      v271 = v268 + v265;
      v272 = v265 + 2;
      while (*(char *)(v271 + v267) < 0)
      {
        if (v270 == v267)
          goto LABEL_332;
        *(_QWORD *)a2 = v272 + v267++;
        if (v266 == v267)
          goto LABEL_258;
      }
      if ((_DWORD)v267 == 4 && *(unsigned __int8 *)(v271 + v267) >= 0x10u)
      {
LABEL_332:
        v68 = "can't call_ref's signature index in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 56;
        goto LABEL_700;
      }
      goto LABEL_2;
    case 0x18:
      if (*(_DWORD *)(a2 + 468) == 1)
      {
        v68 = "can't use delegate at the top-level of a function";
        v69 = (unint64_t *)a2;
        v70 = 50;
        goto LABEL_700;
      }
      v604[0] = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseDelegateTarget((uint64_t)&v593, a2, v604, *(_DWORD *)(a2 + 14624), a4, *(float *)&a5);
      if ((_BYTE)v594)
        goto LABEL_30;
      v122 = *(_DWORD *)(a2 + 14624);
      if (v122 != 1)
        goto LABEL_473;
      v123 = (_QWORD *)(a2 + 456);
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v593, (_DWORD *)(a2 + 456), v116, v117, v118, v119, v120, v121);
      if (v601 != 4)
      {
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [35]>((void (***)(WTF::StringPrintStream *__hidden))&v591);
        goto LABEL_778;
      }
      v124 = *(unsigned int *)(a2 + 468);
      v125 = ~(unint64_t)v604[0];
      v295 = __CFADD__(v125, v124);
      v126 = v125 + v124;
      if (!v295)
      {
        __break(0xC471u);
        JUMPOUT(0x198D0753CLL);
      }
      if ((*(_DWORD *)(*v123 + 864 * v126 + 816) - 5) <= 0xFFFFFFFD)
      {
        JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [34]>((void (***)(WTF::StringPrintStream *__hidden))&v591);
        goto LABEL_778;
      }
      JSC::Wasm::IPIntGenerator::addDelegateToUnreachable(&v591, *(_QWORD *)(a2 + 48), *v123 + 864 * v126 + 808, (uint64_t)&v600);
      if (BYTE8(v591))
      {
LABEL_778:
        *(_QWORD *)a1 = v591;
        v140 = 1;
        a1[8] = 1;
        goto LABEL_132;
      }
      *(_QWORD *)&v591 = v592;
      *((_QWORD *)&v591 + 1) = 16;
      JSC::Wasm::IPIntGenerator::addEndToUnreachable(&v589, *(_QWORD *)(a2 + 48), (uint64_t)&v593, v129, v130, v131, v132, v133);
      if (v590)
      {
        *(_QWORD *)a1 = v589;
        v140 = 1;
        a1[8] = 1;
      }
      else
      {
        v135 = (void (***)(WTF::StringPrintStream *__hidden))(a2 + 56);
        v134 = *(void (***)(WTF::StringPrintStream *__hidden))(a2 + 56);
        v136 = HIDWORD(v594);
        v137 = a2 + 72;
        v138 = v593;
        v139 = v595;
        if (v134 == (void (**)(WTF::StringPrintStream *__hidden))(a2 + 72))
        {
          v368 = *(unsigned int *)(a2 + 68);
          if (v593 == (void (**)(WTF::StringPrintStream *__hidden))v595)
          {
            if (v135 != &v593)
            {
              if (HIDWORD(v594) >= v368)
                v411 = *(unsigned int *)(a2 + 68);
              else
                v411 = HIDWORD(v594);
              if (v411)
              {
                v412 = v411;
                v413 = v593;
                v414 = a2 + 72;
                do
                {
                  v415 = *(_OWORD *)v414;
                  v416 = *(_QWORD *)(v414 + 16);
                  v417 = *((_BYTE *)v413 + 16);
                  *(_OWORD *)v414 = *(_OWORD *)v413;
                  *(_BYTE *)(v414 + 16) = v417;
                  *((_BYTE *)v413 + 16) = v416;
                  *(_OWORD *)v413 = v415;
                  v413 += 3;
                  v414 += 24;
                  --v412;
                }
                while (v412);
              }
              v418 = v137 + 24 * v411;
              v419 = &v138[3 * v411];
              if (v368 > v136)
              {
                v420 = 24 * v368 - 24 * v411;
                v421 = v419;
                v422 = (__int128 *)v418;
                do
                {
                  v423 = *v422;
                  v421[2] = (void (*)(WTF::StringPrintStream *__hidden))*((_QWORD *)v422 + 2);
                  *(_OWORD *)v421 = v423;
                  v421 += 3;
                  v422 = (__int128 *)((char *)v422 + 24);
                  v420 -= 24;
                }
                while (v420);
              }
              if (v136 > v368)
              {
                v424 = 24 * v136 - 24 * v411;
                do
                {
                  v425 = *(_OWORD *)v419;
                  *(_QWORD *)(v418 + 16) = v419[2];
                  *(_OWORD *)v418 = v425;
                  v418 += 24;
                  v419 += 3;
                  v424 -= 24;
                }
                while (v424);
              }
            }
          }
          else
          {
            *v135 = v593;
            v593 = (void (**)(WTF::StringPrintStream *__hidden))v595;
            if (v135 != &v593 && (_DWORD)v368)
            {
              v369 = 24 * v368;
              do
              {
                *(_OWORD *)v139 = *(_OWORD *)v137;
                *((_QWORD *)v139 + 2) = *(_QWORD *)(v137 + 16);
                v139 += 24;
                v137 += 24;
                v369 -= 24;
              }
              while (v369);
            }
          }
        }
        else if (v593 == (void (**)(WTF::StringPrintStream *__hidden))v595)
        {
          v593 = *(void (***)(WTF::StringPrintStream *__hidden))(a2 + 56);
          *v135 = (void (**)(WTF::StringPrintStream *__hidden))v137;
          if (v135 != &v593 && (_DWORD)v136)
          {
            v370 = 24 * v136;
            do
            {
              v371 = *(_OWORD *)v138;
              *(_QWORD *)(v137 + 16) = v138[2];
              *(_OWORD *)v137 = v371;
              v137 += 24;
              v138 += 3;
              v370 -= 24;
            }
            while (v370);
          }
        }
        else
        {
          *v135 = v593;
          v593 = v134;
        }
        v140 = 0;
        v141 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a2 + 64) = v594;
        v594 = v141;
      }
      v142 = v591;
      if (v592 != (_BYTE *)v591 && (_QWORD)v591 != 0)
      {
        *(_QWORD *)&v591 = 0;
        DWORD2(v591) = 0;
        WTF::fastFree(v142, v127, v128, v129, v130, v131, v132, v133);
      }
LABEL_132:
      v144 = v602;
      if (v602)
      {
        v602 = 0;
        v603 = 0;
        WTF::fastFree(v144, v127, v128, v129, v130, v131, v132, v133);
      }
      v145 = (unint64_t)v596;
      if (v599 != v596 && v596)
      {
        v596 = 0;
        v597 = 0;
        WTF::fastFree(v145, v127, v128, v129, v130, v131, v132, v133);
      }
      v146 = v593;
      if (v595 != (_BYTE *)v593 && v593)
      {
        v593 = 0;
        LODWORD(v594) = 0;
        WTF::fastFree((unint64_t)v146, v127, v128, v129, v130, v131, v132, v133);
      }
      if (!v140)
      {
LABEL_472:
        v122 = *(_DWORD *)(a2 + 14624);
LABEL_473:
        *(_DWORD *)(a2 + 14624) = v122 - 1;
        goto LABEL_2;
      }
      return;
    case 0x19:
      if (*(_DWORD *)(a2 + 14624) >= 2u)
        goto LABEL_2;
      v84 = *(unsigned int *)(a2 + 468);
      if (!(_DWORD)v84)
      {
        __break(0xC471u);
        JUMPOUT(0x198D07534);
      }
      v85 = v84 - 1;
      v86 = *(_QWORD *)(a2 + 456);
      *(_DWORD *)(a2 + 14624) = 0;
      v593 = (void (**)(WTF::StringPrintStream *__hidden))v595;
      v594 = 16;
      v87 = *(_QWORD *)(a2 + 56);
      v88 = a2 + 72;
      if (v87 == a2 + 72)
      {
        v90 = 0;
      }
      else if (v87)
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_DWORD *)(a2 + 64) = 0;
        WTF::fastFree(v87, (void *)a2, a3, v12, a9, a10, a11, a12);
        v89 = v593;
        *(_QWORD *)(a2 + 56) = v88;
        v90 = HIDWORD(v594);
        if (v89 == (void (**)(WTF::StringPrintStream *__hidden))v595)
        {
          if (HIDWORD(v594))
            memcpy((void *)(a2 + 72), v595, 24 * ((24 * (unint64_t)HIDWORD(v594) - 24) / 0x18) + 24);
        }
        else
        {
          *(_QWORD *)(a2 + 56) = v89;
        }
      }
      else
      {
        v90 = 0;
        *(_QWORD *)(a2 + 56) = v88;
      }
      *(_DWORD *)(a2 + 64) = v594;
      *(_DWORD *)(a2 + 68) = v90;
      v372 = v86 + 864 * v85;
      v373 = v372 + 808;
      v374 = *(_DWORD *)(v372 + 816);
      if (v374 != 4 && (v374 != 5 || *(_DWORD *)(v373 + 12) != 0))
      {
LABEL_757:
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [38]>(&v593);
        goto LABEL_30;
      }
      JSC::Wasm::IPIntGenerator::addCatchAllToUnreachable(&v593, *(_DWORD **)(a2 + 48), v373, v12, a9, a10, a11, a12);
LABEL_426:
      if ((_BYTE)v594)
        goto LABEL_30;
      goto LABEL_2;
    case 0x1C:
      goto LABEL_259;
    case 0x20:
      v588 = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseIndexForLocal((uint64_t)&v593, a2, &v588, a4, *(float *)&a5);
      if ((_BYTE)v594)
        goto LABEL_30;
      v604[0] = v588;
      if (!BYTE1(dword_1ECF4C7B0))
        goto LABEL_2;
      if (*(_DWORD *)(a2 + 14308) <= v588)
      {
        __break(0xC471u);
        JUMPOUT(0x198D0752CLL);
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 14296) + 16 * v588) != 228)
        goto LABEL_2;
      v149 = a2 + 14600;
      v150 = *(_QWORD *)(a2 + 14600);
      if (v150 >= 0)
        v149 = 2 * v150 + 8;
      if (((*(_QWORD *)(v149 + (((unint64_t)v588 >> 3) & 0x1FFFFFF8)) >> v588) & 1) != 0)
        goto LABEL_2;
      v593 = (void (**)(WTF::StringPrintStream *__hidden))"non-defaultable function local ";
      v594 = 32;
      *(_QWORD *)&v591 = " is accessed before initialization";
      *((_QWORD *)&v591 + 1) = 35;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v589, (uint64_t)&v593, v604, (uint64_t)&v591, v147, v148);
      v40 = v589;
      goto LABEL_31;
    case 0x21:
    case 0x22:
      LODWORD(v591) = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseIndexForLocal((uint64_t)&v593, a2, (unsigned int *)&v591, a4, *(float *)&a5);
      if ((_BYTE)v594)
        goto LABEL_30;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::pushLocalInitialized(a2, v591);
      v41 = 0;
      goto LABEL_238;
    case 0x23:
    case 0x24:
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseIndexForGlobal((uint64_t)&v593, (unint64_t *)a2, (unsigned int *)&v591, a4, *(float *)&a5);
LABEL_237:
      v41 = v594;
      if (!(_BYTE)v594)
        goto LABEL_238;
      goto LABEL_30;
    case 0x25:
    case 0x26:
      v71 = *(_QWORD *)(a2 + 16);
      v72 = *(_QWORD *)a2;
      v44 = v71 > *(_QWORD *)a2;
      v73 = v71 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_76;
      v74 = 0;
      v75 = *(_QWORD *)(a2 + 8);
      v76 = 5;
      if (v73 < 5)
        v76 = v73;
      v77 = v76 - 1;
      *(_QWORD *)a2 = v72 + 1;
      v78 = v75 + v72;
      v79 = v72 + 2;
      while (2)
      {
        if (*(char *)(v78 + v74) < 0)
        {
          if (v77 != v74)
          {
            *(_QWORD *)a2 = v79 + v74++;
            if (v73 == v74)
              goto LABEL_258;
            continue;
          }
          goto LABEL_76;
        }
        break;
      }
      if ((_DWORD)v74 == 4 && *(unsigned __int8 *)(v78 + v74) >= 0x10u)
      {
LABEL_76:
        v68 = "can't parse table index";
        v69 = (unint64_t *)a2;
        v70 = 24;
        goto LABEL_700;
      }
      goto LABEL_2;
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
      v15 = *(_QWORD *)(a2 + 16);
      v16 = *(_QWORD *)a2;
      v17 = v15 - *(_QWORD *)a2;
      if (v15 <= *(_QWORD *)a2)
        goto LABEL_783;
      v18 = 0;
      v19 = *(_QWORD *)(a2 + 8);
      v20 = 5;
      if (v17 < 5)
        v20 = v15 - *(_QWORD *)a2;
      v21 = v20 - 1;
      *(_QWORD *)a2 = v16 + 1;
      while (2)
      {
        if (*(char *)(v19 + v16 + v18) < 0)
        {
          if (v21 != v18)
          {
            *(_QWORD *)a2 = v16 + v18++ + 2;
            if (v17 == v18)
              goto LABEL_258;
            continue;
          }
          goto LABEL_783;
        }
        break;
      }
      if ((_DWORD)v18 == 4 && *(unsigned __int8 *)(v19 + v16 + v18) >= 0x10u)
      {
LABEL_783:
        v30 = "can't get first immediate for ";
        v31 = (unint64_t *)a2;
        v32 = 31;
        goto LABEL_29;
      }
      if (v15 <= v16 + v18 + 1)
        goto LABEL_23;
      v22 = 0;
      v23 = ~v18 + v17;
      if (v23 >= 5)
        v23 = 5;
      v24 = v23 - 1;
      v25 = v16 + v18;
      *(_QWORD *)a2 = v16 + v18 + 2;
      v26 = v16 - v15 + v18;
      v27 = v19 + v16;
      while (*(char *)(v27 + v22 + v18 + 1) < 0)
      {
        if (v24 == v22)
          goto LABEL_23;
        v28 = v25 + v22;
        v29 = v26 + v22++;
        *(_QWORD *)a2 = v28 + 3;
        if (v29 == -2)
          goto LABEL_258;
      }
      if ((_DWORD)v22 == 4 && *(unsigned __int8 *)(v27 + v22 + v18 + 1) >= 0x10u)
      {
LABEL_23:
        v30 = "can't get second immediate for ";
        v31 = (unint64_t *)a2;
        v32 = 32;
        goto LABEL_29;
      }
      goto LABEL_2;
    case 0x3F:
    case 0x40:
      v67 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
      {
        v68 = "can't parse reserved byte for grow_memory/current_memory";
        v69 = (unint64_t *)a2;
        v70 = 57;
      }
      else
      {
        *(_QWORD *)a2 = v67 + 1;
        if (!*(_BYTE *)(*(_QWORD *)(a2 + 8) + v67))
          goto LABEL_2;
        v68 = "reserved byte for grow_memory/current_memory must be zero";
        v69 = (unint64_t *)a2;
        v70 = 58;
      }
      goto LABEL_700;
    case 0x41:
      v273 = *(_QWORD *)(a2 + 16);
      v274 = *(_QWORD *)a2;
      v44 = v273 > *(_QWORD *)a2;
      v275 = v273 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_311;
      v276 = 0;
      v277 = *(_QWORD *)(a2 + 8);
      v278 = 5;
      if (v275 < 5)
        v278 = v275;
      v279 = v278 - 1;
      *(_QWORD *)a2 = v274 + 1;
      v280 = v277 + v274;
      v281 = v274 + 2;
      while (2)
      {
        v282 = *(char *)(v280 + v276);
        if (v282 < 0)
        {
          if (v279 != v276)
          {
            *(_QWORD *)a2 = v281 + v276++;
            if (v275 == v276)
              goto LABEL_258;
            continue;
          }
          goto LABEL_311;
        }
        break;
      }
      if ((_DWORD)v276 != 4)
        goto LABEL_2;
      if ((v282 & 0x40) == 0)
      {
        if (*(unsigned __int8 *)(v280 + v276) < 8u)
          goto LABEL_2;
        goto LABEL_311;
      }
      if ((v282 & 0xF8) != 0x78)
      {
LABEL_311:
        v30 = "can't get immediate for ";
        v31 = (unint64_t *)a2;
        v32 = 25;
        goto LABEL_29;
      }
      goto LABEL_2;
    case 0x42:
      v91 = *(_QWORD *)(a2 + 16);
      v92 = *(_QWORD *)a2;
      v44 = v91 > *(_QWORD *)a2;
      v93 = v91 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_689;
      v94 = 0;
      v95 = *(_QWORD *)(a2 + 8);
      v96 = 10;
      if (v93 < 0xA)
        v96 = v93;
      v97 = v96 - 1;
      *(_QWORD *)a2 = v92 + 1;
      v98 = v95 + v92;
      v99 = v92 + 2;
      while (2)
      {
        v100 = *(char *)(v98 + v94);
        if (v100 < 0)
        {
          if (v97 != v94)
          {
            *(_QWORD *)a2 = v99 + v94++;
            if (v93 == v94)
              goto LABEL_258;
            continue;
          }
        }
        else
        {
          if ((_DWORD)v94 != 9)
            goto LABEL_2;
          if ((v100 & 0x40) != 0)
          {
            if (*(_BYTE *)(v98 + v94) == 127)
              goto LABEL_2;
          }
          else if (!*(_BYTE *)(v98 + v94))
          {
            goto LABEL_2;
          }
        }
        break;
      }
LABEL_689:
      v30 = "can't get immediate for ";
      v31 = (unint64_t *)a2;
      v32 = 25;
      goto LABEL_29;
    case 0x43:
      v216 = *(_QWORD *)a2 + 4;
      if (*(_QWORD *)(a2 + 16) >= v216)
        goto LABEL_262;
      v68 = "can't parse 32-bit floating-point constant";
      goto LABEL_699;
    case 0x44:
      v216 = *(_QWORD *)a2 + 8;
      if (*(_QWORD *)(a2 + 16) >= v216)
      {
LABEL_262:
        *(_QWORD *)a2 = v216;
        goto LABEL_2;
      }
      v68 = "can't parse 64-bit floating-point constant";
LABEL_699:
      v69 = (unint64_t *)a2;
      v70 = 43;
      goto LABEL_700;
    case 0xD2:
      v228 = *(_QWORD *)(a2 + 16);
      v229 = *(_QWORD *)a2;
      v44 = v228 > *(_QWORD *)a2;
      v230 = v228 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_307;
      v231 = 0;
      v232 = *(_QWORD *)(a2 + 8);
      v233 = 5;
      if (v230 < 5)
        v233 = v230;
      v234 = v233 - 1;
      *(_QWORD *)a2 = v229 + 1;
      v235 = v232 + v229;
      v236 = v229 + 2;
      while (2)
      {
        if (*(char *)(v235 + v231) < 0)
        {
          if (v234 != v231)
          {
            *(_QWORD *)a2 = v236 + v231++;
            if (v230 == v231)
              goto LABEL_258;
            continue;
          }
        }
        else if ((_DWORD)v231 != 4 || *(unsigned __int8 *)(v235 + v231) < 0x10u)
        {
          goto LABEL_2;
        }
        break;
      }
LABEL_307:
      v30 = "can't get immediate for ";
      v31 = (unint64_t *)a2;
      v32 = 25;
LABEL_29:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::Wasm::OpType,WTF::ASCIILiteral>(v30, v31, v32, " in unreachable context", 24, &v593, *(float *)&a5);
      goto LABEL_30;
    case 0xD5:
    case 0xD6:
      v42 = *(_QWORD *)(a2 + 16);
      v43 = *(_QWORD *)a2;
      v44 = v42 > *(_QWORD *)a2;
      v45 = v42 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_803;
      v46 = 0;
      v47 = 0;
      LODWORD(v48) = 0;
      v49 = *(_QWORD *)(a2 + 8);
      v50 = 5;
      if (v45 < 5)
        v50 = v45;
      v51 = v50 - 1;
      *(_QWORD *)a2 = v43 + 1;
      v52 = v49 + v43;
      v53 = v43 + 2;
      while (2)
      {
        v54 = *(char *)(v52 + v46);
        LODWORD(v48) = ((v54 & 0x7F) << v47) | v48;
        if (v54 < 0)
        {
          if (v51 != v46)
          {
            *(_QWORD *)a2 = v53 + v46;
            v47 += 7;
            if (v45 == ++v46)
              goto LABEL_258;
            continue;
          }
          goto LABEL_803;
        }
        break;
      }
      if ((_DWORD)v46 == 4 && *(unsigned __int8 *)(v52 + v46) >= 0x10u)
      {
LABEL_803:
        v68 = "can't get br / br_if's target";
        v69 = (unint64_t *)a2;
        v70 = 30;
        goto LABEL_700;
      }
      v80 = *(unsigned int *)(a2 + 468);
      if (v80 > v48)
        goto LABEL_2;
LABEL_72:
      v83 = (unint64_t *)a2;
LABEL_73:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("br / br_if's target ", v83, 21, v48, " exceeds control stack size ", 29, v80, &v593, *(float *)&a5);
      goto LABEL_30;
    case 0xFB:
      if (!BYTE2(dword_1ECF4C7B0))
      {
        v68 = "Wasm GC is not enabled";
        v69 = (unint64_t *)a2;
        v70 = 23;
LABEL_700:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v68, v69, v70, &v593, *(float *)&a5);
LABEL_30:
        v40 = v593;
LABEL_31:
        *(_QWORD *)a1 = v40;
        v41 = 1;
LABEL_239:
        a1[8] = v41;
        return;
      }
      v194 = *(_QWORD *)(a2 + 16);
      v195 = *(_QWORD *)a2;
      v44 = v194 > *(_QWORD *)a2;
      v196 = v194 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_807;
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v200 = *(_QWORD *)(a2 + 8);
      v201 = 5;
      if (v196 < 5)
        v201 = v196;
      v202 = v201 - 1;
      *(_QWORD *)a2 = v195 + 1;
      v203 = v200 + v195;
      v204 = v195 + 2;
      while (1)
      {
        v205 = *(char *)(v203 + v197);
        v199 |= (v205 & 0x7F) << v198;
        if ((v205 & 0x80000000) == 0)
          break;
        if (v202 == v197)
          goto LABEL_807;
        *(_QWORD *)a2 = v204 + v197;
        v198 += 7;
        if (v196 == ++v197)
          goto LABEL_258;
      }
      if ((_DWORD)v197 == 4 && *(unsigned __int8 *)(v203 + v197) >= 0x10u)
      {
LABEL_807:
        v68 = "can't parse extended GC opcode";
        v69 = (unint64_t *)a2;
        v70 = 31;
        goto LABEL_700;
      }
      if (BYTE5(qword_1ECF4C789))
      {
        v573 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey);
        if (v573 != -1)
        {
          v593 = (void (**)(WTF::StringPrintStream *__hidden))&v589;
          *(_QWORD *)&v591 = &v593;
          std::__call_once(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey, &v591, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::singleton(void)::$_0 &&>>);
        }
        v574 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag);
        if (v574 != -1)
        {
          v593 = (void (**)(WTF::StringPrintStream *__hidden))&v589;
          *(_QWORD *)&v591 = &v593;
          std::__call_once(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag, &v591, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::$_0 &&>>);
        }
        v575 = (unint64_t *)((char *)&JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter
                                  + 8 * v199
                                  + 704);
        do
          v576 = __ldaxr(v575);
        while (__stlxr(v576 + 1, v575));
      }
      break;
    case 0xFC:
      v160 = *(_QWORD *)(a2 + 16);
      v161 = *(_QWORD *)a2;
      v162 = v160 - *(_QWORD *)a2;
      if (v160 <= *(_QWORD *)a2)
        goto LABEL_799;
      v163 = 0;
      v164 = 0;
      v165 = 0;
      v166 = *(_QWORD *)(a2 + 8);
      if (v162 >= 5)
        v162 = 5;
      v167 = v162 - 1;
      *(_QWORD *)a2 = v161 + 1;
      while (2)
      {
        v168 = *(char *)(v166 + v161 + v163);
        v165 |= (v168 & 0x7F) << v164;
        if (v168 < 0)
        {
          if (v167 != v163)
          {
            *(_QWORD *)a2 = v161 + v163++ + 2;
            v164 += 7;
            if (!(v161 - v160 + v163))
              goto LABEL_258;
            continue;
          }
        }
        else if ((_DWORD)v163 != 4 || *(unsigned __int8 *)(v166 + v161 + v163) < 0x10u)
        {
          switch(v165)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              goto LABEL_2;
            case 8:
              JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseMemoryInitImmediates((uint64_t)&v593, (unint64_t *)a2, &v591, a4, *(float *)&a5);
              goto LABEL_237;
            case 9:
              JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseDataSegmentIndex(&v593, (unint64_t *)a2, (unsigned int *)&v591, a4, *(float *)&a5);
              goto LABEL_237;
            case 10:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseMemoryCopyImmediates((uint64_t)&v593, (unint64_t *)a2, a4, *(float *)&a5);
              goto LABEL_426;
            case 11:
              if (v161 + v163 + 1 >= v160)
              {
                v68 = "can't parse auxiliary byte";
                v69 = (unint64_t *)a2;
                v70 = 27;
                goto LABEL_700;
              }
              v426 = v161 + v163;
              *(_QWORD *)a2 = v426 + 2;
              v427 = v426 + v166;
              v428 = *(unsigned __int8 *)(v427 + 1);
              if (!*(_BYTE *)(v427 + 1))
                goto LABEL_2;
              v429 = "auxiliary byte for memory.fill should be zero, but got ";
              v430 = (unint64_t *)a2;
              v431 = 56;
              break;
            case 12:
              JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseElementIndex((uint64_t)&v593, (unint64_t *)a2, (unsigned int *)&v591, a4, *(float *)&a5);
              if ((_BYTE)v594)
                goto LABEL_30;
              JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseTableIndex((uint64_t)&v593, (unint64_t *)a2, (unsigned int *)&v589, v432, v433);
              goto LABEL_426;
            case 13:
              JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseElementIndex((uint64_t)&v593, (unint64_t *)a2, (unsigned int *)&v591, a4, *(float *)&a5);
              goto LABEL_237;
            case 14:
              JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseTableCopyImmediates(&v593, (unint64_t *)a2, &v591, a4, *(float *)&a5);
              goto LABEL_237;
            case 15:
            case 16:
            case 17:
              JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseTableIndex((uint64_t)&v593, (unint64_t *)a2, (unsigned int *)&v591, a4, *(float *)&a5);
              goto LABEL_237;
            default:
              v434 = "invalid extended 0xfc op ";
              goto LABEL_509;
          }
LABEL_685:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>(v429, v430, v431, v428, &v593, *(float *)&a5);
          goto LABEL_30;
        }
        break;
      }
LABEL_799:
      v68 = "can't parse extended 0xfc opcode";
      v69 = (unint64_t *)a2;
      v70 = 33;
      goto LABEL_700;
    case 0xFD:
      if (!HIBYTE(dword_1ECF4C7B0))
      {
        v68 = "wasm-simd is not enabled";
        goto LABEL_752;
      }
      v169 = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(v169 + 57) = 1;
      v170 = (_BYTE *)(v169 + 57);
      v171 = *(_QWORD *)(a2 + 16);
      v172 = *(_QWORD *)a2;
      v173 = v171 - *(_QWORD *)a2;
      if (v171 <= *(_QWORD *)a2)
        goto LABEL_805;
      v174 = 0;
      v175 = 0;
      v165 = 0;
      v176 = *(_QWORD *)(a2 + 8);
      if (v173 >= 5)
        v173 = 5;
      v177 = v173 - 1;
      *(_QWORD *)a2 = v172 + 1;
      while (2)
      {
        v178 = *(char *)(v176 + v172);
        v165 |= (v178 & 0x7F) << v175;
        if (v178 < 0)
        {
          if (v177 != v174)
          {
            ++v174;
            *(_QWORD *)a2 = v172 + 2;
            ++v172;
            v175 += 7;
            if (v171 == v172)
              goto LABEL_258;
            continue;
          }
        }
        else if (v174 != 4 || *(unsigned __int8 *)(v176 + v172) < 0x10u)
        {
          switch(v165)
          {
            case 0:
              *v170 = 1;
              v571 = 40;
              goto LABEL_725;
            case 1:
              *v170 = 1;
              v571 = 50;
              goto LABEL_725;
            case 2:
              *v170 = 1;
              v571 = 14;
              goto LABEL_725;
            case 3:
              *v170 = 1;
              v571 = 13;
              goto LABEL_725;
            case 4:
              *v170 = 1;
              v571 = 61;
              goto LABEL_725;
            case 5:
              *v170 = 1;
              v571 = 27;
              goto LABEL_725;
            case 6:
              *v170 = 1;
              v571 = 37;
              goto LABEL_725;
            case 7:
              *v170 = 1;
              v571 = 34;
              goto LABEL_725;
            case 8:
              *v170 = 1;
              v571 = 56;
              goto LABEL_725;
            case 9:
              *v170 = 1;
              v571 = 35;
              goto LABEL_725;
            case 10:
              *v170 = 1;
              v571 = 70;
              goto LABEL_725;
            case 11:
              *v170 = 1;
              v571 = 7;
              goto LABEL_725;
            case 12:
              *v170 = 1;
              v216 = v172 + 17;
              if (v171 >= v172 + 17)
                goto LABEL_262;
              v564 = "can't parse 128-bit vector constant";
              v565 = (unint64_t *)a2;
              v566 = 36;
              goto LABEL_728;
            case 13:
              v570 = 41;
              goto LABEL_742;
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 163:
            case 164:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 177:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 195:
            case 196:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 209:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
              *v170 = 1;
              goto LABEL_2;
            case 21:
            case 22:
              v570 = 65;
              goto LABEL_742;
            case 23:
              v570 = 66;
LABEL_742:
              v572 = 1;
              goto LABEL_746;
            case 24:
            case 25:
              v570 = 65;
              goto LABEL_708;
            case 26:
              v570 = 66;
LABEL_708:
              v572 = 2;
              goto LABEL_746;
            case 27:
              v570 = 65;
              goto LABEL_738;
            case 28:
              v570 = 66;
LABEL_738:
              v572 = 3;
              goto LABEL_746;
            case 29:
              v570 = 65;
              goto LABEL_731;
            case 30:
              v570 = 66;
LABEL_731:
              v572 = 4;
              goto LABEL_746;
            case 31:
              v570 = 65;
              goto LABEL_740;
            case 32:
              v570 = 66;
LABEL_740:
              v572 = 5;
              goto LABEL_746;
            case 33:
              v570 = 65;
              goto LABEL_733;
            case 34:
              v570 = 66;
LABEL_733:
              v572 = 6;
              goto LABEL_746;
            case 84:
              v570 = 16;
              goto LABEL_745;
            case 85:
              v570 = 2;
              goto LABEL_745;
            case 86:
              v570 = 46;
              goto LABEL_745;
            case 87:
              v570 = 71;
              goto LABEL_745;
            case 88:
              v570 = 8;
              goto LABEL_745;
            case 89:
              v570 = 48;
              goto LABEL_745;
            case 90:
              v570 = 25;
              goto LABEL_745;
            case 91:
              v570 = 29;
LABEL_745:
              v572 = 0;
LABEL_746:
              JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<false,void>(a1, (unint64_t *)a2, v570, v572, a4, a5, a6, a7);
              return;
            case 92:
              *v170 = 1;
              v571 = 64;
              goto LABEL_725;
            case 93:
              *v170 = 1;
              v571 = 36;
LABEL_725:
              JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v593, v571, (unint64_t *)a2, &v591, a4, *(float *)&a5);
              goto LABEL_237;
            case 256:
            case 257:
            case 258:
            case 259:
            case 260:
            case 261:
            case 262:
            case 263:
            case 264:
              *v170 = 1;
              if ((_BYTE)word_1ECF4C7B4)
                goto LABEL_2;
              v564 = "relaxed simd instructions not supported";
              v565 = (unint64_t *)a2;
              v566 = 40;
              goto LABEL_728;
            default:
              v434 = "invalid extended simd op ";
LABEL_509:
              v435 = (unint64_t *)a2;
              v436 = 26;
              goto LABEL_687;
          }
        }
        break;
      }
LABEL_805:
      v564 = "can't parse wasm extended opcode";
      v565 = (unint64_t *)a2;
      v566 = 33;
LABEL_728:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v564, v565, v566, &v593, *(float *)&a5);
      *(_QWORD *)a1 = v593;
      a1[8] = 1;
      return;
    case 0xFE:
      v206 = *(_QWORD *)(a2 + 16);
      v207 = *(_QWORD *)a2;
      v208 = v206 - *(_QWORD *)a2;
      if (v206 <= *(_QWORD *)a2)
        goto LABEL_801;
      v209 = 0;
      v210 = 0;
      v211 = 0;
      v212 = *(_QWORD *)(a2 + 8);
      v213 = 5;
      if (v208 < 5)
        v213 = v206 - *(_QWORD *)a2;
      v214 = v213 - 1;
      *(_QWORD *)a2 = v207 + 1;
      while (1)
      {
        v215 = *(char *)(v212 + v207 + v209);
        v211 |= (v215 & 0x7F) << v210;
        if ((v215 & 0x80000000) == 0)
          break;
        if (v214 == v209)
          goto LABEL_801;
        *(_QWORD *)a2 = v207 + v209++ + 2;
        v210 += 7;
        if (v208 == v209)
        {
LABEL_258:
          __break(1u);
LABEL_259:
          JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseAnnotatedSelectImmediates(&v591, a2, (uint64_t)&v593, a4, *(float *)&a5);
          v41 = BYTE8(v591);
          if (!BYTE8(v591))
          {
LABEL_238:
            *a1 = 0;
            goto LABEL_239;
          }
          goto LABEL_767;
        }
      }
      if ((_DWORD)v209 == 4 && *(unsigned __int8 *)(v212 + v207 + v209) >= 0x10u)
      {
LABEL_801:
        v68 = "can't parse atomic extended opcode";
        v69 = (unint64_t *)a2;
        v70 = 35;
        goto LABEL_700;
      }
      v294 = v207 + v209 + 1;
      v295 = v211 - 16 >= 0x3F && v211 >= 3;
      if (!v295)
      {
        if (*(_DWORD *)(*(_QWORD *)(a2 + 14576) + 104) == -1)
        {
          v309 = "atomic instruction without memory";
          v310 = 34;
LABEL_766:
          v593 = (void (**)(WTF::StringPrintStream *__hidden))v309;
          v594 = v310;
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v591, (uint64_t)&v593, a4, *(float *)&a5);
LABEL_767:
          v40 = (void (**)(WTF::StringPrintStream *__hidden))v591;
          goto LABEL_31;
        }
        if (v206 <= v294)
          goto LABEL_809;
        v296 = 0;
        v297 = 0;
        v298 = 0;
        v299 = ~v209 + v208;
        v300 = 5;
        if (v299 < 5)
          v300 = v299;
        v301 = v207 + v209;
        *(_QWORD *)a2 = v207 + v209 + 2;
        v302 = v207 - v206;
        v303 = v212 + v207;
        v304 = v300 - 1;
        v305 = v302 + v209;
        while (1)
        {
          v306 = *(char *)(v303 + v296 + v209 + 1);
          v298 |= (v306 & 0x7F) << v297;
          if ((v306 & 0x80000000) == 0)
            break;
          if (v304 == v296)
            goto LABEL_809;
          v307 = v301 + v296;
          v308 = v305 + v296++;
          *(_QWORD *)a2 = v307 + 3;
          v297 += 7;
          if (v308 == -2)
            goto LABEL_258;
        }
        if ((_DWORD)v296 == 4 && *(unsigned __int8 *)(v303 + v296 + v209 + 1) >= 0x10u)
        {
LABEL_809:
          v68 = "can't get load alignment";
LABEL_752:
          v69 = (unint64_t *)a2;
          v70 = 25;
          goto LABEL_700;
        }
        if (v298 != JSC::Wasm::memoryLog2Alignment())
        {
          v577 = JSC::Wasm::memoryLog2Alignment();
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v298, " does not match against atomic op's natural alignment ", 55, 1 << v577, &v593, v578);
          *(_QWORD *)a1 = v593;
          a1[8] = 1;
          return;
        }
        v325 = *(_QWORD *)(a2 + 16);
        v326 = *(_QWORD *)a2;
        v44 = v325 > *(_QWORD *)a2;
        v327 = v325 - *(_QWORD *)a2;
        if (!v44)
          goto LABEL_350;
        v328 = 0;
        v329 = *(_QWORD *)(a2 + 8);
        v330 = 5;
        if (v327 < 5)
          v330 = v327;
        v331 = v330 - 1;
        *(_QWORD *)a2 = v326 + 1;
        v332 = v329 + v326;
        v333 = v326 + 2;
        while (*(char *)(v332 + v328) < 0)
        {
          if (v331 == v328)
            goto LABEL_350;
          *(_QWORD *)a2 = v333 + v328++;
          if (v327 == v328)
            goto LABEL_258;
        }
        if ((_DWORD)v328 == 4 && *(unsigned __int8 *)(v332 + v328) >= 0x10u)
        {
LABEL_350:
          v289 = "can't get first immediate for atomic ";
          v290 = " in unreachable context";
          v291 = (unint64_t *)a2;
          v292 = 38;
          v284 = v211;
          v293 = 24;
          goto LABEL_281;
        }
        goto LABEL_2;
      }
      if (v211 != 3)
      {
        v434 = "invalid extended atomic op ";
        v435 = (unint64_t *)a2;
        v436 = 28;
        v165 = v211;
LABEL_687:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v434, v435, v436, v165, &v593, *(float *)&a5);
        goto LABEL_30;
      }
      if (v294 >= v206)
      {
        v68 = "can't get flags";
        v69 = (unint64_t *)a2;
        v70 = 16;
        goto LABEL_700;
      }
      v567 = v207 + v209;
      *(_QWORD *)a2 = v567 + 2;
      v568 = v567 + v212;
      v428 = *(unsigned __int8 *)(v568 + 1);
      if (!*(_BYTE *)(v568 + 1))
        goto LABEL_2;
      v429 = "flags should be 0x0 but got ";
      v430 = (unint64_t *)a2;
      v431 = 29;
      goto LABEL_685;
    default:
      __break(0xC471u);
      JUMPOUT(0x198D07484);
  }
  switch(v199)
  {
    case 0:
      v464 = "struct.new";
      v465 = (unint64_t *)a2;
      v466 = 11;
      goto LABEL_569;
    case 1:
      v464 = "struct.new_default";
      v465 = (unint64_t *)a2;
      v466 = 19;
LABEL_569:
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseStructTypeIndex(&v593, v465, &v591, v464, v466, a4, *(float *)&a5);
      goto LABEL_237;
    case 2:
      v476 = "struct.get";
      goto LABEL_550;
    case 5:
      v476 = "struct.set";
LABEL_550:
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseStructTypeIndexAndFieldIndex((uint64_t)&v593, (unint64_t *)a2, (unsigned int *)&v591, v476, 11, a4, *(float *)&a5);
      goto LABEL_237;
    case 6:
      v493 = *(_QWORD *)(a2 + 16);
      v494 = *(_QWORD *)a2;
      v44 = v493 > *(_QWORD *)a2;
      v495 = v493 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_632;
      v496 = 0;
      v497 = *(_QWORD *)(a2 + 8);
      v498 = 5;
      if (v495 < 5)
        v498 = v495;
      v499 = v498 - 1;
      *(_QWORD *)a2 = v494 + 1;
      v500 = v497 + v494;
      v501 = v494 + 2;
      while (2)
      {
        if (*(char *)(v500 + v496) < 0)
        {
          if (v499 != v496)
          {
            *(_QWORD *)a2 = v501 + v496++;
            if (v495 == v496)
              goto LABEL_258;
            continue;
          }
          goto LABEL_632;
        }
        break;
      }
      if ((_DWORD)v496 == 4 && *(unsigned __int8 *)(v500 + v496) >= 0x10u)
      {
LABEL_632:
        v68 = "can't get type index immediate for array.new in unreachable context";
        goto LABEL_797;
      }
      goto LABEL_2;
    case 7:
      v502 = *(_QWORD *)(a2 + 16);
      v503 = *(_QWORD *)a2;
      v44 = v502 > *(_QWORD *)a2;
      v504 = v502 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_635;
      v505 = 0;
      v506 = *(_QWORD *)(a2 + 8);
      v507 = 5;
      if (v504 < 5)
        v507 = v504;
      v508 = v507 - 1;
      *(_QWORD *)a2 = v503 + 1;
      v509 = v506 + v503;
      v510 = v503 + 2;
      while (2)
      {
        if (*(char *)(v509 + v505) < 0)
        {
          if (v508 != v505)
          {
            *(_QWORD *)a2 = v510 + v505++;
            if (v504 == v505)
              goto LABEL_258;
            continue;
          }
          goto LABEL_635;
        }
        break;
      }
      if ((_DWORD)v505 == 4 && *(unsigned __int8 *)(v509 + v505) >= 0x10u)
      {
LABEL_635:
        v68 = "can't get type index immediate for array.new_default in unreachable context";
        goto LABEL_657;
      }
      goto LABEL_2;
    case 11:
      v446 = *(_QWORD *)(a2 + 16);
      v447 = *(_QWORD *)a2;
      v44 = v446 > *(_QWORD *)a2;
      v448 = v446 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_610;
      v449 = 0;
      v450 = *(_QWORD *)(a2 + 8);
      v451 = 5;
      if (v448 < 5)
        v451 = v448;
      v452 = v451 - 1;
      *(_QWORD *)a2 = v447 + 1;
      v453 = v450 + v447;
      v454 = v447 + 2;
      while (2)
      {
        if (*(char *)(v453 + v449) < 0)
        {
          if (v452 != v449)
          {
            *(_QWORD *)a2 = v454 + v449++;
            if (v448 == v449)
              goto LABEL_258;
            continue;
          }
          goto LABEL_610;
        }
        break;
      }
      if ((_DWORD)v449 == 4 && *(unsigned __int8 *)(v453 + v449) >= 0x10u)
      {
LABEL_610:
        v68 = "can't get type index immediate for array.get in unreachable context";
        goto LABEL_797;
      }
      goto LABEL_2;
    case 12:
      v467 = *(_QWORD *)(a2 + 16);
      v468 = *(_QWORD *)a2;
      v44 = v467 > *(_QWORD *)a2;
      v469 = v467 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_616;
      v470 = 0;
      v471 = *(_QWORD *)(a2 + 8);
      v472 = 5;
      if (v469 < 5)
        v472 = v469;
      v473 = v472 - 1;
      *(_QWORD *)a2 = v468 + 1;
      v474 = v471 + v468;
      v475 = v468 + 2;
      while (2)
      {
        if (*(char *)(v474 + v470) < 0)
        {
          if (v473 != v470)
          {
            *(_QWORD *)a2 = v475 + v470++;
            if (v469 == v470)
              goto LABEL_258;
            continue;
          }
          goto LABEL_616;
        }
        break;
      }
      if ((_DWORD)v470 == 4 && *(unsigned __int8 *)(v474 + v470) >= 0x10u)
      {
LABEL_616:
        v68 = "can't get type index immediate for array.get_s in unreachable context";
        goto LABEL_617;
      }
      goto LABEL_2;
    case 13:
      v455 = *(_QWORD *)(a2 + 16);
      v456 = *(_QWORD *)a2;
      v44 = v455 > *(_QWORD *)a2;
      v457 = v455 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_613;
      v458 = 0;
      v459 = *(_QWORD *)(a2 + 8);
      v460 = 5;
      if (v457 < 5)
        v460 = v457;
      v461 = v460 - 1;
      *(_QWORD *)a2 = v456 + 1;
      v462 = v459 + v456;
      v463 = v456 + 2;
      while (2)
      {
        if (*(char *)(v462 + v458) < 0)
        {
          if (v461 != v458)
          {
            *(_QWORD *)a2 = v463 + v458++;
            if (v457 == v458)
              goto LABEL_258;
            continue;
          }
        }
        else if ((_DWORD)v458 != 4 || *(unsigned __int8 *)(v462 + v458) < 0x10u)
        {
          goto LABEL_2;
        }
        break;
      }
LABEL_613:
      v68 = "can't get type index immediate for array.get_u in unreachable context";
LABEL_617:
      v69 = (unint64_t *)a2;
      v70 = 70;
      goto LABEL_700;
    case 14:
      v437 = *(_QWORD *)(a2 + 16);
      v438 = *(_QWORD *)a2;
      v44 = v437 > *(_QWORD *)a2;
      v439 = v437 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_607;
      v440 = 0;
      v441 = *(_QWORD *)(a2 + 8);
      v442 = 5;
      if (v439 < 5)
        v442 = v439;
      v443 = v442 - 1;
      *(_QWORD *)a2 = v438 + 1;
      v444 = v441 + v438;
      v445 = v438 + 2;
      while (2)
      {
        if (*(char *)(v444 + v440) < 0)
        {
          if (v443 != v440)
          {
            *(_QWORD *)a2 = v445 + v440++;
            if (v439 == v440)
              goto LABEL_258;
            continue;
          }
        }
        else if ((_DWORD)v440 != 4 || *(unsigned __int8 *)(v444 + v440) < 0x10u)
        {
          goto LABEL_2;
        }
        break;
      }
LABEL_607:
      v68 = "can't get type index immediate for array.set in unreachable context";
LABEL_797:
      v69 = (unint64_t *)a2;
      v70 = 68;
      goto LABEL_700;
    case 15:
    case 28:
    case 29:
    case 30:
      goto LABEL_2;
    case 16:
      v477 = *(_QWORD *)(a2 + 16);
      v478 = *(_QWORD *)a2;
      v44 = v477 > *(_QWORD *)a2;
      v479 = v477 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_620;
      v480 = 0;
      v481 = *(_QWORD *)(a2 + 8);
      v482 = 5;
      if (v479 < 5)
        v482 = v479;
      v483 = v482 - 1;
      *(_QWORD *)a2 = v478 + 1;
      v484 = v481 + v478;
      v485 = v478 + 2;
      while (2)
      {
        if (*(char *)(v484 + v480) < 0)
        {
          if (v483 != v480)
          {
            *(_QWORD *)a2 = v485 + v480++;
            if (v479 == v480)
              goto LABEL_258;
            continue;
          }
          goto LABEL_620;
        }
        break;
      }
      if ((_DWORD)v480 == 4 && *(unsigned __int8 *)(v484 + v480) >= 0x10u)
      {
LABEL_620:
        v68 = "can't get type index immediate for array.fill in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 69;
        goto LABEL_700;
      }
      goto LABEL_2;
    case 17:
      v486 = *(_QWORD *)(a2 + 16);
      v487 = *(_QWORD *)a2;
      v488 = v486 - *(_QWORD *)a2;
      if (v486 <= *(_QWORD *)a2)
        goto LABEL_812;
      v489 = 0;
      v490 = *(_QWORD *)(a2 + 8);
      v491 = 5;
      if (v488 < 5)
        v491 = v486 - *(_QWORD *)a2;
      v492 = v491 - 1;
      *(_QWORD *)a2 = v487 + 1;
      while (2)
      {
        if (*(char *)(v490 + v487 + v489) < 0)
        {
          if (v492 != v489)
          {
            *(_QWORD *)a2 = v487 + v489++ + 2;
            if (v488 == v489)
              goto LABEL_258;
            continue;
          }
          goto LABEL_812;
        }
        break;
      }
      if ((_DWORD)v489 == 4 && *(unsigned __int8 *)(v490 + v487 + v489) >= 0x10u)
      {
LABEL_812:
        v68 = "can't get first type index immediate for array.copy in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 75;
        goto LABEL_700;
      }
      if (v486 <= v487 + v489 + 1)
        goto LABEL_656;
      v525 = 0;
      v526 = ~v489 + v488;
      if (v526 >= 5)
        v526 = 5;
      v527 = v526 - 1;
      v528 = v487 + v489;
      *(_QWORD *)a2 = v487 + v489 + 2;
      v529 = v487 - v486 + v489;
      v530 = v490 + v487;
      while (*(char *)(v530 + v525 + v489 + 1) < 0)
      {
        if (v527 == v525)
          goto LABEL_656;
        v531 = v528 + v525;
        v532 = v529 + v525++;
        *(_QWORD *)a2 = v531 + 3;
        if (v532 == -2)
          goto LABEL_258;
      }
      if ((_DWORD)v525 == 4 && *(unsigned __int8 *)(v530 + v525 + v489 + 1) >= 0x10u)
      {
LABEL_656:
        v68 = "can't get second type index immediate for array.copy in unreachable context";
LABEL_657:
        v69 = (unint64_t *)a2;
        v70 = 76;
        goto LABEL_700;
      }
      goto LABEL_2;
    case 18:
      v518 = *(_QWORD *)(a2 + 16);
      v519 = *(_QWORD *)a2;
      v520 = v518 - *(_QWORD *)a2;
      if (v518 <= *(_QWORD *)a2)
        goto LABEL_816;
      v521 = 0;
      v522 = *(_QWORD *)(a2 + 8);
      v523 = 5;
      if (v520 < 5)
        v523 = v518 - *(_QWORD *)a2;
      v524 = v523 - 1;
      *(_QWORD *)a2 = v519 + 1;
      while (2)
      {
        if (*(char *)(v522 + v519 + v521) < 0)
        {
          if (v524 != v521)
          {
            *(_QWORD *)a2 = v519 + v521++ + 2;
            if (v520 == v521)
              goto LABEL_258;
            continue;
          }
          goto LABEL_816;
        }
        break;
      }
      if ((_DWORD)v521 == 4 && *(unsigned __int8 *)(v522 + v519 + v521) >= 0x10u)
      {
LABEL_816:
        v68 = "can't get first type index immediate for array.init_data in unreachable context";
        goto LABEL_817;
      }
      if (v518 <= v519 + v521 + 1)
        goto LABEL_663;
      v541 = 0;
      v542 = ~v521 + v520;
      if (v542 >= 5)
        v542 = 5;
      v543 = v542 - 1;
      v544 = v519 + v521;
      *(_QWORD *)a2 = v519 + v521 + 2;
      v545 = v519 - v518 + v521;
      v546 = v522 + v519;
      while (*(char *)(v546 + v541 + v521 + 1) < 0)
      {
        if (v543 == v541)
          goto LABEL_663;
        v547 = v544 + v541;
        v548 = v545 + v541++;
        *(_QWORD *)a2 = v547 + 3;
        if (v548 == -2)
          goto LABEL_258;
      }
      if ((_DWORD)v541 == 4 && *(unsigned __int8 *)(v546 + v541 + v521 + 1) >= 0x10u)
      {
LABEL_663:
        v68 = "can't get second type index immediate for array.init_data in unreachable context";
        goto LABEL_664;
      }
      goto LABEL_2;
    case 19:
      v511 = *(_QWORD *)(a2 + 16);
      v512 = *(_QWORD *)a2;
      v513 = v511 - *(_QWORD *)a2;
      if (v511 <= *(_QWORD *)a2)
        goto LABEL_814;
      v514 = 0;
      v515 = *(_QWORD *)(a2 + 8);
      v516 = 5;
      if (v513 < 5)
        v516 = v511 - *(_QWORD *)a2;
      v517 = v516 - 1;
      *(_QWORD *)a2 = v512 + 1;
      while (2)
      {
        if (*(char *)(v515 + v512 + v514) < 0)
        {
          if (v517 != v514)
          {
            *(_QWORD *)a2 = v512 + v514++ + 2;
            if (v513 == v514)
              goto LABEL_258;
            continue;
          }
          goto LABEL_814;
        }
        break;
      }
      if ((_DWORD)v514 == 4 && *(unsigned __int8 *)(v515 + v512 + v514) >= 0x10u)
      {
LABEL_814:
        v68 = "can't get first type index immediate for array.init_elem in unreachable context";
LABEL_817:
        v69 = (unint64_t *)a2;
        v70 = 80;
        goto LABEL_700;
      }
      if (v511 <= v512 + v514 + 1)
        goto LABEL_660;
      v533 = 0;
      v534 = ~v514 + v513;
      if (v534 >= 5)
        v534 = 5;
      v535 = v534 - 1;
      v536 = v512 + v514;
      *(_QWORD *)a2 = v512 + v514 + 2;
      v537 = v512 - v511 + v514;
      v538 = v515 + v512;
      while (*(char *)(v538 + v533 + v514 + 1) < 0)
      {
        if (v535 == v533)
          goto LABEL_660;
        v539 = v536 + v533;
        v540 = v537 + v533++;
        *(_QWORD *)a2 = v539 + 3;
        if (v540 == -2)
          goto LABEL_258;
      }
      if ((_DWORD)v533 == 4 && *(unsigned __int8 *)(v538 + v533 + v514 + 1) >= 0x10u)
      {
LABEL_660:
        v68 = "can't get second type index immediate for array.init_elem in unreachable context";
LABEL_664:
        v69 = (unint64_t *)a2;
        v70 = 81;
        goto LABEL_700;
      }
      goto LABEL_2;
    case 20:
    case 21:
    case 22:
    case 23:
      if ((v199 & 0xFFFFFFFE) == 0x16)
        v311 = "ref.cast";
      else
        v311 = "ref.test";
      if (!BYTE1(dword_1ECF4C7B0))
        goto LABEL_695;
      v312 = *(_QWORD *)(a2 + 16);
      v313 = *(_QWORD *)a2;
      v314 = v312 - *(_QWORD *)a2;
      if (v312 <= *(_QWORD *)a2)
        goto LABEL_695;
      v315 = 0;
      v316 = 0;
      v317 = *(_QWORD *)(a2 + 14576);
      v318 = *(_QWORD *)(a2 + 8);
      v319 = 5;
      if (v314 < 5)
        v319 = v314;
      v320 = v319 - 1;
      *(_QWORD *)a2 = v313 + 1;
      v321 = v318 + v313;
      v322 = v313 + 2;
      v323 = 7;
      while (2)
      {
        v324 = *(char *)(v321 + v315);
        v316 |= (v324 & 0x7F) << (v323 - 7);
        if (v324 < 0)
        {
          if (v320 != v315)
          {
            *(_QWORD *)a2 = v322 + v315;
            v323 += 7;
            if (v314 == ++v315)
              goto LABEL_258;
            continue;
          }
          goto LABEL_695;
        }
        break;
      }
      if ((_DWORD)v315 != 4)
        goto LABEL_402;
      if ((v324 & 0x40) != 0)
      {
        if ((v324 & 0xF8) != 0x78)
          goto LABEL_695;
LABEL_402:
        if (v323 <= 0x1F && (v324 & 0x40) != 0)
        {
          v316 |= -1 << v323;
          goto LABEL_694;
        }
      }
      else if (*(unsigned __int8 *)(v321 + v315) > 7u)
      {
LABEL_695:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get heap type for ", (unint64_t *)a2, 25, v311, 9, &v593, *(float *)&a5);
        goto LABEL_30;
      }
      if ((v316 & 0x80000000) == 0)
      {
        if (v316 >= *(_DWORD *)(v317 + 100)
          && (!*(_BYTE *)(a2 + 32) || v316 < *(_DWORD *)(a2 + 36) || v316 >= *(_DWORD *)(a2 + 40)))
        {
          goto LABEL_695;
        }
LABEL_2:
        *a1 = 0;
        a1[8] = 0;
        return;
      }
LABEL_694:
      v569 = (int)v316 + 22;
      if (v569 > 9 || ((1 << v569) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
        goto LABEL_695;
      goto LABEL_2;
    default:
      v434 = "invalid extended GC op ";
      v435 = (unint64_t *)a2;
      v436 = 24;
      v165 = v199;
      goto LABEL_687;
  }
}

#error "198D07E3C: too big function (funcsize=0)"

__n128 WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  __n128 result;

  v9 = WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(_DWORD *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a1 + 864 * v10;
  v13 = v12 + 16;
  *(_QWORD *)v12 = v12 + 16;
  *(_QWORD *)(v12 + 8) = 16;
  v14 = *(__int128 **)v9;
  if (*(unsigned int **)v9 == v9 + 4)
  {
    v16 = v9[3];
    if ((_DWORD)v16)
    {
      v17 = 24 * v16;
      do
      {
        v18 = *v14;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v13 = v18;
        v13 += 24;
        v14 = (__int128 *)((char *)v14 + 24);
        v17 -= 24;
      }
      while (v17);
    }
  }
  else
  {
    *(_QWORD *)v9 = v9 + 4;
    *(_QWORD *)v12 = v14;
    v15 = v9[2];
    v9[2] = 16;
    *(_DWORD *)(v12 + 8) = v15;
  }
  v19 = v9[3];
  v9[3] = 0;
  *(_DWORD *)(v12 + 12) = v19;
  v20 = v11 + 864 * v10;
  v21 = v20 + 416;
  *(_QWORD *)(v20 + 400) = v20 + 416;
  *(_QWORD *)(v20 + 408) = 16;
  v22 = (unsigned int *)*((_QWORD *)v9 + 50);
  if (v22 == v9 + 104)
  {
    v24 = v9[103];
    if ((_DWORD)v24)
    {
      v25 = 24 * v24;
      do
      {
        v26 = *(_OWORD *)v22;
        *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v21 = v26;
        v21 += 24;
        v22 += 6;
        v25 -= 24;
      }
      while (v25);
    }
  }
  else
  {
    *((_QWORD *)v9 + 50) = v9 + 104;
    *(_QWORD *)(v20 + 400) = v22;
    v23 = v9[102];
    v9[102] = 16;
    *(_DWORD *)(v20 + 408) = v23;
  }
  v27 = v11 + 864 * v10;
  v28 = v9[103];
  v9[103] = 0;
  *(_DWORD *)(v27 + 412) = v28;
  *(_DWORD *)(v27 + 800) = v9[200];
  *(_OWORD *)(v27 + 808) = *(_OWORD *)(v9 + 202);
  *(_QWORD *)(v27 + 832) = 0;
  *(_QWORD *)(v27 + 824) = 0;
  v29 = *((_QWORD *)v9 + 103);
  *((_QWORD *)v9 + 103) = 0;
  *(_QWORD *)(v27 + 824) = v29;
  LODWORD(v29) = v9[208];
  v9[208] = 0;
  *(_DWORD *)(v27 + 832) = v29;
  LODWORD(v29) = v9[209];
  v9[209] = 0;
  *(_DWORD *)(v27 + 836) = v29;
  result = *(__n128 *)(v9 + 210);
  *(_QWORD *)(v27 + 856) = *((_QWORD *)v9 + 107);
  *(__n128 *)(v27 + 840) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unsigned int *WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = a3;
  v10 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 > a3 || (v11 = &v10[216 * *(unsigned int *)(a1 + 12)], (unint64_t)v11 <= a3))
  {
    v17 = *(unsigned int *)(a1 + 8);
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= a2)
      v19 = a2;
    if (v19 > v17)
    {
      v20 = *(_DWORD *)(a1 + 12);
      if (v19 < 0x11)
      {
        v22 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v19 >= 0x4BDA13)
        {
          __break(0xC471u);
          JUMPOUT(0x198D1A448);
        }
        v21 = 864 * v19;
        v22 = WTF::fastMalloc((WTF *)(864 * v19));
        *(_DWORD *)(a1 + 8) = (159072863 * (unint64_t)(v21 >> 5)) >> 32;
        *(_QWORD *)a1 = v22;
      }
      WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(v10, &v10[216 * v20], v22, a4, a5, a6, a7, a8);
      if ((unsigned int *)(a1 + 16) != v10 && v10)
      {
        if (*(unsigned int **)a1 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v10, v23, v24, v25, v26, v27, v28, v29);
      }
    }
  }
  else
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= a2)
      v14 = a2;
    if (v14 <= v12)
    {
      v30 = *(unsigned int **)a1;
    }
    else
    {
      if (v14 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v14 >= 0x4BDA13)
        {
          __break(0xC471u);
          JUMPOUT(0x198D1A450);
        }
        v15 = 864 * v14;
        v16 = WTF::fastMalloc((WTF *)(864 * v14));
        *(_DWORD *)(a1 + 8) = (159072863 * (unint64_t)(v15 >> 5)) >> 32;
        *(_QWORD *)a1 = v16;
      }
      WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(v10, v11, v16, a4, a5, a6, a7, a8);
      v30 = *(unsigned int **)a1;
      if ((unsigned int *)(a1 + 16) != v10 && v10)
      {
        if (v30 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v10, v31, v32, v33, v34, v35, v36, v37);
        v30 = *(unsigned int **)a1;
      }
    }
    return &v30[8 * ((uint64_t)(v8 - (_QWORD)v10) >> 5)];
  }
  return (unsigned int *)v8;
}

void WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      *(_QWORD *)v8 = v8 + 16;
      *(_QWORD *)(v8 + 8) = 16;
      v12 = v10 + 4;
      v11 = *(_QWORD *)v10;
      if (*(unsigned int **)v10 == v10 + 4)
      {
        v14 = v10[3];
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = 24 * v14;
          do
          {
            v17 = v8 + v15;
            v18 = *(_OWORD *)(v11 + v15);
            *(_QWORD *)(v17 + 32) = *(_QWORD *)(v11 + v15 + 16);
            *(_OWORD *)(v17 + 16) = v18;
            v15 += 24;
          }
          while (v16 != v15);
        }
      }
      else
      {
        *(_QWORD *)v10 = v12;
        *(_QWORD *)v8 = v11;
        v13 = v10[2];
        v10[2] = 16;
        *(_DWORD *)(v8 + 8) = v13;
      }
      v19 = v10[3];
      v10[3] = 0;
      *(_DWORD *)(v8 + 12) = v19;
      *(_QWORD *)(v8 + 400) = v8 + 416;
      *(_QWORD *)(v8 + 408) = 16;
      v20 = (unsigned int *)*((_QWORD *)v10 + 50);
      v21 = v10 + 104;
      if (v20 == v10 + 104)
      {
        v23 = v10[103];
        if ((_DWORD)v23)
        {
          v24 = 0;
          v25 = 24 * v23;
          do
          {
            v26 = v8 + v24;
            v27 = *(_OWORD *)&v20[v24 / 4];
            *(_QWORD *)(v26 + 432) = *(_QWORD *)&v20[v24 / 4 + 4];
            *(_OWORD *)(v26 + 416) = v27;
            v24 += 24;
          }
          while (v25 != v24);
        }
      }
      else
      {
        *((_QWORD *)v10 + 50) = v21;
        *(_QWORD *)(v8 + 400) = v20;
        v22 = v10[102];
        v10[102] = 16;
        *(_DWORD *)(v8 + 408) = v22;
      }
      v28 = v10[103];
      v10[103] = 0;
      *(_DWORD *)(v8 + 412) = v28;
      *(_DWORD *)(v8 + 800) = v10[200];
      *(_OWORD *)(v8 + 808) = *(_OWORD *)(v10 + 202);
      *(_QWORD *)(v8 + 832) = 0;
      *(_QWORD *)(v8 + 824) = 0;
      v29 = *((_QWORD *)v10 + 103);
      *((_QWORD *)v10 + 103) = 0;
      *(_QWORD *)(v8 + 824) = v29;
      LODWORD(v29) = v10[208];
      v10[208] = 0;
      *(_DWORD *)(v8 + 832) = v29;
      LODWORD(v29) = v10[209];
      v10[209] = 0;
      *(_DWORD *)(v8 + 836) = v29;
      v30 = *(_OWORD *)(v10 + 210);
      *(_QWORD *)(v8 + 856) = *((_QWORD *)v10 + 107);
      *(_OWORD *)(v8 + 840) = v30;
      v31 = *((_QWORD *)v10 + 103);
      if (v31)
      {
        *((_QWORD *)v10 + 103) = 0;
        v10[208] = 0;
        WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
      }
      v32 = *((_QWORD *)v10 + 50);
      if (v21 != (unsigned int *)v32 && v32)
      {
        *((_QWORD *)v10 + 50) = 0;
        v10[102] = 0;
        WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
      }
      v33 = *(_QWORD *)v10;
      if (v12 != *(unsigned int **)v10)
      {
        if (v33)
        {
          *(_QWORD *)v10 = 0;
          v10[2] = 0;
          WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v8 += 864;
      v10 += 216;
    }
    while (v10 != a2);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseExceptionIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse exception index", a2, 28, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(unsigned int *)(a2[1822] + 84) + (unint64_t)*(unsigned int *)(a2[1822] + 68);
  if (v18 <= v11)
  {
    v22[0] = "exception index ";
    v22[1] = 17;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseDelegateTarget(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, double a5, float a6)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a2;
  v9 = v7 > *(_QWORD *)a2;
  v10 = v7 - *(_QWORD *)a2;
  if (!v9)
    goto LABEL_20;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = 5;
  if (v10 < 5)
    v16 = v10;
  v17 = v16 - 1;
  *(_QWORD *)a2 = v8 + 1;
  v18 = v15 + v8;
  v19 = v8 + 2;
  while (1)
  {
    v20 = *(char *)(v18 + v12);
    v14 |= (v20 & 0x7F) << v13;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v17 == v12)
      goto LABEL_20;
    LOBYTE(v20) = v19 + v12;
    *(_QWORD *)a2 = v19 + v12;
    v13 += 7;
    if (v10 == ++v12)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v12 == 4 && v20 >= 0x10u)
  {
LABEL_20:
    v25 = (unint64_t *)a2;
    v26 = "can't get delegate target";
    v27 = 26;
LABEL_21:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v26, v25, v27, &v28, a6);
    goto LABEL_18;
  }
  v21 = *(_DWORD *)(a2 + 468);
  if (a4 && (v22 = a4 - 1, v23 = __CFADD__(v21, v22), v21 += v22, v23) || (v24 = v21 - 1, HIDWORD(v24)))
  {
    v25 = (unint64_t *)a2;
    v26 = "invalid control stack size";
    v27 = 27;
    goto LABEL_21;
  }
  if (v14 >= v24)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>("delegate target ", (unint64_t *)a2, 17, v14, " exceeds control stack size ", 29, v24, &v28, a6);
LABEL_18:
    *(_QWORD *)a1 = v28;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v14;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;

  v8 = a2[3];
  if (!(_DWORD)v8)
    goto LABEL_26;
  v10 = v8 - 1;
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)a2 + 864 * v10;
  v13 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  v14 = *(__int128 **)v12;
  if (*(_QWORD *)v12 == v12 + 16)
  {
    v16 = *(unsigned int *)(v12 + 12);
    if ((_DWORD)v16)
    {
      v17 = 24 * v16;
      do
      {
        v18 = *v14;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v13 = v18;
        v13 += 24;
        v14 = (__int128 *)((char *)v14 + 24);
        v17 -= 24;
      }
      while (v17);
    }
  }
  else
  {
    *(_QWORD *)v12 = v12 + 16;
    *(_QWORD *)a1 = v14;
    v15 = *(_DWORD *)(v12 + 8);
    *(_DWORD *)(v12 + 8) = 16;
    *(_DWORD *)(a1 + 8) = v15;
    LODWORD(v16) = *(_DWORD *)(v12 + 12);
  }
  *(_DWORD *)(v12 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v16;
  v19 = v11 + 864 * v10;
  v20 = a1 + 416;
  *(_QWORD *)(a1 + 400) = a1 + 416;
  *(_QWORD *)(a1 + 408) = 16;
  v21 = *(__int128 **)(v19 + 400);
  if (v21 == (__int128 *)(v19 + 416))
  {
    v23 = *(unsigned int *)(v11 + 864 * v10 + 412);
    if ((_DWORD)v23)
    {
      v24 = 24 * v23;
      do
      {
        v25 = *v21;
        *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v20 = v25;
        v20 += 24;
        v21 = (__int128 *)((char *)v21 + 24);
        v24 -= 24;
      }
      while (v24);
    }
  }
  else
  {
    *(_QWORD *)(v19 + 400) = v19 + 416;
    *(_QWORD *)(a1 + 400) = v21;
    v23 = v11 + 864 * v10;
    v22 = *(_DWORD *)(v23 + 408);
    *(_DWORD *)(v23 + 408) = 16;
    *(_DWORD *)(a1 + 408) = v22;
    LODWORD(v23) = *(_DWORD *)(v23 + 412);
  }
  v26 = v11 + 864 * v10;
  *(_DWORD *)(v26 + 412) = 0;
  *(_DWORD *)(a1 + 412) = v23;
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(v26 + 800);
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(v26 + 808);
  v27 = *(_QWORD *)(v26 + 824);
  *(_QWORD *)(v26 + 824) = 0;
  *(_QWORD *)(a1 + 824) = v27;
  LODWORD(v27) = *(_DWORD *)(v26 + 832);
  *(_DWORD *)(v26 + 832) = 0;
  *(_DWORD *)(a1 + 832) = v27;
  LODWORD(v27) = *(_DWORD *)(v26 + 836);
  *(_DWORD *)(v26 + 836) = 0;
  *(_DWORD *)(a1 + 836) = v27;
  v28 = *(_OWORD *)(v26 + 840);
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(v26 + 856);
  *(_OWORD *)(a1 + 840) = v28;
  v29 = a2[3];
  if (!(_DWORD)v29)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x198D1AB24);
  }
  v30 = v29 - 1;
  v31 = *(_QWORD *)a2;
  v32 = *(_QWORD *)a2 + 864 * (v29 - 1);
  v33 = *(_QWORD *)(v32 + 824);
  if (v33)
  {
    *(_QWORD *)(v32 + 824) = 0;
    *(_DWORD *)(v31 + 864 * v30 + 832) = 0;
    WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
  }
  v34 = v31 + 864 * v30;
  v35 = *(_QWORD *)(v34 + 400);
  if (v34 + 416 != v35 && v35 != 0)
  {
    *(_QWORD *)(v34 + 400) = 0;
    *(_DWORD *)(v31 + 864 * v30 + 408) = 0;
    WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
  }
  v37 = *(_QWORD *)v32;
  if (v32 + 16 != *(_QWORD *)v32 && v37 != 0)
  {
    *(_QWORD *)v32 = 0;
    *(_DWORD *)(v32 + 8) = 0;
    WTF::fastFree(v37, a2, a3, a4, a5, a6, a7, a8);
  }
  a2[3] = v30;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [34]>(void (***a1)(WTF::StringPrintStream *__hidden this))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::PrintStream *v11;
  float v12;
  double v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40 = off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  v44 = off_1E3572250;
  v45 = (WTF *)v47;
  v46 = xmmword_199122F80;
  v47[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "delegate target isn't a try block");
  v44[5]((WTF::StringPrintStream *)&v44);
  v9 = v45;
  if (!v45)
  {
    v38 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v38);
  v9 = v45;
  if (v45 != (WTF *)v47)
LABEL_5:
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  v10 = (WTF *)((uint64_t (*)(_QWORD))v40[4])(&v40);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v44, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v44);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v39, &v44);
  v13 = (*(double (**)(WTF *))(*(_QWORD *)v10 + 40))(v10);
  WTF::printInternal(v10, (WTF::PrintStream *)&v38, v14, v15, v16, v17, v18, v19, v13, v20);
  v40[5]((WTF::StringPrintStream *)&v40);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v41;
  if (v41)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v44);
    v29 = v41;
    *a1 = v44;
    if (v29 == (WTF *)v43)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::unify(uint64_t a1, uint64_t a2, JSC::Wasm::FunctionSignature *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  double v24;
  float v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42[3];
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  __int128 v48;
  void (**v49)(WTF::StringPrintStream *__hidden);
  const char *v50;
  WTF *v51;
  __int128 v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v11 = *((_DWORD *)a3 + 3);
  if (*(_DWORD *)(a2 + 68) != v11)
  {
    *(_QWORD *)&v48 = " block with type: ";
    *((_QWORD *)&v48 + 1) = 19;
    v50 = (const char *)off_1E3572250;
    v51 = (WTF *)v53;
    v52 = xmmword_199122F80;
    v53[0] = 0;
    JSC::Wasm::FunctionSignature::dump(a3, (WTF::PrintStream *)&v50);
    (*((void (**)(const char **))v50 + 5))(&v50);
    v23 = v51;
    if (v51)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v51, v52, (uint64_t *)&v47);
      v23 = v51;
      if (v51 == (WTF *)v53)
      {
LABEL_14:
        v50 = " returns: ";
        v51 = (WTF *)11;
        v46 = *((_DWORD *)a3 + 3);
        v44 = " but stack has: ";
        v45 = 17;
        v43 = *(unsigned int *)(a2 + 68);
        *(_QWORD *)&v42[0] = " values";
        *(_QWORD *)&v42[1] = 8;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(&v49, (uint64_t)&v48, (WTF::PrintStream *)&v47, (uint64_t)&v50, &v46, (uint64_t)&v44, &v43, (uint64_t)v42, v24, v25);
        *(_QWORD *)a1 = v49;
        *(_BYTE *)(a1 + 8) = 1;
        v33 = v47;
        v47 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
          {
            WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
            WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
          }
          else
          {
            *(_DWORD *)v33 -= 2;
          }
        }
        return;
      }
    }
    else
    {
      v47 = 0;
    }
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    goto LABEL_14;
  }
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while ((JSC::Wasm::isSubtype(*(_QWORD *)(*(_QWORD *)(a2 + 56) + v12), *(_QWORD *)(*(_QWORD *)(a2 + 56) + v12 + 8), *(_QWORD *)(*(_QWORD *)a3 + v13), *(_QWORD *)(*(_QWORD *)a3 + v13 + 8), a5, a6, a7, a8) & 1) != 0)
    {
      ++v14;
      v13 += 16;
      v12 += 24;
      if (v14 >= *((unsigned int *)a3 + 3))
        goto LABEL_6;
    }
    v50 = "control flow returns with unexpected type. ";
    v51 = (WTF *)44;
    v48 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + v12);
    v44 = " is not a ";
    v45 = 11;
    *(_OWORD *)v42 = *(_OWORD *)(*(_QWORD *)a3 + v13);
    JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v49, a2, (uint64_t)&v50, (JSC::Wasm::Type *)&v48, (uint64_t)&v44, (JSC::Wasm::Type *)v42, v42[0], v15);
    *(_QWORD *)a1 = v49;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
LABEL_6:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseBlockSignatureAndNotifySIMDUseIfNeeded(uint64_t a1, unint64_t *a2, unsigned __int8 ***a3, double a4, float a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned __int8 **v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  int v24;
  unint64_t v25;
  _BOOL4 v26;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  JSC::Wasm::TypeDefinition *v42;
  char *String;
  uint64_t v44;
  float v45;
  char *v46;
  unint64_t *v47;
  uint64_t v48;
  unsigned int *v49;
  WTF *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t CachedUnrolling;
  uint64_t v59;
  uint64_t v60;
  const JSC::Wasm::Type *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  const JSC::Wasm::TypeDefinition *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;

  v8 = a2[1822];
  v9 = *a2;
  v10 = a2[2];
  if (*a2 >= v10 || (v11 = *(char *)(a2[1] + v9), (v11 & 0x80000000) != 0))
  {
LABEL_34:
    v28 = v10 > v9;
    v29 = v10 - v9;
    if (!v28)
      goto LABEL_60;
    v30 = 0;
    v31 = 0;
    v32 = a2[1];
    v33 = 10;
    if (v29 < 0xA)
      v33 = v29;
    v34 = v33 - 1;
    *a2 = v9 + 1;
    v35 = v32 + v9;
    v36 = v9 + 2;
    v37 = 7;
    while (1)
    {
      v38 = *(unsigned __int8 *)(v35 + v30);
      v31 |= (unint64_t)(v38 & 0x7F) << (v37 - 7);
      if ((v38 & 0x80) == 0)
        break;
      if (v34 == v30)
        goto LABEL_60;
      v38 = v36 + v30;
      *a2 = v36 + v30;
      v37 += 7;
      if (v29 == ++v30)
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v30 == 9)
    {
      if ((v38 & 0x40) == 0)
      {
        if (v38)
          goto LABEL_60;
LABEL_47:
        if ((v31 & 0x8000000000000000) == 0)
        {
          v40 = *(unsigned int *)(v8 + 100);
          if (v31 >= v40)
          {
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned int>("Block-like instruction signature index is out of bounds. Index: ", a2, 65, v31, " type index space: ", 20, v40, &v72, a5);
            goto LABEL_27;
          }
          v41 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 8 * v31);
          if (*(_DWORD *)(v41 + 32) == 4)
          {
            v49 = *(unsigned int **)(v41 + 8);
            v50 = *(WTF **)v49;
            v42 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v49 + 8) + 8 * v49[2]);
            if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v42))
            {
              CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v41, v51, v52, v53, v54, v55, v56, v57);
              if (v65)
              {
                v42 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
              }
              else
              {
                v42 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v42, v50, v59, v60, v61, v62, v63, v64);
                JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v41, v42, v66, v67, v68, v69, v70, v71);
              }
            }
          }
          else
          {
            v42 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v8 + 88) + 8 * v31);
          }
          v17 = *((_DWORD *)v42 + 8);
          if (v17 == 5)
          {
            v42 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v42 + 1);
            v17 = *((_DWORD *)v42 + 8);
            if (!v17)
              goto LABEL_53;
          }
          else if (!v17)
          {
LABEL_53:
            *a3 = (unsigned __int8 **)((char *)v42 + 8);
            goto LABEL_8;
          }
          v46 = "Block-like instruction signature index does not refer to a function type definition";
          v47 = a2;
          v48 = 84;
          goto LABEL_57;
        }
LABEL_56:
        v46 = "Block-like instruction signature index is negative";
        v47 = a2;
        v48 = 51;
LABEL_57:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v46, v47, v48, &v72, a5);
        goto LABEL_27;
      }
      if (v38 != 127)
      {
LABEL_60:
        v46 = "Block-like instruction doesn't return value type but can't decode type section index";
        v47 = a2;
        v48 = 85;
        goto LABEL_57;
      }
    }
    v39 = (v38 >> 6) & 1;
    if (v37 >= 0x40)
      LOBYTE(v39) = 0;
    if ((v39 & 1) != 0)
      goto LABEL_56;
    goto LABEL_47;
  }
  v12 = v11 | (v11 >> 6 << 7);
  v13 = (char)(v11 | ((v11 >> 6) << 7));
  if ((JSC::Wasm::isValidTypeKind<signed char>(v13) & 1) == 0)
  {
    v10 = a2[2];
    v9 = *a2;
    goto LABEL_34;
  }
  if (!BYTE1(dword_1ECF4C7B0))
  {
LABEL_5:
    v14 = v12 - 192;
    if (v14 <= 0x3F)
    {
      if (((1 << (v12 + 64)) & 0xF000000000000001) != 0)
      {
LABEL_7:
        v15 = a2[3];
        v16 = JSC::Wasm::linearizeType(v13);
        v17 = 0;
        *a3 = *(unsigned __int8 ***)(v15 + 8 * v16 + 32);
        ++*a2;
LABEL_8:
        LOBYTE(v72) = 0;
        v73 = 0;
        goto LABEL_9;
      }
      if (((1 << (v12 + 64)) & 0x1800000000000) != 0)
      {
        if (!BYTE1(dword_1ECF4C7B0))
          goto LABEL_7;
      }
      else if (v14 == 59 && HIBYTE(dword_1ECF4C7B0))
      {
        goto LABEL_7;
      }
    }
    String = (char *)JSC::Wasm::makeString(v13);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>("result type of block: ", a2, 23, String, v44, " is not a value type or Void", 29, &v72, v45);
LABEL_27:
    *(_QWORD *)a1 = v72;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v25 = (char)v12 + 22;
  if (v25 <= 9)
  {
    if (((1 << v25) & 0x39F) == 0)
      goto LABEL_25;
    v26 = BYTE2(dword_1ECF4C7B0) != 0;
  }
  else
  {
    v26 = 0;
  }
  if ((v12 + 29) >= 2u && !v26)
    goto LABEL_5;
LABEL_25:
  JSC::Wasm::ParserBase::parseReftypeSignature((uint64_t)a2, v8, a3, (uint64_t)&v72, a5);
  v17 = v73 != 0;
  if (v73)
  {
LABEL_26:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    if (!v17)
      return;
    goto LABEL_27;
  }
LABEL_9:
  v18 = *a3;
  if (!*a3)
    goto LABEL_26;
  v19 = a2[6];
  if (!*(_BYTE *)(v19 + 57))
  {
    v20 = *((unsigned int *)v18 + 3);
    if ((_DWORD)v20)
    {
      v21 = (uint64_t)*v18;
      if (**v18 == 251)
      {
LABEL_18:
        *(_BYTE *)(v19 + 57) = 1;
      }
      else
      {
        v22 = 0;
        v23 = (unsigned __int8 *)(v21 + 16);
        while (v20 - 1 != v22)
        {
          v24 = *v23;
          v23 += 16;
          ++v22;
          if (v24 == 251)
          {
            if (v22 >= v20)
              break;
            goto LABEL_18;
          }
        }
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseIndexForLocal(uint64_t a1, uint64_t a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a2;
  v8 = v6 - *(_QWORD *)a2;
  if (v6 <= *(_QWORD *)a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *(_QWORD *)a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *(_QWORD *)a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get index for local", (unint64_t *)a2, 26, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(unsigned int *)(a2 + 14308);
  if (v18 <= v11)
  {
    v22[0] = "attempt to use unknown local ";
    v22[1] = 30;
    v21[0] = ", the number of locals is ";
    v21[1] = 27;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::pushLocalInitialized(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v11 = a2;
  if (BYTE1(dword_1ECF4C7B0))
  {
    v2 = result;
    if (*(_DWORD *)(result + 14308) <= a2)
    {
      __break(0xC471u);
    }
    else if (*(unsigned __int8 *)(*(_QWORD *)(result + 14296) + 16 * a2) == 228)
    {
      v3 = *(_QWORD *)(result + 14600);
      v4 = 2 * v3;
      v5 = v3 >= 0 ? 2 * v3 + 8 : result + 14600;
      v6 = (unint64_t)a2 >> 6;
      v7 = 1 << a2;
      if ((*(_QWORD *)(v5 + 8 * v6) & (1 << a2)) == 0)
      {
        result += 14584;
        v8 = *(unsigned int *)(v2 + 14596);
        if ((_DWORD)v8 == *(_DWORD *)(v2 + 14592))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v8 + 1, (unint64_t)&v11);
          *(_DWORD *)(*(_QWORD *)(v2 + 14584) + 4 * *(unsigned int *)(v2 + 14596)) = *(_DWORD *)result;
          v3 = *(_QWORD *)(v2 + 14600);
          v4 = 2 * v3;
          v6 = (unint64_t)v11 >> 6;
          v7 = 1 << v11;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)result + 4 * v8) = a2;
        }
        ++*(_DWORD *)(v2 + 14596);
        v9 = v4 + 8;
        if (v3 >= 0)
          v10 = v9;
        else
          v10 = v2 + 14600;
        *(_QWORD *)(v10 + 8 * v6) |= v7;
      }
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseIndexForGlobal(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  uint64_t v20;
  _QWORD v21[2];
  void (**v22)(WTF::StringPrintStream *__hidden);
  unsigned int v23;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v23 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get global's index", a2, 25, v21, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v21[0];
    goto LABEL_14;
  }
  v18 = *(unsigned int *)(a2[1822] + 220);
  if (v18 <= v11)
  {
    v21[0] = " of unknown global, limit is ";
    v21[1] = 30;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral,unsigned long>(&v22, &v23, (uint64_t)v21, &v20);
    v19 = v22;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseFunctionIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 > *a2;
  v9 = v6 - *a2;
  if (!v8)
    goto LABEL_17;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a2[1];
  v14 = 5;
  if (v9 < 5)
    v14 = v9;
  v15 = v14 - 1;
  *a2 = v7 + 1;
  v16 = v13 + v7;
  v17 = v7 + 2;
  while (1)
  {
    v18 = *(char *)(v16 + v10);
    v12 |= (v18 & 0x7F) << v11;
    if ((v18 & 0x80000000) == 0)
      break;
    if (v15 == v10)
      goto LABEL_17;
    LOBYTE(v18) = v17 + v10;
    *a2 = v17 + v10;
    v11 += 7;
    if (v9 == ++v10)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v10 == 4 && v18 >= 0x10u)
  {
LABEL_17:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse function index", a2, 27, &v20, a5);
    goto LABEL_15;
  }
  v19 = *(unsigned int *)(a2[1822] + 52) + (unint64_t)*(unsigned int *)(a2[1822] + 36);
  if (v19 <= v12)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("function index ", a2, 16, v12, " exceeds function index space ", 31, v19, &v20, a5);
LABEL_15:
    *(_QWORD *)a1 = v20;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v12;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseElementIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse element index", a2, 26, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[1822] + 188);
  if (v11 >= v18)
  {
    v22[0] = "element index ";
    v22[1] = 15;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseTableIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse table index", a2, 24, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[1822] + 204);
  if (v11 >= v18)
  {
    v22[0] = "table index ";
    v22[1] = 13;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseTableCopyImmediates(_BYTE *a1, unint64_t *a2, _DWORD *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  void (**v30)(WTF::StringPrintStream *__hidden);
  unint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  unsigned int v41;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 > *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a2[1];
    v13 = 5;
    if (v8 < 5)
      v13 = v6 - *a2;
    v14 = v13 - 1;
    *a2 = v7 + 1;
    while (1)
    {
      v15 = *(char *)(v12 + v7 + v9);
      LODWORD(v16) = (v15 & 0x7F) << v10;
      v11 |= v16;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v14 == v9)
        goto LABEL_27;
      v17 = v7 + v9 + 2;
      *a2 = v17;
      ++v9;
      v10 += 7;
      if (v8 == v9)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    v41 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v10 = *(_DWORD *)(a2[1822] + 204);
      if (v11 >= v10)
      {
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v35 = v10;
        v28 = &v41;
        v29 = &v35;
      }
      else
      {
        if (v6 <= v7 + v9 + 1)
          goto LABEL_29;
        v17 = 0;
        v18 = 0;
        LODWORD(v14) = 0;
        v19 = ~v9 + v8;
        v20 = 5;
        if (v19 < 5)
          v20 = v19;
        v21 = v7 + v9;
        *a2 = v7 + v9 + 2;
        v22 = v7 - v6;
        v23 = v12 + v7;
        v24 = v20 - 1;
        v25 = v22 + v9;
        while (1)
        {
          LODWORD(v16) = *(char *)(v23 + v17 + v9 + 1);
          LODWORD(v14) = ((v16 & 0x7F) << v18) | v14;
          if ((v16 & 0x80000000) == 0)
            break;
          if (v24 == v17)
            goto LABEL_29;
          v26 = v21 + v17;
          v27 = v25 + v17++;
          v16 = v26 + 3;
          *a2 = v16;
          v18 += 7;
          if (v27 == -2)
            goto LABEL_18;
        }
LABEL_19:
        v35 = v14;
        if ((_DWORD)v17 == 4 && v16 >= 0x10u)
        {
LABEL_29:
          v31 = a2;
          v32 = "can't parse source table index";
          v33 = 31;
          goto LABEL_30;
        }
        if (v14 < v10)
        {
          *a3 = v14;
          a3[1] = v11;
          *a1 = 0;
          a1[8] = 0;
          return;
        }
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v34 = v10;
        v28 = &v35;
        v29 = &v34;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v40, (uint64_t)&v38, v28, (uint64_t)&v36, v29, a4, a5);
      v30 = v40;
      goto LABEL_25;
    }
  }
LABEL_27:
  v31 = a2;
  v32 = "can't parse destination table index";
  v33 = 36;
LABEL_30:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v31, v33, &v38, a5);
  v30 = (void (**)(WTF::StringPrintStream *__hidden))v38;
LABEL_25:
  *(_QWORD *)a1 = v30;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseMemoryInitImmediates(uint64_t a1, unint64_t *a2, _QWORD *a3, double a4, float a5)
{
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  char *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;

  v26 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseDataSegmentIndex(&v24, a2, &v26, a4, a5);
  if (v25)
    goto LABEL_16;
  v9 = a2[2];
  v10 = *a2;
  v11 = v9 - *a2;
  if (v9 <= *a2)
    goto LABEL_18;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a2[1];
  v16 = 5;
  if (v11 < 5)
    v16 = v11;
  v17 = v16 - 1;
  *a2 = v10 + 1;
  v18 = v15 + v10;
  v19 = v10 + 2;
  while (1)
  {
    v20 = *(char *)(v18 + v12);
    v14 |= (v20 & 0x7F) << v13;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v17 == v12)
      goto LABEL_18;
    LOBYTE(v20) = v19 + v12;
    *a2 = v19 + v12;
    v13 += 7;
    if (v11 == ++v12)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v12 == 4 && v20 >= 0x10u)
  {
LABEL_18:
    v21 = "can't parse unused";
    v22 = a2;
    v23 = 19;
    goto LABEL_15;
  }
  if (v14)
  {
    v21 = "memory.init invalid unsued byte";
    v22 = a2;
    v23 = 32;
LABEL_15:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v21, v22, v23, &v24, v8);
LABEL_16:
    *(_QWORD *)a1 = v24;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v26;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseDataSegmentIndex(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  void (**v20)(WTF::StringPrintStream *__hidden);
  unsigned int v21;
  _QWORD v22[2];
  _QWORD v23[2];
  void (**v24)(WTF::StringPrintStream *__hidden);
  unsigned int v25;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_18;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_18;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v25 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_18:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse data segment index", a2, 31, v23, a5);
    v20 = (void (**)(WTF::StringPrintStream *__hidden))v23[0];
  }
  else
  {
    v18 = a2[1822];
    if (*(_BYTE *)(v18 + 268))
    {
      v19 = *(_DWORD *)(v18 + 264);
      if (v11 < v19)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
    }
    else
    {
      v19 = 0;
    }
    v23[0] = "data segment index ";
    v23[1] = 20;
    v22[0] = " is invalid, limit is ";
    v22[1] = 23;
    v21 = v19;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v24, (uint64_t)v23, &v25, (uint64_t)v22, &v21, a4, a5);
    v20 = v24;
  }
  *(_QWORD *)a1 = v20;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseAnnotatedSelectImmediates(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  WTF *v49;
  WTF *v50;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a2;
  v9 = v7 - *(_QWORD *)a2;
  if (v7 <= *(_QWORD *)a2)
    goto LABEL_73;
  v11 = 0;
  v12 = 0;
  LODWORD(v13) = 0;
  v14 = *(_QWORD *)(a2 + 8);
  if (v9 >= 5)
    v9 = 5;
  v15 = v9 - 1;
  *(_QWORD *)a2 = v8 + 1;
  while (1)
  {
    LODWORD(v16) = *(char *)(v14 + v8 + v11);
    LODWORD(v13) = ((v16 & 0x7F) << v12) | v13;
    if ((v16 & 0x80000000) == 0)
      break;
    if (v15 == v11)
      goto LABEL_73;
    v16 = v8 + v11 + 2;
    *(_QWORD *)a2 = v16;
    ++v11;
    v12 += 7;
    if (!(v8 - v7 + v11))
    {
LABEL_8:
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v11 == 4 && v16 >= 0x10u)
  {
LABEL_73:
    v28 = "select can't parse the size of annotation vector";
    v29 = (unint64_t *)a2;
    v30 = 49;
    goto LABEL_24;
  }
  if ((_DWORD)v13 != 1)
  {
    v28 = "select invalid result arity for";
    v29 = (unint64_t *)a2;
    v30 = 32;
    goto LABEL_24;
  }
  if (v8 + v11 + 1 >= v7)
    goto LABEL_23;
  v17 = *(_QWORD *)(a2 + 14576);
  v18 = (char *)(v8 + v11);
  *(_QWORD *)a2 = v18 + 2;
  v19 = v18[v14 + 1];
  if ((v19 & 0x80000000) != 0)
    goto LABEL_23;
  v20 = v19 | (v19 >> 6 << 7);
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v19 | ((v19 >> 6) << 7))))
    goto LABEL_23;
  if (!BYTE1(dword_1ECF4C7B0))
  {
    if ((v20 + 29) < 2u)
      goto LABEL_23;
    goto LABEL_17;
  }
  v8 = (char)v20;
  v26 = (char)v20 + 22;
  if (v26 <= 9 && (((1 << v26) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
  {
    v27 = 227;
LABEL_28:
    if (BYTE1(dword_1ECF4C7B0))
      v31 = v8 == 0;
    else
      v31 = 1;
    if (!v31)
      goto LABEL_19;
    goto LABEL_23;
  }
  if ((v20 + 29) < 2u)
  {
    v32 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)a2;
    v7 = v32 - *(_QWORD *)a2;
    if (v32 <= *(_QWORD *)a2)
      goto LABEL_23;
    v11 = 0;
    LODWORD(v8) = 0;
    v33 = *(_QWORD *)(a2 + 8);
    v34 = 5;
    if (v7 < 5)
      v34 = v7;
    v13 = v34 - 1;
    *(_QWORD *)a2 = v14 + 1;
    v35 = v33 + v14;
    v36 = v14 + 2;
    LODWORD(v14) = 7;
    while (1)
    {
      v37 = *(char *)(v35 + v11);
      LOBYTE(v16) = v37 & 0x7F;
      v8 = ((v37 & 0x7F) << (v14 - 7)) | v8;
      if ((v37 & 0x80000000) == 0)
        break;
      if (v13 == v11)
        goto LABEL_23;
      *(_QWORD *)a2 = v36 + v11;
      v14 = (v14 + 7);
      if (v7 == ++v11)
        goto LABEL_8;
    }
    if ((_DWORD)v11 == 4)
    {
      if ((v37 & 0x40) == 0)
      {
        if (*(unsigned __int8 *)(v35 + v11) > 7u)
          goto LABEL_23;
        goto LABEL_45;
      }
      if ((v37 & 0xF8) != 0x78)
        goto LABEL_23;
    }
    if (v14 <= 0x1F && (v37 & 0x40) != 0)
    {
      LODWORD(v8) = v8 | (-1 << v14);
      goto LABEL_66;
    }
LABEL_45:
    if ((v8 & 0x80000000) == 0)
    {
      if (v8 >= *(_DWORD *)(v17 + 100))
      {
        if (!*(_BYTE *)(a2 + 32))
          goto LABEL_23;
        v38 = *(_DWORD *)(a2 + 36);
        if (v8 < v38 || v8 >= *(_DWORD *)(a2 + 40))
          goto LABEL_23;
      }
      else if (!*(_BYTE *)(a2 + 32) || (v38 = *(_DWORD *)(a2 + 36), v8 < v38))
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 8 * v8);
        goto LABEL_18;
      }
      JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v8 - v38), v21, v22, v23, v24, v25, (unsigned int **)&v50);
      v8 = (int64_t)v50;
      v50 = 0;
      if (v8)
      {
        do
        {
          v46 = __ldaxr((unsigned int *)v8);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, (unsigned int *)v8));
        if (!v47)
        {
          atomic_store(1u, (unsigned int *)v8);
          v49 = (WTF *)v8;
          WTF::fastFree(v8, v39, v40, v41, v42, v43, v44, v45);
          v8 = (int64_t)v49;
        }
      }
      goto LABEL_18;
    }
LABEL_66:
    v8 = (int)v8;
    v48 = (int)v8 + 22;
    if (v48 > 9 || ((1 << v48) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
      goto LABEL_23;
    goto LABEL_18;
  }
LABEL_17:
  v8 = 0;
LABEL_18:
  v27 = v20;
  if (v20 - 252 < 4)
  {
LABEL_19:
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v27;
    *(_QWORD *)(a3 + 16) = v8;
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  if (v20 - 239 < 2)
  {
    if (!BYTE1(dword_1ECF4C7B0))
      goto LABEL_19;
  }
  else if (v20 == 251)
  {
    if (HIBYTE(dword_1ECF4C7B0))
    {
      v27 = 251;
      goto LABEL_19;
    }
  }
  else if (v20 - 227 < 2)
  {
    goto LABEL_28;
  }
LABEL_23:
  v28 = "select can't parse annotations";
  v29 = (unint64_t *)a2;
  v30 = 31;
LABEL_24:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v28, v29, v30, &v50, a5);
  *(_QWORD *)a1 = v50;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseStructTypeIndex(_BYTE *a1, unint64_t *a2, _DWORD *a3, char *a4, uint64_t a5, double a6, float a7)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  JSC::Wasm::TypeDefinition *v21;
  int v22;
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int *v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 hasRecursiveReference;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t CachedUnrolling;
  uint64_t v36;
  uint64_t v37;
  const JSC::Wasm::Type *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  const JSC::Wasm::TypeDefinition *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::Wasm::TypeInformation *v49;
  void (**v50[2])(WTF::StringPrintStream *__hidden);
  const char *v51;
  uint64_t v52;
  void (**v53)(WTF::StringPrintStream *__hidden);
  unsigned int v54;
  _QWORD v55[2];

  v55[0] = a4;
  v55[1] = a5;
  v8 = a2[2];
  v9 = *a2;
  v10 = v8 - *a2;
  if (v8 <= *a2)
    goto LABEL_25;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a2[1];
  v15 = 5;
  if (v10 < 5)
    v15 = v10;
  v16 = v15 - 1;
  *a2 = v9 + 1;
  v17 = v14 + v9;
  v18 = v9 + 2;
  while (1)
  {
    v19 = *(char *)(v17 + v11);
    v13 |= (v19 & 0x7F) << v12;
    if ((v19 & 0x80000000) == 0)
      break;
    if (v16 == v11)
      goto LABEL_25;
    LOBYTE(v19) = v18 + v11;
    *a2 = v18 + v11;
    v12 += 7;
    if (v10 == ++v11)
    {
      __break(1u);
      break;
    }
  }
  v54 = v13;
  if ((_DWORD)v11 == 4 && v19 >= 0x10u)
  {
LABEL_25:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v51, a7);
    v23 = (void (**)(WTF::StringPrintStream *__hidden))v51;
  }
  else
  {
    v20 = a2[1822];
    if (v13 >= *(_DWORD *)(v20 + 100))
    {
      v51 = " index ";
      v52 = 8;
      v50[0] = (void (**)(WTF::StringPrintStream *__hidden))" is out of bound";
      v50[1] = (void (**)(WTF::StringPrintStream *__hidden))17;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v53, (uint64_t)v55, (uint64_t)&v51, &v54, (uint64_t)v50, a6, a7);
      v23 = v53;
    }
    else
    {
      v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v20 + 88) + 8 * v13);
      if (*((_DWORD *)v21 + 8) == 4)
      {
        v49 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v20 + 88) + 8 * v13);
        v24 = (unsigned int *)*((_QWORD *)v21 + 1);
        v25 = *(WTF **)v24;
        v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v24 + 8) + 8 * v24[2]);
        v26 = (uint64_t)a3;
        v27 = v13;
        hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v21);
        v13 = v27;
        a3 = (_DWORD *)v26;
        if (hasRecursiveReference)
        {
          CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v49, v29, v26, v30, v31, v32, v33, v34);
          if (v42)
          {
            v21 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
          }
          else
          {
            v21 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v21, v25, v36, v37, v38, v39, v40, v41);
            JSC::Wasm::TypeInformation::addCachedUnrolling(v49, v21, v43, v44, v45, v46, v47, v48);
          }
          a3 = (_DWORD *)v26;
          v13 = v27;
        }
      }
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 5)
        v22 = *(_DWORD *)(**((_QWORD **)v21 + 1) + 32);
      if (v22 == 1)
      {
        *a3 = v13;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v51 = ": invalid type index ";
      v52 = 22;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int>(v50, (uint64_t)v55, (uint64_t)&v51, &v54, a6, a7);
      v23 = v50[0];
    }
  }
  *(_QWORD *)a1 = v23;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseStructTypeIndexAndFieldIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, char *a4, uint64_t a5, double a6, float a7)
{
  float v12;
  unint64_t v13;
  unsigned int v14;
  JSC::Wasm::TypeDefinition *v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  WTF *v32;
  unsigned int v33;
  _BOOL4 hasRecursiveReference;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t CachedUnrolling;
  uint64_t v43;
  uint64_t v44;
  const JSC::Wasm::Type *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  const JSC::Wasm::TypeDefinition *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::Wasm::TypeInformation *v56;
  uint64_t v57;
  char v58;
  unsigned int v59;

  v59 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseStructTypeIndex(&v57, a2, &v59, a4, a5, a6, a7);
  if (v58)
  {
LABEL_22:
    *(_QWORD *)a1 = v57;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v13 = a2[1822];
  v14 = v59;
  if (*(_DWORD *)(v13 + 100) > v59)
  {
    v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v13 + 88) + 8 * v59);
    if (*((_DWORD *)v15 + 8) == 4)
    {
      v56 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v13 + 88) + 8 * v59);
      v31 = (unsigned int *)*((_QWORD *)v15 + 1);
      v32 = *(WTF **)v31;
      v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v31 + 8) + 8 * v31[2]);
      v33 = v59;
      hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v15);
      v14 = v33;
      if (hasRecursiveReference)
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v56, v35, v36, v37, v38, v39, v40, v41);
        if (v49)
        {
          v15 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v15 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v15, v32, v43, v44, v45, v46, v47, v48);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v56, v15, v50, v51, v52, v53, v54, v55);
        }
        v14 = v33;
      }
    }
    v16 = *((_DWORD *)v15 + 8);
    if (v16 == 5)
    {
      v15 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v15 + 1);
      v16 = *((_DWORD *)v15 + 8);
    }
    if (v16 == 1)
      v17 = (char *)v15 + 8;
    else
      v17 = 0;
    v18 = a2[2];
    v19 = *a2;
    v20 = v18 > *a2;
    v21 = v18 - *a2;
    if (!v20)
      goto LABEL_29;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = a2[1];
    v26 = 5;
    if (v21 < 5)
      v26 = v21;
    v27 = v26 - 1;
    *a2 = v19 + 1;
    v28 = v25 + v19;
    v29 = v19 + 2;
    while (1)
    {
      v30 = *(char *)(v28 + v22);
      v24 |= (v30 & 0x7F) << v23;
      if ((v30 & 0x80000000) == 0)
        break;
      if (v27 == v22)
        goto LABEL_29;
      LOBYTE(v30) = v29 + v22;
      *a2 = v29 + v22;
      v23 += 7;
      if (v21 == ++v22)
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v22 != 4 || v30 < 0x10u)
    {
      if (v24 < *((_DWORD *)v17 + 2))
      {
        *a3 = v14;
        a3[1] = v24;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      }
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(a4, a2, a5, " field immediate ", 18, v24, " is out of bounds", 18, &v57, v12);
    }
    else
    {
LABEL_29:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v57, v12);
    }
    goto LABEL_22;
  }
  __break(0xC471u);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<false,void>(_BYTE *a1, unint64_t *a2, int a3, int a4, double a5, double a6, double a7, uint8x8_t a8)
{
  unsigned __int8 v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  unint64_t v24;
  __int8 v25;
  __int8 v26;
  __int8 v27;
  __int8 v28;
  uint8x16_t v29;
  uint8x8_t v30;
  unint64_t v31;
  int8x8_t v32;
  uint32x2_t v33;
  __int8 v34;
  uint8x8_t v35;
  uint16x4_t v36;
  unint64_t v37;
  int8x8_t v38;
  uint32x2_t v39;
  __int8 v40;
  uint8x8_t v41;
  uint16x4_t v42;
  __int8 v43;
  __int8 v44;
  __int8 v45;
  __int8 v46;
  uint8x8_t v47;
  __int8 v48;
  uint8x16_t v49;
  uint64_t v50;
  char v51;
  int v52;

  *(_BYTE *)(a2[6] + 57) = 1;
  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 38:
    case 39:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 49:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 62:
    case 63:
    case 67:
    case 68:
    case 69:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
      goto LABEL_2;
    case 2:
    case 16:
    case 46:
    case 71:
      if (a3 > 45)
      {
        if (a3 == 46)
        {
          v12 = 4;
        }
        else
        {
          if (a3 != 71)
          {
LABEL_69:
            __break(0xC471u);
            JUMPOUT(0x198D1CE8CLL);
          }
          v12 = 2;
        }
      }
      else if (a3 == 2)
      {
        v12 = 8;
      }
      else
      {
        v12 = a3;
        if (a3 != 16)
          goto LABEL_69;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v50, a3, a2, &v52, a5, *(float *)&a6);
      if (v51)
        goto LABEL_31;
      v20 = (v12 - 2) >> 1;
      if (v20 > 7 || ((1 << v20) & 0x8B) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198D1CEACLL);
      }
      goto LABEL_45;
    case 7:
      v10 = 7;
      goto LABEL_5;
    case 8:
    case 25:
    case 29:
    case 48:
      if (a3 > 28)
      {
        if (a3 == 29)
        {
          v12 = 2;
        }
        else
        {
          if (a3 != 48)
            goto LABEL_68;
          v12 = 8;
        }
      }
      else
      {
        if (a3 != 8)
        {
          if (a3 == 25)
          {
            v12 = 4;
            goto LABEL_37;
          }
LABEL_68:
          __break(0xC471u);
          JUMPOUT(0x198D1CE6CLL);
        }
        v12 = 16;
      }
LABEL_37:
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v50, a3, a2, &v52, a5, *(float *)&a6);
      if (!v51)
      {
        v19 = (v12 - 2) >> 1;
        if (v19 > 7 || ((1 << v19) & 0x8B) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198D1CA60);
        }
LABEL_45:
        v21 = *a2;
        if (*a2 >= a2[2])
        {
LABEL_67:
          v14 = "Could not parse the lane index immediate byte.";
          v15 = a2;
          v16 = 47;
LABEL_30:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v14, v15, v16, &v50, *(float *)&a6);
        }
        else
        {
          *a2 = v21 + 1;
          if (*(unsigned __int8 *)(a2[1] + v21) < v12)
          {
LABEL_2:
            *a1 = 0;
            a1[8] = 0;
            return;
          }
          v22 = a2;
          v23 = v12;
          v17 = v12;
LABEL_58:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", v22, 40, v23, ", expected an ImmLaneIdx", 25, v17, &v50, *(float *)&a6);
        }
      }
LABEL_31:
      *(_QWORD *)a1 = v50;
      v11 = 1;
LABEL_7:
      a1[8] = v11;
      return;
    case 13:
    case 14:
    case 27:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 50:
    case 56:
    case 61:
    case 64:
    case 70:
      v10 = a3;
LABEL_5:
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v50, v10, a2, &v52, a5, *(float *)&a6);
      v11 = v51;
      if (v51)
        goto LABEL_31;
      *a1 = 0;
      goto LABEL_7;
    case 19:
      v13 = *a2 + 16;
      if (a2[2] < v13)
      {
        v14 = "can't parse 128-bit vector constant";
        v15 = a2;
        v16 = 36;
        goto LABEL_30;
      }
      *a2 = v13;
      goto LABEL_2;
    case 41:
      v18 = *a2 + 16;
      if (a2[2] < v18)
      {
        v14 = "can't parse 128-bit shuffle immediate";
        v15 = a2;
        v16 = 38;
        goto LABEL_30;
      }
      v24 = a2[1] + *a2;
      LODWORD(a5) = *(_DWORD *)v24;
      v25 = *(_BYTE *)(v24 + 4);
      LODWORD(a6) = *(_DWORD *)(v24 + 5);
      v26 = *(_BYTE *)(v24 + 9);
      v27 = *(_BYTE *)(v24 + 10);
      v28 = *(_BYTE *)(v24 + 11);
      a8.i32[0] = *(_DWORD *)(v24 + 12);
      *a2 = v18;
      v29.i64[0] = vmovl_u8(*(uint8x8_t *)&a5).u64[0];
      v30 = (uint8x8_t)vmovl_u8(*(uint8x8_t *)&a6).u64[0];
      v31 = vmovl_u8(a8).u64[0];
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198D1CF4CLL);
        case 1:
          v43 = v30.i8[6];
          v44 = v30.i8[4];
          v45 = v30.i8[2];
          v46 = v30.i8[0];
          v47.i8[0] = v29.i8[0];
          v47.i8[1] = v29.i8[4];
          v47.i8[2] = v29.i8[6];
          v47.i8[3] = v25;
          v47.i8[4] = v46;
          v47.i8[5] = v45;
          v47.i8[6] = v44;
          v47.i8[7] = v43;
          if ((vmaxv_u8(vcgt_u8(v47, (uint8x8_t)0x1F1F1F1F1F1F1F1FLL)) & 1) != 0
            || (v31 | v29.i8[2] | BYTE2(v31) | BYTE4(v31) | BYTE6(v31) | v28 | v26 | v27) >= 0x20u)
          {
            goto LABEL_66;
          }
          goto LABEL_2;
        case 2:
          v48 = v29.i8[0];
          v29.i8[0] = v29.i8[2];
          v29.i8[1] = v48;
          v29.i8[2] = v29.i8[4];
          v29.i8[3] = v29.i8[6];
          v29.i8[4] = v25;
          v29.i8[5] = v30.i8[0];
          v29.i8[6] = v30.i8[2];
          v29.i8[7] = v30.i8[4];
          v29.i8[8] = v30.i8[6];
          v29.i8[9] = v26;
          v29.i8[10] = v27;
          v29.i8[11] = v28;
          v29.i8[12] = v31;
          v29.i8[13] = BYTE2(v31);
          v29.i8[14] = BYTE4(v31);
          v29.i8[15] = BYTE6(v31);
          v49.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v49.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          if ((vmaxvq_u8(vcgtq_u8(v29, v49)) & 1) != 0)
            goto LABEL_66;
          goto LABEL_2;
        case 3:
        case 5:
          v32.i32[0] = v29.u16[1];
          v32.i32[1] = v29.u16[0];
          v33 = vcgt_u32((uint32x2_t)0x800000008, (uint32x2_t)vand_s8(v32, (int8x8_t)0xFF000000FFLL));
          v34 = v30.i8[0];
          v30.i8[0] = v25;
          v30.i8[1] = v34;
          v30.i8[3] = v30.i8[4];
          v30.i8[4] = v30.i8[6];
          v30.i8[5] = v26;
          v30.i8[6] = v27;
          v30.i8[7] = v28;
          v35 = vcgt_u8(v30, (uint8x8_t)0x707070707070707);
          v35.i8[0] = vmaxv_u8(v35);
          v36 = vcgt_u16((uint16x4_t)(v31 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x7000700070007);
          v36.i16[0] = vmaxv_u16(v36);
          if ((~v35.i32[0] & ~v36.i32[0] & v33.i32[0] & v33.i32[1] & 1) == 0
            || (v29.i8[4] | v29.i8[6]) >= 8u)
          {
            goto LABEL_66;
          }
          goto LABEL_2;
        case 4:
        case 6:
          v38.i32[0] = v29.u16[1];
          v38.i32[1] = v29.u16[0];
          v39 = vcgt_u32((uint32x2_t)0x400000004, (uint32x2_t)vand_s8(v38, (int8x8_t)0xFF000000FFLL));
          v40 = v30.i8[0];
          v30.i8[0] = v25;
          v30.i8[1] = v40;
          v30.i8[3] = v30.i8[4];
          v30.i8[4] = v30.i8[6];
          v30.i8[5] = v26;
          v30.i8[6] = v27;
          v30.i8[7] = v28;
          v41 = vcgt_u8(v30, (uint8x8_t)0x303030303030303);
          v41.i8[0] = vmaxv_u8(v41);
          v42 = vcgt_u16((uint16x4_t)(v31 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x3000300030003);
          v42.i16[0] = vmaxv_u16(v42);
          if ((~v41.i32[0] & ~v42.i32[0] & v39.i32[0] & v39.i32[1] & 1) != 0
            && (v29.i8[4] | v29.i8[6]) < 4u)
          {
            goto LABEL_2;
          }
LABEL_66:
          JSC::Wasm::ParserBase::fail<>(a2, &v50);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198D1CF2CLL);
      }
      goto LABEL_31;
    case 65:
      v17 = 16;
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198D1C944);
        case 1:
          goto LABEL_55;
        case 2:
          goto LABEL_54;
        case 3:
        case 5:
          goto LABEL_33;
        case 4:
        case 6:
          goto LABEL_48;
        default:
          __break(0xC471u);
          JUMPOUT(0x198D1CECCLL);
      }
    case 66:
      v17 = 16;
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198D1CF0CLL);
        case 1:
          break;
        case 2:
LABEL_54:
          v17 = 8;
          break;
        case 3:
        case 5:
LABEL_33:
          v17 = 4;
          break;
        case 4:
        case 6:
LABEL_48:
          v17 = 2;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198D1CEECLL);
      }
LABEL_55:
      v37 = *a2;
      if (*a2 >= a2[2])
        goto LABEL_67;
      *a2 = v37 + 1;
      if (*(unsigned __int8 *)(a2[1] + v37) < v17)
        goto LABEL_2;
      v22 = a2;
      v23 = v17;
      goto LABEL_58;
    default:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", a2, 17, a3, &v50, *(float *)&a6);
      *(_QWORD *)a1 = v50;
      a1[8] = 1;
      return;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, JSC::Wasm::Type *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  double v39;
  float v40;
  WTF *v41;
  WTF::PrintStream *v42;
  float v43;
  double v44;
  const WTF::String *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  const WTF::String *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  float v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  char v125;
  void (**v126)(WTF::StringPrintStream *__hidden);
  WTF *v127;
  __int128 v128;
  _BYTE v129[128];
  void (**v130)(WTF::StringPrintStream *__hidden);
  WTF *v131;
  __int128 v132;
  _BYTE v133[128];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v126 = off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v123, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v123 = (WTF::StringImpl *)v16;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v122, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v24 = v131;
  if (!v131)
  {
    v122 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v122);
  v24 = v131;
  if (v131 != (WTF *)v133)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v121, a2, a4, v25, v26);
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v123, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v123 = (WTF::StringImpl *)v30;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v120, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v38 = v131;
  if (!v131)
  {
    v123 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v123);
  v38 = v131;
  if (v131 != (WTF *)v133)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v120, a2, a6, v39, v40);
  v41 = (WTF *)((uint64_t (*)(_QWORD))v126[4])(&v126);
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v41 + 32))(v41);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v130, v43);
  WTF::printExpectedCStringHelper(v42, "StringView", &v130);
  if ((_DWORD)v131 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v131])(&v125, &v130);
  v44 = (*(double (**)(WTF *))(*(_QWORD *)v41 + 40))(v41);
  WTF::printInternal(v41, (WTF::PrintStream *)&v122, v45, v46, v47, v48, v49, v50, v44, v51);
  WTF::printInternal(v41, (WTF::PrintStream *)&v121, v52, v53, v54, v55, v56, v57, v58, v59);
  WTF::printInternal(v41, (WTF::PrintStream *)&v123, v60, v61, v62, v63, v64, v65, v66, v67);
  WTF::printInternal(v41, (WTF::PrintStream *)&v120, v68, v69, v70, v71, v72, v73, v74, v75);
  v126[5]((WTF::StringPrintStream *)&v126);
  v83 = v120;
  v120 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = v123;
  v123 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v127;
  if (v127)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v130);
    v87 = v127;
    *a1 = v130;
    if (v87 == (WTF *)v129)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v87, v76, v77, v78, v79, v80, v81, v82);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative(uint64_t *a1, uint64_t a2, JSC::Wasm::Type *this, double a4, float a5)
{
  char v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  unint64_t v22;
  const char *v23;
  WTF::PrintStream *v24;
  JSC::Wasm::TypeDefinition *v25;
  int v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::PrintStream *v36;
  uint64_t v37;
  WTF::PrintStream *v38;
  float v39;
  uint64_t v40;
  WTF::PrintStream *v41;
  float v42;
  unsigned int *v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t CachedUnrolling;
  uint64_t v53;
  uint64_t v54;
  const JSC::Wasm::Type *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  const JSC::Wasm::TypeDefinition *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  void (**v69)(WTF::StringPrintStream *__hidden);
  WTF *v70;
  __int128 v71;
  _BYTE v72[128];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (BYTE1(dword_1ECF4C7B0))
    v7 = 29;
  else
    v7 = 17;
  if (BYTE1(dword_1ECF4C7B0))
    v8 = (v7 + *(_BYTE *)this) > 1u;
  else
    v8 = 1;
  if (v8)
  {
    v69 = off_1E3572250;
    v70 = (WTF *)v72;
    v71 = xmmword_199122F80;
    v72[0] = 0;
    JSC::Wasm::Type::dump((uint64_t)this, (WTF::PrintStream *)&v69);
    v69[5]((WTF::StringPrintStream *)&v69);
    v16 = v70;
    if (v70)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
      v16 = v70;
      if (v70 == (WTF *)v72)
        return;
LABEL_45:
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
LABEL_44:
    *a1 = 0;
    goto LABEL_45;
  }
  v69 = off_1E3572250;
  v70 = (WTF *)v72;
  v71 = xmmword_199122F80;
  v72[0] = 0;
  WTF::StringImpl::utf8ForCharacters("(ref ", 5uLL, (uint64_t)&v66, a5);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v69, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  v69[5]((WTF::StringPrintStream *)&v69);
  v69[5]((WTF::StringPrintStream *)&v69);
  v18 = *(unsigned __int8 *)this;
  if ((v18 - 239) < 2 || v18 == 227)
  {
    v19 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    WTF::StringImpl::utf8ForCharacters("null ", 5uLL, (uint64_t)&v66, v21);
    WTF::printExpectedCStringHelper(v20, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v69[5]((WTF::StringPrintStream *)&v69);
  }
  v22 = *((_QWORD *)this + 1);
  if (v22 < 0xFFFFFFFFFFFFFFC1)
  {
    v25 = (JSC::Wasm::TypeDefinition *)v22;
    if (*(_DWORD *)(v22 + 32) == 4)
    {
      v43 = *(unsigned int **)(v22 + 8);
      v44 = *(WTF **)v43;
      v25 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v43 + 8) + 8 * v43[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v25))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v45, v46, v47, v48, v49, v50, v51);
        if (v59)
        {
          v25 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v25 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v25, v44, v53, v54, v55, v56, v57, v58);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v25, v60, v61, v62, v63, v64, v65);
        }
      }
    }
    v26 = *((_DWORD *)v25 + 8);
    if (v26 == 5)
      v26 = *(_DWORD *)(**((_QWORD **)v25 + 1) + 32);
    if (v26 == 2)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<array:";
      v31 = 7;
    }
    else if (v26)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<struct:";
      v31 = 8;
    }
    else
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<func:";
      v31 = 6;
    }
    WTF::StringImpl::utf8ForCharacters(v30, v31, (uint64_t)&v66, v29);
    WTF::printExpectedCStringHelper(v28, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v69[5]((WTF::StringPrintStream *)&v69);
    v32 = *(_QWORD *)(a2 + 14576);
    v33 = *(unsigned int *)(v32 + 100);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = *(_QWORD *)(v32 + 88);
      while (*(_QWORD *)(v35 + 8 * v34) != v22)
      {
        if (v33 == ++v34)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_35:
      v34 = -1;
    }
    v36 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v36, "%lu", v34);
    v69[5]((WTF::StringPrintStream *)&v69);
    v37 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
    WTF::StringImpl::utf8ForCharacters(">", 1uLL, (uint64_t)&v66, v39);
    WTF::printExpectedCStringHelper(v38, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
  }
  else
  {
    if ((v22 + 22) >= 0xAu)
    {
      __break(0xC471u);
      return;
    }
    v23 = off_1E35B5AE8[(char)(v22 + 22)];
    v24 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v24, "%s", v23);
  }
  v69[5]((WTF::StringPrintStream *)&v69);
  v40 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
  v41 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v66, v42);
  WTF::printExpectedCStringHelper(v41, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  v69[5]((WTF::StringPrintStream *)&v69);
  v16 = v70;
  if (!v70)
    goto LABEL_44;
  WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
  v16 = v70;
  if (v70 != (WTF *)v72)
    goto LABEL_45;
}

BOOL WTF::LEBDecoder::decodeInt64(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  _BOOL8 result;

  v4 = *a3;
  v5 = a2 - *a3;
  if (a2 <= *a3)
    return 0;
  v6 = 0;
  v7 = 0;
  *a4 = 0;
  *a3 = v4 + 1;
  v8 = a1 + v4;
  v9 = v4 + 2;
  v10 = 7;
  while (1)
  {
    v11 = *(unsigned __int8 *)(v8 + v6);
    v7 |= (unint64_t)(v11 & 0x7F) << (v10 - 7);
    *a4 = v7;
    if ((v11 & 0x80) == 0)
      break;
    if (v5 >= 0xA)
      v12 = 10;
    else
      v12 = v5;
    if (v12 - 1 == v6)
      return 0;
    v11 = v9 + v6;
    *a3 = v9 + v6;
    v10 += 7;
    if (v5 == ++v6)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v6 != 9)
    goto LABEL_11;
  if ((v11 & 0x40) == 0)
    return v11 == 0;
  if (v11 != 127)
    return 0;
LABEL_11:
  result = 1;
  if (v10 <= 0x3F && (v11 & 0x40) != 0)
    *a4 = v7 | (-1 << v10);
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, unint64_t *a3, _DWORD *a4, double a5, float a6)
{
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  char *v32;
  unint64_t *v33;
  uint64_t v34;
  void (**v35[2])(WTF::StringPrintStream *__hidden);
  void (**v36)(WTF::StringPrintStream *__hidden);
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  unsigned int v40;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_46;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v7 = 0;
        v40 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_37:
        v7 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_37;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_46;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
      goto LABEL_46;
LABEL_13:
    v7 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v7 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198D1DE84);
  }
LABEL_10:
  v7 = 2;
LABEL_15:
  v40 = v7;
LABEL_16:
  if (*(_DWORD *)(a3[1822] + 104) == -1)
  {
    v38 = "simd memory instructions need a memory defined in the module";
    v39 = 61;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v35, (uint64_t)&v38, a5, a6);
    v31 = v35[0];
  }
  else
  {
    v8 = a3[2];
    v9 = *a3;
    v10 = v8 - *a3;
    if (v8 <= *a3)
      goto LABEL_42;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = a3[1];
    v15 = 5;
    if (v10 < 5)
      v15 = v8 - *a3;
    v16 = v15 - 1;
    *a3 = v9 + 1;
    v17 = v14 + v9;
    while (1)
    {
      v18 = *(char *)(v17 + v11);
      v13 |= (v18 & 0x7F) << v12;
      if ((v18 & 0x80000000) == 0)
        break;
      if (v16 == v11)
        goto LABEL_42;
      v19 = v9 + v11 + 2;
      *a3 = v19;
      ++v11;
      v12 += 7;
      if (v10 == v11)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v37 = v13;
    if ((_DWORD)v11 == 4 && v18 >= 0x10u)
    {
LABEL_42:
      v32 = "can't get simd memory op alignment";
      v33 = a3;
      v34 = 35;
LABEL_45:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v33, v34, &v38, a6);
      v31 = (void (**)(WTF::StringPrintStream *__hidden))v38;
    }
    else
    {
      if (v8 <= v9 + v11 + 1)
        goto LABEL_44;
      v17 = 0;
      v20 = 0;
      v21 = 0;
      *a4 = 0;
      v22 = ~v11 + v10;
      v23 = 5;
      if (v22 < 5)
        v23 = v22;
      v24 = v9 + v11;
      *a3 = v9 + v11 + 2;
      v25 = v9 - v8;
      v26 = v14 + v9;
      v27 = v23 - 1;
      v28 = v25 + v11;
      while (1)
      {
        LODWORD(v19) = *(char *)(v26 + v17 + v11 + 1);
        v21 |= (v19 & 0x7F) << v20;
        *a4 = v21;
        if ((v19 & 0x80000000) == 0)
          break;
        if (v27 == v17)
          goto LABEL_44;
        v29 = v24 + v17;
        v30 = v28 + v17++;
        v19 = v29 + 3;
        *a3 = v19;
        v20 += 7;
        if (v30 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v17 == 4 && v19 >= 0x10u)
      {
LABEL_44:
        v32 = "can't get simd memory op offset";
        v33 = a3;
        v34 = 32;
        goto LABEL_45;
      }
      if (v13 <= v7)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v38 = "alignment: ";
      v39 = 12;
      v35[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
      v35[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v36, (uint64_t)&v38, &v37, (uint64_t)v35, &v40, a5, a6);
      v31 = v36;
    }
  }
  *(_QWORD *)a1 = v31;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::binaryCase(uint64_t a1, uint64_t a2, char a3, void (*a4)(const char **__return_ptr, _QWORD *, void (***)(WTF::StringPrintStream *__hidden this)), uint64_t a5, uint64_t a6, uint64_t a7, double a8, float a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  unsigned int v16;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  char v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t *v71;
  uint64_t v72;
  void (**v73)(WTF::StringPrintStream *__hidden);
  unsigned int v74;
  const char *v75;
  uint64_t v76;
  unsigned int v77;
  void (**v79)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  char v82;
  __int128 v83;
  const char *v84;
  uint64_t v85;

  *(_QWORD *)&v83 = a6;
  *((_QWORD *)&v83 + 1) = a7;
  v82 = a3;
  v16 = *(_DWORD *)(a2 + 68);
  if (!v16)
  {
    v70 = "binary right";
    v71 = (unint64_t *)a2;
    v72 = 13;
LABEL_32:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v71, 26, v70, v72, &v84, a9);
    goto LABEL_33;
  }
  v20 = *(_QWORD *)(a2 + 56) + 24 * v16;
  v22 = *(_QWORD *)(v20 - 24);
  v21 = *(_QWORD *)(v20 - 16);
  *(_DWORD *)(a2 + 68) = v16 - 1;
  v84 = "WasmFunctionParser.h:";
  LODWORD(v85) = 21;
  LODWORD(v79) = 522;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v84, (unsigned int *)&v79, (int **)&v81);
  v30 = v81;
  if (!v81)
  {
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x198D1E22CLL);
  }
  v81 = 0;
  if (*(_DWORD *)v30 == 2)
  {
    WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    *(_DWORD *)v30 -= 2;
  }
  v31 = *(_DWORD *)(a2 + 68);
  if (!v31)
  {
    v70 = "binary left";
    v71 = (unint64_t *)a2;
    v72 = 12;
    goto LABEL_32;
  }
  v32 = *(_QWORD *)(a2 + 56) + 24 * v31;
  v33 = *(_QWORD *)(v32 - 24);
  v34 = *(_QWORD *)(v32 - 16);
  *(_DWORD *)(a2 + 68) = v31 - 1;
  v84 = "WasmFunctionParser.h:";
  LODWORD(v85) = 21;
  LODWORD(v79) = 523;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v84, (unsigned int *)&v79, (int **)&v80);
  v42 = v80;
  if (!v80)
    goto LABEL_48;
  v80 = 0;
  if (*(_DWORD *)v42 == 2)
  {
    WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
  }
  else
  {
    *(_DWORD *)v42 -= 2;
  }
  if (a11 != v33)
    goto LABEL_39;
  if (a11 - 239 < 2 || a11 == 227)
  {
    if (a12 == v34)
      v43 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v43 = 0;
    if ((v43 & 1) == 0)
      goto LABEL_39;
  }
  else
  {
    if (a12 == v34)
      v74 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v74 = 1;
    if (v74 == 1)
    {
LABEL_39:
      v75 = " left value type mismatch";
      v76 = 26;
LABEL_46:
      v84 = v75;
      v85 = v76;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v79, (uint64_t)&v82, (uint64_t)&v84);
      v73 = v79;
      goto LABEL_47;
    }
  }
  if (a13 != v22)
  {
LABEL_45:
    v75 = " right value type mismatch";
    v76 = 27;
    goto LABEL_46;
  }
  if (a13 - 239 < 2 || a13 == 227)
  {
    if (a14 == v21)
      v44 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v44 = 0;
    if ((v44 & 1) == 0)
      goto LABEL_45;
  }
  else
  {
    if (a14 == v21)
      v77 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v77 = 1;
    if (v77 == 1)
      goto LABEL_45;
  }
  v45 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(const char **__return_ptr, _QWORD *, void (***)(WTF::StringPrintStream *__hidden)))(*v45 + a4);
  a4(&v84, v45, &v79);
  if ((_BYTE)v85)
  {
LABEL_33:
    v73 = (void (**)(WTF::StringPrintStream *__hidden))v84;
LABEL_47:
    *(_QWORD *)a1 = v73;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v52 = *(_DWORD *)(a2 + 68);
  if (v52 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &v83, v46, v47, v48, v49, v50, v51);
  }
  else
  {
    v53 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v52);
    *v53 = a6;
    v53[1] = a7;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::unaryCase(uint64_t a1, uint64_t a2, char a3, void (*a4)(const char **__return_ptr, _QWORD *, void (***)(WTF::StringPrintStream *__hidden this)), uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, float a10, unsigned __int8 a11, uint64_t a12)
{
  unsigned int v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (**v48)(WTF::StringPrintStream *__hidden);
  unsigned int v49;
  void (**v50)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v51;
  char v52;
  __int128 v53;
  const char *v54;
  uint64_t v55;

  *(_QWORD *)&v53 = a6;
  *((_QWORD *)&v53 + 1) = a7;
  v52 = a3;
  v14 = *(_DWORD *)(a2 + 68);
  if (!v14)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, &v54, a10);
    goto LABEL_20;
  }
  v19 = *(_QWORD *)(a2 + 56) + 24 * v14;
  v21 = *(_QWORD *)(v19 - 24);
  v20 = *(_QWORD *)(v19 - 16);
  *(_DWORD *)(a2 + 68) = v14 - 1;
  v54 = "WasmFunctionParser.h:";
  LODWORD(v55) = 21;
  LODWORD(v50) = 538;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v54, (unsigned int *)&v50, (int **)&v51);
  v29 = v51;
  if (!v51)
  {
    __break(0xC471u);
    return;
  }
  v51 = 0;
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::~StringImpl(v29, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  else
  {
    *(_DWORD *)v29 -= 2;
  }
  if (a11 != v21)
    goto LABEL_26;
  if (a11 - 239 < 2 || a11 == 227)
  {
    if (a12 == v20)
      v30 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v30 = 0;
    if ((v30 & 1) == 0)
      goto LABEL_26;
  }
  else
  {
    if (a12 == v20)
      v49 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v49 = 1;
    if (v49 == 1)
    {
LABEL_26:
      v54 = " value type mismatch";
      v55 = 21;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v50, (uint64_t)&v52, (uint64_t)&v54);
      v48 = v50;
      goto LABEL_27;
    }
  }
  v31 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(const char **__return_ptr, _QWORD *, void (***)(WTF::StringPrintStream *__hidden)))(*v31 + a4);
  a4(&v54, v31, &v50);
  if ((_BYTE)v55)
  {
LABEL_20:
    v48 = (void (**)(WTF::StringPrintStream *__hidden))v54;
LABEL_27:
    *(_QWORD *)a1 = v48;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v38 = *(_DWORD *)(a2 + 68);
  if (v38 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &v53, v32, v33, v34, v35, v36, v37);
  }
  else
  {
    v39 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v38);
    *v39 = a6;
    v39[1] = a7;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, double a5, float a6)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  double v21;
  float v22;
  WTF *v23;
  WTF::PrintStream *v24;
  float v25;
  double v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  const WTF::String *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  char v71;
  void (**v72)(WTF::StringPrintStream *__hidden);
  WTF *v73;
  __int128 v74;
  _BYTE v75[128];
  void (**v76)(WTF::StringPrintStream *__hidden);
  WTF *v77;
  __int128 v78;
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v72 = off_1E3572250;
  v73 = (WTF *)v75;
  v74 = xmmword_199122F80;
  v75[0] = 0;
  v76 = off_1E3572250;
  v77 = (WTF *)v79;
  v78 = xmmword_199122F80;
  v79[0] = 0;
  if (*(_QWORD *)a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (!v10)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v11, (uint64_t)&v69, a6);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v69 = (WTF::StringImpl *)v12;
    v70 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v76, "StringView", &v69);
  if (v70 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v70])(&v68, &v69);
  v76[5]((WTF::StringPrintStream *)&v76);
  v76[5]((WTF::StringPrintStream *)&v76);
  v20 = v77;
  if (!v77)
  {
    v69 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v77, v78, (uint64_t *)&v69);
  v20 = v77;
  if (v77 != (WTF *)v79)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v68, a2, a4, v21, v22);
  v23 = (WTF *)((uint64_t (*)(_QWORD))v72[4])(&v72);
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v23 + 32))(v23);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v76, v25);
  WTF::printExpectedCStringHelper(v24, "StringView", &v76);
  if ((_DWORD)v77 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v77])(&v71, &v76);
  v26 = (*(double (**)(WTF *))(*(_QWORD *)v23 + 40))(v23);
  WTF::printInternal(v23, (WTF::PrintStream *)&v69, v27, v28, v29, v30, v31, v32, v26, v33);
  WTF::printInternal(v23, (WTF::PrintStream *)&v68, v34, v35, v36, v37, v38, v39, v40, v41);
  v72[5]((WTF::StringPrintStream *)&v72);
  v49 = v68;
  v68 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v69;
  v69 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = v73;
  if (v73)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v73, v74, (uint64_t *)&v76);
    v51 = v73;
    *a1 = v76;
    if (v51 == (WTF *)v75)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v51, v42, v43, v44, v45, v46, v47, v48);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::load(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
  uint64_t v6;
  int v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  void *v65;
  void (**v66)(WTF::StringPrintStream *__hidden);
  char *v67;
  unint64_t *v68;
  uint64_t v69;
  int v70;
  WTF *v71;
  WTF::StringImpl *v72;
  void (**v73)(WTF::StringPrintStream *__hidden);
  __int128 v74;
  const char *v75;
  uint64_t v76;

  *(_QWORD *)&v74 = a3;
  *((_QWORD *)&v74 + 1) = a4;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14576) + 104) == -1)
  {
    v75 = "load instruction without memory";
    v76 = 32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v73, (uint64_t)&v75, a5, a6);
LABEL_49:
    v66 = v73;
    goto LABEL_50;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 - *(_QWORD *)a2;
  if (v10 <= *(_QWORD *)a2)
    goto LABEL_52;
  v15 = 0;
  LODWORD(v16) = 0;
  v17 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = 5;
  if (v12 < 5)
    v19 = v10 - *(_QWORD *)a2;
  v20 = v19 - 1;
  *(_QWORD *)a2 = v11 + 1;
  while (1)
  {
    v21 = *(char *)(v18 + v11 + v15);
    v17 |= (v21 & 0x7F) << v16;
    if ((v21 & 0x80000000) == 0)
      break;
    if (v20 == v15)
      goto LABEL_52;
    *(_QWORD *)a2 = v11 + v15++ + 2;
    LODWORD(v16) = v16 + 7;
    if (v12 == v15)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
  if ((_DWORD)v15 == 4 && *(unsigned __int8 *)(v18 + v11 + v15) >= 0x10u)
  {
LABEL_52:
    v67 = "can't get load alignment";
    v68 = (unint64_t *)a2;
    v69 = 25;
LABEL_55:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v67, v68, v69, &v75, a6);
    goto LABEL_47;
  }
  v6 = a2 + 14608;
  v22 = *(unsigned __int8 *)(a2 + 14608) - 40;
  if (v22 >= 0x17)
  {
    __break(0xC471u);
    goto LABEL_59;
  }
  if (v17 > dword_19915A4D8[(char)v22])
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v17, " exceeds load's natural alignment ", 35, 1 << qword_19915A420[(char)v22], &v75, a6);
    *(_QWORD *)a1 = v75;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  if (v10 <= v11 + v15 + 1)
    goto LABEL_54;
  v16 = 0;
  v23 = 0;
  v7 = 0;
  v24 = ~v15 + v12;
  v25 = 5;
  if (v24 < 5)
    v25 = v24;
  v26 = v11 + v15;
  *(_QWORD *)a2 = v11 + v15 + 2;
  v27 = v11 - v10;
  v28 = v18 + v11;
  v29 = v25 - 1;
  v30 = v27 + v15;
  while (1)
  {
    LODWORD(v20) = *(char *)(v28 + v16 + v15 + 1);
    v7 |= (v20 & 0x7F) << v23;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v29 == v16)
      goto LABEL_54;
    v31 = v26 + v16;
    v32 = v30 + v16++;
    v20 = v31 + 3;
    *(_QWORD *)a2 = v20;
    v23 += 7;
    if (v32 == -2)
      goto LABEL_20;
  }
LABEL_21:
  if ((_DWORD)v16 == 4 && v20 >= 0x10u)
  {
LABEL_54:
    v67 = "can't get load offset";
    v68 = (unint64_t *)a2;
    v69 = 22;
    goto LABEL_55;
  }
  v33 = *(_DWORD *)(a2 + 68);
  if (!v33)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, &v75, a6);
LABEL_47:
    v66 = (void (**)(WTF::StringPrintStream *__hidden))v75;
LABEL_50:
    *(_QWORD *)a1 = v66;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v34 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v33 - 24);
  *(_DWORD *)(a2 + 68) = v33 - 1;
  v75 = "WasmFunctionParser.h:";
  LODWORD(v76) = 21;
  LODWORD(v73) = 559;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v75, (unsigned int *)&v73, (int **)&v72);
  v42 = v72;
  if (!v72)
  {
    __break(0xC471u);
    JUMPOUT(0x198D1EB5CLL);
  }
  v72 = 0;
  if (*(_DWORD *)v42 == 2)
  {
    WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v42 -= 2;
  }
  if (v34 != 255)
  {
    v75 = " pointer type mismatch";
    v76 = 23;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v73, v6, (uint64_t)&v75);
    goto LABEL_49;
  }
  v43 = *(_QWORD *)(a2 + 48);
  v44 = *(_QWORD *)(v43 + 32);
  v45 = *(uint64_t **)(v43 + 16);
  v46 = *v45;
  v47 = v45[1827];
  v48 = *(unsigned int *)(v44 + 40);
  v49 = *(unsigned int *)(v44 + 44);
  v50 = v49 + 5;
  if (v49 + 5 > v48)
  {
    v61 = v48 + (v48 >> 2);
    if (v61 >= 0x10)
      v62 = v61 + 1;
    else
      v62 = 16;
    if (v62 <= v50)
      v63 = v49 + 5;
    else
      v63 = v62;
    if (!HIDWORD(v63))
    {
      v70 = v63;
      v71 = *(WTF **)(v44 + 32);
      v64 = (void *)WTF::fastMalloc((WTF *)v63);
      *(_DWORD *)(v44 + 40) = v70;
      *(_QWORD *)(v44 + 32) = v64;
      memcpy(v64, v71, v49);
      if (v71)
      {
        if (*(WTF **)(v44 + 32) == v71)
        {
          *(_QWORD *)(v44 + 32) = 0;
          *(_DWORD *)(v44 + 40) = 0;
        }
        WTF::fastFree((unint64_t)v71, v65, v36, v37, v38, v39, v40, v41);
      }
      goto LABEL_28;
    }
    __break(0xC471u);
LABEL_59:
    JUMPOUT(0x198D1EB34);
  }
LABEL_28:
  *(_DWORD *)(v44 + 44) = v50;
  *(_BYTE *)(*(_QWORD *)(v44 + 32) + v49) = v46 - v47;
  *(_DWORD *)(*(_QWORD *)(v44 + 32) + v49 + 1) = v7;
  v51 = *(_DWORD *)(a2 + 68);
  if (v51 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &v74, v36, v37, v38, v39, v40, v41);
  }
  else
  {
    v52 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v51);
    *v52 = a3;
    v52[1] = a4;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::store(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, double a5, float a6)
{
  uint64_t v6;
  int v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  char v55;
  unsigned int *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  size_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  const void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t *v94;
  uint64_t v95;
  void (**v96)(WTF::StringPrintStream *__hidden);
  const char *v97;
  uint64_t v98;
  unsigned int v99;
  char *v100;
  unint64_t *v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  void (**v105)(WTF::StringPrintStream *__hidden);
  const char *v106;
  uint64_t v107;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 14576) + 104) == -1)
  {
    v106 = "store instruction without memory";
    v107 = 33;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v105, (uint64_t)&v106, a5, a6);
LABEL_67:
    v96 = v105;
    goto LABEL_68;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 - *(_QWORD *)a2;
  if (v10 <= *(_QWORD *)a2)
    goto LABEL_70;
  v15 = 0;
  LODWORD(v16) = 0;
  v17 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = 5;
  if (v12 < 5)
    v19 = v10 - *(_QWORD *)a2;
  v20 = v19 - 1;
  *(_QWORD *)a2 = v11 + 1;
  while (1)
  {
    v21 = *(char *)(v18 + v11 + v15);
    v17 |= (v21 & 0x7F) << v16;
    if ((v21 & 0x80000000) == 0)
      break;
    if (v20 == v15)
      goto LABEL_70;
    *(_QWORD *)a2 = v11 + v15++ + 2;
    LODWORD(v16) = v16 + 7;
    if (v12 == v15)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
  if ((_DWORD)v15 == 4 && *(unsigned __int8 *)(v18 + v11 + v15) >= 0x10u)
  {
LABEL_70:
    v100 = "can't get store alignment";
    v101 = (unint64_t *)a2;
    v102 = 26;
LABEL_73:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v100, v101, v102, &v106, a6);
    goto LABEL_58;
  }
  v6 = a2 + 14608;
  v22 = *(unsigned __int8 *)(a2 + 14608) - 40;
  if (v22 >= 0x17)
  {
    __break(0xC471u);
    goto LABEL_79;
  }
  if (v17 > dword_19915A4D8[(char)v22])
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v17, " exceeds store's natural alignment ", 36, 1 << qword_19915A420[(char)v22], &v106, a6);
    *(_QWORD *)a1 = v106;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  if (v10 <= v11 + v15 + 1)
    goto LABEL_72;
  v16 = 0;
  v23 = 0;
  v7 = 0;
  v24 = ~v15 + v12;
  v25 = 5;
  if (v24 < 5)
    v25 = v24;
  v26 = v11 + v15;
  *(_QWORD *)a2 = v11 + v15 + 2;
  v27 = v11 - v10;
  v28 = v18 + v11;
  v29 = v25 - 1;
  v30 = v27 + v15;
  while (1)
  {
    LODWORD(v20) = *(char *)(v28 + v16 + v15 + 1);
    v7 |= (v20 & 0x7F) << v23;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v29 == v16)
      goto LABEL_72;
    v31 = v26 + v16;
    v32 = v30 + v16++;
    v20 = v31 + 3;
    *(_QWORD *)a2 = v20;
    v23 += 7;
    if (v32 == -2)
      goto LABEL_20;
  }
LABEL_21:
  if ((_DWORD)v16 == 4 && v20 >= 0x10u)
  {
LABEL_72:
    v100 = "can't get store offset";
    v101 = (unint64_t *)a2;
    v102 = 23;
    goto LABEL_73;
  }
  v33 = *(_DWORD *)(a2 + 68);
  if (v33)
  {
    v34 = *(_QWORD *)(a2 + 56) + 24 * v33;
    v36 = *(_QWORD *)(v34 - 24);
    v35 = *(_QWORD *)(v34 - 16);
    *(_DWORD *)(a2 + 68) = v33 - 1;
    v106 = "WasmFunctionParser.h:";
    LODWORD(v107) = 21;
    LODWORD(v105) = 581;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v106, (unsigned int *)&v105, (int **)&v104);
    v44 = v104;
    if (!v104)
    {
      __break(0xC471u);
      JUMPOUT(0x198D1F0B0);
    }
    v104 = 0;
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
    v45 = *(_DWORD *)(a2 + 68);
    if (v45)
    {
      v46 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v45 - 24);
      *(_DWORD *)(a2 + 68) = v45 - 1;
      v106 = "WasmFunctionParser.h:";
      LODWORD(v107) = 21;
      LODWORD(v105) = 582;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v106, (unsigned int *)&v105, (int **)&v103);
      v54 = v103;
      if (!v103)
      {
        __break(0xC471u);
        JUMPOUT(0x198D1F0B8);
      }
      v103 = 0;
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
      if (v46 != 255)
      {
        v97 = " pointer type mismatch";
        v98 = 23;
LABEL_66:
        v106 = v97;
        v107 = v98;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v105, v6, (uint64_t)&v106);
        goto LABEL_67;
      }
      if (a3 != v36)
      {
LABEL_65:
        v97 = " value type mismatch";
        v98 = 21;
        goto LABEL_66;
      }
      if (a3 - 239 < 2 || a3 == 227)
      {
        if (a4 == v35)
          v55 = ((a3 + 29) < 0xEu) & (0x3001u >> (a3 + 29));
        else
          v55 = 0;
        if ((v55 & 1) == 0)
          goto LABEL_65;
      }
      else
      {
        if (a4 == v35)
          v99 = ((a3 + 29) < 0xEu) & (0x3001u >> (a3 + 29));
        else
          v99 = 1;
        if (v99 == 1)
          goto LABEL_65;
      }
      v56 = *(unsigned int **)(a2 + 48);
      v57 = *v56 - 2;
      if (HIDWORD(v57))
      {
        __break(0xC471u);
        JUMPOUT(0x198D1F0C0);
      }
      *v56 = v57;
      v58 = *((_QWORD *)v56 + 4);
      v59 = (uint64_t *)*((_QWORD *)v56 + 2);
      v60 = *v59;
      v61 = v59[1827];
      v62 = *(unsigned int *)(v58 + 40);
      v63 = *(unsigned int *)(v58 + 44);
      v64 = v63 + 5;
      if (v63 + 5 <= v62)
      {
LABEL_39:
        *(_DWORD *)(v58 + 44) = v64;
        *(_BYTE *)(*(_QWORD *)(v58 + 32) + v63) = v60 - v61;
        *(_DWORD *)(*(_QWORD *)(v58 + 32) + v63 + 1) = v7;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      }
      v81 = v62 + (v62 >> 2);
      if (v81 >= 0x10)
        v82 = v81 + 1;
      else
        v82 = 16;
      if (v82 <= v64)
        v83 = v63 + 5;
      else
        v83 = v82;
      if (!HIDWORD(v83))
      {
        v84 = *(const void **)(v58 + 32);
        v85 = (void *)WTF::fastMalloc((WTF *)v83);
        *(_DWORD *)(v58 + 40) = v83;
        *(_QWORD *)(v58 + 32) = v85;
        memcpy(v85, v84, v63);
        if (v84)
        {
          if (*(const void **)(v58 + 32) == v84)
          {
            *(_QWORD *)(v58 + 32) = 0;
            *(_DWORD *)(v58 + 40) = 0;
          }
          WTF::fastFree((unint64_t)v84, v86, v87, v88, v89, v90, v91, v92);
        }
        goto LABEL_39;
      }
      __break(0xC471u);
LABEL_79:
      JUMPOUT(0x198D1F088);
    }
    v93 = "store pointer";
    v94 = (unint64_t *)a2;
    v95 = 14;
  }
  else
  {
    v93 = "store value";
    v94 = (unint64_t *)a2;
    v95 = 12;
  }
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v94, 26, v93, v95, &v106, a6);
LABEL_58:
  v96 = (void (**)(WTF::StringPrintStream *__hidden))v106;
LABEL_68:
  *(_QWORD *)a1 = v96;
  *(_BYTE *)(a1 + 8) = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, char *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  char *String;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::PrintStream *v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF::PrintStream *v56;
  float v57;
  double v58;
  const WTF::String *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  const WTF::String *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float v73;
  const WTF::String *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  float v81;
  const WTF::String *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  float v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  void (**v144)(WTF::StringPrintStream *__hidden);
  WTF *v145;
  __int128 v146;
  _BYTE v147[128];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v137, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v137 = (WTF::StringImpl *)v16;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v136, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v24 = v145;
  if (!v145)
  {
    v136 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v136);
  v24 = v145;
  if (v145 != (WTF *)v147)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v135, a2, a4, v25, v26);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v137, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v137 = (WTF::StringImpl *)v30;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v134, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v38 = v145;
  if (!v145)
  {
    v134 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v134);
  v38 = v145;
  if (v145 != (WTF *)v147)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a6);
  v41 = v40;
  v42 = ((uint64_t (*)(_QWORD))v144[4])(&v144);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
  if (String)
  {
    v45 = v41 - 1;
    if (!v41)
      v45 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v45, (uint64_t)&v137, v44);
  }
  else
  {
    v46 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    v137 = (WTF::StringImpl *)v46;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper(v43, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v139, &v137);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v54 = v145;
  if (!v145)
  {
    v137 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v137);
  v54 = v145;
  if (v145 != (WTF *)v147)
LABEL_36:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v55 = (WTF *)((uint64_t (*)(_QWORD))v140[4])(&v140);
  v56 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v55 + 32))(v55);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v144, v57);
  WTF::printExpectedCStringHelper(v56, "StringView", &v144);
  if ((_DWORD)v145 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v145])(&v139, &v144);
  v58 = (*(double (**)(WTF *))(*(_QWORD *)v55 + 40))(v55);
  WTF::printInternal(v55, (WTF::PrintStream *)&v136, v59, v60, v61, v62, v63, v64, v58, v65);
  WTF::printInternal(v55, (WTF::PrintStream *)&v135, v66, v67, v68, v69, v70, v71, v72, v73);
  WTF::printInternal(v55, (WTF::PrintStream *)&v134, v74, v75, v76, v77, v78, v79, v80, v81);
  WTF::printInternal(v55, (WTF::PrintStream *)&v137, v82, v83, v84, v85, v86, v87, v88, v89);
  v140[5]((WTF::StringPrintStream *)&v140);
  v97 = v137;
  v137 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v134;
  v134 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v135;
  v135 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v136;
  v136 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v141;
  if (v141)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v144);
    v101 = v141;
    *a1 = v144;
    if (v101 == (WTF *)v143)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v90, v91, v92, v93, v94, v95, v96);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [35],JSC::Wasm::Type,char [23],JSC::Wasm::Type,char [15]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  float v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  WTF::PrintStream *v37;
  float v38;
  double v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  const WTF::String *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  float v70;
  const WTF::String *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  float v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  char v137;
  void (**v138)(WTF::StringPrintStream *__hidden);
  WTF *v139;
  __int128 v140;
  _BYTE v141[128];
  void (**v142)(WTF::StringPrintStream *__hidden);
  unint64_t v143;
  __int128 v144;
  _BYTE v145[128];
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v138 = off_1E3572250;
  v139 = (WTF *)v141;
  v140 = xmmword_199122F80;
  v141[0] = 0;
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "table.init requires table's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v15 = v143;
  if (!v143)
  {
    v136 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v136);
  v15 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v135, a2, a3, v16, v17);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" and element's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v25 = v143;
  if (!v143)
  {
    v134 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v134);
  v25 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v133, a2, a4, v26, v27);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" are the same");
  v142[5]((WTF::StringPrintStream *)&v142);
  v35 = v143;
  if (!v143)
  {
    v132 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v132);
  v35 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_15:
    WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
  v36 = (WTF *)((uint64_t (*)(_QWORD))v138[4])(&v138);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v36 + 32))(v36);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v142, v38);
  WTF::printExpectedCStringHelper(v37, "StringView", &v142);
  if ((_DWORD)v143 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v143])(&v137, &v142);
  v39 = (*(double (**)(WTF *))(*(_QWORD *)v36 + 40))(v36);
  WTF::printInternal(v36, (WTF::PrintStream *)&v136, v40, v41, v42, v43, v44, v45, v39, v46);
  WTF::printInternal(v36, (WTF::PrintStream *)&v135, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v36, (WTF::PrintStream *)&v134, v55, v56, v57, v58, v59, v60, v61, v62);
  WTF::printInternal(v36, (WTF::PrintStream *)&v133, v63, v64, v65, v66, v67, v68, v69, v70);
  WTF::printInternal(v36, (WTF::PrintStream *)&v132, v71, v72, v73, v74, v75, v76, v77, v78);
  v138[5]((WTF::StringPrintStream *)&v138);
  v86 = v132;
  v132 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v133;
  v133 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v134;
  v134 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v135;
  v135 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = v136;
  v136 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = v139;
  if (v139)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v139, v140, (uint64_t *)&v142);
    v91 = v139;
    *a1 = v142;
    if (v91 == (WTF *)v141)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v91, v79, v80, v81, v82, v83, v84, v85);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [32],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, JSC::Wasm::Type *a4, char *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *String;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int v126;
  char v127;
  void (**v128)(WTF::StringPrintStream *__hidden);
  WTF *v129;
  __int128 v130;
  _BYTE v131[128];
  void (**v132)(WTF::StringPrintStream *__hidden);
  unint64_t v133;
  __int128 v134;
  _BYTE v135[128];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v128 = off_1E3572250;
  v129 = (WTF *)v131;
  v130 = xmmword_199122F80;
  v131[0] = 0;
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", a3);
  v132[5]((WTF::StringPrintStream *)&v132);
  v16 = v133;
  if (!v133)
  {
    v124 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v124);
  v16 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_5:
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v123, a2, a4, v17, v18);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", " expected ");
  v132[5]((WTF::StringPrintStream *)&v132);
  v26 = v133;
  if (!v133)
  {
    v122 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v122);
  v26 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_10:
    WTF::fastFree(v26, v19, v20, v21, v22, v23, v24, v25);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a5);
  v29 = v28;
  v30 = ((uint64_t (*)(_QWORD))v132[4])(&v132);
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
  if (String)
  {
    v33 = v29 - 1;
    if (!v29)
      v33 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v33, (uint64_t)&v125, v32);
  }
  else
  {
    v34 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v34 = 1;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 0;
    v125 = (WTF::StringImpl *)v34;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper(v31, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v127, &v125);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  v132[5]((WTF::StringPrintStream *)&v132);
  v132[5]((WTF::StringPrintStream *)&v132);
  v42 = v133;
  if (!v133)
  {
    v125 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v125);
  v42 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_22:
    WTF::fastFree(v42, v35, v36, v37, v38, v39, v40, v41);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v128[4])(&v128);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v132, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v132);
  if ((_DWORD)v133 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v133])(&v127, &v132);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v124, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v123, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v122, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v125, v70, v71, v72, v73, v74, v75, v76, v77);
  v128[5]((WTF::StringPrintStream *)&v128);
  v85 = v125;
  v125 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v129;
  if (v129)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v129, v130, (uint64_t *)&v132);
    v89 = v129;
    *a1 = v132;
    if (v89 == (WTF *)v131)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v89, v78, v79, v80, v81, v82, v83, v84);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "memory.init length to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::truncSaturated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, float a8)
{
  unsigned int v10;
  unsigned __int8 v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  WTF::StringImpl *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  void *v51;
  void (**v52)(WTF::StringPrintStream *__hidden);
  unsigned int v53;
  void *__src;
  _QWORD v55[2];
  _QWORD v56[2];
  void (**v57)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v58;
  _QWORD v59[2];
  __int128 v60;
  const char *v61;
  uint64_t v62;

  *(_QWORD *)&v60 = a3;
  *((_QWORD *)&v60 + 1) = a4;
  v59[0] = a5;
  v59[1] = a6;
  v10 = *(_DWORD *)(a2 + 68);
  if (!v10)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, &v61, a8);
    v52 = (void (**)(WTF::StringPrintStream *__hidden))v61;
LABEL_35:
    *(_QWORD *)a1 = v52;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v12 = a5;
  v15 = *(_QWORD *)(a2 + 56) + 24 * v10;
  v16 = *(_QWORD *)(v15 - 24);
  v17 = *(_QWORD *)(v15 - 16);
  *(_DWORD *)(a2 + 68) = v10 - 1;
  v61 = "WasmFunctionParser.h:";
  LODWORD(v62) = 21;
  LODWORD(v56[0]) = 595;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v61, (unsigned int *)v56, (int **)&v58);
  v27 = v58;
  if (!v58)
    goto LABEL_36;
  v58 = 0;
  if (*(_DWORD *)v27 == 2)
  {
    WTF::StringImpl::~StringImpl(v27, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    *(_DWORD *)v27 -= 2;
  }
  if (v12 != v16)
    goto LABEL_34;
  if (v12 - 239 < 2 || v12 == 227)
  {
    if (a6 == v17)
      v28 = ((v12 + 29) < 0xEu) & (0x3001u >> (v12 + 29));
    else
      v28 = 0;
    if ((v28 & 1) == 0)
      goto LABEL_34;
  }
  else
  {
    if (a6 == v17)
      v53 = ((v12 + 29) < 0xEu) & (0x3001u >> (v12 + 29));
    else
      v53 = 1;
    if (v53 == 1)
    {
LABEL_34:
      v61 = "trunc-saturated value type mismatch. Expected: ";
      v62 = 48;
      v56[0] = " but expression stack has ";
      v56[1] = 27;
      v55[0] = v16;
      v55[1] = v17;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v57, a2, (uint64_t)&v61, (JSC::Wasm::Type *)v59, (uint64_t)v56, (JSC::Wasm::Type *)v55, v25, v26);
      v52 = v57;
      goto LABEL_35;
    }
  }
  v29 = *(_QWORD *)(a2 + 48);
  v30 = *(_QWORD *)(v29 + 32);
  v31 = *(uint64_t **)(v29 + 16);
  v32 = *v31;
  v33 = v31[1827];
  v34 = *(unsigned int *)(v30 + 40);
  v35 = *(unsigned int *)(v30 + 44);
  v36 = v35 + 1;
  if (v35 >= v34)
  {
    v47 = v34 + (v34 >> 2);
    if (v47 >= 0x10)
      v48 = v47 + 1;
    else
      v48 = 16;
    if (v48 <= v36)
      v49 = v35 + 1;
    else
      v49 = v48;
    if (!HIDWORD(v49))
    {
      __src = *(void **)(v30 + 32);
      v50 = (void *)WTF::fastMalloc((WTF *)v49);
      *(_DWORD *)(v30 + 40) = v49;
      *(_QWORD *)(v30 + 32) = v50;
      memcpy(v50, __src, v35);
      if (__src)
      {
        if (*(void **)(v30 + 32) == __src)
        {
          *(_QWORD *)(v30 + 32) = 0;
          *(_DWORD *)(v30 + 40) = 0;
        }
        WTF::fastFree((unint64_t)__src, v51, v19, v20, v21, v22, v23, v24);
      }
      goto LABEL_12;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x198D2049CLL);
  }
LABEL_12:
  *(_DWORD *)(v30 + 44) = v36;
  *(_BYTE *)(*(_QWORD *)(v30 + 32) + v35) = v32 - v33;
  v37 = *(_DWORD *)(a2 + 68);
  if (v37 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &v60, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    v38 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v37);
    *v38 = a3;
    v38[1] = a4;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseArrayTypeDefinition(uint64_t a1, unint64_t *a2, char *a3, uint64_t a4, unsigned int a5, _DWORD *a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  JSC::Wasm::TypeInformation *v24;
  unint64_t v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  const char *v31;
  uint64_t v32;
  void (**v33)(WTF::StringPrintStream *__hidden);
  unsigned int *v34;
  WTF *v35;
  JSC::Wasm::TypeDefinition *v36;
  JSC::Wasm::TypeInformation *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 hasRecursiveReference;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t CachedUnrolling;
  uint64_t v46;
  uint64_t v47;
  const JSC::Wasm::Type *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  WTF *v53;
  const JSC::Wasm::TypeDefinition *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD v61[2];
  const char *v62;
  uint64_t v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  _QWORD v65[2];

  v65[0] = a3;
  v65[1] = a4;
  v11 = a2[2];
  v12 = *a2;
  v13 = v11 - *a2;
  if (v11 <= *a2)
    goto LABEL_28;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = a2[1];
  *a6 = 0;
  v18 = 5;
  if (v13 < 5)
    v18 = v13;
  v19 = v18 - 1;
  *a2 = v12 + 1;
  v20 = v17 + v12;
  v21 = v12 + 2;
  while (1)
  {
    v22 = *(char *)(v20 + v14);
    v16 |= (v22 & 0x7F) << v15;
    *a6 = v16;
    if ((v22 & 0x80000000) == 0)
      break;
    if (v19 == v14)
      goto LABEL_28;
    LOBYTE(v22) = v21 + v14;
    *a2 = v21 + v14;
    v15 += 7;
    if (v13 == ++v14)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v14 == 4 && v22 >= 0x10u)
  {
LABEL_28:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a3, a4, &v62, a10);
    v33 = (void (**)(WTF::StringPrintStream *__hidden))v62;
    goto LABEL_22;
  }
  v23 = a2[1822];
  if (v16 >= *(_DWORD *)(v23 + 100))
  {
    v62 = " index ";
    v63 = 8;
    v31 = " is out of bounds";
    v32 = 18;
LABEL_21:
    v61[0] = v31;
    v61[1] = v32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v64, (uint64_t)v65, (uint64_t)&v62, a6, (uint64_t)v61, a9, a10);
    v33 = v64;
LABEL_22:
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v24 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v23 + 88) + 8 * v16);
  v25 = (unint64_t)v24;
  if (*((_DWORD *)v24 + 8) == 4)
  {
    v34 = (unsigned int *)*((_QWORD *)v24 + 1);
    v35 = *(WTF **)v34;
    v36 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v34 + 8) + 8 * v34[2]);
    v37 = v24;
    v38 = (uint64_t)a6;
    v39 = a8;
    v40 = a7;
    v60 = a5;
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v36);
    a5 = v60;
    a7 = v40;
    a8 = v39;
    a6 = (_DWORD *)v38;
    v25 = (unint64_t)v36;
    v24 = v37;
    if (hasRecursiveReference)
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v37, v42, v43, v44, v60, v38, v40, v39);
      if (v52)
      {
        v25 = CachedUnrolling;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
        v24 = v37;
      }
      else
      {
        v53 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v36, v35, v46, v47, v48, v49, v50, v51);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v37, v53, v54, v55, v56, v57, v58, v59);
        v25 = (unint64_t)v53;
        v24 = v37;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
      }
    }
  }
  v26 = *(_DWORD *)(v25 + 32);
  if (v26 == 5)
  {
    v25 = **(_QWORD **)(v25 + 8);
    v26 = *(_DWORD *)(v25 + 32);
  }
  if (v26 != 2)
  {
    v62 = " index ";
    v63 = 8;
    v31 = " does not reference an array definition";
    v32 = 40;
    goto LABEL_21;
  }
  v27 = *(__int128 **)(v25 + 8);
  v28 = *v27;
  v29 = *((_QWORD *)v27 + 2);
  *(_BYTE *)(a7 + 24) = *((_BYTE *)v27 + 24);
  *(_QWORD *)(a7 + 16) = v29;
  *(_OWORD *)a7 = v28;
  if (a5)
    v30 = -29;
  else
    v30 = -28;
  *(_BYTE *)a8 = v30;
  *(_QWORD *)(a8 + 8) = v24;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [25],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  double v27;
  float v28;
  WTF *v29;
  WTF::PrintStream *v30;
  float v31;
  double v32;
  const WTF::String *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  char v112;
  void (**v113)(WTF::StringPrintStream *__hidden);
  WTF *v114;
  __int128 v115;
  _BYTE v116[128];
  void (**v117)(WTF::StringPrintStream *__hidden);
  WTF *v118;
  __int128 v119;
  _BYTE v120[128];
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v113 = off_1E3572250;
  v114 = (WTF *)v116;
  v115 = xmmword_199122F80;
  v116[0] = 0;
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", a3);
  v117[5]((WTF::StringPrintStream *)&v117);
  v16 = v118;
  if (!v118)
  {
    v111 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v111);
  v16 = v118;
  if (v118 != (WTF *)v120)
LABEL_5:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v110, a2, a4, v17, v18);
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", " expected ");
  v117[5]((WTF::StringPrintStream *)&v117);
  v26 = v118;
  if (!v118)
  {
    v109 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v109);
  v26 = v118;
  if (v118 != (WTF *)v120)
LABEL_10:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v108, a2, a5, v27, v28);
  v29 = (WTF *)((uint64_t (*)(_QWORD))v113[4])(&v113);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v29 + 32))(v29);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v117, v31);
  WTF::printExpectedCStringHelper(v30, "StringView", &v117);
  if ((_DWORD)v118 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v118])(&v112, &v117);
  v32 = (*(double (**)(WTF *))(*(_QWORD *)v29 + 40))(v29);
  WTF::printInternal(v29, (WTF::PrintStream *)&v111, v33, v34, v35, v36, v37, v38, v32, v39);
  WTF::printInternal(v29, (WTF::PrintStream *)&v110, v40, v41, v42, v43, v44, v45, v46, v47);
  WTF::printInternal(v29, (WTF::PrintStream *)&v109, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v29, (WTF::PrintStream *)&v108, v56, v57, v58, v59, v60, v61, v62, v63);
  v113[5]((WTF::StringPrintStream *)&v113);
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v111;
  v111 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = v114;
  if (v114)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v114, v115, (uint64_t *)&v117);
    v75 = v114;
    *a1 = v117;
    if (v75 == (WTF *)v116)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v75, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [48],JSC::Wasm::Type,char [25],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in array.new_fixed, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected a subtype of ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [64],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "array.new_data expected numeric, packed, or vector type; found ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [51]>(void (***a1)(WTF::StringPrintStream *__hidden this), const char *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF::PrintStream *v12;
  float v13;
  double v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  char v40;
  void (**v41)(WTF::StringPrintStream *__hidden);
  WTF *v42;
  __int128 v43;
  _BYTE v44[128];
  void (**v45)(WTF::StringPrintStream *__hidden);
  WTF *v46;
  __int128 v47;
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v41 = off_1E3572250;
  v42 = (WTF *)v44;
  v43 = xmmword_199122F80;
  v44[0] = 0;
  v45 = off_1E3572250;
  v46 = (WTF *)v48;
  v47 = xmmword_199122F80;
  v48[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v45, "%s", a2);
  v45[5]((WTF::StringPrintStream *)&v45);
  v10 = v46;
  if (!v46)
  {
    v39 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v46, v47, (uint64_t *)&v39);
  v10 = v46;
  if (v46 != (WTF *)v48)
LABEL_5:
    WTF::fastFree((unint64_t)v10, v3, v4, v5, v6, v7, v8, v9);
  v11 = (WTF *)((uint64_t (*)(_QWORD))v41[4])(&v41);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v11 + 32))(v11);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v45, v13);
  WTF::printExpectedCStringHelper(v12, "StringView", &v45);
  if ((_DWORD)v46 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v46])(&v40, &v45);
  v14 = (*(double (**)(WTF *))(*(_QWORD *)v11 + 40))(v11);
  WTF::printInternal(v11, (WTF::PrintStream *)&v39, v15, v16, v17, v18, v19, v20, v14, v21);
  v41[5]((WTF::StringPrintStream *)&v41);
  v29 = v39;
  v39 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = v42;
  if (v42)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v42, v43, (uint64_t *)&v45);
    v30 = v42;
    *a1 = v45;
    if (v30 == (WTF *)v44)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v30, v22, v23, v24, v25, v26, v27, v28);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [61],JSC::Wasm::Type,char [56],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.new_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.new_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::addReferencedFunctions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  if (BYTE1(dword_1ECF4C7B0))
    v12 = 227;
  else
    v12 = 240;
  if (BYTE1(dword_1ECF4C7B0))
    v13 = -16;
  else
    v13 = 0;
  result = JSC::Wasm::isSubtype(v10, v11, v12, v13, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v15 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v15)
    {
      for (i = 0; i < v15; ++i)
      {
        if (i >= v15)
        {
LABEL_29:
          __break(0xC471u);
          JUMPOUT(0x198D21614);
        }
        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + i) == 1)
        {
          if (i >= *(unsigned int *)(a2 + 76))
            goto LABEL_29;
          v17 = *(_QWORD *)(a1 + 14576);
          v18 = *(_QWORD *)(v17 + 320);
          v19 = (unint64_t *)(2 * v18);
          if (v18 < 0)
            v20 = 63;
          else
            v20 = *v19;
          v21 = *(unsigned int *)(*(_QWORD *)(a2 + 64) + 8 * i);
          if (v20 > v21)
          {
            v22 = (_QWORD *)(v17 + 320);
            v23 = 1 << v21;
            v24 = v19 + 1;
            if (v18 >= 0)
              v25 = v24;
            else
              v25 = v22;
            v26 = (_QWORD *)((char *)v25 + ((v21 >> 3) & 0x1FFFFFF8));
            while (1)
            {
              v27 = *v26;
              if ((*v26 & v23) != 0)
                break;
              v28 = __ldxr(v26);
              if (v28 == v27)
              {
                if (!__stxr(v27 | v23, v26))
                  break;
              }
              else
              {
                __clrex();
              }
            }
            v15 = *(unsigned int *)(a2 + 60);
          }
        }
      }
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,char [19],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  double v31;
  float v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  double v41;
  float v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  int v144;
  char v145;
  void (**v146)(WTF::StringPrintStream *__hidden);
  WTF *v147;
  __int128 v148;
  _BYTE v149[128];
  void (**v150)(WTF::StringPrintStream *__hidden);
  WTF *v151;
  __int128 v152;
  _BYTE v153[128];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v146 = off_1E3572250;
  v147 = (WTF *)v149;
  v148 = xmmword_199122F80;
  v149[0] = 0;
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v143, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v143 = (WTF::StringImpl *)v14;
    v144 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v150, "StringView", &v143);
  if (v144 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v144])(&v142, &v143);
  v150[5]((WTF::StringPrintStream *)&v150);
  v150[5]((WTF::StringPrintStream *)&v150);
  v22 = v151;
  if (!v151)
  {
    v143 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v143);
  v22 = v151;
  if (v151 != (WTF *)v153)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " arrayref to type ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v30 = v151;
  if (!v151)
  {
    v142 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v142);
  v30 = v151;
  if (v151 != (WTF *)v153)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v141, a2, a4, v31, v32);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " expected ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v40 = v151;
  if (!v151)
  {
    v140 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v140);
  v40 = v151;
  if (v151 != (WTF *)v153)
LABEL_22:
    WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v139, a2, a5, v41, v42);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v146[4])(&v146);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v150, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v150);
  if ((_DWORD)v151 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v151])(&v145, &v150);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v143, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v142, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v141, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v140, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v43, (WTF::PrintStream *)&v139, v78, v79, v80, v81, v82, v83, v84, v85);
  v146[5]((WTF::StringPrintStream *)&v146);
  v93 = v139;
  v139 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v140;
  v140 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v141;
  v141 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v147;
  if (v147)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v147, v148, (uint64_t *)&v150);
    v98 = v147;
    *a1 = v150;
    if (v98 == (WTF *)v149)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v98, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.set arrayref to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [25],JSC::Wasm::Type,char [19]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "array.len value to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected arrayref");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [27],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "array.fill offset to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [26],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.fill value to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [62],JSC::Wasm::Type,char [57],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.init_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.init_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseStructFieldManipulation(_BYTE *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6, float a7)
{
  float v10;
  unsigned int v11;
  uint64_t v12;
  void (**v13)(WTF::StringPrintStream *__hidden);
  void (**v14)(WTF::StringPrintStream *__hidden);
  char v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  float v28;
  JSC::Wasm::TypeDefinition *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (**v43)(WTF::StringPrintStream *__hidden);
  unsigned int *v44;
  WTF *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t CachedUnrolling;
  uint64_t v54;
  uint64_t v55;
  const JSC::Wasm::Type *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  const JSC::Wasm::TypeDefinition *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::Wasm::TypeInformation *v67;
  _QWORD v68[2];
  void (**v69[2])(WTF::StringPrintStream *__hidden);
  const char *v70;
  uint64_t v71;
  void (**v72)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v73;
  unsigned int v74[2];
  _QWORD v75[2];
  uint64_t v76;
  unint64_t v77;

  v75[0] = a4;
  v75[1] = a5;
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseStructTypeIndexAndFieldIndex((uint64_t)&v76, (unint64_t *)a2, v74, a4, a5, a6, a7);
  if ((_BYTE)v77)
    goto LABEL_15;
  v11 = *(_DWORD *)(a2 + 68);
  if (!v11)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "struct reference", 17, &v76, v10);
LABEL_15:
    v43 = (void (**)(WTF::StringPrintStream *__hidden))v76;
    goto LABEL_18;
  }
  v12 = *(_QWORD *)(a2 + 56) + 24 * v11;
  v14 = *(void (***)(WTF::StringPrintStream *__hidden))(v12 - 24);
  v13 = *(void (***)(WTF::StringPrintStream *__hidden))(v12 - 16);
  v15 = *(_BYTE *)(v12 - 8);
  *(_DWORD *)(a2 + 68) = v11 - 1;
  v76 = (uint64_t)"WasmFunctionParser.h:";
  LODWORD(v77) = 21;
  LODWORD(v70) = 1581;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v76, (unsigned int *)&v70, (int **)&v73);
  v23 = v73;
  if (!v73)
    goto LABEL_23;
  v73 = 0;
  if (*(_DWORD *)v23 == 2)
  {
    WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
  }
  else
  {
    *(_DWORD *)v23 -= 2;
  }
  v24 = *(_QWORD *)(a2 + 14576);
  v25 = v74[0];
  if (*(_DWORD *)(v24 + 100) <= v74[0])
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x198D22D9CLL);
  }
  v26 = *(_QWORD *)(v24 + 88);
  v76 = 227;
  v77 = *(_QWORD *)(v26 + 8 * v74[0]);
  if ((JSC::Wasm::isSubtype(v14, (unint64_t)v13, 227, v77, v19, v20, v21, v22) & 1) != 0)
  {
    v29 = *(JSC::Wasm::TypeDefinition **)(v26 + 8 * v25);
    if (*((_DWORD *)v29 + 8) == 4)
    {
      v67 = *(JSC::Wasm::TypeInformation **)(v26 + 8 * v25);
      v44 = (unsigned int *)*((_QWORD *)v29 + 1);
      v45 = *(WTF **)v44;
      v29 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v44 + 8) + 8 * v44[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v29))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v67, v46, v47, v48, v49, v50, v51, v52);
        if (v60)
        {
          v29 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v29 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v29, v45, v54, v55, v56, v57, v58, v59);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v67, v29, v61, v62, v63, v64, v65, v66);
        }
      }
    }
    v30 = *((_DWORD *)v29 + 8);
    if (v30 == 5)
    {
      v29 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v29 + 1);
      v30 = *((_DWORD *)v29 + 8);
    }
    if (v30 == 1)
    {
      *(_QWORD *)(a3 + 8) = v14;
      *(_QWORD *)(a3 + 16) = v13;
      *(_BYTE *)(a3 + 24) = v15;
      v31 = v74[1];
      *(_DWORD *)a3 = v25;
      *(_DWORD *)(a3 + 4) = v31;
      v32 = *((_QWORD *)v29 + 1) + 32 * v31;
      v33 = *(_QWORD *)(v32 + 16);
      v34 = *(_OWORD *)v32;
      *(_BYTE *)(a3 + 56) = *(_BYTE *)(v32 + 24);
      *(_OWORD *)(a3 + 32) = v34;
      *(_QWORD *)(a3 + 48) = v33;
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v70 = " type index points into a non struct type";
    v71 = 42;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral>(v69, (uint64_t)v75, (uint64_t)&v70, v27, v28);
    v43 = v69[0];
  }
  else
  {
    v70 = " structref to type ";
    v71 = 20;
    v69[0] = v14;
    v69[1] = v13;
    v68[0] = " expected ";
    v68[1] = 11;
    JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v72, a2, (uint64_t)v75, (uint64_t)&v70, (JSC::Wasm::Type *)v69, (uint64_t)v68, (JSC::Wasm::Type *)&v76, v27, v28);
    v43 = v72;
  }
LABEL_18:
  *(_QWORD *)a1 = v43;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, JSC::Wasm::Type *a5, uint64_t a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  double v37;
  float v38;
  float v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF::PrintStream *v52;
  float v53;
  double v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  char v135;
  void (**v136)(WTF::StringPrintStream *__hidden);
  WTF *v137;
  __int128 v138;
  _BYTE v139[128];
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v136 = off_1E3572250;
  v137 = (WTF *)v139;
  v138 = xmmword_199122F80;
  v139[0] = 0;
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v133, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v133 = (WTF::StringImpl *)v16;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v132, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v24 = v141;
  if (!v141)
  {
    v132 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v132);
  v24 = v141;
  if (v141 != (WTF *)v143)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a4)
  {
    v26 = *(_QWORD *)(a4 + 8);
    v14 = v26 != 0;
    v27 = v26 - 1;
    if (!v14)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v27, (uint64_t)&v133, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v133 = (WTF::StringImpl *)v28;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v131, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v36 = v141;
  if (!v141)
  {
    v131 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v131);
  v36 = v141;
  if (v141 != (WTF *)v143)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v130, a2, a5, v37, v38);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a6)
  {
    v40 = *(_QWORD *)(a6 + 8);
    v14 = v40 != 0;
    v41 = v40 - 1;
    if (!v14)
      v41 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v41, (uint64_t)&v133, v39);
  }
  else
  {
    v42 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = 0;
    *(_BYTE *)(v42 + 16) = 0;
    v133 = (WTF::StringImpl *)v42;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v135, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v50 = v141;
  if (!v141)
  {
    v133 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v133);
  v50 = v141;
  if (v141 != (WTF *)v143)
LABEL_36:
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  v51 = (WTF *)((uint64_t (*)(_QWORD))v136[4])(&v136);
  v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v51 + 32))(v51);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v140, v53);
  WTF::printExpectedCStringHelper(v52, "StringView", &v140);
  if ((_DWORD)v141 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v141])(&v135, &v140);
  v54 = (*(double (**)(WTF *))(*(_QWORD *)v51 + 40))(v51);
  WTF::printInternal(v51, (WTF::PrintStream *)&v132, v55, v56, v57, v58, v59, v60, v54, v61);
  WTF::printInternal(v51, (WTF::PrintStream *)&v131, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v51, (WTF::PrintStream *)&v130, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v51, (WTF::PrintStream *)&v133, v78, v79, v80, v81, v82, v83, v84, v85);
  v136[5]((WTF::StringPrintStream *)&v136);
  v93 = v133;
  v133 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v130;
  v130 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v131;
  v131 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v132;
  v132 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v137;
  if (v137)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v137, v138, (uint64_t *)&v140);
    v97 = v137;
    *a1 = v140;
    if (v97 == (WTF *)v139)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v97, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  double v23;
  float v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF::PrintStream *v38;
  float v39;
  double v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  char v103;
  void (**v104)(WTF::StringPrintStream *__hidden);
  WTF *v105;
  __int128 v106;
  _BYTE v107[128];
  void (**v108)(WTF::StringPrintStream *__hidden);
  WTF *v109;
  __int128 v110;
  _BYTE v111[128];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v104 = off_1E3572250;
  v105 = (WTF *)v107;
  v106 = xmmword_199122F80;
  v107[0] = 0;
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v101, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v101 = (WTF::StringImpl *)v14;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v100, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v22 = v109;
  if (!v109)
  {
    v100 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v100);
  v22 = v109;
  if (v109 != (WTF *)v111)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v99, a2, a4, v23, v24);
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a5)
  {
    v26 = *(_QWORD *)(a5 + 8);
    v12 = v26 != 0;
    v27 = v26 - 1;
    if (!v12)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v27, (uint64_t)&v101, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v101 = (WTF::StringImpl *)v28;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v103, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v36 = v109;
  if (!v109)
  {
    v101 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v101);
  v36 = v109;
  if (v109 != (WTF *)v111)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v37 = (WTF *)((uint64_t (*)(_QWORD))v104[4])(&v104);
  v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v37 + 32))(v37);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v108, v39);
  WTF::printExpectedCStringHelper(v38, "StringView", &v108);
  if ((_DWORD)v109 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v109])(&v103, &v108);
  v40 = (*(double (**)(WTF *))(*(_QWORD *)v37 + 40))(v37);
  WTF::printInternal(v37, (WTF::PrintStream *)&v100, v41, v42, v43, v44, v45, v46, v40, v47);
  WTF::printInternal(v37, (WTF::PrintStream *)&v99, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v37, (WTF::PrintStream *)&v101, v56, v57, v58, v59, v60, v61, v62, v63);
  v104[5]((WTF::StringPrintStream *)&v104);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v99;
  v99 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v100;
  v100 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v105;
  if (v105)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v105, v106, (uint64_t *)&v108);
    v74 = v105;
    *a1 = v108;
    if (v74 == (WTF *)v107)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::checkBranchTarget(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  BOOL v10;
  JSC::Wasm::FunctionSignature *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  float v21;
  uint64_t v22;
  JSC::Wasm::FunctionSignature *v23;
  int32x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  double v36;
  float v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  int v57;
  WTF::StringImpl *v58;
  double v59[3];
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  int8x16_t v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  const char *v65;
  WTF *v66;
  __int128 v67;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a3 + 8);
  v10 = v9 == 2;
  v11 = *(JSC::Wasm::FunctionSignature **)a3;
  v12 = 12;
  if (v9 == 2)
    v12 = 8;
  v13 = *(_DWORD *)((char *)v11 + v12);
  if (!v13)
  {
LABEL_14:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v16 = *(unsigned int *)(a2 + 68);
  if (v16 < v13)
  {
    v24 = vdup_n_s32(v9 == 3);
    v25.i64[0] = v24.u32[0];
    v25.i64[1] = v24.u32[1];
    v26 = (int8x16_t)vdupq_n_s64(0x10uLL);
    v26.i64[0] = (uint64_t)"branch to block";
    v27 = (int8x16_t)vdupq_n_s64(0x17uLL);
    v27.i64[0] = (uint64_t)"branch out of function";
    v63 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v25, 0x3FuLL)), v27, v26);
    v61 = " on expression stack of size ";
    v62 = 30;
    v60 = v16;
    *(_QWORD *)&v59[0] = ", but block, ";
    *(_QWORD *)&v59[1] = 14;
    v65 = (const char *)off_1E3572250;
    v66 = (WTF *)v68;
    v67 = xmmword_199122F80;
    v68[0] = 0;
    JSC::Wasm::FunctionSignature::dump(v11, (WTF::PrintStream *)&v65);
    (*((void (**)(const char **))v65 + 5))(&v65);
    v35 = v66;
    if (v66)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v66, v67, (uint64_t *)&v58);
      v35 = v66;
      if (v66 == (WTF *)v68)
        goto LABEL_24;
    }
    else
    {
      v58 = 0;
    }
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
LABEL_24:
    v65 = " expects ";
    v66 = (WTF *)10;
    v38 = 12;
    if (*(_DWORD *)(a3 + 8) == 2)
      v38 = 8;
    v57 = *(_DWORD *)(*(_QWORD *)a3 + v38);
    v55 = " values";
    v56 = 8;
    JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v64, (uint64_t)&v63, (uint64_t)&v61, &v60, (uint64_t)v59, (WTF::PrintStream *)&v58, (uint64_t)&v65, &v57, v36, v37, (uint64_t)&v55);
    *(_QWORD *)a1 = v64;
    a1[8] = 1;
    v46 = v58;
    v58 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return;
  }
  v17 = 0;
  v18 = v16 - v13;
  while (1)
  {
    v19 = v10 ? *((_DWORD *)v11 + 3) + v17 : v17;
    v20 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * (v18 + v17));
    if ((JSC::Wasm::isSubtype(*v20, v20[1], *(_QWORD *)(*(_QWORD *)v11 + 16 * v19), *(_QWORD *)(*(_QWORD *)v11 + 16 * v19 + 8), a5, a6, a7, a8) & 1) == 0)break;
    ++v17;
    v10 = *(_DWORD *)(a3 + 8) == 2;
    v11 = *(JSC::Wasm::FunctionSignature **)a3;
    if (*(_DWORD *)(a3 + 8) == 2)
      v22 = 8;
    else
      v22 = 12;
    if (v17 >= *(unsigned int *)((char *)v11 + v22))
      goto LABEL_14;
  }
  LODWORD(v60) = v17;
  v65 = "branch's stack type is not a subtype of block's type branch target type. Stack value has type ";
  v66 = (WTF *)95;
  v63 = *(int8x16_t *)(*(_QWORD *)(a2 + 56) + 24 * (v18 + v17));
  v61 = " but branch target expects a value of ";
  v62 = 39;
  v23 = *(JSC::Wasm::FunctionSignature **)a3;
  if (*(_DWORD *)(a3 + 8) == 2)
    LODWORD(v17) = *((_DWORD *)v23 + 3) + v17;
  *(_OWORD *)v59 = *(_OWORD *)(*(_QWORD *)v23 + 16 * v17);
  v55 = " at index ";
  v56 = 11;
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,unsigned int>(&v64, a2, (uint64_t)&v65, (JSC::Wasm::Type *)&v63, (uint64_t)&v61, (JSC::Wasm::Type *)v59, (uint64_t)&v55, &v60, v59[0], v21);
  *(_QWORD *)a1 = v64;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::atomicLoad(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  size_t v52;
  unint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  char v69;
  float v70;
  void (**v71)(WTF::StringPrintStream *__hidden);
  char *v72;
  unint64_t *v73;
  uint64_t v74;
  int v75;
  WTF *v76;
  int v77;
  WTF::StringImpl *v78;
  void (**v79)(WTF::StringPrintStream *__hidden);
  __int128 v80;
  const char *v81;
  uint64_t v82;

  *(_QWORD *)&v80 = a4;
  *((_QWORD *)&v80 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14576) + 104) == -1)
  {
    v81 = "atomic instruction without memory";
    v82 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v79, (uint64_t)&v81, a6, a7);
LABEL_50:
    v71 = v79;
    goto LABEL_51;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_53;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_53;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_53:
    v72 = "can't get load alignment";
    v73 = (unint64_t *)a2;
    v74 = 25;
LABEL_56:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v72, v73, v74, &v81, a7);
    goto LABEL_48;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v69 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v69, &v81, v70);
    *(_QWORD *)a1 = v81;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_55;
  v17 = 0;
  v30 = 0;
  v7 = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 |= (v26 & 0x7F) << v30;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_55;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_55:
    v72 = "can't get load offset";
    v73 = (unint64_t *)a2;
    v74 = 22;
    goto LABEL_56;
  }
  v36 = *(_DWORD *)(a2 + 68);
  if (!v36)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, &v81, a7);
LABEL_48:
    v71 = (void (**)(WTF::StringPrintStream *__hidden))v81;
LABEL_51:
    *(_QWORD *)a1 = v71;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v37 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v36 - 24);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v81 = "WasmFunctionParser.h:";
  LODWORD(v82) = 21;
  LODWORD(v79) = 616;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v81, (unsigned int *)&v79, (int **)&v78);
  v45 = v78;
  if (!v78)
    goto LABEL_57;
  v78 = 0;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
    WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  if (v37 != 255)
  {
    v77 = a3;
    v81 = " pointer type mismatch";
    v82 = 23;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v79, &v77, (uint64_t)&v81);
    goto LABEL_50;
  }
  v46 = *(_QWORD *)(a2 + 48);
  v47 = *(_QWORD *)(v46 + 32);
  v48 = *(uint64_t **)(v46 + 16);
  v49 = *v48;
  v50 = v48[1827];
  v51 = *(unsigned int *)(v47 + 40);
  v52 = *(unsigned int *)(v47 + 44);
  v53 = v52 + 5;
  if (v52 + 5 > v51)
  {
    v64 = v51 + (v51 >> 2);
    if (v64 >= 0x10)
      v65 = v64 + 1;
    else
      v65 = 16;
    if (v65 <= v53)
      v66 = v52 + 5;
    else
      v66 = v65;
    if (!HIDWORD(v66))
    {
      v75 = v66;
      v76 = *(WTF **)(v47 + 32);
      v67 = (void *)WTF::fastMalloc((WTF *)v66);
      *(_DWORD *)(v47 + 40) = v75;
      *(_QWORD *)(v47 + 32) = v67;
      memcpy(v67, v76, v52);
      if (v76)
      {
        if (*(WTF **)(v47 + 32) == v76)
        {
          *(_QWORD *)(v47 + 32) = 0;
          *(_DWORD *)(v47 + 40) = 0;
        }
        WTF::fastFree((unint64_t)v76, v68, v39, v40, v41, v42, v43, v44);
      }
      goto LABEL_29;
    }
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x198D23D7CLL);
  }
LABEL_29:
  *(_DWORD *)(v47 + 44) = v53;
  *(_BYTE *)(*(_QWORD *)(v47 + 32) + v52) = v49 - v50;
  *(_DWORD *)(*(_QWORD *)(v47 + 32) + v52 + 1) = v7;
  v54 = *(_DWORD *)(a2 + 68);
  if (v54 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &v80, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    v55 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v54);
    *v55 = a4;
    v55[1] = a5;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::atomicStore(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4, uint64_t a5, double a6, float a7)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  char v57;
  unsigned int *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  size_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  const void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  float v96;
  char *v97;
  unint64_t *v98;
  uint64_t v99;
  void (**v100)(WTF::StringPrintStream *__hidden);
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  unsigned int v104;
  char *v105;
  unint64_t *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  void (**v110)(WTF::StringPrintStream *__hidden);
  const char *v111;
  uint64_t v112;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 14576) + 104) == -1)
  {
    v111 = "atomic instruction without memory";
    v112 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v110, (uint64_t)&v111, a6, a7);
LABEL_68:
    v100 = v110;
    goto LABEL_69;
  }
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)a2;
  v11 = v9 > *(_QWORD *)a2;
  v12 = v9 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_71;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = 5;
  if (v12 < 5)
    v20 = v12;
  v21 = v20 - 1;
  *(_QWORD *)a2 = v10 + 1;
  v22 = v19 + v10;
  v23 = v10 + 2;
  while (1)
  {
    v24 = *(char *)(v22 + v16);
    v18 |= (v24 & 0x7F) << v17;
    if ((v24 & 0x80000000) == 0)
      break;
    if (v21 == v16)
      goto LABEL_71;
    LOBYTE(v25) = v23 + v16;
    *(_QWORD *)a2 = v23 + v16;
    v17 += 7;
    if (v12 == ++v16)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v16 == 4 && *(unsigned __int8 *)(v22 + v16) >= 0x10u)
  {
LABEL_71:
    v105 = "can't get store alignment";
    v106 = (unint64_t *)a2;
    v107 = 26;
LABEL_74:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v105, v106, v107, &v111, a7);
    goto LABEL_59;
  }
  if (v18 != JSC::Wasm::memoryLog2Alignment())
  {
    v95 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v18, " does not match against atomic op's natural alignment ", 55, 1 << v95, &v111, v96);
    *(_QWORD *)a1 = v111;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)a2;
  v11 = v26 > *(_QWORD *)a2;
  v28 = v26 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_73;
  v16 = 0;
  v29 = 0;
  a3 = 0;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = 5;
  if (v28 < 5)
    v31 = v28;
  v32 = v31 - 1;
  *(_QWORD *)a2 = v27 + 1;
  v33 = v30 + v27;
  v34 = v27 + 2;
  while (1)
  {
    v25 = *(char *)(v33 + v16);
    a3 |= (v25 & 0x7F) << v29;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v32 == v16)
      goto LABEL_73;
    LOBYTE(v25) = v34 + v16;
    *(_QWORD *)a2 = v34 + v16;
    v29 += 7;
    if (v28 == ++v16)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v16 == 4 && v25 >= 0x10u)
  {
LABEL_73:
    v105 = "can't get store offset";
    v106 = (unint64_t *)a2;
    v107 = 23;
    goto LABEL_74;
  }
  v35 = *(_DWORD *)(a2 + 68);
  if (v35)
  {
    v36 = *(_QWORD *)(a2 + 56) + 24 * v35;
    v38 = *(_QWORD *)(v36 - 24);
    v37 = *(_QWORD *)(v36 - 16);
    *(_DWORD *)(a2 + 68) = v35 - 1;
    v111 = "WasmFunctionParser.h:";
    LODWORD(v112) = 21;
    LODWORD(v110) = 638;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v111, (unsigned int *)&v110, (int **)&v109);
    v46 = v109;
    if (!v109)
    {
      __break(0xC471u);
      goto LABEL_79;
    }
    v109 = 0;
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
    v47 = *(_DWORD *)(a2 + 68);
    if (v47)
    {
      v48 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v47 - 24);
      *(_DWORD *)(a2 + 68) = v47 - 1;
      v111 = "WasmFunctionParser.h:";
      LODWORD(v112) = 21;
      LODWORD(v110) = 639;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v111, (unsigned int *)&v110, (int **)&v108);
      v56 = v108;
      if (!v108)
      {
        __break(0xC471u);
        JUMPOUT(0x198D24268);
      }
      v108 = 0;
      if (*(_DWORD *)v56 == 2)
      {
        WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
      }
      else
      {
        *(_DWORD *)v56 -= 2;
      }
      if (v48 != 255)
      {
        v101 = a2 + 14608;
        v102 = " pointer type mismatch";
        v103 = 23;
LABEL_67:
        v111 = v102;
        v112 = v103;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v110, v101, (uint64_t)&v111);
        goto LABEL_68;
      }
      if (a4 != v38)
      {
LABEL_66:
        v101 = a2 + 14608;
        v102 = " value type mismatch";
        v103 = 21;
        goto LABEL_67;
      }
      if (a4 - 239 < 2 || a4 == 227)
      {
        if (a5 == v37)
          v57 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
        else
          v57 = 0;
        if ((v57 & 1) == 0)
          goto LABEL_66;
      }
      else
      {
        if (a5 == v37)
          v104 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
        else
          v104 = 1;
        if (v104 == 1)
          goto LABEL_66;
      }
      v58 = *(unsigned int **)(a2 + 48);
      v59 = *v58 - 2;
      if (HIDWORD(v59))
      {
        __break(0xC471u);
        JUMPOUT(0x198D24270);
      }
      *v58 = v59;
      v60 = *((_QWORD *)v58 + 4);
      v61 = (uint64_t *)*((_QWORD *)v58 + 2);
      v62 = *v61;
      v63 = v61[1827];
      v64 = *(unsigned int *)(v60 + 40);
      v65 = *(unsigned int *)(v60 + 44);
      v66 = v65 + 5;
      if (v65 + 5 <= v64)
      {
LABEL_40:
        *(_DWORD *)(v60 + 44) = v66;
        *(_BYTE *)(*(_QWORD *)(v60 + 32) + v65) = v62 - v63;
        *(_DWORD *)(*(_QWORD *)(v60 + 32) + v65 + 1) = a3;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      }
      v83 = v64 + (v64 >> 2);
      if (v83 >= 0x10)
        v84 = v83 + 1;
      else
        v84 = 16;
      if (v84 <= v66)
        v85 = v65 + 5;
      else
        v85 = v84;
      if (!HIDWORD(v85))
      {
        v86 = *(const void **)(v60 + 32);
        v87 = (void *)WTF::fastMalloc((WTF *)v85);
        *(_DWORD *)(v60 + 40) = v85;
        *(_QWORD *)(v60 + 32) = v87;
        memcpy(v87, v86, v65);
        if (v86)
        {
          if (*(const void **)(v60 + 32) == v86)
          {
            *(_QWORD *)(v60 + 32) = 0;
            *(_DWORD *)(v60 + 40) = 0;
          }
          WTF::fastFree((unint64_t)v86, v88, v89, v90, v91, v92, v93, v94);
        }
        goto LABEL_40;
      }
      __break(0xC471u);
LABEL_79:
      JUMPOUT(0x198D24260);
    }
    v97 = "store pointer";
    v98 = (unint64_t *)a2;
    v99 = 14;
  }
  else
  {
    v97 = "store value";
    v98 = (unint64_t *)a2;
    v99 = 12;
  }
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v98, 26, v97, v99, &v111, a7);
LABEL_59:
  v100 = (void (**)(WTF::StringPrintStream *__hidden))v111;
LABEL_69:
  *(_QWORD *)a1 = v100;
  *(_BYTE *)(a1 + 8) = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::atomicBinaryRMW(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  char v58;
  unsigned int *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  size_t v66;
  unint64_t v67;
  unsigned int v68;
  _QWORD *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  void *v89;
  void *v90;
  char v91;
  float v92;
  char *v93;
  unint64_t *v94;
  uint64_t v95;
  void (**v96)(WTF::StringPrintStream *__hidden);
  const char *v97;
  uint64_t v98;
  unsigned int v99;
  char *v100;
  unint64_t *v101;
  uint64_t v102;
  int v103;
  WTF *v104;
  int v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  void (**v108)(WTF::StringPrintStream *__hidden);
  __int128 v109;
  const char *v110;
  uint64_t v111;

  *(_QWORD *)&v109 = a4;
  *((_QWORD *)&v109 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14576) + 104) == -1)
  {
    v110 = "atomic instruction without memory";
    v111 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v108, (uint64_t)&v110, a6, a7);
LABEL_71:
    v96 = v108;
    goto LABEL_72;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_74;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_74;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_74:
    v100 = "can't get load alignment";
    v101 = (unint64_t *)a2;
    v102 = 25;
LABEL_77:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v100, v101, v102, &v110, a7);
    goto LABEL_62;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v91 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v91, &v110, v92);
    *(_QWORD *)a1 = v110;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_76;
  v17 = 0;
  v30 = 0;
  v7 = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 |= (v26 & 0x7F) << v30;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_76;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_76:
    v100 = "can't get load offset";
    v101 = (unint64_t *)a2;
    v102 = 22;
    goto LABEL_77;
  }
  v36 = *(_DWORD *)(a2 + 68);
  if (!v36)
  {
    v93 = "value";
    v94 = (unint64_t *)a2;
    v95 = 6;
LABEL_61:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v94, 26, v93, v95, &v110, a7);
LABEL_62:
    v96 = (void (**)(WTF::StringPrintStream *__hidden))v110;
LABEL_72:
    *(_QWORD *)a1 = v96;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v37 = *(_QWORD *)(a2 + 56) + 24 * v36;
  v39 = *(_QWORD *)(v37 - 24);
  v38 = *(_QWORD *)(v37 - 16);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v110 = "WasmFunctionParser.h:";
  LODWORD(v111) = 21;
  LODWORD(v108) = 660;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v110, (unsigned int *)&v108, (int **)&v107);
  v47 = v107;
  if (!v107)
  {
    __break(0xC471u);
    goto LABEL_82;
  }
  v107 = 0;
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
  }
  else
  {
    *(_DWORD *)v47 -= 2;
  }
  v48 = *(_DWORD *)(a2 + 68);
  if (!v48)
  {
    v93 = "pointer";
    v94 = (unint64_t *)a2;
    v95 = 8;
    goto LABEL_61;
  }
  v49 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v48 - 24);
  *(_DWORD *)(a2 + 68) = v48 - 1;
  v110 = "WasmFunctionParser.h:";
  LODWORD(v111) = 21;
  LODWORD(v108) = 661;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v110, (unsigned int *)&v108, (int **)&v106);
  v57 = v106;
  if (!v106)
  {
    __break(0xC471u);
    JUMPOUT(0x198D24798);
  }
  v106 = 0;
  if (*(_DWORD *)v57 == 2)
  {
    WTF::StringImpl::~StringImpl(v57, v50, v51, v52, v53, v54, v55, v56);
    WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
  }
  else
  {
    *(_DWORD *)v57 -= 2;
  }
  if (v49 != 255)
  {
    v105 = a3;
    v97 = " pointer type mismatch";
    v98 = 23;
LABEL_70:
    v110 = v97;
    v111 = v98;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v108, &v105, (uint64_t)&v110);
    goto LABEL_71;
  }
  if (a4 != v39)
  {
LABEL_69:
    v105 = a3;
    v97 = " value type mismatch";
    v98 = 21;
    goto LABEL_70;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (a5 == v38)
      v58 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v58 = 0;
    if ((v58 & 1) == 0)
      goto LABEL_69;
  }
  else
  {
    if (a5 == v38)
      v99 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v99 = 1;
    if (v99 == 1)
      goto LABEL_69;
  }
  v59 = *(unsigned int **)(a2 + 48);
  v60 = *v59 - 1;
  if (HIDWORD(v60))
  {
    __break(0xC471u);
    JUMPOUT(0x198D247A0);
  }
  *v59 = v60;
  v61 = *((_QWORD *)v59 + 4);
  v62 = (uint64_t *)*((_QWORD *)v59 + 2);
  v63 = *v62;
  v64 = v62[1827];
  v65 = *(unsigned int *)(v61 + 40);
  v66 = *(unsigned int *)(v61 + 44);
  v67 = v66 + 5;
  if (v66 + 5 > v65)
  {
    v86 = v65 + (v65 >> 2);
    if (v86 >= 0x10)
      v87 = v86 + 1;
    else
      v87 = 16;
    if (v87 <= v67)
      v88 = v66 + 5;
    else
      v88 = v87;
    if (!HIDWORD(v88))
    {
      v103 = v88;
      v104 = *(WTF **)(v61 + 32);
      v89 = (void *)WTF::fastMalloc((WTF *)v88);
      *(_DWORD *)(v61 + 40) = v103;
      *(_QWORD *)(v61 + 32) = v89;
      memcpy(v89, v104, v66);
      if (v104)
      {
        if (*(WTF **)(v61 + 32) == v104)
        {
          *(_QWORD *)(v61 + 32) = 0;
          *(_DWORD *)(v61 + 40) = 0;
        }
        WTF::fastFree((unint64_t)v104, v90, v51, v52, v53, v54, v55, v56);
      }
      goto LABEL_40;
    }
    __break(0xC471u);
LABEL_82:
    JUMPOUT(0x198D24790);
  }
LABEL_40:
  *(_DWORD *)(v61 + 44) = v67;
  *(_BYTE *)(*(_QWORD *)(v61 + 32) + v66) = v63 - v64;
  *(_DWORD *)(*(_QWORD *)(v61 + 32) + v66 + 1) = v7;
  v68 = *(_DWORD *)(a2 + 68);
  if (v68 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &v109, v51, v52, v53, v54, v55, v56);
  }
  else
  {
    v69 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v68);
    *v69 = a4;
    v69[1] = a5;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::atomicWait(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4, uint64_t a5, double a6, float a7)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  WTF::StringImpl *v58;
  unsigned int v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  char v69;
  unsigned int *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  size_t v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  const void *v107;
  void *v108;
  void *v109;
  void (**v110)(WTF::StringPrintStream *__hidden);
  char v111;
  float v112;
  char *v113;
  unint64_t *v114;
  uint64_t v115;
  void (**v116)(WTF::StringPrintStream *__hidden);
  const char *v117;
  uint64_t v118;
  unsigned int v119;
  char *v120;
  unint64_t *v121;
  uint64_t v122;
  int v123;
  int v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  void (**v128)(WTF::StringPrintStream *__hidden);
  const char *v129;
  uint64_t v130;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 14576) + 104) == -1)
  {
    v129 = "atomic instruction without memory";
    v130 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v128, (uint64_t)&v129, a6, a7);
    v110 = v128;
LABEL_69:
    *(_QWORD *)a1 = v110;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)a2;
  v11 = v9 > *(_QWORD *)a2;
  v12 = v9 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_83;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = 5;
  if (v12 < 5)
    v20 = v12;
  v21 = v20 - 1;
  *(_QWORD *)a2 = v10 + 1;
  v22 = v19 + v10;
  v23 = v10 + 2;
  while (1)
  {
    v24 = *(char *)(v22 + v16);
    v18 |= (v24 & 0x7F) << v17;
    if ((v24 & 0x80000000) == 0)
      break;
    if (v21 == v16)
      goto LABEL_83;
    LOBYTE(v25) = v23 + v16;
    *(_QWORD *)a2 = v23 + v16;
    v17 += 7;
    if (v12 == ++v16)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v16 == 4 && *(unsigned __int8 *)(v22 + v16) >= 0x10u)
  {
LABEL_83:
    v120 = "can't get load alignment";
    v121 = (unint64_t *)a2;
    v122 = 25;
LABEL_86:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v120, v121, v122, &v129, a7);
    goto LABEL_68;
  }
  if (v18 != JSC::Wasm::memoryLog2Alignment())
  {
    v111 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v18, " does not match against atomic op's natural alignment ", 55, 1 << v111, &v129, v112);
    *(_QWORD *)a1 = v129;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)a2;
  v11 = v26 > *(_QWORD *)a2;
  v28 = v26 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_85;
  v16 = 0;
  v29 = 0;
  v18 = 0;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = 5;
  if (v28 < 5)
    v31 = v28;
  v32 = v31 - 1;
  *(_QWORD *)a2 = v27 + 1;
  v33 = v30 + v27;
  v34 = v27 + 2;
  while (1)
  {
    v25 = *(char *)(v33 + v16);
    v18 |= (v25 & 0x7F) << v29;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v32 == v16)
      goto LABEL_85;
    LOBYTE(v25) = v34 + v16;
    *(_QWORD *)a2 = v34 + v16;
    v29 += 7;
    if (v28 == ++v16)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v16 == 4 && v25 >= 0x10u)
  {
LABEL_85:
    v120 = "can't get load offset";
    v121 = (unint64_t *)a2;
    v122 = 22;
    goto LABEL_86;
  }
  v35 = *(_DWORD *)(a2 + 68);
  if (!v35)
  {
    v113 = "timeout";
    v114 = (unint64_t *)a2;
    v115 = 8;
LABEL_67:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v114, 26, v113, v115, &v129, a7);
LABEL_68:
    v110 = (void (**)(WTF::StringPrintStream *__hidden))v129;
    goto LABEL_69;
  }
  v123 = a3;
  v36 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v35 - 24);
  *(_DWORD *)(a2 + 68) = v35 - 1;
  v129 = "WasmFunctionParser.h:";
  LODWORD(v130) = 21;
  LODWORD(v128) = 712;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v129, (unsigned int *)&v128, (int **)&v127);
  v44 = v127;
  if (!v127)
  {
    __break(0xC471u);
    goto LABEL_92;
  }
  v127 = 0;
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v45 = *(_DWORD *)(a2 + 68);
  if (!v45)
  {
    v113 = "value";
    v114 = (unint64_t *)a2;
    v115 = 6;
    goto LABEL_67;
  }
  v46 = a1;
  v47 = *(_QWORD *)(a2 + 56) + 24 * v45;
  v49 = *(_QWORD *)(v47 - 24);
  v48 = *(_QWORD *)(v47 - 16);
  *(_DWORD *)(a2 + 68) = v45 - 1;
  v129 = "WasmFunctionParser.h:";
  LODWORD(v130) = 21;
  LODWORD(v128) = 713;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v129, (unsigned int *)&v128, (int **)&v126);
  v58 = v126;
  if (!v126)
  {
    __break(0xC471u);
    JUMPOUT(0x198D24DA0);
  }
  v126 = 0;
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl(v58, v50, v51, v52, v53, v54, v55, v56);
    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
  }
  else
  {
    *(_DWORD *)v58 -= 2;
  }
  v59 = *(_DWORD *)(a2 + 68);
  if (!v59)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "pointer", 8, &v129, v57);
    v116 = (void (**)(WTF::StringPrintStream *__hidden))v129;
LABEL_81:
    *(_QWORD *)v46 = v116;
    *(_BYTE *)(v46 + 8) = 1;
    return;
  }
  v60 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v59 - 24);
  *(_DWORD *)(a2 + 68) = v59 - 1;
  v129 = "WasmFunctionParser.h:";
  LODWORD(v130) = 21;
  LODWORD(v128) = 714;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v129, (unsigned int *)&v128, (int **)&v125);
  v68 = v125;
  if (!v125)
  {
    __break(0xC471u);
    JUMPOUT(0x198D24DA8);
  }
  v125 = 0;
  if (*(_DWORD *)v68 == 2)
  {
    WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  }
  else
  {
    *(_DWORD *)v68 -= 2;
  }
  if (v60 != 255)
  {
    v124 = v123;
    v117 = " pointer type mismatch";
LABEL_73:
    v118 = 23;
LABEL_80:
    v129 = v117;
    v130 = v118;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v128, &v124, (uint64_t)&v129);
    v116 = v128;
    goto LABEL_81;
  }
  if (a4 != v49)
  {
LABEL_79:
    v124 = v123;
    v117 = " value type mismatch";
    v118 = 21;
    goto LABEL_80;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (a5 == v48)
      v69 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v69 = 0;
    if ((v69 & 1) == 0)
      goto LABEL_79;
  }
  else
  {
    if (a5 == v48)
      v119 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v119 = 1;
    if (v119 == 1)
      goto LABEL_79;
  }
  if (v36 != 254)
  {
    v124 = v123;
    v117 = " timeout type mismatch";
    goto LABEL_73;
  }
  v70 = *(unsigned int **)(a2 + 48);
  v71 = *v70 - 2;
  if (HIDWORD(v71))
  {
    __break(0xC471u);
    JUMPOUT(0x198D24DB0);
  }
  *v70 = v71;
  v72 = *((_QWORD *)v70 + 4);
  v73 = (uint64_t *)*((_QWORD *)v70 + 2);
  v74 = *v73;
  v75 = v73[1827];
  v76 = *(unsigned int *)(v72 + 40);
  v77 = *(unsigned int *)(v72 + 44);
  v78 = v77 + 5;
  if (v77 + 5 <= v76)
    goto LABEL_45;
  v104 = v76 + (v76 >> 2);
  if (v104 >= 0x10)
    v105 = v104 + 1;
  else
    v105 = 16;
  if (v105 <= v78)
    v106 = v77 + 5;
  else
    v106 = v105;
  if (HIDWORD(v106))
  {
    __break(0xC471u);
LABEL_92:
    JUMPOUT(0x198D24D98);
  }
  v107 = *(const void **)(v72 + 32);
  v108 = (void *)WTF::fastMalloc((WTF *)v106);
  *(_DWORD *)(v72 + 40) = v106;
  *(_QWORD *)(v72 + 32) = v108;
  memcpy(v108, v107, v77);
  if (v107)
  {
    if (*(const void **)(v72 + 32) == v107)
    {
      *(_QWORD *)(v72 + 32) = 0;
      *(_DWORD *)(v72 + 40) = 0;
    }
    WTF::fastFree((unint64_t)v107, v109, v62, v63, v64, v65, v66, v67);
  }
LABEL_45:
  *(_DWORD *)(v72 + 44) = v78;
  *(_BYTE *)(*(_QWORD *)(v72 + 32) + v77) = v74 - v75;
  *(_DWORD *)(*(_QWORD *)(v72 + 32) + v77 + 1) = v18;
  v79 = *(_DWORD *)(a2 + 68);
  if (v79 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &JSC::Wasm::Types::I32, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(a2 + 56) + 24 * v79) = xmmword_19915A130;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)v46 = 0;
  *(_BYTE *)(v46 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::atomicCompareExchange(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  char v70;
  char v71;
  unsigned int *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  size_t v79;
  unint64_t v80;
  unsigned int v81;
  _QWORD *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  void *v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  char v113;
  float v114;
  char *v115;
  unint64_t *v116;
  uint64_t v117;
  void (**v118)(WTF::StringPrintStream *__hidden);
  const char *v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  int __src;
  void *__srca;
  uint64_t v125;
  int v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  void (**v130)(WTF::StringPrintStream *__hidden);
  __int128 v131;
  const char *v132;
  uint64_t v133;

  *(_QWORD *)&v131 = a4;
  *((_QWORD *)&v131 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14576) + 104) == -1)
  {
    v132 = "atomic instruction without memory";
    v133 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v130, (uint64_t)&v132, a6, a7);
    v112 = v130;
LABEL_69:
    *(_QWORD *)a1 = v112;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_92;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_92;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_92:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load alignment", (unint64_t *)a2, 25, &v132, a7);
    v112 = (void (**)(WTF::StringPrintStream *__hidden))v132;
    goto LABEL_69;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v113 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v113, &v132, v114);
    *(_QWORD *)a1 = v132;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v125 = a1;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_94;
  v17 = 0;
  v30 = 0;
  v7 = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 |= (v26 & 0x7F) << v30;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_94;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_94:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load offset", (unint64_t *)a2, 22, &v132, a7);
    goto LABEL_75;
  }
  v36 = *(_DWORD *)(a2 + 68);
  if (!v36)
  {
    v115 = "value";
    v116 = (unint64_t *)a2;
    v117 = 6;
LABEL_74:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v116, 26, v115, v117, &v132, a7);
LABEL_75:
    v118 = (void (**)(WTF::StringPrintStream *__hidden))v132;
LABEL_90:
    *(_QWORD *)v125 = v118;
    *(_BYTE *)(v125 + 8) = 1;
    return;
  }
  __src = a3;
  v37 = *(_QWORD *)(a2 + 56) + 24 * v36;
  v39 = *(_QWORD *)(v37 - 24);
  v38 = *(_QWORD *)(v37 - 16);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v132 = "WasmFunctionParser.h:";
  LODWORD(v133) = 21;
  LODWORD(v130) = 685;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v132, (unsigned int *)&v130, (int **)&v129);
  v47 = v129;
  if (!v129)
  {
    __break(0xC471u);
    goto LABEL_100;
  }
  v129 = 0;
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
  }
  else
  {
    *(_DWORD *)v47 -= 2;
  }
  v48 = *(_DWORD *)(a2 + 68);
  if (!v48)
  {
    v115 = "expected";
    v116 = (unint64_t *)a2;
    v117 = 9;
    goto LABEL_74;
  }
  v49 = *(_QWORD *)(a2 + 56) + 24 * v48;
  v50 = *(_QWORD *)(v49 - 24);
  v51 = *(_QWORD *)(v49 - 16);
  *(_DWORD *)(a2 + 68) = v48 - 1;
  v132 = "WasmFunctionParser.h:";
  LODWORD(v133) = 21;
  LODWORD(v130) = 686;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v132, (unsigned int *)&v130, (int **)&v128);
  v59 = v128;
  if (!v128)
  {
    __break(0xC471u);
    JUMPOUT(0x198D25408);
  }
  v128 = 0;
  if (*(_DWORD *)v59 == 2)
  {
    WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
    WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
  }
  else
  {
    *(_DWORD *)v59 -= 2;
  }
  v60 = *(_DWORD *)(a2 + 68);
  if (!v60)
  {
    v115 = "pointer";
    v116 = (unint64_t *)a2;
    v117 = 8;
    goto LABEL_74;
  }
  v61 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v60 - 24);
  *(_DWORD *)(a2 + 68) = v60 - 1;
  v132 = "WasmFunctionParser.h:";
  LODWORD(v133) = 21;
  LODWORD(v130) = 687;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v132, (unsigned int *)&v130, (int **)&v127);
  v69 = v127;
  if (!v127)
  {
    __break(0xC471u);
    JUMPOUT(0x198D25410);
  }
  v127 = 0;
  if (*(_DWORD *)v69 == 2)
  {
    WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
    WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
  }
  else
  {
    *(_DWORD *)v69 -= 2;
  }
  if (v61 != 255)
  {
    v126 = __src;
    v119 = " pointer type mismatch";
    v120 = 23;
LABEL_89:
    v132 = v119;
    v133 = v120;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v130, &v126, (uint64_t)&v132);
    v118 = v130;
    goto LABEL_90;
  }
  if (a4 != v50)
  {
LABEL_82:
    v126 = __src;
    v119 = " expected type mismatch";
    v120 = 24;
    goto LABEL_89;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (a5 == v51)
      v70 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v70 = 0;
    if ((v70 & 1) == 0)
      goto LABEL_82;
  }
  else
  {
    if (a5 == v51)
      v121 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v121 = 1;
    if (v121 == 1)
      goto LABEL_82;
  }
  if (a4 != v39)
  {
LABEL_88:
    v126 = __src;
    v119 = " value type mismatch";
    v120 = 21;
    goto LABEL_89;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (a5 == v38)
      v71 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v71 = 0;
    if ((v71 & 1) == 0)
      goto LABEL_88;
  }
  else
  {
    if (a5 == v38)
      v122 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v122 = 1;
    if (v122 == 1)
      goto LABEL_88;
  }
  v72 = *(unsigned int **)(a2 + 48);
  v73 = *v72 - 2;
  if (HIDWORD(v73))
  {
    __break(0xC471u);
    JUMPOUT(0x198D25418);
  }
  *v72 = v73;
  v74 = *((_QWORD *)v72 + 4);
  v75 = (uint64_t *)*((_QWORD *)v72 + 2);
  v76 = *v75;
  v77 = v75[1827];
  v78 = *(unsigned int *)(v74 + 40);
  v79 = *(unsigned int *)(v74 + 44);
  v80 = v79 + 5;
  if (v79 + 5 > v78)
  {
    v107 = v78 + (v78 >> 2);
    if (v107 >= 0x10)
      v108 = v107 + 1;
    else
      v108 = 16;
    if (v108 <= v80)
      v109 = v79 + 5;
    else
      v109 = v108;
    if (!HIDWORD(v109))
    {
      __srca = *(void **)(v74 + 32);
      v110 = (void *)WTF::fastMalloc((WTF *)v109);
      *(_DWORD *)(v74 + 40) = v109;
      *(_QWORD *)(v74 + 32) = v110;
      memcpy(v110, __srca, v79);
      if (__srca)
      {
        if (*(void **)(v74 + 32) == __srca)
        {
          *(_QWORD *)(v74 + 32) = 0;
          *(_DWORD *)(v74 + 40) = 0;
        }
        WTF::fastFree((unint64_t)__srca, v111, v63, v64, v65, v66, v67, v68);
      }
      goto LABEL_50;
    }
    __break(0xC471u);
LABEL_100:
    JUMPOUT(0x198D25400);
  }
LABEL_50:
  *(_DWORD *)(v74 + 44) = v80;
  *(_BYTE *)(*(_QWORD *)(v74 + 32) + v79) = v76 - v77;
  *(_DWORD *)(*(_QWORD *)(v74 + 32) + v79 + 1) = v7;
  v81 = *(_DWORD *)(a2 + 68);
  if (v81 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &v131, v63, v64, v65, v66, v67, v68);
  }
  else
  {
    v82 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v81);
    *v82 = a4;
    v82[1] = a5;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)v125 = 0;
  *(_BYTE *)(v125 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [29],JSC::Wasm::Type,char [27]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "ref.as_non_null ref to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected a reference type");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, JSC::Wasm::Type *a7, uint64_t a8, double a9, float a10, JSC::Wasm::Type *a11)
{
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  float v62;
  float v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  float v76;
  WTF *v77;
  WTF::PrintStream *v78;
  float v79;
  double v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  const WTF::String *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  float v95;
  const WTF::String *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  float v103;
  const WTF::String *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  float v111;
  const WTF::String *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  float v119;
  const WTF::String *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  float v127;
  const WTF::String *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  float v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  int v215;
  char v216;
  void (**v217)(WTF::StringPrintStream *__hidden);
  WTF *v218;
  __int128 v219;
  _BYTE v220[128];
  void (**v221)(WTF::StringPrintStream *__hidden);
  unint64_t v222;
  __int128 v223;
  _BYTE v224[128];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v217 = off_1E3572250;
  v218 = (WTF *)v220;
  v219 = xmmword_199122F80;
  v220[0] = 0;
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = v17 != 0;
    v19 = v17 - 1;
    if (!v18)
      v19 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v19, (uint64_t)&v214, a10);
  }
  else
  {
    v20 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v214 = (WTF::StringImpl *)v20;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v213, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v28 = v222;
  if (!v222)
  {
    v213 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v213);
  v28 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_12:
    WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v221, "%u", *a4);
  v221[5]((WTF::StringPrintStream *)&v221);
  v36 = v222;
  if (!v222)
  {
    v212 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v212);
  v36 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_17:
    WTF::fastFree(v36, v29, v30, v31, v32, v33, v34, v35);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a5)
  {
    v38 = *(_QWORD *)(a5 + 8);
    v18 = v38 != 0;
    v39 = v38 - 1;
    if (!v18)
      v39 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v39, (uint64_t)&v214, v37);
  }
  else
  {
    v40 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = 0;
    *(_BYTE *)(v40 + 16) = 0;
    v214 = (WTF::StringImpl *)v40;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v211, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v48 = v222;
  if (!v222)
  {
    v211 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v211);
  v48 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_29:
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a6)
  {
    v50 = *(_QWORD *)(a6 + 8);
    v18 = v50 != 0;
    v51 = v50 - 1;
    if (!v18)
      v51 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v51, (uint64_t)&v214, v49);
  }
  else
  {
    v52 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v52 = 1;
    *(_QWORD *)(v52 + 8) = 0;
    *(_BYTE *)(v52 + 16) = 0;
    v214 = (WTF::StringImpl *)v52;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v210, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v60 = v222;
  if (!v222)
  {
    v210 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v210);
  v60 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_41:
    WTF::fastFree(v60, v53, v54, v55, v56, v57, v58, v59);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v209, a2, a7, v61, v62);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a8)
  {
    v64 = *(_QWORD *)(a8 + 8);
    v18 = v64 != 0;
    v65 = v64 - 1;
    if (!v18)
      v65 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a8, v65, (uint64_t)&v214, v63);
  }
  else
  {
    v66 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v66 = 1;
    *(_QWORD *)(v66 + 8) = 0;
    *(_BYTE *)(v66 + 16) = 0;
    v214 = (WTF::StringImpl *)v66;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v208, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v74 = v222;
  if (!v222)
  {
    v214 = 0;
    goto LABEL_53;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v214);
  v74 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_53:
    WTF::fastFree(v74, v67, v68, v69, v70, v71, v72, v73);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v208, a2, a11, v75, v76);
  v77 = (WTF *)((uint64_t (*)(_QWORD))v217[4])(&v217);
  v78 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v77 + 32))(v77);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v221, v79);
  WTF::printExpectedCStringHelper(v78, "StringView", &v221);
  if ((_DWORD)v222 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v216, &v221);
  v80 = (*(double (**)(WTF *))(*(_QWORD *)v77 + 40))(v77);
  WTF::printInternal(v77, (WTF::PrintStream *)&v213, v81, v82, v83, v84, v85, v86, v80, v87);
  WTF::printInternal(v77, (WTF::PrintStream *)&v212, v88, v89, v90, v91, v92, v93, v94, v95);
  WTF::printInternal(v77, (WTF::PrintStream *)&v211, v96, v97, v98, v99, v100, v101, v102, v103);
  WTF::printInternal(v77, (WTF::PrintStream *)&v210, v104, v105, v106, v107, v108, v109, v110, v111);
  WTF::printInternal(v77, (WTF::PrintStream *)&v209, v112, v113, v114, v115, v116, v117, v118, v119);
  WTF::printInternal(v77, (WTF::PrintStream *)&v214, v120, v121, v122, v123, v124, v125, v126, v127);
  WTF::printInternal(v77, (WTF::PrintStream *)&v208, v128, v129, v130, v131, v132, v133, v134, v135);
  v217[5]((WTF::StringPrintStream *)&v217);
  v143 = v208;
  v208 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v144 = v214;
  v214 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  v145 = v209;
  v209 = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  v146 = v210;
  v210 = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  v147 = v211;
  v211 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  v148 = v212;
  v212 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  v149 = v213;
  v213 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
  v150 = v218;
  if (v218)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v218, v219, (uint64_t *)&v221);
    v150 = v218;
    *a1 = v221;
    if (v150 == (WTF *)v220)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v150, v136, v137, v138, v139, v140, v141, v142);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, JSC::Wasm::Type *a5, uint64_t a6, JSC::Wasm::Type *a7, double a8, float a9)
{
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  double v38;
  float v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  double v52;
  float v53;
  WTF *v54;
  WTF::PrintStream *v55;
  float v56;
  double v57;
  const WTF::String *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  char v157;
  void (**v158)(WTF::StringPrintStream *__hidden);
  WTF *v159;
  __int128 v160;
  _BYTE v161[128];
  void (**v162)(WTF::StringPrintStream *__hidden);
  WTF *v163;
  __int128 v164;
  _BYTE v165[128];
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v158 = off_1E3572250;
  v159 = (WTF *)v161;
  v160 = xmmword_199122F80;
  v161[0] = 0;
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a3)
  {
    v14 = *(_QWORD *)(a3 + 8);
    v15 = v14 != 0;
    v16 = v14 - 1;
    if (!v15)
      v16 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v16, (uint64_t)&v155, a9);
  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 0;
    v155 = (WTF::StringImpl *)v17;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v154, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v25 = v163;
  if (!v163)
  {
    v154 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v154);
  v25 = v163;
  if (v163 != (WTF *)v165)
LABEL_12:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a4)
  {
    v27 = *(_QWORD *)(a4 + 8);
    v15 = v27 != 0;
    v28 = v27 - 1;
    if (!v15)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v28, (uint64_t)&v155, v26);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v155 = (WTF::StringImpl *)v29;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v153, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v37 = v163;
  if (!v163)
  {
    v153 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v153);
  v37 = v163;
  if (v163 != (WTF *)v165)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v152, a2, a5, v38, v39);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a6)
  {
    v41 = *(_QWORD *)(a6 + 8);
    v15 = v41 != 0;
    v42 = v41 - 1;
    if (!v15)
      v42 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v42, (uint64_t)&v155, v40);
  }
  else
  {
    v43 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = 0;
    *(_BYTE *)(v43 + 16) = 0;
    v155 = (WTF::StringImpl *)v43;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v151, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v51 = v163;
  if (!v163)
  {
    v155 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v155);
  v51 = v163;
  if (v163 != (WTF *)v165)
LABEL_36:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v151, a2, a7, v52, v53);
  v54 = (WTF *)((uint64_t (*)(_QWORD))v158[4])(&v158);
  v55 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v54 + 32))(v54);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v162, v56);
  WTF::printExpectedCStringHelper(v55, "StringView", &v162);
  if ((_DWORD)v163 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v163])(&v157, &v162);
  v57 = (*(double (**)(WTF *))(*(_QWORD *)v54 + 40))(v54);
  WTF::printInternal(v54, (WTF::PrintStream *)&v154, v58, v59, v60, v61, v62, v63, v57, v64);
  WTF::printInternal(v54, (WTF::PrintStream *)&v153, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v54, (WTF::PrintStream *)&v152, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v54, (WTF::PrintStream *)&v155, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v54, (WTF::PrintStream *)&v151, v89, v90, v91, v92, v93, v94, v95, v96);
  v158[5]((WTF::StringPrintStream *)&v158);
  v104 = v151;
  v151 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v155;
  v155 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v152;
  v152 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v153;
  v153 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v154;
  v154 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v159;
  if (v159)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v159, v160, (uint64_t *)&v162);
    v109 = v159;
    *a1 = v162;
    if (v109 == (WTF *)v161)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v109, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [43],JSC::Wasm::Type,char [6],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "invalid type for call_ref value, expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [41],JSC::Wasm::Type,char [12],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in call_ref, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [36],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Block expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [35],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Loop expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [31],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "if condition must be i32, got ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [34],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Try expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [58],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "The exception being thrown expects the argument at index ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [43],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "conditional branch with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [33],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "br_table with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [55],unsigned int,char [13],unsigned int,char [12],unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  WTF::PrintStream *v57;
  float v58;
  double v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  const WTF::String *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  float v74;
  const WTF::String *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  float v82;
  const WTF::String *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  float v90;
  const WTF::String *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  float v98;
  const WTF::String *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  float v106;
  WTF::AtomStringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  char v175;
  void (**v176)(WTF::StringPrintStream *__hidden);
  WTF *v177;
  __int128 v178;
  _BYTE v179[128];
  void (**v180)(WTF::StringPrintStream *__hidden);
  WTF *v181;
  __int128 v182;
  _BYTE v183[128];
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  v176 = off_1E3572250;
  v177 = (WTF *)v179;
  v178 = xmmword_199122F80;
  v179[0] = 0;
  v180 = off_1E3572250;
  v181 = (WTF *)v183;
  v182 = xmmword_199122F80;
  v183[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v180, "%s", "br_table target type size mismatch. Default has size: ");
  v180[5]((WTF::StringPrintStream *)&v180);
  v15 = v181;
  if (!v181)
  {
    v174 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v181, v182, (uint64_t *)&v174);
  v15 = v181;
  if (v181 != (WTF *)v183)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  v180 = off_1E3572250;
  v181 = (WTF *)v183;
  v182 = xmmword_199122F80;
  v183[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v180, "%u", *a2);
  v180[5]((WTF::StringPrintStream *)&v180);
  v23 = v181;
  if (!v181)
  {
    v173 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v181, v182, (uint64_t *)&v173);
  v23 = v181;
  if (v181 != (WTF *)v183)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v180 = off_1E3572250;
  v181 = (WTF *)v183;
  v182 = xmmword_199122F80;
  v183[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v180, "%s", "but target: ");
  v180[5]((WTF::StringPrintStream *)&v180);
  v31 = v181;
  if (!v181)
  {
    v172 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v181, v182, (uint64_t *)&v172);
  v31 = v181;
  if (v181 != (WTF *)v183)
LABEL_15:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  v180 = off_1E3572250;
  v181 = (WTF *)v183;
  v182 = xmmword_199122F80;
  v183[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v180, "%u", *a3);
  v180[5]((WTF::StringPrintStream *)&v180);
  v39 = v181;
  if (!v181)
  {
    v171 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v181, v182, (uint64_t *)&v171);
  v39 = v181;
  if (v181 != (WTF *)v183)
LABEL_20:
    WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
  v180 = off_1E3572250;
  v181 = (WTF *)v183;
  v182 = xmmword_199122F80;
  v183[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v180, "%s", " has size: ");
  v180[5]((WTF::StringPrintStream *)&v180);
  v47 = v181;
  if (!v181)
  {
    v170 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v181, v182, (uint64_t *)&v170);
  v47 = v181;
  if (v181 != (WTF *)v183)
LABEL_25:
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  v180 = off_1E3572250;
  v181 = (WTF *)v183;
  v182 = xmmword_199122F80;
  v183[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v180, "%u", *a4);
  v180[5]((WTF::StringPrintStream *)&v180);
  v55 = v181;
  if (!v181)
  {
    v169 = 0;
    goto LABEL_30;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v181, v182, (uint64_t *)&v169);
  v55 = v181;
  if (v181 != (WTF *)v183)
LABEL_30:
    WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
  v56 = (WTF *)((uint64_t (*)(_QWORD))v176[4])(&v176);
  v57 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v56 + 32))(v56);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v180, v58);
  WTF::printExpectedCStringHelper(v57, "StringView", &v180);
  if ((_DWORD)v181 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v181])(&v175, &v180);
  v59 = (*(double (**)(WTF *))(*(_QWORD *)v56 + 40))(v56);
  WTF::printInternal(v56, (WTF::PrintStream *)&v174, v60, v61, v62, v63, v64, v65, v59, v66);
  WTF::printInternal(v56, (WTF::PrintStream *)&v173, v67, v68, v69, v70, v71, v72, v73, v74);
  WTF::printInternal(v56, (WTF::PrintStream *)&v172, v75, v76, v77, v78, v79, v80, v81, v82);
  WTF::printInternal(v56, (WTF::PrintStream *)&v171, v83, v84, v85, v86, v87, v88, v89, v90);
  WTF::printInternal(v56, (WTF::PrintStream *)&v170, v91, v92, v93, v94, v95, v96, v97, v98);
  WTF::printInternal(v56, (WTF::PrintStream *)&v169, v99, v100, v101, v102, v103, v104, v105, v106);
  v176[5]((WTF::StringPrintStream *)&v176);
  v114 = v169;
  v169 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v107, v108, v109, v110, v111, v112, v113);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = v170;
  v170 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v107, v108, v109, v110, v111, v112, v113);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v171;
  v171 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v107, v108, v109, v110, v111, v112, v113);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = v172;
  v172 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v107, v108, v109, v110, v111, v112, v113);
      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = v173;
  v173 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v107, v108, v109, v110, v111, v112, v113);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = v174;
  v174 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, v107, v108, v109, v110, v111, v112, v113);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = v177;
  if (v177)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v177, v178, (uint64_t *)&v180);
    v120 = v177;
    *a1 = v180;
    if (v120 == (WTF *)v179)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v120, v107, v108, v109, v110, v111, v112, v113);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [51],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "grow_memory with non-i32 delta argument has type: ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<true,void>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9, uint8x16_t a10, double a11, uint8x8_t a12)
{
  int *v14;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  const char *v57;
  uint64_t v58;
  void (**v59)(WTF::StringPrintStream *__hidden);
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  WTF::AtomStringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  unsigned int v132;
  uint64_t v133;
  WTF::AtomStringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  WTF::AtomStringImpl *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::AtomStringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::AtomStringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  unsigned int v178;
  uint64_t v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  unsigned int v188;
  uint64_t v189;
  WTF::AtomStringImpl *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  WTF::AtomStringImpl *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  WTF::AtomStringImpl *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  WTF::AtomStringImpl *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  unsigned int v233;
  uint64_t v234;
  WTF::AtomStringImpl *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  unint64_t v243;
  char *v244;
  unint64_t *v245;
  uint64_t v246;
  unint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  WTF::AtomStringImpl *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  WTF::StringImpl *v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  WTF::AtomStringImpl *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  WTF::AtomStringImpl *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  unsigned int v284;
  uint64_t v285;
  WTF::AtomStringImpl *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  double v293;
  float v294;
  WTF::StringImpl *v295;
  float v296;
  unsigned int v297;
  unint64_t v298;
  unsigned int v299;
  uint64_t v300;
  WTF::AtomStringImpl *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  WTF::StringImpl *v308;
  unsigned int v309;
  unint64_t v310;
  unint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  __int128 v343;
  int v344;
  int v345;
  int v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  size_t v352;
  unint64_t v353;
  unsigned int v354;
  uint64_t v355;
  __int8 v356;
  __int8 v357;
  __int8 v358;
  __int8 v359;
  uint8x16_t v360;
  uint8x8_t v361;
  int8x8_t v362;
  uint32x2_t v363;
  __int8 v364;
  uint8x8_t v365;
  unint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  void *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  void *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  void *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  unsigned int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  WTF::AtomStringImpl *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  WTF::StringImpl *v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  WTF::AtomStringImpl *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  WTF::StringImpl *v470;
  unint64_t v471;
  unsigned int v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  WTF::AtomStringImpl *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  WTF::StringImpl *v483;
  unint64_t v484;
  unsigned int v485;
  unint64_t *v486;
  int8x8_t v487;
  uint32x2_t v488;
  __int8 v489;
  uint8x8_t v490;
  unint64_t v491;
  void *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  void *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  void *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  void *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  void *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unint64_t v547;
  void *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  __int8 v555;
  __int8 v556;
  __int8 v557;
  __int8 v558;
  __int8 v559;
  uint8x8_t v560;
  unsigned int v561;
  uint64_t v562;
  WTF::AtomStringImpl *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  WTF::StringImpl *v570;
  unsigned int v571;
  uint64_t v572;
  WTF::AtomStringImpl *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  WTF::StringImpl *v580;
  unint64_t v581;
  void *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  void *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  char *v597;
  unint64_t *v598;
  uint64_t v599;
  char v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  const void *v604;
  void *v605;
  void *v606;
  const char *v607;
  uint64_t v608;
  __int128 v609;
  WTF::StringImpl *v610;
  WTF::StringImpl *v611;
  WTF::StringImpl *v612;
  WTF::StringImpl *v613;
  WTF::StringImpl *v614;
  WTF::StringImpl *v615;
  WTF::StringImpl *v616;
  WTF::StringImpl *v617;
  WTF::StringImpl *v618;
  WTF::StringImpl *v619;
  WTF::StringImpl *v620;
  WTF::StringImpl *v621;
  WTF::StringImpl *v622;
  WTF::StringImpl *v623;
  WTF::StringImpl *v624;
  WTF::StringImpl *v625;
  WTF::StringImpl *v626;
  WTF::StringImpl *v627;
  WTF::StringImpl *v628;
  WTF::StringImpl *v629;
  void (**v630)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v631;
  int v632;
  WTF::StringImpl *v633;
  __int128 v634;
  WTF::StringImpl *v635;
  WTF::StringImpl *v636;
  WTF::StringImpl *v637;
  WTF::StringImpl *v638;
  WTF::StringImpl *v639;
  void (**v640)(WTF::StringPrintStream *__hidden);
  uint64_t v641;

  v14 = *(int **)(a2 + 48);
  *((_BYTE *)v14 + 57) = 1;
  if ((a3 - 77) > 3u || word_1ECF4C7B4 != 0)
  {
    v17 = a3;
    v18 = a3;
    switch((int)a3)
    {
      case 0:
      case 5:
      case 10:
      case 20:
      case 21:
      case 23:
      case 28:
      case 38:
      case 45:
      case 49:
      case 54:
      case 55:
      case 58:
      case 62:
      case 63:
      case 67:
      case 75:
      case 78:
        v44 = *(_DWORD *)(a2 + 68);
        if (!v44)
          goto LABEL_298;
        v45 = *(_QWORD *)(a2 + 56) + 24 * v44;
        v46 = *(unsigned __int8 *)(v45 - 24);
        v47 = *(_QWORD *)(v45 - 16);
        *(_DWORD *)(a2 + 68) = v44 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1205;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v622);
        v55 = v622;
        if (!v622)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A450);
        }
        v622 = 0;
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
          WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
        if (v46 == 251 && v47 == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A458);
        }
        goto LABEL_27;
      case 1:
      case 3:
      case 6:
      case 9:
      case 18:
      case 24:
      case 26:
      case 31:
      case 32:
      case 39:
      case 42:
      case 43:
      case 47:
      case 52:
      case 53:
      case 60:
      case 69:
      case 73:
      case 76:
      case 77:
        v19 = *(_DWORD *)(a2 + 68);
        if (!v19)
          goto LABEL_298;
        v20 = *(_QWORD *)(a2 + 56) + 24 * v19;
        v21 = *(unsigned __int8 *)(v20 - 24);
        v22 = *(_QWORD *)(v20 - 16);
        *(_DWORD *)(a2 + 68) = v19 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1305;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v614);
        v30 = v614;
        if (!v614)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A440);
        }
        v614 = 0;
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
          WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
        v31 = *(_DWORD *)(a2 + 68);
        if (!v31)
          goto LABEL_298;
        v32 = *(_QWORD *)(a2 + 56) + 24 * v31;
        v33 = *(unsigned __int8 *)(v32 - 24);
        v34 = *(_QWORD *)(v32 - 16);
        *(_DWORD *)(a2 + 68) = v31 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1306;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v613);
        v43 = v613;
        if (!v613)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A448);
        }
        v613 = 0;
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
          WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        }
        else
        {
          *(_DWORD *)v43 -= 2;
        }
        if (v33 != 251 || v34)
          goto LABEL_302;
        if (v21 == 251 && !v22)
        {
          __break(0xC471u);
          JUMPOUT(0x198D28AC8);
        }
        goto LABEL_27;
      case 2:
      case 16:
      case 46:
      case 71:
        v634 = JSC::Wasm::Types::Void;
        if ((int)a3 > 45)
        {
          if ((_DWORD)a3 == 46)
          {
            v60 = 4;
          }
          else
          {
            if ((_DWORD)a3 != 71)
            {
LABEL_335:
              __break(0xC471u);
              JUMPOUT(0x198D2A2D8);
            }
            v60 = 2;
          }
        }
        else if ((_DWORD)a3 == 2)
        {
          v60 = 8;
        }
        else
        {
          v60 = a3;
          if ((_DWORD)a3 != 16)
            goto LABEL_335;
        }
        v299 = *(_DWORD *)(a2 + 68);
        if (!v299)
          goto LABEL_303;
        v300 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v299 - 24);
        *(_DWORD *)(a2 + 68) = v299 - 1;
        v640 = (void (**)(WTF::StringPrintStream *__hidden))"WasmFunctionParser.h:";
        LODWORD(v641) = 21;
        LODWORD(v630) = 1001;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v640, (unsigned int *)&v630, (int **)&v631);
        v308 = v631;
        if (!v631)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A470);
        }
        v631 = 0;
        if (*(_DWORD *)v308 == 2)
        {
          WTF::StringImpl::~StringImpl(v308, v301, v302, v303, v304, v305, v306, v307);
          WTF::fastFree(v327, v328, v329, v330, v331, v332, v333, v334);
        }
        else
        {
          *(_DWORD *)v308 -= 2;
        }
        if (v300 != 251)
        {
          v607 = "load_lane input must be a vector";
          v608 = 33;
          goto LABEL_318;
        }
        JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v640, v17, a2, &v632, (uint64_t)&v634, v293, v294);
        if ((_BYTE)v641)
          goto LABEL_30;
        v309 = (v60 - 2) >> 1;
        if (v309 > 7 || ((1 << v309) & 0x8B) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A318);
        }
        v310 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
          goto LABEL_332;
        *(_QWORD *)a2 = v310 + 1;
        if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v310) < v60)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A480);
        }
        goto LABEL_203;
      case 4:
      case 15:
      case 30:
      case 59:
        v61 = *(_DWORD *)(a2 + 68);
        if (!v61)
          goto LABEL_298;
        v62 = *(_QWORD *)(a2 + 56) + 24 * v61;
        v63 = *(unsigned __int8 *)(v62 - 24);
        v64 = *(_QWORD *)(v62 - 16);
        *(_DWORD *)(a2 + 68) = v61 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1247;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v618);
        v72 = v618;
        if (!v618)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A460);
        }
        v618 = 0;
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
          WTF::fastFree(v311, v312, v313, v314, v315, v316, v317, v318);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
        v73 = *(_DWORD *)(a2 + 68);
        if (!v73)
          goto LABEL_298;
        v74 = *(_QWORD *)(a2 + 56) + 24 * v73;
        v75 = *(unsigned __int8 *)(v74 - 24);
        v76 = *(_QWORD *)(v74 - 16);
        *(_DWORD *)(a2 + 68) = v73 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1248;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v617);
        v84 = v617;
        if (!v617)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A478);
        }
        v617 = 0;
        if (*(_DWORD *)v84 == 2)
        {
          WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
          WTF::fastFree(v335, v336, v337, v338, v339, v340, v341, v342);
        }
        else
        {
          *(_DWORD *)v84 -= 2;
        }
        if (v75 != 251 || v76)
          goto LABEL_302;
        if (v63 == 251 && !v64)
        {
          __break(0xC471u);
          JUMPOUT(0x198D28D4CLL);
        }
        goto LABEL_27;
      case 7:
        v223 = *(_DWORD *)(a2 + 68);
        if (!v223)
        {
          v597 = "val";
          goto LABEL_327;
        }
        v224 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v223 - 24);
        *(_DWORD *)(a2 + 68) = v223 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 960;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v633);
        v232 = v633;
        if (!v633)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A4F0);
        }
        v633 = 0;
        if (*(_DWORD *)v232 == 2)
        {
          WTF::StringImpl::~StringImpl(v232, v225, v226, v227, v228, v229, v230, v231);
          WTF::fastFree(v491, v492, v493, v494, v495, v496, v497, v498);
        }
        else
        {
          *(_DWORD *)v232 -= 2;
        }
        if (v224 != 251)
        {
          v57 = "store vector must be v128";
          goto LABEL_330;
        }
        v634 = JSC::Wasm::Types::Void;
        JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v640, 7u, a2, &v630, (uint64_t)&v634, *(double *)&JSC::Wasm::Types::Void, *(float *)a10.i32);
        if (!(_BYTE)v641)
        {
          __break(0xC471u);
          JUMPOUT(0x198D29350);
        }
        goto LABEL_30;
      case 8:
      case 25:
      case 29:
      case 48:
        v634 = JSC::Wasm::Types::Void;
        if ((int)a3 > 28)
        {
          if ((_DWORD)a3 == 29)
          {
            v60 = 2;
          }
          else
          {
            if ((_DWORD)a3 != 48)
              goto LABEL_334;
            v60 = 8;
          }
        }
        else
        {
          if ((_DWORD)a3 != 8)
          {
            if ((_DWORD)a3 == 25)
            {
              v60 = 4;
              goto LABEL_180;
            }
LABEL_334:
            __break(0xC471u);
            JUMPOUT(0x198D2A2B8);
          }
          v60 = 16;
        }
LABEL_180:
        v284 = *(_DWORD *)(a2 + 68);
        if (v284)
        {
          v285 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v284 - 24);
          *(_DWORD *)(a2 + 68) = v284 - 1;
          v640 = (void (**)(WTF::StringPrintStream *__hidden))"WasmFunctionParser.h:";
          LODWORD(v641) = 21;
          LODWORD(v630) = 1043;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v640, (unsigned int *)&v630, (int **)&v629);
          v295 = v629;
          if (!v629)
          {
            __break(0xC471u);
            JUMPOUT(0x198D2A468);
          }
          v629 = 0;
          if (*(_DWORD *)v295 == 2)
          {
            WTF::StringImpl::~StringImpl(v295, v286, v287, v288, v289, v290, v291, v292);
            WTF::fastFree(v319, v320, v321, v322, v323, v324, v325, v326);
          }
          else
          {
            *(_DWORD *)v295 -= 2;
          }
          if (v285 != 251)
          {
            v607 = "store_lane input must be a vector";
            v608 = 34;
LABEL_318:
            v640 = (void (**)(WTF::StringPrintStream *__hidden))v607;
            v641 = v608;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v630, (uint64_t)&v640, v293, v294);
            v59 = v630;
            goto LABEL_31;
          }
          JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v640, v17, a2, &v632, (uint64_t)&v634, v293, v294);
          if (!(_BYTE)v641)
          {
            v297 = (v60 - 2) >> 1;
            if (v297 > 7 || ((1 << v297) & 0x8B) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198D2A2F8);
            }
            v298 = *(_QWORD *)a2;
            if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
            {
LABEL_332:
              JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("Could not parse the lane index immediate byte.", (unint64_t *)a2, 47, &v640, v296);
            }
            else
            {
              *(_QWORD *)a2 = v298 + 1;
              if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v298) < v60)
              {
                __break(0xC471u);
                JUMPOUT(0x198D296F0);
              }
LABEL_203:
              JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", (unint64_t *)a2, 40, v60, ", expected an ImmLaneIdx", 25, v60, &v640, v296);
            }
          }
        }
        else
        {
LABEL_303:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "vector", 7, &v640, *(float *)a10.i32);
        }
LABEL_30:
        v59 = v640;
LABEL_31:
        *(_QWORD *)a1 = v59;
        *(_BYTE *)(a1 + 8) = 1;
        return;
      case 11:
      case 51:
        v178 = *(_DWORD *)(a2 + 68);
        if (v178)
        {
          v179 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v178 - 24);
          *(_DWORD *)(a2 + 68) = v178 - 1;
          *(_QWORD *)&v634 = "WasmFunctionParser.h:";
          DWORD2(v634) = 21;
          LODWORD(v640) = 920;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v636);
          v187 = v636;
          if (!v636)
          {
            __break(0xC471u);
            JUMPOUT(0x198D2A4A0);
          }
          v636 = 0;
          if (*(_DWORD *)v187 == 2)
          {
            WTF::StringImpl::~StringImpl(v187, v180, v181, v182, v183, v184, v185, v186);
            WTF::fastFree(v390, v391, v392, v393, v394, v395, v396, v397);
          }
          else
          {
            *(_DWORD *)v187 -= 2;
          }
          v188 = *(_DWORD *)(a2 + 68);
          if (v188)
          {
            v189 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v188 - 24);
            *(_DWORD *)(a2 + 68) = v188 - 1;
            *(_QWORD *)&v634 = "WasmFunctionParser.h:";
            DWORD2(v634) = 21;
            LODWORD(v640) = 921;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v635);
            v197 = v635;
            if (!v635)
            {
              __break(0xC471u);
              JUMPOUT(0x198D2A4C0);
            }
            v635 = 0;
            if (*(_DWORD *)v197 == 2)
            {
              WTF::StringImpl::~StringImpl(v197, v190, v191, v192, v193, v194, v195, v196);
              WTF::fastFree(v422, v423, v424, v425, v426, v427, v428, v429);
            }
            else
            {
              *(_DWORD *)v197 -= 2;
            }
            if (v189 == 251)
            {
              if (v179 == 251)
              {
                __break(0xC471u);
                JUMPOUT(0x198D2A4E0);
              }
              v57 = "extmul rhs vector must be v128";
            }
            else
            {
              v57 = "extmul lhs vector must be v128";
            }
LABEL_113:
            v58 = 31;
            goto LABEL_29;
          }
          v597 = "lhs";
        }
        else
        {
          v597 = "rhs";
        }
LABEL_327:
        v598 = (unint64_t *)a2;
        v599 = 4;
        goto LABEL_300;
      case 12:
        v233 = *(_DWORD *)(a2 + 68);
        if (!v233)
        {
          v597 = "select condition";
          v598 = (unint64_t *)a2;
          v599 = 17;
          goto LABEL_300;
        }
        v234 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v233 - 24);
        *(_DWORD *)(a2 + 68) = v233 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 862;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v639);
        v242 = v639;
        if (!v639)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A4F8);
        }
        v639 = 0;
        if (*(_DWORD *)v242 == 2)
        {
          WTF::StringImpl::~StringImpl(v242, v235, v236, v237, v238, v239, v240, v241);
          WTF::fastFree(v499, v500, v501, v502, v503, v504, v505, v506);
        }
        else
        {
          *(_DWORD *)v242 -= 2;
        }
        switch(a4)
        {
          case 1:
          case 2:
          case 3:
            if (v234 != 255)
              goto LABEL_148;
            goto LABEL_270;
          case 4:
            if (v234 == 254)
              goto LABEL_270;
            goto LABEL_148;
          case 5:
            if (v234 == 253)
              goto LABEL_270;
            goto LABEL_148;
          case 6:
            if (v234 == 252)
            {
LABEL_270:
              __break(0xC471u);
              JUMPOUT(0x198D29D78);
            }
LABEL_148:
            v57 = "Wrong type to SIMD splat";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198D2A3B8);
        }
        goto LABEL_149;
      case 13:
      case 14:
      case 27:
      case 37:
      case 50:
      case 61:
        v634 = JSC::Wasm::Types::Void;
        JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v640, a3, a2, &v630, (uint64_t)&v634, *(double *)&JSC::Wasm::Types::Void, *(float *)a10.i32);
        if (!(_BYTE)v641)
        {
          __break(0xC471u);
          JUMPOUT(0x198D28BC4);
        }
        goto LABEL_30;
      case 17:
      case 68:
        v122 = *(_DWORD *)(a2 + 68);
        if (!v122)
        {
          v597 = "shift i32";
          v598 = (unint64_t *)a2;
          v599 = 10;
          goto LABEL_300;
        }
        v123 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v122 - 24);
        *(_DWORD *)(a2 + 68) = v122 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 899;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v638);
        v131 = v638;
        if (!v638)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A490);
        }
        v638 = 0;
        if (*(_DWORD *)v131 == 2)
        {
          WTF::StringImpl::~StringImpl(v131, v124, v125, v126, v127, v128, v129, v130);
          WTF::fastFree(v374, v375, v376, v377, v378, v379, v380, v381);
        }
        else
        {
          *(_DWORD *)v131 -= 2;
        }
        v132 = *(_DWORD *)(a2 + 68);
        if (!v132)
        {
          v597 = "shift vector";
          v598 = (unint64_t *)a2;
          v599 = 13;
          goto LABEL_300;
        }
        v133 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v132 - 24);
        *(_DWORD *)(a2 + 68) = v132 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 900;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v637);
        v141 = v637;
        if (!v637)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A4B0);
        }
        v637 = 0;
        if (*(_DWORD *)v141 == 2)
        {
          WTF::StringImpl::~StringImpl(v141, v134, v135, v136, v137, v138, v139, v140);
          WTF::fastFree(v406, v407, v408, v409, v410, v411, v412, v413);
        }
        else
        {
          *(_DWORD *)v141 -= 2;
        }
        if (v133 == 251)
        {
          if (v123 == 255)
          {
            __break(0xC471u);
            JUMPOUT(0x198D2A4D0);
          }
          v57 = "Shift amount must be i32";
LABEL_149:
          v58 = 25;
        }
        else
        {
          v57 = "Shift vector must be v128";
LABEL_330:
          v58 = 26;
        }
        goto LABEL_29;
      case 19:
        v243 = *(_QWORD *)a2 + 16;
        if (*(_QWORD *)(a2 + 16) < v243)
        {
          v244 = "can't parse 128-bit vector constant";
          v245 = (unint64_t *)a2;
          v246 = 36;
          goto LABEL_156;
        }
        v343 = *(_OWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        *(_QWORD *)a2 = v243;
        v344 = *v14;
        if (*v14 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A530);
        }
        v345 = v344 + 1;
        if (v14[1] <= (v344 + 1))
          v346 = v344 + 1;
        else
          v346 = v14[1];
        *v14 = v345;
        v14[1] = v346;
        v347 = *((_QWORD *)v14 + 4);
        v348 = (uint64_t *)*((_QWORD *)v14 + 2);
        v349 = *v348;
        v350 = v348[1827];
        v351 = *(unsigned int *)(v347 + 40);
        v352 = *(unsigned int *)(v347 + 44);
        v353 = v352 + 17;
        if (v352 + 17 > v351)
        {
          v609 = v343;
          v600 = v350;
          v601 = v351 + (v351 >> 2);
          if (v601 >= 0x10)
            v602 = v601 + 1;
          else
            v602 = 16;
          if (v602 <= v353)
            v603 = v352 + 17;
          else
            v603 = v602;
          if (HIDWORD(v603))
          {
            __break(0xC471u);
            JUMPOUT(0x198D2A550);
          }
          v604 = *(const void **)(v347 + 32);
          v605 = (void *)WTF::fastMalloc((WTF *)v603);
          *(_DWORD *)(v347 + 40) = v603;
          *(_QWORD *)(v347 + 32) = v605;
          memcpy(v605, v604, v352);
          LOBYTE(v350) = v600;
          LODWORD(v353) = v352 + 17;
          v343 = v609;
          if (v604)
          {
            if (*(const void **)(v347 + 32) == v604)
            {
              *(_QWORD *)(v347 + 32) = 0;
              *(_DWORD *)(v347 + 40) = 0;
            }
            WTF::fastFree((unint64_t)v604, v606, a3, v18, a5, a6, a7, a8);
            LOBYTE(v350) = v600;
            LODWORD(v353) = v352 + 17;
            v343 = v609;
          }
        }
        *(_DWORD *)(v347 + 44) = v353;
        *(_BYTE *)(*(_QWORD *)(v347 + 32) + v352) = v349 - v350;
        *(_OWORD *)(*(_QWORD *)(v347 + 32) + v352 + 1) = v343;
        v354 = *(_DWORD *)(a2 + 68);
        if (v354 == *(_DWORD *)(a2 + 64))
        {
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &JSC::Wasm::Types::V128, a3, v18, a5, a6, a7, a8);
          goto LABEL_263;
        }
        *(_OWORD *)(*(_QWORD *)(a2 + 56) + 24 * v354) = xmmword_19915A170;
        goto LABEL_262;
      case 22:
      case 33:
        v198 = *(_DWORD *)(a2 + 68);
        if (!v198)
          goto LABEL_298;
        v199 = *(_QWORD *)(a2 + 56) + 24 * v198;
        v200 = *(unsigned __int8 *)(v199 - 24);
        v201 = *(_QWORD *)(v199 - 16);
        *(_DWORD *)(a2 + 68) = v198 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1267;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v616);
        v209 = v616;
        if (!v616)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A4A8);
        }
        v616 = 0;
        if (*(_DWORD *)v209 == 2)
        {
          WTF::StringImpl::~StringImpl(v209, v202, v203, v204, v205, v206, v207, v208);
          WTF::fastFree(v398, v399, v400, v401, v402, v403, v404, v405);
        }
        else
        {
          *(_DWORD *)v209 -= 2;
        }
        v210 = *(_DWORD *)(a2 + 68);
        if (!v210)
          goto LABEL_298;
        v211 = *(_QWORD *)(a2 + 56) + 24 * v210;
        v212 = *(unsigned __int8 *)(v211 - 24);
        v213 = *(_QWORD *)(v211 - 16);
        *(_DWORD *)(a2 + 68) = v210 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1268;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v615);
        v221 = v615;
        if (!v615)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A4C8);
        }
        v615 = 0;
        if (*(_DWORD *)v221 == 2)
        {
          WTF::StringImpl::~StringImpl(v221, v214, v215, v216, v217, v218, v219, v220);
          WTF::fastFree(v430, v431, v432, v433, v434, v435, v436, v437);
        }
        else
        {
          *(_DWORD *)v221 -= 2;
        }
        if (v212 != 251 || v213)
          goto LABEL_302;
        if (v200 == 251 && !v201)
        {
          __break(0xC471u);
          JUMPOUT(0x198D29248);
        }
        goto LABEL_27;
      case 34:
      case 35:
      case 40:
      case 56:
      case 70:
        v634 = JSC::Wasm::Types::Void;
        JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v640, a3, a2, &v630, (uint64_t)&v634, *(double *)&JSC::Wasm::Types::Void, *(float *)a10.i32);
        if (!(_BYTE)v641)
        {
          __break(0xC471u);
          JUMPOUT(0x198D28BFCLL);
        }
        goto LABEL_30;
      case 36:
      case 64:
        v634 = JSC::Wasm::Types::Void;
        JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v640, a3, a2, &v630, (uint64_t)&v634, *(double *)&JSC::Wasm::Types::Void, *(float *)a10.i32);
        if (!(_BYTE)v641)
        {
          __break(0xC471u);
          JUMPOUT(0x198D28F0CLL);
        }
        goto LABEL_30;
      case 41:
        v247 = *(_QWORD *)a2 + 16;
        if (*(_QWORD *)(a2 + 16) < v247)
        {
          v244 = "can't parse 128-bit shuffle immediate";
          v245 = (unint64_t *)a2;
          v246 = 38;
          goto LABEL_156;
        }
        v355 = *(_QWORD *)(a2 + 8) + *(_QWORD *)a2;
        a9.i32[0] = *(_DWORD *)v355;
        v356 = *(_BYTE *)(v355 + 4);
        a10.i32[0] = *(_DWORD *)(v355 + 5);
        v357 = *(_BYTE *)(v355 + 9);
        v358 = *(_BYTE *)(v355 + 10);
        v359 = *(_BYTE *)(v355 + 11);
        a12.i32[0] = *(_DWORD *)(v355 + 12);
        *(_QWORD *)a2 = v247;
        v360.i64[0] = vmovl_u8(a9).u64[0];
        v361 = (uint8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
        a10.i64[0] = vmovl_u8(a12).u64[0];
        switch(a4)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198D2A418);
          case 1:
            v556 = v361.i8[6];
            v557 = v361.i8[4];
            v558 = v361.i8[2];
            v559 = v361.i8[0];
            v560.i8[0] = v360.i8[0];
            v560.i8[1] = v360.i8[4];
            v560.i8[2] = v360.i8[6];
            v560.i8[3] = v356;
            v560.i8[4] = v559;
            v560.i8[5] = v558;
            v560.i8[6] = v557;
            v560.i8[7] = v556;
            if ((vmaxv_u8(vcgt_u8(v560, (uint8x8_t)0x1F1F1F1F1F1F1F1FLL)) & 1) == 0
              && (a10.i8[0] | v360.i8[2] | a10.i8[2] | a10.i8[4] | a10.i8[6] | v359 | v357 | v358) < 0x20u)
            {
              goto LABEL_285;
            }
            goto LABEL_304;
          case 2:
            v555 = v360.i8[0];
            v360.i8[0] = v360.i8[2];
            v360.i8[1] = v555;
            v360.i8[2] = v360.i8[4];
            v360.i8[3] = v360.i8[6];
            v360.i8[4] = v356;
            v360.i8[5] = v361.i8[0];
            v360.i8[6] = v361.i8[2];
            v360.i8[7] = v361.i8[4];
            v360.i8[8] = v361.i8[6];
            v360.i8[9] = v357;
            v360.i8[10] = v358;
            v360.i8[11] = v359;
            v360.i8[12] = a10.i8[0];
            v360.i8[13] = a10.i8[2];
            v360.i8[14] = a10.i8[4];
            v360.i8[15] = a10.i8[6];
            a10.i16[0] = 3855;
            a10.i8[2] = 15;
            a10.i8[3] = 15;
            a10.i8[4] = 15;
            a10.i8[5] = 15;
            a10.i8[6] = 15;
            a10.i8[7] = 15;
            a10.i8[8] = 15;
            a10.i8[9] = 15;
            a10.i8[10] = 15;
            a10.i8[11] = 15;
            a10.i8[12] = 15;
            a10.i8[13] = 15;
            a10.i8[14] = 15;
            a10.i8[15] = 15;
            if ((vmaxvq_u8(vcgtq_u8(v360, a10)) & 1) != 0)
              goto LABEL_304;
            goto LABEL_285;
          case 3:
          case 5:
            v362.i32[0] = v360.u16[1];
            v362.i32[1] = v360.u16[0];
            v363 = vcgt_u32((uint32x2_t)0x800000008, (uint32x2_t)vand_s8(v362, (int8x8_t)0xFF000000FFLL));
            v364 = v361.i8[0];
            v361.i8[0] = v356;
            v361.i8[1] = v364;
            v361.i8[3] = v361.i8[4];
            v361.i8[4] = v361.i8[6];
            v361.i8[5] = v357;
            v361.i8[6] = v358;
            v361.i8[7] = v359;
            a10.i32[0] &= 0xFF00FFu;
            a10.i16[2] = a10.u8[4];
            a10.i16[3] = a10.u8[6];
            v365 = vcgt_u8(v361, (uint8x8_t)0x707070707070707);
            v365.i8[0] = vmaxv_u8(v365);
            *(uint16x4_t *)a10.i8 = vcgt_u16(*(uint16x4_t *)a10.i8, (uint16x4_t)0x7000700070007);
            a10.i16[0] = vmaxv_u16(*(uint16x4_t *)a10.i8);
            if ((~v365.i32[0] & ~a10.i32[0] & v363.i32[0] & v363.i32[1] & 1) == 0
              || (v360.i8[4] | v360.i8[6]) >= 8u)
            {
              goto LABEL_304;
            }
            goto LABEL_285;
          case 4:
          case 6:
            v487.i32[0] = v360.u16[1];
            v487.i32[1] = v360.u16[0];
            v488 = vcgt_u32((uint32x2_t)0x400000004, (uint32x2_t)vand_s8(v487, (int8x8_t)0xFF000000FFLL));
            v489 = v361.i8[0];
            v361.i8[0] = v356;
            v361.i8[1] = v489;
            v361.i8[3] = v361.i8[4];
            v361.i8[4] = v361.i8[6];
            v361.i8[5] = v357;
            v361.i8[6] = v358;
            v361.i8[7] = v359;
            a10.i32[0] &= 0xFF00FFu;
            a10.i16[2] = a10.u8[4];
            a10.i16[3] = a10.u8[6];
            v490 = vcgt_u8(v361, (uint8x8_t)0x303030303030303);
            v490.i8[0] = vmaxv_u8(v490);
            *(uint16x4_t *)a10.i8 = vcgt_u16(*(uint16x4_t *)a10.i8, (uint16x4_t)0x3000300030003);
            a10.i16[0] = vmaxv_u16(*(uint16x4_t *)a10.i8);
            if ((~v490.i32[0] & ~a10.i32[0] & v488.i32[0] & v488.i32[1] & 1) == 0
              || (v360.i8[4] | v360.i8[6]) >= 4u)
            {
LABEL_304:
              JSC::Wasm::ParserBase::fail<>((unint64_t *)a2, &v634);
              goto LABEL_177;
            }
LABEL_285:
            v561 = *(_DWORD *)(a2 + 68);
            if (!v561)
              goto LABEL_298;
            v562 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v561 - 24);
            *(_DWORD *)(a2 + 68) = v561 - 1;
            *(_QWORD *)&v634 = "WasmFunctionParser.h:";
            DWORD2(v634) = 21;
            LODWORD(v640) = 1111;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v628);
            v570 = v628;
            if (!v628)
            {
              __break(0xC471u);
              JUMPOUT(0x198D2A538);
            }
            v628 = 0;
            if (*(_DWORD *)v570 == 2)
            {
              WTF::StringImpl::~StringImpl(v570, v563, v564, v565, v566, v567, v568, v569);
              WTF::fastFree(v581, v582, v583, v584, v585, v586, v587, v588);
            }
            else
            {
              *(_DWORD *)v570 -= 2;
            }
            if (v562 == 251)
            {
              v571 = *(_DWORD *)(a2 + 68);
              if (!v571)
                goto LABEL_298;
              v572 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v571 - 24);
              *(_DWORD *)(a2 + 68) = v571 - 1;
              *(_QWORD *)&v634 = "WasmFunctionParser.h:";
              DWORD2(v634) = 21;
              LODWORD(v640) = 1113;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v627);
              v580 = v627;
              if (!v627)
              {
                __break(0xC471u);
                JUMPOUT(0x198D2A540);
              }
              v627 = 0;
              if (*(_DWORD *)v580 == 2)
              {
                WTF::StringImpl::~StringImpl(v580, v573, v574, v575, v576, v577, v578, v579);
                WTF::fastFree(v589, v590, v591, v592, v593, v594, v595, v596);
              }
              else
              {
                *(_DWORD *)v580 -= 2;
              }
              if (v572 == 251)
              {
                __break(0xC471u);
                JUMPOUT(0x198D2A548);
              }
            }
            v57 = "shuffle input must be a vector";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198D2A438);
        }
        goto LABEL_113;
      case 44:
      case 57:
      case 74:
        v101 = *(_DWORD *)(a2 + 68);
        if (!v101)
          goto LABEL_298;
        v102 = *(_QWORD *)(a2 + 56) + 24 * v101;
        v103 = *(unsigned __int8 *)(v102 - 24);
        v104 = *(_QWORD *)(v102 - 16);
        *(_DWORD *)(a2 + 68) = v101 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1172;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v623);
        v112 = v623;
        if (!v623)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A488);
        }
        v623 = 0;
        if (*(_DWORD *)v112 == 2)
        {
          WTF::StringImpl::~StringImpl(v112, v105, v106, v107, v108, v109, v110, v111);
          WTF::fastFree(v366, v367, v368, v369, v370, v371, v372, v373);
        }
        else
        {
          *(_DWORD *)v112 -= 2;
        }
        if (v103 == 251 && v104 == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198D28DE4);
        }
        goto LABEL_27;
      case 65:
        v222 = 16;
        switch(a4)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198D2A398);
          case 1:
            break;
          case 2:
            v222 = 8;
            break;
          case 3:
          case 5:
            v222 = 4;
            break;
          case 4:
          case 6:
            v222 = 2;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198D2A3F8);
        }
        v471 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
          goto LABEL_333;
        *(_QWORD *)a2 = v471 + 1;
        if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v471) >= v222)
          goto LABEL_321;
        v472 = *(_DWORD *)(a2 + 68);
        if (!v472)
          goto LABEL_298;
        v473 = *(_QWORD *)(a2 + 56) + 24 * v472;
        v474 = *(unsigned __int8 *)(v473 - 24);
        v475 = *(_QWORD *)(v473 - 16);
        *(_DWORD *)(a2 + 68) = v472 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1132;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v626);
        v483 = v626;
        if (!v626)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A518);
        }
        v626 = 0;
        if (*(_DWORD *)v483 == 2)
        {
          WTF::StringImpl::~StringImpl(v483, v476, v477, v478, v479, v480, v481, v482);
          WTF::fastFree(v531, v532, v533, v534, v535, v536, v537, v538);
        }
        else
        {
          *(_DWORD *)v483 -= 2;
        }
        if (v474 != 251 || v475)
          goto LABEL_27;
        if ((a4 - 1) >= 6)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A338);
        }
        v484 = qword_19915A538[(char)(a4 - 1)];
        v634 = v484;
        v485 = *(_DWORD *)(a2 + 68);
        if (v485 == *(_DWORD *)(a2 + 64))
        {
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a2 + 56, &v634, v477, v478, v479, v480, v481, v482);
        }
        else
        {
          v486 = (unint64_t *)(*(_QWORD *)(a2 + 56) + 24 * v485);
          *v486 = v484;
          v486[1] = 0;
LABEL_262:
          ++*(_DWORD *)(a2 + 68);
        }
LABEL_263:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      case 66:
        v222 = 16;
        switch(a4)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198D2A378);
          case 1:
            break;
          case 2:
            v222 = 8;
            break;
          case 3:
          case 5:
            v222 = 4;
            break;
          case 4:
          case 6:
            v222 = 2;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198D2A3D8);
        }
        v446 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
        {
LABEL_333:
          v244 = "Could not parse the lane index immediate byte.";
          v245 = (unint64_t *)a2;
          v246 = 47;
LABEL_156:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v244, v245, v246, &v634, *(float *)a10.i32);
        }
        else
        {
          *(_QWORD *)a2 = v446 + 1;
          if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v446) >= v222)
          {
LABEL_321:
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", (unint64_t *)a2, 40, v222, ", expected an ImmLaneIdx", 25, v222, &v634, *(float *)a10.i32);
          }
          else
          {
            v447 = *(_DWORD *)(a2 + 68);
            if (v447)
            {
              v448 = *(_QWORD *)(a2 + 56) + 24 * v447;
              v450 = *(_QWORD *)(v448 - 24);
              v449 = *(_QWORD *)(v448 - 16);
              *(_DWORD *)(a2 + 68) = v447 - 1;
              *(_QWORD *)&v634 = "WasmFunctionParser.h:";
              DWORD2(v634) = 21;
              LODWORD(v640) = 1152;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v625);
              v458 = v625;
              if (!v625)
              {
                __break(0xC471u);
                JUMPOUT(0x198D2A510);
              }
              v625 = 0;
              if (*(_DWORD *)v458 == 2)
              {
                WTF::StringImpl::~StringImpl(v458, v451, v452, v453, v454, v455, v456, v457);
                WTF::fastFree(v523, v524, v525, v526, v527, v528, v529, v530);
              }
              else
              {
                *(_DWORD *)v458 -= 2;
              }
              v459 = *(_DWORD *)(a2 + 68);
              if (v459)
              {
                v460 = *(_QWORD *)(a2 + 56) + 24 * v459;
                v461 = *(unsigned __int8 *)(v460 - 24);
                v462 = *(_QWORD *)(v460 - 16);
                *(_DWORD *)(a2 + 68) = v459 - 1;
                *(_QWORD *)&v634 = "WasmFunctionParser.h:";
                DWORD2(v634) = 21;
                LODWORD(v640) = 1153;
                WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v624);
                v470 = v624;
                if (!v624)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198D2A528);
                }
                v624 = 0;
                if (*(_DWORD *)v470 == 2)
                {
                  WTF::StringImpl::~StringImpl(v470, v463, v464, v465, v466, v467, v468, v469);
                  WTF::fastFree(v547, v548, v549, v550, v551, v552, v553, v554);
                }
                else
                {
                  *(_DWORD *)v470 -= 2;
                }
                if (v461 != 251 || v462)
                {
LABEL_302:
                  v57 = "type mismatch for argument 1";
                }
                else
                {
                  if ((a4 - 1) >= 6)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198D2A358);
                  }
                  if ((0xFCFDFEFFFFFFuLL >> (8 * (a4 - 1))) == v450
                    && !v449)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198D29BA8);
                  }
LABEL_27:
                  v57 = "type mismatch for argument 0";
                }
LABEL_28:
                v58 = 29;
LABEL_29:
                *(_QWORD *)&v634 = v57;
                *((_QWORD *)&v634 + 1) = v58;
                JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v640, (uint64_t)&v634, v42, *(float *)a10.i32);
                goto LABEL_30;
              }
LABEL_298:
              v597 = "vector argument";
            }
            else
            {
              v597 = "scalar argument";
            }
            v598 = (unint64_t *)a2;
            v599 = 16;
LABEL_300:
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v598, 26, v597, v599, &v634, *(float *)a10.i32);
          }
        }
LABEL_177:
        v59 = (void (**)(WTF::StringPrintStream *__hidden))v634;
        goto LABEL_31;
      case 72:
        v248 = *(_DWORD *)(a2 + 68);
        if (!v248)
          goto LABEL_298;
        v249 = *(_QWORD *)(a2 + 56) + 24 * v248;
        v250 = *(unsigned __int8 *)(v249 - 24);
        v251 = *(_QWORD *)(v249 - 16);
        *(_DWORD *)(a2 + 68) = v248 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1223;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v621);
        v259 = v621;
        if (!v621)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A500);
        }
        v621 = 0;
        if (*(_DWORD *)v259 == 2)
        {
          WTF::StringImpl::~StringImpl(v259, v252, v253, v254, v255, v256, v257, v258);
          WTF::fastFree(v507, v508, v509, v510, v511, v512, v513, v514);
        }
        else
        {
          *(_DWORD *)v259 -= 2;
        }
        v260 = *(_DWORD *)(a2 + 68);
        if (!v260)
          goto LABEL_298;
        v261 = *(_QWORD *)(a2 + 56) + 24 * v260;
        v262 = *(unsigned __int8 *)(v261 - 24);
        v263 = *(_QWORD *)(v261 - 16);
        *(_DWORD *)(a2 + 68) = v260 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1224;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v620);
        v271 = v620;
        if (!v620)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A508);
        }
        v620 = 0;
        if (*(_DWORD *)v271 == 2)
        {
          WTF::StringImpl::~StringImpl(v271, v264, v265, v266, v267, v268, v269, v270);
          WTF::fastFree(v515, v516, v517, v518, v519, v520, v521, v522);
        }
        else
        {
          *(_DWORD *)v271 -= 2;
        }
        v272 = *(_DWORD *)(a2 + 68);
        if (!v272)
          goto LABEL_298;
        v273 = *(_QWORD *)(a2 + 56) + 24 * v272;
        v274 = *(unsigned __int8 *)(v273 - 24);
        v275 = *(_QWORD *)(v273 - 16);
        *(_DWORD *)(a2 + 68) = v272 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1225;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v619);
        v283 = v619;
        if (!v619)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A520);
        }
        v619 = 0;
        if (*(_DWORD *)v283 == 2)
        {
          WTF::StringImpl::~StringImpl(v283, v276, v277, v278, v279, v280, v281, v282);
          WTF::fastFree(v539, v540, v541, v542, v543, v544, v545, v546);
        }
        else
        {
          *(_DWORD *)v283 -= 2;
        }
        if (v274 != 251 || v275)
          goto LABEL_101;
        if (v262 != 251 || v263)
          goto LABEL_302;
        if (v250 == 251 && !v251)
        {
          __break(0xC471u);
          JUMPOUT(0x198D295E0);
        }
        goto LABEL_27;
      case 79:
      case 80:
        v142 = *(_DWORD *)(a2 + 68);
        if (!v142)
          goto LABEL_298;
        v143 = *(_QWORD *)(a2 + 56) + 24 * v142;
        v144 = *(unsigned __int8 *)(v143 - 24);
        v145 = *(_QWORD *)(v143 - 16);
        *(_DWORD *)(a2 + 68) = v142 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1325;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v612);
        v153 = v612;
        if (!v612)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A498);
        }
        v612 = 0;
        if (*(_DWORD *)v153 == 2)
        {
          WTF::StringImpl::~StringImpl(v153, v146, v147, v148, v149, v150, v151, v152);
          WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
        }
        else
        {
          *(_DWORD *)v153 -= 2;
        }
        v154 = *(_DWORD *)(a2 + 68);
        if (!v154)
          goto LABEL_298;
        v155 = *(_QWORD *)(a2 + 56) + 24 * v154;
        v156 = *(unsigned __int8 *)(v155 - 24);
        v157 = *(_QWORD *)(v155 - 16);
        *(_DWORD *)(a2 + 68) = v154 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1326;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v611);
        v165 = v611;
        if (!v611)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A4B8);
        }
        v611 = 0;
        if (*(_DWORD *)v165 == 2)
        {
          WTF::StringImpl::~StringImpl(v165, v158, v159, v160, v161, v162, v163, v164);
          WTF::fastFree(v414, v415, v416, v417, v418, v419, v420, v421);
        }
        else
        {
          *(_DWORD *)v165 -= 2;
        }
        v166 = *(_DWORD *)(a2 + 68);
        if (!v166)
          goto LABEL_298;
        v167 = *(_QWORD *)(a2 + 56) + 24 * v166;
        v168 = *(unsigned __int8 *)(v167 - 24);
        v169 = *(_QWORD *)(v167 - 16);
        *(_DWORD *)(a2 + 68) = v166 - 1;
        *(_QWORD *)&v634 = "WasmFunctionParser.h:";
        DWORD2(v634) = 21;
        LODWORD(v640) = 1327;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v634, (unsigned int *)&v640, (int **)&v610);
        v177 = v610;
        if (!v610)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A4D8);
        }
        v610 = 0;
        if (*(_DWORD *)v177 == 2)
        {
          WTF::StringImpl::~StringImpl(v177, v170, v171, v172, v173, v174, v175, v176);
          WTF::fastFree(v438, v439, v440, v441, v442, v443, v444, v445);
        }
        else
        {
          *(_DWORD *)v177 -= 2;
        }
        if (v168 != 251 || v169)
          goto LABEL_27;
        if (v156 != 251 || v157)
          goto LABEL_302;
        if (v144 == 251 && !v145)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2A4E8);
        }
LABEL_101:
        v57 = "type mismatch for argument 2";
        goto LABEL_28;
      default:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", (unint64_t *)a2, 17, a3, &v634, *(float *)a10.i32);
        goto LABEL_177;
    }
  }
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("relaxed simd instructions not supported", (unint64_t *)a2, 40, &v634, *(float *)a10.i32);
  *(_QWORD *)a1 = v634;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t JSC::Wasm::memoryLog2Alignment(int a1)
{
  uint64_t result;

  if ((a1 - 40) < 0x17)
    return dword_19915A4D8[(char)(a1 - 40)];
  result = 718;
  __break(0xC471u);
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, WTF::PrintStream *a6, uint64_t a7, _DWORD *a8, double a9, float a10, uint64_t a11)
{
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  float v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  float v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  float v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  WTF *v102;
  WTF::PrintStream *v103;
  float v104;
  double v105;
  const WTF::String *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  const WTF::String *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  float v120;
  const WTF::String *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  float v128;
  const WTF::String *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  float v136;
  const WTF::String *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  float v144;
  const WTF::String *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  float v152;
  const WTF::String *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  float v160;
  const WTF::String *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  float v168;
  WTF::AtomStringImpl *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF *v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  int v258;
  char v259;
  void (**v260)(WTF::StringPrintStream *__hidden);
  WTF *v261;
  __int128 v262;
  _BYTE v263[128];
  void (**v264)(WTF::StringPrintStream *__hidden);
  unint64_t v265;
  __int128 v266;
  _BYTE v267[128];
  uint64_t v268;

  v268 = *MEMORY[0x1E0C80C00];
  v260 = off_1E3572250;
  v261 = (WTF *)v263;
  v262 = xmmword_199122F80;
  v263[0] = 0;
  v264 = off_1E3572250;
  v265 = (unint64_t)v267;
  v266 = xmmword_199122F80;
  v267[0] = 0;
  if (*(_QWORD *)a2)
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = v17 != 0;
    v19 = v17 - 1;
    if (!v18)
      v19 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v19, (uint64_t)&v257, a10);
  }
  else
  {
    v20 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v257 = (WTF::StringImpl *)v20;
    v258 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v264, "StringView", &v257);
  if (v258 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v258])(&v256, &v257);
  v264[5]((WTF::StringPrintStream *)&v264);
  v264[5]((WTF::StringPrintStream *)&v264);
  v28 = v265;
  if (!v265)
  {
    v256 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>(v265, v266, (uint64_t *)&v256);
  v28 = v265;
  if ((_BYTE *)v265 != v267)
LABEL_12:
    WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
  v264 = off_1E3572250;
  v265 = (unint64_t)v267;
  v266 = xmmword_199122F80;
  v267[0] = 0;
  if (*(_QWORD *)a3)
  {
    v30 = *(_QWORD *)(a3 + 8);
    v18 = v30 != 0;
    v31 = v30 - 1;
    if (!v18)
      v31 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v31, (uint64_t)&v257, v29);
  }
  else
  {
    v32 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v32 = 1;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v257 = (WTF::StringImpl *)v32;
    v258 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v264, "StringView", &v257);
  if (v258 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v258])(&v255, &v257);
  v264[5]((WTF::StringPrintStream *)&v264);
  v264[5]((WTF::StringPrintStream *)&v264);
  v40 = v265;
  if (!v265)
  {
    v255 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>(v265, v266, (uint64_t *)&v255);
  v40 = v265;
  if ((_BYTE *)v265 != v267)
LABEL_24:
    WTF::fastFree(v40, v33, v34, v35, v36, v37, v38, v39);
  v264 = off_1E3572250;
  v265 = (unint64_t)v267;
  v266 = xmmword_199122F80;
  v267[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v264, "%lu", *a4);
  v264[5]((WTF::StringPrintStream *)&v264);
  v48 = v265;
  if (!v265)
  {
    v254 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>(v265, v266, (uint64_t *)&v254);
  v48 = v265;
  if ((_BYTE *)v265 != v267)
LABEL_29:
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  v264 = off_1E3572250;
  v265 = (unint64_t)v267;
  v266 = xmmword_199122F80;
  v267[0] = 0;
  if (*(_QWORD *)a5)
  {
    v50 = *(_QWORD *)(a5 + 8);
    v18 = v50 != 0;
    v51 = v50 - 1;
    if (!v18)
      v51 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v51, (uint64_t)&v257, v49);
  }
  else
  {
    v52 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v52 = 1;
    *(_QWORD *)(v52 + 8) = 0;
    *(_BYTE *)(v52 + 16) = 0;
    v257 = (WTF::StringImpl *)v52;
    v258 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v264, "StringView", &v257);
  if (v258 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v258])(&v253, &v257);
  v264[5]((WTF::StringPrintStream *)&v264);
  v264[5]((WTF::StringPrintStream *)&v264);
  v60 = v265;
  if (!v265)
  {
    v253 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>(v265, v266, (uint64_t *)&v253);
  v60 = v265;
  if ((_BYTE *)v265 != v267)
LABEL_41:
    WTF::fastFree(v60, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
  v264 = off_1E3572250;
  v265 = (unint64_t)v267;
  v266 = xmmword_199122F80;
  v267[0] = 0;
  WTF::printInternal((WTF *)&v264, a6, v54, v55, v56, v57, v58, v59, 0.0, v61);
  v264[5]((WTF::StringPrintStream *)&v264);
  v69 = v265;
  if (!v265)
  {
    v252 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>(v265, v266, (uint64_t *)&v252);
  v69 = v265;
  if ((_BYTE *)v265 != v267)
LABEL_46:
    WTF::fastFree(v69, v62, v63, v64, v65, v66, v67, v68);
  v264 = off_1E3572250;
  v265 = (unint64_t)v267;
  v266 = xmmword_199122F80;
  v267[0] = 0;
  if (*(_QWORD *)a7)
  {
    v71 = *(_QWORD *)(a7 + 8);
    v18 = v71 != 0;
    v72 = v71 - 1;
    if (!v18)
      v72 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a7, v72, (uint64_t)&v257, v70);
  }
  else
  {
    v73 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v73 = 1;
    *(_QWORD *)(v73 + 8) = 0;
    *(_BYTE *)(v73 + 16) = 0;
    v257 = (WTF::StringImpl *)v73;
    v258 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v264, "StringView", &v257);
  if (v258 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v258])(&v251, &v257);
  v264[5]((WTF::StringPrintStream *)&v264);
  v264[5]((WTF::StringPrintStream *)&v264);
  v81 = v265;
  if (!v265)
  {
    v251 = 0;
    goto LABEL_58;
  }
  WTF::fromUTF8Impl<false>(v265, v266, (uint64_t *)&v251);
  v81 = v265;
  if ((_BYTE *)v265 != v267)
LABEL_58:
    WTF::fastFree(v81, v74, v75, v76, v77, v78, v79, v80);
  v264 = off_1E3572250;
  v265 = (unint64_t)v267;
  v266 = xmmword_199122F80;
  v267[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v264, "%u", *a8);
  v264[5]((WTF::StringPrintStream *)&v264);
  v89 = v265;
  if (!v265)
  {
    v250 = 0;
    goto LABEL_63;
  }
  WTF::fromUTF8Impl<false>(v265, v266, (uint64_t *)&v250);
  v89 = v265;
  if ((_BYTE *)v265 != v267)
LABEL_63:
    WTF::fastFree(v89, v82, v83, v84, v85, v86, v87, v88);
  v264 = off_1E3572250;
  v265 = (unint64_t)v267;
  v266 = xmmword_199122F80;
  v267[0] = 0;
  if (*(_QWORD *)a11)
  {
    v91 = *(_QWORD *)(a11 + 8);
    v18 = v91 != 0;
    v92 = v91 - 1;
    if (!v18)
      v92 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a11, v92, (uint64_t)&v257, v90);
  }
  else
  {
    v93 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v93 = 1;
    *(_QWORD *)(v93 + 8) = 0;
    *(_BYTE *)(v93 + 16) = 0;
    v257 = (WTF::StringImpl *)v93;
    v258 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v264, "StringView", &v257);
  if (v258 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v258])(&v259, &v257);
  v264[5]((WTF::StringPrintStream *)&v264);
  v264[5]((WTF::StringPrintStream *)&v264);
  v101 = v265;
  if (!v265)
  {
    v257 = 0;
    goto LABEL_75;
  }
  WTF::fromUTF8Impl<false>(v265, v266, (uint64_t *)&v257);
  v101 = v265;
  if ((_BYTE *)v265 != v267)
LABEL_75:
    WTF::fastFree(v101, v94, v95, v96, v97, v98, v99, v100);
  v102 = (WTF *)((uint64_t (*)(_QWORD))v260[4])(&v260);
  v103 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v102 + 32))(v102);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v264, v104);
  WTF::printExpectedCStringHelper(v103, "StringView", &v264);
  if ((_DWORD)v265 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v265])(&v259, &v264);
  v105 = (*(double (**)(WTF *))(*(_QWORD *)v102 + 40))(v102);
  WTF::printInternal(v102, (WTF::PrintStream *)&v256, v106, v107, v108, v109, v110, v111, v105, v112);
  WTF::printInternal(v102, (WTF::PrintStream *)&v255, v113, v114, v115, v116, v117, v118, v119, v120);
  WTF::printInternal(v102, (WTF::PrintStream *)&v254, v121, v122, v123, v124, v125, v126, v127, v128);
  WTF::printInternal(v102, (WTF::PrintStream *)&v253, v129, v130, v131, v132, v133, v134, v135, v136);
  WTF::printInternal(v102, (WTF::PrintStream *)&v252, v137, v138, v139, v140, v141, v142, v143, v144);
  WTF::printInternal(v102, (WTF::PrintStream *)&v251, v145, v146, v147, v148, v149, v150, v151, v152);
  WTF::printInternal(v102, (WTF::PrintStream *)&v250, v153, v154, v155, v156, v157, v158, v159, v160);
  WTF::printInternal(v102, (WTF::PrintStream *)&v257, v161, v162, v163, v164, v165, v166, v167, v168);
  v260[5]((WTF::StringPrintStream *)&v260);
  v176 = v257;
  v257 = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  v177 = v250;
  v250 = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
    {
      WTF::StringImpl::~StringImpl(v177, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
    }
    else
    {
      *(_DWORD *)v177 -= 2;
    }
  }
  v178 = v251;
  v251 = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
    {
      WTF::StringImpl::~StringImpl(v178, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
    }
    else
    {
      *(_DWORD *)v178 -= 2;
    }
  }
  v179 = v252;
  v252 = 0;
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
    {
      WTF::StringImpl::~StringImpl(v179, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
    }
    else
    {
      *(_DWORD *)v179 -= 2;
    }
  }
  v180 = v253;
  v253 = 0;
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
    {
      WTF::StringImpl::~StringImpl(v180, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
    }
    else
    {
      *(_DWORD *)v180 -= 2;
    }
  }
  v181 = v254;
  v254 = 0;
  if (v181)
  {
    if (*(_DWORD *)v181 == 2)
    {
      WTF::StringImpl::~StringImpl(v181, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
    }
    else
    {
      *(_DWORD *)v181 -= 2;
    }
  }
  v182 = v255;
  v255 = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
    {
      WTF::StringImpl::~StringImpl(v182, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
    }
    else
    {
      *(_DWORD *)v182 -= 2;
    }
  }
  v183 = v256;
  v256 = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
    {
      WTF::StringImpl::~StringImpl(v183, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v241, v242, v243, v244, v245, v246, v247, v248);
    }
    else
    {
      *(_DWORD *)v183 -= 2;
    }
  }
  v184 = v261;
  if (v261)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v261, v262, (uint64_t *)&v264);
    v184 = v261;
    *a1 = v264;
    if (v184 == (WTF *)v263)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v184, v169, v170, v171, v172, v173, v174, v175);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, JSC::Wasm::Type *a6, uint64_t a7, _DWORD *a8, double a9, float a10)
{
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  double v28;
  float v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  double v42;
  float v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF::PrintStream *v65;
  float v66;
  double v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  const WTF::String *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  float v82;
  const WTF::String *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  float v90;
  const WTF::String *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  float v98;
  const WTF::String *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  float v106;
  const WTF::String *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  float v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  int v184;
  char v185;
  void (**v186)(WTF::StringPrintStream *__hidden);
  WTF *v187;
  __int128 v188;
  _BYTE v189[128];
  void (**v190)(WTF::StringPrintStream *__hidden);
  WTF *v191;
  __int128 v192;
  _BYTE v193[128];
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v186 = off_1E3572250;
  v187 = (WTF *)v189;
  v188 = xmmword_199122F80;
  v189[0] = 0;
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a3)
  {
    v16 = *(_QWORD *)(a3 + 8);
    v17 = v16 != 0;
    v18 = v16 - 1;
    if (!v17)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v18, (uint64_t)&v183, a10);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v183 = (WTF::StringImpl *)v19;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v182, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v27 = v191;
  if (!v191)
  {
    v182 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v182);
  v27 = v191;
  if (v191 != (WTF *)v193)
LABEL_12:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v181, a2, a4, v28, v29);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a5)
  {
    v31 = *(_QWORD *)(a5 + 8);
    v17 = v31 != 0;
    v32 = v31 - 1;
    if (!v17)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v32, (uint64_t)&v183, v30);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v183 = (WTF::StringImpl *)v33;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v180, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v41 = v191;
  if (!v191)
  {
    v180 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v180);
  v41 = v191;
  if (v191 != (WTF *)v193)
LABEL_24:
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::typeToStringModuleRelative((uint64_t *)&v179, a2, a6, v42, v43);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a7)
  {
    v45 = *(_QWORD *)(a7 + 8);
    v17 = v45 != 0;
    v46 = v45 - 1;
    if (!v17)
      v46 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a7, v46, (uint64_t)&v183, v44);
  }
  else
  {
    v47 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v47 = 1;
    *(_QWORD *)(v47 + 8) = 0;
    *(_BYTE *)(v47 + 16) = 0;
    v183 = (WTF::StringImpl *)v47;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v178, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v55 = v191;
  if (!v191)
  {
    v183 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v183);
  v55 = v191;
  if (v191 != (WTF *)v193)
LABEL_36:
    WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v190, "%u", *a8);
  v190[5]((WTF::StringPrintStream *)&v190);
  v63 = v191;
  if (!v191)
  {
    v178 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v178);
  v63 = v191;
  if (v191 != (WTF *)v193)
LABEL_41:
    WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
  v64 = (WTF *)((uint64_t (*)(_QWORD))v186[4])(&v186);
  v65 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v64 + 32))(v64);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v190, v66);
  WTF::printExpectedCStringHelper(v65, "StringView", &v190);
  if ((_DWORD)v191 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v191])(&v185, &v190);
  v67 = (*(double (**)(WTF *))(*(_QWORD *)v64 + 40))(v64);
  WTF::printInternal(v64, (WTF::PrintStream *)&v182, v68, v69, v70, v71, v72, v73, v67, v74);
  WTF::printInternal(v64, (WTF::PrintStream *)&v181, v75, v76, v77, v78, v79, v80, v81, v82);
  WTF::printInternal(v64, (WTF::PrintStream *)&v180, v83, v84, v85, v86, v87, v88, v89, v90);
  WTF::printInternal(v64, (WTF::PrintStream *)&v179, v91, v92, v93, v94, v95, v96, v97, v98);
  WTF::printInternal(v64, (WTF::PrintStream *)&v183, v99, v100, v101, v102, v103, v104, v105, v106);
  WTF::printInternal(v64, (WTF::PrintStream *)&v178, v107, v108, v109, v110, v111, v112, v113, v114);
  v186[5]((WTF::StringPrintStream *)&v186);
  v122 = v178;
  v178 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  v123 = v183;
  v183 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  v124 = v179;
  v179 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  v125 = v180;
  v180 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  v126 = v181;
  v181 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = v182;
  v182 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = v187;
  if (v187)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v187, v188, (uint64_t *)&v190);
    v128 = v187;
    *a1 = v190;
    if (v128 == (WTF *)v189)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v128, v115, v116, v117, v118, v119, v120, v121);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, unint64_t a10)
{
  uint64_t result;
  unsigned int v12;
  unint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];

  v16[0] = a1;
  v16[1] = a2;
  v15[0] = a4;
  v15[1] = a5;
  v14[0] = a7;
  v14[1] = a8;
  v13 = a3;
  v12 = a6;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((uint64_t)v16, &v13, (uint64_t)v15, &v12, (uint64_t)v14, &a10, a9);
  if (!*a9)
    __break(0xC471u);
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, uint64_t a3, _DWORD *a4, uint64_t a5, double a6, float a7)
{
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void (**v55)(WTF::StringPrintStream *__hidden);
  char *v56;
  unint64_t *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  void (**v60[2])(WTF::StringPrintStream *__hidden);
  void (**v61)(WTF::StringPrintStream *__hidden);
  unsigned int v62;
  unsigned int v63;
  const char *v64;
  uint64_t v65;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_8;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v9 = 0;
        v63 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_43:
        v9 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_43;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_8;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x198D2B668);
    }
LABEL_13:
    v9 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v9 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
    goto LABEL_8;
LABEL_10:
  v9 = 2;
LABEL_15:
  v63 = v9;
LABEL_16:
  if (*(_DWORD *)(*(_QWORD *)(a3 + 14576) + 104) == -1)
  {
    v53 = "simd memory instructions need a memory defined in the module";
    v54 = 61;
LABEL_49:
    v64 = v53;
    v65 = v54;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v60, (uint64_t)&v64, a6, a7);
    v55 = v60[0];
    goto LABEL_50;
  }
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)a3;
  v12 = v10 - *(_QWORD *)a3;
  if (v10 > *(_QWORD *)a3)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a3 + 8);
    v17 = 5;
    if (v12 < 5)
      v17 = v10 - *(_QWORD *)a3;
    v18 = v17 - 1;
    *(_QWORD *)a3 = v11 + 1;
    v19 = v16 + v11;
    while (1)
    {
      v20 = *(char *)(v19 + v13);
      v15 |= (v20 & 0x7F) << v14;
      if ((v20 & 0x80000000) == 0)
        break;
      if (v18 == v13)
        goto LABEL_52;
      v21 = v11 + v13 + 2;
      *(_QWORD *)a3 = v21;
      ++v13;
      v14 += 7;
      if (v12 == v13)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v62 = v15;
    if ((_DWORD)v13 != 4 || v20 < 0x10u)
    {
      if (v10 <= v11 + v13 + 1)
        goto LABEL_54;
      v19 = 0;
      v22 = 0;
      v23 = 0;
      *a4 = 0;
      v24 = ~v13 + v12;
      v25 = 5;
      if (v24 < 5)
        v25 = v24;
      v26 = v11 + v13;
      *(_QWORD *)a3 = v11 + v13 + 2;
      v27 = v11 - v10;
      v28 = v16 + v11;
      v29 = v25 - 1;
      v30 = v27 + v13;
      while (1)
      {
        LODWORD(v21) = *(char *)(v28 + v19 + v13 + 1);
        v23 |= (v21 & 0x7F) << v22;
        *a4 = v23;
        if ((v21 & 0x80000000) == 0)
          break;
        if (v29 == v19)
          goto LABEL_54;
        v31 = v26 + v19;
        v32 = v30 + v19++;
        v21 = v31 + 3;
        *(_QWORD *)a3 = v21;
        v22 += 7;
        if (v32 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v19 == 4 && v21 >= 0x10u)
      {
LABEL_54:
        v56 = "can't get simd memory op offset";
        v57 = (unint64_t *)a3;
        v58 = 32;
        goto LABEL_55;
      }
      if (v15 > v9)
      {
        v64 = "alignment: ";
        v65 = 12;
        v60[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
        v60[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v61, (uint64_t)&v64, &v62, (uint64_t)v60, &v63, a6, a7);
        v55 = v61;
        goto LABEL_50;
      }
      v33 = *(_DWORD *)(a3 + 68);
      if (!v33)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a3, 26, "simd memory op pointer", 23, &v64, a7);
        goto LABEL_47;
      }
      v34 = *(_QWORD *)(a3 + 56) + 24 * v33;
      v35 = *(_OWORD *)(v34 - 24);
      v36 = *(_QWORD *)(v34 - 8);
      *(_DWORD *)(a3 + 68) = v33 - 1;
      *(_BYTE *)(a5 + 16) = v36;
      *(_OWORD *)a5 = v35;
      v64 = "WasmFunctionParser.h:";
      LODWORD(v65) = 21;
      LODWORD(v60[0]) = 830;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v64, (unsigned int *)v60, (int **)&v59);
      v44 = v59;
      if (!v59)
      {
        __break(0xC471u);
        JUMPOUT(0x198D2B9C4);
      }
      v59 = 0;
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
      if (*(_BYTE *)a5 == 0xFF)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v53 = "pointer must be i32";
      v54 = 20;
      goto LABEL_49;
    }
  }
LABEL_52:
  v56 = "can't get simd memory op alignment";
  v57 = (unint64_t *)a3;
  v58 = 35;
LABEL_55:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v56, v57, v58, &v64, a7);
LABEL_47:
  v55 = (void (**)(WTF::StringPrintStream *__hidden))v64;
LABEL_50:
  *(_QWORD *)a1 = v55;
  a1[8] = 1;
}

uint64_t WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    result = WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a1, a2);
    if (!(_DWORD)result)
      return result;
    memcpy(*(void **)a1, v3, 8 * v4);
    if (v3)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return 1;
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(char *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int *v11;
  BOOL v12;
  int v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  int v24;
  _QWORD v25[3];

  v5 = 0;
  v25[2] = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)result + 2);
  v7 = *a2;
  v8 = *a2;
  do
  {
    ++v5;
    v9 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v9);
  v10 = *(_DWORD *)(a3 + 8);
  if ((v10 | v5) < 0)
    goto LABEL_28;
  v11 = 0;
  v12 = __OFADD__(v5, v10);
  v13 = v5 + v10;
  v14 = v12;
  if (v6 < 0 || (v14 & 1) != 0)
    goto LABEL_27;
  v15 = (v6 + v13);
  if (__OFADD__(v6, v13))
    goto LABEL_28;
  if (!(_DWORD)v15)
  {
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_27;
  }
  if ((v15 & 0x80000000) != 0)
  {
LABEL_28:
    v11 = 0;
    goto LABEL_27;
  }
  v16 = *(_BYTE **)result;
  v17 = *((unsigned int *)result + 2);
  v18 = *(char **)a3;
  v19 = *(unsigned int *)(a3 + 8);
  result = (char *)WTF::tryFastCompactMalloc((WTF *)(v15 + 20), v25);
  v11 = (int *)v25[0];
  if (v25[0])
  {
    v20 = (_BYTE *)(v25[0] + 20);
    *(_DWORD *)v25[0] = 2;
    v11[1] = v15;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 4;
    if ((_DWORD)v17 == 1)
    {
      *v20 = *v16;
    }
    else if ((_DWORD)v17)
    {
      memcpy(v11 + 5, v16, v17);
    }
    v21 = 0;
    v22 = v7;
    do
    {
      *((_BYTE *)&v25[1] + v21-- + 4) = (v22 % 0xA) | 0x30;
      v9 = v22 > 9;
      v22 /= 0xAu;
    }
    while (v9);
    v23 = &v20[v17];
    if (v21 + 14 <= 13)
      memcpy(v23, (char *)&v25[1] + v21 + 5, -v21);
    v24 = 0;
    do
    {
      ++v24;
      v9 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v9);
    result = &v23[v24];
    if ((_DWORD)v19 == 1)
    {
      *result = *v18;
    }
    else if ((_DWORD)v19)
    {
      result = (char *)memcpy(result, v18, v19);
    }
  }
LABEL_27:
  *a4 = v11;
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v18 - 2) = -1;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (int *)(v6 + 16 * v19);
      v22 = *v21;
      if (*v21 != -2)
      {
        if (v22 == -1)
        {
          v23 = *(_QWORD *)(v6 + 16 * v19 + 8);
          if (v23)
            WTF::fastFree(v23 - 16, v10, v11, v12, v13, v14, v15, v16);
        }
        else
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = 0;
          v27 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
          v28 = ((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) ^ (((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) >> 16);
          do
          {
            v29 = v28 & v25;
            v28 = ++v26 + v29;
          }
          while (*(_DWORD *)(v24 + 16 * v29) != -1);
          v30 = v24 + 16 * v29;
          v32 = (_QWORD *)(v30 + 8);
          v31 = *(_QWORD *)(v30 + 8);
          if (v31)
          {
            WTF::fastFree(v31 - 16, v10, v11, v12, v13, v14, v15, v16);
            v22 = *v21;
          }
          *(_DWORD *)v30 = v22;
          v33 = v6 + 16 * v19;
          *v32 = 0;
          v34 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          *v32 = v34;
          v35 = *(_QWORD *)(v33 + 8);
          if (v35)
            WTF::fastFree(v35 - 16, v10, v11, v12, v13, v14, v15, v16);
          if (v21 == a3)
            v20 = v30;
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t WTF::tryMakeString<std::span<char8_t const,18446744073709551615ul>,WTF::ASCIILiteral,unsigned long,char>(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, char *a6)
{
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE v14[16];
  unint64_t v15;

  WTF::Unicode::checkUTF8(a2, a3, (uint64_t)v14);
  if (v15 >> 31)
    v15 = 0;
  v10 = a4[1];
  if (!v10)
  {
    v12 = *a4;
LABEL_5:
    v13 = v10;
    return (uint64_t)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<std::span<char8_t const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>(a1, (uint64_t)v14, (uint64_t)&v12, *a5, *a6);
  }
  --v10;
  v12 = *a4;
  if (!(v10 >> 31))
    goto LABEL_5;
  result = 124;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<std::span<char8_t const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  unsigned int v16;
  int v17;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;

  v5 = result;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a3 + 8);
  v9 = a4;
  do
  {
    ++v6;
    v10 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v10);
  if (v6 < 0)
    goto LABEL_17;
  v11 = __OFADD__(v6, 1);
  v12 = v6 + 1;
  v13 = v11;
  if (v8 < 0
    || v13
    || ((v11 = __OFADD__(v8, v12), v14 = v8 + v12, !v11) ? (v15 = 0) : (v15 = 1),
        (v7 & 0x80000000) != 0 || (v15 & 1) != 0 || (v11 = __OFADD__((_DWORD)v7, v14), v16 = v7 + v14, v11)))
  {
LABEL_17:
    *result = 0;
  }
  else
  {
    v17 = *(unsigned __int8 *)(a2 + 24);
    v18 = *(_OWORD *)(a2 + 16);
    v19[0] = *(_OWORD *)a2;
    v19[1] = v18;
    result = (_QWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<std::span<char8_t const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v20, v16, v17, (uint64_t)v19, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), a4, a5);
    *v5 = v20;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<std::span<char8_t const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, int8x16_t *a5, unsigned int a6, unint64_t a7, char a8)
{
  _QWORD *v14;
  int *v15;
  const void *v16;
  size_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD v20[2];
  int *v21;

  v14 = (_QWORD *)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20), &v21);
        v15 = v21;
        if (v21)
        {
          *v21 = 2;
          v15[1] = a2;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          v16 = *(const void **)a4;
          v17 = *(_QWORD *)(a4 + 16);
          memcpy(v15 + 5, v16, v17);
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>((_BYTE *)v15 + v17 + 20, a5, a6, a7, a8);
        }
        goto LABEL_6;
      }
LABEL_12:
      v15 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v15 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_11;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), &v21);
  v15 = v21;
  if (v21)
  {
    v18 = (uint64_t)(v21 + 5);
    *v21 = 2;
    v15[1] = a2;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 0;
    v19 = *(_OWORD *)(a4 + 16);
    v20[0] = *(_OWORD *)a4;
    v20[1] = v19;
    result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<std::span<char8_t const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>(v18, (uint64_t *)v20, a5, a6, a7, a8);
  }
LABEL_6:
  *v14 = v15;
  return result;
}

uint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<std::span<char8_t const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, uint64_t *a2, int8x16_t *a3, int a4, unint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  char *v30;
  int v32;
  unint64_t v34[5];
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;

  v10 = result;
  v34[4] = *MEMORY[0x1E0C80C00];
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v34[0] = 0;
  if (v12)
  {
    v14 = 0;
    while (1)
    {
      result = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(v11, v12, v34);
      if ((_DWORD)result == -1)
        break;
      if (v14 == v13)
        goto LABEL_16;
      if (WORD1(result))
      {
        if (WORD1(result) > 0x10u || v14 + 1 >= v13)
          break;
        if (v13 <= v14)
          goto LABEL_31;
        *(_WORD *)(v10 + 2 * v14) = (result >> 10) - 10304;
        v15 = v14 + 2;
        ++v14;
        result = result & 0x3FF | 0xFFFFDC00;
      }
      else
      {
        if (v13 <= v14)
          goto LABEL_31;
        v15 = v14 + 1;
      }
      *(_WORD *)(v10 + 2 * v14) = result;
      v14 = v15;
      if (v34[0] >= v12)
        goto LABEL_15;
    }
    v15 = v14;
LABEL_15:
    if (v13 < v15)
LABEL_31:
      __break(1u);
  }
LABEL_16:
  v16 = (char *)(v10 + 2 * *((unsigned int *)a2 + 4));
  v17 = &v16[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v18 = &v16[2 * (a4 & 0xFFFFFFC0)];
    v19 = 0uLL;
    do
    {
      v35.val[0] = *a3;
      v20 = a3[1];
      v36.val[0] = a3[2];
      v21 = a3[3];
      a3 += 4;
      v22 = v21;
      v36.val[1] = 0uLL;
      v37.val[0] = v20;
      v35.val[1] = 0uLL;
      v23 = v16;
      vst2q_s8(v23, v35);
      v23 += 32;
      v37.val[1] = 0uLL;
      vst2q_s8(v23, v37);
      v24 = v16 + 64;
      vst2q_s8(v24, v36);
      v25 = v16 + 96;
      vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
      v16 += 128;
    }
    while (v16 != v18);
    v16 = v18;
  }
  while (v16 != v17)
  {
    v26 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v16 = v26;
    v16 += 2;
  }
  v27 = 0;
  v28 = a5;
  do
  {
    *((_BYTE *)&v34[3] + v27--) = (v28 % 0xA) | 0x30;
    v29 = v28 > 9;
    v28 /= 0xAuLL;
  }
  while (v29);
  if (v27 + 26 <= 25)
  {
    v30 = v17;
    do
    {
      *(_WORD *)v30 = *((unsigned __int8 *)&v34[3] + v27 + 1);
      v30 += 2;
    }
    while (!__CFADD__(v27++, 1));
  }
  v32 = 0;
  do
  {
    ++v32;
    v29 = a5 > 9;
    a5 /= 0xAuLL;
  }
  while (v29);
  *(_WORD *)&v17[2 * v32] = a6;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, unint64_t a4, char a5)
{
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _BYTE *v12;
  int v13;
  _BYTE v14[25];
  uint64_t v15;

  v8 = __dst;
  v15 = *MEMORY[0x1E0C80C00];
  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    __dst = memcpy(__dst, a2, a3);
  }
  v9 = 0;
  v10 = a4;
  do
  {
    v14[v9-- + 24] = (v10 % 0xA) | 0x30;
    v11 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v11);
  v12 = &v8[a3];
  if (v9 + 26 <= 25)
    __dst = memcpy(v12, &v14[v9 + 25], -v9);
  v13 = 0;
  do
  {
    ++v13;
    v11 = a4 > 9;
    a4 /= 0xAuLL;
  }
  while (v11);
  v12[v13] = a5;
  return __dst;
}

_QWORD *WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Tag const,WTF::RawPtrTraits<JSC::Wasm::Tag const>,WTF::DefaultRefDerefTraits<JSC::Wasm::Tag const>>>::FixedVector(_QWORD *a1, uint64_t a2)
{
  int v4;
  size_t v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  if (a2)
  {
    v4 = a2;
    v5 = 8 * a2;
    v6 = (_DWORD *)WTF::fastMalloc((WTF *)(v5 + 8));
    *v6 = v4;
    bzero(v6 + 2, v5);
    v14 = 0;
    *a1 = v6;
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Tag const,WTF::RawPtrTraits<JSC::Wasm::Tag const>,WTF::DefaultRefDerefTraits<JSC::Wasm::Tag const>>>::~FixedVector(&v14, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void WTF::RefCounted<JSC::Wasm::Memory>::deref(JSC::Wasm::Memory *a1)
{
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)a1 == 1)
  {
    JSC::Wasm::Memory::~Memory(a1);
    WTF::fastFree(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

uint64_t *WTF::HashMap<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v8 + 16 * v25;
        *(_BYTE *)(a4 + 16) = 0;
        v15[1] = *a3;
        return result;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 16 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15 != -1);
    if (v17)
    {
      *(_DWORD *)v17 = -1;
      v17[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  v15[1] = *a3;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_17;
LABEL_19:
    result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(v6, v15);
    v15 = result;
    v21 = *v6;
    if (*v6)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
    goto LABEL_17;
  }
  if (3 * v24 <= 4 * v23)
    goto LABEL_19;
LABEL_17:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v21 + 16 * v24;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = (_DWORD *)(v6 + 16 * v17);
      if (*v19 <= 0xFFFFFFFD)
      {
        v20 = *a1;
        if (*a1)
          v21 = *(_DWORD *)(v20 - 8);
        else
          v21 = 0;
        v22 = 0;
        v23 = 9 * ((*v19 + ~(*v19 << 15)) ^ ((*v19 + ~(*v19 << 15)) >> 10));
        v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
        do
        {
          v25 = v24 & v21;
          v24 = ++v22 + v25;
        }
        while (*(_DWORD *)(v20 + 16 * v25) != -1);
        v26 = (_OWORD *)(v20 + 16 * v25);
        *v26 = *(_OWORD *)v19;
        if (v19 == a3)
          v18 = v26;
      }
      ++v17;
    }
    while (v17 != v7);
    goto LABEL_13;
  }
  v18 = 0;
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v18;
  }
  return result;
}

void WTF::HashMap<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
  v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
  v19 = (v18 ^ HIWORD(v18)) & v15;
  v20 = v13 + 16 * v19;
  v21 = *(_DWORD *)v20;
  if (*(_DWORD *)v20 == -1)
  {
LABEL_12:
    *(_DWORD *)v20 = v16;
    v24 = *a3;
    *a3 = 0;
    v25 = *(unsigned int **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v24;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((unint64_t)v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    v28 = *a1;
    if (*a1)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v31 = *a1;
    if (*a1)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33)
        goto LABEL_27;
    }
    else if (3 * v34 <= 4 * v33)
    {
      if (!(_DWORD)v34)
      {
        v35 = 8;
LABEL_35:
        v20 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v35, (int *)v20);
        v31 = *a1;
        if (*a1)
          v34 = *(unsigned int *)(v31 - 4);
        else
          v34 = 0;
        goto LABEL_38;
      }
LABEL_27:
      v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
      goto LABEL_35;
    }
LABEL_38:
    *(_QWORD *)a9 = v20;
    *(_QWORD *)(a9 + 8) = v31 + 16 * v34;
    *(_BYTE *)(a9 + 16) = 1;
    return;
  }
  v22 = 0;
  v23 = 1;
  while (v21 != v16)
  {
    if (v21 == -2)
      v22 = v20;
    v19 = (v19 + v23) & v15;
    v20 = v13 + 16 * v19;
    v21 = *(_DWORD *)v20;
    ++v23;
    if (*(_DWORD *)v20 == -1)
    {
      if (v22)
      {
        *(_DWORD *)v22 = -1;
        *(_QWORD *)(v22 + 8) = 0;
        --*(_DWORD *)(*a1 - 16);
        v16 = *a2;
        v20 = v22;
      }
      goto LABEL_12;
    }
  }
  if ((v14 & 1) != 0)
    v30 = 0;
  else
    v30 = *(unsigned int *)(v13 - 4);
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v13 + 16 * v30;
  *(_BYTE *)(a9 + 16) = 0;
  v36 = *a3;
  *a3 = 0;
  v37 = *(unsigned int **)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v36;
  if (v37)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      WTF::fastFree((unint64_t)v37, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v18 - 2) = -1;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (int *)(v6 + 16 * v19);
      v22 = *v21;
      if (*v21 != -2)
      {
        if (v22 == -1)
        {
          v23 = v6 + 16 * v19;
          v24 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              WTF::fastFree((unint64_t)v24, v10, v11, v12, v13, v14, v15, v16);
            }
          }
        }
        else
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = 0;
          v30 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
          v31 = ((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) ^ (((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) >> 16);
          do
          {
            v32 = v31 & v28;
            v31 = ++v29 + v32;
          }
          while (*(_DWORD *)(v27 + 16 * v32) != -1);
          v33 = v27 + 16 * v32;
          v34 = *(unsigned int **)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v34);
              WTF::fastFree((unint64_t)v34, v10, v11, v12, v13, v14, v15, v16);
            }
          }
          *(_DWORD *)v33 = *v21;
          v37 = v6 + 16 * v19;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          *(_QWORD *)(v33 + 8) = v38;
          v39 = *(unsigned int **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (v39)
          {
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              atomic_store(1u, v39);
              WTF::fastFree((unint64_t)v39, v10, v11, v12, v13, v14, v15, v16);
            }
          }
          if (v21 == a3)
            v20 = v33;
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v29 = a1;
  v30 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v29, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 146;
  LOBYTE(v29) = -110;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -110;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v29);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v14) = -110;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v18 = a2;
  LOBYTE(v29) = v18;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = v18;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v29);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v27;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v23 = v10;
  LOBYTE(v29) = v23;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v29);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v28;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 146;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -110;
  LOBYTE(v28) = -110;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -110;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 146;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -110;
  LOBYTE(v24) = -110;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -110;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseUnreachableExpression(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, float a10)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF **v36;
  uint64_t v37;
  WTF *v38;
  unsigned int v39;
  int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  float v69;
  char *v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  char *v87;
  unint64_t *v88;
  uint64_t v89;
  WTF **v90;
  uint64_t v91;
  double v92;
  int v93;
  double v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  double v100;
  float v101;
  unsigned int v102;
  float v103;
  int v104;
  BOOL v105;
  int v106;
  char *v107;
  char *v108;
  unint64_t *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  _BOOL8 v120;
  double v121;
  int v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  uint64_t v136;
  _DWORD *v137;
  int v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  unint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  WTF::AtomStringImpl *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF::AtomStringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  _DWORD *v200;
  int v201;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  WTF *v210;
  WTF::AtomStringImpl *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  int *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  WTF *v237;
  WTF *v238;
  WTF **v239;
  WTF *v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  unint64_t *v249;
  uint64_t v250;
  char *v251;
  unint64_t *v252;
  uint64_t v253;
  char *v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  char v264;
  float v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  __int128 v269;
  _BYTE v270[384];
  WTF *v271;
  uint64_t v272;
  _BYTE v273[384];
  WTF *v274;
  int v275;
  unsigned int v276;
  _BYTE v277[392];
  _BYTE v278[32];
  int v279;
  JSC::Wasm::FunctionSignature *v280;
  _DWORD *v281;
  uint64_t v282;
  unsigned __int8 v283;
  unsigned int v284[3];

  if (*(_BYTE *)(a2 + 14736) != 11)
  {
    switch(*(_BYTE *)(a2 + 14736))
    {
      case 0:
      case 1:
      case 0xF:
      case 0x1A:
      case 0x1B:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBE:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xD0:
      case 0xD1:
      case 0xD3:
      case 0xD4:
        goto LABEL_26;
      case 2:
      case 3:
      case 4:
      case 6:
        ++*(_DWORD *)(a2 + 14752);
        *(_QWORD *)&v269 = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseBlockSignatureAndNotifySIMDUseIfNeeded(&v271, (unint64_t *)a2, (unsigned __int8 ***)&v269);
        v75 = v272;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v271, v76, v77, v78, v79, v80, v81, v82);
        if (!v75)
          goto LABEL_55;
        v70 = "can't get inline type for ";
        v71 = (unint64_t *)a2;
        v72 = 27;
        goto LABEL_273;
      case 5:
        if (*(_DWORD *)(a2 + 14752) >= 2u)
          goto LABEL_26;
        v49 = *(unsigned int *)(a2 + 468);
        if (!(_DWORD)v49)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2F508);
        }
        v50 = v49 - 1;
        v51 = *(_QWORD *)(a2 + 456);
        *(_DWORD *)(a2 + 14752) = 0;
        v52 = v51 + 872 * (v49 - 1);
        if (*(_DWORD *)(v52 + 840) != 3)
        {
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [37]>((void (***)(WTF::StringPrintStream *__hidden))&v271);
          goto LABEL_211;
        }
        JSC::Wasm::LLIntGenerator::addElseToUnreachable(&v271, *(_QWORD *)(a2 + 48), v52 + 808, a4, a5, a6, a7, a8);
        if ((_BYTE)v272)
          goto LABEL_208;
        v60 = v51 + 872 * v50 + 400;
        v61 = *(_QWORD *)(a2 + 56);
        v62 = a2 + 72;
        if (v61 != a2 + 72)
        {
          if (v61)
          {
            *(_QWORD *)(a2 + 56) = 0;
            *(_DWORD *)(a2 + 64) = 0;
            WTF::fastFree(v61, v53, v54, v55, v56, v57, v58, v59);
          }
          *(_QWORD *)(a2 + 56) = v62;
        }
        v63 = *(__int128 **)v60;
        if (*(_QWORD *)v60 == v60 + 16)
        {
          v64 = *(unsigned int *)(v60 + 12);
          if ((_DWORD)v64)
          {
            v73 = 24 * v64;
            do
            {
              v74 = *v63;
              *(_QWORD *)(v62 + 16) = *((_QWORD *)v63 + 2);
              *(_OWORD *)v62 = v74;
              v62 += 24;
              v63 = (__int128 *)((char *)v63 + 24);
              v73 -= 24;
            }
            while (v73);
          }
          v65 = *(_DWORD *)(v60 + 8);
        }
        else
        {
          *(_QWORD *)v60 = v60 + 16;
          *(_QWORD *)(a2 + 56) = v63;
          v65 = *(_DWORD *)(v60 + 8);
          *(_DWORD *)(v60 + 8) = 16;
        }
        *(_DWORD *)(a2 + 64) = v65;
        v66 = *(_DWORD *)(v60 + 12);
        *(_DWORD *)(v60 + 12) = 0;
        *(_DWORD *)(a2 + 68) = v66;
        goto LABEL_26;
      case 7:
        v284[0] = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseExceptionIndex((uint64_t)&v271, (unint64_t *)a2, v284, a9, a10);
        if ((_BYTE)v272)
          goto LABEL_208;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v271, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
        v114 = *(_QWORD *)(a2 + 14704);
        v115 = v284[0];
        v116 = *(unsigned int *)(v114 + 68);
        if (v116 <= v284[0])
        {
          v118 = v284[0];
          v115 = v284[0] - v116;
          if (v115 >= *(unsigned int *)(v114 + 84))
          {
            __break(0xC471u);
            JUMPOUT(0x198D2F548);
          }
          v117 = (_QWORD *)(v114 + 72);
        }
        else
        {
          v117 = (_QWORD *)(v114 + 56);
          v118 = v284[0];
        }
        v190 = JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*v117 + 8 * v115));
        if (*(_DWORD *)(a2 + 14752) >= 2u)
          goto LABEL_26;
        v197 = *(_DWORD *)(a2 + 468);
        if (!v197)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2F550);
        }
        v198 = v190;
        v199 = *(_QWORD *)(a2 + 456) + 872 * v197;
        v200 = (_DWORD *)(v199 - 64);
        v201 = *(_DWORD *)(v199 - 32);
        if (v201 != 4 && (v201 != 5 || *v200 != 0))
          goto LABEL_500;
        *(_DWORD *)(a2 + 14752) = 0;
        v271 = (WTF *)v273;
        v272 = 16;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t *)(a2 + 56), &v271, v191, v192, v193, v194, v195, v196);
        v210 = v271;
        if (v273 != (_BYTE *)v271 && v271)
        {
          v271 = 0;
          LODWORD(v272) = 0;
          WTF::fastFree((unint64_t)v210, v203, v204, v205, v206, v207, v208, v209);
        }
        v271 = (WTF *)v273;
        v272 = 8;
        JSC::Wasm::LLIntGenerator::addCatchToUnreachable(&v269, *(_QWORD *)(a2 + 48), v118, v198, (uint64_t)v200, (uint64_t)&v271, v208, v209);
        if (!BYTE8(v269))
        {
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v269, v211, v212, v213, v214, v215, v216, v217);
          if (*(_DWORD *)(v198 + 32))
            v225 = 0;
          else
            v225 = v198 + 8;
          v226 = *(_DWORD *)(v225 + 8);
          if (HIDWORD(v272) != v226)
          {
            __break(0xC471u);
            JUMPOUT(0x198D2F450);
          }
          if (!v226)
          {
LABEL_204:
            *a1 = 0;
            a1[8] = 0;
            goto LABEL_205;
          }
          v227 = 0;
          v228 = 0;
          while (1)
          {
            v229 = (uint64_t *)(*(_QWORD *)(v198 + 8) + 16 * (v228 + *(_DWORD *)(v198 + 20)));
            v231 = *v229;
            v230 = v229[1];
            *(_QWORD *)&v269 = v231;
            *((_QWORD *)&v269 + 1) = v230;
            if (v231 == 251)
            {
              v232 = *(_QWORD *)(a2 + 48);
              *(_BYTE *)(v232 + 254) = 1;
              JSC::Wasm::LLIntGenerator::addCrash((JSC::Wasm::LLIntGenerator *)&v282, v232, (uint64_t)v219, v220, v221, v222, v223, v224);
              if (v283)
              {
                v259 = v282;
                v282 = 0;
                *(_QWORD *)a1 = v259;
                a1[8] = 1;
                v260 = &v282;
                goto LABEL_481;
              }
              std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v282, v211, v212, v213, v214, v215, v216, v217);
            }
            if (v228 >= HIDWORD(v272))
            {
              __break(0xC471u);
              JUMPOUT(0x198D2F528);
            }
            v219 = (int *)((char *)v271 + v227);
            v233 = *(_DWORD *)(a2 + 68);
            if (v233 == *(_DWORD *)(a2 + 64))
            {
              WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(a2 + 56, &v269, v219, v220, v221, v222, v223, v224);
            }
            else
            {
              v234 = *(_QWORD *)(a2 + 56) + 24 * v233;
              v235 = *v219;
              *(_QWORD *)v234 = v231;
              *(_QWORD *)(v234 + 8) = v230;
              *(_DWORD *)(v234 + 16) = v235;
              ++*(_DWORD *)(a2 + 68);
            }
            ++v228;
            if (*(_DWORD *)(v198 + 32))
              v236 = 0;
            else
              v236 = v198 + 8;
            v227 += 4;
            if (v228 >= *(unsigned int *)(v236 + 8))
              goto LABEL_204;
          }
        }
        v266 = v269;
        *(_QWORD *)&v269 = 0;
        *(_QWORD *)a1 = v266;
        a1[8] = 1;
        v260 = (uint64_t *)&v269;
LABEL_481:
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v260, v211, v212, v213, v214, v215, v216, v217);
LABEL_205:
        v237 = v271;
        if (v273 != (_BYTE *)v271 && v271)
        {
          v271 = 0;
          LODWORD(v272) = 0;
          WTF::fastFree((unint64_t)v237, v218, (uint64_t)v219, v220, v221, v222, v223, v224);
        }
        return;
      case 8:
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseExceptionIndex((uint64_t)&v271, (unint64_t *)a2, (unsigned int *)&v269, a9, a10);
        goto LABEL_67;
      case 9:
        LODWORD(v282) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseBranchTarget(&v271, a2, (unsigned int *)&v282, 0, a9, a10, a5, a6, a7);
        if ((_BYTE)v272)
          goto LABEL_208;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v271, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
        v95 = *(unsigned int *)(a2 + 468);
        v96 = ~(unint64_t)v282;
        v105 = __CFADD__(v96, v95);
        v97 = v96 + v95;
        if (!v105)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2F530);
        }
        if (*(_DWORD *)(*(_QWORD *)(a2 + 456) + 872 * v97 + 840) == 5)
          goto LABEL_26;
        v98 = "rethrow doesn't refer to a catch block";
        v99 = 39;
        goto LABEL_505;
      case 0xC:
      case 0xD:
        v85 = *(_DWORD *)(a2 + 14752);
        goto LABEL_66;
      case 0xE:
        LODWORD(v269) = 0;
        LODWORD(v282) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
        {
          if ((_DWORD)v269)
          {
            if ((_DWORD)v269 == -1)
            {
              v248 = "br_table's number of targets is too big ";
              v249 = (unint64_t *)a2;
              v250 = 41;
              v93 = -1;
              goto LABEL_226;
            }
            v102 = 0;
            do
            {
              if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v282))
              {
                v107 = "can't get ";
                v108 = "th target for br_table in unreachable context";
                v109 = (unint64_t *)a2;
                v110 = 11;
                v111 = v102;
                v112 = 46;
                goto LABEL_331;
              }
              ++v102;
            }
            while (v102 < v269);
          }
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v282))
            goto LABEL_26;
          v87 = "can't get default target for br_table in unreachable context";
          v88 = (unint64_t *)a2;
          v89 = 61;
        }
        else
        {
          v87 = "can't get the number of targets for br_table in unreachable context";
LABEL_494:
          v88 = (unint64_t *)a2;
          v89 = 68;
        }
        goto LABEL_112;
      case 0x10:
        goto LABEL_85;
      case 0x11:
        goto LABEL_169;
      case 0x12:
        if (!HIBYTE(word_1ECF4C7B4))
          goto LABEL_487;
LABEL_85:
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseFunctionIndex(&v271, (unint64_t *)a2, (unsigned int *)&v269, a9, a10, a4, a5, a6, a7);
        goto LABEL_67;
      case 0x13:
        if (HIBYTE(word_1ECF4C7B4))
        {
LABEL_169:
          LODWORD(v269) = 0;
          LODWORD(v282) = 0;
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
          {
            if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v282))
              goto LABEL_26;
            v87 = "can't get call_indirect's reserved byte in unreachable context";
            v88 = (unint64_t *)a2;
            v89 = 63;
          }
          else
          {
            v87 = "can't get call_indirect's signature index in unreachable context";
            v88 = (unint64_t *)a2;
            v89 = 65;
          }
        }
        else
        {
LABEL_487:
          v87 = "wasm tail calls are not enabled";
          v88 = (unint64_t *)a2;
          v89 = 32;
        }
        goto LABEL_112;
      case 0x14:
        if (BYTE1(dword_1ECF4C7B0))
        {
          LODWORD(v269) = 0;
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
          {
LABEL_55:
            v83 = 0;
            *a1 = 0;
            goto LABEL_56;
          }
          v87 = "can't call_ref's signature index in unreachable context";
          v88 = (unint64_t *)a2;
          v89 = 56;
        }
        else
        {
          v87 = "function references are not enabled";
          v88 = (unint64_t *)a2;
          v89 = 36;
        }
        goto LABEL_112;
      case 0x18:
        if (*(_DWORD *)(a2 + 468) == 1)
        {
          v87 = "can't use delegate at the top-level of a function";
          v88 = (unint64_t *)a2;
          v89 = 50;
LABEL_112:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v87, v88, v89, &v271, a10);
LABEL_211:
          v240 = v271;
LABEL_212:
          *(_QWORD *)a1 = v240;
          v83 = 1;
LABEL_56:
          a1[8] = v83;
          return;
        }
        v284[0] = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseDelegateTarget((uint64_t)&v271, a2, v284, *(_DWORD *)(a2 + 14752), a9, a10);
        if ((_BYTE)v272)
          goto LABEL_208;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v271, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
        v12 = *(_DWORD *)(a2 + 14752);
        if (v12 != 1)
          goto LABEL_25;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v271, (_DWORD *)(a2 + 456), v147, v148, v149, v150, v151, v152);
        if (v279 == 4)
        {
          v157 = *(unsigned int *)(a2 + 468);
          v158 = ~(unint64_t)v284[0];
          v105 = __CFADD__(v158, v157);
          v159 = v158 + v157;
          if (!v105)
          {
            __break(0xC471u);
            JUMPOUT(0x198D2F540);
          }
          v160 = *(_QWORD *)(a2 + 456) + 872 * v159;
          v161 = *(_DWORD *)(v160 + 840);
          if (v161 == 1 || v161 == 4)
          {
            JSC::Wasm::LLIntGenerator::addDelegateToUnreachable(&v269, *(_QWORD *)(a2 + 48), v160 + 808, (uint64_t)v278, v153, v154, v155, v156);
            if (!BYTE8(v269))
            {
              std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v269, v163, v164, v165, v166, v167, v168, v169);
              *(_QWORD *)&v269 = v270;
              *((_QWORD *)&v269 + 1) = 16;
              JSC::Wasm::LLIntGenerator::addEndToUnreachable(&v282, *(_QWORD *)(a2 + 48), (uint64_t)&v271, &v269, 1, v170, v171, v172);
              v180 = v283;
              if (v283)
              {
                v268 = v282;
                v282 = 0;
                *(_QWORD *)a1 = v268;
                a1[8] = 1;
                std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v282, v173, v174, v175, v176, v177, v178, v179);
              }
              else
              {
                std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v282, v173, v174, v175, v176, v177, v178, v179);
                WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swap(a2 + 56, (uint64_t)&v271, *(unsigned int *)(a2 + 68), HIDWORD(v272));
                v188 = *(_DWORD *)(a2 + 68);
                *(_DWORD *)(a2 + 68) = HIDWORD(v272);
                HIDWORD(v272) = v188;
              }
              v189 = v269;
              if (v270 != (_BYTE *)v269 && (_QWORD)v269)
              {
                *(_QWORD *)&v269 = 0;
                DWORD2(v269) = 0;
                WTF::fastFree(v189, v181, v182, v183, v184, v185, v186, v187);
              }
              JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry((uint64_t)&v271, v181, v182, v183, v184, v185, v186, v187);
              if (!v180)
                goto LABEL_24;
              return;
            }
            v267 = v269;
            *(_QWORD *)&v269 = 0;
            *(_QWORD *)a1 = v267;
            a1[8] = 1;
            std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v269, v163, v164, v165, v166, v167, v168, v169);
LABEL_214:
            JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry((uint64_t)&v271, v241, v242, v243, v244, v245, v246, v247);
            return;
          }
          JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [34]>((void (***)(WTF::StringPrintStream *__hidden))&v269);
        }
        else
        {
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [35]>((void (***)(WTF::StringPrintStream *__hidden))&v269);
        }
        *(_QWORD *)a1 = v269;
        a1[8] = 1;
        goto LABEL_214;
      case 0x19:
        if (*(_DWORD *)(a2 + 14752) >= 2u)
          goto LABEL_26;
        v125 = *(unsigned int *)(a2 + 468);
        if (!(_DWORD)v125)
        {
          __break(0xC471u);
          JUMPOUT(0x198D2F538);
        }
        v126 = v125 - 1;
        v127 = *(_QWORD *)(a2 + 456);
        *(_DWORD *)(a2 + 14752) = 0;
        v271 = (WTF *)v273;
        v272 = 16;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t *)(a2 + 56), &v271, a3, a4, a5, a6, a7, a8);
        v135 = v271;
        if (v273 != (_BYTE *)v271 && v271)
        {
          v271 = 0;
          LODWORD(v272) = 0;
          WTF::fastFree((unint64_t)v135, v128, v129, v130, v131, v132, v133, v134);
        }
        v136 = v127 + 872 * v126;
        v137 = (_DWORD *)(v136 + 808);
        v138 = *(_DWORD *)(v136 + 840);
        if (v138 != 4 && (v138 != 5 || *v137 != 0))
        {
LABEL_500:
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [38]>((void (***)(WTF::StringPrintStream *__hidden))&v271);
          goto LABEL_211;
        }
        JSC::Wasm::LLIntGenerator::addCatchAllToUnreachable(&v271, *(_QWORD *)(a2 + 48), (uint64_t)v137, v130, v131, v132, v133, v134);
LABEL_67:
        if (!(_BYTE)v272)
        {
          v90 = &v271;
          goto LABEL_69;
        }
LABEL_208:
        v238 = v271;
        v271 = 0;
        *(_QWORD *)a1 = v238;
        a1[8] = 1;
        v239 = &v271;
        goto LABEL_209;
      case 0x1C:
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseAnnotatedSelectImmediates(&v269, a2, (uint64_t)&v271, a9, a10);
        if (!BYTE8(v269))
        {
          v90 = (WTF **)&v269;
LABEL_69:
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v90, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
          goto LABEL_26;
        }
        v261 = v269;
        *(_QWORD *)&v269 = 0;
        *(_QWORD *)a1 = v261;
        a1[8] = 1;
        v239 = (WTF **)&v269;
LABEL_209:
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v239, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
        return;
      case 0x20:
        LODWORD(v269) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseIndexForLocal(&v271, a2, (unsigned int *)&v269, a9, a10);
        if ((_BYTE)v272)
          goto LABEL_208;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v271, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::checkLocalInitialized((uint64_t)&v271, a2, v269, v100, v101);
        goto LABEL_67;
      case 0x21:
      case 0x22:
        LODWORD(v269) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseIndexForLocal(&v271, a2, (unsigned int *)&v269, a9, a10);
        if ((_BYTE)v272)
          goto LABEL_208;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v271, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::pushLocalInitialized(a2, v269);
        goto LABEL_26;
      case 0x23:
      case 0x24:
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseIndexForGlobal(&v271, (unint64_t *)a2, (unsigned int *)&v269, a9, a10);
        goto LABEL_67;
      case 0x25:
      case 0x26:
        LODWORD(v269) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
          goto LABEL_26;
        v87 = "can't parse table index";
        v88 = (unint64_t *)a2;
        v89 = 24;
        goto LABEL_112;
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
        LODWORD(v269) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
        {
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
            goto LABEL_26;
          v70 = "can't get second immediate for ";
          v71 = (unint64_t *)a2;
          v72 = 32;
        }
        else
        {
          v70 = "can't get first immediate for ";
          v71 = (unint64_t *)a2;
          v72 = 31;
        }
LABEL_273:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::Wasm::OpType,WTF::ASCIILiteral>(v70, v71, v72, " in unreachable context", 24, &v271, v69);
        goto LABEL_211;
      case 0x3F:
      case 0x40:
        v86 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
        {
          v87 = "can't parse reserved byte for grow_memory/current_memory";
          v88 = (unint64_t *)a2;
          v89 = 57;
        }
        else
        {
          *(_QWORD *)a2 = v86 + 1;
          if (!*(_BYTE *)(*(_QWORD *)(a2 + 8) + v86))
            goto LABEL_26;
          v87 = "reserved byte for grow_memory/current_memory must be zero";
          v88 = (unint64_t *)a2;
          v89 = 58;
        }
        goto LABEL_112;
      case 0x41:
        LODWORD(v269) = 0;
        if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v269))
          goto LABEL_173;
        goto LABEL_55;
      case 0x42:
        v271 = 0;
        if (WTF::LEBDecoder::decodeInt64(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (uint64_t *)&v271))
          goto LABEL_55;
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::Wasm::OpType,WTF::ASCIILiteral>("can't get immediate for ", (unint64_t *)a2, 25, " in unreachable context", 24, &v269, v113);
        goto LABEL_506;
      case 0x43:
        v119 = *(_QWORD *)a2 + 4;
        if (*(_QWORD *)(a2 + 16) >= v119)
          goto LABEL_142;
        v87 = "can't parse 32-bit floating-point constant";
        goto LABEL_111;
      case 0x44:
        v119 = *(_QWORD *)a2 + 8;
        if (*(_QWORD *)(a2 + 16) >= v119)
        {
LABEL_142:
          *(_QWORD *)a2 = v119;
          goto LABEL_26;
        }
        v87 = "can't parse 64-bit floating-point constant";
LABEL_111:
        v88 = (unint64_t *)a2;
        v89 = 43;
        goto LABEL_112;
      case 0xD2:
        LODWORD(v269) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
          goto LABEL_55;
LABEL_173:
        v70 = "can't get immediate for ";
        v71 = (unint64_t *)a2;
        v72 = 25;
        goto LABEL_273;
      case 0xD5:
      case 0xD6:
        v85 = 0;
LABEL_66:
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseBranchTarget(&v271, a2, (unsigned int *)&v269, v85, a9, a10, a5, a6, a7);
        goto LABEL_67;
      case 0xFB:
        if (BYTE2(dword_1ECF4C7B0))
        {
          LODWORD(v282) = 0;
          v120 = WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v282);
          if (v120)
          {
            v122 = v282;
            if (BYTE5(qword_1ECF4C789))
            {
              v262 = JSC::Wasm::WasmOpcodeCounter::singleton((JSC::Wasm::WasmOpcodeCounter *)v120);
              JSC::Wasm::WasmOpcodeCounter::increment((uint64_t)v262, v122);
            }
            switch(v122)
            {
              case 0:
                v251 = "struct.new";
                v252 = (unint64_t *)a2;
                v253 = 11;
                goto LABEL_248;
              case 1:
                v251 = "struct.new_default";
                v252 = (unint64_t *)a2;
                v253 = 19;
LABEL_248:
                JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseStructTypeIndex(&v271, v252, &v269, v251, v253, v121, a10);
                goto LABEL_67;
              case 2:
                v254 = "struct.get";
                goto LABEL_241;
              case 5:
                v254 = "struct.set";
LABEL_241:
                JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseStructTypeIndexAndFieldIndex((uint64_t)&v271, (unint64_t *)a2, (unsigned int *)&v269, v254, 11, v121, a10);
                goto LABEL_67;
              case 6:
                LODWORD(v269) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                  goto LABEL_55;
                v87 = "can't get type index immediate for array.new in unreachable context";
                goto LABEL_494;
              case 7:
                LODWORD(v269) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                  goto LABEL_55;
                v87 = "can't get type index immediate for array.new_default in unreachable context";
                goto LABEL_253;
              case 11:
                LODWORD(v269) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                  goto LABEL_55;
                v87 = "can't get type index immediate for array.get in unreachable context";
                goto LABEL_494;
              case 12:
                LODWORD(v269) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                  goto LABEL_55;
                v87 = "can't get type index immediate for array.get_s in unreachable context";
                goto LABEL_238;
              case 13:
                LODWORD(v269) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                  goto LABEL_55;
                v87 = "can't get type index immediate for array.get_u in unreachable context";
LABEL_238:
                v88 = (unint64_t *)a2;
                v89 = 70;
                goto LABEL_112;
              case 14:
                LODWORD(v269) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                  goto LABEL_55;
                v87 = "can't get type index immediate for array.set in unreachable context";
                goto LABEL_494;
              case 15:
              case 28:
              case 29:
              case 30:
                goto LABEL_26;
              case 16:
                LODWORD(v269) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                  goto LABEL_55;
                v87 = "can't get type index immediate for array.fill in unreachable context";
                v88 = (unint64_t *)a2;
                v89 = 69;
                goto LABEL_112;
              case 17:
                LODWORD(v269) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                {
                  if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                    goto LABEL_26;
                  v87 = "can't get second type index immediate for array.copy in unreachable context";
LABEL_253:
                  v88 = (unint64_t *)a2;
                  v89 = 76;
                }
                else
                {
                  v87 = "can't get first type index immediate for array.copy in unreachable context";
                  v88 = (unint64_t *)a2;
                  v89 = 75;
                }
                goto LABEL_112;
              case 18:
                LODWORD(v269) = 0;
                if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                {
                  v87 = "can't get first type index immediate for array.init_data in unreachable context";
                  goto LABEL_521;
                }
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                  goto LABEL_26;
                v87 = "can't get second type index immediate for array.init_data in unreachable context";
                goto LABEL_261;
              case 19:
                LODWORD(v269) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                {
                  if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
                    goto LABEL_26;
                  v87 = "can't get second type index immediate for array.init_elem in unreachable context";
LABEL_261:
                  v88 = (unint64_t *)a2;
                  v89 = 81;
                }
                else
                {
                  v87 = "can't get first type index immediate for array.init_elem in unreachable context";
LABEL_521:
                  v88 = (unint64_t *)a2;
                  v89 = 80;
                }
                goto LABEL_112;
              case 20:
              case 21:
              case 22:
              case 23:
                if ((v122 & 0xFFFFFFFE) == 0x16)
                  v123 = "ref.cast";
                else
                  v123 = "ref.test";
                if (!BYTE1(dword_1ECF4C7B0))
                  goto LABEL_263;
                v124 = *(_QWORD *)(a2 + 14704);
                LODWORD(v271) = 0;
                if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v271))goto LABEL_263;
                if ((v271 & 0x80000000) != 0)
                {
                  v255 = (int)v271 + 22;
                  if (v255 <= 9 && (((1 << v255) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
                    goto LABEL_26;
                }
                else if (v271 < *(_DWORD *)(v124 + 100)
                       || *(_BYTE *)(a2 + 32)
                       && v271 >= *(_DWORD *)(a2 + 36)
                       && v271 < *(_DWORD *)(a2 + 40))
                {
                  goto LABEL_26;
                }
LABEL_263:
                JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get heap type for ", (unint64_t *)a2, 25, v123, 9, &v271, a10);
                goto LABEL_211;
              default:
                v93 = v282;
                v248 = "invalid extended GC op ";
                v249 = (unint64_t *)a2;
                v250 = 24;
                goto LABEL_226;
            }
          }
          v87 = "can't parse extended GC opcode";
          v88 = (unint64_t *)a2;
          v89 = 31;
        }
        else
        {
          v87 = "Wasm GC is not enabled";
          v88 = (unint64_t *)a2;
          v89 = 23;
        }
        goto LABEL_112;
      case 0xFC:
        LODWORD(v282) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v282))
        {
          v93 = v282;
          switch((int)v282)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              goto LABEL_26;
            case 8:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseMemoryInitImmediates((uint64_t)&v271, (unint64_t *)a2, &v269, v92, a10);
              goto LABEL_67;
            case 9:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseDataSegmentIndex(&v271, (unint64_t *)a2, (unsigned int *)&v269, v92, a10);
              goto LABEL_67;
            case 10:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseMemoryCopyImmediates((uint64_t)&v271, (unint64_t *)a2, v92, a10);
              goto LABEL_67;
            case 11:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseMemoryFillImmediate((uint64_t)&v271, (unint64_t *)a2, v92, a10);
              goto LABEL_67;
            case 12:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseTableInitImmediates((uint64_t)&v271, (unint64_t *)a2, &v269, v92, a10);
              goto LABEL_67;
            case 13:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseElementIndex((uint64_t)&v271, (unint64_t *)a2, (unsigned int *)&v269, v92, a10);
              goto LABEL_67;
            case 14:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseTableCopyImmediates(&v271, (unint64_t *)a2, &v269, v92, a10);
              goto LABEL_67;
            case 15:
            case 16:
            case 17:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseTableIndex((uint64_t)&v271, (unint64_t *)a2, (unsigned int *)&v269, v92, a10);
              goto LABEL_67;
            default:
              v248 = "invalid extended 0xfc op ";
              goto LABEL_225;
          }
        }
        v87 = "can't parse extended 0xfc opcode";
        v88 = (unint64_t *)a2;
        v89 = 33;
        goto LABEL_112;
      case 0xFD:
        if (!HIBYTE(dword_1ECF4C7B0))
        {
          v87 = "wasm-simd is not enabled";
          goto LABEL_508;
        }
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + 254) = 1;
        LODWORD(v269) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
        {
          v93 = v269;
          switch((int)v269)
          {
            case 0:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 40;
              goto LABEL_476;
            case 1:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 50;
              goto LABEL_476;
            case 2:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 14;
              goto LABEL_476;
            case 3:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 13;
              goto LABEL_476;
            case 4:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 61;
              goto LABEL_476;
            case 5:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 27;
              goto LABEL_476;
            case 6:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 37;
              goto LABEL_476;
            case 7:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 34;
              goto LABEL_476;
            case 8:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 56;
              goto LABEL_476;
            case 9:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 35;
              goto LABEL_476;
            case 10:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 70;
              goto LABEL_476;
            case 11:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 7;
              goto LABEL_476;
            case 12:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 19;
              goto LABEL_476;
            case 13:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 41;
              goto LABEL_321;
            case 14:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 52;
              goto LABEL_321;
            case 15:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 12;
              goto LABEL_321;
            case 16:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 12;
              goto LABEL_328;
            case 17:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 12;
              goto LABEL_326;
            case 18:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 12;
              goto LABEL_318;
            case 19:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 12;
              goto LABEL_300;
            case 20:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 12;
              goto LABEL_302;
            case 21:
            case 22:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 65;
              goto LABEL_321;
            case 23:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 66;
              goto LABEL_321;
            case 24:
            case 25:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 65;
              goto LABEL_328;
            case 26:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 66;
              goto LABEL_328;
            case 27:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 65;
              goto LABEL_326;
            case 28:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 66;
              goto LABEL_326;
            case 29:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 65;
              goto LABEL_318;
            case 30:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 66;
              goto LABEL_318;
            case 31:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 65;
              goto LABEL_300;
            case 32:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 66;
              goto LABEL_300;
            case 33:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 65;
              goto LABEL_302;
            case 34:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 66;
              goto LABEL_302;
            case 35:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 33;
              goto LABEL_321;
            case 36:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 22;
              goto LABEL_321;
            case 37:
            case 38:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 30;
              goto LABEL_321;
            case 39:
            case 40:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 4;
              goto LABEL_321;
            case 41:
            case 42:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 59;
              goto LABEL_321;
            case 43:
            case 44:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 15;
              goto LABEL_321;
            case 45:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 33;
              goto LABEL_328;
            case 46:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 22;
              goto LABEL_328;
            case 47:
            case 48:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 30;
              goto LABEL_328;
            case 49:
            case 50:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 4;
              goto LABEL_328;
            case 51:
            case 52:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 59;
              goto LABEL_328;
            case 53:
            case 54:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 15;
              goto LABEL_328;
            case 55:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 33;
              goto LABEL_326;
            case 56:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 22;
              goto LABEL_326;
            case 57:
            case 58:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 30;
              goto LABEL_326;
            case 59:
            case 60:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 4;
              goto LABEL_326;
            case 61:
            case 62:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 59;
              goto LABEL_326;
            case 63:
            case 64:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 15;
              goto LABEL_326;
            case 65:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 33;
              goto LABEL_300;
            case 66:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 22;
              goto LABEL_300;
            case 67:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 30;
              goto LABEL_300;
            case 68:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 4;
              goto LABEL_300;
            case 69:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 59;
              goto LABEL_300;
            case 70:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 15;
              goto LABEL_300;
            case 71:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 33;
              goto LABEL_302;
            case 72:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 22;
              goto LABEL_302;
            case 73:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 30;
              goto LABEL_302;
            case 74:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 4;
              goto LABEL_302;
            case 75:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 59;
              goto LABEL_302;
            case 76:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 15;
              goto LABEL_302;
            case 77:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 0;
              goto LABEL_476;
            case 78:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 6;
              goto LABEL_476;
            case 79:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 3;
              goto LABEL_476;
            case 80:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 60;
              goto LABEL_476;
            case 81:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 9;
              goto LABEL_476;
            case 82:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 72;
              goto LABEL_476;
            case 83:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 44;
              goto LABEL_476;
            case 84:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 16;
              goto LABEL_476;
            case 85:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 2;
              goto LABEL_476;
            case 86:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 46;
              goto LABEL_476;
            case 87:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 71;
              goto LABEL_476;
            case 88:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 8;
              goto LABEL_476;
            case 89:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 48;
              goto LABEL_476;
            case 90:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 25;
              goto LABEL_476;
            case 91:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 29;
              goto LABEL_476;
            case 92:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 64;
              goto LABEL_476;
            case 93:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 36;
LABEL_476:
              v258 = 0;
              goto LABEL_329;
            case 94:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 20;
              goto LABEL_302;
            case 95:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 38;
              goto LABEL_300;
            case 96:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 5;
              goto LABEL_321;
            case 97:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 75;
              goto LABEL_321;
            case 98:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 58;
              goto LABEL_321;
            case 99:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 57;
              goto LABEL_321;
            case 100:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 74;
              goto LABEL_321;
            case 101:
            case 102:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 39;
              goto LABEL_328;
            case 103:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 45;
              goto LABEL_300;
            case 104:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 55;
              goto LABEL_300;
            case 105:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 10;
              goto LABEL_300;
            case 106:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 49;
              goto LABEL_300;
            case 107:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 17;
              goto LABEL_321;
            case 108:
            case 109:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 68;
              goto LABEL_321;
            case 110:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 69;
              goto LABEL_321;
            case 111:
            case 112:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 1;
              goto LABEL_321;
            case 113:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 73;
              goto LABEL_321;
            case 114:
            case 115:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 42;
              goto LABEL_321;
            case 116:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 45;
              goto LABEL_302;
            case 117:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 55;
              goto LABEL_302;
            case 118:
            case 119:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 32;
              goto LABEL_321;
            case 120:
            case 121:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 43;
              goto LABEL_321;
            case 122:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 10;
              goto LABEL_302;
            case 123:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 31;
              goto LABEL_321;
            case 124:
            case 125:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 62;
              goto LABEL_321;
            case 126:
            case 127:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 62;
              goto LABEL_328;
            case 128:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 5;
              goto LABEL_328;
            case 129:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 75;
              goto LABEL_328;
            case 130:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 76;
              goto LABEL_328;
            case 131:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 57;
              goto LABEL_328;
            case 132:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 74;
              goto LABEL_328;
            case 133:
            case 134:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 39;
              goto LABEL_326;
            case 135:
            case 137:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 67;
              goto LABEL_328;
            case 136:
            case 138:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 28;
              goto LABEL_328;
            case 139:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 17;
              goto LABEL_328;
            case 140:
            case 141:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 68;
              goto LABEL_328;
            case 142:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 69;
              goto LABEL_328;
            case 143:
            case 144:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 1;
              goto LABEL_328;
            case 145:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 73;
              goto LABEL_328;
            case 146:
            case 147:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 42;
              goto LABEL_328;
            case 148:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 49;
              goto LABEL_302;
            case 149:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 47;
              goto LABEL_328;
            case 150:
            case 151:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 32;
              goto LABEL_328;
            case 152:
            case 153:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 43;
              goto LABEL_328;
            case 155:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 31;
              goto LABEL_328;
            case 156:
            case 158:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 51;
              goto LABEL_328;
            case 157:
            case 159:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 11;
LABEL_328:
              v258 = 2;
              goto LABEL_329;
            case 160:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 5;
              goto LABEL_326;
            case 161:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 75;
              goto LABEL_326;
            case 163:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 57;
              goto LABEL_326;
            case 164:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 74;
              goto LABEL_326;
            case 167:
            case 169:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 67;
              goto LABEL_326;
            case 168:
            case 170:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 28;
              goto LABEL_326;
            case 171:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 17;
              goto LABEL_326;
            case 172:
            case 173:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 68;
              goto LABEL_326;
            case 174:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 69;
              goto LABEL_326;
            case 177:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 73;
              goto LABEL_326;
            case 181:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 47;
              goto LABEL_326;
            case 182:
            case 183:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 32;
              goto LABEL_326;
            case 184:
            case 185:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 43;
              goto LABEL_326;
            case 186:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 18;
              goto LABEL_326;
            case 188:
            case 190:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 51;
              goto LABEL_326;
            case 189:
            case 191:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 11;
              goto LABEL_326;
            case 192:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 5;
              goto LABEL_318;
            case 193:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 75;
              goto LABEL_318;
            case 195:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 57;
              goto LABEL_318;
            case 196:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 74;
              goto LABEL_318;
            case 199:
            case 201:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 67;
              goto LABEL_318;
            case 200:
            case 202:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 28;
              goto LABEL_318;
            case 203:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 17;
              goto LABEL_318;
            case 204:
            case 205:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 68;
              goto LABEL_318;
            case 206:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 69;
              goto LABEL_318;
            case 209:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 73;
              goto LABEL_318;
            case 213:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 47;
              goto LABEL_318;
            case 214:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 33;
              goto LABEL_318;
            case 215:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 22;
              goto LABEL_318;
            case 216:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 30;
              goto LABEL_318;
            case 217:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 4;
              goto LABEL_318;
            case 218:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 59;
              goto LABEL_318;
            case 219:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 15;
              goto LABEL_318;
            case 220:
            case 222:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 51;
              goto LABEL_318;
            case 221:
            case 223:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 11;
LABEL_318:
              v258 = 4;
              goto LABEL_329;
            case 224:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 5;
              goto LABEL_300;
            case 225:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 75;
              goto LABEL_300;
            case 227:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 23;
              goto LABEL_300;
            case 228:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 69;
              goto LABEL_300;
            case 229:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 73;
              goto LABEL_300;
            case 230:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 47;
              goto LABEL_300;
            case 231:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 53;
              goto LABEL_300;
            case 232:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 32;
              goto LABEL_300;
            case 233:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 43;
              goto LABEL_300;
            case 234:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 24;
              goto LABEL_300;
            case 235:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 26;
              goto LABEL_300;
            case 236:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 5;
              goto LABEL_302;
            case 237:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 75;
              goto LABEL_302;
            case 239:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 23;
              goto LABEL_302;
            case 240:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 69;
              goto LABEL_302;
            case 241:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 73;
              goto LABEL_302;
            case 242:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 47;
              goto LABEL_302;
            case 243:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 53;
              goto LABEL_302;
            case 244:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 32;
              goto LABEL_302;
            case 245:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 43;
              goto LABEL_302;
            case 246:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 24;
              goto LABEL_302;
            case 247:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 26;
              goto LABEL_302;
            case 248:
            case 249:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 63;
              goto LABEL_300;
            case 250:
            case 251:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 21;
              goto LABEL_326;
            case 252:
            case 253:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 63;
              goto LABEL_302;
            case 254:
            case 255:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 54;
LABEL_326:
              v258 = 3;
              goto LABEL_329;
            case 256:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 77;
LABEL_321:
              v258 = 1;
              goto LABEL_329;
            case 257:
            case 258:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 78;
              goto LABEL_300;
            case 259:
            case 260:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 78;
              goto LABEL_302;
            case 261:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 79;
              goto LABEL_300;
            case 262:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 80;
LABEL_300:
              v258 = 5;
              goto LABEL_329;
            case 263:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 79;
              goto LABEL_302;
            case 264:
              v144 = a1;
              v145 = (unint64_t *)a2;
              v146 = 80;
LABEL_302:
              v258 = 6;
LABEL_329:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<false,void>(v144, v145, v146, v258, v140, v141, v142, v143);
              break;
            default:
              v248 = "invalid extended simd op ";
LABEL_225:
              v249 = (unint64_t *)a2;
              v250 = 26;
              goto LABEL_226;
          }
        }
        else
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse wasm extended opcode", (unint64_t *)a2, 33, &v271, a10);
          *(_QWORD *)a1 = v271;
          a1[8] = 1;
        }
        return;
      case 0xFE:
        LODWORD(v282) = 0;
        if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v282))
        {
          v87 = "can't parse atomic extended opcode";
          v88 = (unint64_t *)a2;
          v89 = 35;
          goto LABEL_112;
        }
        v104 = v282;
        v105 = (v282 - 16) >= 0x3F && v282 >= 3;
        if (v105)
        {
          if ((_DWORD)v282 == 3)
          {
            v256 = *(_QWORD *)a2;
            if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
            {
              v87 = "can't get flags";
              v88 = (unint64_t *)a2;
              v89 = 16;
              goto LABEL_112;
            }
            *(_QWORD *)a2 = v256 + 1;
            v257 = *(_QWORD *)(a2 + 8);
            if (!*(_BYTE *)(v257 + v256))
              goto LABEL_26;
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("flags should be 0x0 but got ", (unint64_t *)a2, 29, *(unsigned __int8 *)(v257 + v256), &v271, a10);
          }
          else
          {
            v248 = "invalid extended atomic op ";
            v249 = (unint64_t *)a2;
            v250 = 28;
            v93 = v282;
LABEL_226:
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v248, v249, v250, v93, &v271, a10);
          }
        }
        else
        {
          if (*(_DWORD *)(*(_QWORD *)(a2 + 14704) + 104) == -1)
          {
            v98 = "atomic instruction without memory";
            v99 = 34;
LABEL_505:
            v271 = (WTF *)v98;
            v272 = v99;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v269, (uint64_t)&v271, v94, a10);
LABEL_506:
            v240 = (WTF *)v269;
            goto LABEL_212;
          }
          LODWORD(v269) = 0;
          v284[0] = 0;
          if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v269))
          {
            v87 = "can't get load alignment";
LABEL_508:
            v88 = (unint64_t *)a2;
            v89 = 25;
            goto LABEL_112;
          }
          v106 = v269;
          if (v106 != JSC::Wasm::memoryLog2Alignment())
          {
            v263 = 1 << v269;
            v264 = JSC::Wasm::memoryLog2Alignment();
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, v263, " does not match against atomic op's natural alignment ", 55, 1 << v264, &v271, v265);
            *(_QWORD *)a1 = v271;
            a1[8] = 1;
            return;
          }
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, v284))
            goto LABEL_26;
          v107 = "can't get first immediate for atomic ";
          v108 = " in unreachable context";
          v109 = (unint64_t *)a2;
          v110 = 38;
          v111 = v104;
          v112 = 24;
LABEL_331:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(v107, v109, v110, v111, v108, v112, &v271, v103);
        }
        goto LABEL_211;
      default:
        __break(0xC471u);
        JUMPOUT(0x198D2DEBCLL);
    }
  }
  v12 = *(_DWORD *)(a2 + 14752);
  if (v12 != 1)
  {
LABEL_25:
    *(_DWORD *)(a2 + 14752) = v12 - 1;
LABEL_26:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v271, (_DWORD *)(a2 + 456), a3, a4, a5, a6, a7, a8);
  if (v279 == 3)
  {
    JSC::Wasm::LLIntGenerator::addElseToUnreachable(&v269, *(_QWORD *)(a2 + 48), (uint64_t)v278, v13, v14, v15, v16, v17);
    if (BYTE8(v269))
      goto LABEL_57;
    v36 = (WTF **)(a2 + 56);
    v35 = *(_QWORD *)(a2 + 56);
    v37 = a2 + 72;
    if (v35 != a2 + 72)
    {
      if (v35)
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_DWORD *)(a2 + 64) = 0;
        WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
      }
      *v36 = (WTF *)v37;
    }
    v38 = v274;
    if (v274 == (WTF *)v277)
    {
      v39 = v276;
      if (v276)
      {
        v67 = 24 * v276;
        do
        {
          v68 = *(_OWORD *)v38;
          *(_QWORD *)(v37 + 16) = *((_QWORD *)v38 + 2);
          *(_OWORD *)v37 = v68;
          v37 += 24;
          v38 = (WTF *)((char *)v38 + 24);
          v67 -= 24;
        }
        while (v67);
      }
      v40 = v275;
    }
    else
    {
      v274 = (WTF *)v277;
      *v36 = v38;
      v40 = v275;
      v275 = 16;
      v39 = v276;
    }
    v276 = 0;
    *(_DWORD *)(a2 + 64) = v40;
    *(_DWORD *)(a2 + 68) = v39;
    JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::unify((uint64_t)&v269, a2, v280, v30, v31, v32, v33, v34);
    if (BYTE8(v269)
      || (v41 = *(_DWORD **)(a2 + 48),
          JSC::Wasm::LLIntGenerator::finalizePreviousBlockForCatch(v41, (uint64_t)v278, a2 + 56, v30, v31, v32, v33, v34),
          JSC::Wasm::LLIntGenerator::addEndToUnreachable(&v269, (uint64_t)v41, (uint64_t)&v271, (_QWORD *)(a2 + 56), 0, v42, v43, v44), BYTE8(v269)))
    {
LABEL_57:
      v84 = v269;
      *(_QWORD *)&v269 = 0;
      *(_QWORD *)a1 = v84;
      a1[8] = 1;
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v269, (WTF::AtomStringImpl *)v28, v29, v30, v31, v32, v33, v34);
LABEL_8:
      v27 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    *(_QWORD *)&v269 = v270;
    *((_QWORD *)&v269 + 1) = 16;
    JSC::Wasm::LLIntGenerator::addEndToUnreachable(&v282, *(_QWORD *)(a2 + 48), (uint64_t)&v271, &v269, 1, v15, v16, v17);
    v25 = v283;
    if (v283)
    {
      v91 = v282;
      v282 = 0;
      *(_QWORD *)a1 = v91;
      a1[8] = 1;
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v282, v18, v19, v20, v21, v22, v23, v24);
    }
    v26 = v269;
    if (v270 != (_BYTE *)v269 && (_QWORD)v269)
    {
      *(_QWORD *)&v269 = 0;
      DWORD2(v269) = 0;
      WTF::fastFree(v26, v18, v19, v20, v21, v22, v23, v24);
    }
    if (v25)
      goto LABEL_8;
  }
  WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swap(a2 + 56, (uint64_t)&v271, *(unsigned int *)(a2 + 68), HIDWORD(v272));
  v45 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = HIDWORD(v272);
  HIDWORD(v272) = v45;
  v27 = 1;
LABEL_17:
  v46 = v281;
  v281 = 0;
  if (v46)
    --*v46;
  if (v279 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E35B5A60[v279])(&v269, v278);
  v279 = -1;
  v47 = v274;
  if (v277 != (_BYTE *)v274 && v274)
  {
    v274 = 0;
    v275 = 0;
    WTF::fastFree((unint64_t)v47, v18, v19, v20, v21, v22, v23, v24);
  }
  v48 = v271;
  if (v273 != (_BYTE *)v271)
  {
    if (v271)
    {
      v271 = 0;
      LODWORD(v272) = 0;
      WTF::fastFree((unint64_t)v48, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  if (v27)
  {
LABEL_24:
    v12 = *(_DWORD *)(a2 + 14752);
    goto LABEL_25;
  }
}

#error "198D2FE38: too big function (funcsize=0)"

uint64_t JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry::ControlEntry(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  int v21;
  char v22;

  v4 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  v5 = (__int128 *)*a2;
  if ((uint64_t *)*a2 == a2 + 2)
  {
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v16 = 24 * v6;
      do
      {
        v17 = *v5;
        *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
        *(_OWORD *)v4 = v17;
        v4 += 24;
        v5 = (__int128 *)((char *)v5 + 24);
        v16 -= 24;
      }
      while (v16);
    }
  }
  else
  {
    *a2 = (uint64_t)(a2 + 2);
    *(_QWORD *)a1 = v5;
    v20 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 16;
    *(_DWORD *)(a1 + 8) = v20;
  }
  v7 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = a1 + 416;
  *(_QWORD *)(a1 + 400) = a1 + 416;
  *(_QWORD *)(a1 + 408) = 16;
  v9 = (uint64_t *)a2[50];
  if (v9 == a2 + 52)
  {
    v10 = *((unsigned int *)a2 + 103);
    if ((_DWORD)v10)
    {
      v18 = 24 * v10;
      do
      {
        v19 = *(_OWORD *)v9;
        *(_QWORD *)(v8 + 16) = v9[2];
        *(_OWORD *)v8 = v19;
        v8 += 24;
        v9 += 3;
        v18 -= 24;
      }
      while (v18);
    }
  }
  else
  {
    a2[50] = (uint64_t)(a2 + 52);
    *(_QWORD *)(a1 + 400) = v9;
    v21 = *((_DWORD *)a2 + 102);
    *((_DWORD *)a2 + 102) = 16;
    *(_DWORD *)(a1 + 408) = v21;
  }
  v11 = *((_DWORD *)a2 + 103);
  *((_DWORD *)a2 + 103) = 0;
  *(_DWORD *)(a1 + 412) = v11;
  *(_DWORD *)(a1 + 800) = *((_DWORD *)a2 + 200);
  *(_BYTE *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 840) = -1;
  v12 = *((unsigned int *)a2 + 210);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E35B5A90[v12])(&v22, a1 + 808, a2 + 101);
    *(_DWORD *)(a1 + 840) = v12;
  }
  v13 = a2[106];
  *(_DWORD *)(a1 + 856) = *((_DWORD *)a2 + 214);
  *(_QWORD *)(a1 + 848) = v13;
  v14 = a2[108];
  a2[108] = 0;
  *(_QWORD *)(a1 + 864) = v14;
  return a1;
}

uint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t result;

  v3 = (uint64_t *)WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry::ControlEntry(*(_QWORD *)a1 + 872 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC4Wasm14LLIntGenerator11ControlLoopENSA_15ControlTopLevelENSA_12ControlBlockENSA_9ControlIfENSA_10ControlTryENSA_12ControlCatchEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC4Wasm14LLIntGenerator11ControlLoopENSA_15ControlTopLevelENSA_12ControlBlockENSA_9ControlIfENSA_10ControlTryENSA_12ControlCatchEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC4Wasm14LLIntGenerator11ControlLoopENSA_15ControlTopLevelENSA_12ControlBlockENSA_9ControlIfENSA_10ControlTryENSA_12ControlCatchEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC4Wasm14LLIntGenerator11ControlLoopENSA_15ControlTopLevelENSA_12ControlBlockENSA_9ControlIfENSA_10ControlTryENSA_12ControlCatchEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
  v4 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
}

unint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 872 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(unint64_t **)a1;
    v4 = (unint64_t *)(*(_QWORD *)a1 + 872 * *(unsigned int *)(a1 + 12));
    WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(v3, v4, *(_QWORD *)a1, v5, v6, v7, v8, v9);
    if ((unint64_t *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(unint64_t **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = result;
  if (a2 < 0x11)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 16;
  }
  else
  {
    if (a2 >= 0x4B27EE)
    {
      __break(0xC471u);
      JUMPOUT(0x198D4D100);
    }
    v3 = 872 * a2;
    result = WTF::fastMalloc((WTF *)(872 * a2));
    *(_DWORD *)(v2 + 8) = v3 / 0x368;
    *(_QWORD *)v2 = result;
  }
  return result;
}

void WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  int v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (a1 != a2)
  {
    v42 = v11;
    v43 = v10;
    v44 = v8;
    v45 = v9;
    v12 = a3;
    v14 = a1;
    do
    {
      *(_QWORD *)v12 = v12 + 16;
      *(_QWORD *)(v12 + 8) = 16;
      v16 = v14 + 2;
      v15 = *v14;
      if ((unint64_t *)*v14 == v14 + 2)
      {
        v17 = *((unsigned int *)v14 + 3);
        if ((_DWORD)v17)
        {
          v30 = 0;
          v31 = 24 * v17;
          do
          {
            v32 = v12 + v30;
            v33 = *(_OWORD *)(v15 + v30);
            *(_QWORD *)(v32 + 32) = *(_QWORD *)(v15 + v30 + 16);
            *(_OWORD *)(v32 + 16) = v33;
            v30 += 24;
          }
          while (v31 != v30);
        }
      }
      else
      {
        *v14 = (unint64_t)v16;
        *(_QWORD *)v12 = v15;
        v38 = *((_DWORD *)v14 + 2);
        *((_DWORD *)v14 + 2) = 16;
        *(_DWORD *)(v12 + 8) = v38;
      }
      v18 = *((_DWORD *)v14 + 3);
      *((_DWORD *)v14 + 3) = 0;
      *(_DWORD *)(v12 + 12) = v18;
      *(_QWORD *)(v12 + 400) = v12 + 416;
      *(_QWORD *)(v12 + 408) = 16;
      v19 = (unint64_t *)v14[50];
      v20 = v14 + 52;
      if (v19 == v14 + 52)
      {
        v21 = *((unsigned int *)v14 + 103);
        if ((_DWORD)v21)
        {
          v34 = 0;
          v35 = 24 * v21;
          do
          {
            v36 = v12 + v34;
            v37 = *(_OWORD *)&v19[v34 / 8];
            *(_QWORD *)(v36 + 432) = v19[v34 / 8 + 2];
            *(_OWORD *)(v36 + 416) = v37;
            v34 += 24;
          }
          while (v35 != v34);
        }
      }
      else
      {
        v14[50] = (unint64_t)v20;
        *(_QWORD *)(v12 + 400) = v19;
        v39 = *((_DWORD *)v14 + 102);
        *((_DWORD *)v14 + 102) = 16;
        *(_DWORD *)(v12 + 408) = v39;
      }
      v22 = *((_DWORD *)v14 + 103);
      *((_DWORD *)v14 + 103) = 0;
      *(_DWORD *)(v12 + 412) = v22;
      *(_DWORD *)(v12 + 800) = *((_DWORD *)v14 + 200);
      *(_BYTE *)(v12 + 808) = 0;
      *(_DWORD *)(v12 + 840) = -1;
      v23 = *((unsigned int *)v14 + 210);
      if ((_DWORD)v23 != -1)
      {
        ((void (*)(char *, uint64_t, unint64_t *))off_1E35B5A90[v23])(&v40, v12 + 808, v14 + 101);
        *(_DWORD *)(v12 + 840) = v23;
      }
      v24 = v14[106];
      *(_DWORD *)(v12 + 856) = *((_DWORD *)v14 + 214);
      *(_QWORD *)(v12 + 848) = v24;
      v25 = v14[108];
      v14[108] = 0;
      *(_QWORD *)(v12 + 864) = v25;
      v26 = (_DWORD *)v14[108];
      v14[108] = 0;
      if (v26)
        --*v26;
      v27 = *((unsigned int *)v14 + 210);
      if ((_DWORD)v27 != -1)
        ((void (*)(char *, unint64_t *))off_1E35B5A60[v27])(&v41, v14 + 101);
      *((_DWORD *)v14 + 210) = -1;
      v28 = v14[50];
      if (v20 != (unint64_t *)v28 && v28)
      {
        v14[50] = 0;
        *((_DWORD *)v14 + 102) = 0;
        WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
      }
      v29 = *v14;
      if (v16 != (unint64_t *)*v14)
      {
        if (v29)
        {
          *v14 = 0;
          *((_DWORD *)v14 + 2) = 0;
          WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v12 += 872;
      v14 += 109;
    }
    while (v14 != a2);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseExceptionIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse exception index", a2, 28, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(unsigned int *)(a2[1838] + 84) + (unint64_t)*(unsigned int *)(a2[1838] + 68);
  if (v18 <= v11)
  {
    v22[0] = "exception index ";
    v22[1] = 17;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v36;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  int v43;
  char v44;
  char v45;

  v8 = a2[3];
  if (!(_DWORD)v8)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  v11 = v8 - 1;
  v12 = *(_QWORD *)a2;
  v13 = *(_QWORD *)a2 + 872 * (v8 - 1);
  v14 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  v15 = *(__int128 **)v13;
  if (*(_QWORD *)v13 == v13 + 16)
  {
    v16 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v16)
    {
      v38 = 24 * v16;
      do
      {
        v39 = *v15;
        *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v14 = v39;
        v14 += 24;
        v15 = (__int128 *)((char *)v15 + 24);
        v38 -= 24;
      }
      while (v38);
    }
  }
  else
  {
    *(_QWORD *)v13 = v13 + 16;
    *(_QWORD *)a1 = v15;
    v42 = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(v13 + 8) = 16;
    *(_DWORD *)(a1 + 8) = v42;
    LODWORD(v16) = *(_DWORD *)(v13 + 12);
  }
  *(_DWORD *)(v13 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v16;
  v17 = v12 + 872 * v11;
  v18 = a1 + 416;
  *(_QWORD *)(a1 + 400) = a1 + 416;
  *(_QWORD *)(a1 + 408) = 16;
  v19 = *(__int128 **)(v17 + 400);
  if (v19 == (__int128 *)(v17 + 416))
  {
    v20 = *(unsigned int *)(v12 + 872 * v11 + 412);
    if ((_DWORD)v20)
    {
      v40 = 24 * v20;
      do
      {
        v41 = *v19;
        *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v18 = v41;
        v18 += 24;
        v19 = (__int128 *)((char *)v19 + 24);
        v40 -= 24;
      }
      while (v40);
    }
  }
  else
  {
    *(_QWORD *)(v17 + 400) = v17 + 416;
    *(_QWORD *)(a1 + 400) = v19;
    v20 = v12 + 872 * v11;
    v43 = *(_DWORD *)(v20 + 408);
    *(_DWORD *)(v20 + 408) = 16;
    *(_DWORD *)(a1 + 408) = v43;
    LODWORD(v20) = *(_DWORD *)(v20 + 412);
  }
  v21 = (_DWORD *)(v12 + 872 * v11);
  v21[103] = 0;
  *(_DWORD *)(a1 + 412) = v20;
  *(_DWORD *)(a1 + 800) = v21[200];
  *(_BYTE *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 840) = -1;
  v22 = v21[210];
  if ((_DWORD)v22 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E35B5A90[v22])(&v44, a1 + 808, v12 + 872 * v11 + 808);
    *(_DWORD *)(a1 + 840) = v22;
  }
  v23 = v12 + 872 * v11;
  v24 = *(_QWORD *)(v23 + 848);
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(v23 + 856);
  *(_QWORD *)(a1 + 848) = v24;
  v25 = *(_QWORD *)(v23 + 864);
  *(_QWORD *)(v23 + 864) = 0;
  *(_QWORD *)(a1 + 864) = v25;
  v26 = a2[3];
  if (!(_DWORD)v26)
  {
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x198D4D744);
  }
  v27 = v26 - 1;
  v28 = *(_QWORD *)a2;
  v29 = *(_QWORD *)a2 + 872 * (v26 - 1);
  v30 = *(_DWORD **)(v29 + 864);
  *(_QWORD *)(v29 + 864) = 0;
  if (v30)
    --*v30;
  v31 = (_DWORD *)(v28 + 872 * v27 + 840);
  v32 = *v31;
  if ((_DWORD)v32 != -1)
    ((void (*)(char *, uint64_t))off_1E35B5A60[v32])(&v45, v29 + 808);
  *v31 = -1;
  v33 = v28 + 872 * v27;
  v34 = *(_QWORD *)(v33 + 400);
  if (v33 + 416 != v34 && v34 != 0)
  {
    *(_QWORD *)(v33 + 400) = 0;
    *(_DWORD *)(v28 + 872 * v27 + 408) = 0;
    WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
  }
  v36 = *(_QWORD *)v29;
  if (v29 + 16 != *(_QWORD *)v29 && v36 != 0)
  {
    *(_QWORD *)v29 = 0;
    *(_DWORD *)(v29 + 8) = 0;
    WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
  }
  a2[3] = v27;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::unify(uint64_t a1, uint64_t a2, JSC::Wasm::FunctionSignature *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  double v16;
  float v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  WTF::StringImpl *v40;
  const char *v41;
  uint64_t v42;
  void (**v43)(WTF::StringPrintStream *__hidden);

  v11 = *((_DWORD *)a3 + 3);
  if (*(_DWORD *)(a2 + 68) == v11)
  {
    if (v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while ((JSC::Wasm::isSubtype(*(_QWORD *)(*(_QWORD *)(a2 + 56) + v12), *(_QWORD *)(*(_QWORD *)(a2 + 56) + v12 + 8), *(_QWORD *)(*(_QWORD *)a3 + v13), *(_QWORD *)(*(_QWORD *)a3 + v13 + 8), a5, a6, a7, a8) & 1) != 0)
      {
        ++v14;
        v13 += 16;
        v12 += 24;
        if (v14 >= *((unsigned int *)a3 + 3))
          goto LABEL_3;
      }
      v41 = "control flow returns with unexpected type. ";
      v42 = 44;
      v39 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + v12);
      v36 = " is not a ";
      v37 = 11;
      v34 = *(_OWORD *)(*(_QWORD *)a3 + v13);
      JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v43, a2, (uint64_t)&v41, (JSC::Wasm::Type *)&v39, (uint64_t)&v36, (JSC::Wasm::Type *)&v34, *(double *)&v34, v15);
      *(_QWORD *)a1 = v43;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
LABEL_3:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
    }
  }
  else
  {
    v41 = " block with type: ";
    v42 = 19;
    JSC::Wasm::FunctionSignature::toString(a3, (uint64_t *)&v40);
    *(_QWORD *)&v39 = " returns: ";
    *((_QWORD *)&v39 + 1) = 11;
    v38 = *((_DWORD *)a3 + 3);
    v36 = " but stack has: ";
    v37 = 17;
    v35 = *(unsigned int *)(a2 + 68);
    *(_QWORD *)&v34 = " values";
    *((_QWORD *)&v34 + 1) = 8;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(&v43, (uint64_t)&v41, (WTF::PrintStream *)&v40, (uint64_t)&v39, &v38, (uint64_t)&v36, &v35, (uint64_t)&v34, v16, v17);
    *(_QWORD *)a1 = v43;
    *(_BYTE *)(a1 + 8) = 1;
    v25 = v40;
    v40 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseBlockSignatureAndNotifySIMDUseIfNeeded(_BYTE *a1, unint64_t *a2, unsigned __int8 ***a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  int v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  float v52;
  unint64_t v53;
  unint64_t v54;
  char *String;
  uint64_t v56;
  float v57;
  char *v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  WTF::StringImpl *v65;
  unsigned __int8 v66;

  v6 = a2[1838];
  v7 = *a2;
  v8 = a2[2];
  if (v7 >= v8 || (v9 = *(char *)(a2[1] + v7), (v9 & 0x80000000) != 0))
  {
LABEL_42:
    v63 = 0;
    if (WTF::LEBDecoder::decodeInt64(a2[1], v8, (uint64_t *)a2, (uint64_t *)&v63))
    {
      if ((v63 & 0x8000000000000000) != 0)
      {
        v58 = "Block-like instruction signature index is negative";
        v59 = a2;
        v60 = 51;
      }
      else
      {
        v53 = *(unsigned int *)(v6 + 100);
        if (v63 >= v53)
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned int>("Block-like instruction signature index is out of bounds. Index: ", a2, 65, v63, " type index space: ", 20, v53, &v65, v52);
LABEL_60:
          v23 = 1;
          goto LABEL_47;
        }
        v54 = JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 8 * v63));
        v23 = *(_DWORD *)(v54 + 32);
        if (!v23)
        {
          *a3 = (unsigned __int8 **)(v54 + 8);
          LOBYTE(v65) = 0;
LABEL_47:
          v66 = v23;
          goto LABEL_8;
        }
        v58 = "Block-like instruction signature index does not refer to a function type definition";
        v59 = a2;
        v60 = 84;
      }
    }
    else
    {
      v58 = "Block-like instruction doesn't return value type but can't decode type section index";
      v59 = a2;
      v60 = 85;
    }
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v58, v59, v60, &v65, v52);
    goto LABEL_60;
  }
  v10 = v9 | (v9 >> 6 << 7);
  v11 = (char)(v9 | ((v9 >> 6) << 7));
  if ((JSC::Wasm::isValidTypeKind<signed char>(v11) & 1) == 0)
  {
    v8 = a2[2];
    goto LABEL_42;
  }
  if (!BYTE1(dword_1ECF4C7B0))
    goto LABEL_5;
  v49 = (char)v10 + 22;
  if (v49 <= 9)
  {
    if (((1 << v49) & 0x39F) == 0)
    {
LABEL_36:
      JSC::Wasm::ParserBase::parseReftypeSignature((uint64_t)a2, v6, a3, (uint64_t)&v65, v12);
      v23 = v66;
      goto LABEL_8;
    }
    v50 = BYTE2(dword_1ECF4C7B0) != 0;
  }
  else
  {
    v50 = 0;
  }
  if ((v10 + 29) < 2u || v50)
    goto LABEL_36;
LABEL_5:
  v13 = v10 - 192;
  if (v13 > 0x3F)
    goto LABEL_49;
  if (((1 << (v10 + 64)) & 0xF000000000000001) == 0)
  {
    if (((1 << (v10 + 64)) & 0x1800000000000) != 0)
    {
      if (!BYTE1(dword_1ECF4C7B0))
        goto LABEL_7;
    }
    else if (v13 == 59 && HIBYTE(dword_1ECF4C7B0))
    {
      goto LABEL_7;
    }
LABEL_49:
    String = (char *)JSC::Wasm::makeString(v11);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>("result type of block: ", a2, 23, String, v56, " is not a value type or Void", 29, &v63, v57);
    v39 = (WTF::StringImpl *)v63;
    v66 = 1;
    goto LABEL_24;
  }
LABEL_7:
  v14 = a2[3];
  v15 = JSC::Wasm::linearizeType(v11);
  v23 = 0;
  *a3 = *(unsigned __int8 ***)(v14 + 8 * v15 + 32);
  ++*a2;
  LOBYTE(v65) = 0;
  v66 = 0;
LABEL_8:
  if (!v23)
  {
    v24 = *a3;
    if (*a3)
    {
      v25 = a2[6];
      if (*(_BYTE *)(v25 + 254))
      {
        JSC::Wasm::LLIntGenerator::addCrash((JSC::Wasm::LLIntGenerator *)&v63, v25, v17, v18, v19, v20, v21, v22);
        if (!v64)
        {
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v63, v31, v32, v33, v34, v35, v36, v37);
          *a1 = 0;
          a1[8] = 0;
          if (!v66)
            return;
          goto LABEL_23;
        }
        v61 = v63;
        v63 = 0;
        *(_QWORD *)a1 = v61;
        a1[8] = 1;
      }
      else
      {
        v26 = *((unsigned int *)v24 + 3);
        if (!(_DWORD)v26)
        {
LABEL_12:
          *a1 = 0;
          a1[8] = 0;
          return;
        }
        v27 = (uint64_t)*v24;
        if (**v24 != 251)
        {
          v28 = 0;
          v29 = (unsigned __int8 *)(v27 + 16);
          while (v26 - 1 != v28)
          {
            v30 = *v29;
            v29 += 16;
            ++v28;
            if (v30 == 251)
            {
              if (v28 >= v26)
                goto LABEL_12;
              goto LABEL_19;
            }
          }
          goto LABEL_12;
        }
LABEL_19:
        *(_BYTE *)(v25 + 254) = 1;
        JSC::Wasm::LLIntGenerator::addCrash((JSC::Wasm::LLIntGenerator *)&v63, v25, v17, v18, v19, v20, v21, v22);
        if (!v64)
        {
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v63, v31, v32, v33, v34, v35, v36, v37);
          v38 = v66;
          *a1 = 0;
          a1[8] = 0;
          if (!v38)
            return;
          goto LABEL_23;
        }
        v62 = v63;
        v63 = 0;
        *(_QWORD *)a1 = v62;
        a1[8] = 1;
      }
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v63, v31, v32, v33, v34, v35, v36, v37);
      goto LABEL_25;
    }
  }
  *a1 = 0;
  a1[8] = 0;
  if (v23)
  {
LABEL_23:
    v39 = v65;
LABEL_24:
    v65 = 0;
    *(_QWORD *)a1 = v39;
    a1[8] = 1;
  }
LABEL_25:
  if (v66)
  {
    v40 = v65;
    v65 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseIndexForLocal(_BYTE *a1, uint64_t a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  void (**v21)(WTF::StringPrintStream *__hidden);
  unsigned int v22;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a2;
  v8 = v6 - *(_QWORD *)a2;
  if (v6 > *(_QWORD *)a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = v7 + 1;
    v13 = v12 + v7;
    v14 = v7 + 2;
    while (1)
    {
      v15 = *(char *)(v13 + v9);
      v11 |= (v15 & 0x7F) << v10;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v8 >= 5)
        v16 = 5;
      else
        v16 = v8;
      if (v16 - 1 == v9)
        goto LABEL_17;
      *(_QWORD *)a2 = v14 + v9;
      v10 += 7;
      if (v8 == ++v9)
      {
        __break(1u);
LABEL_14:
        v20[0] = "attempt to use unknown local ";
        v20[1] = 30;
        v19[0] = ", the number of locals is ";
        v19[1] = 27;
        v18 = v8;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v21, (uint64_t)v20, &v22, (uint64_t)v19, &v18, a4, a5);
        v17 = v21;
        goto LABEL_15;
      }
    }
    v22 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v8 = *(unsigned int *)(a2 + 14436);
      if (v8 > v11)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_14;
    }
  }
LABEL_17:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get index for local", (unint64_t *)a2, 26, v20, a5);
  v17 = (void (**)(WTF::StringPrintStream *__hidden))v20[0];
LABEL_15:
  *(_QWORD *)a1 = v17;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::checkLocalInitialized(uint64_t a1, uint64_t a2, unsigned int a3, double a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  void (**v10)(WTF::StringPrintStream *__hidden);
  unsigned int v11;

  v11 = a3;
  if (BYTE1(dword_1ECF4C7B0))
  {
    if (*(_DWORD *)(a2 + 14436) <= a3)
    {
      __break(0xC471u);
      return;
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 14424) + 16 * a3) == 228)
    {
      v5 = a2 + 14728;
      v6 = *(_QWORD *)(a2 + 14728);
      if (v6 >= 0)
        v5 = 2 * v6 + 8;
      if (((*(_QWORD *)(v5 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1) == 0)
      {
        v9[0] = "non-defaultable function local ";
        v9[1] = 32;
        v8[0] = " is accessed before initialization";
        v8[1] = 35;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v10, (uint64_t)v9, &v11, (uint64_t)v8, a4, a5);
        *(_QWORD *)a1 = v10;
        *(_BYTE *)(a1 + 8) = 1;
        return;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::pushLocalInitialized(uint64_t result, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;

  v11 = a2;
  if (BYTE1(dword_1ECF4C7B0))
  {
    if (*(_DWORD *)(result + 14436) <= a2)
    {
      __break(0xC471u);
    }
    else if (*(unsigned __int8 *)(*(_QWORD *)(result + 14424) + 16 * a2) == 228)
    {
      v2 = (uint64_t *)(result + 14728);
      v3 = *(_QWORD *)(result + 14728);
      v4 = 2 * v3;
      v5 = v3 >= 0 ? 2 * v3 + 8 : result + 14728;
      v6 = (unint64_t)a2 >> 6;
      v7 = 1 << a2;
      if ((*(_QWORD *)(v5 + 8 * v6) & (1 << a2)) == 0)
      {
        v8 = *(unsigned int *)(result + 14724);
        if ((_DWORD)v8 == *(_DWORD *)(result + 14720))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(result + 14712, (unint64_t)&v11);
          v3 = *v2;
          v4 = 2 * *v2;
          v6 = (unint64_t)v11 >> 6;
          v7 = 1 << v11;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(result + 14712) + 4 * v8) = a2;
          ++*(_DWORD *)(result + 14724);
        }
        v9 = v4 + 8;
        if (v3 >= 0)
          v10 = (uint64_t *)v9;
        else
          v10 = v2;
        v10[v6] |= v7;
      }
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseIndexForGlobal(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  unint64_t v18;
  _QWORD v19[2];
  void (**v20)(WTF::StringPrintStream *__hidden);
  unsigned int v21;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 > *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a2[1];
    *a2 = v7 + 1;
    v13 = v12 + v7;
    v14 = v7 + 2;
    while (1)
    {
      v15 = *(char *)(v13 + v9);
      v11 |= (v15 & 0x7F) << v10;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v8 >= 5)
        v16 = 5;
      else
        v16 = v8;
      if (v16 - 1 == v9)
        goto LABEL_17;
      *a2 = v14 + v9;
      v10 += 7;
      if (v8 == ++v9)
      {
        __break(1u);
LABEL_14:
        v19[0] = " of unknown global, limit is ";
        v19[1] = 30;
        v18 = v8;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral,unsigned long>(&v20, &v21, (uint64_t)v19, &v18);
        v17 = v20;
        goto LABEL_15;
      }
    }
    v21 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v8 = *(unsigned int *)(a2[1838] + 220);
      if (v8 > v11)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_14;
    }
  }
LABEL_17:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get global's index", a2, 25, v19, a5);
  v17 = (void (**)(WTF::StringPrintStream *__hidden))v19[0];
LABEL_15:
  *(_QWORD *)a1 = v17;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseFunctionIndex(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v10 = a2[2];
  v11 = *a2;
  v12 = v10 > *a2;
  v13 = v10 - *a2;
  if (v12)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = a2[1];
    *a2 = v11 + 1;
    v18 = v17 + v11;
    v19 = v11 + 2;
    while (1)
    {
      v20 = *(char *)(v18 + v14);
      v16 |= (v20 & 0x7F) << v15;
      if ((v20 & 0x80000000) == 0)
        break;
      if (v13 >= 5)
        v21 = 5;
      else
        v21 = v13;
      if (v21 - 1 == v14)
        goto LABEL_18;
      *a2 = v19 + v14;
      v15 += 7;
      if (v13 == ++v14)
      {
        __break(1u);
LABEL_15:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("function index ", a2, 16, v16, " exceeds function index space ", 31, a9, &v22, a5);
        goto LABEL_16;
      }
    }
    if ((_DWORD)v14 != 4 || *(unsigned __int8 *)(v18 + v14) < 0x10u)
    {
      a9 = *(unsigned int *)(a2[1838] + 52) + (unint64_t)*(unsigned int *)(a2[1838] + 36);
      if (a9 > v16)
      {
        *a3 = v16;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_15;
    }
  }
LABEL_18:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse function index", a2, 27, &v22, a5);
LABEL_16:
  *(_QWORD *)a1 = v22;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseBranchTarget(_BYTE *a1, uint64_t a2, unsigned int *a3, int a4, double a5, float a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (v12)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = v11 + 1;
    v19 = v18 + v11;
    v20 = v11 + 2;
    while (1)
    {
      v21 = *(char *)(v19 + v15);
      v17 |= (v21 & 0x7F) << v16;
      if ((v21 & 0x80000000) == 0)
        break;
      if (v13 >= 5)
        v22 = 5;
      else
        v22 = v13;
      if (v22 - 1 == v15)
        goto LABEL_21;
      *(_QWORD *)a2 = v20 + v15;
      v16 += 7;
      if (v13 == ++v15)
      {
        __break(1u);
LABEL_18:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("br / br_if's target ", (unint64_t *)a2, 21, v17, " exceeds control stack size ", 29, a9, &v23, a6);
        goto LABEL_19;
      }
    }
    if ((_DWORD)v15 != 4 || *(unsigned __int8 *)(v19 + v15) < 0x10u)
    {
      if (a4)
        a9 = *(unsigned int *)(a2 + 468) + (unint64_t)(a4 - 1);
      else
        a9 = *(unsigned int *)(a2 + 468);
      if (a9 > v17)
      {
        *a3 = v17;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_18;
    }
  }
LABEL_21:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get br / br_if's target", (unint64_t *)a2, 30, &v23, a6);
LABEL_19:
  *(_QWORD *)a1 = v23;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseTableInitImmediates(uint64_t a1, unint64_t *a2, _DWORD *a3, double a4, float a5)
{
  double v8;
  float v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  unsigned int v15;

  v15 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseElementIndex((uint64_t)&v13, a2, &v15, a4, a5);
  if (v14
    || (v12 = 0,
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseTableIndex((uint64_t)&v13, a2, &v12, v8, v9),
        (v10 = v14) != 0))
  {
    *(_QWORD *)a1 = v13;
    v10 = 1;
  }
  else
  {
    v11 = v12;
    *a3 = v15;
    a3[1] = v11;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 8) = v10;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseElementIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse element index", a2, 26, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[1838] + 188);
  if (v11 >= v18)
  {
    v22[0] = "element index ";
    v22[1] = 15;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseTableIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse table index", a2, 24, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[1838] + 204);
  if (v11 >= v18)
  {
    v22[0] = "table index ";
    v22[1] = 13;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseTableCopyImmediates(_BYTE *a1, unint64_t *a2, _DWORD *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  void (**v30)(WTF::StringPrintStream *__hidden);
  unint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  unsigned int v41;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 > *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a2[1];
    v13 = 5;
    if (v8 < 5)
      v13 = v6 - *a2;
    v14 = v13 - 1;
    *a2 = v7 + 1;
    while (1)
    {
      v15 = *(char *)(v12 + v7 + v9);
      LODWORD(v16) = (v15 & 0x7F) << v10;
      v11 |= v16;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v14 == v9)
        goto LABEL_27;
      v17 = v7 + v9 + 2;
      *a2 = v17;
      ++v9;
      v10 += 7;
      if (v8 == v9)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    v41 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v10 = *(_DWORD *)(a2[1838] + 204);
      if (v11 >= v10)
      {
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v35 = v10;
        v28 = &v41;
        v29 = &v35;
      }
      else
      {
        if (v6 <= v7 + v9 + 1)
          goto LABEL_29;
        v17 = 0;
        v18 = 0;
        LODWORD(v14) = 0;
        v19 = ~v9 + v8;
        v20 = 5;
        if (v19 < 5)
          v20 = v19;
        v21 = v7 + v9;
        *a2 = v7 + v9 + 2;
        v22 = v7 - v6;
        v23 = v12 + v7;
        v24 = v20 - 1;
        v25 = v22 + v9;
        while (1)
        {
          LODWORD(v16) = *(char *)(v23 + v17 + v9 + 1);
          LODWORD(v14) = ((v16 & 0x7F) << v18) | v14;
          if ((v16 & 0x80000000) == 0)
            break;
          if (v24 == v17)
            goto LABEL_29;
          v26 = v21 + v17;
          v27 = v25 + v17++;
          v16 = v26 + 3;
          *a2 = v16;
          v18 += 7;
          if (v27 == -2)
            goto LABEL_18;
        }
LABEL_19:
        v35 = v14;
        if ((_DWORD)v17 == 4 && v16 >= 0x10u)
        {
LABEL_29:
          v31 = a2;
          v32 = "can't parse source table index";
          v33 = 31;
          goto LABEL_30;
        }
        if (v14 < v10)
        {
          *a3 = v14;
          a3[1] = v11;
          *a1 = 0;
          a1[8] = 0;
          return;
        }
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v34 = v10;
        v28 = &v35;
        v29 = &v34;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v40, (uint64_t)&v38, v28, (uint64_t)&v36, v29, a4, a5);
      v30 = v40;
      goto LABEL_25;
    }
  }
LABEL_27:
  v31 = a2;
  v32 = "can't parse destination table index";
  v33 = 36;
LABEL_30:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v31, v33, &v38, a5);
  v30 = (void (**)(WTF::StringPrintStream *__hidden))v38;
LABEL_25:
  *(_QWORD *)a1 = v30;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseMemoryFillImmediate(uint64_t a1, unint64_t *a2, double a3, float a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *a2;
  if (*a2 >= a2[2])
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse auxiliary byte", a2, 27, &v7, a4);
    goto LABEL_6;
  }
  *a2 = v5 + 1;
  v6 = a2[1];
  if (*(_BYTE *)(v6 + v5))
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("auxiliary byte for memory.fill should be zero, but got ", a2, 56, *(unsigned __int8 *)(v6 + v5), &v7, a4);
LABEL_6:
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseMemoryInitImmediates(uint64_t a1, unint64_t *a2, _QWORD *a3, double a4, float a5)
{
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  char *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;

  v26 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseDataSegmentIndex(&v24, a2, &v26, a4, a5);
  if (v25)
    goto LABEL_16;
  v9 = a2[2];
  v10 = *a2;
  v11 = v9 - *a2;
  if (v9 <= *a2)
    goto LABEL_18;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a2[1];
  v16 = 5;
  if (v11 < 5)
    v16 = v11;
  v17 = v16 - 1;
  *a2 = v10 + 1;
  v18 = v15 + v10;
  v19 = v10 + 2;
  while (1)
  {
    v20 = *(char *)(v18 + v12);
    v14 |= (v20 & 0x7F) << v13;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v17 == v12)
      goto LABEL_18;
    LOBYTE(v20) = v19 + v12;
    *a2 = v19 + v12;
    v13 += 7;
    if (v11 == ++v12)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v12 == 4 && v20 >= 0x10u)
  {
LABEL_18:
    v21 = "can't parse unused";
    v22 = a2;
    v23 = 19;
    goto LABEL_15;
  }
  if (v14)
  {
    v21 = "memory.init invalid unsued byte";
    v22 = a2;
    v23 = 32;
LABEL_15:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v21, v22, v23, &v24, v8);
LABEL_16:
    *(_QWORD *)a1 = v24;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v26;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseDataSegmentIndex(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  void (**v20)(WTF::StringPrintStream *__hidden);
  unsigned int v21;
  _QWORD v22[2];
  _QWORD v23[2];
  void (**v24)(WTF::StringPrintStream *__hidden);
  unsigned int v25;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_18;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_18;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v25 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_18:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse data segment index", a2, 31, v23, a5);
    v20 = (void (**)(WTF::StringPrintStream *__hidden))v23[0];
  }
  else
  {
    v18 = a2[1838];
    if (*(_BYTE *)(v18 + 268))
    {
      v19 = *(_DWORD *)(v18 + 264);
      if (v11 < v19)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
    }
    else
    {
      v19 = 0;
    }
    v23[0] = "data segment index ";
    v23[1] = 20;
    v22[0] = " is invalid, limit is ";
    v22[1] = 23;
    v21 = v19;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v24, (uint64_t)v23, &v25, (uint64_t)v22, &v21, a4, a5);
    v20 = v24;
  }
  *(_QWORD *)a1 = v20;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseAnnotatedSelectImmediates(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  WTF *v49;
  WTF *v50;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a2;
  v9 = v7 - *(_QWORD *)a2;
  if (v7 <= *(_QWORD *)a2)
    goto LABEL_73;
  v11 = 0;
  v12 = 0;
  LODWORD(v13) = 0;
  v14 = *(_QWORD *)(a2 + 8);
  if (v9 >= 5)
    v9 = 5;
  v15 = v9 - 1;
  *(_QWORD *)a2 = v8 + 1;
  while (1)
  {
    LODWORD(v16) = *(char *)(v14 + v8 + v11);
    LODWORD(v13) = ((v16 & 0x7F) << v12) | v13;
    if ((v16 & 0x80000000) == 0)
      break;
    if (v15 == v11)
      goto LABEL_73;
    v16 = v8 + v11 + 2;
    *(_QWORD *)a2 = v16;
    ++v11;
    v12 += 7;
    if (!(v8 - v7 + v11))
    {
LABEL_8:
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v11 == 4 && v16 >= 0x10u)
  {
LABEL_73:
    v28 = "select can't parse the size of annotation vector";
    v29 = (unint64_t *)a2;
    v30 = 49;
    goto LABEL_24;
  }
  if ((_DWORD)v13 != 1)
  {
    v28 = "select invalid result arity for";
    v29 = (unint64_t *)a2;
    v30 = 32;
    goto LABEL_24;
  }
  if (v8 + v11 + 1 >= v7)
    goto LABEL_23;
  v17 = *(_QWORD *)(a2 + 14704);
  v18 = (char *)(v8 + v11);
  *(_QWORD *)a2 = v18 + 2;
  v19 = v18[v14 + 1];
  if ((v19 & 0x80000000) != 0)
    goto LABEL_23;
  v20 = v19 | (v19 >> 6 << 7);
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v19 | ((v19 >> 6) << 7))))
    goto LABEL_23;
  if (!BYTE1(dword_1ECF4C7B0))
  {
    if ((v20 + 29) < 2u)
      goto LABEL_23;
    goto LABEL_17;
  }
  v8 = (char)v20;
  v26 = (char)v20 + 22;
  if (v26 <= 9 && (((1 << v26) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
  {
    v27 = 227;
LABEL_28:
    if (BYTE1(dword_1ECF4C7B0))
      v31 = v8 == 0;
    else
      v31 = 1;
    if (!v31)
      goto LABEL_19;
    goto LABEL_23;
  }
  if ((v20 + 29) < 2u)
  {
    v32 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)a2;
    v7 = v32 - *(_QWORD *)a2;
    if (v32 <= *(_QWORD *)a2)
      goto LABEL_23;
    v11 = 0;
    LODWORD(v8) = 0;
    v33 = *(_QWORD *)(a2 + 8);
    v34 = 5;
    if (v7 < 5)
      v34 = v7;
    v13 = v34 - 1;
    *(_QWORD *)a2 = v14 + 1;
    v35 = v33 + v14;
    v36 = v14 + 2;
    LODWORD(v14) = 7;
    while (1)
    {
      v37 = *(char *)(v35 + v11);
      LOBYTE(v16) = v37 & 0x7F;
      v8 = ((v37 & 0x7F) << (v14 - 7)) | v8;
      if ((v37 & 0x80000000) == 0)
        break;
      if (v13 == v11)
        goto LABEL_23;
      *(_QWORD *)a2 = v36 + v11;
      v14 = (v14 + 7);
      if (v7 == ++v11)
        goto LABEL_8;
    }
    if ((_DWORD)v11 == 4)
    {
      if ((v37 & 0x40) == 0)
      {
        if (*(unsigned __int8 *)(v35 + v11) > 7u)
          goto LABEL_23;
        goto LABEL_45;
      }
      if ((v37 & 0xF8) != 0x78)
        goto LABEL_23;
    }
    if (v14 <= 0x1F && (v37 & 0x40) != 0)
    {
      LODWORD(v8) = v8 | (-1 << v14);
      goto LABEL_66;
    }
LABEL_45:
    if ((v8 & 0x80000000) == 0)
    {
      if (v8 >= *(_DWORD *)(v17 + 100))
      {
        if (!*(_BYTE *)(a2 + 32))
          goto LABEL_23;
        v38 = *(_DWORD *)(a2 + 36);
        if (v8 < v38 || v8 >= *(_DWORD *)(a2 + 40))
          goto LABEL_23;
      }
      else if (!*(_BYTE *)(a2 + 32) || (v38 = *(_DWORD *)(a2 + 36), v8 < v38))
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 8 * v8);
        goto LABEL_18;
      }
      JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v8 - v38), v21, v22, v23, v24, v25, (unsigned int **)&v50);
      v8 = (int64_t)v50;
      v50 = 0;
      if (v8)
      {
        do
        {
          v46 = __ldaxr((unsigned int *)v8);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, (unsigned int *)v8));
        if (!v47)
        {
          atomic_store(1u, (unsigned int *)v8);
          v49 = (WTF *)v8;
          WTF::fastFree(v8, v39, v40, v41, v42, v43, v44, v45);
          v8 = (int64_t)v49;
        }
      }
      goto LABEL_18;
    }
LABEL_66:
    v8 = (int)v8;
    v48 = (int)v8 + 22;
    if (v48 > 9 || ((1 << v48) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
      goto LABEL_23;
    goto LABEL_18;
  }
LABEL_17:
  v8 = 0;
LABEL_18:
  v27 = v20;
  if (v20 - 252 < 4)
  {
LABEL_19:
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v27;
    *(_QWORD *)(a3 + 16) = v8;
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  if (v20 - 239 < 2)
  {
    if (!BYTE1(dword_1ECF4C7B0))
      goto LABEL_19;
  }
  else if (v20 == 251)
  {
    if (HIBYTE(dword_1ECF4C7B0))
    {
      v27 = 251;
      goto LABEL_19;
    }
  }
  else if (v20 - 227 < 2)
  {
    goto LABEL_28;
  }
LABEL_23:
  v28 = "select can't parse annotations";
  v29 = (unint64_t *)a2;
  v30 = 31;
LABEL_24:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v28, v29, v30, &v50, a5);
  *(_QWORD *)a1 = v50;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseStructTypeIndex(_BYTE *a1, unint64_t *a2, _DWORD *a3, char *a4, uint64_t a5, double a6, float a7)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  JSC::Wasm::TypeDefinition *v21;
  int v22;
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int *v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 hasRecursiveReference;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t CachedUnrolling;
  uint64_t v36;
  uint64_t v37;
  const JSC::Wasm::Type *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  const JSC::Wasm::TypeDefinition *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::Wasm::TypeInformation *v49;
  void (**v50[2])(WTF::StringPrintStream *__hidden);
  const char *v51;
  uint64_t v52;
  void (**v53)(WTF::StringPrintStream *__hidden);
  unsigned int v54;
  _QWORD v55[2];

  v55[0] = a4;
  v55[1] = a5;
  v8 = a2[2];
  v9 = *a2;
  v10 = v8 - *a2;
  if (v8 <= *a2)
    goto LABEL_25;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a2[1];
  v15 = 5;
  if (v10 < 5)
    v15 = v10;
  v16 = v15 - 1;
  *a2 = v9 + 1;
  v17 = v14 + v9;
  v18 = v9 + 2;
  while (1)
  {
    v19 = *(char *)(v17 + v11);
    v13 |= (v19 & 0x7F) << v12;
    if ((v19 & 0x80000000) == 0)
      break;
    if (v16 == v11)
      goto LABEL_25;
    LOBYTE(v19) = v18 + v11;
    *a2 = v18 + v11;
    v12 += 7;
    if (v10 == ++v11)
    {
      __break(1u);
      break;
    }
  }
  v54 = v13;
  if ((_DWORD)v11 == 4 && v19 >= 0x10u)
  {
LABEL_25:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v51, a7);
    v23 = (void (**)(WTF::StringPrintStream *__hidden))v51;
  }
  else
  {
    v20 = a2[1838];
    if (v13 >= *(_DWORD *)(v20 + 100))
    {
      v51 = " index ";
      v52 = 8;
      v50[0] = (void (**)(WTF::StringPrintStream *__hidden))" is out of bound";
      v50[1] = (void (**)(WTF::StringPrintStream *__hidden))17;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v53, (uint64_t)v55, (uint64_t)&v51, &v54, (uint64_t)v50, a6, a7);
      v23 = v53;
    }
    else
    {
      v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v20 + 88) + 8 * v13);
      if (*((_DWORD *)v21 + 8) == 4)
      {
        v49 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v20 + 88) + 8 * v13);
        v24 = (unsigned int *)*((_QWORD *)v21 + 1);
        v25 = *(WTF **)v24;
        v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v24 + 8) + 8 * v24[2]);
        v26 = (uint64_t)a3;
        v27 = v13;
        hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v21);
        v13 = v27;
        a3 = (_DWORD *)v26;
        if (hasRecursiveReference)
        {
          CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v49, v29, v26, v30, v31, v32, v33, v34);
          if (v42)
          {
            v21 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
          }
          else
          {
            v21 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v21, v25, v36, v37, v38, v39, v40, v41);
            JSC::Wasm::TypeInformation::addCachedUnrolling(v49, v21, v43, v44, v45, v46, v47, v48);
          }
          a3 = (_DWORD *)v26;
          v13 = v27;
        }
      }
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 5)
        v22 = *(_DWORD *)(**((_QWORD **)v21 + 1) + 32);
      if (v22 == 1)
      {
        *a3 = v13;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v51 = ": invalid type index ";
      v52 = 22;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int>(v50, (uint64_t)v55, (uint64_t)&v51, &v54, a6, a7);
      v23 = v50[0];
    }
  }
  *(_QWORD *)a1 = v23;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseStructTypeIndexAndFieldIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, char *a4, uint64_t a5, double a6, float a7)
{
  float v12;
  unint64_t v13;
  unsigned int v14;
  JSC::Wasm::TypeDefinition *v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  WTF *v32;
  unsigned int v33;
  _BOOL4 hasRecursiveReference;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t CachedUnrolling;
  uint64_t v43;
  uint64_t v44;
  const JSC::Wasm::Type *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  const JSC::Wasm::TypeDefinition *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::Wasm::TypeInformation *v56;
  uint64_t v57;
  char v58;
  unsigned int v59;

  v59 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseStructTypeIndex(&v57, a2, &v59, a4, a5, a6, a7);
  if (v58)
  {
LABEL_22:
    *(_QWORD *)a1 = v57;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v13 = a2[1838];
  v14 = v59;
  if (*(_DWORD *)(v13 + 100) > v59)
  {
    v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v13 + 88) + 8 * v59);
    if (*((_DWORD *)v15 + 8) == 4)
    {
      v56 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v13 + 88) + 8 * v59);
      v31 = (unsigned int *)*((_QWORD *)v15 + 1);
      v32 = *(WTF **)v31;
      v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v31 + 8) + 8 * v31[2]);
      v33 = v59;
      hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v15);
      v14 = v33;
      if (hasRecursiveReference)
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v56, v35, v36, v37, v38, v39, v40, v41);
        if (v49)
        {
          v15 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v15 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v15, v32, v43, v44, v45, v46, v47, v48);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v56, v15, v50, v51, v52, v53, v54, v55);
        }
        v14 = v33;
      }
    }
    v16 = *((_DWORD *)v15 + 8);
    if (v16 == 5)
    {
      v15 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v15 + 1);
      v16 = *((_DWORD *)v15 + 8);
    }
    if (v16 == 1)
      v17 = (char *)v15 + 8;
    else
      v17 = 0;
    v18 = a2[2];
    v19 = *a2;
    v20 = v18 > *a2;
    v21 = v18 - *a2;
    if (!v20)
      goto LABEL_29;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = a2[1];
    v26 = 5;
    if (v21 < 5)
      v26 = v21;
    v27 = v26 - 1;
    *a2 = v19 + 1;
    v28 = v25 + v19;
    v29 = v19 + 2;
    while (1)
    {
      v30 = *(char *)(v28 + v22);
      v24 |= (v30 & 0x7F) << v23;
      if ((v30 & 0x80000000) == 0)
        break;
      if (v27 == v22)
        goto LABEL_29;
      LOBYTE(v30) = v29 + v22;
      *a2 = v29 + v22;
      v23 += 7;
      if (v21 == ++v22)
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v22 != 4 || v30 < 0x10u)
    {
      if (v24 < *((_DWORD *)v17 + 2))
      {
        *a3 = v14;
        a3[1] = v24;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      }
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(a4, a2, a5, " field immediate ", 18, v24, " is out of bounds", 18, &v57, v12);
    }
    else
    {
LABEL_29:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v57, v12);
    }
    goto LABEL_22;
  }
  __break(0xC471u);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<false,void>(_BYTE *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v12;
  int v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t *v31;
  int v32;
  unint64_t v33;
  __int8 v34;
  __int8 v35;
  __int8 v36;
  __int8 v37;
  uint8x16_t v38;
  uint8x8_t v39;
  unint64_t v40;
  int8x8_t v41;
  uint32x2_t v42;
  __int8 v43;
  uint8x8_t v44;
  uint16x4_t v45;
  unint64_t v46;
  int8x8_t v47;
  uint32x2_t v48;
  __int8 v49;
  uint8x8_t v50;
  uint16x4_t v51;
  __int8 v52;
  __int8 v53;
  __int8 v54;
  __int8 v55;
  uint8x8_t v56;
  __int8 v57;
  uint8x16_t v58;
  int v59;
  uint64_t v60;
  int v61;

  v8 = a4;
  v9 = a3;
  v12 = a2[6];
  v13 = *(_DWORD *)(v12 + 16);
  v60 = v12;
  v61 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v12 + 40), &v60, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(v12 + 36) = 152;
  LOBYTE(v60) = -104;
  v17 = *(unsigned int *)(v12 + 12);
  v18 = *(unsigned int *)(v12 + 16);
  if (v17 > v18)
  {
    *(_DWORD *)(v12 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)v12 + v18) = -104;
  }
  else
  {
    if ((_DWORD)v17 == *(_DWORD *)(v12 + 8))
      *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v17 + 1), (unint64_t)&v60);
    else
      *(_BYTE *)(*(_QWORD *)v12 + v17) = -104;
    v15 = (uint8x8_t)0x100000001;
    v14 = (uint8x8_t)vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
    *(uint8x8_t *)(v12 + 12) = v14;
  }
  *(_BYTE *)(a2[6] + 254) = 1;
  if ((v9 - 77) <= 3u && !(_BYTE)word_1ECF4C7B4)
  {
    v24 = "relaxed simd instructions not supported";
    v25 = a2;
    v26 = 40;
LABEL_38:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v24, v25, v26, &v60, *(float *)v15.i32);
    goto LABEL_40;
  }
  switch(v9)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 38:
    case 39:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 49:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 62:
    case 63:
    case 67:
    case 68:
    case 69:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
      goto LABEL_8;
    case 2:
    case 16:
    case 46:
    case 71:
      if (v9 > 45)
      {
        if (v9 == 46)
        {
          v21 = 4;
        }
        else
        {
          if (v9 != 71)
          {
LABEL_78:
            __break(0xC471u);
            JUMPOUT(0x198D4FBFCLL);
          }
          v21 = 2;
        }
      }
      else if (v9 == 2)
      {
        v21 = 8;
      }
      else
      {
        v21 = v9;
        if (v9 != 16)
          goto LABEL_78;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v60, v9, a2, &v59, *(double *)&v14, *(float *)v15.i32);
      if ((_BYTE)v61)
        goto LABEL_40;
      v29 = (v21 - 2) >> 1;
      if (v29 > 7 || ((1 << v29) & 0x8B) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198D4FC1CLL);
      }
      goto LABEL_52;
    case 7:
      v19 = 7;
      goto LABEL_11;
    case 8:
    case 25:
    case 29:
    case 48:
      if (v9 > 28)
      {
        if (v9 == 29)
        {
          v21 = 2;
        }
        else
        {
          if (v9 != 48)
            goto LABEL_77;
          v21 = 8;
        }
      }
      else
      {
        if (v9 != 8)
        {
          if (v9 == 25)
          {
            v21 = 4;
            goto LABEL_43;
          }
LABEL_77:
          __break(0xC471u);
          JUMPOUT(0x198D4FBDCLL);
        }
        v21 = 16;
      }
LABEL_43:
      JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v60, v9, a2, &v59, *(double *)&v14, *(float *)v15.i32);
      if ((_BYTE)v61)
        goto LABEL_40;
      v28 = (v21 - 2) >> 1;
      if (v28 > 7 || ((1 << v28) & 0x8B) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198D4F79CLL);
      }
LABEL_52:
      v30 = *a2;
      if (*a2 >= a2[2])
      {
LABEL_76:
        v24 = "Could not parse the lane index immediate byte.";
        v25 = a2;
        v26 = 47;
        goto LABEL_38;
      }
      *a2 = v30 + 1;
      if (*(unsigned __int8 *)(a2[1] + v30) < v21)
      {
LABEL_8:
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v31 = a2;
      v22 = v21;
      v32 = v21;
LABEL_65:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", v31, 40, v22, ", expected an ImmLaneIdx", 25, v32, &v60, *(float *)v15.i32);
LABEL_40:
      *(_QWORD *)a1 = v60;
      v20 = 1;
LABEL_13:
      a1[8] = v20;
      return;
    case 13:
    case 14:
    case 27:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 50:
    case 56:
    case 61:
    case 64:
    case 70:
      v19 = v9;
LABEL_11:
      JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v60, v19, a2, &v59, *(double *)&v14, *(float *)v15.i32);
      v20 = v61;
      if ((_BYTE)v61)
        goto LABEL_40;
      *a1 = 0;
      goto LABEL_13;
    case 19:
      v23 = *a2 + 16;
      if (a2[2] < v23)
      {
        v24 = "can't parse 128-bit vector constant";
        v25 = a2;
        v26 = 36;
        goto LABEL_38;
      }
      *a2 = v23;
      goto LABEL_8;
    case 41:
      v27 = *a2 + 16;
      if (a2[2] < v27)
      {
        v24 = "can't parse 128-bit shuffle immediate";
        v25 = a2;
        v26 = 38;
        goto LABEL_38;
      }
      v33 = a2[1] + *a2;
      v14.i32[0] = *(_DWORD *)v33;
      v34 = *(_BYTE *)(v33 + 4);
      v15.i32[0] = *(_DWORD *)(v33 + 5);
      v35 = *(_BYTE *)(v33 + 9);
      v36 = *(_BYTE *)(v33 + 10);
      v37 = *(_BYTE *)(v33 + 11);
      v16.i32[0] = *(_DWORD *)(v33 + 12);
      *a2 = v27;
      v38.i64[0] = vmovl_u8(v14).u64[0];
      v39 = (uint8x8_t)vmovl_u8(v15).u64[0];
      v40 = vmovl_u8(v16).u64[0];
      switch(v8)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198D4FCBCLL);
        case 1:
          v52 = v39.i8[6];
          v53 = v39.i8[4];
          v54 = v39.i8[2];
          v55 = v39.i8[0];
          v56.i8[0] = v38.i8[0];
          v56.i8[1] = v38.i8[4];
          v56.i8[2] = v38.i8[6];
          v56.i8[3] = v34;
          v56.i8[4] = v55;
          v56.i8[5] = v54;
          v56.i8[6] = v53;
          v56.i8[7] = v52;
          if ((vmaxv_u8(vcgt_u8(v56, (uint8x8_t)0x1F1F1F1F1F1F1F1FLL)) & 1) != 0
            || (v40 | v38.i8[2] | BYTE2(v40) | BYTE4(v40) | BYTE6(v40) | v37 | v35 | v36) >= 0x20u)
          {
            goto LABEL_73;
          }
          goto LABEL_8;
        case 2:
          v57 = v38.i8[0];
          v38.i8[0] = v38.i8[2];
          v38.i8[1] = v57;
          v38.i8[2] = v38.i8[4];
          v38.i8[3] = v38.i8[6];
          v38.i8[4] = v34;
          v38.i8[5] = v39.i8[0];
          v38.i8[6] = v39.i8[2];
          v38.i8[7] = v39.i8[4];
          v38.i8[8] = v39.i8[6];
          v38.i8[9] = v35;
          v38.i8[10] = v36;
          v38.i8[11] = v37;
          v38.i8[12] = v40;
          v38.i8[13] = BYTE2(v40);
          v38.i8[14] = BYTE4(v40);
          v38.i8[15] = BYTE6(v40);
          v58.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v58.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          if ((vmaxvq_u8(vcgtq_u8(v38, v58)) & 1) != 0)
            goto LABEL_73;
          goto LABEL_8;
        case 3:
        case 5:
          v41.i32[0] = v38.u16[1];
          v41.i32[1] = v38.u16[0];
          v42 = vcgt_u32((uint32x2_t)0x800000008, (uint32x2_t)vand_s8(v41, (int8x8_t)0xFF000000FFLL));
          v43 = v39.i8[0];
          v39.i8[0] = v34;
          v39.i8[1] = v43;
          v39.i8[3] = v39.i8[4];
          v39.i8[4] = v39.i8[6];
          v39.i8[5] = v35;
          v39.i8[6] = v36;
          v39.i8[7] = v37;
          v44 = vcgt_u8(v39, (uint8x8_t)0x707070707070707);
          v44.i8[0] = vmaxv_u8(v44);
          v45 = vcgt_u16((uint16x4_t)(v40 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x7000700070007);
          v45.i16[0] = vmaxv_u16(v45);
          if ((~v44.i32[0] & ~v45.i32[0] & v42.i32[0] & v42.i32[1] & 1) == 0
            || (v38.i8[4] | v38.i8[6]) >= 8u)
          {
            goto LABEL_73;
          }
          goto LABEL_8;
        case 4:
        case 6:
          v47.i32[0] = v38.u16[1];
          v47.i32[1] = v38.u16[0];
          v48 = vcgt_u32((uint32x2_t)0x400000004, (uint32x2_t)vand_s8(v47, (int8x8_t)0xFF000000FFLL));
          v49 = v39.i8[0];
          v39.i8[0] = v34;
          v39.i8[1] = v49;
          v39.i8[3] = v39.i8[4];
          v39.i8[4] = v39.i8[6];
          v39.i8[5] = v35;
          v39.i8[6] = v36;
          v39.i8[7] = v37;
          v50 = vcgt_u8(v39, (uint8x8_t)0x303030303030303);
          v50.i8[0] = vmaxv_u8(v50);
          v51 = vcgt_u16((uint16x4_t)(v40 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x3000300030003);
          v51.i16[0] = vmaxv_u16(v51);
          if ((~v50.i32[0] & ~v51.i32[0] & v48.i32[0] & v48.i32[1] & 1) != 0
            && (v38.i8[4] | v38.i8[6]) < 4u)
          {
            goto LABEL_8;
          }
LABEL_73:
          JSC::Wasm::ParserBase::fail<>(a2, &v60);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198D4FC9CLL);
      }
      goto LABEL_40;
    case 65:
      v22 = 16;
      switch(v8)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198D4F66CLL);
        case 1:
          goto LABEL_62;
        case 2:
          goto LABEL_61;
        case 3:
        case 5:
          goto LABEL_32;
        case 4:
        case 6:
          goto LABEL_55;
        default:
          __break(0xC471u);
          JUMPOUT(0x198D4FC3CLL);
      }
    case 66:
      v22 = 16;
      switch(v8)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198D4FC7CLL);
        case 1:
          break;
        case 2:
LABEL_61:
          v22 = 8;
          break;
        case 3:
        case 5:
LABEL_32:
          v22 = 4;
          break;
        case 4:
        case 6:
LABEL_55:
          v22 = 2;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198D4FC5CLL);
      }
LABEL_62:
      v46 = *a2;
      if (*a2 >= a2[2])
        goto LABEL_76;
      *a2 = v46 + 1;
      if (*(unsigned __int8 *)(a2[1] + v46) < v22)
        goto LABEL_8;
      v31 = a2;
      v32 = v22;
      goto LABEL_65;
    default:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", a2, 17, v9, &v60, *(float *)v15.i32);
      goto LABEL_40;
  }
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(uint64_t a1, _OWORD *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;

  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  if (v15 <= v11)
  {
LABEL_14:
    v19 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
    v20 = *a3;
    *(_OWORD *)v19 = *a2;
    *(_DWORD *)(v19 + 16) = v20;
    ++*(_DWORD *)(a1 + 12);
    return;
  }
  v16 = *(_QWORD *)a1;
  if (v15 < 0x11)
  {
    v18 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 16;
    goto LABEL_12;
  }
  if (v15 < 0xAAAAAAB)
  {
    v17 = 24 * v15;
    v18 = WTF::fastMalloc((WTF *)(24 * v15));
    *(_DWORD *)(a1 + 8) = (v17 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v18;
LABEL_12:
    if ((_DWORD)v12)
    {
      v21 = 24 * v12;
      v22 = v16;
      do
      {
        v23 = *(_OWORD *)v22;
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v22 + 16);
        *(_OWORD *)v18 = v23;
        v18 += 24;
        v22 += 24;
        v21 -= 24;
      }
      while (v21);
    }
    if (a1 + 16 != v16 && v16)
    {
      if (*(_QWORD *)a1 == v16)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_14;
  }
  __break(0xC471u);
}

void WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swap(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;

  v6 = *(_QWORD *)a1;
  v8 = a2 + 16;
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    if (v7 != v8)
    {
      *(_QWORD *)a1 = v7;
      *(_QWORD *)a2 = v6;
      goto LABEL_10;
    }
    *(_QWORD *)a2 = v6;
    *(_QWORD *)a1 = a1 + 16;
    a3 = 0;
    goto LABEL_22;
  }
  if (v7 != v8)
  {
    *(_QWORD *)a1 = v7;
    *(_QWORD *)a2 = v8;
    a4 = 0;
LABEL_22:
    WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swapInlineBuffer(a1, a2, a3, a4);
    goto LABEL_10;
  }
  if (a1 != a2)
  {
    if (a4 >= a3)
      v9 = a3;
    else
      v9 = a4;
    if (v9)
    {
      v13 = 0;
      v14 = 1;
      do
      {
        v15 = 3 * v13;
        v16 = (__int128 *)(v6 + 8 * v15);
        v17 = (__int128 *)(v7 + 8 * v15);
        v18 = *v16;
        v19 = *((_QWORD *)v16 + 2);
        v20 = *((_DWORD *)v17 + 4);
        *v16 = *v17;
        *((_DWORD *)v16 + 4) = v20;
        *((_DWORD *)v17 + 4) = v19;
        *v17 = v18;
        v13 = v14;
      }
      while (v9 > v14++);
    }
    v10 = (__int128 *)(v6 + 24 * v9);
    v11 = (__int128 *)(v7 + 24 * v9);
    if (a3 > a4)
    {
      v22 = 24 * a3 - 24 * v9;
      v23 = v11;
      v24 = v10;
      do
      {
        v25 = *v24;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
        *v23 = v25;
        v23 = (__int128 *)((char *)v23 + 24);
        v24 = (__int128 *)((char *)v24 + 24);
        v22 -= 24;
      }
      while (v22);
    }
    if (a4 > a3)
    {
      v26 = 24 * a4 - 24 * v9;
      do
      {
        v27 = *v11;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
        *v10 = v27;
        v10 = (__int128 *)((char *)v10 + 24);
        v11 = (__int128 *)((char *)v11 + 24);
        v26 -= 24;
      }
      while (v26);
    }
  }
LABEL_10:
  v12 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v12;
}

__n128 WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swapInlineBuffer(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  __n128 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 result;
  unint64_t v15;
  unsigned __int32 v16;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v4 = a1 + 16;
    v5 = a2 + 16;
    if (a4 >= a3)
      v6 = a3;
    else
      v6 = a4;
    if (v6)
    {
      v9 = 0;
      v10 = 1;
      do
      {
        v11 = 3 * v9;
        v12 = (__n128 *)(v4 + 8 * v11);
        v13 = (__n128 *)(v5 + 8 * v11);
        result = *v12;
        v15 = v12[1].n128_u64[0];
        v16 = v13[1].n128_u32[0];
        *v12 = *v13;
        v12[1].n128_u32[0] = v16;
        v13[1].n128_u32[0] = v15;
        *v13 = result;
        v9 = v10;
      }
      while (v6 > v10++);
    }
    v7 = (__n128 *)(v4 + 24 * v6);
    v8 = (__n128 *)(v5 + 24 * v6);
    if (a3 > a4)
    {
      v18 = 24 * a3 - 24 * v6;
      v19 = v8;
      v20 = v7;
      do
      {
        result = *v20;
        v19[1].n128_u64[0] = v20[1].n128_u64[0];
        *v19 = result;
        v19 = (__n128 *)((char *)v19 + 24);
        v20 = (__n128 *)((char *)v20 + 24);
        v18 -= 24;
      }
      while (v18);
    }
    if (a4 > a3)
    {
      v21 = 24 * a4 - 24 * v6;
      do
      {
        result = *v8;
        v7[1].n128_u64[0] = v8[1].n128_u64[0];
        *v7 = result;
        v7 = (__n128 *)((char *)v7 + 24);
        v8 = (__n128 *)((char *)v8 + 24);
        v21 -= 24;
      }
      while (v21);
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, JSC::Wasm::Type *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  double v39;
  float v40;
  WTF *v41;
  WTF::PrintStream *v42;
  float v43;
  double v44;
  const WTF::String *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  const WTF::String *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  float v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  char v125;
  void (**v126)(WTF::StringPrintStream *__hidden);
  WTF *v127;
  __int128 v128;
  _BYTE v129[128];
  void (**v130)(WTF::StringPrintStream *__hidden);
  WTF *v131;
  __int128 v132;
  _BYTE v133[128];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v126 = off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v123, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v123 = (WTF::StringImpl *)v16;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v122, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v24 = v131;
  if (!v131)
  {
    v122 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v122);
  v24 = v131;
  if (v131 != (WTF *)v133)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v121, a2, a4, v25, v26);
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v123, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v123 = (WTF::StringImpl *)v30;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v120, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v38 = v131;
  if (!v131)
  {
    v123 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v123);
  v38 = v131;
  if (v131 != (WTF *)v133)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v120, a2, a6, v39, v40);
  v41 = (WTF *)((uint64_t (*)(_QWORD))v126[4])(&v126);
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v41 + 32))(v41);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v130, v43);
  WTF::printExpectedCStringHelper(v42, "StringView", &v130);
  if ((_DWORD)v131 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v131])(&v125, &v130);
  v44 = (*(double (**)(WTF *))(*(_QWORD *)v41 + 40))(v41);
  WTF::printInternal(v41, (WTF::PrintStream *)&v122, v45, v46, v47, v48, v49, v50, v44, v51);
  WTF::printInternal(v41, (WTF::PrintStream *)&v121, v52, v53, v54, v55, v56, v57, v58, v59);
  WTF::printInternal(v41, (WTF::PrintStream *)&v123, v60, v61, v62, v63, v64, v65, v66, v67);
  WTF::printInternal(v41, (WTF::PrintStream *)&v120, v68, v69, v70, v71, v72, v73, v74, v75);
  v126[5]((WTF::StringPrintStream *)&v126);
  v83 = v120;
  v120 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = v123;
  v123 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v127;
  if (v127)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v130);
    v87 = v127;
    *a1 = v130;
    if (v87 == (WTF *)v129)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v87, v76, v77, v78, v79, v80, v81, v82);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative(uint64_t *a1, uint64_t a2, JSC::Wasm::Type *this, double a4, float a5)
{
  char v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  unint64_t v22;
  const char *v23;
  WTF::PrintStream *v24;
  JSC::Wasm::TypeDefinition *v25;
  int v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::PrintStream *v36;
  uint64_t v37;
  WTF::PrintStream *v38;
  float v39;
  uint64_t v40;
  WTF::PrintStream *v41;
  float v42;
  unsigned int *v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t CachedUnrolling;
  uint64_t v53;
  uint64_t v54;
  const JSC::Wasm::Type *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  const JSC::Wasm::TypeDefinition *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  void (**v69)(WTF::StringPrintStream *__hidden);
  WTF *v70;
  __int128 v71;
  _BYTE v72[128];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (BYTE1(dword_1ECF4C7B0))
    v7 = 29;
  else
    v7 = 17;
  if (BYTE1(dword_1ECF4C7B0))
    v8 = (v7 + *(_BYTE *)this) > 1u;
  else
    v8 = 1;
  if (v8)
  {
    v69 = off_1E3572250;
    v70 = (WTF *)v72;
    v71 = xmmword_199122F80;
    v72[0] = 0;
    JSC::Wasm::Type::dump((uint64_t)this, (WTF::PrintStream *)&v69);
    v69[5]((WTF::StringPrintStream *)&v69);
    v16 = v70;
    if (v70)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
      v16 = v70;
      if (v70 == (WTF *)v72)
        return;
LABEL_45:
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
LABEL_44:
    *a1 = 0;
    goto LABEL_45;
  }
  v69 = off_1E3572250;
  v70 = (WTF *)v72;
  v71 = xmmword_199122F80;
  v72[0] = 0;
  WTF::StringImpl::utf8ForCharacters("(ref ", 5uLL, (uint64_t)&v66, a5);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v69, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  v69[5]((WTF::StringPrintStream *)&v69);
  v69[5]((WTF::StringPrintStream *)&v69);
  v18 = *(unsigned __int8 *)this;
  if ((v18 - 239) < 2 || v18 == 227)
  {
    v19 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    WTF::StringImpl::utf8ForCharacters("null ", 5uLL, (uint64_t)&v66, v21);
    WTF::printExpectedCStringHelper(v20, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v69[5]((WTF::StringPrintStream *)&v69);
  }
  v22 = *((_QWORD *)this + 1);
  if (v22 < 0xFFFFFFFFFFFFFFC1)
  {
    v25 = (JSC::Wasm::TypeDefinition *)v22;
    if (*(_DWORD *)(v22 + 32) == 4)
    {
      v43 = *(unsigned int **)(v22 + 8);
      v44 = *(WTF **)v43;
      v25 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v43 + 8) + 8 * v43[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v25))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v45, v46, v47, v48, v49, v50, v51);
        if (v59)
        {
          v25 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v25 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v25, v44, v53, v54, v55, v56, v57, v58);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v25, v60, v61, v62, v63, v64, v65);
        }
      }
    }
    v26 = *((_DWORD *)v25 + 8);
    if (v26 == 5)
      v26 = *(_DWORD *)(**((_QWORD **)v25 + 1) + 32);
    if (v26 == 2)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<array:";
      v31 = 7;
    }
    else if (v26)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<struct:";
      v31 = 8;
    }
    else
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<func:";
      v31 = 6;
    }
    WTF::StringImpl::utf8ForCharacters(v30, v31, (uint64_t)&v66, v29);
    WTF::printExpectedCStringHelper(v28, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v69[5]((WTF::StringPrintStream *)&v69);
    v32 = *(_QWORD *)(a2 + 14704);
    v33 = *(unsigned int *)(v32 + 100);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = *(_QWORD *)(v32 + 88);
      while (*(_QWORD *)(v35 + 8 * v34) != v22)
      {
        if (v33 == ++v34)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_35:
      v34 = -1;
    }
    v36 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v36, "%lu", v34);
    v69[5]((WTF::StringPrintStream *)&v69);
    v37 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
    WTF::StringImpl::utf8ForCharacters(">", 1uLL, (uint64_t)&v66, v39);
    WTF::printExpectedCStringHelper(v38, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
  }
  else
  {
    if ((v22 + 22) >= 0xAu)
    {
      __break(0xC471u);
      return;
    }
    v23 = off_1E35B5AE8[(char)(v22 + 22)];
    v24 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v24, "%s", v23);
  }
  v69[5]((WTF::StringPrintStream *)&v69);
  v40 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
  v41 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v66, v42);
  WTF::printExpectedCStringHelper(v41, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  v69[5]((WTF::StringPrintStream *)&v69);
  v16 = v70;
  if (!v70)
    goto LABEL_44;
  WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
  v16 = v70;
  if (v70 != (WTF *)v72)
    goto LABEL_45;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, unint64_t *a3, _DWORD *a4, double a5, float a6)
{
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  char *v32;
  unint64_t *v33;
  uint64_t v34;
  void (**v35[2])(WTF::StringPrintStream *__hidden);
  void (**v36)(WTF::StringPrintStream *__hidden);
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  unsigned int v40;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_46;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v7 = 0;
        v40 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_37:
        v7 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_37;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_46;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
      goto LABEL_46;
LABEL_13:
    v7 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v7 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198D50EDCLL);
  }
LABEL_10:
  v7 = 2;
LABEL_15:
  v40 = v7;
LABEL_16:
  if (*(_DWORD *)(a3[1838] + 104) == -1)
  {
    v38 = "simd memory instructions need a memory defined in the module";
    v39 = 61;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v35, (uint64_t)&v38, a5, a6);
    v31 = v35[0];
  }
  else
  {
    v8 = a3[2];
    v9 = *a3;
    v10 = v8 - *a3;
    if (v8 <= *a3)
      goto LABEL_42;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = a3[1];
    v15 = 5;
    if (v10 < 5)
      v15 = v8 - *a3;
    v16 = v15 - 1;
    *a3 = v9 + 1;
    v17 = v14 + v9;
    while (1)
    {
      v18 = *(char *)(v17 + v11);
      v13 |= (v18 & 0x7F) << v12;
      if ((v18 & 0x80000000) == 0)
        break;
      if (v16 == v11)
        goto LABEL_42;
      v19 = v9 + v11 + 2;
      *a3 = v19;
      ++v11;
      v12 += 7;
      if (v10 == v11)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v37 = v13;
    if ((_DWORD)v11 == 4 && v18 >= 0x10u)
    {
LABEL_42:
      v32 = "can't get simd memory op alignment";
      v33 = a3;
      v34 = 35;
LABEL_45:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v33, v34, &v38, a6);
      v31 = (void (**)(WTF::StringPrintStream *__hidden))v38;
    }
    else
    {
      if (v8 <= v9 + v11 + 1)
        goto LABEL_44;
      v17 = 0;
      v20 = 0;
      v21 = 0;
      *a4 = 0;
      v22 = ~v11 + v10;
      v23 = 5;
      if (v22 < 5)
        v23 = v22;
      v24 = v9 + v11;
      *a3 = v9 + v11 + 2;
      v25 = v9 - v8;
      v26 = v14 + v9;
      v27 = v23 - 1;
      v28 = v25 + v11;
      while (1)
      {
        LODWORD(v19) = *(char *)(v26 + v17 + v11 + 1);
        v21 |= (v19 & 0x7F) << v20;
        *a4 = v21;
        if ((v19 & 0x80000000) == 0)
          break;
        if (v27 == v17)
          goto LABEL_44;
        v29 = v24 + v17;
        v30 = v28 + v17++;
        v19 = v29 + 3;
        *a3 = v19;
        v20 += 7;
        if (v30 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v17 == 4 && v19 >= 0x10u)
      {
LABEL_44:
        v32 = "can't get simd memory op offset";
        v33 = a3;
        v34 = 32;
        goto LABEL_45;
      }
      if (v13 <= v7)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v38 = "alignment: ";
      v39 = 12;
      v35[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
      v35[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v36, (uint64_t)&v38, &v37, (uint64_t)v35, &v40, a5, a6);
      v31 = v36;
    }
  }
  *(_QWORD *)a1 = v31;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::binaryCase(uint64_t a1, uint64_t a2, char a3, void (*a4)(const char **__return_ptr, _QWORD *, uint64_t, uint64_t, void (***)(WTF::StringPrintStream *__hidden this)), uint64_t a5, uint64_t a6, uint64_t a7, double a8, float a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  unsigned int v16;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v47;
  char v48;
  char v49;
  _QWORD *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t *v78;
  uint64_t v79;
  const char *v80;
  unsigned int v81;
  const char *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (**v89)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  char v92;
  __int128 v93;
  const char *v94;
  uint64_t v95;

  *(_QWORD *)&v93 = a6;
  *((_QWORD *)&v93 + 1) = a7;
  v92 = a3;
  v16 = *(_DWORD *)(a2 + 68);
  if (!v16)
  {
    v77 = "binary right";
    v78 = (unint64_t *)a2;
    v79 = 13;
LABEL_34:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v78, 26, v77, v79, &v94, a9);
    *(_QWORD *)a1 = v94;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56) + 24 * v16;
  v23 = *(_QWORD *)(v22 - 24);
  v86 = *(unsigned int *)(v22 - 8);
  v87 = *(_QWORD *)(v22 - 16);
  *(_DWORD *)(a2 + 68) = v16 - 1;
  v94 = "WasmFunctionParser.h:";
  LODWORD(v95) = 21;
  LODWORD(v89) = 522;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v94, (unsigned int *)&v89, (int **)&v91);
  v31 = v91;
  if (!v91)
    goto LABEL_52;
  v32 = *(_DWORD *)(v21 + 240);
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x198D51318);
  }
  *(_DWORD *)(v21 + 240) = v32 - 1;
  v91 = 0;
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  v33 = *(_DWORD *)(a2 + 68);
  if (!v33)
  {
    v77 = "binary left";
    v78 = (unint64_t *)a2;
    v79 = 12;
    goto LABEL_34;
  }
  v85 = a7;
  v88 = a1;
  v34 = *(_QWORD *)(a2 + 48);
  v35 = *(_QWORD *)(a2 + 56) + 24 * v33;
  v37 = *(_QWORD *)(v35 - 24);
  v36 = *(_QWORD *)(v35 - 16);
  v38 = *(unsigned int *)(v35 - 8);
  *(_DWORD *)(a2 + 68) = v33 - 1;
  v94 = "WasmFunctionParser.h:";
  LODWORD(v95) = 21;
  LODWORD(v89) = 523;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v94, (unsigned int *)&v89, (int **)&v90);
  v46 = v90;
  if (!v90)
  {
    __break(0xC471u);
    JUMPOUT(0x198D51320);
  }
  v47 = *(_DWORD *)(v34 + 240);
  if (!v47)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x198D51310);
  }
  *(_DWORD *)(v34 + 240) = v47 - 1;
  v90 = 0;
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
  }
  else
  {
    *(_DWORD *)v46 -= 2;
  }
  if (a11 != v37)
    goto LABEL_41;
  if (a11 - 239 < 2 || a11 == 227)
  {
    if (a12 == v36)
      v48 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v48 = 0;
    if ((v48 & 1) == 0)
      goto LABEL_41;
  }
  else
  {
    if (a12 == v36)
      v81 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v81 = 1;
    if (v81 == 1)
    {
LABEL_41:
      v82 = " left value type mismatch";
      v83 = 26;
LABEL_48:
      v94 = v82;
      v95 = v83;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v89, (uint64_t)&v92, (uint64_t)&v94);
      *(_QWORD *)v88 = v89;
      *(_BYTE *)(v88 + 8) = 1;
      return;
    }
  }
  if (a13 != v23)
  {
LABEL_47:
    v82 = " right value type mismatch";
    v83 = 27;
    goto LABEL_48;
  }
  if (a13 - 239 < 2 || a13 == 227)
  {
    if (a14 == v87)
      v49 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v49 = 0;
    if ((v49 & 1) == 0)
      goto LABEL_47;
  }
  else
  {
    if (a14 == v87)
      v84 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v84 = 1;
    if (v84 == 1)
      goto LABEL_47;
  }
  LODWORD(v89) = 0x3FFFFFFF;
  v50 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(const char **__return_ptr, _QWORD *, uint64_t, uint64_t, void (***)(WTF::StringPrintStream *__hidden)))(*v50 + a4);
  a4(&v94, v50, v38, v86, &v89);
  if ((_BYTE)v95)
  {
    v80 = v94;
    v94 = 0;
    *(_QWORD *)v88 = v80;
    *(_BYTE *)(v88 + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v94, v51, v52, v53, v54, v55, v56, v57);
  }
  else
  {
    v58 = *(_DWORD *)(a2 + 68);
    if (v58 == *(_DWORD *)(a2 + 64))
    {
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(a2 + 56, &v93, (int *)&v89, v53, v54, v55, v56, v57);
    }
    else
    {
      v59 = *(_QWORD *)(a2 + 56) + 24 * v58;
      v60 = (int)v89;
      *(_QWORD *)v59 = a6;
      *(_QWORD *)(v59 + 8) = v85;
      *(_DWORD *)(v59 + 16) = v60;
      ++*(_DWORD *)(a2 + 68);
    }
    *(_BYTE *)v88 = 0;
    *(_BYTE *)(v88 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::unaryCase(uint64_t a1, uint64_t a2, char a3, void (*a4)(const char **__return_ptr, _QWORD *, uint64_t, void (***)(WTF::StringPrintStream *__hidden this)), uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, float a10, unsigned __int8 a11, uint64_t a12)
{
  unsigned int v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  char v33;
  _QWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  unsigned int v54;
  void (**v55)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v56;
  char v57;
  __int128 v58;
  const char *v59;
  uint64_t v60;

  *(_QWORD *)&v58 = a6;
  *((_QWORD *)&v58 + 1) = a7;
  v57 = a3;
  v14 = *(_DWORD *)(a2 + 68);
  if (!v14)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, &v59, a10);
    *(_QWORD *)a1 = v59;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v19 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56) + 24 * v14;
  v22 = *(_QWORD *)(v20 - 24);
  v21 = *(_QWORD *)(v20 - 16);
  v23 = *(unsigned int *)(v20 - 8);
  *(_DWORD *)(a2 + 68) = v14 - 1;
  v59 = "WasmFunctionParser.h:";
  LODWORD(v60) = 21;
  LODWORD(v55) = 538;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v59, (unsigned int *)&v55, (int **)&v56);
  v31 = v56;
  if (!v56 || (v32 = *(_DWORD *)(v19 + 240)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5158CLL);
  }
  *(_DWORD *)(v19 + 240) = v32 - 1;
  v56 = 0;
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  if (a11 != v22)
    goto LABEL_27;
  if (a11 - 239 < 2 || a11 == 227)
  {
    if (a12 == v21)
      v33 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v33 = 0;
    if ((v33 & 1) == 0)
      goto LABEL_27;
  }
  else
  {
    if (a12 == v21)
      v54 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v54 = 1;
    if (v54 == 1)
    {
LABEL_27:
      v59 = " value type mismatch";
      v60 = 21;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v55, (uint64_t)&v57, (uint64_t)&v59);
      *(_QWORD *)a1 = v55;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
  }
  LODWORD(v55) = 0x3FFFFFFF;
  v34 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(const char **__return_ptr, _QWORD *, uint64_t, void (***)(WTF::StringPrintStream *__hidden)))(*v34 + a4);
  a4(&v59, v34, v23, &v55);
  if ((_BYTE)v60)
  {
    v53 = v59;
    v59 = 0;
    *(_QWORD *)a1 = v53;
    *(_BYTE *)(a1 + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v59, v35, v36, v37, v38, v39, v40, v41);
  }
  else
  {
    v42 = *(_DWORD *)(a2 + 68);
    if (v42 == *(_DWORD *)(a2 + 64))
    {
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(a2 + 56, &v58, (int *)&v55, v37, v38, v39, v40, v41);
    }
    else
    {
      v43 = *(_QWORD *)(a2 + 56) + 24 * v42;
      v44 = (int)v55;
      *(_QWORD *)v43 = a6;
      *(_QWORD *)(v43 + 8) = a7;
      *(_DWORD *)(v43 + 16) = v44;
      ++*(_DWORD *)(a2 + 68);
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, double a5, float a6)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  double v21;
  float v22;
  WTF *v23;
  WTF::PrintStream *v24;
  float v25;
  double v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  const WTF::String *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  char v71;
  void (**v72)(WTF::StringPrintStream *__hidden);
  WTF *v73;
  __int128 v74;
  _BYTE v75[128];
  void (**v76)(WTF::StringPrintStream *__hidden);
  WTF *v77;
  __int128 v78;
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v72 = off_1E3572250;
  v73 = (WTF *)v75;
  v74 = xmmword_199122F80;
  v75[0] = 0;
  v76 = off_1E3572250;
  v77 = (WTF *)v79;
  v78 = xmmword_199122F80;
  v79[0] = 0;
  if (*(_QWORD *)a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (!v10)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v11, (uint64_t)&v69, a6);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v69 = (WTF::StringImpl *)v12;
    v70 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v76, "StringView", &v69);
  if (v70 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v70])(&v68, &v69);
  v76[5]((WTF::StringPrintStream *)&v76);
  v76[5]((WTF::StringPrintStream *)&v76);
  v20 = v77;
  if (!v77)
  {
    v69 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v77, v78, (uint64_t *)&v69);
  v20 = v77;
  if (v77 != (WTF *)v79)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v68, a2, a4, v21, v22);
  v23 = (WTF *)((uint64_t (*)(_QWORD))v72[4])(&v72);
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v23 + 32))(v23);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v76, v25);
  WTF::printExpectedCStringHelper(v24, "StringView", &v76);
  if ((_DWORD)v77 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v77])(&v71, &v76);
  v26 = (*(double (**)(WTF *))(*(_QWORD *)v23 + 40))(v23);
  WTF::printInternal(v23, (WTF::PrintStream *)&v69, v27, v28, v29, v30, v31, v32, v26, v33);
  WTF::printInternal(v23, (WTF::PrintStream *)&v68, v34, v35, v36, v37, v38, v39, v40, v41);
  v72[5]((WTF::StringPrintStream *)&v72);
  v49 = v68;
  v68 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v69;
  v69 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = v73;
  if (v73)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v73, v74, (uint64_t *)&v76);
    v51 = v73;
    *a1 = v76;
    if (v51 == (WTF *)v75)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v51, v42, v43, v44, v45, v46, v47, v48);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::load(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  int v42;
  unsigned int v43;
  _BOOL4 v44;
  _BOOL4 v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  _BOOL4 v66;
  _BOOL4 v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  _BOOL4 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  unsigned int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int16 v89;
  unsigned __int16 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  _BOOL4 v99;
  _BOOL4 v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  int v111;
  _BOOL4 v112;
  _BOOL4 v113;
  int v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char v121;
  float v122;
  void (**v123)(WTF::StringPrintStream *__hidden);
  char *v124;
  char *v125;
  unint64_t *v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  void (**v129)(WTF::StringPrintStream *__hidden);
  __int128 v130;
  const char *v131;
  uint64_t v132;

  *(_QWORD *)&v130 = a3;
  *((_QWORD *)&v130 + 1) = a4;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14704) + 104) == -1)
  {
    v131 = "load instruction without memory";
    v132 = 32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v129, (uint64_t)&v131, a9, a10);
LABEL_162:
    v123 = v129;
LABEL_163:
    *(_QWORD *)a1 = v123;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v17 = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)a2;
  v19 = v17 - *(_QWORD *)a2;
  if (v17 <= *(_QWORD *)a2)
  {
LABEL_172:
    v125 = "can't get load alignment";
    v126 = (unint64_t *)a2;
    v127 = 25;
LABEL_173:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v125, v126, v127, &v131, a10);
LABEL_160:
    v123 = (void (**)(WTF::StringPrintStream *__hidden))v131;
    goto LABEL_163;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v18 + 1;
  do
  {
    v26 = *(char *)(v25 + v18 + v22);
    v24 |= (v26 & 0x7F) << v23;
    if ((v26 & 0x80000000) == 0)
    {
      if ((_DWORD)v22 == 4 && *(unsigned __int8 *)(v25 + v18 + v22) >= 0x10u)
        goto LABEL_172;
      v10 = (unsigned __int8 *)(a2 + 14736);
      v27 = *(unsigned __int8 *)(a2 + 14736);
      if ((v27 - 40) >= 0x17)
      {
        __break(0xC471u);
        JUMPOUT(0x198D52538);
      }
      if (v24 > dword_19915A4D8[(char)(v27 - 40)])
      {
        v120 = 1 << v24;
        v121 = JSC::Wasm::memoryLog2Alignment(v27);
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, v120, " exceeds load's natural alignment ", 35, 1 << v121, &v131, v122);
        *(_QWORD *)a1 = v131;
        *(_BYTE *)(a1 + 8) = 1;
        return;
      }
      if (v17 <= v18 + v22 + 1)
        goto LABEL_175;
      v28 = 0;
      v29 = 0;
      LODWORD(v11) = 0;
      v30 = v18 + v22;
      *(_QWORD *)a2 = v18 + v22 + 2;
      v31 = v18 - v17 + v22;
      v32 = v25 + v18;
      v33 = ~v22 + v19;
      while (1)
      {
        v34 = *(char *)(v32 + v28 + v22 + 1);
        v11 = ((v34 & 0x7F) << v29) | v11;
        if ((v34 & 0x80000000) == 0)
          break;
        if (v33 >= 5)
          v107 = 5;
        else
          v107 = v33;
        if (v107 - 1 == v28)
          goto LABEL_175;
        v108 = v30 + v28;
        v109 = v31 + v28++;
        *(_QWORD *)a2 = v108 + 3;
        v29 += 7;
        if (v109 == -2)
          goto LABEL_127;
      }
      if ((_DWORD)v28 == 4 && *(unsigned __int8 *)(v32 + v28 + v22 + 1) >= 0x10u)
      {
LABEL_175:
        v125 = "can't get load offset";
        v126 = (unint64_t *)a2;
        v127 = 22;
        goto LABEL_173;
      }
      v35 = *(_DWORD *)(a2 + 68);
      if (!v35)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, &v131, a10);
        goto LABEL_160;
      }
      v36 = *(_QWORD *)(a2 + 48);
      v37 = *(_QWORD *)(a2 + 56) + 24 * v35;
      v38 = *(unsigned __int8 *)(v37 - 24);
      v13 = *(unsigned int *)(v37 - 8);
      *(_DWORD *)(a2 + 68) = v35 - 1;
      v131 = "WasmFunctionParser.h:";
      LODWORD(v132) = 21;
      LODWORD(v129) = 559;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v131, (unsigned int *)&v129, (int **)&v128);
      v40 = v128;
      if (!v128)
      {
        __break(0xC471u);
        JUMPOUT(0x198D5259CLL);
      }
      v41 = *(_DWORD *)(v36 + 240);
      if (!v41)
      {
        __break(0xC471u);
        JUMPOUT(0x198D525A4);
      }
      *(_DWORD *)(v36 + 240) = v41 - 1;
      v128 = 0;
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v39, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
      if (v38 != 255)
      {
        v131 = " pointer type mismatch";
        v132 = 23;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v129, a2 + 14736, (uint64_t)&v131);
        goto LABEL_162;
      }
      v12 = *(_QWORD *)(a2 + 48);
      v14 = *(_DWORD *)(v12 + 240);
      if (v14 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198D525ACLL);
      }
      v42 = *v10;
      v43 = *(_DWORD *)(v12 + 244);
      if (v43 <= v14)
        v43 = v14 + 1;
      *(_DWORD *)(v12 + 240) = v14 + 1;
      *(_DWORD *)(v12 + 244) = v43;
      LODWORD(v10) = ~v14;
      LODWORD(v129) = ~v14;
      if (v42 == 40)
      {
LABEL_22:
        v44 = (v14 + 1073741936) < 0x80;
        if (v14 >= -1073741824)
          v44 = (v14 + 16) < 0x90;
        if (v44)
        {
          v45 = (v13 - 1073741808) < 0x80;
          if ((int)v13 <= 0x3FFFFFFF)
            v45 = (v13 + 128) < 0x90;
          if (v11 <= 0xFF && v45)
          {
            v46 = *(_DWORD *)(v12 + 16);
            v131 = (const char *)v12;
            LODWORD(v132) = v46;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v12 + 40), &v131, a3, a4, a5, a6, a7, a8);
            v47 = -77;
            *(_DWORD *)(v12 + 36) = 179;
            LOBYTE(v131) = -77;
            v48 = *(unsigned int *)(v12 + 12);
            v49 = *(unsigned int *)(v12 + 16);
            if (v48 <= v49)
            {
              if ((_DWORD)v48 != *(_DWORD *)(v12 + 8))
              {
                v50 = *(_QWORD *)v12;
                v51 = -77;
                goto LABEL_32;
              }
              goto LABEL_145;
            }
            goto LABEL_176;
          }
        }
        if (v14 >= -1073741824)
          v77 = (v14 + 64) >> 6 < 0x201;
        else
          v77 = (v14 + 1073774528) < 0x8000;
        if (!v77)
          goto LABEL_165;
        v78 = (v13 - 1073741760) < 0x8000;
        if ((int)v13 <= 0x3FFFFFFF)
          v78 = (v13 + 0x8000) >> 6 < 0x201;
        if (WORD1(v11) || !v78)
        {
LABEL_165:
          JSC::WasmLoad32U::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v14, v13, v11, a5, a6, a7, a8);
          goto LABEL_50;
        }
        v79 = *(_DWORD *)(v12 + 16);
        v131 = (const char *)v12;
        LODWORD(v132) = v79;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v12 + 40), &v131, a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 179;
        LOBYTE(v131) = -115;
        v80 = *(unsigned int *)(v12 + 12);
        v81 = *(unsigned int *)(v12 + 16);
        if (v80 > v81)
        {
          *(_DWORD *)(v12 + 16) = v81 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v81) = -115;
          v84 = *(_DWORD *)(v12 + 12);
          v85 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v80 == *(_DWORD *)(v12 + 8))
          {
            v118 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v80 + 1), (unint64_t)&v131);
            v80 = *(unsigned int *)(v12 + 12);
            v82 = *(_QWORD *)v12;
            v83 = *v118;
          }
          else
          {
            v82 = *(_QWORD *)v12;
            v83 = -115;
          }
          *(_BYTE *)(v82 + v80) = v83;
          v84 = *(_DWORD *)(v12 + 12) + 1;
          v85 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v84;
          *(_DWORD *)(v12 + 16) = v85;
        }
        v86 = -77;
      }
      else
      {
        switch(v42)
        {
          case ')':
          case '+':
            v112 = (v14 + 1073741936) < 0x80;
            if (v14 >= -1073741824)
              v112 = (v14 + 16) < 0x90;
            if (!v112)
              goto LABEL_150;
            v113 = (v13 - 1073741808) < 0x80;
            if ((int)v13 <= 0x3FFFFFFF)
              v113 = (v13 + 128) < 0x90;
            if (v11 > 0xFF || !v113)
            {
LABEL_150:
              if ((JSC::WasmLoad64U::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)v12, ~v14, v13, v11, a5, a6, a7, a8) & 1) == 0)JSC::WasmLoad64U::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v14, v13, v11, a5, a6, a7, a8);
              goto LABEL_50;
            }
            v114 = *(_DWORD *)(v12 + 16);
            v131 = (const char *)v12;
            LODWORD(v132) = v114;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v12 + 40), &v131, a3, a4, a5, a6, a7, a8);
            v47 = -76;
            *(_DWORD *)(v12 + 36) = 180;
            LOBYTE(v131) = -76;
            v48 = *(unsigned int *)(v12 + 12);
            v49 = *(unsigned int *)(v12 + 16);
            if (v48 > v49)
              goto LABEL_176;
            if ((_DWORD)v48 != *(_DWORD *)(v12 + 8))
            {
              v50 = *(_QWORD *)v12;
              v51 = -76;
              goto LABEL_32;
            }
            goto LABEL_145;
          case '*':
          case '5':
            goto LABEL_22;
          case ',':
            v66 = (v14 + 1073741936) < 0x80;
            if (v14 >= -1073741824)
              v66 = (v14 + 16) < 0x90;
            if (v66)
            {
              v67 = (v13 - 1073741808) < 0x80;
              if ((int)v13 <= 0x3FFFFFFF)
                v67 = (v13 + 128) < 0x90;
              if (v11 <= 0xFF && v67)
              {
                v68 = *(_DWORD *)(v12 + 16);
                v131 = (const char *)v12;
                LODWORD(v132) = v68;
                JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v12 + 40), &v131, a3, a4, a5, a6, a7, a8);
                v47 = -75;
                *(_DWORD *)(v12 + 36) = 181;
                LOBYTE(v131) = -75;
                v48 = *(unsigned int *)(v12 + 12);
                v49 = *(unsigned int *)(v12 + 16);
                if (v48 > v49)
                  goto LABEL_176;
                if ((_DWORD)v48 != *(_DWORD *)(v12 + 8))
                {
                  v50 = *(_QWORD *)v12;
                  v51 = -75;
                  goto LABEL_32;
                }
                goto LABEL_145;
              }
            }
            if (v14 >= -1073741824)
              v99 = (v14 + 64) >> 6 < 0x201;
            else
              v99 = (v14 + 1073774528) < 0x8000;
            if (!v99)
              goto LABEL_169;
            v100 = (v13 - 1073741760) < 0x8000;
            if ((int)v13 <= 0x3FFFFFFF)
              v100 = (v13 + 0x8000) >> 6 < 0x201;
            if (WORD1(v11) || !v100)
            {
LABEL_169:
              JSC::WasmI32Load8S::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v14, v13, v11, a5, a6, a7, a8);
              goto LABEL_50;
            }
            v101 = *(_DWORD *)(v12 + 16);
            v131 = (const char *)v12;
            LODWORD(v132) = v101;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v12 + 40), &v131, a3, a4, a5, a6, a7, a8);
            *(_DWORD *)(v12 + 36) = 181;
            LOBYTE(v131) = -115;
            v102 = *(unsigned int *)(v12 + 12);
            v103 = *(unsigned int *)(v12 + 16);
            if (v102 > v103)
            {
              *(_DWORD *)(v12 + 16) = v103 + 1;
              *(_BYTE *)(*(_QWORD *)v12 + v103) = -115;
              v84 = *(_DWORD *)(v12 + 12);
              v85 = *(_DWORD *)(v12 + 16);
            }
            else
            {
              if ((_DWORD)v102 == *(_DWORD *)(v12 + 8))
              {
                v124 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v102 + 1), (unint64_t)&v131);
                v102 = *(unsigned int *)(v12 + 12);
                v104 = *(_QWORD *)v12;
                v105 = *v124;
              }
              else
              {
                v104 = *(_QWORD *)v12;
                v105 = -115;
              }
              *(_BYTE *)(v104 + v102) = v105;
              v84 = *(_DWORD *)(v12 + 12) + 1;
              v85 = *(_DWORD *)(v12 + 16) + 1;
              *(_DWORD *)(v12 + 12) = v84;
              *(_DWORD *)(v12 + 16) = v85;
            }
            v86 = -75;
            break;
          case '-':
          case '1':
            v91 = (v14 + 1073741936) < 0x80;
            LODWORD(v22) = -1073741824;
            if (v14 >= -1073741824)
              v91 = (v14 + 16) < 0x90;
            if (!v91)
              goto LABEL_90;
            goto LABEL_128;
          case '.':
            JSC::WasmI32Load16S::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>((_DWORD *)v12, ~v14, v13, v11, a5, a6, a7, a8);
            goto LABEL_50;
          case '/':
          case '3':
            JSC::WasmLoad16U::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>((_DWORD *)v12, ~v14, v13, v11, a5, a6, a7, a8);
            goto LABEL_50;
          case '0':
            JSC::WasmI64Load8S::emit<JSC::Wasm::LLIntGenerator>(v12, ~v14, v13, v11, a5, a6, a7, a8);
            goto LABEL_50;
          case '2':
            JSC::WasmI64Load16S::emit<JSC::Wasm::LLIntGenerator>(v12, ~v14, v13, v11, a5, a6, a7, a8);
            goto LABEL_50;
          case '4':
            JSC::WasmI64Load32S::emit<JSC::Wasm::LLIntGenerator>(v12, ~v14, v13, v11, a5, a6, a7, a8);
            goto LABEL_50;
          default:
            goto LABEL_50;
        }
      }
      goto LABEL_78;
    }
    if (v19 >= 5)
      v106 = 5;
    else
      v106 = v19;
    if (v106 - 1 == v22)
      goto LABEL_172;
    *(_QWORD *)a2 = v18 + v22++ + 2;
    v23 += 7;
  }
  while (v19 != v22);
LABEL_127:
  __break(1u);
LABEL_128:
  v110 = (v13 - 1073741808) < 0x80;
  if ((int)v13 <= 0x3FFFFFFF)
    v110 = (v13 + 128) < 0x90;
  if (v11 <= 0xFF && v110)
  {
    v111 = *(_DWORD *)(v12 + 16);
    v131 = (const char *)v12;
    LODWORD(v132) = v111;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v12 + 40), &v131, a3, a4, a5, a6, a7, a8);
    v47 = -79;
    *(_DWORD *)(v12 + 36) = 177;
    LOBYTE(v131) = -79;
    v48 = *(unsigned int *)(v12 + 12);
    v49 = *(unsigned int *)(v12 + 16);
    if (v48 <= v49)
    {
      if ((_DWORD)v48 != *(_DWORD *)(v12 + 8))
      {
        v50 = *(_QWORD *)v12;
        v51 = -79;
LABEL_32:
        *(_BYTE *)(v50 + v48) = v51;
LABEL_33:
        v52 = *(_DWORD *)(v12 + 12) + 1;
        v53 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v52;
        *(_DWORD *)(v12 + 16) = v53;
LABEL_34:
        v54 = 15 - v14;
        if (v14 >= -1073741824)
          v54 = (char)v10;
        LOBYTE(v131) = v54;
        if (v52 > v53)
        {
          *(_DWORD *)(v12 + 16) = v53 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v53) = v54;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          v55 = v52;
          if (v52 == *(_DWORD *)(v12 + 8))
          {
            v115 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v52 + 1), (unint64_t)&v131);
            v55 = *(unsigned int *)(v12 + 12);
            v56 = *(_QWORD *)v12;
            v54 = *v115;
          }
          else
          {
            v56 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v56 + v55) = v54;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = v13 + 16;
        if ((int)v13 <= 0x3FFFFFFF)
          v59 = v13;
        LOBYTE(v131) = v59;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = v59;
          v62 = *(_DWORD *)(v12 + 12);
          v63 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v116 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v131);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v116;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          v62 = *(_DWORD *)(v12 + 12) + 1;
          v63 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v62;
          *(_DWORD *)(v12 + 16) = v63;
        }
        LOBYTE(v131) = v11;
        if (v62 > v63)
        {
          *(_DWORD *)(v12 + 16) = v63 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v63) = v11;
        }
        else
        {
          if (v62 == *(_DWORD *)(v12 + 8))
            *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v62 + 1), (unint64_t)&v131);
          else
            *(_BYTE *)(*(_QWORD *)v12 + v62) = v11;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        goto LABEL_50;
      }
LABEL_145:
      *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v48 + 1), (unint64_t)&v131);
      goto LABEL_33;
    }
LABEL_176:
    *(_DWORD *)(v12 + 16) = v49 + 1;
    *(_BYTE *)(*(_QWORD *)v12 + v49) = v47;
    v52 = *(_DWORD *)(v12 + 12);
    v53 = *(_DWORD *)(v12 + 16);
    goto LABEL_34;
  }
LABEL_90:
  if (v14 >= (int)v22)
    v92 = (v14 + 64) >> 6 < 0x201;
  else
    v92 = (v14 + 1073774528) < 0x8000;
  if (!v92)
    goto LABEL_170;
  v93 = (v13 - 1073741760) < 0x8000;
  if ((int)v13 <= 0x3FFFFFFF)
    v93 = (v13 + 0x8000) >> 6 < 0x201;
  if (WORD1(v11) || !v93)
  {
LABEL_170:
    JSC::WasmLoad8U::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, v10, v13, v11, a5, a6, a7, a8);
    goto LABEL_50;
  }
  v94 = *(_DWORD *)(v12 + 16);
  v131 = (const char *)v12;
  LODWORD(v132) = v94;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v12 + 40), &v131, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(v12 + 36) = 177;
  LOBYTE(v131) = -115;
  v95 = *(unsigned int *)(v12 + 12);
  v96 = *(unsigned int *)(v12 + 16);
  if (v95 > v96)
  {
    *(_DWORD *)(v12 + 16) = v96 + 1;
    *(_BYTE *)(*(_QWORD *)v12 + v96) = -115;
    v84 = *(_DWORD *)(v12 + 12);
    v85 = *(_DWORD *)(v12 + 16);
  }
  else
  {
    if ((_DWORD)v95 == *(_DWORD *)(v12 + 8))
    {
      v119 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v95 + 1), (unint64_t)&v131);
      v95 = *(unsigned int *)(v12 + 12);
      v97 = *(_QWORD *)v12;
      v98 = *v119;
    }
    else
    {
      v97 = *(_QWORD *)v12;
      v98 = -115;
    }
    *(_BYTE *)(v97 + v95) = v98;
    v84 = *(_DWORD *)(v12 + 12) + 1;
    v85 = *(_DWORD *)(v12 + 16) + 1;
    *(_DWORD *)(v12 + 12) = v84;
    *(_DWORD *)(v12 + 16) = v85;
  }
  v86 = -79;
LABEL_78:
  LOBYTE(v131) = v86;
  if (v84 > v85)
  {
    *(_DWORD *)(v12 + 16) = v85 + 1;
    *(_BYTE *)(*(_QWORD *)v12 + v85) = v86;
  }
  else
  {
    v87 = v84;
    if (v84 == *(_DWORD *)(v12 + 8))
    {
      v117 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v84 + 1), (unint64_t)&v131);
      v87 = *(unsigned int *)(v12 + 12);
      v88 = *(_QWORD *)v12;
      v86 = *v117;
    }
    else
    {
      v88 = *(_QWORD *)v12;
    }
    *(_BYTE *)(v88 + v87) = v86;
    *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
  }
  v89 = 63 - v14;
  if (v14 >= -1073741824)
    v89 = (unsigned __int16)v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v89);
  v90 = v13 + 64;
  if ((int)v13 <= 0x3FFFFFFF)
    v90 = v13;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v90);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, (unsigned __int16)v11);
LABEL_50:
  v64 = *(_DWORD *)(a2 + 68);
  if (v64 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(a2 + 56, &v130, (int *)&v129, a4, a5, a6, a7, a8);
  }
  else
  {
    v65 = *(_QWORD *)(a2 + 56) + 24 * v64;
    *(_QWORD *)v65 = a3;
    *(_QWORD *)(v65 + 8) = a4;
    *(_DWORD *)(v65 + 16) = (_DWORD)v10;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::store(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v10;
  signed int v11;
  _BYTE *v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  char v55;
  _BOOL4 v56;
  _BOOL4 v57;
  int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  _BOOL4 v76;
  _BOOL4 v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unsigned int v83;
  unsigned int v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned __int16 v88;
  unsigned __int16 v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BOOL4 v106;
  _BOOL4 v107;
  int v108;
  _BOOL4 v109;
  _BOOL4 v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BOOL4 v116;
  _BOOL4 v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  char *v123;
  char *v124;
  _BOOL4 v125;
  _BOOL4 v126;
  int v127;
  char *v128;
  char *v129;
  void (**v130)(WTF::StringPrintStream *__hidden);
  uint64_t v131;
  char v132;
  float v133;
  char *v134;
  unint64_t *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  char *v139;
  unsigned int v140;
  char *v141;
  unint64_t *v142;
  uint64_t v143;
  signed int v144;
  _BYTE *v145;
  unsigned __int8 v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  void (**v149)(WTF::StringPrintStream *__hidden);
  const char *v150;
  uint64_t v151;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 14704) + 104) == -1)
  {
    v150 = "store instruction without memory";
    v151 = 33;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v149, (uint64_t)&v150, a9, a10);
    v130 = v149;
LABEL_151:
    *(_QWORD *)a1 = v130;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v14 = a2;
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)a2;
  v17 = v15 - *(_QWORD *)a2;
  if (v15 <= *(_QWORD *)a2)
    goto LABEL_165;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v16 + 1;
  while (1)
  {
    v23 = *(char *)(v22 + v16 + v19);
    v21 |= (v23 & 0x7F) << v20;
    if ((v23 & 0x80000000) == 0)
      break;
    if (v17 >= 5)
      v112 = 5;
    else
      v112 = v17;
    if (v112 - 1 == v19)
      goto LABEL_165;
    *(_QWORD *)a2 = v16 + v19++ + 2;
    v20 += 7;
    if (v17 == v19)
    {
LABEL_115:
      __break(1u);
LABEL_116:
      if (v11 <= (int)v17)
        v116 = (v11 + 0x8000) >> 6 < 0x201;
      else
        v116 = (v19 + v11 + 48) < 0x8000;
      if (v116)
      {
        v117 = (v19 + a1 + 48) < 0x8000;
        if ((int)a1 <= 0x3FFFFFFF)
          v117 = (a1 + 0x8000) >> 6 < 0x201;
        if (!WORD1(v10) && v117)
        {
          v118 = *(_DWORD *)(v14 + 16);
          v150 = (const char *)v14;
          LODWORD(v151) = v118;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v14 + 40), &v150, a3, a4, a5, a6, a7, a8);
          *(_DWORD *)(v14 + 36) = 186;
          LOBYTE(v150) = -115;
          v119 = *(unsigned int *)(v14 + 12);
          v120 = *(unsigned int *)(v14 + 16);
          if (v119 > v120)
          {
            *(_DWORD *)(v14 + 16) = v120 + 1;
            *(_BYTE *)(*(_QWORD *)v14 + v120) = -115;
            v83 = *(_DWORD *)(v14 + 12);
            v84 = *(_DWORD *)(v14 + 16);
          }
          else
          {
            if ((_DWORD)v119 == *(_DWORD *)(v14 + 8))
            {
              v139 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, (WTF *)(v119 + 1), (unint64_t)&v150);
              v119 = *(unsigned int *)(v14 + 12);
              v121 = *(_QWORD *)v14;
              v122 = *v139;
            }
            else
            {
              v121 = *(_QWORD *)v14;
              v122 = -115;
            }
            *(_BYTE *)(v121 + v119) = v122;
            v83 = *(_DWORD *)(v14 + 12) + 1;
            v84 = *(_DWORD *)(v14 + 16) + 1;
            *(_DWORD *)(v14 + 12) = v83;
            *(_DWORD *)(v14 + 16) = v84;
          }
          v85 = -70;
          goto LABEL_72;
        }
      }
      JSC::WasmStore8::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v14, v11, a1, v10, a5, a6, a7, a8);
LABEL_58:
      *v12 = 0;
      v12[8] = 0;
      return;
    }
  }
  if ((_DWORD)v19 == 4 && *(unsigned __int8 *)(v22 + v16 + v19) >= 0x10u)
  {
LABEL_165:
    v141 = "can't get store alignment";
    v142 = (unint64_t *)v14;
    v143 = 26;
LABEL_166:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v141, v142, v143, &v150, a10);
    goto LABEL_150;
  }
  v12 = (_BYTE *)(a2 + 14736);
  v24 = *(unsigned __int8 *)(a2 + 14736);
  if ((v24 - 40) >= 0x17)
  {
    __break(0xC471u);
    JUMPOUT(0x198D531E0);
  }
  if (v21 > dword_19915A4D8[(char)(v24 - 40)])
  {
    v131 = 1 << v21;
    v132 = JSC::Wasm::memoryLog2Alignment(v24);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)v14, 16, v131, " exceeds store's natural alignment ", 36, 1 << v132, &v150, v133);
    *(_QWORD *)a1 = v150;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  if (v15 <= v16 + v19 + 1)
    goto LABEL_168;
  v25 = 0;
  v26 = 0;
  LODWORD(v27) = 0;
  v28 = v16 + v19;
  *(_QWORD *)a2 = v16 + v19 + 2;
  v29 = v16 - v15 + v19;
  v30 = v22 + v16;
  v17 += ~v19;
  while (1)
  {
    v31 = *(char *)(v30 + v25 + v19 + 1);
    v27 = ((v31 & 0x7F) << v26) | v27;
    if ((v31 & 0x80000000) == 0)
      break;
    if (v17 >= 5)
      v113 = 5;
    else
      v113 = v17;
    if (v113 - 1 == v25)
      goto LABEL_168;
    v114 = v28 + v25;
    v115 = v29 + v25++;
    *(_QWORD *)a2 = v114 + 3;
    v26 += 7;
    if (v115 == -2)
      goto LABEL_115;
  }
  if ((_DWORD)v25 == 4 && *(unsigned __int8 *)(v30 + v25 + v19 + 1) >= 0x10u)
  {
LABEL_168:
    v141 = "can't get store offset";
    v142 = (unint64_t *)v14;
    v143 = 23;
    goto LABEL_166;
  }
  v32 = *(_DWORD *)(a2 + 68);
  if (!v32)
  {
    v134 = "store value";
    v135 = (unint64_t *)a2;
    v136 = 12;
LABEL_149:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v135, 26, v134, v136, &v150, a10);
LABEL_150:
    v130 = (void (**)(WTF::StringPrintStream *__hidden))v150;
    goto LABEL_151;
  }
  v146 = a3;
  v33 = *(_QWORD *)(a2 + 48);
  v34 = *(_QWORD *)(a2 + 56) + 24 * v32;
  v36 = *(_QWORD *)(v34 - 24);
  v35 = *(_QWORD *)(v34 - 16);
  v37 = *(unsigned int *)(v34 - 8);
  *(_DWORD *)(a2 + 68) = v32 - 1;
  v150 = "WasmFunctionParser.h:";
  LODWORD(v151) = 21;
  LODWORD(v149) = 581;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v150, (unsigned int *)&v149, (int **)&v148);
  v45 = v148;
  if (!v148)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5322CLL);
  }
  v46 = *(_DWORD *)(v33 + 240);
  if (!v46)
  {
    __break(0xC471u);
    JUMPOUT(0x198D53234);
  }
  *(_DWORD *)(v33 + 240) = v46 - 1;
  v148 = 0;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
    WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v47 = *(_DWORD *)(v14 + 68);
  if (!v47)
  {
    v134 = "store pointer";
    v135 = (unint64_t *)v14;
    v136 = 14;
    goto LABEL_149;
  }
  v145 = (_BYTE *)(v14 + 14736);
  v48 = v37;
  v10 = v27;
  v12 = (_BYTE *)a1;
  v49 = *(_QWORD *)(v14 + 48);
  v50 = *(_QWORD *)(v14 + 56) + 24 * v47;
  v51 = *(unsigned __int8 *)(v50 - 24);
  v144 = *(_DWORD *)(v50 - 8);
  *(_DWORD *)(v14 + 68) = v47 - 1;
  v150 = "WasmFunctionParser.h:";
  LODWORD(v151) = 21;
  LODWORD(v149) = 582;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v150, (unsigned int *)&v149, (int **)&v147);
  v53 = v147;
  if (!v147)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5323CLL);
  }
  v54 = *(_DWORD *)(v49 + 240);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x198D53244);
  }
  *(_DWORD *)(v49 + 240) = v54 - 1;
  v147 = 0;
  if (*(_DWORD *)v53 == 2)
  {
    WTF::StringImpl::~StringImpl(v53, v52, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
  }
  else
  {
    *(_DWORD *)v53 -= 2;
  }
  if (v51 == 255)
  {
    if (v146 == v36)
    {
      a1 = v48;
      if (v146 - 239 < 2 || v146 == 227)
      {
        if (a4 == v35)
          v55 = ((v146 + 29) < 0xEu) & (0x3001u >> (v146 + 29));
        else
          v55 = 0;
        if ((v55 & 1) == 0)
          goto LABEL_162;
      }
      else
      {
        if (a4 == v35)
          v140 = ((v146 + 29) < 0xEu) & (0x3001u >> (v146 + 29));
        else
          v140 = 1;
        if (v140 == 1)
          goto LABEL_162;
      }
      v14 = *(_QWORD *)(v14 + 48);
      v11 = v144;
      if (*v145 == 54)
      {
LABEL_30:
        v56 = (v144 - 1073741808) < 0x80;
        if (v144 <= 0x3FFFFFFF)
          v56 = (v144 + 128) < 0x90;
        if (!v56)
          goto LABEL_59;
        v57 = (a1 - 1073741808) < 0x80;
        if ((int)a1 <= 0x3FFFFFFF)
          v57 = (a1 + 128) < 0x90;
        if (v10 <= 0xFF && v57)
        {
          v58 = *(_DWORD *)(v14 + 16);
          v150 = (const char *)v14;
          LODWORD(v151) = v58;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v14 + 40), &v150, a3, a4, a5, a6, a7, a8);
          v59 = -68;
          *(_DWORD *)(v14 + 36) = 188;
          LOBYTE(v150) = -68;
          v60 = *(unsigned int *)(v14 + 12);
          v61 = *(unsigned int *)(v14 + 16);
          if (v60 > v61)
          {
LABEL_172:
            *(_DWORD *)(v14 + 16) = v61 + 1;
            *(_BYTE *)(*(_QWORD *)v14 + v61) = v59;
            v64 = *(_DWORD *)(v14 + 12);
            v65 = *(_DWORD *)(v14 + 16);
          }
          else
          {
            if ((_DWORD)v60 == *(_DWORD *)(v14 + 8))
            {
LABEL_129:
              *(_BYTE *)(*(_QWORD *)v14 + *(unsigned int *)(v14 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, (WTF *)(v60 + 1), (unint64_t)&v150);
            }
            else
            {
              v62 = *(_QWORD *)v14;
              v63 = -68;
LABEL_40:
              *(_BYTE *)(v62 + v60) = v63;
            }
            v64 = *(_DWORD *)(v14 + 12) + 1;
            v65 = *(_DWORD *)(v14 + 16) + 1;
            *(_DWORD *)(v14 + 12) = v64;
            *(_DWORD *)(v14 + 16) = v65;
          }
          v66 = v144 + 16;
          if (v144 <= 0x3FFFFFFF)
            v66 = v144;
          LOBYTE(v150) = v66;
          if (v64 > v65)
          {
            *(_DWORD *)(v14 + 16) = v65 + 1;
            *(_BYTE *)(*(_QWORD *)v14 + v65) = v66;
            v69 = *(_DWORD *)(v14 + 12);
            v70 = *(_DWORD *)(v14 + 16);
          }
          else
          {
            v67 = v64;
            if (v64 == *(_DWORD *)(v14 + 8))
            {
              v123 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, (WTF *)(v64 + 1), (unint64_t)&v150);
              v67 = *(unsigned int *)(v14 + 12);
              v68 = *(_QWORD *)v14;
              v66 = *v123;
            }
            else
            {
              v68 = *(_QWORD *)v14;
            }
            *(_BYTE *)(v68 + v67) = v66;
            v69 = *(_DWORD *)(v14 + 12) + 1;
            v70 = *(_DWORD *)(v14 + 16) + 1;
            *(_DWORD *)(v14 + 12) = v69;
            *(_DWORD *)(v14 + 16) = v70;
          }
          v71 = a1 + 16;
          if ((int)a1 <= 0x3FFFFFFF)
            v71 = a1;
          LOBYTE(v150) = v71;
          if (v69 > v70)
          {
            *(_DWORD *)(v14 + 16) = v70 + 1;
            *(_BYTE *)(*(_QWORD *)v14 + v70) = v71;
            v74 = *(_DWORD *)(v14 + 12);
            v75 = *(_DWORD *)(v14 + 16);
          }
          else
          {
            v72 = v69;
            if (v69 == *(_DWORD *)(v14 + 8))
            {
              v124 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, (WTF *)(v69 + 1), (unint64_t)&v150);
              v72 = *(unsigned int *)(v14 + 12);
              v73 = *(_QWORD *)v14;
              v71 = *v124;
            }
            else
            {
              v73 = *(_QWORD *)v14;
            }
            *(_BYTE *)(v73 + v72) = v71;
            v74 = *(_DWORD *)(v14 + 12) + 1;
            v75 = *(_DWORD *)(v14 + 16) + 1;
            *(_DWORD *)(v14 + 12) = v74;
            *(_DWORD *)(v14 + 16) = v75;
          }
          LOBYTE(v150) = v10;
          if (v74 > v75)
          {
            *(_DWORD *)(v14 + 16) = v75 + 1;
            *(_BYTE *)(*(_QWORD *)v14 + v75) = v10;
          }
          else
          {
            if (v74 == *(_DWORD *)(v14 + 8))
              *(_BYTE *)(*(_QWORD *)v14 + *(unsigned int *)(v14 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, (WTF *)(v74 + 1), (unint64_t)&v150);
            else
              *(_BYTE *)(*(_QWORD *)v14 + v74) = v10;
            *(int32x2_t *)(v14 + 12) = vadd_s32(*(int32x2_t *)(v14 + 12), (int32x2_t)0x100000001);
          }
        }
        else
        {
LABEL_59:
          if (v144 <= 0x3FFFFFFF)
            v76 = (v144 + 0x8000) >> 6 < 0x201;
          else
            v76 = (v144 - 1073741760) < 0x8000;
          if (!v76)
            goto LABEL_154;
          v77 = (a1 - 1073741760) < 0x8000;
          if ((int)a1 <= 0x3FFFFFFF)
            v77 = (a1 + 0x8000) >> 6 < 0x201;
          if (!WORD1(v10) && v77)
          {
            v78 = *(_DWORD *)(v14 + 16);
            v150 = (const char *)v14;
            LODWORD(v151) = v78;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v14 + 40), &v150, a3, a4, a5, a6, a7, a8);
            *(_DWORD *)(v14 + 36) = 188;
            LOBYTE(v150) = -115;
            v79 = *(unsigned int *)(v14 + 12);
            v80 = *(unsigned int *)(v14 + 16);
            if (v79 > v80)
            {
              *(_DWORD *)(v14 + 16) = v80 + 1;
              *(_BYTE *)(*(_QWORD *)v14 + v80) = -115;
              v83 = *(_DWORD *)(v14 + 12);
              v84 = *(_DWORD *)(v14 + 16);
            }
            else
            {
              if ((_DWORD)v79 == *(_DWORD *)(v14 + 8))
              {
                v129 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, (WTF *)(v79 + 1), (unint64_t)&v150);
                v79 = *(unsigned int *)(v14 + 12);
                v81 = *(_QWORD *)v14;
                v82 = *v129;
              }
              else
              {
                v81 = *(_QWORD *)v14;
                v82 = -115;
              }
              *(_BYTE *)(v81 + v79) = v82;
              v83 = *(_DWORD *)(v14 + 12) + 1;
              v84 = *(_DWORD *)(v14 + 16) + 1;
              *(_DWORD *)(v14 + 12) = v83;
              *(_DWORD *)(v14 + 16) = v84;
            }
            v85 = -68;
LABEL_72:
            LOBYTE(v150) = v85;
            if (v83 > v84)
            {
              *(_DWORD *)(v14 + 16) = v84 + 1;
              *(_BYTE *)(*(_QWORD *)v14 + v84) = v85;
            }
            else
            {
              v86 = v83;
              if (v83 == *(_DWORD *)(v14 + 8))
              {
                v128 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, (WTF *)(v83 + 1), (unint64_t)&v150);
                v86 = *(unsigned int *)(v14 + 12);
                v87 = *(_QWORD *)v14;
                v85 = *v128;
              }
              else
              {
                v87 = *(_QWORD *)v14;
              }
              *(_BYTE *)(v87 + v86) = v85;
              *(int32x2_t *)(v14 + 12) = vadd_s32(*(int32x2_t *)(v14 + 12), (int32x2_t)0x100000001);
            }
LABEL_76:
            v88 = v11 + 64;
            if (v11 <= 0x3FFFFFFF)
              v88 = v11;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v14, v88);
            v89 = a1 + 64;
            if ((int)a1 <= 0x3FFFFFFF)
              v89 = a1;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v14, v89);
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v14, (unsigned __int16)v10);
          }
          else
          {
LABEL_154:
            JSC::WasmStore32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v14, v144, a1, v10, a5, a6, a7, a8);
          }
        }
      }
      else
      {
        switch(*v145)
        {
          case '7':
          case '9':
            v109 = (v144 - 1073741808) < 0x80;
            if (v144 <= 0x3FFFFFFF)
              v109 = (v144 + 128) < 0x90;
            if (v109)
            {
              v110 = (a1 - 1073741808) < 0x80;
              if ((int)a1 <= 0x3FFFFFFF)
                v110 = (a1 + 128) < 0x90;
              if (v10 <= 0xFF && v110)
              {
                v111 = *(_DWORD *)(v14 + 16);
                v150 = (const char *)v14;
                LODWORD(v151) = v111;
                JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v14 + 40), &v150, a3, a4, a5, a6, a7, a8);
                v59 = -67;
                *(_DWORD *)(v14 + 36) = 189;
                LOBYTE(v150) = -67;
                v60 = *(unsigned int *)(v14 + 12);
                v61 = *(unsigned int *)(v14 + 16);
                if (v60 > v61)
                  goto LABEL_172;
                if ((_DWORD)v60 != *(_DWORD *)(v14 + 8))
                {
                  v62 = *(_QWORD *)v14;
                  v63 = -67;
                  goto LABEL_40;
                }
                goto LABEL_129;
              }
            }
            if (v144 <= 0x3FFFFFFF)
              v125 = (v144 + 0x8000) >> 6 < 0x201;
            else
              v125 = (v144 - 1073741760) < 0x8000;
            if (v125)
            {
              v126 = (a1 - 1073741760) < 0x8000;
              if ((int)a1 <= 0x3FFFFFFF)
                v126 = (a1 + 0x8000) >> 6 < 0x201;
              if (!WORD1(v10) && v126)
              {
                v127 = *(_DWORD *)(v14 + 16);
                v150 = (const char *)v14;
                LODWORD(v151) = v127;
                JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v14 + 40), &v150, a3, a4, a5, a6, a7, a8);
                *(_DWORD *)(v14 + 36) = 189;
                JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v14, 141);
                JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v14, 189);
                goto LABEL_76;
              }
            }
            JSC::WasmStore64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v14, v144, a1, v10, a5, a6, a7, a8);
            break;
          case '8':
          case '>':
            goto LABEL_30;
          case ':':
          case '<':
            LODWORD(v19) = -1073741808;
            v106 = (v144 - 1073741808) < 0x80;
            LODWORD(v17) = 0x3FFFFFFF;
            if (v144 <= 0x3FFFFFFF)
              v106 = (v144 + 128) < 0x90;
            if (!v106)
              goto LABEL_116;
            v107 = (a1 - 1073741808) < 0x80;
            if ((int)a1 <= 0x3FFFFFFF)
              v107 = (a1 + 128) < 0x90;
            if (v10 > 0xFF || !v107)
              goto LABEL_116;
            v108 = *(_DWORD *)(v14 + 16);
            v150 = (const char *)v14;
            LODWORD(v151) = v108;
            JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v14 + 40), &v150, a3, a4, a5, a6, a7, a8);
            v59 = -70;
            *(_DWORD *)(v14 + 36) = 186;
            LOBYTE(v150) = -70;
            v60 = *(unsigned int *)(v14 + 12);
            v61 = *(unsigned int *)(v14 + 16);
            if (v60 > v61)
              goto LABEL_172;
            if ((_DWORD)v60 == *(_DWORD *)(v14 + 8))
              goto LABEL_129;
            v62 = *(_QWORD *)v14;
            v63 = -70;
            goto LABEL_40;
          case ';':
          case '=':
            JSC::WasmStore16::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>((_DWORD *)v14, v144, a1, v10, a5, a6, a7, a8);
            goto LABEL_58;
          default:
            goto LABEL_58;
        }
      }
      goto LABEL_58;
    }
LABEL_162:
    v137 = " value type mismatch";
    v138 = 21;
    goto LABEL_163;
  }
  v137 = " pointer type mismatch";
  v138 = 23;
LABEL_163:
  v150 = v137;
  v151 = v138;
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v149, (uint64_t)v145, (uint64_t)&v150);
  *(_QWORD *)v12 = v149;
  v12[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, char *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  char *String;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::PrintStream *v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF::PrintStream *v56;
  float v57;
  double v58;
  const WTF::String *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  const WTF::String *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float v73;
  const WTF::String *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  float v81;
  const WTF::String *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  float v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  void (**v144)(WTF::StringPrintStream *__hidden);
  WTF *v145;
  __int128 v146;
  _BYTE v147[128];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v137, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v137 = (WTF::StringImpl *)v16;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v136, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v24 = v145;
  if (!v145)
  {
    v136 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v136);
  v24 = v145;
  if (v145 != (WTF *)v147)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v135, a2, a4, v25, v26);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v137, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v137 = (WTF::StringImpl *)v30;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v134, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v38 = v145;
  if (!v145)
  {
    v134 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v134);
  v38 = v145;
  if (v145 != (WTF *)v147)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a6);
  v41 = v40;
  v42 = ((uint64_t (*)(_QWORD))v144[4])(&v144);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
  if (String)
  {
    v45 = v41 - 1;
    if (!v41)
      v45 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v45, (uint64_t)&v137, v44);
  }
  else
  {
    v46 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    v137 = (WTF::StringImpl *)v46;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper(v43, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v139, &v137);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v54 = v145;
  if (!v145)
  {
    v137 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v137);
  v54 = v145;
  if (v145 != (WTF *)v147)
LABEL_36:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v55 = (WTF *)((uint64_t (*)(_QWORD))v140[4])(&v140);
  v56 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v55 + 32))(v55);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v144, v57);
  WTF::printExpectedCStringHelper(v56, "StringView", &v144);
  if ((_DWORD)v145 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v145])(&v139, &v144);
  v58 = (*(double (**)(WTF *))(*(_QWORD *)v55 + 40))(v55);
  WTF::printInternal(v55, (WTF::PrintStream *)&v136, v59, v60, v61, v62, v63, v64, v58, v65);
  WTF::printInternal(v55, (WTF::PrintStream *)&v135, v66, v67, v68, v69, v70, v71, v72, v73);
  WTF::printInternal(v55, (WTF::PrintStream *)&v134, v74, v75, v76, v77, v78, v79, v80, v81);
  WTF::printInternal(v55, (WTF::PrintStream *)&v137, v82, v83, v84, v85, v86, v87, v88, v89);
  v140[5]((WTF::StringPrintStream *)&v140);
  v97 = v137;
  v137 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v134;
  v134 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v135;
  v135 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v136;
  v136 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v141;
  if (v141)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v144);
    v101 = v141;
    *a1 = v144;
    if (v101 == (WTF *)v143)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v90, v91, v92, v93, v94, v95, v96);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [35],JSC::Wasm::Type,char [23],JSC::Wasm::Type,char [15]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  float v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  WTF::PrintStream *v37;
  float v38;
  double v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  const WTF::String *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  float v70;
  const WTF::String *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  float v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  char v137;
  void (**v138)(WTF::StringPrintStream *__hidden);
  WTF *v139;
  __int128 v140;
  _BYTE v141[128];
  void (**v142)(WTF::StringPrintStream *__hidden);
  unint64_t v143;
  __int128 v144;
  _BYTE v145[128];
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v138 = off_1E3572250;
  v139 = (WTF *)v141;
  v140 = xmmword_199122F80;
  v141[0] = 0;
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "table.init requires table's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v15 = v143;
  if (!v143)
  {
    v136 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v136);
  v15 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v135, a2, a3, v16, v17);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" and element's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v25 = v143;
  if (!v143)
  {
    v134 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v134);
  v25 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v133, a2, a4, v26, v27);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" are the same");
  v142[5]((WTF::StringPrintStream *)&v142);
  v35 = v143;
  if (!v143)
  {
    v132 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v132);
  v35 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_15:
    WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
  v36 = (WTF *)((uint64_t (*)(_QWORD))v138[4])(&v138);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v36 + 32))(v36);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v142, v38);
  WTF::printExpectedCStringHelper(v37, "StringView", &v142);
  if ((_DWORD)v143 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v143])(&v137, &v142);
  v39 = (*(double (**)(WTF *))(*(_QWORD *)v36 + 40))(v36);
  WTF::printInternal(v36, (WTF::PrintStream *)&v136, v40, v41, v42, v43, v44, v45, v39, v46);
  WTF::printInternal(v36, (WTF::PrintStream *)&v135, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v36, (WTF::PrintStream *)&v134, v55, v56, v57, v58, v59, v60, v61, v62);
  WTF::printInternal(v36, (WTF::PrintStream *)&v133, v63, v64, v65, v66, v67, v68, v69, v70);
  WTF::printInternal(v36, (WTF::PrintStream *)&v132, v71, v72, v73, v74, v75, v76, v77, v78);
  v138[5]((WTF::StringPrintStream *)&v138);
  v86 = v132;
  v132 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v133;
  v133 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v134;
  v134 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v135;
  v135 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = v136;
  v136 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = v139;
  if (v139)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v139, v140, (uint64_t *)&v142);
    v91 = v139;
    *a1 = v142;
    if (v91 == (WTF *)v141)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v91, v79, v80, v81, v82, v83, v84, v85);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [32],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, JSC::Wasm::Type *a4, char *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *String;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int v126;
  char v127;
  void (**v128)(WTF::StringPrintStream *__hidden);
  WTF *v129;
  __int128 v130;
  _BYTE v131[128];
  void (**v132)(WTF::StringPrintStream *__hidden);
  unint64_t v133;
  __int128 v134;
  _BYTE v135[128];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v128 = off_1E3572250;
  v129 = (WTF *)v131;
  v130 = xmmword_199122F80;
  v131[0] = 0;
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", a3);
  v132[5]((WTF::StringPrintStream *)&v132);
  v16 = v133;
  if (!v133)
  {
    v124 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v124);
  v16 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_5:
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v123, a2, a4, v17, v18);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", " expected ");
  v132[5]((WTF::StringPrintStream *)&v132);
  v26 = v133;
  if (!v133)
  {
    v122 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v122);
  v26 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_10:
    WTF::fastFree(v26, v19, v20, v21, v22, v23, v24, v25);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a5);
  v29 = v28;
  v30 = ((uint64_t (*)(_QWORD))v132[4])(&v132);
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
  if (String)
  {
    v33 = v29 - 1;
    if (!v29)
      v33 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v33, (uint64_t)&v125, v32);
  }
  else
  {
    v34 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v34 = 1;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 0;
    v125 = (WTF::StringImpl *)v34;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper(v31, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v127, &v125);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  v132[5]((WTF::StringPrintStream *)&v132);
  v132[5]((WTF::StringPrintStream *)&v132);
  v42 = v133;
  if (!v133)
  {
    v125 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v125);
  v42 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_22:
    WTF::fastFree(v42, v35, v36, v37, v38, v39, v40, v41);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v128[4])(&v128);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v132, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v132);
  if ((_DWORD)v133 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v133])(&v127, &v132);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v124, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v123, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v122, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v125, v70, v71, v72, v73, v74, v75, v76, v77);
  v128[5]((WTF::StringPrintStream *)&v128);
  v85 = v125;
  v125 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v129;
  if (v129)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v129, v130, (uint64_t *)&v132);
    v89 = v129;
    *a1 = v132;
    if (v89 == (WTF *)v131)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v89, v78, v79, v80, v81, v82, v83, v84);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "memory.init length to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::truncSaturated(_BYTE *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, float a9)
{
  unsigned int v11;
  unsigned __int8 v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  signed int v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  float v30;
  WTF::StringImpl *v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  _BOOL4 v59;
  int v60;
  _BOOL4 v61;
  _BOOL4 v62;
  int v63;
  _BOOL4 v64;
  _BOOL4 v65;
  int v66;
  _BOOL4 v67;
  _BOOL4 v68;
  int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  int v72;
  _BOOL4 v73;
  _BOOL4 v74;
  int v75;
  _BOOL4 v76;
  _BOOL4 v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  _BOOL4 v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  unsigned int v98;
  char v99;
  _BOOL4 v100;
  _BOOL4 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  _BOOL4 v107;
  _BOOL4 v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  _BOOL4 v114;
  _BOOL4 v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  _BOOL4 v121;
  _BOOL4 v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  _BOOL4 v128;
  _BOOL4 v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  _BOOL4 v135;
  _BOOL4 v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  _BOOL4 v142;
  _BOOL4 v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int16 v151;
  unsigned __int16 v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  unsigned int v158;
  unsigned int v159;
  char v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  unsigned int v221;
  _QWORD v223[2];
  _QWORD v224[2];
  void (**v225)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v226;
  _QWORD v227[2];
  __int128 v228;
  const char *v229;
  uint64_t v230;

  *(_QWORD *)&v228 = a4;
  *((_QWORD *)&v228 + 1) = a5;
  v227[0] = a6;
  v227[1] = a7;
  v11 = *(_DWORD *)(a2 + 68);
  if (!v11)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, &v229, a9);
    *(_QWORD *)a1 = v229;
    a1[8] = 1;
    return;
  }
  v13 = a6;
  v17 = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(a2 + 56) + 24 * v11;
  v20 = *(_QWORD *)(v18 - 24);
  v19 = *(_QWORD *)(v18 - 16);
  v21 = *(_DWORD *)(v18 - 8);
  *(_DWORD *)(a2 + 68) = v11 - 1;
  v229 = "WasmFunctionParser.h:";
  LODWORD(v230) = 21;
  LODWORD(v224[0]) = 595;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v229, (unsigned int *)v224, (int **)&v226);
  v31 = v226;
  if (!v226)
  {
    __break(0xC471u);
    JUMPOUT(0x198D55BB4);
  }
  v32 = *(_DWORD *)(v17 + 240);
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x198D55BBCLL);
  }
  *(_DWORD *)(v17 + 240) = v32 - 1;
  v226 = 0;
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  if (v13 != v20)
    goto LABEL_284;
  if (v13 - 239 < 2 || v13 == 227)
  {
    if (a7 == v19)
      v33 = ((v13 + 29) < 0xEu) & (0x3001u >> (v13 + 29));
    else
      v33 = 0;
    if ((v33 & 1) == 0)
      goto LABEL_284;
  }
  else
  {
    if (a7 == v19)
      v221 = ((v13 + 29) < 0xEu) & (0x3001u >> (v13 + 29));
    else
      v221 = 1;
    if (v221 == 1)
    {
LABEL_284:
      v229 = "trunc-saturated value type mismatch. Expected: ";
      v230 = 48;
      v224[0] = " but expression stack has ";
      v224[1] = 27;
      v223[0] = v20;
      v223[1] = v19;
      JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v225, a2, (uint64_t)&v229, (JSC::Wasm::Type *)v227, (uint64_t)v224, (JSC::Wasm::Type *)v223, v29, v30);
      *(_QWORD *)a1 = v225;
      a1[8] = 1;
      return;
    }
  }
  v34 = *(_QWORD *)(a2 + 48);
  v35 = *(_DWORD *)(v34 + 240);
  if (v35 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198D55BC4);
  }
  v36 = *(_DWORD *)(v34 + 244);
  if (v36 <= v35)
    v36 = v35 + 1;
  *(_DWORD *)(v34 + 240) = v35 + 1;
  *(_DWORD *)(v34 + 244) = v36;
  LODWORD(v224[0]) = ~v35;
  switch(a3)
  {
    case 0:
      v37 = (v35 + 1073741936) < 0x80;
      if (v35 >= -1073741824)
        v37 = (v35 + 16) < 0x90;
      if (v37)
      {
        v38 = (v21 - 1073741808) < 0x80;
        if (v21 <= 0x3FFFFFFF)
          v38 = (v21 + 128) < 0x90;
        if (v38)
        {
          v39 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v39;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          v45 = 0x80;
          *(_DWORD *)(v34 + 36) = 128;
          LOBYTE(v229) = 0x80;
          v46 = *(unsigned int *)(v34 + 12);
          v47 = *(unsigned int *)(v34 + 16);
          if (v46 > v47)
            goto LABEL_286;
          if ((_DWORD)v46 != *(_DWORD *)(v34 + 8))
          {
            v48 = *(_QWORD *)v34;
            v49 = 0x80;
            goto LABEL_89;
          }
          goto LABEL_258;
        }
      }
      if (v35 >= -1073741824)
        v121 = (v35 + 64) >> 6 < 0x201;
      else
        v121 = (v35 + 1073774528) < 0x8000;
      if (v121)
      {
        v122 = (v21 - 1073741760) < 0x8000;
        if (v21 <= 0x3FFFFFFF)
          v122 = (v21 + 0x8000) >> 6 < 0x201;
        if (v122)
        {
          v123 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v123;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          *(_DWORD *)(v34 + 36) = 128;
          LOBYTE(v229) = -115;
          v124 = *(unsigned int *)(v34 + 12);
          v125 = *(unsigned int *)(v34 + 16);
          if (v124 > v125)
          {
            *(_DWORD *)(v34 + 16) = v125 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v125) = -115;
            v97 = *(_DWORD *)(v34 + 12);
            v98 = *(_DWORD *)(v34 + 16);
          }
          else
          {
            if ((_DWORD)v124 == *(_DWORD *)(v34 + 8))
            {
              v217 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v124 + 1), (unint64_t)&v229);
              v124 = *(unsigned int *)(v34 + 12);
              v126 = *(_QWORD *)v34;
              v127 = *v217;
            }
            else
            {
              v126 = *(_QWORD *)v34;
              v127 = -115;
            }
            *(_BYTE *)(v126 + v124) = v127;
            v97 = *(_DWORD *)(v34 + 12) + 1;
            v98 = *(_DWORD *)(v34 + 16) + 1;
            *(_DWORD *)(v34 + 12) = v97;
            *(_DWORD *)(v34 + 16) = v98;
          }
          v99 = 0x80;
          goto LABEL_199;
        }
      }
      v176 = *(_DWORD *)(v34 + 16);
      v229 = (const char *)v34;
      LODWORD(v230) = v176;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
      *(_DWORD *)(v34 + 36) = 128;
      LOBYTE(v229) = -114;
      v177 = *(unsigned int *)(v34 + 12);
      v178 = *(unsigned int *)(v34 + 16);
      if (v177 > v178)
      {
        *(_DWORD *)(v34 + 16) = v178 + 1;
        *(_BYTE *)(*(_QWORD *)v34 + v178) = -114;
        v158 = *(_DWORD *)(v34 + 12);
        v159 = *(_DWORD *)(v34 + 16);
        v83 = a1;
      }
      else
      {
        v83 = a1;
        if ((_DWORD)v177 == *(_DWORD *)(v34 + 8))
        {
          v209 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v177 + 1), (unint64_t)&v229);
          v177 = *(unsigned int *)(v34 + 12);
          v179 = *(_QWORD *)v34;
          v180 = *v209;
        }
        else
        {
          v179 = *(_QWORD *)v34;
          v180 = -114;
        }
        *(_BYTE *)(v179 + v177) = v180;
        v158 = *(_DWORD *)(v34 + 12) + 1;
        v159 = *(_DWORD *)(v34 + 16) + 1;
        *(_DWORD *)(v34 + 12) = v158;
        *(_DWORD *)(v34 + 16) = v159;
      }
      v160 = 0x80;
      goto LABEL_248;
    case 1:
      v70 = (v35 + 1073741936) < 0x80;
      if (v35 >= -1073741824)
        v70 = (v35 + 16) < 0x90;
      if (v70)
      {
        v71 = (v21 - 1073741808) < 0x80;
        if (v21 <= 0x3FFFFFFF)
          v71 = (v21 + 128) < 0x90;
        if (v71)
        {
          v72 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v72;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          v45 = -127;
          *(_DWORD *)(v34 + 36) = 129;
          LOBYTE(v229) = -127;
          v46 = *(unsigned int *)(v34 + 12);
          v47 = *(unsigned int *)(v34 + 16);
          if (v46 > v47)
            goto LABEL_286;
          if ((_DWORD)v46 != *(_DWORD *)(v34 + 8))
          {
            v48 = *(_QWORD *)v34;
            v49 = -127;
            goto LABEL_89;
          }
          goto LABEL_258;
        }
      }
      if (v35 >= -1073741824)
        v128 = (v35 + 64) >> 6 < 0x201;
      else
        v128 = (v35 + 1073774528) < 0x8000;
      if (v128)
      {
        v129 = (v21 - 1073741760) < 0x8000;
        if (v21 <= 0x3FFFFFFF)
          v129 = (v21 + 0x8000) >> 6 < 0x201;
        if (v129)
        {
          v130 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v130;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          *(_DWORD *)(v34 + 36) = 129;
          LOBYTE(v229) = -115;
          v131 = *(unsigned int *)(v34 + 12);
          v132 = *(unsigned int *)(v34 + 16);
          if (v131 > v132)
          {
            *(_DWORD *)(v34 + 16) = v132 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v132) = -115;
            v97 = *(_DWORD *)(v34 + 12);
            v98 = *(_DWORD *)(v34 + 16);
          }
          else
          {
            if ((_DWORD)v131 == *(_DWORD *)(v34 + 8))
            {
              v218 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v131 + 1), (unint64_t)&v229);
              v131 = *(unsigned int *)(v34 + 12);
              v133 = *(_QWORD *)v34;
              v134 = *v218;
            }
            else
            {
              v133 = *(_QWORD *)v34;
              v134 = -115;
            }
            *(_BYTE *)(v133 + v131) = v134;
            v97 = *(_DWORD *)(v34 + 12) + 1;
            v98 = *(_DWORD *)(v34 + 16) + 1;
            *(_DWORD *)(v34 + 12) = v97;
            *(_DWORD *)(v34 + 16) = v98;
          }
          v99 = -127;
          goto LABEL_199;
        }
      }
      v181 = *(_DWORD *)(v34 + 16);
      v229 = (const char *)v34;
      LODWORD(v230) = v181;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
      *(_DWORD *)(v34 + 36) = 129;
      LOBYTE(v229) = -114;
      v182 = *(unsigned int *)(v34 + 12);
      v183 = *(unsigned int *)(v34 + 16);
      if (v182 > v183)
      {
        *(_DWORD *)(v34 + 16) = v183 + 1;
        *(_BYTE *)(*(_QWORD *)v34 + v183) = -114;
        v158 = *(_DWORD *)(v34 + 12);
        v159 = *(_DWORD *)(v34 + 16);
        v83 = a1;
      }
      else
      {
        v83 = a1;
        if ((_DWORD)v182 == *(_DWORD *)(v34 + 8))
        {
          v210 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v182 + 1), (unint64_t)&v229);
          v182 = *(unsigned int *)(v34 + 12);
          v184 = *(_QWORD *)v34;
          v185 = *v210;
        }
        else
        {
          v184 = *(_QWORD *)v34;
          v185 = -114;
        }
        *(_BYTE *)(v184 + v182) = v185;
        v158 = *(_DWORD *)(v34 + 12) + 1;
        v159 = *(_DWORD *)(v34 + 16) + 1;
        *(_DWORD *)(v34 + 12) = v158;
        *(_DWORD *)(v34 + 16) = v159;
      }
      v160 = -127;
      goto LABEL_248;
    case 2:
      v61 = (v35 + 1073741936) < 0x80;
      if (v35 >= -1073741824)
        v61 = (v35 + 16) < 0x90;
      if (v61)
      {
        v62 = (v21 - 1073741808) < 0x80;
        if (v21 <= 0x3FFFFFFF)
          v62 = (v21 + 128) < 0x90;
        if (v62)
        {
          v63 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v63;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          v45 = -126;
          *(_DWORD *)(v34 + 36) = 130;
          LOBYTE(v229) = -126;
          v46 = *(unsigned int *)(v34 + 12);
          v47 = *(unsigned int *)(v34 + 16);
          if (v46 > v47)
            goto LABEL_286;
          if ((_DWORD)v46 != *(_DWORD *)(v34 + 8))
          {
            v48 = *(_QWORD *)v34;
            v49 = -126;
            goto LABEL_89;
          }
          goto LABEL_258;
        }
      }
      if (v35 >= -1073741824)
        v100 = (v35 + 64) >> 6 < 0x201;
      else
        v100 = (v35 + 1073774528) < 0x8000;
      if (v100)
      {
        v101 = (v21 - 1073741760) < 0x8000;
        if (v21 <= 0x3FFFFFFF)
          v101 = (v21 + 0x8000) >> 6 < 0x201;
        if (v101)
        {
          v102 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v102;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          *(_DWORD *)(v34 + 36) = 130;
          LOBYTE(v229) = -115;
          v103 = *(unsigned int *)(v34 + 12);
          v104 = *(unsigned int *)(v34 + 16);
          if (v103 > v104)
          {
            *(_DWORD *)(v34 + 16) = v104 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v104) = -115;
            v97 = *(_DWORD *)(v34 + 12);
            v98 = *(_DWORD *)(v34 + 16);
          }
          else
          {
            if ((_DWORD)v103 == *(_DWORD *)(v34 + 8))
            {
              v214 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v103 + 1), (unint64_t)&v229);
              v103 = *(unsigned int *)(v34 + 12);
              v105 = *(_QWORD *)v34;
              v106 = *v214;
            }
            else
            {
              v105 = *(_QWORD *)v34;
              v106 = -115;
            }
            *(_BYTE *)(v105 + v103) = v106;
            v97 = *(_DWORD *)(v34 + 12) + 1;
            v98 = *(_DWORD *)(v34 + 16) + 1;
            *(_DWORD *)(v34 + 12) = v97;
            *(_DWORD *)(v34 + 16) = v98;
          }
          v99 = -126;
          goto LABEL_199;
        }
      }
      v161 = *(_DWORD *)(v34 + 16);
      v229 = (const char *)v34;
      LODWORD(v230) = v161;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
      *(_DWORD *)(v34 + 36) = 130;
      LOBYTE(v229) = -114;
      v162 = *(unsigned int *)(v34 + 12);
      v163 = *(unsigned int *)(v34 + 16);
      if (v162 > v163)
      {
        *(_DWORD *)(v34 + 16) = v163 + 1;
        *(_BYTE *)(*(_QWORD *)v34 + v163) = -114;
        v158 = *(_DWORD *)(v34 + 12);
        v159 = *(_DWORD *)(v34 + 16);
        v83 = a1;
      }
      else
      {
        v83 = a1;
        if ((_DWORD)v162 == *(_DWORD *)(v34 + 8))
        {
          v206 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v162 + 1), (unint64_t)&v229);
          v162 = *(unsigned int *)(v34 + 12);
          v164 = *(_QWORD *)v34;
          v165 = *v206;
        }
        else
        {
          v164 = *(_QWORD *)v34;
          v165 = -114;
        }
        *(_BYTE *)(v164 + v162) = v165;
        v158 = *(_DWORD *)(v34 + 12) + 1;
        v159 = *(_DWORD *)(v34 + 16) + 1;
        *(_DWORD *)(v34 + 12) = v158;
        *(_DWORD *)(v34 + 16) = v159;
      }
      v160 = -126;
      goto LABEL_248;
    case 3:
      v64 = (v35 + 1073741936) < 0x80;
      if (v35 >= -1073741824)
        v64 = (v35 + 16) < 0x90;
      if (v64)
      {
        v65 = (v21 - 1073741808) < 0x80;
        if (v21 <= 0x3FFFFFFF)
          v65 = (v21 + 128) < 0x90;
        if (v65)
        {
          v66 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v66;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          v45 = -125;
          *(_DWORD *)(v34 + 36) = 131;
          LOBYTE(v229) = -125;
          v46 = *(unsigned int *)(v34 + 12);
          v47 = *(unsigned int *)(v34 + 16);
          if (v46 > v47)
            goto LABEL_286;
          if ((_DWORD)v46 != *(_DWORD *)(v34 + 8))
          {
            v48 = *(_QWORD *)v34;
            v49 = -125;
            goto LABEL_89;
          }
          goto LABEL_258;
        }
      }
      if (v35 >= -1073741824)
        v107 = (v35 + 64) >> 6 < 0x201;
      else
        v107 = (v35 + 1073774528) < 0x8000;
      if (v107)
      {
        v108 = (v21 - 1073741760) < 0x8000;
        if (v21 <= 0x3FFFFFFF)
          v108 = (v21 + 0x8000) >> 6 < 0x201;
        if (v108)
        {
          v109 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v109;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          *(_DWORD *)(v34 + 36) = 131;
          LOBYTE(v229) = -115;
          v110 = *(unsigned int *)(v34 + 12);
          v111 = *(unsigned int *)(v34 + 16);
          if (v110 > v111)
          {
            *(_DWORD *)(v34 + 16) = v111 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v111) = -115;
            v97 = *(_DWORD *)(v34 + 12);
            v98 = *(_DWORD *)(v34 + 16);
          }
          else
          {
            if ((_DWORD)v110 == *(_DWORD *)(v34 + 8))
            {
              v215 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v110 + 1), (unint64_t)&v229);
              v110 = *(unsigned int *)(v34 + 12);
              v112 = *(_QWORD *)v34;
              v113 = *v215;
            }
            else
            {
              v112 = *(_QWORD *)v34;
              v113 = -115;
            }
            *(_BYTE *)(v112 + v110) = v113;
            v97 = *(_DWORD *)(v34 + 12) + 1;
            v98 = *(_DWORD *)(v34 + 16) + 1;
            *(_DWORD *)(v34 + 12) = v97;
            *(_DWORD *)(v34 + 16) = v98;
          }
          v99 = -125;
          goto LABEL_199;
        }
      }
      v166 = *(_DWORD *)(v34 + 16);
      v229 = (const char *)v34;
      LODWORD(v230) = v166;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
      *(_DWORD *)(v34 + 36) = 131;
      LOBYTE(v229) = -114;
      v167 = *(unsigned int *)(v34 + 12);
      v168 = *(unsigned int *)(v34 + 16);
      if (v167 > v168)
      {
        *(_DWORD *)(v34 + 16) = v168 + 1;
        *(_BYTE *)(*(_QWORD *)v34 + v168) = -114;
        v158 = *(_DWORD *)(v34 + 12);
        v159 = *(_DWORD *)(v34 + 16);
        v83 = a1;
      }
      else
      {
        v83 = a1;
        if ((_DWORD)v167 == *(_DWORD *)(v34 + 8))
        {
          v207 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v167 + 1), (unint64_t)&v229);
          v167 = *(unsigned int *)(v34 + 12);
          v169 = *(_QWORD *)v34;
          v170 = *v207;
        }
        else
        {
          v169 = *(_QWORD *)v34;
          v170 = -114;
        }
        *(_BYTE *)(v169 + v167) = v170;
        v158 = *(_DWORD *)(v34 + 12) + 1;
        v159 = *(_DWORD *)(v34 + 16) + 1;
        *(_DWORD *)(v34 + 12) = v158;
        *(_DWORD *)(v34 + 16) = v159;
      }
      v160 = -125;
      goto LABEL_248;
    case 4:
      v58 = (v35 + 1073741936) < 0x80;
      if (v35 >= -1073741824)
        v58 = (v35 + 16) < 0x90;
      if (v58)
      {
        v59 = (v21 - 1073741808) < 0x80;
        if (v21 <= 0x3FFFFFFF)
          v59 = (v21 + 128) < 0x90;
        if (v59)
        {
          v60 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v60;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          v45 = -124;
          *(_DWORD *)(v34 + 36) = 132;
          LOBYTE(v229) = -124;
          v46 = *(unsigned int *)(v34 + 12);
          v47 = *(unsigned int *)(v34 + 16);
          if (v46 > v47)
            goto LABEL_286;
          if ((_DWORD)v46 != *(_DWORD *)(v34 + 8))
          {
            v48 = *(_QWORD *)v34;
            v49 = -124;
            goto LABEL_89;
          }
          goto LABEL_258;
        }
      }
      if (v35 >= -1073741824)
        v90 = (v35 + 64) >> 6 < 0x201;
      else
        v90 = (v35 + 1073774528) < 0x8000;
      if (v90)
      {
        v91 = (v21 - 1073741760) < 0x8000;
        if (v21 <= 0x3FFFFFFF)
          v91 = (v21 + 0x8000) >> 6 < 0x201;
        if (v91)
        {
          v92 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v92;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          *(_DWORD *)(v34 + 36) = 132;
          LOBYTE(v229) = -115;
          v93 = *(unsigned int *)(v34 + 12);
          v94 = *(unsigned int *)(v34 + 16);
          if (v93 > v94)
          {
            *(_DWORD *)(v34 + 16) = v94 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v94) = -115;
            v97 = *(_DWORD *)(v34 + 12);
            v98 = *(_DWORD *)(v34 + 16);
          }
          else
          {
            if ((_DWORD)v93 == *(_DWORD *)(v34 + 8))
            {
              v213 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v93 + 1), (unint64_t)&v229);
              v93 = *(unsigned int *)(v34 + 12);
              v95 = *(_QWORD *)v34;
              v96 = *v213;
            }
            else
            {
              v95 = *(_QWORD *)v34;
              v96 = -115;
            }
            *(_BYTE *)(v95 + v93) = v96;
            v97 = *(_DWORD *)(v34 + 12) + 1;
            v98 = *(_DWORD *)(v34 + 16) + 1;
            *(_DWORD *)(v34 + 12) = v97;
            *(_DWORD *)(v34 + 16) = v98;
          }
          v99 = -124;
          goto LABEL_199;
        }
      }
      v153 = *(_DWORD *)(v34 + 16);
      v229 = (const char *)v34;
      LODWORD(v230) = v153;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
      *(_DWORD *)(v34 + 36) = 132;
      LOBYTE(v229) = -114;
      v154 = *(unsigned int *)(v34 + 12);
      v155 = *(unsigned int *)(v34 + 16);
      if (v154 > v155)
      {
        *(_DWORD *)(v34 + 16) = v155 + 1;
        *(_BYTE *)(*(_QWORD *)v34 + v155) = -114;
        v158 = *(_DWORD *)(v34 + 12);
        v159 = *(_DWORD *)(v34 + 16);
        v83 = a1;
      }
      else
      {
        v83 = a1;
        if ((_DWORD)v154 == *(_DWORD *)(v34 + 8))
        {
          v205 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v154 + 1), (unint64_t)&v229);
          v154 = *(unsigned int *)(v34 + 12);
          v156 = *(_QWORD *)v34;
          v157 = *v205;
        }
        else
        {
          v156 = *(_QWORD *)v34;
          v157 = -114;
        }
        *(_BYTE *)(v156 + v154) = v157;
        v158 = *(_DWORD *)(v34 + 12) + 1;
        v159 = *(_DWORD *)(v34 + 16) + 1;
        *(_DWORD *)(v34 + 12) = v158;
        *(_DWORD *)(v34 + 16) = v159;
      }
      v160 = -124;
      goto LABEL_248;
    case 5:
      v73 = (v35 + 1073741936) < 0x80;
      if (v35 >= -1073741824)
        v73 = (v35 + 16) < 0x90;
      if (v73)
      {
        v74 = (v21 - 1073741808) < 0x80;
        if (v21 <= 0x3FFFFFFF)
          v74 = (v21 + 128) < 0x90;
        if (v74)
        {
          v75 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v75;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          v45 = -123;
          *(_DWORD *)(v34 + 36) = 133;
          LOBYTE(v229) = -123;
          v46 = *(unsigned int *)(v34 + 12);
          v47 = *(unsigned int *)(v34 + 16);
          if (v46 > v47)
            goto LABEL_286;
          if ((_DWORD)v46 != *(_DWORD *)(v34 + 8))
          {
            v48 = *(_QWORD *)v34;
            v49 = -123;
            goto LABEL_89;
          }
          goto LABEL_258;
        }
      }
      if (v35 >= -1073741824)
        v135 = (v35 + 64) >> 6 < 0x201;
      else
        v135 = (v35 + 1073774528) < 0x8000;
      if (v135)
      {
        v136 = (v21 - 1073741760) < 0x8000;
        if (v21 <= 0x3FFFFFFF)
          v136 = (v21 + 0x8000) >> 6 < 0x201;
        if (v136)
        {
          v137 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v137;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          *(_DWORD *)(v34 + 36) = 133;
          LOBYTE(v229) = -115;
          v138 = *(unsigned int *)(v34 + 12);
          v139 = *(unsigned int *)(v34 + 16);
          if (v138 > v139)
          {
            *(_DWORD *)(v34 + 16) = v139 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v139) = -115;
            v97 = *(_DWORD *)(v34 + 12);
            v98 = *(_DWORD *)(v34 + 16);
          }
          else
          {
            if ((_DWORD)v138 == *(_DWORD *)(v34 + 8))
            {
              v219 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v138 + 1), (unint64_t)&v229);
              v138 = *(unsigned int *)(v34 + 12);
              v140 = *(_QWORD *)v34;
              v141 = *v219;
            }
            else
            {
              v140 = *(_QWORD *)v34;
              v141 = -115;
            }
            *(_BYTE *)(v140 + v138) = v141;
            v97 = *(_DWORD *)(v34 + 12) + 1;
            v98 = *(_DWORD *)(v34 + 16) + 1;
            *(_DWORD *)(v34 + 12) = v97;
            *(_DWORD *)(v34 + 16) = v98;
          }
          v99 = -123;
          goto LABEL_199;
        }
      }
      v186 = *(_DWORD *)(v34 + 16);
      v229 = (const char *)v34;
      LODWORD(v230) = v186;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
      *(_DWORD *)(v34 + 36) = 133;
      LOBYTE(v229) = -114;
      v187 = *(unsigned int *)(v34 + 12);
      v188 = *(unsigned int *)(v34 + 16);
      if (v187 > v188)
      {
        *(_DWORD *)(v34 + 16) = v188 + 1;
        *(_BYTE *)(*(_QWORD *)v34 + v188) = -114;
        v158 = *(_DWORD *)(v34 + 12);
        v159 = *(_DWORD *)(v34 + 16);
        v83 = a1;
      }
      else
      {
        v83 = a1;
        if ((_DWORD)v187 == *(_DWORD *)(v34 + 8))
        {
          v211 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v187 + 1), (unint64_t)&v229);
          v187 = *(unsigned int *)(v34 + 12);
          v189 = *(_QWORD *)v34;
          v190 = *v211;
        }
        else
        {
          v189 = *(_QWORD *)v34;
          v190 = -114;
        }
        *(_BYTE *)(v189 + v187) = v190;
        v158 = *(_DWORD *)(v34 + 12) + 1;
        v159 = *(_DWORD *)(v34 + 16) + 1;
        *(_DWORD *)(v34 + 12) = v158;
        *(_DWORD *)(v34 + 16) = v159;
      }
      v160 = -123;
      goto LABEL_248;
    case 6:
      v76 = (v35 + 1073741936) < 0x80;
      if (v35 >= -1073741824)
        v76 = (v35 + 16) < 0x90;
      if (v76)
      {
        v77 = (v21 - 1073741808) < 0x80;
        if (v21 <= 0x3FFFFFFF)
          v77 = (v21 + 128) < 0x90;
        if (v77)
        {
          v78 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v78;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          v45 = -122;
          *(_DWORD *)(v34 + 36) = 134;
          LOBYTE(v229) = -122;
          v46 = *(unsigned int *)(v34 + 12);
          v47 = *(unsigned int *)(v34 + 16);
          if (v46 > v47)
            goto LABEL_286;
          if ((_DWORD)v46 != *(_DWORD *)(v34 + 8))
          {
            v48 = *(_QWORD *)v34;
            v49 = -122;
            goto LABEL_89;
          }
          goto LABEL_258;
        }
      }
      if (v35 >= -1073741824)
        v142 = (v35 + 64) >> 6 < 0x201;
      else
        v142 = (v35 + 1073774528) < 0x8000;
      if (v142)
      {
        v143 = (v21 - 1073741760) < 0x8000;
        if (v21 <= 0x3FFFFFFF)
          v143 = (v21 + 0x8000) >> 6 < 0x201;
        if (v143)
        {
          v144 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v144;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          *(_DWORD *)(v34 + 36) = 134;
          LOBYTE(v229) = -115;
          v145 = *(unsigned int *)(v34 + 12);
          v146 = *(unsigned int *)(v34 + 16);
          if (v145 > v146)
          {
            *(_DWORD *)(v34 + 16) = v146 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v146) = -115;
            v97 = *(_DWORD *)(v34 + 12);
            v98 = *(_DWORD *)(v34 + 16);
          }
          else
          {
            if ((_DWORD)v145 == *(_DWORD *)(v34 + 8))
            {
              v220 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v145 + 1), (unint64_t)&v229);
              v145 = *(unsigned int *)(v34 + 12);
              v147 = *(_QWORD *)v34;
              v148 = *v220;
            }
            else
            {
              v147 = *(_QWORD *)v34;
              v148 = -115;
            }
            *(_BYTE *)(v147 + v145) = v148;
            v97 = *(_DWORD *)(v34 + 12) + 1;
            v98 = *(_DWORD *)(v34 + 16) + 1;
            *(_DWORD *)(v34 + 12) = v97;
            *(_DWORD *)(v34 + 16) = v98;
          }
          v99 = -122;
          goto LABEL_199;
        }
      }
      v191 = *(_DWORD *)(v34 + 16);
      v229 = (const char *)v34;
      LODWORD(v230) = v191;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
      *(_DWORD *)(v34 + 36) = 134;
      LOBYTE(v229) = -114;
      v192 = *(unsigned int *)(v34 + 12);
      v193 = *(unsigned int *)(v34 + 16);
      if (v192 > v193)
      {
        *(_DWORD *)(v34 + 16) = v193 + 1;
        *(_BYTE *)(*(_QWORD *)v34 + v193) = -114;
        v158 = *(_DWORD *)(v34 + 12);
        v159 = *(_DWORD *)(v34 + 16);
        v83 = a1;
      }
      else
      {
        v83 = a1;
        if ((_DWORD)v192 == *(_DWORD *)(v34 + 8))
        {
          v212 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v192 + 1), (unint64_t)&v229);
          v192 = *(unsigned int *)(v34 + 12);
          v194 = *(_QWORD *)v34;
          v195 = *v212;
        }
        else
        {
          v194 = *(_QWORD *)v34;
          v195 = -114;
        }
        *(_BYTE *)(v194 + v192) = v195;
        v158 = *(_DWORD *)(v34 + 12) + 1;
        v159 = *(_DWORD *)(v34 + 16) + 1;
        *(_DWORD *)(v34 + 12) = v158;
        *(_DWORD *)(v34 + 16) = v159;
      }
      v160 = -122;
      goto LABEL_248;
    case 7:
      v67 = (v35 + 1073741936) < 0x80;
      if (v35 >= -1073741824)
        v67 = (v35 + 16) < 0x90;
      if (!v67)
        goto LABEL_139;
      v68 = (v21 - 1073741808) < 0x80;
      if (v21 <= 0x3FFFFFFF)
        v68 = (v21 + 128) < 0x90;
      if (v68)
      {
        v69 = *(_DWORD *)(v34 + 16);
        v229 = (const char *)v34;
        LODWORD(v230) = v69;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
        v45 = -121;
        *(_DWORD *)(v34 + 36) = 135;
        LOBYTE(v229) = -121;
        v46 = *(unsigned int *)(v34 + 12);
        v47 = *(unsigned int *)(v34 + 16);
        if (v46 > v47)
        {
LABEL_286:
          *(_DWORD *)(v34 + 16) = v47 + 1;
          *(_BYTE *)(*(_QWORD *)v34 + v47) = v45;
          v79 = *(_DWORD *)(v34 + 12);
          v80 = *(_DWORD *)(v34 + 16);
        }
        else
        {
          if ((_DWORD)v46 == *(_DWORD *)(v34 + 8))
          {
LABEL_258:
            *(_BYTE *)(*(_QWORD *)v34 + *(unsigned int *)(v34 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v46 + 1), (unint64_t)&v229);
          }
          else
          {
            v48 = *(_QWORD *)v34;
            v49 = -121;
LABEL_89:
            *(_BYTE *)(v48 + v46) = v49;
          }
          v79 = *(_DWORD *)(v34 + 12) + 1;
          v80 = *(_DWORD *)(v34 + 16) + 1;
          *(_DWORD *)(v34 + 12) = v79;
          *(_DWORD *)(v34 + 16) = v80;
        }
        v81 = 15 - v35;
        if (v35 >= -1073741824)
          v81 = ~(_BYTE)v35;
        LOBYTE(v229) = v81;
        if (v79 > v80)
        {
          *(_DWORD *)(v34 + 16) = v80 + 1;
          *(_BYTE *)(*(_QWORD *)v34 + v80) = v81;
          v85 = *(_DWORD *)(v34 + 12);
          v86 = *(_DWORD *)(v34 + 16);
          v83 = a1;
        }
        else
        {
          v82 = v79;
          v83 = a1;
          if (v79 == *(_DWORD *)(v34 + 8))
          {
            v202 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v79 + 1), (unint64_t)&v229);
            v82 = *(unsigned int *)(v34 + 12);
            v84 = *(_QWORD *)v34;
            v81 = *v202;
          }
          else
          {
            v84 = *(_QWORD *)v34;
          }
          *(_BYTE *)(v84 + v82) = v81;
          v85 = *(_DWORD *)(v34 + 12) + 1;
          v86 = *(_DWORD *)(v34 + 16) + 1;
          *(_DWORD *)(v34 + 12) = v85;
          *(_DWORD *)(v34 + 16) = v86;
        }
        v87 = v21 + 16;
        if (v21 <= 0x3FFFFFFF)
          v87 = v21;
        LOBYTE(v229) = v87;
        if (v85 > v86)
        {
          *(_DWORD *)(v34 + 16) = v86 + 1;
          *(_BYTE *)(*(_QWORD *)v34 + v86) = v87;
        }
        else
        {
          v88 = v85;
          if (v85 == *(_DWORD *)(v34 + 8))
          {
            v203 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v85 + 1), (unint64_t)&v229);
            v88 = *(unsigned int *)(v34 + 12);
            v89 = *(_QWORD *)v34;
            v87 = *v203;
          }
          else
          {
            v89 = *(_QWORD *)v34;
          }
          *(_BYTE *)(v89 + v88) = v87;
          *(int32x2_t *)(v34 + 12) = vadd_s32(*(int32x2_t *)(v34 + 12), (int32x2_t)0x100000001);
        }
      }
      else
      {
LABEL_139:
        if (v35 >= -1073741824)
          v114 = (v35 + 64) >> 6 < 0x201;
        else
          v114 = (v35 + 1073774528) < 0x8000;
        if (!v114)
          goto LABEL_223;
        v115 = (v21 - 1073741760) < 0x8000;
        if (v21 <= 0x3FFFFFFF)
          v115 = (v21 + 0x8000) >> 6 < 0x201;
        if (v115)
        {
          v116 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v116;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          *(_DWORD *)(v34 + 36) = 135;
          LOBYTE(v229) = -115;
          v117 = *(unsigned int *)(v34 + 12);
          v118 = *(unsigned int *)(v34 + 16);
          if (v117 > v118)
          {
            *(_DWORD *)(v34 + 16) = v118 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v118) = -115;
            v97 = *(_DWORD *)(v34 + 12);
            v98 = *(_DWORD *)(v34 + 16);
          }
          else
          {
            if ((_DWORD)v117 == *(_DWORD *)(v34 + 8))
            {
              v216 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v117 + 1), (unint64_t)&v229);
              v117 = *(unsigned int *)(v34 + 12);
              v119 = *(_QWORD *)v34;
              v120 = *v216;
            }
            else
            {
              v119 = *(_QWORD *)v34;
              v120 = -115;
            }
            *(_BYTE *)(v119 + v117) = v120;
            v97 = *(_DWORD *)(v34 + 12) + 1;
            v98 = *(_DWORD *)(v34 + 16) + 1;
            *(_DWORD *)(v34 + 12) = v97;
            *(_DWORD *)(v34 + 16) = v98;
          }
          v99 = -121;
LABEL_199:
          LOBYTE(v229) = v99;
          if (v97 > v98)
          {
            *(_DWORD *)(v34 + 16) = v98 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v98) = v99;
          }
          else
          {
            v149 = v97;
            if (v97 == *(_DWORD *)(v34 + 8))
            {
              v204 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v97 + 1), (unint64_t)&v229);
              v149 = *(unsigned int *)(v34 + 12);
              v150 = *(_QWORD *)v34;
              v99 = *v204;
            }
            else
            {
              v150 = *(_QWORD *)v34;
            }
            *(_BYTE *)(v150 + v149) = v99;
            *(int32x2_t *)(v34 + 12) = vadd_s32(*(int32x2_t *)(v34 + 12), (int32x2_t)0x100000001);
          }
          v151 = 63 - v35;
          if (v35 >= -1073741824)
            v151 = ~(_WORD)v35;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v34, v151);
          v152 = v21 + 64;
          if (v21 <= 0x3FFFFFFF)
            v152 = v21;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v34, v152);
          v83 = a1;
        }
        else
        {
LABEL_223:
          v171 = *(_DWORD *)(v34 + 16);
          v229 = (const char *)v34;
          LODWORD(v230) = v171;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v34 + 40), &v229, v23, v24, v25, v26, v27, v28);
          *(_DWORD *)(v34 + 36) = 135;
          LOBYTE(v229) = -114;
          v172 = *(unsigned int *)(v34 + 12);
          v173 = *(unsigned int *)(v34 + 16);
          if (v172 > v173)
          {
            *(_DWORD *)(v34 + 16) = v173 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v173) = -114;
            v158 = *(_DWORD *)(v34 + 12);
            v159 = *(_DWORD *)(v34 + 16);
            v83 = a1;
          }
          else
          {
            v83 = a1;
            if ((_DWORD)v172 == *(_DWORD *)(v34 + 8))
            {
              v208 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v172 + 1), (unint64_t)&v229);
              v172 = *(unsigned int *)(v34 + 12);
              v174 = *(_QWORD *)v34;
              v175 = *v208;
            }
            else
            {
              v174 = *(_QWORD *)v34;
              v175 = -114;
            }
            *(_BYTE *)(v174 + v172) = v175;
            v158 = *(_DWORD *)(v34 + 12) + 1;
            v159 = *(_DWORD *)(v34 + 16) + 1;
            *(_DWORD *)(v34 + 12) = v158;
            *(_DWORD *)(v34 + 16) = v159;
          }
          v160 = -121;
LABEL_248:
          LOBYTE(v229) = v160;
          if (v158 > v159)
          {
            *(_DWORD *)(v34 + 16) = v159 + 1;
            *(_BYTE *)(*(_QWORD *)v34 + v159) = v160;
          }
          else
          {
            v196 = v158;
            if (v158 == *(_DWORD *)(v34 + 8))
            {
              v201 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, (WTF *)(v158 + 1), (unint64_t)&v229);
              v196 = *(unsigned int *)(v34 + 12);
              v197 = *(_QWORD *)v34;
              v160 = *v201;
            }
            else
            {
              v197 = *(_QWORD *)v34;
            }
            *(_BYTE *)(v197 + v196) = v160;
            *(int32x2_t *)(v34 + 12) = vadd_s32(*(int32x2_t *)(v34 + 12), (int32x2_t)0x100000001);
          }
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v34, ~v35);
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v34, v21);
        }
      }
      v198 = *(_DWORD *)(a2 + 68);
      if (v198 == *(_DWORD *)(a2 + 64))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(a2 + 56, &v228, (int *)v224, v40, v41, v42, v43, v44);
      }
      else
      {
        v199 = *(_QWORD *)(a2 + 56) + 24 * v198;
        v200 = v224[0];
        *(_QWORD *)v199 = a4;
        *(_QWORD *)(v199 + 8) = a5;
        *(_DWORD *)(v199 + 16) = v200;
        ++*(_DWORD *)(a2 + 68);
      }
      *v83 = 0;
      v83[8] = 0;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198D55A0CLL);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseArrayTypeDefinition(uint64_t a1, unint64_t *a2, char *a3, uint64_t a4, unsigned int a5, _DWORD *a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  JSC::Wasm::TypeInformation *v24;
  unint64_t v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  const char *v31;
  uint64_t v32;
  void (**v33)(WTF::StringPrintStream *__hidden);
  unsigned int *v34;
  WTF *v35;
  JSC::Wasm::TypeDefinition *v36;
  JSC::Wasm::TypeInformation *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 hasRecursiveReference;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t CachedUnrolling;
  uint64_t v46;
  uint64_t v47;
  const JSC::Wasm::Type *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  WTF *v53;
  const JSC::Wasm::TypeDefinition *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD v61[2];
  const char *v62;
  uint64_t v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  _QWORD v65[2];

  v65[0] = a3;
  v65[1] = a4;
  v11 = a2[2];
  v12 = *a2;
  v13 = v11 - *a2;
  if (v11 <= *a2)
    goto LABEL_28;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = a2[1];
  *a6 = 0;
  v18 = 5;
  if (v13 < 5)
    v18 = v13;
  v19 = v18 - 1;
  *a2 = v12 + 1;
  v20 = v17 + v12;
  v21 = v12 + 2;
  while (1)
  {
    v22 = *(char *)(v20 + v14);
    v16 |= (v22 & 0x7F) << v15;
    *a6 = v16;
    if ((v22 & 0x80000000) == 0)
      break;
    if (v19 == v14)
      goto LABEL_28;
    LOBYTE(v22) = v21 + v14;
    *a2 = v21 + v14;
    v15 += 7;
    if (v13 == ++v14)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v14 == 4 && v22 >= 0x10u)
  {
LABEL_28:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a3, a4, &v62, a10);
    v33 = (void (**)(WTF::StringPrintStream *__hidden))v62;
    goto LABEL_22;
  }
  v23 = a2[1838];
  if (v16 >= *(_DWORD *)(v23 + 100))
  {
    v62 = " index ";
    v63 = 8;
    v31 = " is out of bounds";
    v32 = 18;
LABEL_21:
    v61[0] = v31;
    v61[1] = v32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v64, (uint64_t)v65, (uint64_t)&v62, a6, (uint64_t)v61, a9, a10);
    v33 = v64;
LABEL_22:
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v24 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v23 + 88) + 8 * v16);
  v25 = (unint64_t)v24;
  if (*((_DWORD *)v24 + 8) == 4)
  {
    v34 = (unsigned int *)*((_QWORD *)v24 + 1);
    v35 = *(WTF **)v34;
    v36 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v34 + 8) + 8 * v34[2]);
    v37 = v24;
    v38 = (uint64_t)a6;
    v39 = a8;
    v40 = a7;
    v60 = a5;
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v36);
    a5 = v60;
    a7 = v40;
    a8 = v39;
    a6 = (_DWORD *)v38;
    v25 = (unint64_t)v36;
    v24 = v37;
    if (hasRecursiveReference)
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v37, v42, v43, v44, v60, v38, v40, v39);
      if (v52)
      {
        v25 = CachedUnrolling;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
        v24 = v37;
      }
      else
      {
        v53 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v36, v35, v46, v47, v48, v49, v50, v51);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v37, v53, v54, v55, v56, v57, v58, v59);
        v25 = (unint64_t)v53;
        v24 = v37;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
      }
    }
  }
  v26 = *(_DWORD *)(v25 + 32);
  if (v26 == 5)
  {
    v25 = **(_QWORD **)(v25 + 8);
    v26 = *(_DWORD *)(v25 + 32);
  }
  if (v26 != 2)
  {
    v62 = " index ";
    v63 = 8;
    v31 = " does not reference an array definition";
    v32 = 40;
    goto LABEL_21;
  }
  v27 = *(__int128 **)(v25 + 8);
  v28 = *v27;
  v29 = *((_QWORD *)v27 + 2);
  *(_BYTE *)(a7 + 24) = *((_BYTE *)v27 + 24);
  *(_QWORD *)(a7 + 16) = v29;
  *(_OWORD *)a7 = v28;
  if (a5)
    v30 = -29;
  else
    v30 = -28;
  *(_BYTE *)a8 = v30;
  *(_QWORD *)(a8 + 8) = v24;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [25],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  double v27;
  float v28;
  WTF *v29;
  WTF::PrintStream *v30;
  float v31;
  double v32;
  const WTF::String *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  char v112;
  void (**v113)(WTF::StringPrintStream *__hidden);
  WTF *v114;
  __int128 v115;
  _BYTE v116[128];
  void (**v117)(WTF::StringPrintStream *__hidden);
  WTF *v118;
  __int128 v119;
  _BYTE v120[128];
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v113 = off_1E3572250;
  v114 = (WTF *)v116;
  v115 = xmmword_199122F80;
  v116[0] = 0;
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", a3);
  v117[5]((WTF::StringPrintStream *)&v117);
  v16 = v118;
  if (!v118)
  {
    v111 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v111);
  v16 = v118;
  if (v118 != (WTF *)v120)
LABEL_5:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v110, a2, a4, v17, v18);
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", " expected ");
  v117[5]((WTF::StringPrintStream *)&v117);
  v26 = v118;
  if (!v118)
  {
    v109 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v109);
  v26 = v118;
  if (v118 != (WTF *)v120)
LABEL_10:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v108, a2, a5, v27, v28);
  v29 = (WTF *)((uint64_t (*)(_QWORD))v113[4])(&v113);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v29 + 32))(v29);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v117, v31);
  WTF::printExpectedCStringHelper(v30, "StringView", &v117);
  if ((_DWORD)v118 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v118])(&v112, &v117);
  v32 = (*(double (**)(WTF *))(*(_QWORD *)v29 + 40))(v29);
  WTF::printInternal(v29, (WTF::PrintStream *)&v111, v33, v34, v35, v36, v37, v38, v32, v39);
  WTF::printInternal(v29, (WTF::PrintStream *)&v110, v40, v41, v42, v43, v44, v45, v46, v47);
  WTF::printInternal(v29, (WTF::PrintStream *)&v109, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v29, (WTF::PrintStream *)&v108, v56, v57, v58, v59, v60, v61, v62, v63);
  v113[5]((WTF::StringPrintStream *)&v113);
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v111;
  v111 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = v114;
  if (v114)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v114, v115, (uint64_t *)&v117);
    v75 = v114;
    *a1 = v117;
    if (v75 == (WTF *)v116)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v75, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [48],JSC::Wasm::Type,char [25],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in array.new_fixed, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected a subtype of ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [64],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "array.new_data expected numeric, packed, or vector type; found ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [61],JSC::Wasm::Type,char [56],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.new_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.new_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::addReferencedFunctions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  if (BYTE1(dword_1ECF4C7B0))
    v12 = 227;
  else
    v12 = 240;
  if (BYTE1(dword_1ECF4C7B0))
    v13 = -16;
  else
    v13 = 0;
  result = JSC::Wasm::isSubtype(v10, v11, v12, v13, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v15 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v15)
    {
      for (i = 0; i < v15; ++i)
      {
        if (i >= v15)
        {
LABEL_29:
          __break(0xC471u);
          JUMPOUT(0x198D56B74);
        }
        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + i) == 1)
        {
          if (i >= *(unsigned int *)(a2 + 76))
            goto LABEL_29;
          v17 = *(_QWORD *)(a1 + 14704);
          v18 = *(_QWORD *)(v17 + 320);
          v19 = (unint64_t *)(2 * v18);
          if (v18 < 0)
            v20 = 63;
          else
            v20 = *v19;
          v21 = *(unsigned int *)(*(_QWORD *)(a2 + 64) + 8 * i);
          if (v20 > v21)
          {
            v22 = (_QWORD *)(v17 + 320);
            v23 = 1 << v21;
            v24 = v19 + 1;
            if (v18 >= 0)
              v25 = v24;
            else
              v25 = v22;
            v26 = (_QWORD *)((char *)v25 + ((v21 >> 3) & 0x1FFFFFF8));
            while (1)
            {
              v27 = *v26;
              if ((*v26 & v23) != 0)
                break;
              v28 = __ldxr(v26);
              if (v28 == v27)
              {
                if (!__stxr(v27 | v23, v26))
                  break;
              }
              else
              {
                __clrex();
              }
            }
            v15 = *(unsigned int *)(a2 + 60);
          }
        }
      }
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,char [19],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  double v31;
  float v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  double v41;
  float v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  int v144;
  char v145;
  void (**v146)(WTF::StringPrintStream *__hidden);
  WTF *v147;
  __int128 v148;
  _BYTE v149[128];
  void (**v150)(WTF::StringPrintStream *__hidden);
  WTF *v151;
  __int128 v152;
  _BYTE v153[128];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v146 = off_1E3572250;
  v147 = (WTF *)v149;
  v148 = xmmword_199122F80;
  v149[0] = 0;
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v143, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v143 = (WTF::StringImpl *)v14;
    v144 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v150, "StringView", &v143);
  if (v144 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v144])(&v142, &v143);
  v150[5]((WTF::StringPrintStream *)&v150);
  v150[5]((WTF::StringPrintStream *)&v150);
  v22 = v151;
  if (!v151)
  {
    v143 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v143);
  v22 = v151;
  if (v151 != (WTF *)v153)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " arrayref to type ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v30 = v151;
  if (!v151)
  {
    v142 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v142);
  v30 = v151;
  if (v151 != (WTF *)v153)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v141, a2, a4, v31, v32);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " expected ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v40 = v151;
  if (!v151)
  {
    v140 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v140);
  v40 = v151;
  if (v151 != (WTF *)v153)
LABEL_22:
    WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v139, a2, a5, v41, v42);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v146[4])(&v146);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v150, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v150);
  if ((_DWORD)v151 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v151])(&v145, &v150);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v143, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v142, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v141, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v140, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v43, (WTF::PrintStream *)&v139, v78, v79, v80, v81, v82, v83, v84, v85);
  v146[5]((WTF::StringPrintStream *)&v146);
  v93 = v139;
  v139 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v140;
  v140 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v141;
  v141 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v147;
  if (v147)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v147, v148, (uint64_t *)&v150);
    v98 = v147;
    *a1 = v150;
    if (v98 == (WTF *)v149)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v98, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.set arrayref to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [25],JSC::Wasm::Type,char [19]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "array.len value to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected arrayref");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [27],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "array.fill offset to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [26],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.fill value to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [62],JSC::Wasm::Type,char [57],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.init_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.init_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseStructFieldManipulation(_BYTE *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6, float a7)
{
  float v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(WTF::StringPrintStream *__hidden);
  void (**v15)(WTF::StringPrintStream *__hidden);
  int v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  float v30;
  JSC::Wasm::TypeDefinition *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(WTF::StringPrintStream *__hidden);
  unsigned int *v46;
  WTF *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t CachedUnrolling;
  uint64_t v56;
  uint64_t v57;
  const JSC::Wasm::Type *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  const JSC::Wasm::TypeDefinition *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::Wasm::TypeInformation *v69;
  _QWORD v70[2];
  void (**v71[2])(WTF::StringPrintStream *__hidden);
  const char *v72;
  uint64_t v73;
  void (**v74)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v75;
  unsigned int v76[2];
  _QWORD v77[2];
  uint64_t v78;
  unint64_t v79;

  v77[0] = a4;
  v77[1] = a5;
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseStructTypeIndexAndFieldIndex((uint64_t)&v78, (unint64_t *)a2, v76, a4, a5, a6, a7);
  if ((_BYTE)v79)
    goto LABEL_16;
  v11 = *(_DWORD *)(a2 + 68);
  if (!v11)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "struct reference", 17, &v78, v10);
LABEL_16:
    v45 = (void (**)(WTF::StringPrintStream *__hidden))v78;
    goto LABEL_19;
  }
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56) + 24 * v11;
  v15 = *(void (***)(WTF::StringPrintStream *__hidden))(v13 - 24);
  v14 = *(void (***)(WTF::StringPrintStream *__hidden))(v13 - 16);
  v16 = *(_DWORD *)(v13 - 8);
  *(_DWORD *)(a2 + 68) = v11 - 1;
  v78 = (uint64_t)"WasmFunctionParser.h:";
  LODWORD(v79) = 21;
  LODWORD(v72) = 1581;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v78, (unsigned int *)&v72, (int **)&v75);
  v24 = v75;
  if (!v75)
    goto LABEL_26;
  v25 = *(_DWORD *)(v12 + 240);
  if (!v25)
  {
    __break(0xC471u);
    JUMPOUT(0x198D58314);
  }
  *(_DWORD *)(v12 + 240) = v25 - 1;
  v75 = 0;
  if (*(_DWORD *)v24 == 2)
  {
    WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v24 -= 2;
  }
  v26 = *(_QWORD *)(a2 + 14704);
  v27 = v76[0];
  if (*(_DWORD *)(v26 + 100) <= v76[0])
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x198D5830CLL);
  }
  v28 = *(_QWORD *)(v26 + 88);
  v78 = 227;
  v79 = *(_QWORD *)(v28 + 8 * v76[0]);
  if ((JSC::Wasm::isSubtype(v15, (unint64_t)v14, 227, v79, v20, v21, v22, v23) & 1) != 0)
  {
    v31 = *(JSC::Wasm::TypeDefinition **)(v28 + 8 * v27);
    if (*((_DWORD *)v31 + 8) == 4)
    {
      v69 = *(JSC::Wasm::TypeInformation **)(v28 + 8 * v27);
      v46 = (unsigned int *)*((_QWORD *)v31 + 1);
      v47 = *(WTF **)v46;
      v31 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v46 + 8) + 8 * v46[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v31))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v69, v48, v49, v50, v51, v52, v53, v54);
        if (v62)
        {
          v31 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v31 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v31, v47, v56, v57, v58, v59, v60, v61);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v69, v31, v63, v64, v65, v66, v67, v68);
        }
      }
    }
    v32 = *((_DWORD *)v31 + 8);
    if (v32 == 5)
    {
      v31 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v31 + 1);
      v32 = *((_DWORD *)v31 + 8);
    }
    if (v32 == 1)
    {
      *(_QWORD *)(a3 + 8) = v15;
      *(_QWORD *)(a3 + 16) = v14;
      *(_DWORD *)(a3 + 24) = v16;
      v33 = v76[1];
      *(_DWORD *)a3 = v27;
      *(_DWORD *)(a3 + 4) = v33;
      v34 = *((_QWORD *)v31 + 1) + 32 * v33;
      v35 = *(_BYTE *)(v34 + 24);
      v36 = *(_QWORD *)(v34 + 16);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v34;
      *(_QWORD *)(a3 + 48) = v36;
      *(_BYTE *)(a3 + 56) = v35;
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v72 = " type index points into a non struct type";
    v73 = 42;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral>(v71, (uint64_t)v77, (uint64_t)&v72, v29, v30);
    v45 = v71[0];
  }
  else
  {
    v72 = " structref to type ";
    v73 = 20;
    v71[0] = v15;
    v71[1] = v14;
    v70[0] = " expected ";
    v70[1] = 11;
    JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v74, a2, (uint64_t)v77, (uint64_t)&v72, (JSC::Wasm::Type *)v71, (uint64_t)v70, (JSC::Wasm::Type *)&v78, v29, v30);
    v45 = v74;
  }
LABEL_19:
  *(_QWORD *)a1 = v45;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, JSC::Wasm::Type *a5, uint64_t a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  double v37;
  float v38;
  float v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF::PrintStream *v52;
  float v53;
  double v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  char v135;
  void (**v136)(WTF::StringPrintStream *__hidden);
  WTF *v137;
  __int128 v138;
  _BYTE v139[128];
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v136 = off_1E3572250;
  v137 = (WTF *)v139;
  v138 = xmmword_199122F80;
  v139[0] = 0;
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v133, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v133 = (WTF::StringImpl *)v16;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v132, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v24 = v141;
  if (!v141)
  {
    v132 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v132);
  v24 = v141;
  if (v141 != (WTF *)v143)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a4)
  {
    v26 = *(_QWORD *)(a4 + 8);
    v14 = v26 != 0;
    v27 = v26 - 1;
    if (!v14)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v27, (uint64_t)&v133, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v133 = (WTF::StringImpl *)v28;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v131, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v36 = v141;
  if (!v141)
  {
    v131 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v131);
  v36 = v141;
  if (v141 != (WTF *)v143)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v130, a2, a5, v37, v38);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a6)
  {
    v40 = *(_QWORD *)(a6 + 8);
    v14 = v40 != 0;
    v41 = v40 - 1;
    if (!v14)
      v41 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v41, (uint64_t)&v133, v39);
  }
  else
  {
    v42 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = 0;
    *(_BYTE *)(v42 + 16) = 0;
    v133 = (WTF::StringImpl *)v42;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v135, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v50 = v141;
  if (!v141)
  {
    v133 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v133);
  v50 = v141;
  if (v141 != (WTF *)v143)
LABEL_36:
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  v51 = (WTF *)((uint64_t (*)(_QWORD))v136[4])(&v136);
  v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v51 + 32))(v51);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v140, v53);
  WTF::printExpectedCStringHelper(v52, "StringView", &v140);
  if ((_DWORD)v141 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v141])(&v135, &v140);
  v54 = (*(double (**)(WTF *))(*(_QWORD *)v51 + 40))(v51);
  WTF::printInternal(v51, (WTF::PrintStream *)&v132, v55, v56, v57, v58, v59, v60, v54, v61);
  WTF::printInternal(v51, (WTF::PrintStream *)&v131, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v51, (WTF::PrintStream *)&v130, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v51, (WTF::PrintStream *)&v133, v78, v79, v80, v81, v82, v83, v84, v85);
  v136[5]((WTF::StringPrintStream *)&v136);
  v93 = v133;
  v133 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v130;
  v130 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v131;
  v131 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v132;
  v132 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v137;
  if (v137)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v137, v138, (uint64_t *)&v140);
    v97 = v137;
    *a1 = v140;
    if (v97 == (WTF *)v139)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v97, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  double v23;
  float v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF::PrintStream *v38;
  float v39;
  double v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  char v103;
  void (**v104)(WTF::StringPrintStream *__hidden);
  WTF *v105;
  __int128 v106;
  _BYTE v107[128];
  void (**v108)(WTF::StringPrintStream *__hidden);
  WTF *v109;
  __int128 v110;
  _BYTE v111[128];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v104 = off_1E3572250;
  v105 = (WTF *)v107;
  v106 = xmmword_199122F80;
  v107[0] = 0;
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v101, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v101 = (WTF::StringImpl *)v14;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v100, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v22 = v109;
  if (!v109)
  {
    v100 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v100);
  v22 = v109;
  if (v109 != (WTF *)v111)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v99, a2, a4, v23, v24);
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a5)
  {
    v26 = *(_QWORD *)(a5 + 8);
    v12 = v26 != 0;
    v27 = v26 - 1;
    if (!v12)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v27, (uint64_t)&v101, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v101 = (WTF::StringImpl *)v28;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v103, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v36 = v109;
  if (!v109)
  {
    v101 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v101);
  v36 = v109;
  if (v109 != (WTF *)v111)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v37 = (WTF *)((uint64_t (*)(_QWORD))v104[4])(&v104);
  v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v37 + 32))(v37);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v108, v39);
  WTF::printExpectedCStringHelper(v38, "StringView", &v108);
  if ((_DWORD)v109 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v109])(&v103, &v108);
  v40 = (*(double (**)(WTF *))(*(_QWORD *)v37 + 40))(v37);
  WTF::printInternal(v37, (WTF::PrintStream *)&v100, v41, v42, v43, v44, v45, v46, v40, v47);
  WTF::printInternal(v37, (WTF::PrintStream *)&v99, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v37, (WTF::PrintStream *)&v101, v56, v57, v58, v59, v60, v61, v62, v63);
  v104[5]((WTF::StringPrintStream *)&v104);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v99;
  v99 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v100;
  v100 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v105;
  if (v105)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v105, v106, (uint64_t *)&v108);
    v74 = v105;
    *a1 = v108;
    if (v74 == (WTF *)v107)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::checkBranchTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  BOOL v10;
  JSC::Wasm::FunctionSignature *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  int32x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  double v28;
  float v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  WTF::StringImpl *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int8x16_t v56;
  void (**v57)(WTF::StringPrintStream *__hidden);

  v9 = *(_DWORD *)(a3 + 32);
  v10 = v9 == 0;
  v11 = *(JSC::Wasm::FunctionSignature **)(a3 + 40);
  v12 = 12;
  if (!v9)
    v12 = 8;
  v13 = *(_DWORD *)((char *)v11 + v12);
  if (v13)
  {
    v16 = *(unsigned int *)(a2 + 68);
    if (v16 < v13)
    {
      v24 = vdup_n_s32(v9 == 1);
      v25.i64[0] = v24.u32[0];
      v25.i64[1] = v24.u32[1];
      v26 = (int8x16_t)vdupq_n_s64(0x10uLL);
      v26.i64[0] = (uint64_t)"branch to block";
      v27 = (int8x16_t)vdupq_n_s64(0x17uLL);
      v27.i64[0] = (uint64_t)"branch out of function";
      v56 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v25, 0x3FuLL)), v27, v26);
      *(_QWORD *)&v55 = " on expression stack of size ";
      *((_QWORD *)&v55 + 1) = 30;
      v54 = v16;
      v52 = ", but block, ";
      v53 = 14;
      JSC::Wasm::FunctionSignature::toString(v11, (uint64_t *)&v51);
      *(_QWORD *)&v50 = " expects ";
      *((_QWORD *)&v50 + 1) = 10;
      v30 = 12;
      if (!*(_DWORD *)(a3 + 32))
        v30 = 8;
      v49 = *(_DWORD *)(*(_QWORD *)(a3 + 40) + v30);
      v47 = " values";
      v48 = 8;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v57, (uint64_t)&v56, (uint64_t)&v55, &v54, (uint64_t)&v52, (WTF::PrintStream *)&v51, (uint64_t)&v50, &v49, v28, v29, (uint64_t)&v47);
      *(_QWORD *)a1 = v57;
      *(_BYTE *)(a1 + 8) = 1;
      v38 = v51;
      v51 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          *(_DWORD *)v38 -= 2;
        }
      }
    }
    else
    {
      v17 = 0;
      v18 = v16 - v13;
      while (1)
      {
        v19 = v10 ? *((_DWORD *)v11 + 3) + v17 : v17;
        v20 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * (v18 + v17));
        if ((JSC::Wasm::isSubtype(*v20, v20[1], *(_QWORD *)(*(_QWORD *)v11 + 16 * v19), *(_QWORD *)(*(_QWORD *)v11 + 16 * v19 + 8), a5, a6, a7, a8) & 1) == 0)break;
        ++v17;
        v10 = *(_DWORD *)(a3 + 32) == 0;
        v11 = *(JSC::Wasm::FunctionSignature **)(a3 + 40);
        if (*(_DWORD *)(a3 + 32))
          v22 = 12;
        else
          v22 = 8;
        if (v17 >= *(unsigned int *)((char *)v11 + v22))
          goto LABEL_4;
      }
      LODWORD(v54) = v17;
      v56.i64[0] = (uint64_t)"branch's stack type is not a subtype of block's type branch target type. Stack value has type ";
      v56.i64[1] = 95;
      v55 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + 24 * (v18 + v17));
      v52 = " but branch target expects a value of ";
      v53 = 39;
      v23 = *(_QWORD *)(a3 + 40);
      if (!*(_DWORD *)(a3 + 32))
        LODWORD(v17) = *(_DWORD *)(v23 + 12) + v17;
      v50 = *(_OWORD *)(*(_QWORD *)v23 + 16 * v17);
      v47 = " at index ";
      v48 = 11;
      JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,unsigned int>(&v57, a2, (uint64_t)&v56, (JSC::Wasm::Type *)&v55, (uint64_t)&v52, (JSC::Wasm::Type *)&v50, (uint64_t)&v47, &v54, *(double *)&v50, v21);
      *(_QWORD *)a1 = v57;
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  else
  {
LABEL_4:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::atomicLoad(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  char v84;
  float v85;
  void (**v86)(WTF::StringPrintStream *__hidden);
  char *v87;
  unint64_t *v88;
  uint64_t v89;
  int v90;
  WTF::StringImpl *v91;
  void (**v92)(WTF::StringPrintStream *__hidden);
  __int128 v93;
  const char *v94;
  uint64_t v95;

  *(_QWORD *)&v93 = a4;
  *((_QWORD *)&v93 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14704) + 104) == -1)
  {
    v94 = "atomic instruction without memory";
    v95 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v92, (uint64_t)&v94, a6, a7);
LABEL_55:
    v86 = v92;
LABEL_56:
    *(_QWORD *)a1 = v86;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)a2;
  v11 = v9 > *(_QWORD *)a2;
  v12 = v9 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_58;
  v16 = 0;
  v17 = 0;
  LODWORD(v18) = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = 5;
  if (v12 < 5)
    v20 = v12;
  v21 = v20 - 1;
  *(_QWORD *)a2 = v10 + 1;
  v22 = v19 + v10;
  v23 = v10 + 2;
  while (1)
  {
    v24 = *(char *)(v22 + v16);
    v18 = ((v24 & 0x7F) << v17) | v18;
    if ((v24 & 0x80000000) == 0)
      break;
    if (v21 == v16)
      goto LABEL_58;
    LOBYTE(v25) = v23 + v16;
    *(_QWORD *)a2 = v23 + v16;
    v17 += 7;
    if (v12 == ++v16)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v16 == 4 && *(unsigned __int8 *)(v22 + v16) >= 0x10u)
  {
LABEL_58:
    v87 = "can't get load alignment";
    v88 = (unint64_t *)a2;
    v89 = 25;
LABEL_61:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v87, v88, v89, &v94, a7);
LABEL_53:
    v86 = (void (**)(WTF::StringPrintStream *__hidden))v94;
    goto LABEL_56;
  }
  if ((_DWORD)v18 != JSC::Wasm::memoryLog2Alignment())
  {
    v84 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v18, " does not match against atomic op's natural alignment ", 55, 1 << v84, &v94, v85);
    *(_QWORD *)a1 = v94;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)a2;
  v11 = v26 > *(_QWORD *)a2;
  v28 = v26 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_60;
  v16 = 0;
  v29 = 0;
  LODWORD(v18) = 0;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = 5;
  if (v28 < 5)
    v31 = v28;
  v32 = v31 - 1;
  *(_QWORD *)a2 = v27 + 1;
  v33 = v30 + v27;
  v34 = v27 + 2;
  while (1)
  {
    v25 = *(char *)(v33 + v16);
    v18 = ((v25 & 0x7F) << v29) | v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v32 == v16)
      goto LABEL_60;
    LOBYTE(v25) = v34 + v16;
    *(_QWORD *)a2 = v34 + v16;
    v29 += 7;
    if (v28 == ++v16)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v16 == 4 && v25 >= 0x10u)
  {
LABEL_60:
    v87 = "can't get load offset";
    v88 = (unint64_t *)a2;
    v89 = 22;
    goto LABEL_61;
  }
  v35 = *(_DWORD *)(a2 + 68);
  if (!v35)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, &v94, a7);
    goto LABEL_53;
  }
  v36 = *(_QWORD *)(a2 + 48);
  v37 = *(_QWORD *)(a2 + 56) + 24 * v35;
  v38 = *(unsigned __int8 *)(v37 - 24);
  v39 = *(unsigned int *)(v37 - 8);
  *(_DWORD *)(a2 + 68) = v35 - 1;
  v94 = "WasmFunctionParser.h:";
  LODWORD(v95) = 21;
  LODWORD(v92) = 616;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v94, (unsigned int *)&v92, (int **)&v91);
  v47 = v91;
  if (!v91)
  {
    __break(0xC471u);
    JUMPOUT(0x198D593D4);
  }
  v48 = *(_DWORD *)(v36 + 240);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x198D593DCLL);
  }
  *(_DWORD *)(v36 + 240) = v48 - 1;
  v91 = 0;
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
  }
  else
  {
    *(_DWORD *)v47 -= 2;
  }
  if (v38 != 255)
  {
    v90 = a3;
    v94 = " pointer type mismatch";
    v95 = 23;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v92, &v90, (uint64_t)&v94);
    goto LABEL_55;
  }
  v49 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(v49 + 253) = 1;
  v50 = *(_DWORD *)(v49 + 240);
  if (v50 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198D593E4);
  }
  v51 = *(_DWORD *)(v49 + 244);
  if (v51 <= v50)
    v51 = v50 + 1;
  *(_DWORD *)(v49 + 240) = v50 + 1;
  *(_DWORD *)(v49 + 244) = v51;
  v52 = ~v50;
  LODWORD(v94) = ~v50;
  switch(a3)
  {
    case 16:
    case 22:
      v53 = JSC::Wasm::LLIntGenerator::zeroConstant((JSC::Wasm::LLIntGenerator *)v49);
      if ((JSC::WasmI64AtomicRmw32AddU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v53, v54, v55, v56) & 1) == 0&& (JSC::WasmI64AtomicRmw32AddU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v53, v59, v60, v61) & 1) == 0)
      {
        JSC::WasmI64AtomicRmw32AddU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v53, v59, v60, v61);
      }
      break;
    case 17:
      v78 = JSC::Wasm::LLIntGenerator::zeroConstant((JSC::Wasm::LLIntGenerator *)v49);
      if ((JSC::WasmI64AtomicRmwAdd::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v78, v79, v80, v81) & 1) == 0&& (JSC::WasmI64AtomicRmwAdd::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v78, v59, v60, v61) & 1) == 0)
      {
        JSC::WasmI64AtomicRmwAdd::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v78, v59, v60, v61);
      }
      break;
    case 18:
    case 20:
      v66 = JSC::Wasm::LLIntGenerator::zeroConstant((JSC::Wasm::LLIntGenerator *)v49);
      if ((JSC::WasmI64AtomicRmw8AddU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v66, v67, v68, v69) & 1) == 0&& (JSC::WasmI64AtomicRmw8AddU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v66, v59, v60, v61) & 1) == 0)
      {
        JSC::WasmI64AtomicRmw8AddU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v66, v59, v60, v61);
      }
      break;
    case 19:
    case 21:
      v62 = JSC::Wasm::LLIntGenerator::zeroConstant((JSC::Wasm::LLIntGenerator *)v49);
      if ((JSC::WasmI64AtomicRmw16AddU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v62, v63, v64, v65) & 1) == 0&& (JSC::WasmI64AtomicRmw16AddU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v62, v59, v60, v61) & 1) == 0)
      {
        JSC::WasmI64AtomicRmw16AddU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v49, v52, v39, v18, v62, v59, v60, v61);
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198D593CCLL);
  }
  v82 = *(_DWORD *)(a2 + 68);
  if (v82 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(a2 + 56, &v93, (int *)&v94, v57, v58, v59, v60, v61);
  }
  else
  {
    v83 = *(_QWORD *)(a2 + 56) + 24 * v82;
    *(_QWORD *)v83 = a4;
    *(_QWORD *)(v83 + 8) = a5;
    *(_DWORD *)(v83 + 16) = v52;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::atomicStore(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4, uint64_t a5, double a6, float a7)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  int v62;
  char v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (**v125)(WTF::StringPrintStream *__hidden);
  char v126;
  float v127;
  char *v128;
  unint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  unsigned int v134;
  char *v135;
  unint64_t *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  void (**v143)(WTF::StringPrintStream *__hidden);
  const char *v144;
  uint64_t v145;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 14704) + 104) == -1)
  {
    v144 = "atomic instruction without memory";
    v145 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v143, (uint64_t)&v144, a6, a7);
    v125 = v143;
LABEL_66:
    *(_QWORD *)a1 = v125;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)a2;
  v11 = v9 > *(_QWORD *)a2;
  v12 = v9 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_76;
  v16 = 0;
  v17 = 0;
  LODWORD(v18) = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = 5;
  if (v12 < 5)
    v20 = v12;
  v21 = v20 - 1;
  *(_QWORD *)a2 = v10 + 1;
  v22 = v19 + v10;
  v23 = v10 + 2;
  while (1)
  {
    v24 = *(char *)(v22 + v16);
    v18 = ((v24 & 0x7F) << v17) | v18;
    if ((v24 & 0x80000000) == 0)
      break;
    if (v21 == v16)
      goto LABEL_76;
    LOBYTE(v25) = v23 + v16;
    *(_QWORD *)a2 = v23 + v16;
    v17 += 7;
    if (v12 == ++v16)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v16 == 4 && *(unsigned __int8 *)(v22 + v16) >= 0x10u)
  {
LABEL_76:
    v135 = "can't get store alignment";
    v136 = (unint64_t *)a2;
    v137 = 26;
    goto LABEL_79;
  }
  if ((_DWORD)v18 != JSC::Wasm::memoryLog2Alignment())
  {
    v126 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v18, " does not match against atomic op's natural alignment ", 55, 1 << v126, &v144, v127);
    *(_QWORD *)a1 = v144;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)a2;
  v11 = v26 > *(_QWORD *)a2;
  v28 = v26 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_78;
  v16 = 0;
  v29 = 0;
  LODWORD(v18) = 0;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = 5;
  if (v28 < 5)
    v31 = v28;
  v32 = v31 - 1;
  *(_QWORD *)a2 = v27 + 1;
  v33 = v30 + v27;
  v34 = v27 + 2;
  while (1)
  {
    v25 = *(char *)(v33 + v16);
    v18 = ((v25 & 0x7F) << v29) | v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v32 == v16)
      goto LABEL_78;
    LOBYTE(v25) = v34 + v16;
    *(_QWORD *)a2 = v34 + v16;
    v29 += 7;
    if (v28 == ++v16)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v16 == 4 && v25 >= 0x10u)
  {
LABEL_78:
    v135 = "can't get store offset";
    v136 = (unint64_t *)a2;
    v137 = 23;
LABEL_79:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v135, v136, v137, &v144, a7);
LABEL_65:
    v125 = (void (**)(WTF::StringPrintStream *__hidden))v144;
    goto LABEL_66;
  }
  v35 = *(_DWORD *)(a2 + 68);
  if (!v35)
  {
    v128 = "store value";
    v129 = (unint64_t *)a2;
    v130 = 12;
LABEL_64:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v129, 26, v128, v130, &v144, a7);
    goto LABEL_65;
  }
  v36 = *(_QWORD *)(a2 + 48);
  v37 = *(_QWORD *)(a2 + 56) + 24 * v35;
  v38 = *(_QWORD *)(v37 - 24);
  v39 = *(_QWORD *)(v37 - 16);
  v139 = *(unsigned int *)(v37 - 8);
  *(_DWORD *)(a2 + 68) = v35 - 1;
  v144 = "WasmFunctionParser.h:";
  LODWORD(v145) = 21;
  LODWORD(v143) = 638;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v144, (unsigned int *)&v143, (int **)&v142);
  v47 = v142;
  if (!v142)
  {
    __break(0xC471u);
    JUMPOUT(0x198D59A78);
  }
  v48 = *(_DWORD *)(v36 + 240);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x198D59A80);
  }
  *(_DWORD *)(v36 + 240) = v48 - 1;
  v142 = 0;
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
  }
  else
  {
    *(_DWORD *)v47 -= 2;
  }
  v49 = *(_DWORD *)(a2 + 68);
  if (!v49)
  {
    v128 = "store pointer";
    v129 = (unint64_t *)a2;
    v130 = 14;
    goto LABEL_64;
  }
  v138 = a3;
  v140 = a1;
  v50 = *(_QWORD *)(a2 + 48);
  v51 = *(_QWORD *)(a2 + 56) + 24 * v49;
  v52 = *(unsigned __int8 *)(v51 - 24);
  v53 = *(unsigned int *)(v51 - 8);
  *(_DWORD *)(a2 + 68) = v49 - 1;
  v144 = "WasmFunctionParser.h:";
  LODWORD(v145) = 21;
  LODWORD(v143) = 639;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v144, (unsigned int *)&v143, (int **)&v141);
  v61 = v141;
  if (!v141)
  {
    __break(0xC471u);
    JUMPOUT(0x198D59A88);
  }
  v62 = *(_DWORD *)(v50 + 240);
  if (!v62)
  {
    __break(0xC471u);
    JUMPOUT(0x198D59A90);
  }
  *(_DWORD *)(v50 + 240) = v62 - 1;
  v141 = 0;
  if (*(_DWORD *)v61 == 2)
  {
    WTF::StringImpl::~StringImpl(v61, v54, v55, v56, v57, v58, v59, v60);
    WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
  }
  else
  {
    *(_DWORD *)v61 -= 2;
  }
  if (v52 != 255)
  {
    v131 = a2 + 14736;
    v132 = " pointer type mismatch";
    v133 = 23;
LABEL_74:
    v144 = v132;
    v145 = v133;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v143, v131, (uint64_t)&v144);
    *(_QWORD *)v140 = v143;
    *(_BYTE *)(v140 + 8) = 1;
    return;
  }
  if (a4 != v38)
  {
LABEL_73:
    v131 = a2 + 14736;
    v132 = " value type mismatch";
    v133 = 21;
    goto LABEL_74;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (a5 == v39)
      v63 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v63 = 0;
    if ((v63 & 1) == 0)
      goto LABEL_73;
  }
  else
  {
    if (a5 == v39)
      v134 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v134 = 1;
    if (v134 == 1)
      goto LABEL_73;
  }
  v64 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(v64 + 253) = 1;
  v65 = *(_DWORD *)(v64 + 240);
  if (v65 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198D59A98);
  }
  v66 = *(_DWORD *)(v64 + 244);
  if (v66 <= v65)
    v66 = v65 + 1;
  *(_DWORD *)(v64 + 240) = v65 + 1;
  *(_DWORD *)(v64 + 244) = v66;
  v67 = ~v65;
  switch(v138)
  {
    case 23:
    case 29:
      if ((JSC::WasmI64AtomicRmw32XchgU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v64, ~v65, v53, v18, v139, v58, v59, v60) & 1) == 0&& (JSC::WasmI64AtomicRmw32XchgU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v64, v67, v53, v18, v139, v68, v69, v70) & 1) == 0)
      {
        JSC::WasmI64AtomicRmw32XchgU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v64, v67, v53, v18, v139, v71, v72, v73);
      }
      break;
    case 24:
      if ((JSC::WasmI64AtomicRmwXchg::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v64, ~v65, v53, v18, v139, v58, v59, v60) & 1) == 0&& (JSC::WasmI64AtomicRmwXchg::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v64, v67, v53, v18, v139, v102, v103, v104) & 1) == 0)
      {
        JSC::WasmI64AtomicRmwXchg::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v64, v67, v53, v18, v139, v105, v106, v107);
      }
      break;
    case 25:
    case 27:
      if ((JSC::WasmI64AtomicRmw8XchgU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v64, ~v65, v53, v18, v139, v58, v59, v60) & 1) == 0&& (JSC::WasmI64AtomicRmw8XchgU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v64, v67, v53, v18, v139, v80, v81, v82) & 1) == 0)
      {
        JSC::WasmI64AtomicRmw8XchgU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v64, v67, v53, v18, v139, v83, v84, v85);
      }
      break;
    case 26:
    case 28:
      if ((JSC::WasmI64AtomicRmw16XchgU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v64, ~v65, v53, v18, v139, v58, v59, v60) & 1) == 0&& (JSC::WasmI64AtomicRmw16XchgU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v64, v67, v53, v18, v139, v74, v75, v76) & 1) == 0)
      {
        JSC::WasmI64AtomicRmw16XchgU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v64, v67, v53, v18, v139, v77, v78, v79);
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198D59A70);
  }
  v108 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v108 = 0x1300000002;
  *(_QWORD *)(v108 + 8) = "LLINT ATOMIC IGNORE";
  *(_DWORD *)(v108 + 16) = 4;
  v116 = *(_DWORD *)(v64 + 240);
  if (!v116)
  {
    __break(0xC471u);
    JUMPOUT(0x198D59AA0);
  }
  *(_DWORD *)(v64 + 240) = v116 - 1;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v108, v109, v110, v111, v112, v113, v114, v115);
  WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
  *(_BYTE *)v140 = 0;
  *(_BYTE *)(v140 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::atomicBinaryRMW(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  int v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (**v88)(WTF::StringPrintStream *__hidden);
  char v89;
  float v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  void (**v96)(WTF::StringPrintStream *__hidden);
  unsigned int v97;
  char *v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  void (**v107)(WTF::StringPrintStream *__hidden);
  __int128 v108;
  const char *v109;
  uint64_t v110;

  *(_QWORD *)&v108 = a4;
  *((_QWORD *)&v108 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14704) + 104) == -1)
  {
    v109 = "atomic instruction without memory";
    v110 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v107, (uint64_t)&v109, a6, a7);
    v88 = v107;
LABEL_53:
    *(_QWORD *)a1 = v88;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)a2;
  v11 = v9 > *(_QWORD *)a2;
  v12 = v9 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_65;
  v15 = 0;
  v16 = 0;
  LODWORD(v17) = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = 5;
  if (v12 < 5)
    v19 = v12;
  v20 = v19 - 1;
  *(_QWORD *)a2 = v10 + 1;
  v21 = v18 + v10;
  v22 = v10 + 2;
  while (1)
  {
    v23 = *(char *)(v21 + v15);
    v17 = ((v23 & 0x7F) << v16) | v17;
    if ((v23 & 0x80000000) == 0)
      break;
    if (v20 == v15)
      goto LABEL_65;
    LOBYTE(v24) = v22 + v15;
    *(_QWORD *)a2 = v22 + v15;
    v16 += 7;
    if (v12 == ++v15)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v15 == 4 && *(unsigned __int8 *)(v21 + v15) >= 0x10u)
  {
LABEL_65:
    v98 = "can't get load alignment";
    v99 = (unint64_t *)a2;
    v100 = 25;
LABEL_68:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v98, v99, v100, &v109, a7);
    goto LABEL_52;
  }
  if ((_DWORD)v17 != JSC::Wasm::memoryLog2Alignment())
  {
    v89 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v17, " does not match against atomic op's natural alignment ", 55, 1 << v89, &v109, v90);
    *(_QWORD *)a1 = v109;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v25 = *(_QWORD *)(a2 + 16);
  v26 = *(_QWORD *)a2;
  v11 = v25 > *(_QWORD *)a2;
  v27 = v25 - *(_QWORD *)a2;
  if (!v11)
    goto LABEL_67;
  v15 = 0;
  v28 = 0;
  LODWORD(v17) = 0;
  v29 = *(_QWORD *)(a2 + 8);
  v30 = 5;
  if (v27 < 5)
    v30 = v27;
  v31 = v30 - 1;
  *(_QWORD *)a2 = v26 + 1;
  v32 = v29 + v26;
  v33 = v26 + 2;
  while (1)
  {
    v24 = *(char *)(v32 + v15);
    v17 = ((v24 & 0x7F) << v28) | v17;
    if ((v24 & 0x80000000) == 0)
      break;
    if (v31 == v15)
      goto LABEL_67;
    LOBYTE(v24) = v33 + v15;
    *(_QWORD *)a2 = v33 + v15;
    v28 += 7;
    if (v27 == ++v15)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v15 == 4 && v24 >= 0x10u)
  {
LABEL_67:
    v98 = "can't get load offset";
    v99 = (unint64_t *)a2;
    v100 = 22;
    goto LABEL_68;
  }
  v34 = *(_DWORD *)(a2 + 68);
  if (!v34)
  {
    v91 = "value";
    v92 = (unint64_t *)a2;
    v93 = 6;
LABEL_51:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v92, 26, v91, v93, &v109, a7);
LABEL_52:
    v88 = (void (**)(WTF::StringPrintStream *__hidden))v109;
    goto LABEL_53;
  }
  v102 = a3;
  v35 = *(_QWORD *)(a2 + 48);
  v36 = *(_QWORD *)(a2 + 56) + 24 * v34;
  v38 = *(_QWORD *)(v36 - 24);
  v37 = *(_QWORD *)(v36 - 16);
  v39 = *(unsigned int *)(v36 - 8);
  *(_DWORD *)(a2 + 68) = v34 - 1;
  v109 = "WasmFunctionParser.h:";
  LODWORD(v110) = 21;
  LODWORD(v107) = 660;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v109, (unsigned int *)&v107, (int **)&v106);
  v47 = v106;
  if (!v106)
  {
    __break(0xC471u);
    goto LABEL_73;
  }
  v48 = *(_DWORD *)(v35 + 240);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x198D59FB4);
  }
  *(_DWORD *)(v35 + 240) = v48 - 1;
  v106 = 0;
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v47 -= 2;
  }
  v49 = *(_DWORD *)(a2 + 68);
  if (!v49)
  {
    v91 = "pointer";
    v92 = (unint64_t *)a2;
    v93 = 8;
    goto LABEL_51;
  }
  v101 = a1;
  v50 = *(_QWORD *)(a2 + 48);
  v51 = *(_QWORD *)(a2 + 56) + 24 * v49;
  v52 = *(unsigned __int8 *)(v51 - 24);
  v53 = *(unsigned int *)(v51 - 8);
  *(_DWORD *)(a2 + 68) = v49 - 1;
  v109 = "WasmFunctionParser.h:";
  LODWORD(v110) = 21;
  LODWORD(v107) = 661;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v109, (unsigned int *)&v107, (int **)&v105);
  v61 = v105;
  if (!v105)
  {
    __break(0xC471u);
    JUMPOUT(0x198D59FBCLL);
  }
  v62 = *(_DWORD *)(v50 + 240);
  if (!v62)
  {
    __break(0xC471u);
LABEL_73:
    JUMPOUT(0x198D59FACLL);
  }
  *(_DWORD *)(v50 + 240) = v62 - 1;
  v105 = 0;
  if (*(_DWORD *)v61 == 2)
  {
    WTF::StringImpl::~StringImpl(v61, v54, v55, v56, v57, v58, v59, v60);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v61 -= 2;
  }
  if (v52 != 255)
  {
    v104 = v102;
    v94 = " pointer type mismatch";
    v95 = 23;
LABEL_62:
    v109 = v94;
    v110 = v95;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v107, &v104, (uint64_t)&v109);
    v96 = v107;
    goto LABEL_63;
  }
  if (a4 != v38)
  {
LABEL_61:
    v104 = v102;
    v94 = " value type mismatch";
    v95 = 21;
    goto LABEL_62;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (a5 == v37)
      v63 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v63 = 0;
    if ((v63 & 1) == 0)
      goto LABEL_61;
  }
  else
  {
    if (a5 == v37)
      v97 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v97 = 1;
    if (v97 == 1)
      goto LABEL_61;
  }
  LODWORD(v107) = 0x3FFFFFFF;
  JSC::Wasm::LLIntGenerator::atomicBinaryRMW(&v109, *(_QWORD *)(a2 + 48), v102, v53, v39, (int *)&v107, v17, v60);
  if ((_BYTE)v110)
  {
    v96 = (void (**)(WTF::StringPrintStream *__hidden))v109;
LABEL_63:
    *(_QWORD *)v101 = v96;
    *(_BYTE *)(v101 + 8) = 1;
    return;
  }
  v69 = *(_DWORD *)(a2 + 68);
  if (v69 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(a2 + 56, &v108, (int *)&v107, v64, v65, v66, v67, v68);
  }
  else
  {
    v70 = *(_QWORD *)(a2 + 56) + 24 * v69;
    v71 = (int)v107;
    *(_QWORD *)v70 = a4;
    *(_QWORD *)(v70 + 8) = a5;
    *(_DWORD *)(v70 + 16) = v71;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)v101 = 0;
  *(_BYTE *)(v101 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::atomicWait(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4, uint64_t a5, double a6, float a7)
{
  unsigned int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  unint64_t *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  signed int v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  int v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  _BOOL4 v88;
  signed int v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  _BOOL4 v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  _BOOL4 v131;
  _BOOL4 v132;
  _BOOL4 v133;
  _BOOL4 v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  unsigned int v140;
  unsigned int v141;
  char v142;
  _BOOL4 v143;
  _BOOL4 v144;
  _BOOL4 v145;
  _BOOL4 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int16 v154;
  unsigned __int16 v155;
  unsigned __int16 v156;
  unsigned __int16 v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  unsigned int v163;
  unsigned int v164;
  char v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  void (**v207)(WTF::StringPrintStream *__hidden);
  char v208;
  float v209;
  char *v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  unsigned int v216;
  char *v217;
  unint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  signed int v222;
  unsigned int v223;
  int v224;
  int v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  void (**v229)(WTF::StringPrintStream *__hidden);
  const char *v230;
  uint64_t v231;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 14704) + 104) == -1)
  {
    v230 = "atomic instruction without memory";
    v231 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v229, (uint64_t)&v230, a6, a7);
    v207 = v229;
LABEL_204:
    *(_QWORD *)a1 = v207;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_218;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_218;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_218:
    v217 = "can't get load alignment";
    v218 = (unint64_t *)a2;
    v219 = 25;
LABEL_221:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v217, v218, v219, &v230, a7);
    goto LABEL_203;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v208 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v208, &v230, v209);
    *(_QWORD *)a1 = v230;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_220;
  v17 = 0;
  v30 = 0;
  v7 = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 |= (v26 & 0x7F) << v30;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_220;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_220:
    v217 = "can't get load offset";
    v218 = (unint64_t *)a2;
    v219 = 22;
    goto LABEL_221;
  }
  v36 = *(_DWORD *)(a2 + 68);
  if (!v36)
  {
    v210 = "timeout";
    v66 = (unint64_t *)a2;
LABEL_201:
    v211 = 8;
    goto LABEL_202;
  }
  v224 = a3;
  v37 = *(_QWORD *)(a2 + 48);
  v38 = *(_QWORD *)(a2 + 56) + 24 * v36;
  v39 = *(unsigned __int8 *)(v38 - 24);
  v221 = *(_DWORD *)(v38 - 8);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v230 = "WasmFunctionParser.h:";
  LODWORD(v231) = 21;
  LODWORD(v229) = 712;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v230, (unsigned int *)&v229, (int **)&v228);
  v47 = v228;
  if (!v228)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5B01CLL);
  }
  v48 = *(_DWORD *)(v37 + 240);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5B024);
  }
  *(_DWORD *)(v37 + 240) = v48 - 1;
  v228 = 0;
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
  }
  else
  {
    *(_DWORD *)v47 -= 2;
  }
  v49 = *(_DWORD *)(a2 + 68);
  if (!v49)
  {
    v210 = "value";
    v66 = (unint64_t *)a2;
    v211 = 6;
LABEL_202:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v66, 26, v210, v211, &v230, a7);
LABEL_203:
    v207 = (void (**)(WTF::StringPrintStream *__hidden))v230;
    goto LABEL_204;
  }
  v220 = v39;
  v50 = a2;
  v51 = a4;
  v52 = *(_QWORD *)(v50 + 48);
  v53 = *(_QWORD *)(v50 + 56) + 24 * v49;
  v54 = *(_QWORD *)(v53 - 24);
  v55 = *(_QWORD *)(v53 - 16);
  v222 = *(_DWORD *)(v53 - 8);
  v223 = v7;
  v56 = v50;
  *(_DWORD *)(v50 + 68) = v49 - 1;
  v230 = "WasmFunctionParser.h:";
  LODWORD(v231) = 21;
  LODWORD(v229) = 713;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v230, (unsigned int *)&v229, (int **)&v227);
  v64 = v227;
  if (!v227)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5B02CLL);
  }
  v65 = *(_DWORD *)(v52 + 240);
  if (!v65)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5B034);
  }
  *(_DWORD *)(v52 + 240) = v65 - 1;
  v227 = 0;
  if (*(_DWORD *)v64 == 2)
  {
    WTF::StringImpl::~StringImpl(v64, v57, v58, v59, v60, v61, v62, v63);
    WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
  }
  else
  {
    *(_DWORD *)v64 -= 2;
  }
  v66 = (unint64_t *)v56;
  v67 = *(_DWORD *)(v56 + 68);
  if (!v67)
  {
    v210 = "pointer";
    goto LABEL_201;
  }
  v68 = a5;
  v69 = a1;
  v70 = *(_QWORD *)(v56 + 48);
  v71 = *(_QWORD *)(v56 + 56) + 24 * v67;
  v72 = *(unsigned __int8 *)(v71 - 24);
  v73 = *(_DWORD *)(v71 - 8);
  *(_DWORD *)(v56 + 68) = v67 - 1;
  v230 = "WasmFunctionParser.h:";
  LODWORD(v231) = 21;
  LODWORD(v229) = 714;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v230, (unsigned int *)&v229, (int **)&v226);
  v81 = v226;
  if (!v226)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5B03CLL);
  }
  v82 = *(_DWORD *)(v70 + 240);
  if (!v82)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5B044);
  }
  *(_DWORD *)(v70 + 240) = v82 - 1;
  v226 = 0;
  if (*(_DWORD *)v81 == 2)
  {
    WTF::StringImpl::~StringImpl(v81, v74, v75, v76, v77, v78, v79, v80);
    WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
  }
  else
  {
    *(_DWORD *)v81 -= 2;
  }
  if (v72 != 255)
  {
    v225 = v224;
    v212 = " pointer type mismatch";
LABEL_207:
    v213 = 23;
LABEL_216:
    v230 = v212;
    v231 = v213;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v229, &v225, (uint64_t)&v230);
    *(_QWORD *)v69 = v229;
    *(_BYTE *)(v69 + 8) = 1;
    return;
  }
  if (v51 != v54)
  {
LABEL_215:
    v225 = v224;
    v212 = " value type mismatch";
    v213 = 21;
    goto LABEL_216;
  }
  if (v51 - 239 < 2 || v51 == 227)
  {
    if (v68 == v55)
      v83 = ((v51 + 29) < 0xEu) & (0x3001u >> (v51 + 29));
    else
      v83 = 0;
    if ((v83 & 1) == 0)
      goto LABEL_215;
  }
  else
  {
    if (v68 == v55)
      v216 = ((v51 + 29) < 0xEu) & (0x3001u >> (v51 + 29));
    else
      v216 = 1;
    if (v216 == 1)
      goto LABEL_215;
  }
  if (v220 != 254)
  {
    v225 = v224;
    v212 = " timeout type mismatch";
    goto LABEL_207;
  }
  v84 = v56;
  v85 = *(_QWORD *)(v56 + 48);
  *(_BYTE *)(v85 + 253) = 1;
  v86 = *(_DWORD *)(v85 + 240);
  if (v86 == -1)
    goto LABEL_241;
  v87 = *(_DWORD *)(v85 + 244);
  if (v87 <= v86)
    v87 = v86 + 1;
  *(_DWORD *)(v85 + 240) = v86 + 1;
  *(_DWORD *)(v85 + 244) = v87;
  LODWORD(v229) = ~v86;
  if (v224 != 2)
  {
    if (v224 == 1)
    {
      v88 = (v86 + 1073741936) < 0x80;
      if (v86 >= -1073741824)
        v88 = (v86 + 16) < 0x90;
      v89 = v221;
      if (v88)
      {
        v90 = (v73 - 1073741808) < 0x80;
        if (v73 <= 0x3FFFFFFF)
          v90 = (v73 + 128) < 0x90;
        if (v223 <= 0xFF && v90)
        {
          v91 = (v222 - 1073741808) < 0x80;
          if (v222 <= 0x3FFFFFFF)
            v91 = (v222 + 128) < 0x90;
          if (v91)
          {
            v92 = (v221 - 1073741808) < 0x80;
            if (v221 <= 0x3FFFFFFF)
              v92 = (v221 + 128) < 0x90;
            if (v92)
            {
              v93 = *(_DWORD *)(v85 + 16);
              v230 = (const char *)v85;
              LODWORD(v231) = v93;
              JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v85 + 40), &v230, v75, v76, v77, v78, v79, v80);
              v99 = -38;
              *(_DWORD *)(v85 + 36) = 218;
              LOBYTE(v230) = -38;
              v100 = *(unsigned int *)(v85 + 12);
              v101 = *(unsigned int *)(v85 + 16);
              if (v100 <= v101)
              {
                if ((_DWORD)v100 != *(_DWORD *)(v85 + 8))
                {
                  v102 = *(_QWORD *)v85;
                  v103 = -38;
LABEL_83:
                  *(_BYTE *)(v102 + v100) = v103;
LABEL_84:
                  v109 = *(_DWORD *)(v85 + 12) + 1;
                  v110 = *(_DWORD *)(v85 + 16) + 1;
                  *(_DWORD *)(v85 + 12) = v109;
                  *(_DWORD *)(v85 + 16) = v110;
LABEL_85:
                  v111 = 15 - v86;
                  if (v86 >= -1073741824)
                    v111 = ~(_BYTE)v86;
                  LOBYTE(v230) = v111;
                  if (v109 > v110)
                  {
                    *(_DWORD *)(v85 + 16) = v110 + 1;
                    *(_BYTE *)(*(_QWORD *)v85 + v110) = v111;
                    v114 = *(_DWORD *)(v85 + 12);
                    v115 = *(_DWORD *)(v85 + 16);
                  }
                  else
                  {
                    v112 = v109;
                    if (v109 == *(_DWORD *)(v85 + 8))
                    {
                      v202 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v109 + 1), (unint64_t)&v230);
                      v112 = *(unsigned int *)(v85 + 12);
                      v113 = *(_QWORD *)v85;
                      v111 = *v202;
                    }
                    else
                    {
                      v113 = *(_QWORD *)v85;
                    }
                    *(_BYTE *)(v113 + v112) = v111;
                    v114 = *(_DWORD *)(v85 + 12) + 1;
                    v115 = *(_DWORD *)(v85 + 16) + 1;
                    *(_DWORD *)(v85 + 12) = v114;
                    *(_DWORD *)(v85 + 16) = v115;
                  }
                  v116 = v73 + 16;
                  if (v73 <= 0x3FFFFFFF)
                    v116 = v73;
                  LOBYTE(v230) = v116;
                  if (v114 > v115)
                  {
                    *(_DWORD *)(v85 + 16) = v115 + 1;
                    *(_BYTE *)(*(_QWORD *)v85 + v115) = v116;
                    v119 = *(_DWORD *)(v85 + 12);
                    v120 = *(_DWORD *)(v85 + 16);
                  }
                  else
                  {
                    v117 = v114;
                    if (v114 == *(_DWORD *)(v85 + 8))
                    {
                      v203 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v114 + 1), (unint64_t)&v230);
                      v117 = *(unsigned int *)(v85 + 12);
                      v118 = *(_QWORD *)v85;
                      v116 = *v203;
                    }
                    else
                    {
                      v118 = *(_QWORD *)v85;
                    }
                    *(_BYTE *)(v118 + v117) = v116;
                    v119 = *(_DWORD *)(v85 + 12) + 1;
                    v120 = *(_DWORD *)(v85 + 16) + 1;
                    *(_DWORD *)(v85 + 12) = v119;
                    *(_DWORD *)(v85 + 16) = v120;
                  }
                  LOBYTE(v230) = v223;
                  if (v119 > v120)
                  {
                    *(_DWORD *)(v85 + 16) = v120 + 1;
                    *(_BYTE *)(*(_QWORD *)v85 + v120) = v223;
                    v121 = *(_DWORD *)(v85 + 12);
                    v122 = *(_DWORD *)(v85 + 16);
                  }
                  else
                  {
                    if (v119 == *(_DWORD *)(v85 + 8))
                      *(_BYTE *)(*(_QWORD *)v85 + *(unsigned int *)(v85 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v119 + 1), (unint64_t)&v230);
                    else
                      *(_BYTE *)(*(_QWORD *)v85 + v119) = v223;
                    v121 = *(_DWORD *)(v85 + 12) + 1;
                    v122 = *(_DWORD *)(v85 + 16) + 1;
                    *(_DWORD *)(v85 + 12) = v121;
                    *(_DWORD *)(v85 + 16) = v122;
                  }
                  v123 = v222 + 16;
                  if (v222 <= 0x3FFFFFFF)
                    v123 = v222;
                  LOBYTE(v230) = v123;
                  if (v121 > v122)
                  {
                    *(_DWORD *)(v85 + 16) = v122 + 1;
                    *(_BYTE *)(*(_QWORD *)v85 + v122) = v123;
                    v126 = *(_DWORD *)(v85 + 12);
                    v127 = *(_DWORD *)(v85 + 16);
                  }
                  else
                  {
                    v124 = v121;
                    if (v121 == *(_DWORD *)(v85 + 8))
                    {
                      v204 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v121 + 1), (unint64_t)&v230);
                      v124 = *(unsigned int *)(v85 + 12);
                      v125 = *(_QWORD *)v85;
                      v123 = *v204;
                    }
                    else
                    {
                      v125 = *(_QWORD *)v85;
                    }
                    *(_BYTE *)(v125 + v124) = v123;
                    v126 = *(_DWORD *)(v85 + 12) + 1;
                    v127 = *(_DWORD *)(v85 + 16) + 1;
                    *(_DWORD *)(v85 + 12) = v126;
                    *(_DWORD *)(v85 + 16) = v127;
                  }
                  v128 = v89 + 16;
                  if (v89 <= 0x3FFFFFFF)
                    v128 = v89;
                  LOBYTE(v230) = v128;
                  if (v126 > v127)
                  {
                    *(_DWORD *)(v85 + 16) = v127 + 1;
                    *(_BYTE *)(*(_QWORD *)v85 + v127) = v128;
                  }
                  else
                  {
                    v129 = v126;
                    if (v126 == *(_DWORD *)(v85 + 8))
                    {
                      v205 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v126 + 1), (unint64_t)&v230);
                      v129 = *(unsigned int *)(v85 + 12);
                      v130 = *(_QWORD *)v85;
                      v128 = *v205;
                    }
                    else
                    {
                      v130 = *(_QWORD *)v85;
                    }
                    *(_BYTE *)(v130 + v129) = v128;
                    *(int32x2_t *)(v85 + 12) = vadd_s32(*(int32x2_t *)(v85 + 12), (int32x2_t)0x100000001);
                  }
                  goto LABEL_179;
                }
                goto LABEL_189;
              }
              goto LABEL_226;
            }
          }
        }
      }
      if (v86 >= -1073741824)
        v143 = (v86 + 64) >> 6 < 0x201;
      else
        v143 = (v86 + 1073774528) < 0x8000;
      if (v143)
      {
        v144 = (v73 - 1073741760) < 0x8000;
        if (v73 <= 0x3FFFFFFF)
          v144 = (v73 + 0x8000) >> 6 < 0x201;
        if (!HIWORD(v223) && v144)
        {
          v145 = (v222 - 1073741760) < 0x8000;
          if (v222 <= 0x3FFFFFFF)
            v145 = (v222 + 0x8000) >> 6 < 0x201;
          if (v145)
          {
            v146 = (v221 - 1073741760) < 0x8000;
            if (v221 <= 0x3FFFFFFF)
              v146 = (v221 + 0x8000) >> 6 < 0x201;
            if (v146)
            {
              v147 = *(_DWORD *)(v85 + 16);
              v230 = (const char *)v85;
              LODWORD(v231) = v147;
              JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v85 + 40), &v230, v75, v76, v77, v78, v79, v80);
              *(_DWORD *)(v85 + 36) = 218;
              LOBYTE(v230) = -115;
              v148 = *(unsigned int *)(v85 + 12);
              v149 = *(unsigned int *)(v85 + 16);
              if (v148 > v149)
              {
                *(_DWORD *)(v85 + 16) = v149 + 1;
                *(_BYTE *)(*(_QWORD *)v85 + v149) = -115;
                v140 = *(_DWORD *)(v85 + 12);
                v141 = *(_DWORD *)(v85 + 16);
              }
              else
              {
                if ((_DWORD)v148 == *(_DWORD *)(v85 + 8))
                {
                  v215 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v148 + 1), (unint64_t)&v230);
                  v148 = *(unsigned int *)(v85 + 12);
                  v150 = *(_QWORD *)v85;
                  v151 = *v215;
                }
                else
                {
                  v150 = *(_QWORD *)v85;
                  v151 = -115;
                }
                *(_BYTE *)(v150 + v148) = v151;
                v140 = *(_DWORD *)(v85 + 12) + 1;
                v141 = *(_DWORD *)(v85 + 16) + 1;
                *(_DWORD *)(v85 + 12) = v140;
                *(_DWORD *)(v85 + 16) = v141;
              }
              v142 = -38;
LABEL_151:
              LOBYTE(v230) = v142;
              if (v140 > v141)
              {
                *(_DWORD *)(v85 + 16) = v141 + 1;
                *(_BYTE *)(*(_QWORD *)v85 + v141) = v142;
              }
              else
              {
                v152 = v140;
                if (v140 == *(_DWORD *)(v85 + 8))
                {
                  v206 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v140 + 1), (unint64_t)&v230);
                  v152 = *(unsigned int *)(v85 + 12);
                  v153 = *(_QWORD *)v85;
                  v142 = *v206;
                }
                else
                {
                  v153 = *(_QWORD *)v85;
                }
                *(_BYTE *)(v153 + v152) = v142;
                *(int32x2_t *)(v85 + 12) = vadd_s32(*(int32x2_t *)(v85 + 12), (int32x2_t)0x100000001);
              }
              v154 = 63 - v86;
              if (v86 >= -1073741824)
                v154 = ~(_WORD)v86;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v85, v154);
              v155 = v73 + 64;
              if (v73 <= 0x3FFFFFFF)
                v155 = v73;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v85, v155);
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v85, (unsigned __int16)v223);
              v156 = v222 + 64;
              if (v222 <= 0x3FFFFFFF)
                v156 = v222;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v85, v156);
              v157 = v89 + 64;
              if (v89 <= 0x3FFFFFFF)
                v157 = v89;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v85, v157);
              goto LABEL_179;
            }
          }
        }
      }
      v166 = *(_DWORD *)(v85 + 16);
      v230 = (const char *)v85;
      LODWORD(v231) = v166;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v85 + 40), &v230, v75, v76, v77, v78, v79, v80);
      *(_DWORD *)(v85 + 36) = 218;
      LOBYTE(v230) = -114;
      v167 = *(unsigned int *)(v85 + 12);
      v168 = *(unsigned int *)(v85 + 16);
      if (v167 > v168)
      {
        *(_DWORD *)(v85 + 16) = v168 + 1;
        *(_BYTE *)(*(_QWORD *)v85 + v168) = -114;
        v163 = *(_DWORD *)(v85 + 12);
        v164 = *(_DWORD *)(v85 + 16);
      }
      else
      {
        if ((_DWORD)v167 == *(_DWORD *)(v85 + 8))
        {
          v201 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v167 + 1), (unint64_t)&v230);
          v167 = *(unsigned int *)(v85 + 12);
          v169 = *(_QWORD *)v85;
          v170 = *v201;
        }
        else
        {
          v169 = *(_QWORD *)v85;
          v170 = -114;
        }
        *(_BYTE *)(v169 + v167) = v170;
        v163 = *(_DWORD *)(v85 + 12) + 1;
        v164 = *(_DWORD *)(v85 + 16) + 1;
        *(_DWORD *)(v85 + 12) = v163;
        *(_DWORD *)(v85 + 16) = v164;
      }
      v165 = -38;
      goto LABEL_174;
    }
LABEL_241:
    __break(0xC471u);
    JUMPOUT(0x198D5AF44);
  }
  v104 = (v86 + 1073741936) < 0x80;
  if (v86 >= -1073741824)
    v104 = (v86 + 16) < 0x90;
  v89 = v221;
  if (v104)
  {
    v105 = (v73 - 1073741808) < 0x80;
    if (v73 <= 0x3FFFFFFF)
      v105 = (v73 + 128) < 0x90;
    if (v223 <= 0xFF && v105)
    {
      v106 = (v222 - 1073741808) < 0x80;
      if (v222 <= 0x3FFFFFFF)
        v106 = (v222 + 128) < 0x90;
      if (v106)
      {
        v107 = (v221 - 1073741808) < 0x80;
        if (v221 <= 0x3FFFFFFF)
          v107 = (v221 + 128) < 0x90;
        if (v107)
        {
          v108 = *(_DWORD *)(v85 + 16);
          v230 = (const char *)v85;
          LODWORD(v231) = v108;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v85 + 40), &v230, v75, v76, v77, v78, v79, v80);
          v99 = -37;
          *(_DWORD *)(v85 + 36) = 219;
          LOBYTE(v230) = -37;
          v100 = *(unsigned int *)(v85 + 12);
          v101 = *(unsigned int *)(v85 + 16);
          if (v100 <= v101)
          {
            if ((_DWORD)v100 != *(_DWORD *)(v85 + 8))
            {
              v102 = *(_QWORD *)v85;
              v103 = -37;
              goto LABEL_83;
            }
LABEL_189:
            *(_BYTE *)(*(_QWORD *)v85 + *(unsigned int *)(v85 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v100 + 1), (unint64_t)&v230);
            goto LABEL_84;
          }
LABEL_226:
          *(_DWORD *)(v85 + 16) = v101 + 1;
          *(_BYTE *)(*(_QWORD *)v85 + v101) = v99;
          v109 = *(_DWORD *)(v85 + 12);
          v110 = *(_DWORD *)(v85 + 16);
          goto LABEL_85;
        }
      }
    }
  }
  if (v86 >= -1073741824)
    v131 = (v86 + 64) >> 6 < 0x201;
  else
    v131 = (v86 + 1073774528) < 0x8000;
  if (v131)
  {
    v132 = (v73 - 1073741760) < 0x8000;
    if (v73 <= 0x3FFFFFFF)
      v132 = (v73 + 0x8000) >> 6 < 0x201;
    if (!HIWORD(v223) && v132)
    {
      v133 = (v222 - 1073741760) < 0x8000;
      if (v222 <= 0x3FFFFFFF)
        v133 = (v222 + 0x8000) >> 6 < 0x201;
      if (v133)
      {
        v134 = (v221 - 1073741760) < 0x8000;
        if (v221 <= 0x3FFFFFFF)
          v134 = (v221 + 0x8000) >> 6 < 0x201;
        if (v134)
        {
          v135 = *(_DWORD *)(v85 + 16);
          v230 = (const char *)v85;
          LODWORD(v231) = v135;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v85 + 40), &v230, v75, v76, v77, v78, v79, v80);
          *(_DWORD *)(v85 + 36) = 219;
          LOBYTE(v230) = -115;
          v136 = *(unsigned int *)(v85 + 12);
          v137 = *(unsigned int *)(v85 + 16);
          if (v136 > v137)
          {
            *(_DWORD *)(v85 + 16) = v137 + 1;
            *(_BYTE *)(*(_QWORD *)v85 + v137) = -115;
            v140 = *(_DWORD *)(v85 + 12);
            v141 = *(_DWORD *)(v85 + 16);
          }
          else
          {
            if ((_DWORD)v136 == *(_DWORD *)(v85 + 8))
            {
              v214 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v136 + 1), (unint64_t)&v230);
              v136 = *(unsigned int *)(v85 + 12);
              v138 = *(_QWORD *)v85;
              v139 = *v214;
            }
            else
            {
              v138 = *(_QWORD *)v85;
              v139 = -115;
            }
            *(_BYTE *)(v138 + v136) = v139;
            v140 = *(_DWORD *)(v85 + 12) + 1;
            v141 = *(_DWORD *)(v85 + 16) + 1;
            *(_DWORD *)(v85 + 12) = v140;
            *(_DWORD *)(v85 + 16) = v141;
          }
          v142 = -37;
          goto LABEL_151;
        }
      }
    }
  }
  v158 = *(_DWORD *)(v85 + 16);
  v230 = (const char *)v85;
  LODWORD(v231) = v158;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v85 + 40), &v230, v75, v76, v77, v78, v79, v80);
  *(_DWORD *)(v85 + 36) = 219;
  LOBYTE(v230) = -114;
  v159 = *(unsigned int *)(v85 + 12);
  v160 = *(unsigned int *)(v85 + 16);
  if (v159 > v160)
  {
    *(_DWORD *)(v85 + 16) = v160 + 1;
    *(_BYTE *)(*(_QWORD *)v85 + v160) = -114;
    v163 = *(_DWORD *)(v85 + 12);
    v164 = *(_DWORD *)(v85 + 16);
  }
  else
  {
    if ((_DWORD)v159 == *(_DWORD *)(v85 + 8))
    {
      v200 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v159 + 1), (unint64_t)&v230);
      v159 = *(unsigned int *)(v85 + 12);
      v161 = *(_QWORD *)v85;
      v162 = *v200;
    }
    else
    {
      v161 = *(_QWORD *)v85;
      v162 = -114;
    }
    *(_BYTE *)(v161 + v159) = v162;
    v163 = *(_DWORD *)(v85 + 12) + 1;
    v164 = *(_DWORD *)(v85 + 16) + 1;
    *(_DWORD *)(v85 + 12) = v163;
    *(_DWORD *)(v85 + 16) = v164;
  }
  v165 = -37;
LABEL_174:
  LOBYTE(v230) = v165;
  if (v163 > v164)
  {
    *(_DWORD *)(v85 + 16) = v164 + 1;
    *(_BYTE *)(*(_QWORD *)v85 + v164) = v165;
  }
  else
  {
    v171 = v163;
    if (v163 == *(_DWORD *)(v85 + 8))
    {
      v199 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, (WTF *)(v163 + 1), (unint64_t)&v230);
      v171 = *(unsigned int *)(v85 + 12);
      v172 = *(_QWORD *)v85;
      v165 = *v199;
    }
    else
    {
      v172 = *(_QWORD *)v85;
    }
    *(_BYTE *)(v172 + v171) = v165;
    *(int32x2_t *)(v85 + 12) = vadd_s32(*(int32x2_t *)(v85 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v85, ~v86);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v85, v73);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v85, v223);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v85, v222);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v85, v89);
LABEL_179:
  v173 = *(_DWORD *)(v84 + 68);
  if (v173 == *(_DWORD *)(v84 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(v84 + 56, &JSC::Wasm::Types::I32, (int *)&v229, v94, v95, v96, v97, v98);
  }
  else
  {
    v174 = *(_QWORD *)(v84 + 56) + 24 * v173;
    *(_OWORD *)v174 = xmmword_19915A130;
    *(_DWORD *)(v174 + 16) = ~v86;
    ++*(_DWORD *)(v84 + 68);
  }
  *(_BYTE *)v69 = 0;
  *(_BYTE *)(v69 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::atomicCompareExchange(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  unsigned int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  signed int v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  signed int v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  int v82;
  signed int v83;
  uint64_t v84;
  signed int v85;
  char v86;
  char v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  _BOOL4 v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _BOOL4 v106;
  _BOOL4 v107;
  _BOOL4 v108;
  _BOOL4 v109;
  int v110;
  _BOOL4 v111;
  _BOOL4 v112;
  _BOOL4 v113;
  _BOOL4 v114;
  int v115;
  _BOOL4 v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  _BOOL4 v128;
  _BOOL4 v129;
  _BOOL4 v130;
  _BOOL4 v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  _BOOL4 v137;
  _BOOL4 v138;
  _BOOL4 v139;
  _BOOL4 v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  unsigned int v151;
  unsigned int v152;
  char v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _BOOL4 v188;
  _BOOL4 v189;
  _BOOL4 v190;
  _BOOL4 v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  char v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  _BOOL4 v216;
  _BOOL4 v217;
  _BOOL4 v218;
  _BOOL4 v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int16 v227;
  unsigned __int16 v228;
  unsigned __int16 v229;
  unsigned __int16 v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  int v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  void (**v251)(WTF::StringPrintStream *__hidden);
  char v252;
  float v253;
  char *v254;
  unint64_t *v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  unsigned int v263;
  unsigned int v264;
  char *v265;
  unint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  unsigned __int8 v269;
  signed int v270;
  int v271;
  unsigned int v272;
  uint64_t v273;
  int v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  void (**v278)(WTF::StringPrintStream *__hidden);
  __int128 v279;
  const char *v280;
  uint64_t v281;

  *(_QWORD *)&v279 = a4;
  *((_QWORD *)&v279 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14704) + 104) == -1)
  {
    v280 = "atomic instruction without memory";
    v281 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v278, (uint64_t)&v280, a6, a7);
    v251 = v278;
LABEL_289:
    *(_QWORD *)a1 = v251;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_309;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_309;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_309:
    v265 = "can't get load alignment";
    v266 = (unint64_t *)a2;
    v267 = 25;
    goto LABEL_312;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v252 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v252, &v280, v253);
    *(_QWORD *)a1 = v280;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_311;
  v17 = 0;
  v30 = 0;
  v7 = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 |= (v26 & 0x7F) << v30;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_311;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_311:
    v265 = "can't get load offset";
    v266 = (unint64_t *)a2;
    v267 = 22;
LABEL_312:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v265, v266, v267, &v280, a7);
LABEL_288:
    v251 = (void (**)(WTF::StringPrintStream *__hidden))v280;
    goto LABEL_289;
  }
  v36 = *(_DWORD *)(a2 + 68);
  if (!v36)
  {
    v254 = "value";
    v255 = (unint64_t *)a2;
    v256 = 6;
LABEL_287:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v255, 26, v254, v256, &v280, a7);
    goto LABEL_288;
  }
  v271 = a3;
  v37 = a4;
  v38 = *(_QWORD *)(a2 + 48);
  v39 = *(_QWORD *)(a2 + 56) + 24 * v36;
  v41 = *(_QWORD *)(v39 - 24);
  v40 = *(_QWORD *)(v39 - 16);
  v270 = *(_DWORD *)(v39 - 8);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v280 = "WasmFunctionParser.h:";
  LODWORD(v281) = 21;
  LODWORD(v278) = 685;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v280, (unsigned int *)&v278, (int **)&v277);
  v49 = v277;
  if (!v277)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5C784);
  }
  v50 = *(_DWORD *)(v38 + 240);
  if (!v50)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5C78CLL);
  }
  *(_DWORD *)(v38 + 240) = v50 - 1;
  v277 = 0;
  if (*(_DWORD *)v49 == 2)
  {
    WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
  }
  else
  {
    *(_DWORD *)v49 -= 2;
  }
  v51 = *(_DWORD *)(a2 + 68);
  if (!v51)
  {
    v254 = "expected";
    v255 = (unint64_t *)a2;
    v256 = 9;
    goto LABEL_287;
  }
  v268 = v40;
  v269 = v41;
  v272 = v7;
  v52 = a5;
  v53 = *(_QWORD *)(a2 + 48);
  v54 = *(_QWORD *)(a2 + 56) + 24 * v51;
  v55 = *(_QWORD *)(v54 - 24);
  v56 = *(_QWORD *)(v54 - 16);
  v57 = *(_DWORD *)(v54 - 8);
  *(_DWORD *)(a2 + 68) = v51 - 1;
  v280 = "WasmFunctionParser.h:";
  LODWORD(v281) = 21;
  LODWORD(v278) = 686;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v280, (unsigned int *)&v278, (int **)&v276);
  v65 = v276;
  if (!v276)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5C794);
  }
  v66 = *(_DWORD *)(v53 + 240);
  if (!v66)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5C79CLL);
  }
  *(_DWORD *)(v53 + 240) = v66 - 1;
  v276 = 0;
  if (*(_DWORD *)v65 == 2)
  {
    WTF::StringImpl::~StringImpl(v65, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
  }
  else
  {
    *(_DWORD *)v65 -= 2;
  }
  v67 = *(_DWORD *)(a2 + 68);
  if (!v67)
  {
    v254 = "pointer";
    v255 = (unint64_t *)a2;
    v256 = 8;
    goto LABEL_287;
  }
  v68 = a2;
  v69 = a1;
  v70 = *(_QWORD *)(v68 + 48);
  v71 = *(_QWORD *)(v68 + 56) + 24 * v67;
  v72 = *(unsigned __int8 *)(v71 - 24);
  v73 = *(_DWORD *)(v71 - 8);
  v273 = v68;
  *(_DWORD *)(v68 + 68) = v67 - 1;
  v280 = "WasmFunctionParser.h:";
  LODWORD(v281) = 21;
  LODWORD(v278) = 687;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v280, (unsigned int *)&v278, (int **)&v275);
  v81 = v275;
  if (!v275)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5C7A4);
  }
  v82 = *(_DWORD *)(v70 + 240);
  if (!v82)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5C7ACLL);
  }
  *(_DWORD *)(v70 + 240) = v82 - 1;
  v275 = 0;
  if (*(_DWORD *)v81 == 2)
  {
    WTF::StringImpl::~StringImpl(v81, v74, v75, v76, v77, v78, v79, v80);
    WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
  }
  else
  {
    *(_DWORD *)v81 -= 2;
  }
  v83 = v73;
  if (v72 != 255)
  {
    v274 = v271;
    v257 = " pointer type mismatch";
    v258 = 23;
LABEL_307:
    v280 = v257;
    v281 = v258;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v278, &v274, (uint64_t)&v280);
    *(_QWORD *)v69 = v278;
    *(_BYTE *)(v69 + 8) = 1;
    return;
  }
  if (v37 != v55)
  {
LABEL_300:
    v274 = v271;
    v257 = " expected type mismatch";
    v258 = 24;
    goto LABEL_307;
  }
  v84 = v52;
  v85 = v57;
  if (v37 - 239 < 2 || v37 == 227)
  {
    if (v52 == v56)
      v86 = ((v37 + 29) < 0xEu) & (0x3001u >> (v37 + 29));
    else
      v86 = 0;
    if ((v86 & 1) == 0)
      goto LABEL_300;
  }
  else
  {
    if (v52 == v56)
      v263 = ((v37 + 29) < 0xEu) & (0x3001u >> (v37 + 29));
    else
      v263 = 1;
    if (v263 == 1)
      goto LABEL_300;
  }
  if (v37 != v269)
  {
LABEL_306:
    v274 = v271;
    v257 = " value type mismatch";
    v258 = 21;
    goto LABEL_307;
  }
  if (v37 - 239 < 2 || v37 == 227)
  {
    if (v52 == v268)
      v87 = ((v37 + 29) < 0xEu) & (0x3001u >> (v37 + 29));
    else
      v87 = 0;
    if ((v87 & 1) == 0)
      goto LABEL_306;
  }
  else
  {
    if (v52 == v268)
      v264 = ((v37 + 29) < 0xEu) & (0x3001u >> (v37 + 29));
    else
      v264 = 1;
    if (v264 == 1)
      goto LABEL_306;
  }
  v88 = *(_QWORD *)(v273 + 48);
  *(_BYTE *)(v88 + 253) = 1;
  v89 = *(_DWORD *)(v88 + 240);
  if (v89 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5C7B4);
  }
  v90 = *(_DWORD *)(v88 + 244);
  if (v90 <= v89)
    v90 = v89 + 1;
  *(_DWORD *)(v88 + 240) = v89 + 1;
  *(_DWORD *)(v88 + 244) = v90;
  LODWORD(v278) = ~v89;
  switch(v271)
  {
    case 'H':
    case 'N':
      v91 = (v89 + 1073741936) < 0x80;
      if (v89 >= -1073741824)
        v91 = (v89 + 16) < 0x90;
      if (v91)
      {
        v92 = (v83 - 1073741808) < 0x80;
        if (v83 <= 0x3FFFFFFF)
          v92 = (v83 + 128) < 0x90;
        if (v272 <= 0xFF && v92)
        {
          v93 = (v85 - 1073741808) < 0x80;
          if (v85 <= 0x3FFFFFFF)
            v93 = (v85 + 128) < 0x90;
          if (v93)
          {
            v94 = (v270 - 1073741808) < 0x80;
            if (v270 <= 0x3FFFFFFF)
              v94 = (v270 + 128) < 0x90;
            if (v94)
            {
              v95 = *(_DWORD *)(v88 + 16);
              v280 = (const char *)v88;
              LODWORD(v281) = v95;
              JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
              v101 = -39;
              *(_DWORD *)(v88 + 36) = 217;
              LOBYTE(v280) = -39;
              v102 = *(unsigned int *)(v88 + 12);
              v103 = *(unsigned int *)(v88 + 16);
              if (v102 > v103)
                goto LABEL_319;
              if ((_DWORD)v102 != *(_DWORD *)(v88 + 8))
              {
                v104 = *(_QWORD *)v88;
                v105 = -39;
                goto LABEL_194;
              }
              goto LABEL_275;
            }
          }
        }
      }
      if (v89 >= -1073741824)
        v128 = (v89 + 64) >> 6 < 0x201;
      else
        v128 = (v89 + 1073774528) < 0x8000;
      if (v128)
      {
        v129 = (v83 - 1073741760) < 0x8000;
        if (v83 <= 0x3FFFFFFF)
          v129 = (v83 + 0x8000) >> 6 < 0x201;
        if (!HIWORD(v272) && v129)
        {
          v130 = (v85 - 1073741760) < 0x8000;
          if (v85 <= 0x3FFFFFFF)
            v130 = (v85 + 0x8000) >> 6 < 0x201;
          if (v130)
          {
            v131 = (v270 - 1073741760) < 0x8000;
            if (v270 <= 0x3FFFFFFF)
              v131 = (v270 + 0x8000) >> 6 < 0x201;
            if (v131)
            {
              v132 = *(_DWORD *)(v88 + 16);
              v280 = (const char *)v88;
              LODWORD(v281) = v132;
              JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
              *(_DWORD *)(v88 + 36) = 217;
              LOBYTE(v280) = -115;
              v133 = *(unsigned int *)(v88 + 12);
              v134 = *(unsigned int *)(v88 + 16);
              if (v133 > v134)
              {
                *(_DWORD *)(v88 + 16) = v134 + 1;
                *(_BYTE *)(*(_QWORD *)v88 + v134) = -115;
                v125 = *(_DWORD *)(v88 + 12);
                v126 = *(_DWORD *)(v88 + 16);
              }
              else
              {
                if ((_DWORD)v133 == *(_DWORD *)(v88 + 8))
                {
                  v260 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v133 + 1), (unint64_t)&v280);
                  v133 = *(unsigned int *)(v88 + 12);
                  v135 = *(_QWORD *)v88;
                  v136 = *v260;
                }
                else
                {
                  v135 = *(_QWORD *)v88;
                  v136 = -115;
                }
                *(_BYTE *)(v135 + v133) = v136;
                v125 = *(_DWORD *)(v88 + 12) + 1;
                v126 = *(_DWORD *)(v88 + 16) + 1;
                *(_DWORD *)(v88 + 12) = v125;
                *(_DWORD *)(v88 + 16) = v126;
              }
              v127 = -39;
              goto LABEL_243;
            }
          }
        }
      }
      v154 = *(_DWORD *)(v88 + 16);
      v280 = (const char *)v88;
      LODWORD(v281) = v154;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
      *(_DWORD *)(v88 + 36) = 217;
      LOBYTE(v280) = -114;
      v155 = *(unsigned int *)(v88 + 12);
      v156 = *(unsigned int *)(v88 + 16);
      if (v155 > v156)
      {
        *(_DWORD *)(v88 + 16) = v156 + 1;
        *(_BYTE *)(*(_QWORD *)v88 + v156) = -114;
        v151 = *(_DWORD *)(v88 + 12);
        v152 = *(_DWORD *)(v88 + 16);
      }
      else
      {
        if ((_DWORD)v155 == *(_DWORD *)(v88 + 8))
        {
          v243 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v155 + 1), (unint64_t)&v280);
          v155 = *(unsigned int *)(v88 + 12);
          v157 = *(_QWORD *)v88;
          v158 = *v243;
        }
        else
        {
          v157 = *(_QWORD *)v88;
          v158 = -114;
        }
        *(_BYTE *)(v157 + v155) = v158;
        v151 = *(_DWORD *)(v88 + 12) + 1;
        v152 = *(_DWORD *)(v88 + 16) + 1;
        *(_DWORD *)(v88 + 12) = v151;
        *(_DWORD *)(v88 + 16) = v152;
      }
      v153 = -39;
      goto LABEL_261;
    case 'I':
      v188 = (v89 + 1073741936) < 0x80;
      if (v89 >= -1073741824)
        v188 = (v89 + 16) < 0x90;
      if (v188)
      {
        v189 = (v83 - 1073741808) < 0x80;
        if (v83 <= 0x3FFFFFFF)
          v189 = (v83 + 128) < 0x90;
        if (v272 <= 0xFF && v189)
        {
          v190 = (v85 - 1073741808) < 0x80;
          if (v85 <= 0x3FFFFFFF)
            v190 = (v85 + 128) < 0x90;
          if (v190)
          {
            v191 = (v270 - 1073741808) < 0x80;
            if (v270 <= 0x3FFFFFFF)
              v191 = (v270 + 128) < 0x90;
            if (v191)
            {
              v192 = *(_DWORD *)(v88 + 16);
              v280 = (const char *)v88;
              LODWORD(v281) = v192;
              JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
              v101 = -42;
              *(_DWORD *)(v88 + 36) = 214;
              LOBYTE(v280) = -42;
              v102 = *(unsigned int *)(v88 + 12);
              v103 = *(unsigned int *)(v88 + 16);
              if (v102 > v103)
                goto LABEL_319;
              if ((_DWORD)v102 != *(_DWORD *)(v88 + 8))
              {
                v104 = *(_QWORD *)v88;
                v105 = -42;
                goto LABEL_194;
              }
              goto LABEL_275;
            }
          }
        }
      }
      if (v89 >= -1073741824)
        v216 = (v89 + 64) >> 6 < 0x201;
      else
        v216 = (v89 + 1073774528) < 0x8000;
      if (v216)
      {
        v217 = (v83 - 1073741760) < 0x8000;
        if (v83 <= 0x3FFFFFFF)
          v217 = (v83 + 0x8000) >> 6 < 0x201;
        if (!HIWORD(v272) && v217)
        {
          v218 = (v85 - 1073741760) < 0x8000;
          if (v85 <= 0x3FFFFFFF)
            v218 = (v85 + 0x8000) >> 6 < 0x201;
          if (v218)
          {
            v219 = (v270 - 1073741760) < 0x8000;
            if (v270 <= 0x3FFFFFFF)
              v219 = (v270 + 0x8000) >> 6 < 0x201;
            if (v219)
            {
              v220 = *(_DWORD *)(v88 + 16);
              v280 = (const char *)v88;
              LODWORD(v281) = v220;
              JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
              *(_DWORD *)(v88 + 36) = 214;
              LOBYTE(v280) = -115;
              v221 = *(unsigned int *)(v88 + 12);
              v222 = *(unsigned int *)(v88 + 16);
              if (v221 > v222)
              {
                *(_DWORD *)(v88 + 16) = v222 + 1;
                *(_BYTE *)(*(_QWORD *)v88 + v222) = -115;
                v125 = *(_DWORD *)(v88 + 12);
                v126 = *(_DWORD *)(v88 + 16);
              }
              else
              {
                if ((_DWORD)v221 == *(_DWORD *)(v88 + 8))
                {
                  v262 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v221 + 1), (unint64_t)&v280);
                  v221 = *(unsigned int *)(v88 + 12);
                  v223 = *(_QWORD *)v88;
                  v224 = *v262;
                }
                else
                {
                  v223 = *(_QWORD *)v88;
                  v224 = -115;
                }
                *(_BYTE *)(v223 + v221) = v224;
                v125 = *(_DWORD *)(v88 + 12) + 1;
                v126 = *(_DWORD *)(v88 + 16) + 1;
                *(_DWORD *)(v88 + 12) = v125;
                *(_DWORD *)(v88 + 16) = v126;
              }
              v127 = -42;
              goto LABEL_243;
            }
          }
        }
      }
      v231 = *(_DWORD *)(v88 + 16);
      v280 = (const char *)v88;
      LODWORD(v281) = v231;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
      *(_DWORD *)(v88 + 36) = 214;
      LOBYTE(v280) = -114;
      v232 = *(unsigned int *)(v88 + 12);
      v233 = *(unsigned int *)(v88 + 16);
      if (v232 > v233)
      {
        *(_DWORD *)(v88 + 16) = v233 + 1;
        *(_BYTE *)(*(_QWORD *)v88 + v233) = -114;
        v151 = *(_DWORD *)(v88 + 12);
        v152 = *(_DWORD *)(v88 + 16);
      }
      else
      {
        if ((_DWORD)v232 == *(_DWORD *)(v88 + 8))
        {
          v245 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v232 + 1), (unint64_t)&v280);
          v232 = *(unsigned int *)(v88 + 12);
          v234 = *(_QWORD *)v88;
          v235 = *v245;
        }
        else
        {
          v234 = *(_QWORD *)v88;
          v235 = -114;
        }
        *(_BYTE *)(v234 + v232) = v235;
        v151 = *(_DWORD *)(v88 + 12) + 1;
        v152 = *(_DWORD *)(v88 + 16) + 1;
        *(_DWORD *)(v88 + 12) = v151;
        *(_DWORD *)(v88 + 16) = v152;
      }
      v153 = -42;
      goto LABEL_261;
    case 'J':
    case 'L':
      v111 = (v89 + 1073741936) < 0x80;
      if (v89 >= -1073741824)
        v111 = (v89 + 16) < 0x90;
      if (v111)
      {
        v112 = (v83 - 1073741808) < 0x80;
        if (v83 <= 0x3FFFFFFF)
          v112 = (v83 + 128) < 0x90;
        if (v272 <= 0xFF && v112)
        {
          v113 = (v85 - 1073741808) < 0x80;
          if (v85 <= 0x3FFFFFFF)
            v113 = (v85 + 128) < 0x90;
          if (v113)
          {
            v114 = (v270 - 1073741808) < 0x80;
            if (v270 <= 0x3FFFFFFF)
              v114 = (v270 + 128) < 0x90;
            if (v114)
            {
              v115 = *(_DWORD *)(v88 + 16);
              v280 = (const char *)v88;
              LODWORD(v281) = v115;
              JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
              v101 = -41;
              *(_DWORD *)(v88 + 36) = 215;
              LOBYTE(v280) = -41;
              v102 = *(unsigned int *)(v88 + 12);
              v103 = *(unsigned int *)(v88 + 16);
              if (v102 > v103)
                goto LABEL_319;
              if ((_DWORD)v102 != *(_DWORD *)(v88 + 8))
              {
                v104 = *(_QWORD *)v88;
                v105 = -41;
                goto LABEL_194;
              }
              goto LABEL_275;
            }
          }
        }
      }
      if (v89 >= -1073741824)
        v137 = (v89 + 64) >> 6 < 0x201;
      else
        v137 = (v89 + 1073774528) < 0x8000;
      if (v137)
      {
        v138 = (v83 - 1073741760) < 0x8000;
        if (v83 <= 0x3FFFFFFF)
          v138 = (v83 + 0x8000) >> 6 < 0x201;
        if (!HIWORD(v272) && v138)
        {
          v139 = (v85 - 1073741760) < 0x8000;
          if (v85 <= 0x3FFFFFFF)
            v139 = (v85 + 0x8000) >> 6 < 0x201;
          if (v139)
          {
            v140 = (v270 - 1073741760) < 0x8000;
            if (v270 <= 0x3FFFFFFF)
              v140 = (v270 + 0x8000) >> 6 < 0x201;
            if (v140)
            {
              v141 = *(_DWORD *)(v88 + 16);
              v280 = (const char *)v88;
              LODWORD(v281) = v141;
              JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
              *(_DWORD *)(v88 + 36) = 215;
              LOBYTE(v280) = -115;
              v142 = *(unsigned int *)(v88 + 12);
              v143 = *(unsigned int *)(v88 + 16);
              if (v142 > v143)
              {
                *(_DWORD *)(v88 + 16) = v143 + 1;
                *(_BYTE *)(*(_QWORD *)v88 + v143) = -115;
                v125 = *(_DWORD *)(v88 + 12);
                v126 = *(_DWORD *)(v88 + 16);
              }
              else
              {
                if ((_DWORD)v142 == *(_DWORD *)(v88 + 8))
                {
                  v261 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v142 + 1), (unint64_t)&v280);
                  v142 = *(unsigned int *)(v88 + 12);
                  v144 = *(_QWORD *)v88;
                  v145 = *v261;
                }
                else
                {
                  v144 = *(_QWORD *)v88;
                  v145 = -115;
                }
                *(_BYTE *)(v144 + v142) = v145;
                v125 = *(_DWORD *)(v88 + 12) + 1;
                v126 = *(_DWORD *)(v88 + 16) + 1;
                *(_DWORD *)(v88 + 12) = v125;
                *(_DWORD *)(v88 + 16) = v126;
              }
              v127 = -41;
              goto LABEL_243;
            }
          }
        }
      }
      v159 = *(_DWORD *)(v88 + 16);
      v280 = (const char *)v88;
      LODWORD(v281) = v159;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
      *(_DWORD *)(v88 + 36) = 215;
      LOBYTE(v280) = -114;
      v160 = *(unsigned int *)(v88 + 12);
      v161 = *(unsigned int *)(v88 + 16);
      if (v160 > v161)
      {
        *(_DWORD *)(v88 + 16) = v161 + 1;
        *(_BYTE *)(*(_QWORD *)v88 + v161) = -114;
        v151 = *(_DWORD *)(v88 + 12);
        v152 = *(_DWORD *)(v88 + 16);
      }
      else
      {
        if ((_DWORD)v160 == *(_DWORD *)(v88 + 8))
        {
          v244 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v160 + 1), (unint64_t)&v280);
          v160 = *(unsigned int *)(v88 + 12);
          v162 = *(_QWORD *)v88;
          v163 = *v244;
        }
        else
        {
          v162 = *(_QWORD *)v88;
          v163 = -114;
        }
        *(_BYTE *)(v162 + v160) = v163;
        v151 = *(_DWORD *)(v88 + 12) + 1;
        v152 = *(_DWORD *)(v88 + 16) + 1;
        *(_DWORD *)(v88 + 12) = v151;
        *(_DWORD *)(v88 + 16) = v152;
      }
      v153 = -41;
      goto LABEL_261;
    case 'K':
    case 'M':
      v106 = (v89 + 1073741936) < 0x80;
      if (v89 >= -1073741824)
        v106 = (v89 + 16) < 0x90;
      if (!v106)
        goto LABEL_103;
      v107 = (v83 - 1073741808) < 0x80;
      if (v83 <= 0x3FFFFFFF)
        v107 = (v83 + 128) < 0x90;
      if (v272 > 0xFF || !v107)
        goto LABEL_103;
      v108 = (v85 - 1073741808) < 0x80;
      if (v85 <= 0x3FFFFFFF)
        v108 = (v85 + 128) < 0x90;
      if (!v108)
        goto LABEL_103;
      v109 = (v270 - 1073741808) < 0x80;
      if (v270 <= 0x3FFFFFFF)
        v109 = (v270 + 128) < 0x90;
      if (v109)
      {
        v110 = *(_DWORD *)(v88 + 16);
        v280 = (const char *)v88;
        LODWORD(v281) = v110;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
        v101 = -40;
        *(_DWORD *)(v88 + 36) = 216;
        LOBYTE(v280) = -40;
        v102 = *(unsigned int *)(v88 + 12);
        v103 = *(unsigned int *)(v88 + 16);
        if (v102 > v103)
        {
LABEL_319:
          *(_DWORD *)(v88 + 16) = v103 + 1;
          *(_BYTE *)(*(_QWORD *)v88 + v103) = v101;
          v193 = *(_DWORD *)(v88 + 12);
          v194 = *(_DWORD *)(v88 + 16);
        }
        else
        {
          if ((_DWORD)v102 == *(_DWORD *)(v88 + 8))
          {
LABEL_275:
            *(_BYTE *)(*(_QWORD *)v88 + *(unsigned int *)(v88 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v102 + 1), (unint64_t)&v280);
          }
          else
          {
            v104 = *(_QWORD *)v88;
            v105 = -40;
LABEL_194:
            *(_BYTE *)(v104 + v102) = v105;
          }
          v193 = *(_DWORD *)(v88 + 12) + 1;
          v194 = *(_DWORD *)(v88 + 16) + 1;
          *(_DWORD *)(v88 + 12) = v193;
          *(_DWORD *)(v88 + 16) = v194;
        }
        v195 = 15 - v89;
        if (v89 >= -1073741824)
          v195 = ~(_BYTE)v89;
        LOBYTE(v280) = v195;
        if (v193 > v194)
        {
          *(_DWORD *)(v88 + 16) = v194 + 1;
          *(_BYTE *)(*(_QWORD *)v88 + v194) = v195;
          v199 = *(_DWORD *)(v88 + 12);
          v200 = *(_DWORD *)(v88 + 16);
          v197 = v272;
        }
        else
        {
          v196 = v193;
          v197 = v272;
          if (v193 == *(_DWORD *)(v88 + 8))
          {
            v246 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v193 + 1), (unint64_t)&v280);
            v196 = *(unsigned int *)(v88 + 12);
            v198 = *(_QWORD *)v88;
            v195 = *v246;
          }
          else
          {
            v198 = *(_QWORD *)v88;
          }
          *(_BYTE *)(v198 + v196) = v195;
          v199 = *(_DWORD *)(v88 + 12) + 1;
          v200 = *(_DWORD *)(v88 + 16) + 1;
          *(_DWORD *)(v88 + 12) = v199;
          *(_DWORD *)(v88 + 16) = v200;
        }
        v201 = v83 + 16;
        if (v83 <= 0x3FFFFFFF)
          v201 = v83;
        LOBYTE(v280) = v201;
        if (v199 > v200)
        {
          *(_DWORD *)(v88 + 16) = v200 + 1;
          *(_BYTE *)(*(_QWORD *)v88 + v200) = v201;
          v204 = *(_DWORD *)(v88 + 12);
          v205 = *(_DWORD *)(v88 + 16);
        }
        else
        {
          v202 = v199;
          if (v199 == *(_DWORD *)(v88 + 8))
          {
            v247 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v199 + 1), (unint64_t)&v280);
            v202 = *(unsigned int *)(v88 + 12);
            v203 = *(_QWORD *)v88;
            v201 = *v247;
          }
          else
          {
            v203 = *(_QWORD *)v88;
          }
          *(_BYTE *)(v203 + v202) = v201;
          v204 = *(_DWORD *)(v88 + 12) + 1;
          v205 = *(_DWORD *)(v88 + 16) + 1;
          *(_DWORD *)(v88 + 12) = v204;
          *(_DWORD *)(v88 + 16) = v205;
        }
        LOBYTE(v280) = v197;
        if (v204 > v205)
        {
          *(_DWORD *)(v88 + 16) = v205 + 1;
          *(_BYTE *)(*(_QWORD *)v88 + v205) = v197;
          v206 = *(_DWORD *)(v88 + 12);
          v207 = *(_DWORD *)(v88 + 16);
        }
        else
        {
          if (v204 == *(_DWORD *)(v88 + 8))
            *(_BYTE *)(*(_QWORD *)v88 + *(unsigned int *)(v88 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v204 + 1), (unint64_t)&v280);
          else
            *(_BYTE *)(*(_QWORD *)v88 + v204) = v197;
          v206 = *(_DWORD *)(v88 + 12) + 1;
          v207 = *(_DWORD *)(v88 + 16) + 1;
          *(_DWORD *)(v88 + 12) = v206;
          *(_DWORD *)(v88 + 16) = v207;
        }
        v208 = v85 + 16;
        if (v85 <= 0x3FFFFFFF)
          v208 = v85;
        LOBYTE(v280) = v208;
        if (v206 > v207)
        {
          *(_DWORD *)(v88 + 16) = v207 + 1;
          *(_BYTE *)(*(_QWORD *)v88 + v207) = v208;
          v211 = *(_DWORD *)(v88 + 12);
          v212 = *(_DWORD *)(v88 + 16);
        }
        else
        {
          v209 = v206;
          if (v206 == *(_DWORD *)(v88 + 8))
          {
            v248 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v206 + 1), (unint64_t)&v280);
            v209 = *(unsigned int *)(v88 + 12);
            v210 = *(_QWORD *)v88;
            v208 = *v248;
          }
          else
          {
            v210 = *(_QWORD *)v88;
          }
          *(_BYTE *)(v210 + v209) = v208;
          v211 = *(_DWORD *)(v88 + 12) + 1;
          v212 = *(_DWORD *)(v88 + 16) + 1;
          *(_DWORD *)(v88 + 12) = v211;
          *(_DWORD *)(v88 + 16) = v212;
        }
        v213 = v270 + 16;
        if (v270 <= 0x3FFFFFFF)
          v213 = v270;
        LOBYTE(v280) = v213;
        if (v211 > v212)
        {
          *(_DWORD *)(v88 + 16) = v212 + 1;
          *(_BYTE *)(*(_QWORD *)v88 + v212) = v213;
        }
        else
        {
          v214 = v211;
          if (v211 == *(_DWORD *)(v88 + 8))
          {
            v249 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v211 + 1), (unint64_t)&v280);
            v214 = *(unsigned int *)(v88 + 12);
            v215 = *(_QWORD *)v88;
            v213 = *v249;
          }
          else
          {
            v215 = *(_QWORD *)v88;
          }
          *(_BYTE *)(v215 + v214) = v213;
          *(int32x2_t *)(v88 + 12) = vadd_s32(*(int32x2_t *)(v88 + 12), (int32x2_t)0x100000001);
        }
      }
      else
      {
LABEL_103:
        if (v89 >= -1073741824)
          v116 = (v89 + 64) >> 6 < 0x201;
        else
          v116 = (v89 + 1073774528) < 0x8000;
        if (!v116)
          goto LABEL_160;
        v117 = (v83 - 1073741760) < 0x8000;
        if (v83 <= 0x3FFFFFFF)
          v117 = (v83 + 0x8000) >> 6 < 0x201;
        if (HIWORD(v272) || !v117)
          goto LABEL_160;
        v118 = (v85 - 1073741760) < 0x8000;
        if (v85 <= 0x3FFFFFFF)
          v118 = (v85 + 0x8000) >> 6 < 0x201;
        if (!v118)
          goto LABEL_160;
        v119 = (v270 - 1073741760) < 0x8000;
        if (v270 <= 0x3FFFFFFF)
          v119 = (v270 + 0x8000) >> 6 < 0x201;
        if (v119)
        {
          v120 = *(_DWORD *)(v88 + 16);
          v280 = (const char *)v88;
          LODWORD(v281) = v120;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
          *(_DWORD *)(v88 + 36) = 216;
          LOBYTE(v280) = -115;
          v121 = *(unsigned int *)(v88 + 12);
          v122 = *(unsigned int *)(v88 + 16);
          if (v121 > v122)
          {
            *(_DWORD *)(v88 + 16) = v122 + 1;
            *(_BYTE *)(*(_QWORD *)v88 + v122) = -115;
            v125 = *(_DWORD *)(v88 + 12);
            v126 = *(_DWORD *)(v88 + 16);
          }
          else
          {
            if ((_DWORD)v121 == *(_DWORD *)(v88 + 8))
            {
              v259 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v121 + 1), (unint64_t)&v280);
              v121 = *(unsigned int *)(v88 + 12);
              v123 = *(_QWORD *)v88;
              v124 = *v259;
            }
            else
            {
              v123 = *(_QWORD *)v88;
              v124 = -115;
            }
            *(_BYTE *)(v123 + v121) = v124;
            v125 = *(_DWORD *)(v88 + 12) + 1;
            v126 = *(_DWORD *)(v88 + 16) + 1;
            *(_DWORD *)(v88 + 12) = v125;
            *(_DWORD *)(v88 + 16) = v126;
          }
          v127 = -40;
LABEL_243:
          LOBYTE(v280) = v127;
          if (v125 > v126)
          {
            *(_DWORD *)(v88 + 16) = v126 + 1;
            *(_BYTE *)(*(_QWORD *)v88 + v126) = v127;
          }
          else
          {
            v225 = v125;
            if (v125 == *(_DWORD *)(v88 + 8))
            {
              v250 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v125 + 1), (unint64_t)&v280);
              v225 = *(unsigned int *)(v88 + 12);
              v226 = *(_QWORD *)v88;
              v127 = *v250;
            }
            else
            {
              v226 = *(_QWORD *)v88;
            }
            *(_BYTE *)(v226 + v225) = v127;
            *(int32x2_t *)(v88 + 12) = vadd_s32(*(int32x2_t *)(v88 + 12), (int32x2_t)0x100000001);
          }
          v227 = 63 - v89;
          if (v89 >= -1073741824)
            v227 = ~(_WORD)v89;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v88, v227);
          v228 = v83 + 64;
          if (v83 <= 0x3FFFFFFF)
            v228 = v83;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v88, v228);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v88, (unsigned __int16)v272);
          v229 = v85 + 64;
          if (v85 <= 0x3FFFFFFF)
            v229 = v85;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v88, v229);
          v230 = v270 + 64;
          if (v270 <= 0x3FFFFFFF)
            v230 = v270;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v88, v230);
        }
        else
        {
LABEL_160:
          v146 = *(_DWORD *)(v88 + 16);
          v280 = (const char *)v88;
          LODWORD(v281) = v146;
          JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v88 + 40), &v280, v75, v76, v77, v78, v79, v80);
          *(_DWORD *)(v88 + 36) = 216;
          LOBYTE(v280) = -114;
          v147 = *(unsigned int *)(v88 + 12);
          v148 = *(unsigned int *)(v88 + 16);
          if (v147 > v148)
          {
            *(_DWORD *)(v88 + 16) = v148 + 1;
            *(_BYTE *)(*(_QWORD *)v88 + v148) = -114;
            v151 = *(_DWORD *)(v88 + 12);
            v152 = *(_DWORD *)(v88 + 16);
          }
          else
          {
            if ((_DWORD)v147 == *(_DWORD *)(v88 + 8))
            {
              v242 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v147 + 1), (unint64_t)&v280);
              v147 = *(unsigned int *)(v88 + 12);
              v149 = *(_QWORD *)v88;
              v150 = *v242;
            }
            else
            {
              v149 = *(_QWORD *)v88;
              v150 = -114;
            }
            *(_BYTE *)(v149 + v147) = v150;
            v151 = *(_DWORD *)(v88 + 12) + 1;
            v152 = *(_DWORD *)(v88 + 16) + 1;
            *(_DWORD *)(v88 + 12) = v151;
            *(_DWORD *)(v88 + 16) = v152;
          }
          v153 = -40;
LABEL_261:
          LOBYTE(v280) = v153;
          if (v151 > v152)
          {
            *(_DWORD *)(v88 + 16) = v152 + 1;
            *(_BYTE *)(*(_QWORD *)v88 + v152) = v153;
          }
          else
          {
            v236 = v151;
            if (v151 == *(_DWORD *)(v88 + 8))
            {
              v241 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, (WTF *)(v151 + 1), (unint64_t)&v280);
              v236 = *(unsigned int *)(v88 + 12);
              v237 = *(_QWORD *)v88;
              v153 = *v241;
            }
            else
            {
              v237 = *(_QWORD *)v88;
            }
            *(_BYTE *)(v237 + v236) = v153;
            *(int32x2_t *)(v88 + 12) = vadd_s32(*(int32x2_t *)(v88 + 12), (int32x2_t)0x100000001);
          }
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v88, ~v89);
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v88, v83);
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v88, v272);
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v88, v85);
          JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v88, v270);
        }
      }
      v238 = *(_DWORD *)(v273 + 68);
      if (v238 == *(_DWORD *)(v273 + 64))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(v273 + 56, &v279, (int *)&v278, v96, v97, v98, v99, v100);
      }
      else
      {
        v239 = *(_QWORD *)(v273 + 56) + 24 * v238;
        v240 = (int)v278;
        *(_QWORD *)v239 = v37;
        *(_QWORD *)(v239 + 8) = v84;
        *(_DWORD *)(v239 + 16) = v240;
        ++*(_DWORD *)(v273 + 68);
      }
      *(_BYTE *)v69 = 0;
      *(_BYTE *)(v69 + 8) = 0;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198D5C678);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [29],JSC::Wasm::Type,char [27]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "ref.as_non_null ref to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected a reference type");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, JSC::Wasm::Type *a7, uint64_t a8, double a9, float a10, JSC::Wasm::Type *a11)
{
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  float v62;
  float v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  float v76;
  WTF *v77;
  WTF::PrintStream *v78;
  float v79;
  double v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  const WTF::String *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  float v95;
  const WTF::String *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  float v103;
  const WTF::String *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  float v111;
  const WTF::String *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  float v119;
  const WTF::String *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  float v127;
  const WTF::String *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  float v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  int v215;
  char v216;
  void (**v217)(WTF::StringPrintStream *__hidden);
  WTF *v218;
  __int128 v219;
  _BYTE v220[128];
  void (**v221)(WTF::StringPrintStream *__hidden);
  unint64_t v222;
  __int128 v223;
  _BYTE v224[128];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v217 = off_1E3572250;
  v218 = (WTF *)v220;
  v219 = xmmword_199122F80;
  v220[0] = 0;
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = v17 != 0;
    v19 = v17 - 1;
    if (!v18)
      v19 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v19, (uint64_t)&v214, a10);
  }
  else
  {
    v20 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v214 = (WTF::StringImpl *)v20;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v213, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v28 = v222;
  if (!v222)
  {
    v213 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v213);
  v28 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_12:
    WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v221, "%u", *a4);
  v221[5]((WTF::StringPrintStream *)&v221);
  v36 = v222;
  if (!v222)
  {
    v212 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v212);
  v36 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_17:
    WTF::fastFree(v36, v29, v30, v31, v32, v33, v34, v35);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a5)
  {
    v38 = *(_QWORD *)(a5 + 8);
    v18 = v38 != 0;
    v39 = v38 - 1;
    if (!v18)
      v39 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v39, (uint64_t)&v214, v37);
  }
  else
  {
    v40 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = 0;
    *(_BYTE *)(v40 + 16) = 0;
    v214 = (WTF::StringImpl *)v40;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v211, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v48 = v222;
  if (!v222)
  {
    v211 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v211);
  v48 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_29:
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a6)
  {
    v50 = *(_QWORD *)(a6 + 8);
    v18 = v50 != 0;
    v51 = v50 - 1;
    if (!v18)
      v51 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v51, (uint64_t)&v214, v49);
  }
  else
  {
    v52 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v52 = 1;
    *(_QWORD *)(v52 + 8) = 0;
    *(_BYTE *)(v52 + 16) = 0;
    v214 = (WTF::StringImpl *)v52;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v210, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v60 = v222;
  if (!v222)
  {
    v210 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v210);
  v60 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_41:
    WTF::fastFree(v60, v53, v54, v55, v56, v57, v58, v59);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v209, a2, a7, v61, v62);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a8)
  {
    v64 = *(_QWORD *)(a8 + 8);
    v18 = v64 != 0;
    v65 = v64 - 1;
    if (!v18)
      v65 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a8, v65, (uint64_t)&v214, v63);
  }
  else
  {
    v66 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v66 = 1;
    *(_QWORD *)(v66 + 8) = 0;
    *(_BYTE *)(v66 + 16) = 0;
    v214 = (WTF::StringImpl *)v66;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v208, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v74 = v222;
  if (!v222)
  {
    v214 = 0;
    goto LABEL_53;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v214);
  v74 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_53:
    WTF::fastFree(v74, v67, v68, v69, v70, v71, v72, v73);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v208, a2, a11, v75, v76);
  v77 = (WTF *)((uint64_t (*)(_QWORD))v217[4])(&v217);
  v78 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v77 + 32))(v77);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v221, v79);
  WTF::printExpectedCStringHelper(v78, "StringView", &v221);
  if ((_DWORD)v222 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v216, &v221);
  v80 = (*(double (**)(WTF *))(*(_QWORD *)v77 + 40))(v77);
  WTF::printInternal(v77, (WTF::PrintStream *)&v213, v81, v82, v83, v84, v85, v86, v80, v87);
  WTF::printInternal(v77, (WTF::PrintStream *)&v212, v88, v89, v90, v91, v92, v93, v94, v95);
  WTF::printInternal(v77, (WTF::PrintStream *)&v211, v96, v97, v98, v99, v100, v101, v102, v103);
  WTF::printInternal(v77, (WTF::PrintStream *)&v210, v104, v105, v106, v107, v108, v109, v110, v111);
  WTF::printInternal(v77, (WTF::PrintStream *)&v209, v112, v113, v114, v115, v116, v117, v118, v119);
  WTF::printInternal(v77, (WTF::PrintStream *)&v214, v120, v121, v122, v123, v124, v125, v126, v127);
  WTF::printInternal(v77, (WTF::PrintStream *)&v208, v128, v129, v130, v131, v132, v133, v134, v135);
  v217[5]((WTF::StringPrintStream *)&v217);
  v143 = v208;
  v208 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v144 = v214;
  v214 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  v145 = v209;
  v209 = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  v146 = v210;
  v210 = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  v147 = v211;
  v211 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  v148 = v212;
  v212 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  v149 = v213;
  v213 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
  v150 = v218;
  if (v218)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v218, v219, (uint64_t *)&v221);
    v150 = v218;
    *a1 = v221;
    if (v150 == (WTF *)v220)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v150, v136, v137, v138, v139, v140, v141, v142);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, JSC::Wasm::Type *a5, uint64_t a6, JSC::Wasm::Type *a7, double a8, float a9)
{
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  double v38;
  float v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  double v52;
  float v53;
  WTF *v54;
  WTF::PrintStream *v55;
  float v56;
  double v57;
  const WTF::String *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  char v157;
  void (**v158)(WTF::StringPrintStream *__hidden);
  WTF *v159;
  __int128 v160;
  _BYTE v161[128];
  void (**v162)(WTF::StringPrintStream *__hidden);
  WTF *v163;
  __int128 v164;
  _BYTE v165[128];
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v158 = off_1E3572250;
  v159 = (WTF *)v161;
  v160 = xmmword_199122F80;
  v161[0] = 0;
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a3)
  {
    v14 = *(_QWORD *)(a3 + 8);
    v15 = v14 != 0;
    v16 = v14 - 1;
    if (!v15)
      v16 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v16, (uint64_t)&v155, a9);
  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 0;
    v155 = (WTF::StringImpl *)v17;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v154, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v25 = v163;
  if (!v163)
  {
    v154 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v154);
  v25 = v163;
  if (v163 != (WTF *)v165)
LABEL_12:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a4)
  {
    v27 = *(_QWORD *)(a4 + 8);
    v15 = v27 != 0;
    v28 = v27 - 1;
    if (!v15)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v28, (uint64_t)&v155, v26);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v155 = (WTF::StringImpl *)v29;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v153, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v37 = v163;
  if (!v163)
  {
    v153 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v153);
  v37 = v163;
  if (v163 != (WTF *)v165)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v152, a2, a5, v38, v39);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a6)
  {
    v41 = *(_QWORD *)(a6 + 8);
    v15 = v41 != 0;
    v42 = v41 - 1;
    if (!v15)
      v42 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v42, (uint64_t)&v155, v40);
  }
  else
  {
    v43 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = 0;
    *(_BYTE *)(v43 + 16) = 0;
    v155 = (WTF::StringImpl *)v43;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v151, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v51 = v163;
  if (!v163)
  {
    v155 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v155);
  v51 = v163;
  if (v163 != (WTF *)v165)
LABEL_36:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v151, a2, a7, v52, v53);
  v54 = (WTF *)((uint64_t (*)(_QWORD))v158[4])(&v158);
  v55 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v54 + 32))(v54);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v162, v56);
  WTF::printExpectedCStringHelper(v55, "StringView", &v162);
  if ((_DWORD)v163 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v163])(&v157, &v162);
  v57 = (*(double (**)(WTF *))(*(_QWORD *)v54 + 40))(v54);
  WTF::printInternal(v54, (WTF::PrintStream *)&v154, v58, v59, v60, v61, v62, v63, v57, v64);
  WTF::printInternal(v54, (WTF::PrintStream *)&v153, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v54, (WTF::PrintStream *)&v152, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v54, (WTF::PrintStream *)&v155, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v54, (WTF::PrintStream *)&v151, v89, v90, v91, v92, v93, v94, v95, v96);
  v158[5]((WTF::StringPrintStream *)&v158);
  v104 = v151;
  v151 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v155;
  v155 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v152;
  v152 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v153;
  v153 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v154;
  v154 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v159;
  if (v159)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v159, v160, (uint64_t *)&v162);
    v109 = v159;
    *a1 = v162;
    if (v109 == (WTF *)v161)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v109, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [43],JSC::Wasm::Type,char [6],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "invalid type for call_ref value, expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [41],JSC::Wasm::Type,char [12],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in call_ref, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [36],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Block expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [35],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Loop expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [31],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "if condition must be i32, got ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [34],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Try expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [58],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "The exception being thrown expects the argument at index ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [43],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "conditional branch with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [33],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "br_table with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<char [51],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "grow_memory with non-i32 delta argument has type: ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<true,void>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8x8_t v18;
  uint8x16_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  int *v46;
  int v47;
  const char *v48;
  unsigned int v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  void (**v57)(WTF::StringPrintStream *__hidden);
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  int v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::AtomStringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  WTF::AtomStringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  WTF::AtomStringImpl *v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  WTF::AtomStringImpl *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  WTF::AtomStringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  WTF::AtomStringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  int v211;
  char v212;
  unint64_t v213;
  char *v214;
  unint64_t *v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  WTF::AtomStringImpl *v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  int v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  WTF::AtomStringImpl *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  WTF::StringImpl *v234;
  int v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  WTF::AtomStringImpl *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  int v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  WTF::AtomStringImpl *v253;
  uint64_t v254;
  uint64_t v255;
  WTF::StringImpl *v256;
  int v257;
  unsigned int v258;
  uint64_t v259;
  WTF::AtomStringImpl *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  double v267;
  float v268;
  WTF::StringImpl *v269;
  int v270;
  float v271;
  unsigned int v272;
  unint64_t v273;
  unsigned int v274;
  uint64_t v275;
  WTF::AtomStringImpl *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  int v284;
  unsigned int v285;
  unint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  __int8 v312;
  __int8 v313;
  __int8 v314;
  __int8 v315;
  uint8x16_t v316;
  uint8x8_t v317;
  int8x8_t v318;
  uint32x2_t v319;
  __int8 v320;
  uint8x8_t v321;
  unint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  void *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unsigned int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  WTF::AtomStringImpl *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  WTF::StringImpl *v406;
  int v407;
  unsigned int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  WTF::AtomStringImpl *v413;
  uint64_t v414;
  uint64_t v415;
  WTF::StringImpl *v416;
  int v417;
  unint64_t v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  WTF::AtomStringImpl *v423;
  uint64_t v424;
  uint64_t v425;
  WTF::StringImpl *v426;
  int v427;
  int8x8_t v428;
  uint32x2_t v429;
  __int8 v430;
  uint8x8_t v431;
  unint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  void *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  void *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  void *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  void *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  void *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  __int8 v496;
  __int8 v497;
  __int8 v498;
  __int8 v499;
  __int8 v500;
  uint8x8_t v501;
  unsigned int v502;
  uint64_t v503;
  WTF::AtomStringImpl *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  WTF::StringImpl *v511;
  int v512;
  unsigned int v513;
  uint64_t v514;
  uint64_t v515;
  WTF::AtomStringImpl *v516;
  uint64_t v517;
  uint64_t v518;
  WTF::StringImpl *v519;
  int v520;
  unint64_t v521;
  void *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  void *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  char *v537;
  unint64_t *v538;
  uint64_t v539;
  const char *v540;
  uint64_t v541;
  WTF::StringImpl *v542;
  WTF::StringImpl *v543;
  WTF::StringImpl *v544;
  WTF::StringImpl *v545;
  WTF::StringImpl *v546;
  int *v547;
  WTF::StringImpl *v548;
  int *v549;
  WTF::StringImpl *v550;
  WTF::StringImpl *v551;
  WTF::StringImpl *v552;
  WTF::StringImpl *v553;
  WTF::StringImpl *v554;
  WTF::StringImpl *v555;
  WTF::StringImpl *v556;
  WTF::StringImpl *v557;
  WTF::StringImpl *v558;
  WTF::StringImpl *v559;
  WTF::StringImpl *v560;
  WTF::StringImpl *v561;
  void (**v562)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v563;
  int v564;
  WTF::StringImpl *v565;
  __int128 v566;
  int v567;
  WTF::StringImpl *v568;
  WTF::StringImpl *v569;
  WTF::StringImpl *v570;
  WTF::StringImpl *v571;
  WTF::StringImpl *v572;
  void (**v573)(WTF::StringPrintStream *__hidden);
  uint64_t v574;

  v8 = a4;
  v9 = a3;
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_DWORD *)(v12 + 16);
  *(_QWORD *)&v566 = v12;
  DWORD2(v566) = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(v12 + 40), &v566, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(v12 + 36) = 152;
  LOBYTE(v566) = -104;
  v21 = *(unsigned int *)(v12 + 12);
  v22 = *(unsigned int *)(v12 + 16);
  if (v21 > v22)
  {
    *(_DWORD *)(v12 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)v12 + v22) = -104;
  }
  else
  {
    if ((_DWORD)v21 == *(_DWORD *)(v12 + 8))
      *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v566);
    else
      *(_BYTE *)(*(_QWORD *)v12 + v21) = -104;
    v19.i64[0] = 0x100000001;
    v18 = (uint8x8_t)vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
    *(uint8x8_t *)(v12 + 12) = v18;
  }
  v23 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(v23 + 254) = 1;
  if ((v9 - 77) > 3u || (_BYTE)word_1ECF4C7B4)
  {
    switch(v9)
    {
      case 0:
      case 5:
      case 10:
      case 20:
      case 21:
      case 23:
      case 28:
      case 38:
      case 45:
      case 49:
      case 54:
      case 55:
      case 58:
      case 62:
      case 63:
      case 67:
      case 75:
      case 78:
        v49 = *(_DWORD *)(a2 + 68);
        if (!v49)
          goto LABEL_291;
        v50 = *(_QWORD *)(a2 + 56) + 24 * v49;
        v26 = *(unsigned __int8 *)(v50 - 24);
        v27 = *(_QWORD *)(v50 - 16);
        *(_DWORD *)(a2 + 68) = v49 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1205;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v554);
        v54 = v554;
        if (!v554)
        {
          __break(0xC471u);
          JUMPOUT(0x198D612DCLL);
        }
        v55 = *(_DWORD *)(v23 + 240);
        if (!v55)
        {
          __break(0xC471u);
          JUMPOUT(0x198D612E4);
        }
        *(_DWORD *)(v23 + 240) = v55 - 1;
        v554 = 0;
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, v51, v52, v53, v14, v15, v16, v17);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
        goto LABEL_27;
      case 1:
      case 3:
      case 6:
      case 9:
      case 18:
      case 24:
      case 26:
      case 31:
      case 32:
      case 39:
      case 42:
      case 43:
      case 47:
      case 52:
      case 53:
      case 60:
      case 69:
      case 73:
      case 76:
      case 77:
        v24 = *(_DWORD *)(a2 + 68);
        if (!v24)
          goto LABEL_291;
        v25 = *(_QWORD *)(a2 + 56) + 24 * v24;
        v26 = *(unsigned __int8 *)(v25 - 24);
        v27 = *(_QWORD *)(v25 - 16);
        *(_DWORD *)(a2 + 68) = v24 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1305;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v546);
        v35 = v546;
        if (!v546)
        {
          __break(0xC471u);
          JUMPOUT(0x198D612BCLL);
        }
        v36 = *(_DWORD *)(v23 + 240);
        if (!v36)
        {
          __break(0xC471u);
          JUMPOUT(0x198D612C4);
        }
        *(_DWORD *)(v23 + 240) = v36 - 1;
        v546 = 0;
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
        v37 = *(_DWORD *)(a2 + 68);
        if (!v37)
          goto LABEL_291;
        v38 = *(_QWORD *)(a2 + 48);
        v39 = *(_QWORD *)(a2 + 56) + 24 * v37;
        v40 = *(unsigned __int8 *)(v39 - 24);
        v41 = *(_QWORD *)(v39 - 16);
        *(_DWORD *)(a2 + 68) = v37 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1306;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v545);
        v46 = (int *)v545;
        if (!v545)
        {
          __break(0xC471u);
          JUMPOUT(0x198D612CCLL);
        }
        v47 = *(_DWORD *)(v38 + 240);
        if (!v47)
        {
          __break(0xC471u);
          JUMPOUT(0x198D612D4);
        }
        *(_DWORD *)(v38 + 240) = v47 - 1;
        v545 = 0;
        goto LABEL_17;
      case 2:
      case 16:
      case 46:
      case 71:
        v566 = JSC::Wasm::Types::Void;
        v567 = 0x3FFFFFFF;
        if (v9 > 45)
        {
          if (v9 == 46)
          {
            v58 = 4;
          }
          else
          {
            if (v9 != 71)
            {
LABEL_319:
              __break(0xC471u);
              JUMPOUT(0x198D61154);
            }
            v58 = 2;
          }
        }
        else if (v9 == 2)
        {
          v58 = 8;
        }
        else
        {
          v58 = v9;
          if (v9 != 16)
            goto LABEL_319;
        }
        v274 = *(_DWORD *)(a2 + 68);
        if (!v274)
          goto LABEL_295;
        v275 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v274 - 24);
        *(_DWORD *)(a2 + 68) = v274 - 1;
        v573 = (void (**)(WTF::StringPrintStream *__hidden))"WasmFunctionParser.h:";
        LODWORD(v574) = 21;
        LODWORD(v562) = 1001;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v573, (unsigned int *)&v562, (int **)&v563);
        v283 = v563;
        if (!v563)
        {
          __break(0xC471u);
          JUMPOUT(0x198D6131CLL);
        }
        v284 = *(_DWORD *)(v23 + 240);
        if (!v284)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61324);
        }
        *(_DWORD *)(v23 + 240) = v284 - 1;
        v563 = 0;
        if (*(_DWORD *)v283 == 2)
        {
          WTF::StringImpl::~StringImpl(v283, v276, v277, v278, v279, v280, v281, v282);
          WTF::fastFree(v303, v304, v305, v306, v307, v308, v309, v310);
        }
        else
        {
          *(_DWORD *)v283 -= 2;
        }
        if (v275 != 251)
        {
          v540 = "load_lane input must be a vector";
          v541 = 33;
          goto LABEL_300;
        }
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v573, v9, a2, &v564, (uint64_t)&v566, v267, v268);
        if ((_BYTE)v574)
          goto LABEL_32;
        v285 = (v58 - 2) >> 1;
        if (v285 > 7 || ((1 << v285) & 0x8B) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61194);
        }
        v286 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
          goto LABEL_316;
        *(_QWORD *)a2 = v286 + 1;
        if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v286) >= v58)
          goto LABEL_296;
        goto LABEL_201;
      case 4:
      case 15:
      case 30:
      case 59:
        v59 = *(_DWORD *)(a2 + 68);
        if (!v59)
          goto LABEL_291;
        v60 = *(_QWORD *)(a2 + 56) + 24 * v59;
        v26 = *(unsigned __int8 *)(v60 - 24);
        v27 = *(_QWORD *)(v60 - 16);
        *(_DWORD *)(a2 + 68) = v59 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1247;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v550);
        v68 = v550;
        if (!v550)
        {
          __break(0xC471u);
          JUMPOUT(0x198D612ECLL);
        }
        v69 = *(_DWORD *)(v23 + 240);
        if (!v69)
        {
          __break(0xC471u);
          JUMPOUT(0x198D612F4);
        }
        *(_DWORD *)(v23 + 240) = v69 - 1;
        v550 = 0;
        if (*(_DWORD *)v68 == 2)
        {
          WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
          WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
        }
        else
        {
          *(_DWORD *)v68 -= 2;
        }
        v70 = *(_DWORD *)(a2 + 68);
        if (!v70)
          goto LABEL_291;
        v71 = *(_QWORD *)(a2 + 48);
        v72 = *(_QWORD *)(a2 + 56) + 24 * v70;
        v40 = *(unsigned __int8 *)(v72 - 24);
        v41 = *(_QWORD *)(v72 - 16);
        *(_DWORD *)(a2 + 68) = v70 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1248;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, &v549);
        v46 = v549;
        if (!v549)
        {
          __break(0xC471u);
          JUMPOUT(0x198D612FCLL);
        }
        v73 = *(_DWORD *)(v71 + 240);
        if (!v73)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61304);
        }
        *(_DWORD *)(v71 + 240) = v73 - 1;
        v549 = 0;
        goto LABEL_17;
      case 7:
        v201 = *(_DWORD *)(a2 + 68);
        if (!v201)
        {
          v537 = "val";
          goto LABEL_310;
        }
        v202 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v201 - 24);
        *(_DWORD *)(a2 + 68) = v201 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 960;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v565);
        v210 = v565;
        if (!v565)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613CCLL);
        }
        v211 = *(_DWORD *)(v23 + 240);
        if (!v211)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613D4);
        }
        *(_DWORD *)(v23 + 240) = v211 - 1;
        v565 = 0;
        if (*(_DWORD *)v210 == 2)
        {
          WTF::StringImpl::~StringImpl(v210, v203, v204, v205, v206, v207, v208, v209);
          WTF::fastFree(v432, v433, v434, v435, v436, v437, v438, v439);
        }
        else
        {
          *(_DWORD *)v210 -= 2;
        }
        if (v202 != 251)
        {
          v48 = "store vector must be v128";
          goto LABEL_313;
        }
        v566 = JSC::Wasm::Types::Void;
        v567 = 0x3FFFFFFF;
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v573, 7u, a2, &v562, (uint64_t)&v566, *(double *)&JSC::Wasm::Types::Void, *(float *)v19.i32);
        v212 = v574;
        if ((_BYTE)v574)
          goto LABEL_32;
        *a1 = 0;
        goto LABEL_173;
      case 8:
      case 25:
      case 29:
      case 48:
        v566 = JSC::Wasm::Types::Void;
        v567 = 0x3FFFFFFF;
        if (v9 > 28)
        {
          if (v9 == 29)
          {
            v58 = 2;
          }
          else
          {
            if (v9 != 48)
              goto LABEL_318;
            v58 = 8;
          }
        }
        else
        {
          if (v9 != 8)
          {
            if (v9 == 25)
            {
              v58 = 4;
              goto LABEL_176;
            }
LABEL_318:
            __break(0xC471u);
            JUMPOUT(0x198D61134);
          }
          v58 = 16;
        }
LABEL_176:
        v258 = *(_DWORD *)(a2 + 68);
        if (v258)
        {
          v259 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v258 - 24);
          *(_DWORD *)(a2 + 68) = v258 - 1;
          v573 = (void (**)(WTF::StringPrintStream *__hidden))"WasmFunctionParser.h:";
          LODWORD(v574) = 21;
          LODWORD(v562) = 1043;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v573, (unsigned int *)&v562, (int **)&v561);
          v269 = v561;
          if (!v561)
          {
            __break(0xC471u);
            JUMPOUT(0x198D6130CLL);
          }
          v270 = *(_DWORD *)(v23 + 240);
          if (!v270)
          {
            __break(0xC471u);
            JUMPOUT(0x198D61314);
          }
          *(_DWORD *)(v23 + 240) = v270 - 1;
          v561 = 0;
          if (*(_DWORD *)v269 == 2)
          {
            WTF::StringImpl::~StringImpl(v269, v260, v261, v262, v263, v264, v265, v266);
            WTF::fastFree(v295, v296, v297, v298, v299, v300, v301, v302);
          }
          else
          {
            *(_DWORD *)v269 -= 2;
          }
          if (v259 != 251)
          {
            v540 = "store_lane input must be a vector";
            v541 = 34;
LABEL_300:
            v573 = (void (**)(WTF::StringPrintStream *__hidden))v540;
            v574 = v541;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v562, (uint64_t)&v573, v267, v268);
            v57 = v562;
            goto LABEL_172;
          }
          JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v573, v9, a2, &v564, (uint64_t)&v566, v267, v268);
          if (!(_BYTE)v574)
          {
            v272 = (v58 - 2) >> 1;
            if (v272 > 7 || ((1 << v272) & 0x8B) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198D61174);
            }
            v273 = *(_QWORD *)a2;
            if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
            {
LABEL_316:
              JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("Could not parse the lane index immediate byte.", (unint64_t *)a2, 47, &v573, v271);
            }
            else
            {
              *(_QWORD *)a2 = v273 + 1;
              if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v273) < v58)
              {
                *a1 = 0;
                a1[8] = 0;
                return;
              }
LABEL_296:
              JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", (unint64_t *)a2, 40, v58, ", expected an ImmLaneIdx", 25, v58, &v573, v271);
            }
          }
        }
        else
        {
LABEL_295:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "vector", 7, &v573, *(float *)v19.i32);
        }
        goto LABEL_32;
      case 11:
      case 51:
        v166 = *(_DWORD *)(a2 + 68);
        if (v166)
        {
          v167 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v166 - 24);
          *(_DWORD *)(a2 + 68) = v166 - 1;
          *(_QWORD *)&v566 = "WasmFunctionParser.h:";
          DWORD2(v566) = 21;
          LODWORD(v573) = 920;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v569);
          v175 = v569;
          if (!v569)
          {
            __break(0xC471u);
            JUMPOUT(0x198D6138CLL);
          }
          v176 = *(_DWORD *)(v23 + 240);
          if (!v176)
          {
            __break(0xC471u);
            JUMPOUT(0x198D61394);
          }
          *(_DWORD *)(v23 + 240) = v176 - 1;
          v569 = 0;
          if (*(_DWORD *)v175 == 2)
          {
            WTF::StringImpl::~StringImpl(v175, v168, v169, v170, v171, v172, v173, v174);
            WTF::fastFree(v346, v347, v348, v349, v350, v351, v352, v353);
          }
          else
          {
            *(_DWORD *)v175 -= 2;
          }
          v177 = *(_DWORD *)(a2 + 68);
          if (v177)
          {
            v178 = *(_QWORD *)(a2 + 48);
            v179 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v177 - 24);
            *(_DWORD *)(a2 + 68) = v177 - 1;
            *(_QWORD *)&v566 = "WasmFunctionParser.h:";
            DWORD2(v566) = 21;
            LODWORD(v573) = 921;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v568);
            v183 = v568;
            if (!v568)
            {
              __break(0xC471u);
              JUMPOUT(0x198D6139CLL);
            }
            v184 = *(_DWORD *)(v178 + 240);
            if (!v184)
            {
              __break(0xC471u);
              JUMPOUT(0x198D613A4);
            }
            *(_DWORD *)(v178 + 240) = v184 - 1;
            v568 = 0;
            if (*(_DWORD *)v183 == 2)
            {
              WTF::StringImpl::~StringImpl(v183, v180, v181, v182, v14, v15, v16, v17);
              WTF::fastFree(v378, v379, v380, v381, v382, v383, v384, v385);
            }
            else
            {
              *(_DWORD *)v183 -= 2;
            }
            if (v179 == 251)
            {
              if (v167 == 251)
                goto LABEL_201;
              v48 = "extmul rhs vector must be v128";
            }
            else
            {
              v48 = "extmul lhs vector must be v128";
            }
LABEL_308:
            v56 = 31;
LABEL_31:
            *(_QWORD *)&v566 = v48;
            *((_QWORD *)&v566 + 1) = v56;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v573, (uint64_t)&v566, v45, *(float *)v19.i32);
LABEL_32:
            v57 = v573;
            goto LABEL_172;
          }
          v537 = "lhs";
        }
        else
        {
          v537 = "rhs";
        }
LABEL_310:
        v538 = (unint64_t *)a2;
        v539 = 4;
        goto LABEL_293;
      case 12:
        v217 = *(_DWORD *)(a2 + 68);
        if (!v217)
        {
          v537 = "select condition";
          v538 = (unint64_t *)a2;
          v539 = 17;
          goto LABEL_293;
        }
        v218 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v217 - 24);
        *(_DWORD *)(a2 + 68) = v217 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 862;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v572);
        v222 = v572;
        if (!v572)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613DCLL);
        }
        v223 = *(_DWORD *)(v23 + 240);
        if (!v223)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613E4);
        }
        *(_DWORD *)(v23 + 240) = v223 - 1;
        v572 = 0;
        if (*(_DWORD *)v222 == 2)
        {
          WTF::StringImpl::~StringImpl(v222, v219, v220, v221, v14, v15, v16, v17);
          WTF::fastFree(v440, v441, v442, v443, v444, v445, v446, v447);
        }
        else
        {
          *(_DWORD *)v222 -= 2;
        }
        switch(v8)
        {
          case 1:
          case 2:
          case 3:
            if (v218 != 255)
              goto LABEL_262;
            goto LABEL_201;
          case 4:
            if (v218 != 254)
              goto LABEL_262;
            goto LABEL_201;
          case 5:
            if (v218 != 253)
              goto LABEL_262;
            goto LABEL_201;
          case 6:
            if (v218 == 252)
              goto LABEL_201;
LABEL_262:
            v48 = "Wrong type to SIMD splat";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198D61234);
        }
        goto LABEL_263;
      case 13:
      case 14:
      case 27:
      case 34:
      case 35:
      case 36:
      case 37:
      case 40:
      case 50:
      case 56:
      case 61:
      case 64:
      case 70:
        v566 = JSC::Wasm::Types::Void;
        v567 = 0x3FFFFFFF;
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v573, v9, a2, &v562, (uint64_t)&v566, *(double *)&JSC::Wasm::Types::Void, *(float *)v19.i32);
        if ((_BYTE)v574)
          goto LABEL_32;
        goto LABEL_201;
      case 17:
      case 68:
        v147 = *(_DWORD *)(a2 + 68);
        if (!v147)
        {
          v537 = "shift i32";
          v538 = (unint64_t *)a2;
          v539 = 10;
          goto LABEL_293;
        }
        v148 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v147 - 24);
        *(_DWORD *)(a2 + 68) = v147 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 899;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v571);
        v156 = v571;
        if (!v571)
        {
          __break(0xC471u);
          JUMPOUT(0x198D6136CLL);
        }
        v157 = *(_DWORD *)(v23 + 240);
        if (!v157)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61374);
        }
        *(_DWORD *)(v23 + 240) = v157 - 1;
        v571 = 0;
        if (*(_DWORD *)v156 == 2)
        {
          WTF::StringImpl::~StringImpl(v156, v149, v150, v151, v152, v153, v154, v155);
          WTF::fastFree(v338, v339, v340, v341, v342, v343, v344, v345);
        }
        else
        {
          *(_DWORD *)v156 -= 2;
        }
        v158 = *(_DWORD *)(a2 + 68);
        if (!v158)
        {
          v537 = "shift vector";
          v538 = (unint64_t *)a2;
          v539 = 13;
          goto LABEL_293;
        }
        v159 = *(_QWORD *)(a2 + 48);
        v160 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v158 - 24);
        *(_DWORD *)(a2 + 68) = v158 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 900;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v570);
        v164 = v570;
        if (!v570)
        {
          __break(0xC471u);
          JUMPOUT(0x198D6137CLL);
        }
        v165 = *(_DWORD *)(v159 + 240);
        if (!v165)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61384);
        }
        *(_DWORD *)(v159 + 240) = v165 - 1;
        v570 = 0;
        if (*(_DWORD *)v164 == 2)
        {
          WTF::StringImpl::~StringImpl(v164, v161, v162, v163, v14, v15, v16, v17);
          WTF::fastFree(v370, v371, v372, v373, v374, v375, v376, v377);
        }
        else
        {
          *(_DWORD *)v164 -= 2;
        }
        if (v160 == 251)
        {
          if (v148 == 255)
            goto LABEL_201;
          v48 = "Shift amount must be i32";
LABEL_263:
          v56 = 25;
        }
        else
        {
          v48 = "Shift vector must be v128";
LABEL_313:
          v56 = 26;
        }
        goto LABEL_31;
      case 19:
        v213 = *(_QWORD *)a2 + 16;
        if (*(_QWORD *)(a2 + 16) < v213)
        {
          v214 = "can't parse 128-bit vector constant";
          v215 = (unint64_t *)a2;
          v216 = 36;
          goto LABEL_151;
        }
        *(_QWORD *)a2 = v213;
        goto LABEL_201;
      case 22:
      case 33:
        v185 = *(_DWORD *)(a2 + 68);
        if (!v185)
          goto LABEL_291;
        v186 = *(_QWORD *)(a2 + 56) + 24 * v185;
        v26 = *(unsigned __int8 *)(v186 - 24);
        v27 = *(_QWORD *)(v186 - 16);
        *(_DWORD *)(a2 + 68) = v185 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1267;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v548);
        v194 = v548;
        if (!v548)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613ACLL);
        }
        v195 = *(_DWORD *)(v23 + 240);
        if (!v195)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613B4);
        }
        *(_DWORD *)(v23 + 240) = v195 - 1;
        v548 = 0;
        if (*(_DWORD *)v194 == 2)
        {
          WTF::StringImpl::~StringImpl(v194, v187, v188, v189, v190, v191, v192, v193);
          WTF::fastFree(v354, v355, v356, v357, v358, v359, v360, v361);
        }
        else
        {
          *(_DWORD *)v194 -= 2;
        }
        v196 = *(_DWORD *)(a2 + 68);
        if (!v196)
          goto LABEL_291;
        v197 = *(_QWORD *)(a2 + 48);
        v198 = *(_QWORD *)(a2 + 56) + 24 * v196;
        v40 = *(unsigned __int8 *)(v198 - 24);
        v41 = *(_QWORD *)(v198 - 16);
        *(_DWORD *)(a2 + 68) = v196 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1268;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, &v547);
        v46 = v547;
        if (!v547)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613BCLL);
        }
        v199 = *(_DWORD *)(v197 + 240);
        if (!v199)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613C4);
        }
        *(_DWORD *)(v197 + 240) = v199 - 1;
        v547 = 0;
LABEL_17:
        if (*v46 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, v42, v43, v44, v14, v15, v16, v17);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *v46 -= 2;
        }
        goto LABEL_19;
      case 41:
        v224 = *(_QWORD *)a2 + 16;
        if (*(_QWORD *)(a2 + 16) < v224)
        {
          v214 = "can't parse 128-bit shuffle immediate";
          v215 = (unint64_t *)a2;
          v216 = 38;
          goto LABEL_151;
        }
        v311 = *(_QWORD *)(a2 + 8) + *(_QWORD *)a2;
        v18.i32[0] = *(_DWORD *)v311;
        v312 = *(_BYTE *)(v311 + 4);
        v19.i32[0] = *(_DWORD *)(v311 + 5);
        v313 = *(_BYTE *)(v311 + 9);
        v314 = *(_BYTE *)(v311 + 10);
        v315 = *(_BYTE *)(v311 + 11);
        v20.i32[0] = *(_DWORD *)(v311 + 12);
        *(_QWORD *)a2 = v224;
        v316.i64[0] = vmovl_u8(v18).u64[0];
        v317 = (uint8x8_t)vmovl_u8(*(uint8x8_t *)v19.i8).u64[0];
        v19.i64[0] = vmovl_u8(v20).u64[0];
        switch(v8)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198D61294);
          case 1:
            v497 = v317.i8[6];
            v498 = v317.i8[4];
            v499 = v317.i8[2];
            v500 = v317.i8[0];
            v501.i8[0] = v316.i8[0];
            v501.i8[1] = v316.i8[4];
            v501.i8[2] = v316.i8[6];
            v501.i8[3] = v312;
            v501.i8[4] = v500;
            v501.i8[5] = v499;
            v501.i8[6] = v498;
            v501.i8[7] = v497;
            if ((vmaxv_u8(vcgt_u8(v501, (uint8x8_t)0x1F1F1F1F1F1F1F1FLL)) & 1) == 0
              && (v19.i8[0] | v316.i8[2] | v19.i8[2] | v19.i8[4] | v19.i8[6] | v315 | v313 | v314) < 0x20u)
            {
              goto LABEL_276;
            }
            goto LABEL_297;
          case 2:
            v496 = v316.i8[0];
            v316.i8[0] = v316.i8[2];
            v316.i8[1] = v496;
            v316.i8[2] = v316.i8[4];
            v316.i8[3] = v316.i8[6];
            v316.i8[4] = v312;
            v316.i8[5] = v317.i8[0];
            v316.i8[6] = v317.i8[2];
            v316.i8[7] = v317.i8[4];
            v316.i8[8] = v317.i8[6];
            v316.i8[9] = v313;
            v316.i8[10] = v314;
            v316.i8[11] = v315;
            v316.i8[12] = v19.i8[0];
            v316.i8[13] = v19.i8[2];
            v316.i8[14] = v19.i8[4];
            v316.i8[15] = v19.i8[6];
            v19.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v19.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            if ((vmaxvq_u8(vcgtq_u8(v316, v19)) & 1) != 0)
              goto LABEL_297;
            goto LABEL_276;
          case 3:
          case 5:
            v318.i32[0] = v316.u16[1];
            v318.i32[1] = v316.u16[0];
            v319 = vcgt_u32((uint32x2_t)0x800000008, (uint32x2_t)vand_s8(v318, (int8x8_t)0xFF000000FFLL));
            v320 = v317.i8[0];
            v317.i8[0] = v312;
            v317.i8[1] = v320;
            v317.i8[3] = v317.i8[4];
            v317.i8[4] = v317.i8[6];
            v317.i8[5] = v313;
            v317.i8[6] = v314;
            v317.i8[7] = v315;
            v321 = vcgt_u8(v317, (uint8x8_t)0x707070707070707);
            v321.i8[0] = vmaxv_u8(v321);
            *(uint16x4_t *)v19.i8 = vcgt_u16((uint16x4_t)(v19.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0x7000700070007);
            v19.i16[0] = vmaxv_u16(*(uint16x4_t *)v19.i8);
            if ((~v321.i32[0] & ~v19.i32[0] & v319.i32[0] & v319.i32[1] & 1) == 0
              || (v316.i8[4] | v316.i8[6]) >= 8u)
            {
              goto LABEL_297;
            }
            goto LABEL_276;
          case 4:
          case 6:
            v428.i32[0] = v316.u16[1];
            v428.i32[1] = v316.u16[0];
            v429 = vcgt_u32((uint32x2_t)0x400000004, (uint32x2_t)vand_s8(v428, (int8x8_t)0xFF000000FFLL));
            v430 = v317.i8[0];
            v317.i8[0] = v312;
            v317.i8[1] = v430;
            v317.i8[3] = v317.i8[4];
            v317.i8[4] = v317.i8[6];
            v317.i8[5] = v313;
            v317.i8[6] = v314;
            v317.i8[7] = v315;
            v431 = vcgt_u8(v317, (uint8x8_t)0x303030303030303);
            v431.i8[0] = vmaxv_u8(v431);
            *(uint16x4_t *)v19.i8 = vcgt_u16((uint16x4_t)(v19.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0x3000300030003);
            v19.i16[0] = vmaxv_u16(*(uint16x4_t *)v19.i8);
            if ((~v431.i32[0] & ~v19.i32[0] & v429.i32[0] & v429.i32[1] & 1) == 0
              || (v316.i8[4] | v316.i8[6]) >= 4u)
            {
LABEL_297:
              JSC::Wasm::ParserBase::fail<>((unint64_t *)a2, &v566);
              goto LABEL_171;
            }
LABEL_276:
            v502 = *(_DWORD *)(a2 + 68);
            if (!v502)
              goto LABEL_291;
            v503 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v502 - 24);
            *(_DWORD *)(a2 + 68) = v502 - 1;
            *(_QWORD *)&v566 = "WasmFunctionParser.h:";
            DWORD2(v566) = 21;
            LODWORD(v573) = 1111;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v560);
            v511 = v560;
            if (!v560)
            {
              __break(0xC471u);
              JUMPOUT(0x198D6144CLL);
            }
            v512 = *(_DWORD *)(v23 + 240);
            if (!v512)
            {
              __break(0xC471u);
              JUMPOUT(0x198D61454);
            }
            *(_DWORD *)(v23 + 240) = v512 - 1;
            v560 = 0;
            if (*(_DWORD *)v511 == 2)
            {
              WTF::StringImpl::~StringImpl(v511, v504, v505, v506, v507, v508, v509, v510);
              WTF::fastFree(v521, v522, v523, v524, v525, v526, v527, v528);
            }
            else
            {
              *(_DWORD *)v511 -= 2;
            }
            if (v503 != 251)
              goto LABEL_288;
            v513 = *(_DWORD *)(a2 + 68);
            if (!v513)
              goto LABEL_291;
            v514 = *(_QWORD *)(a2 + 48);
            v515 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v513 - 24);
            *(_DWORD *)(a2 + 68) = v513 - 1;
            *(_QWORD *)&v566 = "WasmFunctionParser.h:";
            DWORD2(v566) = 21;
            LODWORD(v573) = 1113;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v559);
            v519 = v559;
            if (!v559)
            {
              __break(0xC471u);
              JUMPOUT(0x198D6145CLL);
            }
            v520 = *(_DWORD *)(v514 + 240);
            if (!v520)
            {
              __break(0xC471u);
              JUMPOUT(0x198D61464);
            }
            *(_DWORD *)(v514 + 240) = v520 - 1;
            v559 = 0;
            if (*(_DWORD *)v519 == 2)
            {
              WTF::StringImpl::~StringImpl(v519, v516, v517, v518, v14, v15, v16, v17);
              WTF::fastFree(v529, v530, v531, v532, v533, v534, v535, v536);
            }
            else
            {
              *(_DWORD *)v519 -= 2;
            }
            if (v515 != 251)
            {
LABEL_288:
              v48 = "shuffle input must be a vector";
              goto LABEL_308;
            }
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198D612B4);
        }
        goto LABEL_201;
      case 44:
      case 57:
      case 74:
        v90 = *(_DWORD *)(a2 + 68);
        if (!v90)
          goto LABEL_291;
        v91 = *(_QWORD *)(a2 + 56) + 24 * v90;
        v92 = *(unsigned __int8 *)(v91 - 24);
        v93 = *(_QWORD *)(v91 - 16);
        *(_DWORD *)(a2 + 68) = v90 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1172;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v555);
        v97 = v555;
        if (!v555)
        {
          __break(0xC471u);
          JUMPOUT(0x198D6132CLL);
        }
        v98 = *(_DWORD *)(v23 + 240);
        if (!v98)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61334);
        }
        *(_DWORD *)(v23 + 240) = v98 - 1;
        v555 = 0;
        if (*(_DWORD *)v97 == 2)
        {
          WTF::StringImpl::~StringImpl(v97, v94, v95, v96, v14, v15, v16, v17);
          WTF::fastFree(v322, v323, v324, v325, v326, v327, v328, v329);
        }
        else
        {
          *(_DWORD *)v97 -= 2;
        }
        if (v92 != 251 || v93)
          goto LABEL_29;
        v99 = a1;
        v100 = a2;
        v101 = 255;
        goto LABEL_202;
      case 65:
        v200 = 16;
        switch(v8)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198D61214);
          case 1:
            break;
          case 2:
            v200 = 8;
            break;
          case 3:
          case 5:
            v200 = 4;
            break;
          case 4:
          case 6:
            v200 = 2;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198D61274);
        }
        v418 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
          goto LABEL_317;
        *(_QWORD *)a2 = v418 + 1;
        if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v418) >= v200)
          goto LABEL_303;
        v419 = *(_DWORD *)(a2 + 68);
        if (!v419)
          goto LABEL_291;
        v420 = *(_QWORD *)(a2 + 56) + 24 * v419;
        v421 = *(unsigned __int8 *)(v420 - 24);
        v422 = *(_QWORD *)(v420 - 16);
        *(_DWORD *)(a2 + 68) = v419 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1132;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v558);
        v426 = v558;
        if (!v558)
        {
          __break(0xC471u);
          JUMPOUT(0x198D6143CLL);
        }
        v427 = *(_DWORD *)(v23 + 240);
        if (!v427)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61444);
        }
        *(_DWORD *)(v23 + 240) = v427 - 1;
        v558 = 0;
        if (*(_DWORD *)v426 == 2)
        {
          WTF::StringImpl::~StringImpl(v426, v423, v424, v425, v14, v15, v16, v17);
          WTF::fastFree(v472, v473, v474, v475, v476, v477, v478, v479);
        }
        else
        {
          *(_DWORD *)v426 -= 2;
        }
        if (v421 != 251 || v422)
          goto LABEL_29;
        if ((v8 - 1) >= 6)
        {
          __break(0xC471u);
          JUMPOUT(0x198D611B4);
        }
        v101 = qword_19915A538[(char)(v8 - 1)];
        v99 = a1;
        v100 = a2;
        goto LABEL_202;
      case 66:
        v200 = 16;
        switch(v8)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198D611F4);
          case 1:
            break;
          case 2:
            v200 = 8;
            break;
          case 3:
          case 5:
            v200 = 4;
            break;
          case 4:
          case 6:
            v200 = 2;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198D61254);
        }
        v394 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
        {
LABEL_317:
          v214 = "Could not parse the lane index immediate byte.";
          v215 = (unint64_t *)a2;
          v216 = 47;
          goto LABEL_151;
        }
        *(_QWORD *)a2 = v394 + 1;
        if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v394) >= v200)
        {
LABEL_303:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", (unint64_t *)a2, 40, v200, ", expected an ImmLaneIdx", 25, v200, &v566, *(float *)v19.i32);
        }
        else
        {
          v395 = *(_DWORD *)(a2 + 68);
          if (v395)
          {
            v396 = *(_QWORD *)(a2 + 56) + 24 * v395;
            v398 = *(_QWORD *)(v396 - 24);
            v397 = *(_QWORD *)(v396 - 16);
            *(_DWORD *)(a2 + 68) = v395 - 1;
            *(_QWORD *)&v566 = "WasmFunctionParser.h:";
            DWORD2(v566) = 21;
            LODWORD(v573) = 1152;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v557);
            v406 = v557;
            if (!v557)
            {
              __break(0xC471u);
              JUMPOUT(0x198D6141CLL);
            }
            v407 = *(_DWORD *)(v23 + 240);
            if (!v407)
            {
              __break(0xC471u);
              JUMPOUT(0x198D61424);
            }
            *(_DWORD *)(v23 + 240) = v407 - 1;
            v557 = 0;
            if (*(_DWORD *)v406 == 2)
            {
              WTF::StringImpl::~StringImpl(v406, v399, v400, v401, v402, v403, v404, v405);
              WTF::fastFree(v464, v465, v466, v467, v468, v469, v470, v471);
            }
            else
            {
              *(_DWORD *)v406 -= 2;
            }
            v408 = *(_DWORD *)(a2 + 68);
            if (v408)
            {
              v409 = *(_QWORD *)(a2 + 48);
              v410 = *(_QWORD *)(a2 + 56) + 24 * v408;
              v411 = *(unsigned __int8 *)(v410 - 24);
              v412 = *(_QWORD *)(v410 - 16);
              *(_DWORD *)(a2 + 68) = v408 - 1;
              *(_QWORD *)&v566 = "WasmFunctionParser.h:";
              DWORD2(v566) = 21;
              LODWORD(v573) = 1153;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v556);
              v416 = v556;
              if (!v556)
              {
                __break(0xC471u);
                JUMPOUT(0x198D6142CLL);
              }
              v417 = *(_DWORD *)(v409 + 240);
              if (!v417)
              {
                __break(0xC471u);
                JUMPOUT(0x198D61434);
              }
              *(_DWORD *)(v409 + 240) = v417 - 1;
              v556 = 0;
              if (*(_DWORD *)v416 == 2)
              {
                WTF::StringImpl::~StringImpl(v416, v413, v414, v415, v14, v15, v16, v17);
                WTF::fastFree(v488, v489, v490, v491, v492, v493, v494, v495);
              }
              else
              {
                *(_DWORD *)v416 -= 2;
              }
              if (v411 != 251 || v412)
              {
LABEL_21:
                v48 = "type mismatch for argument 1";
              }
              else
              {
                if ((v8 - 1) >= 6)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198D611D4);
                }
                if ((0xFCFDFEFFFFFFuLL >> (8 * (v8 - 1))) == v398
                  && !v397)
                {
LABEL_201:
                  v99 = a1;
                  v100 = a2;
                  v101 = 251;
LABEL_202:
                  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(true)#1}::operator()<JSC::Wasm::Type>(v99, v100, v101, 0, v14, v15, v16, v17);
                  return;
                }
LABEL_29:
                v48 = "type mismatch for argument 0";
              }
LABEL_30:
              v56 = 29;
              goto LABEL_31;
            }
LABEL_291:
            v537 = "vector argument";
          }
          else
          {
            v537 = "scalar argument";
          }
          v538 = (unint64_t *)a2;
          v539 = 16;
LABEL_293:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v538, 26, v537, v539, &v566, *(float *)v19.i32);
        }
        goto LABEL_171;
      case 72:
        v225 = *(_DWORD *)(a2 + 68);
        if (!v225)
          goto LABEL_291;
        v226 = *(_QWORD *)(a2 + 56) + 24 * v225;
        v26 = *(unsigned __int8 *)(v226 - 24);
        v27 = *(_QWORD *)(v226 - 16);
        *(_DWORD *)(a2 + 68) = v225 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1223;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v553);
        v234 = v553;
        if (!v553)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613ECLL);
        }
        v235 = *(_DWORD *)(v23 + 240);
        if (!v235)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613F4);
        }
        *(_DWORD *)(v23 + 240) = v235 - 1;
        v553 = 0;
        if (*(_DWORD *)v234 == 2)
        {
          WTF::StringImpl::~StringImpl(v234, v227, v228, v229, v230, v231, v232, v233);
          WTF::fastFree(v448, v449, v450, v451, v452, v453, v454, v455);
        }
        else
        {
          *(_DWORD *)v234 -= 2;
        }
        v236 = *(_DWORD *)(a2 + 68);
        if (!v236)
          goto LABEL_291;
        v237 = *(_QWORD *)(a2 + 48);
        v238 = *(_QWORD *)(a2 + 56) + 24 * v236;
        v40 = *(unsigned __int8 *)(v238 - 24);
        v41 = *(_QWORD *)(v238 - 16);
        *(_DWORD *)(a2 + 68) = v236 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1224;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v552);
        v246 = v552;
        if (!v552)
        {
          __break(0xC471u);
          JUMPOUT(0x198D613FCLL);
        }
        v247 = *(_DWORD *)(v237 + 240);
        if (!v247)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61404);
        }
        *(_DWORD *)(v237 + 240) = v247 - 1;
        v552 = 0;
        if (*(_DWORD *)v246 == 2)
        {
          WTF::StringImpl::~StringImpl(v246, v239, v240, v241, v242, v243, v244, v245);
          WTF::fastFree(v456, v457, v458, v459, v460, v461, v462, v463);
        }
        else
        {
          *(_DWORD *)v246 -= 2;
        }
        v248 = *(_DWORD *)(a2 + 68);
        if (!v248)
          goto LABEL_291;
        v249 = *(_QWORD *)(a2 + 48);
        v250 = *(_QWORD *)(a2 + 56) + 24 * v248;
        v251 = *(unsigned __int8 *)(v250 - 24);
        v252 = *(_QWORD *)(v250 - 16);
        *(_DWORD *)(a2 + 68) = v248 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1225;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v551);
        v256 = v551;
        if (!v551)
        {
          __break(0xC471u);
          JUMPOUT(0x198D6140CLL);
        }
        v257 = *(_DWORD *)(v249 + 240);
        if (!v257)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61414);
        }
        *(_DWORD *)(v249 + 240) = v257 - 1;
        v551 = 0;
        if (*(_DWORD *)v256 == 2)
        {
          WTF::StringImpl::~StringImpl(v256, v253, v254, v255, v14, v15, v16, v17);
          WTF::fastFree(v480, v481, v482, v483, v484, v485, v486, v487);
        }
        else
        {
          *(_DWORD *)v256 -= 2;
        }
        if (v251 != 251 || v252)
          goto LABEL_169;
LABEL_19:
        if (v40 != 251 || v41)
          goto LABEL_21;
LABEL_27:
        if (v26 != 251 || v27)
          goto LABEL_29;
        goto LABEL_201;
      case 79:
      case 80:
        v110 = *(_DWORD *)(a2 + 68);
        if (!v110)
          goto LABEL_291;
        v111 = *(_QWORD *)(a2 + 56) + 24 * v110;
        v112 = *(unsigned __int8 *)(v111 - 24);
        v113 = *(_QWORD *)(v111 - 16);
        *(_DWORD *)(a2 + 68) = v110 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1325;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v544);
        v121 = v544;
        if (!v544)
        {
          __break(0xC471u);
          JUMPOUT(0x198D6133CLL);
        }
        v122 = *(_DWORD *)(v23 + 240);
        if (!v122)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61344);
        }
        *(_DWORD *)(v23 + 240) = v122 - 1;
        v544 = 0;
        if (*(_DWORD *)v121 == 2)
        {
          WTF::StringImpl::~StringImpl(v121, v114, v115, v116, v117, v118, v119, v120);
          WTF::fastFree(v330, v331, v332, v333, v334, v335, v336, v337);
        }
        else
        {
          *(_DWORD *)v121 -= 2;
        }
        v123 = *(_DWORD *)(a2 + 68);
        if (!v123)
          goto LABEL_291;
        v124 = *(_QWORD *)(a2 + 48);
        v125 = *(_QWORD *)(a2 + 56) + 24 * v123;
        v126 = *(unsigned __int8 *)(v125 - 24);
        v127 = *(_QWORD *)(v125 - 16);
        *(_DWORD *)(a2 + 68) = v123 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1326;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v543);
        v135 = v543;
        if (!v543)
        {
          __break(0xC471u);
          JUMPOUT(0x198D6134CLL);
        }
        v136 = *(_DWORD *)(v124 + 240);
        if (!v136)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61354);
        }
        *(_DWORD *)(v124 + 240) = v136 - 1;
        v543 = 0;
        if (*(_DWORD *)v135 == 2)
        {
          WTF::StringImpl::~StringImpl(v135, v128, v129, v130, v131, v132, v133, v134);
          WTF::fastFree(v362, v363, v364, v365, v366, v367, v368, v369);
        }
        else
        {
          *(_DWORD *)v135 -= 2;
        }
        v137 = *(_DWORD *)(a2 + 68);
        if (!v137)
          goto LABEL_291;
        v138 = *(_QWORD *)(a2 + 48);
        v139 = *(_QWORD *)(a2 + 56) + 24 * v137;
        v140 = *(unsigned __int8 *)(v139 - 24);
        v141 = *(_QWORD *)(v139 - 16);
        *(_DWORD *)(a2 + 68) = v137 - 1;
        *(_QWORD *)&v566 = "WasmFunctionParser.h:";
        DWORD2(v566) = 21;
        LODWORD(v573) = 1327;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v566, (unsigned int *)&v573, (int **)&v542);
        v145 = v542;
        if (!v542)
        {
          __break(0xC471u);
          JUMPOUT(0x198D6135CLL);
        }
        v146 = *(_DWORD *)(v138 + 240);
        if (!v146)
        {
          __break(0xC471u);
          JUMPOUT(0x198D61364);
        }
        *(_DWORD *)(v138 + 240) = v146 - 1;
        v542 = 0;
        if (*(_DWORD *)v145 == 2)
        {
          WTF::StringImpl::~StringImpl(v145, v142, v143, v144, v14, v15, v16, v17);
          WTF::fastFree(v386, v387, v388, v389, v390, v391, v392, v393);
        }
        else
        {
          *(_DWORD *)v145 -= 2;
        }
        if (v140 != 251 || v141)
          goto LABEL_29;
        if (v126 != 251 || v127)
          goto LABEL_21;
        if (v112 == 251 && !v113)
          goto LABEL_201;
LABEL_169:
        v48 = "type mismatch for argument 2";
        goto LABEL_30;
      default:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", (unint64_t *)a2, 17, v9, &v566, *(float *)v19.i32);
        goto LABEL_171;
    }
  }
  v214 = "relaxed simd instructions not supported";
  v215 = (unint64_t *)a2;
  v216 = 40;
LABEL_151:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v214, v215, v216, &v566, *(float *)v19.i32);
LABEL_171:
  v57 = (void (**)(WTF::StringPrintStream *__hidden))v566;
LABEL_172:
  *(_QWORD *)a1 = v57;
  v212 = 1;
LABEL_173:
  a1[8] = v212;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, JSC::Wasm::Type *a6, uint64_t a7, _DWORD *a8, double a9, float a10)
{
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  double v28;
  float v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  double v42;
  float v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF::PrintStream *v65;
  float v66;
  double v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  const WTF::String *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  float v82;
  const WTF::String *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  float v90;
  const WTF::String *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  float v98;
  const WTF::String *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  float v106;
  const WTF::String *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  float v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  int v184;
  char v185;
  void (**v186)(WTF::StringPrintStream *__hidden);
  WTF *v187;
  __int128 v188;
  _BYTE v189[128];
  void (**v190)(WTF::StringPrintStream *__hidden);
  WTF *v191;
  __int128 v192;
  _BYTE v193[128];
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v186 = off_1E3572250;
  v187 = (WTF *)v189;
  v188 = xmmword_199122F80;
  v189[0] = 0;
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a3)
  {
    v16 = *(_QWORD *)(a3 + 8);
    v17 = v16 != 0;
    v18 = v16 - 1;
    if (!v17)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v18, (uint64_t)&v183, a10);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v183 = (WTF::StringImpl *)v19;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v182, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v27 = v191;
  if (!v191)
  {
    v182 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v182);
  v27 = v191;
  if (v191 != (WTF *)v193)
LABEL_12:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v181, a2, a4, v28, v29);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a5)
  {
    v31 = *(_QWORD *)(a5 + 8);
    v17 = v31 != 0;
    v32 = v31 - 1;
    if (!v17)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v32, (uint64_t)&v183, v30);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v183 = (WTF::StringImpl *)v33;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v180, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v41 = v191;
  if (!v191)
  {
    v180 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v180);
  v41 = v191;
  if (v191 != (WTF *)v193)
LABEL_24:
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::typeToStringModuleRelative((uint64_t *)&v179, a2, a6, v42, v43);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a7)
  {
    v45 = *(_QWORD *)(a7 + 8);
    v17 = v45 != 0;
    v46 = v45 - 1;
    if (!v17)
      v46 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a7, v46, (uint64_t)&v183, v44);
  }
  else
  {
    v47 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v47 = 1;
    *(_QWORD *)(v47 + 8) = 0;
    *(_BYTE *)(v47 + 16) = 0;
    v183 = (WTF::StringImpl *)v47;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v178, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v55 = v191;
  if (!v191)
  {
    v183 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v183);
  v55 = v191;
  if (v191 != (WTF *)v193)
LABEL_36:
    WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v190, "%u", *a8);
  v190[5]((WTF::StringPrintStream *)&v190);
  v63 = v191;
  if (!v191)
  {
    v178 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v178);
  v63 = v191;
  if (v191 != (WTF *)v193)
LABEL_41:
    WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
  v64 = (WTF *)((uint64_t (*)(_QWORD))v186[4])(&v186);
  v65 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v64 + 32))(v64);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v190, v66);
  WTF::printExpectedCStringHelper(v65, "StringView", &v190);
  if ((_DWORD)v191 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v191])(&v185, &v190);
  v67 = (*(double (**)(WTF *))(*(_QWORD *)v64 + 40))(v64);
  WTF::printInternal(v64, (WTF::PrintStream *)&v182, v68, v69, v70, v71, v72, v73, v67, v74);
  WTF::printInternal(v64, (WTF::PrintStream *)&v181, v75, v76, v77, v78, v79, v80, v81, v82);
  WTF::printInternal(v64, (WTF::PrintStream *)&v180, v83, v84, v85, v86, v87, v88, v89, v90);
  WTF::printInternal(v64, (WTF::PrintStream *)&v179, v91, v92, v93, v94, v95, v96, v97, v98);
  WTF::printInternal(v64, (WTF::PrintStream *)&v183, v99, v100, v101, v102, v103, v104, v105, v106);
  WTF::printInternal(v64, (WTF::PrintStream *)&v178, v107, v108, v109, v110, v111, v112, v113, v114);
  v186[5]((WTF::StringPrintStream *)&v186);
  v122 = v178;
  v178 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  v123 = v183;
  v183 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  v124 = v179;
  v179 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  v125 = v180;
  v180 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  v126 = v181;
  v181 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = v182;
  v182 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = v187;
  if (v187)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v187, v188, (uint64_t *)&v190);
    v128 = v187;
    *a1 = v190;
    if (v128 == (WTF *)v189)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v128, v115, v116, v117, v118, v119, v120, v121);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(true)#1}::operator()<JSC::Wasm::Type>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;

  *(_QWORD *)&v44 = a3;
  *((_QWORD *)&v44 + 1) = a4;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_DWORD *)(v8 + 240);
  if (v9 == -1)
    goto LABEL_29;
  v11 = v9 + 1;
  if (*(_DWORD *)(v8 + 244) <= v9)
    v12 = v9 + 1;
  else
    v12 = *(_DWORD *)(v8 + 244);
  *(_DWORD *)(v8 + 240) = v11;
  *(_DWORD *)(v8 + 244) = v12;
  if (*(_DWORD *)(v8 + 156) != 0x3FFFFFFF)
    goto LABEL_6;
  v16 = *(_QWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 156) = *(_DWORD *)(v16 + 52) + 0x40000000;
  v17 = *(unsigned int *)(v16 + 52);
  if ((_DWORD)v17 == *(_DWORD *)(v16 + 48))
  {
    v36 = v8;
    v38 = a2;
    v40 = a4;
    v42 = a3;
    v26 = v17 + (v17 >> 2);
    if (v26 >= 0x10)
      v27 = v26 + 1;
    else
      v27 = 16;
    v35 = *(unsigned int *)(v16 + 52);
    if (v27 <= v17 + 1)
      v28 = v17 + 1;
    else
      v28 = v27;
    if (!(v28 >> 29))
    {
      v29 = *(const void **)(v16 + 40);
      v30 = v16;
      v31 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
      *(_DWORD *)(v30 + 48) = v28;
      *(_QWORD *)(v30 + 40) = v31;
      memcpy(v31, v29, 8 * v35);
      if (v29)
      {
        if (*(const void **)(v30 + 40) == v29)
        {
          *(_QWORD *)(v30 + 40) = 0;
          *(_DWORD *)(v30 + 48) = 0;
        }
        WTF::fastFree((unint64_t)v29, v32, v33, v34, a5, a6, a7, a8);
      }
      v16 = v30;
      v17 = *(unsigned int *)(v30 + 52);
      v18 = (_QWORD *)(*(_QWORD *)(v30 + 40) + 8 * v17);
      a2 = v38;
      a4 = v40;
      a3 = v42;
      v8 = v36;
      goto LABEL_12;
    }
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x198D61DE8);
  }
  v18 = (_QWORD *)(*(_QWORD *)(v16 + 40) + 8 * v17);
LABEL_12:
  *v18 = 0;
  *(_DWORD *)(v16 + 52) = v17 + 1;
  if (BYTE1(dword_1ECF4C270))
  {
    v39 = a4;
    v41 = a3;
    v37 = a2;
    v19 = v8;
    v20 = *(_QWORD *)(v8 + 24);
    v21 = (char **)(v20 + 24);
    v22 = *(unsigned int *)(v20 + 36);
    if ((_DWORD)v22 == *(_DWORD *)(v20 + 32))
    {
      v23 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&JSC::Wasm::Types::I32);
      v22 = *(unsigned int *)(v20 + 36);
      v24 = *(char **)(v20 + 24);
      v25 = *(_OWORD *)v23;
    }
    else
    {
      v24 = *v21;
      v25 = JSC::Wasm::Types::I32;
    }
    *(_OWORD *)&v24[16 * v22] = v25;
    ++*(_DWORD *)(v20 + 36);
    a2 = v37;
    a4 = v39;
    a3 = v41;
    v8 = v19;
  }
LABEL_6:
  v13 = *(_DWORD *)(v8 + 156);
  v43 = v13;
  v14 = *(_DWORD *)(a2 + 68);
  if (v14 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::VirtualRegister&>(a2 + 56, &v44, &v43, a4, a5, a6, a7, a8);
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 56) + 24 * v14;
    *(_QWORD *)v15 = a3;
    *(_QWORD *)(v15 + 8) = a4;
    *(_DWORD *)(v15 + 16) = v13;
    ++*(_DWORD *)(a2 + 68);
  }
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, uint64_t a3, _DWORD *a4, uint64_t a5, double a6, float a7)
{
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void (**v57)(WTF::StringPrintStream *__hidden);
  char *v58;
  unint64_t *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  void (**v62[2])(WTF::StringPrintStream *__hidden);
  void (**v63)(WTF::StringPrintStream *__hidden);
  unsigned int v64;
  unsigned int v65;
  const char *v66;
  uint64_t v67;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_8;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v9 = 0;
        v65 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_44:
        v9 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_44;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_8;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x198D61E68);
    }
LABEL_13:
    v9 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v9 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
    goto LABEL_8;
LABEL_10:
  v9 = 2;
LABEL_15:
  v65 = v9;
LABEL_16:
  if (*(_DWORD *)(*(_QWORD *)(a3 + 14704) + 104) == -1)
  {
    v55 = "simd memory instructions need a memory defined in the module";
    v56 = 61;
LABEL_50:
    v66 = v55;
    v67 = v56;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v62, (uint64_t)&v66, a6, a7);
    v57 = v62[0];
    goto LABEL_51;
  }
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)a3;
  v12 = v10 - *(_QWORD *)a3;
  if (v10 > *(_QWORD *)a3)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a3 + 8);
    v17 = 5;
    if (v12 < 5)
      v17 = v10 - *(_QWORD *)a3;
    v18 = v17 - 1;
    *(_QWORD *)a3 = v11 + 1;
    v19 = v16 + v11;
    while (1)
    {
      v20 = *(char *)(v19 + v13);
      v15 |= (v20 & 0x7F) << v14;
      if ((v20 & 0x80000000) == 0)
        break;
      if (v18 == v13)
        goto LABEL_53;
      v21 = v11 + v13 + 2;
      *(_QWORD *)a3 = v21;
      ++v13;
      v14 += 7;
      if (v12 == v13)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v64 = v15;
    if ((_DWORD)v13 != 4 || v20 < 0x10u)
    {
      if (v10 <= v11 + v13 + 1)
        goto LABEL_55;
      v19 = 0;
      v22 = 0;
      v23 = 0;
      *a4 = 0;
      v24 = ~v13 + v12;
      v25 = 5;
      if (v24 < 5)
        v25 = v24;
      v26 = v11 + v13;
      *(_QWORD *)a3 = v11 + v13 + 2;
      v27 = v11 - v10;
      v28 = v16 + v11;
      v29 = v25 - 1;
      v30 = v27 + v13;
      while (1)
      {
        LODWORD(v21) = *(char *)(v28 + v19 + v13 + 1);
        v23 |= (v21 & 0x7F) << v22;
        *a4 = v23;
        if ((v21 & 0x80000000) == 0)
          break;
        if (v29 == v19)
          goto LABEL_55;
        v31 = v26 + v19;
        v32 = v30 + v19++;
        v21 = v31 + 3;
        *(_QWORD *)a3 = v21;
        v22 += 7;
        if (v32 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v19 == 4 && v21 >= 0x10u)
      {
LABEL_55:
        v58 = "can't get simd memory op offset";
        v59 = (unint64_t *)a3;
        v60 = 32;
        goto LABEL_56;
      }
      if (v15 > v9)
      {
        v66 = "alignment: ";
        v67 = 12;
        v62[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
        v62[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v63, (uint64_t)&v66, &v64, (uint64_t)v62, &v65, a6, a7);
        v57 = v63;
        goto LABEL_51;
      }
      v33 = *(_DWORD *)(a3 + 68);
      if (!v33)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a3, 26, "simd memory op pointer", 23, &v66, a7);
        goto LABEL_48;
      }
      v34 = *(_QWORD *)(a3 + 56) + 24 * v33;
      v35 = *(_OWORD *)(v34 - 24);
      v36 = *(_QWORD *)(v34 - 8);
      *(_DWORD *)(a3 + 68) = v33 - 1;
      *(_DWORD *)(a5 + 16) = v36;
      *(_OWORD *)a5 = v35;
      v37 = *(_QWORD *)(a3 + 48);
      v66 = "WasmFunctionParser.h:";
      LODWORD(v67) = 21;
      LODWORD(v62[0]) = 830;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v66, (unsigned int *)v62, (int **)&v61);
      v45 = v61;
      if (!v61)
      {
        __break(0xC471u);
        JUMPOUT(0x198D621DCLL);
      }
      v46 = *(_DWORD *)(v37 + 240);
      if (!v46)
      {
        __break(0xC471u);
        JUMPOUT(0x198D621E4);
      }
      *(_DWORD *)(v37 + 240) = v46 - 1;
      v61 = 0;
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
      if (*(_BYTE *)a5 == 0xFF)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v55 = "pointer must be i32";
      v56 = 20;
      goto LABEL_50;
    }
  }
LABEL_53:
  v58 = "can't get simd memory op alignment";
  v59 = (unint64_t *)a3;
  v60 = 35;
LABEL_56:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v58, v59, v60, &v66, a7);
LABEL_48:
  v57 = (void (**)(WTF::StringPrintStream *__hidden))v66;
LABEL_51:
  *(_QWORD *)a1 = v57;
  a1[8] = 1;
}

uint64_t WTF::ThreadSpecific<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,(WTF::CanBeGCThread)0>::set(pthread_key_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  if (WTF::Thread::mayBeGCThread((WTF::Thread *)a1))
  {
    result = 195;
    __break(0xC471u);
  }
  else
  {
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v2[2] = a1;
    pthread_setspecific(*a1, v2);
    *v2 = 0;
    v2[1] = 0;
    return (uint64_t)v2;
  }
  return result;
}

uint64_t JSC::WasmI32Sub::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  _DWORD *v14;
  int v15;

  v8 = a4;
  v9 = a3;
  v12 = a1[4];
  v14 = a1;
  v15 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v14, a3, a4, a5, a6, a7, a8);
  a1[9] = 1;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 142);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 1);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v8);
}

uint64_t JSC::WasmI32Mul::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  _DWORD *v14;
  int v15;

  v8 = a4;
  v9 = a3;
  v12 = a1[4];
  v14 = a1;
  v15 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v14, a3, a4, a5, a6, a7, a8);
  a1[9] = 2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 142);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v8);
}

BOOL JSC::WasmI32Mul::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 2);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32DivS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI32DivS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32DivS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI32DivS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI32DivS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 3);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32DivS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 3;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 3;
  LOBYTE(v31) = 3;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 3;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI32DivS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 3;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 3;
  LOBYTE(v25) = 3;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 3;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32DivU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI32DivU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32DivU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI32DivU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI32DivU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 4);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32DivU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 4;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 4;
  LOBYTE(v31) = 4;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 4;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI32DivU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 4;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 4;
  LOBYTE(v25) = 4;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 4;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32RemS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI32RemS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32RemS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI32RemS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI32RemS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 5);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32RemS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 5;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 5;
  LOBYTE(v31) = 5;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 5;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI32RemS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 5;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 5;
  LOBYTE(v25) = 5;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 5;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32RemU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI32RemU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32RemU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI32RemU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI32RemU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 6;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 6);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32RemU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 6;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 6;
  LOBYTE(v31) = 6;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 6;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI32RemU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 6;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 6;
  LOBYTE(v25) = 6;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 6;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32And::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  _DWORD *v14;
  int v15;

  v8 = a4;
  v9 = a3;
  v12 = a1[4];
  v14 = a1;
  v15 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v14, a3, a4, a5, a6, a7, a8);
  a1[9] = 7;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 142);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 7);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v8);
}

uint64_t JSC::WasmI32Or::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  _DWORD *v14;
  int v15;

  v8 = a4;
  v9 = a3;
  v12 = a1[4];
  v14 = a1;
  v15 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v14, a3, a4, a5, a6, a7, a8);
  a1[9] = 8;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 142);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 8);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v8);
}

uint64_t JSC::WasmI32Xor::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  _DWORD *v14;
  int v15;

  v8 = a4;
  v9 = a3;
  v12 = a1[4];
  v14 = a1;
  v15 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v14, a3, a4, a5, a6, a7, a8);
  a1[9] = 9;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 142);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 9);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v8);
}

BOOL JSC::WasmI32Xor::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 9;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 9);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32Shl::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  _DWORD *v14;
  int v15;

  v8 = a4;
  v9 = a3;
  v12 = a1[4];
  v14 = a1;
  v15 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v14, a3, a4, a5, a6, a7, a8);
  a1[9] = 10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 142);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v8);
}

uint64_t JSC::WasmI32ShrU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 11;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 11;
  LOBYTE(v25) = 11;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 11;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

BOOL JSC::WasmI32ShrS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 12;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 12);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32ShrS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 12;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 12;
  LOBYTE(v25) = 12;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 12;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

BOOL JSC::WasmI32Eq::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 15;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 15);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32Eq::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 15;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 15;
  LOBYTE(v25) = 15;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 15;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

BOOL JSC::WasmI32Ne::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 16;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 16);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32Ne::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 16;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 16;
  LOBYTE(v25) = 16;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 16;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

BOOL JSC::WasmI32LtS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 17;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 17);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32LtS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 17;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 17;
  LOBYTE(v25) = 17;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 17;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32LeS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI32LeS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32LeS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI32LeS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI32LeS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 18;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 18);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32LeS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 18;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 18;
  LOBYTE(v31) = 18;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 18;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI32LeS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 18;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 18;
  LOBYTE(v25) = 18;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 18;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32LtU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 19;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 19;
  LOBYTE(v25) = 19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 19;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32LeU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI32LeU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32LeU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI32LeU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI32LeU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 20;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 20);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmI32LeU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 20;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 20);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32LeU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 20;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 20;
  LOBYTE(v25) = 20;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 20;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

BOOL JSC::WasmI32GtS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 21;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 21);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32GtS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 21;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 21;
  LOBYTE(v25) = 21;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 21;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32GeS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI32GeS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32GeS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI32GeS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI32GeS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 22;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 22);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32GeS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 22;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 22;
  LOBYTE(v31) = 22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 22;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI32GeS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 22;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 22;
  LOBYTE(v25) = 22;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 22;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

BOOL JSC::WasmI32GtU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 23;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 23);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32GtU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 23;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 23;
  LOBYTE(v25) = 23;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 23;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

BOOL JSC::WasmI32GeU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 24;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 24);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI32GeU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 24;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 24;
  LOBYTE(v25) = 24;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 24;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32Eqz::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v29 = a1;
  v30 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v29, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 28;
  LOBYTE(v29) = 28;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 28;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v29);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v14) = 28;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v18 = a2;
  LOBYTE(v29) = v18;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = v18;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v29);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v27;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v23 = v10;
  LOBYTE(v29) = v23;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v29);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v28;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI32Eqz::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 28;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 28;
  LOBYTE(v28) = 28;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 28;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmI32Eqz::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 28;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 28;
  LOBYTE(v24) = 28;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 28;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64Add::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64Add::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64Add::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI64Add::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI64Add::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 29;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 29);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmI64Add::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 29;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 29);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64Add::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 29;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 29;
  LOBYTE(v25) = 29;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 29;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64Sub::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64Sub::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64Sub::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI64Sub::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI64Sub::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 30;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 30);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmI64Sub::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 30;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 30);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64Sub::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 30;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 30;
  LOBYTE(v25) = 30;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 30;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64Mul::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64Mul::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64Mul::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI64Mul::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI64Mul::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 31;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 31);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64Mul::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 31;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 31;
  LOBYTE(v31) = 31;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 31;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI64Mul::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 31;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 31;
  LOBYTE(v25) = 31;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 31;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64DivU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64DivU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64DivU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI64DivU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI64DivU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 33;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 33);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64DivU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 33;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 33;
  LOBYTE(v31) = 33;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 33;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI64DivU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 33;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 33;
  LOBYTE(v25) = 33;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 33;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64RemU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64RemU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64RemU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI64RemU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI64RemU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 35;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 35);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64RemU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 35;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 35;
  LOBYTE(v31) = 35;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 35;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI64RemU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 35;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 35;
  LOBYTE(v25) = 35;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 35;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64And::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64And::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64And::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI64And::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI64And::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 36;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 36);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmI64And::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 36;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 36);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64And::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 36;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 36;
  LOBYTE(v25) = 36;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 36;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64Or::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 37;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 37;
  LOBYTE(v25) = 37;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 37;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64Xor::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64Xor::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64Xor::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI64Xor::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI64Xor::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 38;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 38);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64Xor::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 38;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 38;
  LOBYTE(v31) = 38;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 38;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI64Xor::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 38;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 38;
  LOBYTE(v25) = 38;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 38;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64Shl::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 39;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 39;
  LOBYTE(v25) = 39;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 39;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64ShrU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64ShrU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64ShrU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI64ShrU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI64ShrU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 40;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 40);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmI64ShrU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 40;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 40);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64ShrU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 40;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 40;
  LOBYTE(v25) = 40;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 40;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64ShrS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64ShrS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64ShrS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI64ShrS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI64ShrS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v16;
  char v17;
  char v18;
  char v19;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v16 = a1[4];
    v20 = a1;
    v21 = v16;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 41;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 41);
    v17 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v17 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v18 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
    v19 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v19 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v19);
  }
  return v14;
}

BOOL JSC::WasmI64ShrS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 41;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 41);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64ShrS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 41;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 41;
  LOBYTE(v25) = 41;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 41;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64Eq::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64Eq::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64Eq::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI64Eq::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI64Eq::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 44;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 44);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmI64Eq::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 44;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 44);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64Eq::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 44;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 44;
  LOBYTE(v25) = 44;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 44;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64Ne::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64Ne::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64Ne::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI64Ne::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI64Ne::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 45;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 45);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmI64Ne::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 45;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 45);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64Ne::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 45;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 45;
  LOBYTE(v25) = 45;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 45;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64LtS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64LtS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64LtS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI64LtS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI64LtS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 46;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 46);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmI64LtS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 46;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 46);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64LtS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 46;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 46;
  LOBYTE(v25) = 46;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 46;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64LeS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64LeS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64LeS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI64LeS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI64LeS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 47;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 47);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64LeS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 47;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 47;
  LOBYTE(v31) = 47;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 47;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI64LeS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 47;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 47;
  LOBYTE(v25) = 47;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 47;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64LtU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64LtU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64LtU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmI64LtU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmI64LtU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 48;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 48);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmI64LtU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 48;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 48);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64LtU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 48;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 48;
  LOBYTE(v25) = 48;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 48;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64LeU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64LeU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64LeU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI64LeU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI64LeU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 49;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 49);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64LeU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 49;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 49;
  LOBYTE(v31) = 49;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 49;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI64LeU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 49;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 49;
  LOBYTE(v25) = 49;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 49;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64GtS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64GtS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64GtS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI64GtS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI64GtS::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 50;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 50);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64GtS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 50;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 50;
  LOBYTE(v31) = 50;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 50;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI64GtS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 50;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 50;
  LOBYTE(v25) = 50;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 50;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64GtU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64GtU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64GtU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI64GtU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI64GtU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 52;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 52);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64GtU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 52;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 52;
  LOBYTE(v31) = 52;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 52;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI64GtU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 52;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 52;
  LOBYTE(v25) = 52;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 52;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64GeU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmI64GeU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64GeU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmI64GeU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmI64GeU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 53;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 53);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmI64GeU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 53;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 53;
  LOBYTE(v31) = 53;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 53;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmI64GeU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 53;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 53;
  LOBYTE(v25) = 53;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 53;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF32Mul::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmF32Mul::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF32Mul::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmF32Mul::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmF32Mul::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 60;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 60);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmF32Mul::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 60;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 60;
  LOBYTE(v31) = 60;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 60;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmF32Mul::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 60;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 60;
  LOBYTE(v25) = 60;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 60;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF32Eq::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmF32Eq::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF32Eq::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmF32Eq::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmF32Eq::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v16;
  char v17;
  char v18;
  char v19;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v16 = a1[4];
    v20 = a1;
    v21 = v16;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 72;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 72);
    v17 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v17 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v18 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
    v19 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v19 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v19);
  }
  return v14;
}

BOOL JSC::WasmF32Eq::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 72;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 72);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmF32Eq::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 72;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 72;
  LOBYTE(v25) = 72;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 72;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF32Ne::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmF32Ne::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF32Ne::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmF32Ne::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmF32Ne::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v16;
  char v17;
  char v18;
  char v19;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v16 = a1[4];
    v20 = a1;
    v21 = v16;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 73;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 73);
    v17 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v17 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v18 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
    v19 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v19 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v19);
  }
  return v14;
}

BOOL JSC::WasmF32Ne::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 73;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 73);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmF32Ne::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 73;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 73;
  LOBYTE(v25) = 73;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 73;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64Add::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmF64Add::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64Add::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmF64Add::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmF64Add::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 78;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 78);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmF64Add::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 78;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 78;
  LOBYTE(v31) = 78;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 78;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmF64Add::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 78;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 78;
  LOBYTE(v25) = 78;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 78;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64Sub::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmF64Sub::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64Sub::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmF64Sub::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmF64Sub::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 79;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 79);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmF64Sub::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 79;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 79;
  LOBYTE(v31) = 79;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 79;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmF64Sub::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 79;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 79;
  LOBYTE(v25) = 79;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 79;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64Mul::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 80;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 80;
  LOBYTE(v31) = 80;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 80;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmF64Mul::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 80;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 80;
  LOBYTE(v25) = 80;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 80;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64Div::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmF64Div::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64Div::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmF64Div::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmF64Div::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 81;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 81);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmF64Div::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 81;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 81;
  LOBYTE(v31) = 81;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 81;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmF64Div::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 81;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 81;
  LOBYTE(v25) = 81;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 81;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64Abs::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF64Abs::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64Abs::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF64Abs::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF64Abs::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 84;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 84);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64Abs::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 84;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 84;
  LOBYTE(v28) = 84;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 84;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmF64Abs::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 84;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 84;
  LOBYTE(v24) = 84;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 84;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64Neg::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF64Neg::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64Neg::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF64Neg::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF64Neg::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 85;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 85);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64Neg::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 85;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 85;
  LOBYTE(v28) = 85;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 85;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmF64Neg::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 85;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 85;
  LOBYTE(v24) = 85;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 85;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64Eq::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmF64Eq::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64Eq::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmF64Eq::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmF64Eq::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 92;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 92);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmF64Eq::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 92;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 92;
  LOBYTE(v31) = 92;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 92;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmF64Eq::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 92;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 92;
  LOBYTE(v25) = 92;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 92;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64Ne::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmF64Ne::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64Ne::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::WasmF64Ne::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::WasmF64Ne::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 93;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 93);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

BOOL JSC::WasmF64Ne::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 93;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 93);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmF64Ne::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 93;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 93;
  LOBYTE(v25) = 93;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 93;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64Ge::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::WasmF64Ge::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64Ge::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::WasmF64Ge::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::WasmF64Ge::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  _DWORD *v20;
  int v21;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    v15 = a1[4];
    v20 = a1;
    v21 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v20, v8, v9, v10, v11, v12, v13);
    a1[9] = 97;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 97);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v17 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    v18 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v18 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  }
  return v14;
}

uint64_t JSC::WasmF64Ge::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v15 = *(_DWORD *)(a1 + 16);
  v31 = a1;
  v32 = v15;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v31, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 97;
  LOBYTE(v31) = -115;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -115;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -115;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 97;
  LOBYTE(v31) = 97;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 97;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::WasmF64Ge::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 97;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 97;
  LOBYTE(v25) = 97;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 97;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32TruncSF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmI32TruncSF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32TruncSF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmI32TruncSF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmI32TruncSF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 99;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 99);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI32TruncSF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 99;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 99;
  LOBYTE(v28) = 99;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 99;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmI32TruncSF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 99;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 99;
  LOBYTE(v24) = 99;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 99;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32TruncUF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmI32TruncUF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32TruncUF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmI32TruncUF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmI32TruncUF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 101;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 101);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI32TruncUF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 101;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 101;
  LOBYTE(v28) = 101;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 101;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmI32TruncUF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 101;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 101;
  LOBYTE(v24) = 101;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 101;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32WrapI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmI32WrapI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32WrapI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmI32WrapI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmI32WrapI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 102;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 102);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI32WrapI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 102;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 102);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI32WrapI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 102;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 102;
  LOBYTE(v24) = 102;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 102;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64TruncSF32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmI64TruncSF32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64TruncSF32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmI64TruncSF32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmI64TruncSF32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  int v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a3;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (!v12)
    return 0;
  v14 = a1[4];
  v17 = a1;
  v18 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 103;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 103);
  v15 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v15 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  v16 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v16 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
  return 1;
}

uint64_t JSC::WasmI64TruncSF32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 103;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 103);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI64TruncSF32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 103;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 103;
  LOBYTE(v24) = 103;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 103;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64TruncSF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmI64TruncSF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64TruncSF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmI64TruncSF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmI64TruncSF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  int v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a3;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (!v12)
    return 0;
  v14 = a1[4];
  v17 = a1;
  v18 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 104;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 104);
  v15 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v15 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  v16 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v16 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
  return 1;
}

uint64_t JSC::WasmI64TruncSF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 104;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 104);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI64TruncSF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 104;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 104;
  LOBYTE(v24) = 104;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 104;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64ExtendSI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmI64ExtendSI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64ExtendSI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmI64ExtendSI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmI64ExtendSI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 107;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 107);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI64ExtendSI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 107;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 107);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI64ExtendSI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 107;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 107;
  LOBYTE(v24) = 107;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 107;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64ExtendUI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 108;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 108;
  LOBYTE(v24) = 108;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 108;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF32ConvertSI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF32ConvertSI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF32ConvertSI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF32ConvertSI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF32ConvertSI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  int v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a3;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (!v12)
    return 0;
  v14 = a1[4];
  v17 = a1;
  v18 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 109;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 109);
  v15 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v15 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  v16 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v16 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
  return 1;
}

uint64_t JSC::WasmF32ConvertSI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 109;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 109);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF32ConvertSI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 109;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 109;
  LOBYTE(v24) = 109;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 109;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF32ConvertUI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF32ConvertUI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF32ConvertUI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF32ConvertUI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF32ConvertUI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  int v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a3;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (!v12)
    return 0;
  v14 = a1[4];
  v17 = a1;
  v18 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 110;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 110);
  v15 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v15 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  v16 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v16 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
  return 1;
}

uint64_t JSC::WasmF32ConvertUI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 110;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 110);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF32ConvertUI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 110;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 110;
  LOBYTE(v24) = 110;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 110;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF32ConvertSI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF32ConvertSI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF32ConvertSI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF32ConvertSI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF32ConvertSI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  int v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a3;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (!v12)
    return 0;
  v14 = a1[4];
  v17 = a1;
  v18 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 111;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 111);
  v15 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v15 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  v16 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v16 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
  return 1;
}

uint64_t JSC::WasmF32ConvertSI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 111;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 111);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF32ConvertSI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 111;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 111;
  LOBYTE(v24) = 111;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 111;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF32ConvertUI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF32ConvertUI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF32ConvertUI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF32ConvertUI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF32ConvertUI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  int v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a3;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (!v12)
    return 0;
  v14 = a1[4];
  v17 = a1;
  v18 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 112;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 112);
  v15 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v15 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  v16 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v16 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
  return 1;
}

uint64_t JSC::WasmF32ConvertUI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 112;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 112);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF32ConvertUI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 112;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 112;
  LOBYTE(v24) = 112;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 112;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF32DemoteF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF32DemoteF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF32DemoteF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF32DemoteF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF32DemoteF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 113;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 113);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF32DemoteF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 113;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 113);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF32DemoteF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 113;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 113;
  LOBYTE(v24) = 113;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 113;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF32ReinterpretI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF32ReinterpretI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF32ReinterpretI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF32ReinterpretI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF32ReinterpretI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  int v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a3;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (!v12)
    return 0;
  v14 = a1[4];
  v17 = a1;
  v18 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 114;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 114);
  v15 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v15 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  v16 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v16 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
  return 1;
}

uint64_t JSC::WasmF32ReinterpretI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 114;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 114);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF32ReinterpretI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 114;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 114;
  LOBYTE(v24) = 114;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 114;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64ConvertSI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 115;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 115);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64ConvertSI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 115;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 115;
  LOBYTE(v24) = 115;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 115;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64ConvertUI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF64ConvertUI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64ConvertUI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF64ConvertUI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF64ConvertUI32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 116;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 116);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64ConvertUI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 116;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 116);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64ConvertUI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 116;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 116;
  LOBYTE(v24) = 116;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 116;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64ConvertSI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF64ConvertSI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64ConvertSI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF64ConvertSI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF64ConvertSI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  int v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a3;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (!v12)
    return 0;
  v14 = a1[4];
  v17 = a1;
  v18 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 117;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 117);
  v15 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v15 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  v16 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v16 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
  return 1;
}

uint64_t JSC::WasmF64ConvertSI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 117;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 117);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64ConvertSI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 117;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 117;
  LOBYTE(v24) = 117;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 117;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64ConvertUI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF64ConvertUI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64ConvertUI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF64ConvertUI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF64ConvertUI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  int v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a3;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (!v12)
    return 0;
  v14 = a1[4];
  v17 = a1;
  v18 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 118;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 118);
  v15 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v15 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  v16 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v16 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
  return 1;
}

uint64_t JSC::WasmF64ConvertUI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 118;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 118);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64ConvertUI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 118;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 118;
  LOBYTE(v24) = 118;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 118;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64PromoteF32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF64PromoteF32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64PromoteF32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF64PromoteF32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF64PromoteF32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 119;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 119);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64PromoteF32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 119;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 119);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64PromoteF32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 119;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 119;
  LOBYTE(v24) = 119;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 119;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmF64ReinterpretI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmF64ReinterpretI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmF64ReinterpretI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmF64ReinterpretI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmF64ReinterpretI64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 120;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 120);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmF64ReinterpretI64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 120;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 120;
  LOBYTE(v28) = 120;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 120;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmF64ReinterpretI64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 120;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 120;
  LOBYTE(v24) = 120;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 120;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32ReinterpretF32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmI32ReinterpretF32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32ReinterpretF32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmI32ReinterpretF32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmI32ReinterpretF32::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 121;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 121);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI32ReinterpretF32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 121;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 121;
  LOBYTE(v28) = 121;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 121;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmI32ReinterpretF32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 121;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 121;
  LOBYTE(v24) = 121;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 121;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64ReinterpretF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmI64ReinterpretF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI64ReinterpretF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmI64ReinterpretF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::WasmI64ReinterpretF64::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  char v14;
  char v15;
  _DWORD *v17;
  int v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = a1[4];
  v17 = a1;
  v18 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v17, a3, a4, a5, a6, a7, a8);
  a1[9] = 122;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 122);
  v14 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
  v15 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v15);
  return 1;
}

uint64_t JSC::WasmI64ReinterpretF64::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 122;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 122;
  LOBYTE(v28) = 122;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 122;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmI64ReinterpretF64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 122;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 122;
  LOBYTE(v24) = 122;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 122;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32Add::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  _DWORD *v14;
  int v15;

  v8 = a4;
  v9 = a3;
  v12 = a1[4];
  v14 = a1;
  v15 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v14, a3, a4, a5, a6, a7, a8);
  a1[9] = 236;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 142);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 236);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Wasm::LLIntGenerator::callInformationForCaller(JSC::Wasm::FunctionSignature const&)::$_0,void,WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;

  *(_QWORD *)result = off_1E35B5AD0;
  v8 = *(_QWORD *)(result + 16);
  if (result + 32 != v8 && v8 != 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    v10 = result;
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    return v10;
  }
  return result;
}

void WTF::Detail::CallableWrapper<JSC::Wasm::LLIntGenerator::callInformationForCaller(JSC::Wasm::FunctionSignature const&)::$_0,void,WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;

  *(_QWORD *)a1 = off_1E35B5AD0;
  v8 = *(_QWORD *)(a1 + 16);
  if (a1 + 32 != v8 && v8 != 0)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    v10 = a1;
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    a1 = v10;
  }
  WTF::fastFree(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Wasm::LLIntGenerator::callInformationForCaller(JSC::Wasm::FunctionSignature const&)::$_0,void,WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  v8 = *(unsigned int *)(result + 28);
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD *)(result + 8);
    v11 = *(unsigned int **)(result + 16);
    v12 = 4 * v8;
    while (1)
    {
      v13 = *(_DWORD *)(v10 + 240);
      if (v13 == -1)
        break;
      v14 = *v11;
      v15 = *(_DWORD *)(v10 + 244);
      if (v15 <= v13)
        v15 = v13 + 1;
      *(_DWORD *)(v10 + 240) = v13 + 1;
      *(_DWORD *)(v10 + 244) = v15;
      v16 = ~v13;
      v20 = ~v13;
      result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v10, ~v13, v14, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v10, v16, v14, a4, a5, a6, a7, a8);
        if ((result & 1) == 0)
          result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v10, v16, v14, a4, a5, a6, a7, a8);
      }
      v17 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v17 == *(_DWORD *)(a2 + 8))
      {
        result = WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v17 + 1), (unint64_t)&v20, a4, a5, a6, a7, a8);
        v17 = *(unsigned int *)(a2 + 12);
        v18 = *(_QWORD *)a2;
        v19 = *(_DWORD *)result;
      }
      else
      {
        v18 = *(_QWORD *)a2;
        v19 = v20;
      }
      *(_DWORD *)(v18 + 4 * v17) = v19;
      ++*(_DWORD *)(a2 + 12);
      ++v11;
      v12 -= 4;
      if (!v12)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int *v25;
  int v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 4 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v16 = *(_QWORD *)a1;
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
      if (v15 < 9)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_34;
      }
      if (!(v15 >> 30))
      {
        v16 = WTF::fastMalloc((WTF *)(4 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v27 = 0;
        do
        {
          *(_DWORD *)(v16 + v27) = *(_DWORD *)(v10 + v27);
          v27 += 4;
        }
        while (4 * v11 != v27);
        if (a1 + 16 != v10 && v10)
        {
          if (v16 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v16 = *(_QWORD *)a1;
        }
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198D73604);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 9)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 30)
        goto LABEL_43;
      v22 = WTF::fastMalloc((WTF *)(4 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 4 * v21;
    v24 = (_DWORD *)v22;
    v25 = (int *)v10;
    do
    {
      v26 = *v25++;
      *v24++ = v26;
      v23 -= 4;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (v22 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

_DWORD *WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

void WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::VirtualRegister>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::VirtualRegister,WTF::IntHash<long long>,JSC::Wasm::LLIntGenerator::ConstantMapHashTraits,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::Wasm::LLIntGenerator::ConstantMapHashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t i;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_DWORD *)(v7 + 24);
    do
    {
      *((_QWORD *)v16 - 1) = 0;
      *v16 = 0x3FFFFFFF;
      v16 += 4;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (_QWORD *)(v4 + 16 * i);
      if ((*v18 | 2) != 2)
      {
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 8);
        else
          v20 = 0;
        v21 = (*v18 + ~(*v18 << 32)) ^ ((*v18 + ~(*v18 << 32)) >> 22);
        v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((unint64_t)(v21 + ~(v21 << 13)) >> 8));
        v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
        v24 = v20 & ((v23 >> 31) ^ v23);
        v25 = 1;
        do
        {
          v26 = v24;
          v27 = *(_QWORD *)(v19 + 16 * v24);
          v24 = (v24 + v25++) & v20;
        }
        while (v27);
        *(_OWORD *)(v19 + 16 * v26) = *(_OWORD *)v18;
      }
    }
    goto LABEL_15;
  }
  if (v4)
LABEL_15:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

BOOL JSC::WasmGetGlobal::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  _BOOL8 v10;
  unsigned __int16 v11;
  int v13;
  unsigned __int16 v14;
  _DWORD *v16;
  int v17;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  v10 = a3 < 0x10000 && v9;
  if (v10)
  {
    v11 = a3;
    v13 = a1[4];
    v16 = a1;
    v17 = v13;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v16, a3, a4, a5, a6, a7, a8);
    a1[9] = 158;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 158);
    v14 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v14 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v11);
  }
  return v10;
}

uint64_t JSC::WasmSetGlobal::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned __int16 v10;
  int v12;
  unsigned __int16 v13;
  _DWORD *v15;
  int v16;

  if (HIWORD(a2))
    return 0;
  v8 = a3;
  v9 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v9 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a2;
  v12 = a1[4];
  v15 = a1;
  v16 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v15, a3, a4, a5, a6, a7, a8);
  a1[9] = 159;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 159);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v10);
  v13 = v8 + 64;
  if (v8 <= 0x3FFFFFFF)
    v13 = v8;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v13);
  return 1;
}

uint64_t WTF::Vector<WTF::SegmentedVector<JSC::GenericLabel<JSC::Wasm::GeneratorTraits>,32ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Wasm::LLIntTierUpCounter::OSREntryData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Wasm::LLIntTierUpCounter::OSREntryData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Wasm::LLIntTierUpCounter::OSREntryData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::LLIntTierUpCounter::OSREntryData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Wasm::LLIntTierUpCounter::OSREntryData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Wasm::LLIntTierUpCounter::OSREntryData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Wasm::LLIntTierUpCounter::OSREntryData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::LLIntTierUpCounter::OSREntryData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Wasm::LLIntTierUpCounter::OSREntryData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Wasm::LLIntTierUpCounter::OSREntryData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Wasm::LLIntTierUpCounter::OSREntryData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::LLIntTierUpCounter::OSREntryData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v18 = (_QWORD *)(v10 + 24);
    do
    {
      *((_DWORD *)v18 - 2) = 0;
      v18[1] = 0;
      v18[2] = 0;
      *v18 = 0;
      v18 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (int *)(v6 + 32 * v19);
      v22 = *v21;
      if (*v21)
      {
        if (v22 != -1)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = 0;
          v26 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
          v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
          do
          {
            v28 = v27 & v24;
            v27 = ++v25 + v28;
          }
          while (*(_DWORD *)(v23 + 32 * v28));
          v29 = v23 + 32 * v28;
          v31 = (_QWORD *)(v29 + 16);
          v30 = *(_QWORD *)(v29 + 16);
          if (v30)
          {
            *v31 = 0;
            *(_DWORD *)(v29 + 24) = 0;
            WTF::fastFree(v30, v11, v12, v13, v14, v15, v16, v17);
            v22 = *v21;
          }
          *(_DWORD *)v29 = v22;
          v32 = v6 + 32 * v19;
          *(_DWORD *)(v29 + 8) = *(_DWORD *)(v32 + 8);
          *v31 = 0;
          *(_QWORD *)(v29 + 24) = 0;
          v34 = *(_DWORD *)(v32 + 24);
          v33 = (_DWORD *)(v32 + 24);
          v35 = *((_QWORD *)v33 - 1);
          *((_QWORD *)v33 - 1) = 0;
          *v31 = v35;
          *v33 = 0;
          *(_DWORD *)(v29 + 24) = v34;
          v36 = v33[1];
          v33[1] = 0;
          *(_DWORD *)(v29 + 28) = v36;
          v37 = *((_QWORD *)v33 - 1);
          if (v37)
          {
            *((_QWORD *)v33 - 1) = 0;
            *v33 = 0;
            WTF::fastFree(v37, v11, v12, v13, v14, v15, v16, v17);
          }
          if (v21 == a3)
            v20 = v29;
        }
      }
      else
      {
        v40 = *((_QWORD *)v21 + 2);
        v39 = v21 + 4;
        v38 = v40;
        if (v40)
        {
          *v39 = 0;
          *(_DWORD *)(v6 + 32 * v19 + 24) = 0;
          WTF::fastFree(v38, v11, v12, v13, v14, v15, v16, v17);
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v11, v12, v13, v14, v15, v16, v17);
  return v20;
}

uint64_t JSC::WasmJfalse::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  char *v29;
  uint64_t v30;
  int v31;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v12 = *a3;
  if (v12 != 1)
  {
    if (*a3)
    {
      if (v12 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198D73EF8);
      }
      v28 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      v28 = *((_DWORD *)a3 + 4);
    }
    *((_DWORD *)a3 + 1) = v28;
    if (v28 == (char)v28)
      goto LABEL_6;
    return 0;
  }
  *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
LABEL_6:
  v13 = *(_DWORD *)(a1 + 16);
  v30 = a1;
  v31 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v30, (uint64_t)a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 148;
  LOBYTE(v30) = -108;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -108;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v30);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v14) = -108;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v18 = a2;
  LOBYTE(v30) = v18;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = v18;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v30);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v29;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a3 == 1)
  {
    v21 = *((_QWORD *)a3 + 2);
    v22 = a3 + 4;
    v23 = *(unsigned int *)(v21 + 28);
    if ((_DWORD)v23 == *(_DWORD *)(v21 + 24))
    {
      WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(v21 + 16, (unint64_t)v22);
      LOBYTE(v24) = 0;
    }
    else
    {
      LOBYTE(v24) = 0;
      *(_DWORD *)(*(_QWORD *)(v21 + 16) + 4 * v23) = *v22;
      ++*(_DWORD *)(v21 + 28);
    }
  }
  else
  {
    v24 = *((_DWORD *)a3 + 1);
  }
  LOBYTE(v30) = v24;
  v25 = *(unsigned int *)(a1 + 12);
  v26 = *(unsigned int *)(a1 + 16);
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v24;
  }
  else
  {
    if ((_DWORD)v25 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v30);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::saveTarget(uint64_t result)
{
  int v1;
  int v2;

  v1 = *(unsigned __int8 *)result;
  if (v1 == 1)
  {
    v2 = *(_DWORD *)(*(_QWORD *)(result + 8) + 16);
LABEL_3:
    *(_DWORD *)(result + 4) = v2;
    return result;
  }
  if (!*(_BYTE *)result)
  {
    v2 = *(_DWORD *)(result + 16);
    goto LABEL_3;
  }
  if (v1 == 2)
  {
    v2 = *(_DWORD *)(result + 16) - *(_DWORD *)(*(_QWORD *)(result + 8) + 16);
    goto LABEL_3;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

uint64_t JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::commitTarget(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;

  if (*(_BYTE *)a1 != 1)
    return *(unsigned int *)(a1 + 4);
  v1 = *(_QWORD *)(a1 + 16);
  v2 = (_DWORD *)(a1 + 4);
  v3 = *(unsigned int *)(v1 + 28);
  if ((_DWORD)v3 == *(_DWORD *)(v1 + 24))
  {
    WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(v1 + 16, (unint64_t)v2);
    return 0;
  }
  else
  {
    result = 0;
    *(_DWORD *)(*(_QWORD *)(v1 + 16) + 4 * v3) = *v2;
    ++*(_DWORD *)(v1 + 28);
  }
  return result;
}

_DWORD *WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t JSC::WasmJfalse::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v12 = *a3;
  if (v12 != 1)
  {
    if (*a3)
    {
      if (v12 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198D74278);
      }
      v29 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      v29 = *((_DWORD *)a3 + 4);
    }
    *((_DWORD *)a3 + 1) = v29;
    if (v29 == (__int16)v29)
      goto LABEL_6;
    return 0;
  }
  *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
LABEL_6:
  v13 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, (uint64_t)a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 148;
  LOBYTE(v32) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v32);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v30;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -108;
  LOBYTE(v32) = -108;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -108;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v31;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  if (*a3 == 1)
  {
    v24 = *((_QWORD *)a3 + 2);
    v25 = a3 + 4;
    v26 = *(unsigned int *)(v24 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v24 + 24))
    {
      WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(v24 + 16, (unint64_t)v25);
      LOWORD(v27) = 0;
    }
    else
    {
      LOWORD(v27) = 0;
      *(_DWORD *)(*(_QWORD *)(v24 + 16) + 4 * v26) = *v25;
      ++*(_DWORD *)(v24 + 28);
    }
  }
  else
  {
    v27 = *((_DWORD *)a3 + 1);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v27);
  return 1;
}

uint64_t JSC::WasmJfalse::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::saveTarget(a3);
  v6 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v6;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, v7, v8, v9, v10, v11, v12);
  *(_DWORD *)(a1 + 36) = 148;
  LOBYTE(v26) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v26);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v24;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -108;
  LOBYTE(v26) = -108;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -108;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v25;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  v22 = JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::commitTarget(a3);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v22);
}

uint64_t JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  int v23;

  v10 = *a2;
  if (v10 == 1)
  {
    *((_DWORD *)a2 + 1) = *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
  }
  else
  {
    if (*a2)
    {
      if (v10 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198D745C4);
      }
      v21 = *((_DWORD *)a2 + 4) - *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
    }
    else
    {
      v21 = *((_DWORD *)a2 + 4);
    }
    *((_DWORD *)a2 + 1) = v21;
    if (v21 != (char)v21)
      return 0;
  }
  v11 = *(_DWORD *)(a1 + 16);
  v22 = a1;
  v23 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v22, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 149;
  LOBYTE(v22) = -107;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -107;
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v22);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v12) = -107;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a2 == 1)
  {
    v14 = *((_QWORD *)a2 + 2);
    v15 = a2 + 4;
    v16 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v16 == *(_DWORD *)(v14 + 24))
    {
      WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(v14 + 16, (unint64_t)v15);
      LOBYTE(v17) = 0;
    }
    else
    {
      LOBYTE(v17) = 0;
      *(_DWORD *)(*(_QWORD *)(v14 + 16) + 4 * v16) = *v15;
      ++*(_DWORD *)(v14 + 28);
    }
  }
  else
  {
    v17 = *((_DWORD *)a2 + 1);
  }
  LOBYTE(v22) = v17;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = v17;
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v22);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;

  v10 = *a2;
  if (v10 == 1)
  {
    *((_DWORD *)a2 + 1) = *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
  }
  else
  {
    if (*a2)
    {
      if (v10 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198D747BCLL);
      }
      v26 = *((_DWORD *)a2 + 4) - *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
    }
    else
    {
      v26 = *((_DWORD *)a2 + 4);
    }
    *((_DWORD *)a2 + 1) = v26;
    if (v26 != (__int16)v26)
      return 0;
  }
  v11 = *(_DWORD *)(a1 + 16);
  v29 = a1;
  v30 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v29, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 149;
  LOBYTE(v29) = -115;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -115;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v29);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v27;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -115;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -107;
  LOBYTE(v29) = -107;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -107;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v29);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v28;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a2 == 1)
  {
    v21 = *((_QWORD *)a2 + 2);
    v22 = a2 + 4;
    v23 = *(unsigned int *)(v21 + 28);
    if ((_DWORD)v23 == *(_DWORD *)(v21 + 24))
    {
      WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(v21 + 16, (unint64_t)v22);
      LOWORD(v24) = 0;
    }
    else
    {
      LOWORD(v24) = 0;
      *(_DWORD *)(*(_QWORD *)(v21 + 16) + 4 * v23) = *v22;
      ++*(_DWORD *)(v21 + 28);
    }
  }
  else
  {
    v24 = *((_DWORD *)a2 + 1);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v24);
  return 1;
}

uint64_t JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v13;
  int v14;

  JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::saveTarget(a2);
  v4 = a1[4];
  v13 = a1;
  v14 = v4;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v13, v5, v6, v7, v8, v9, v10);
  a1[9] = 149;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 142);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 149);
  v11 = JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::commitTarget(a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write((uint64_t)a1, v11);
}

uint64_t JSC::WasmRefIsNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v29 = a1;
  v30 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v29, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 155;
  LOBYTE(v29) = -101;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -101;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v29);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v14) = -101;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v18 = a2;
  LOBYTE(v29) = v18;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = v18;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v29);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v27;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v23 = v10;
  LOBYTE(v29) = v23;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v29);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v28;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmRefIsNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v13 = *(_DWORD *)(a1 + 16);
  v28 = a1;
  v29 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v28, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 155;
  LOBYTE(v28) = -115;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -115;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v28);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v26;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -115;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -101;
  LOBYTE(v28) = -101;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -101;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v23 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  v24 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return 1;
}

uint64_t JSC::WasmRefIsNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 16);
  v24 = a1;
  v25 = v11;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v24, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 155;
  LOBYTE(v24) = -114;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -114;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -114;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -101;
  LOBYTE(v24) = -101;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -101;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

BOOL JSC::WasmSwitch::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  _BOOL8 v10;
  unsigned __int16 v11;
  int v13;
  unsigned __int16 v14;
  _DWORD *v16;
  int v17;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  v10 = a3 < 0x10000 && v9;
  if (v10)
  {
    v11 = a3;
    v13 = a1[4];
    v16 = a1;
    v17 = v13;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v16, a3, a4, a5, a6, a7, a8);
    a1[9] = 151;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 151);
    v14 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v14 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v11);
  }
  return v10;
}

__n128 WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 *v10;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 24 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v14 = (unint64_t)a2;
      if (v14 <= v12)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      if (v14 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_29;
      }
      if (v14 < 0xAAAAAAB)
      {
        v15 = 24 * v14;
        v16 = WTF::fastMalloc((WTF *)(24 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v16;
LABEL_29:
        v23 = 0;
        do
        {
          v24 = v16 + v23;
          v25 = *(_OWORD *)(v10 + v23);
          *(_QWORD *)(v24 + 16) = *(_QWORD *)(v10 + v23 + 16);
          *(_OWORD *)v24 = v25;
          v23 += 24;
        }
        while (24 * v11 != v23);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x198D75114);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v19 = (unint64_t)a2;
  if (v19 > v17)
  {
    v20 = *(unsigned int *)(a1 + 12);
    if (v19 < 0x11)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v19 >= 0xAAAAAAB)
        goto LABEL_41;
      v21 = 24 * v19;
      v22 = WTF::fastMalloc((WTF *)(24 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v22;
    }
    if ((_DWORD)v20)
    {
      v27 = 24 * v20;
      v28 = v10;
      do
      {
        v29 = *(_OWORD *)v28;
        *(_QWORD *)(v22 + 16) = *(_QWORD *)(v28 + 16);
        *(_OWORD *)v22 = v29;
        v22 += 24;
        v28 += 24;
        v27 -= 24;
      }
      while (v27);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t JSC::WasmCall::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 169;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -87;
  LOBYTE(v25) = -87;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -87;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

BOOL JSC::WasmCallIndirect::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  _BOOL8 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v16;
  unsigned __int16 v17;
  _DWORD *v19;
  int v20;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  v10 = (a4 | a3 | a5 | a6) < 0x10000 && v9;
  if (v10)
  {
    v11 = a6;
    v12 = a5;
    v13 = a4;
    v14 = a3;
    v16 = a1[4];
    v19 = a1;
    v20 = v16;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v19, a3, a4, a5, a6, a7, a8);
    a1[9] = 171;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 171);
    v17 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v17 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v14);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v12);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v11);
  }
  return v10;
}

uint64_t JSC::WasmCallIndirect::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v14 = *(_DWORD *)(a1 + 16);
  v27 = a1;
  v28 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v27, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 171;
  LOBYTE(v27) = -114;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -114;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v27);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v25;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -114;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = -85;
  LOBYTE(v27) = -85;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -85;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v27);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v26;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v11);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmSelect::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  _DWORD *v23;
  int v24;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 128) < 0x90;
  if (!v13)
    return 0;
  v14 = a5;
  v15 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v15 = (a5 + 128) < 0x90;
  if (!v15)
    return 0;
  v17 = a1[4];
  v23 = a1;
  v24 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v23, a3, a4, a5, a6, a7, a8);
  a1[9] = 176;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 176);
  v18 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v18 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v18);
  v19 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v19 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v19);
  v20 = v12 + 16;
  if (v12 <= 0x3FFFFFFF)
    v20 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v20);
  v21 = v14 + 16;
  if (v14 <= 0x3FFFFFFF)
    v21 = v14;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v21);
  return 1;
}

uint64_t JSC::WasmSelect::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v14 = a5;
  v15 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v15 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v15)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v34 = a1;
  v35 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v34, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 176;
  LOBYTE(v34) = -115;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v34);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v32;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -115;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = -80;
  LOBYTE(v34) = -80;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -80;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v34);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v33;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v28 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  v29 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v29 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  v30 = v14 + 64;
  if (v14 <= 0x3FFFFFFF)
    v30 = v14;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
  return 1;
}

uint64_t JSC::WasmSelect::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 176;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -80;
  LOBYTE(v26) = -80;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -80;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32Load8S::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 181;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -75;
  LOBYTE(v25) = -75;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -75;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmLoad8U::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 177;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -79;
  LOBYTE(v25) = -79;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -79;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI32Load16S::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  result = JSC::WasmI32Load16S::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmI32Load16S::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v11, a4, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmI32Load16S::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v11, a4, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::WasmI32Load16S::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  char v16;
  char v17;
  _DWORD *v18;
  int v19;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    v15 = a1[4];
    v18 = a1;
    v19 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v18, a3, a4, a5, a6, a7, a8);
    a1[9] = 183;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 183);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v17 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::WasmI32Load16S::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  _DWORD *v18;
  int v19;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    v15 = a1[4];
    v18 = a1;
    v19 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v18, a3, a4, a5, a6, a7, a8);
    a1[9] = 183;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 183);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v17 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::WasmI32Load16S::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 183;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -73;
  LOBYTE(v25) = -73;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -73;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmLoad16U::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  result = JSC::WasmLoad16U::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmLoad16U::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v11, a4, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmLoad16U::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v11, a4, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::WasmLoad16U::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  char v16;
  char v17;
  _DWORD *v18;
  int v19;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    v15 = a1[4];
    v18 = a1;
    v19 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v18, a3, a4, a5, a6, a7, a8);
    a1[9] = 178;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 178);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v17 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::WasmLoad16U::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  _DWORD *v18;
  int v19;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    v15 = a1[4];
    v18 = a1;
    v19 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v18, a3, a4, a5, a6, a7, a8);
    a1[9] = 178;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 178);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v17 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::WasmLoad16U::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 178;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -78;
  LOBYTE(v25) = -78;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -78;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmLoad32U::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 179;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -77;
  LOBYTE(v25) = -77;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -77;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmLoad64U::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  _DWORD *v18;
  int v19;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    v15 = a1[4];
    v18 = a1;
    v19 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v18, a3, a4, a5, a6, a7, a8);
    a1[9] = 180;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 180);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v17 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::WasmLoad64U::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 180;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -76;
  LOBYTE(v25) = -76;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -76;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmStore8::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 186;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -70;
  LOBYTE(v25) = -70;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -70;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmStore16::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  result = JSC::WasmStore16::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmStore16::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v11, a4, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmStore16::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, a2, v11, a4, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::WasmStore16::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  uint64_t result;
  char v11;
  int v12;
  _BOOL4 v14;
  int v15;
  char v16;
  char v17;
  _DWORD *v18;
  int v19;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v11 = a4;
  v12 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    v15 = a1[4];
    v18 = a1;
    v19 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v18, a3, a4, a5, a6, a7, a8);
    a1[9] = 187;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 187);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = v12 + 16;
    if (v12 <= 0x3FFFFFFF)
      v17 = v12;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v11);
    return 1;
  }
  return result;
}

uint64_t JSC::WasmStore16::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  _DWORD *v18;
  int v19;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    v15 = a1[4];
    v18 = a1;
    v19 = v15;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(a1 + 10, &v18, a3, a4, a5, a6, a7, a8);
    a1[9] = 187;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 141);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, 187);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v16);
    v17 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v17 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::WasmStore16::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 187;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -69;
  LOBYTE(v25) = -69;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -69;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmStore32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 188;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -68;
  LOBYTE(v25) = -68;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -68;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmStore64::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 189;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -67;
  LOBYTE(v25) = -67;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -67;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64AtomicRmw8AddU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  else
    v14 = (a3 - 1073741808) < 0x80;
  if (a4 > 0xFF || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 128) < 0x90;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v40 = a1;
  v41 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v40, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 191;
  LOBYTE(v40) = -65;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -65;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = -65;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  LOBYTE(v40) = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v40);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v37;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v27 = v11;
  LOBYTE(v40) = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
    v30 = *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v40);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v38;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    v30 = *(_DWORD *)(a1 + 12) + 1;
    v31 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 16) = v31;
  }
  LOBYTE(v40) = v10;
  if (v30 > v31)
  {
    *(_DWORD *)(a1 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v30 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  v34 = v15 + 16;
  if (v15 <= 0x3FFFFFFF)
    v34 = v15;
  LOBYTE(v40) = v34;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
  }
  else
  {
    v35 = v32;
    if (v32 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v40);
      v35 = *(unsigned int *)(a1 + 12);
      v36 = *(_QWORD *)a1;
      v34 = *v39;
    }
    else
    {
      v36 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v36 + v35) = v34;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw8AddU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  else
    v14 = (a3 - 1073741760) < 0x8000;
  if (WORD1(a4) || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 191;
  LOBYTE(v32) = -115;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v30;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -115;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = -65;
  LOBYTE(v32) = -65;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -65;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v32);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v28 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  v29 = v15 + 64;
  if (v15 <= 0x3FFFFFFF)
    v29 = v15;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw8AddU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 191;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -65;
  LOBYTE(v26) = -65;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -65;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64AtomicRmw16AddU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  else
    v14 = (a3 - 1073741808) < 0x80;
  if (a4 > 0xFF || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 128) < 0x90;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v40 = a1;
  v41 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v40, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 192;
  LOBYTE(v40) = -64;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -64;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = -64;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  LOBYTE(v40) = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v40);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v37;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v27 = v11;
  LOBYTE(v40) = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
    v30 = *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v40);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v38;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    v30 = *(_DWORD *)(a1 + 12) + 1;
    v31 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 16) = v31;
  }
  LOBYTE(v40) = v10;
  if (v30 > v31)
  {
    *(_DWORD *)(a1 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v30 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  v34 = v15 + 16;
  if (v15 <= 0x3FFFFFFF)
    v34 = v15;
  LOBYTE(v40) = v34;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
  }
  else
  {
    v35 = v32;
    if (v32 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v40);
      v35 = *(unsigned int *)(a1 + 12);
      v36 = *(_QWORD *)a1;
      v34 = *v39;
    }
    else
    {
      v36 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v36 + v35) = v34;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw16AddU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  else
    v14 = (a3 - 1073741760) < 0x8000;
  if (WORD1(a4) || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 192;
  LOBYTE(v32) = -115;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v30;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -115;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = -64;
  LOBYTE(v32) = -64;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -64;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v32);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v28 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  v29 = v15 + 64;
  if (v15 <= 0x3FFFFFFF)
    v29 = v15;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw16AddU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 192;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -64;
  LOBYTE(v26) = -64;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -64;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64AtomicRmw32AddU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  else
    v14 = (a3 - 1073741808) < 0x80;
  if (a4 > 0xFF || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 128) < 0x90;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v40 = a1;
  v41 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v40, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 193;
  LOBYTE(v40) = -63;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -63;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = -63;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  LOBYTE(v40) = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v40);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v37;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v27 = v11;
  LOBYTE(v40) = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
    v30 = *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v40);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v38;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    v30 = *(_DWORD *)(a1 + 12) + 1;
    v31 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 16) = v31;
  }
  LOBYTE(v40) = v10;
  if (v30 > v31)
  {
    *(_DWORD *)(a1 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v30 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  v34 = v15 + 16;
  if (v15 <= 0x3FFFFFFF)
    v34 = v15;
  LOBYTE(v40) = v34;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
  }
  else
  {
    v35 = v32;
    if (v32 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v40);
      v35 = *(unsigned int *)(a1 + 12);
      v36 = *(_QWORD *)a1;
      v34 = *v39;
    }
    else
    {
      v36 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v36 + v35) = v34;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw32AddU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  else
    v14 = (a3 - 1073741760) < 0x8000;
  if (WORD1(a4) || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 193;
  LOBYTE(v32) = -115;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v30;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -115;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = -63;
  LOBYTE(v32) = -63;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -63;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v32);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v28 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  v29 = v15 + 64;
  if (v15 <= 0x3FFFFFFF)
    v29 = v15;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw32AddU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 193;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -63;
  LOBYTE(v26) = -63;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -63;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64AtomicRmwAdd::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  else
    v14 = (a3 - 1073741808) < 0x80;
  if (a4 > 0xFF || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 128) < 0x90;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v40 = a1;
  v41 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v40, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 190;
  LOBYTE(v40) = -66;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -66;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = -66;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  LOBYTE(v40) = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v40);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v37;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v27 = v11;
  LOBYTE(v40) = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
    v30 = *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v40);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v38;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    v30 = *(_DWORD *)(a1 + 12) + 1;
    v31 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 16) = v31;
  }
  LOBYTE(v40) = v10;
  if (v30 > v31)
  {
    *(_DWORD *)(a1 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v30 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  v34 = v15 + 16;
  if (v15 <= 0x3FFFFFFF)
    v34 = v15;
  LOBYTE(v40) = v34;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
  }
  else
  {
    v35 = v32;
    if (v32 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v40);
      v35 = *(unsigned int *)(a1 + 12);
      v36 = *(_QWORD *)a1;
      v34 = *v39;
    }
    else
    {
      v36 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v36 + v35) = v34;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI64AtomicRmwAdd::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  else
    v14 = (a3 - 1073741760) < 0x8000;
  if (WORD1(a4) || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 190;
  LOBYTE(v32) = -115;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v30;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -115;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = -66;
  LOBYTE(v32) = -66;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -66;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v32);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v28 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  v29 = v15 + 64;
  if (v15 <= 0x3FFFFFFF)
    v29 = v15;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  return 1;
}

uint64_t JSC::WasmI64AtomicRmwAdd::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 190;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -66;
  LOBYTE(v26) = -66;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -66;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64AtomicRmw8XchgU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  else
    v14 = (a3 - 1073741808) < 0x80;
  if (a4 > 0xFF || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 128) < 0x90;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v40 = a1;
  v41 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v40, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 211;
  LOBYTE(v40) = -45;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -45;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = -45;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  LOBYTE(v40) = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v40);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v37;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v27 = v11;
  LOBYTE(v40) = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
    v30 = *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v40);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v38;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    v30 = *(_DWORD *)(a1 + 12) + 1;
    v31 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 16) = v31;
  }
  LOBYTE(v40) = v10;
  if (v30 > v31)
  {
    *(_DWORD *)(a1 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v30 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  v34 = v15 + 16;
  if (v15 <= 0x3FFFFFFF)
    v34 = v15;
  LOBYTE(v40) = v34;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
  }
  else
  {
    v35 = v32;
    if (v32 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v40);
      v35 = *(unsigned int *)(a1 + 12);
      v36 = *(_QWORD *)a1;
      v34 = *v39;
    }
    else
    {
      v36 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v36 + v35) = v34;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw8XchgU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  else
    v14 = (a3 - 1073741760) < 0x8000;
  if (WORD1(a4) || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 211;
  LOBYTE(v32) = -115;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v30;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -115;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = -45;
  LOBYTE(v32) = -45;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -45;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v32);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v28 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  v29 = v15 + 64;
  if (v15 <= 0x3FFFFFFF)
    v29 = v15;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw8XchgU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 211;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -45;
  LOBYTE(v26) = -45;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -45;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64AtomicRmw16XchgU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  else
    v14 = (a3 - 1073741808) < 0x80;
  if (a4 > 0xFF || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 128) < 0x90;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v40 = a1;
  v41 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v40, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 212;
  LOBYTE(v40) = -44;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -44;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = -44;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  LOBYTE(v40) = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v40);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v37;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v27 = v11;
  LOBYTE(v40) = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
    v30 = *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v40);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v38;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    v30 = *(_DWORD *)(a1 + 12) + 1;
    v31 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 16) = v31;
  }
  LOBYTE(v40) = v10;
  if (v30 > v31)
  {
    *(_DWORD *)(a1 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v30 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  v34 = v15 + 16;
  if (v15 <= 0x3FFFFFFF)
    v34 = v15;
  LOBYTE(v40) = v34;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
  }
  else
  {
    v35 = v32;
    if (v32 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v40);
      v35 = *(unsigned int *)(a1 + 12);
      v36 = *(_QWORD *)a1;
      v34 = *v39;
    }
    else
    {
      v36 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v36 + v35) = v34;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw16XchgU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  else
    v14 = (a3 - 1073741760) < 0x8000;
  if (WORD1(a4) || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 212;
  LOBYTE(v32) = -115;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v30;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -115;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = -44;
  LOBYTE(v32) = -44;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -44;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v32);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v28 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  v29 = v15 + 64;
  if (v15 <= 0x3FFFFFFF)
    v29 = v15;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw16XchgU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 212;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -44;
  LOBYTE(v26) = -44;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -44;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64AtomicRmw32XchgU::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  else
    v14 = (a3 - 1073741808) < 0x80;
  if (a4 > 0xFF || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 128) < 0x90;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v40 = a1;
  v41 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v40, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 213;
  LOBYTE(v40) = -43;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -43;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = -43;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  LOBYTE(v40) = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v40);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v37;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v27 = v11;
  LOBYTE(v40) = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
    v30 = *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v40);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v38;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    v30 = *(_DWORD *)(a1 + 12) + 1;
    v31 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 16) = v31;
  }
  LOBYTE(v40) = v10;
  if (v30 > v31)
  {
    *(_DWORD *)(a1 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v30 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  v34 = v15 + 16;
  if (v15 <= 0x3FFFFFFF)
    v34 = v15;
  LOBYTE(v40) = v34;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
  }
  else
  {
    v35 = v32;
    if (v32 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v40);
      v35 = *(unsigned int *)(a1 + 12);
      v36 = *(_QWORD *)a1;
      v34 = *v39;
    }
    else
    {
      v36 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v36 + v35) = v34;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw32XchgU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  else
    v14 = (a3 - 1073741760) < 0x8000;
  if (WORD1(a4) || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 213;
  LOBYTE(v32) = -115;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v30;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -115;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = -43;
  LOBYTE(v32) = -43;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -43;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v32);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v28 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  v29 = v15 + 64;
  if (v15 <= 0x3FFFFFFF)
    v29 = v15;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  return 1;
}

uint64_t JSC::WasmI64AtomicRmw32XchgU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 213;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -43;
  LOBYTE(v26) = -43;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -43;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI64AtomicRmwXchg::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  else
    v14 = (a3 - 1073741808) < 0x80;
  if (a4 > 0xFF || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 128) < 0x90;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v40 = a1;
  v41 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v40, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 210;
  LOBYTE(v40) = -46;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -46;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = -46;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  LOBYTE(v40) = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v40);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v37;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v11 + 16;
  if (v11 <= 0x3FFFFFFF)
    v27 = v11;
  LOBYTE(v40) = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
    v30 = *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v40);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v38;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    v30 = *(_DWORD *)(a1 + 12) + 1;
    v31 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 16) = v31;
  }
  LOBYTE(v40) = v10;
  if (v30 > v31)
  {
    *(_DWORD *)(a1 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v30 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  v34 = v15 + 16;
  if (v15 <= 0x3FFFFFFF)
    v34 = v15;
  LOBYTE(v40) = v34;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
  }
  else
  {
    v35 = v32;
    if (v32 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v40);
      v35 = *(unsigned int *)(a1 + 12);
      v36 = *(_QWORD *)a1;
      v34 = *v39;
    }
    else
    {
      v36 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v36 + v35) = v34;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI64AtomicRmwXchg::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  else
    v14 = (a3 - 1073741760) < 0x8000;
  if (WORD1(a4) || !v14)
    return result;
  v15 = a5;
  v16 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v16 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v17;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 210;
  LOBYTE(v32) = -115;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v30;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -115;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = -46;
  LOBYTE(v32) = -46;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -46;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v32);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v28 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  v29 = v15 + 64;
  if (v15 <= 0x3FFFFFFF)
    v29 = v15;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  return 1;
}

uint64_t JSC::WasmI64AtomicRmwXchg::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 210;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -46;
  LOBYTE(v26) = -46;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -46;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmI31Get::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  char v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v12 = a4;
  v14 = *(_DWORD *)(a1 + 16);
  v32 = a1;
  v33 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v32, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 227;
  LOBYTE(v32) = -29;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -29;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v32);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v15) = -29;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v19 = a2;
  LOBYTE(v32) = v19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v32);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v30;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  LOBYTE(v32) = v24;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
    v27 = *(_DWORD *)(a1 + 12);
    v28 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v32);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    v27 = *(_DWORD *)(a1 + 12) + 1;
    v28 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v27;
    *(_DWORD *)(a1 + 16) = v28;
  }
  LOBYTE(v32) = v12;
  if (v27 > v28)
  {
    *(_DWORD *)(a1 + 16) = v28 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v28) = v12;
  }
  else
  {
    if (v27 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v32);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v27) = v12;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::WasmI31Get::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  unsigned int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v12 = a4;
  v14 = *(_DWORD *)(a1 + 16);
  v29 = a1;
  v30 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v29, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 227;
  LOBYTE(v29) = -115;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -115;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v29);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v27;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -115;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = -29;
  LOBYTE(v29) = -29;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -29;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v29);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v28;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v24 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v24 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  v25 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v25 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  return 1;
}

uint64_t JSC::WasmI31Get::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 16);
  v25 = a1;
  v26 = v12;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v25, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 227;
  LOBYTE(v25) = -114;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -114;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -114;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -29;
  LOBYTE(v25) = -29;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -29;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v25);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmArrayNew::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  char v12;
  int v13;
  uint64_t result;
  _BOOL4 v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    return 0;
  v12 = a5;
  v13 = a4;
  result = 0;
  v16 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v16 = (a4 + 128) < 0x90;
  if (a5 <= 0xFF && v16)
  {
    v17 = a6;
    v18 = *(_DWORD *)(a1 + 16);
    v43 = a1;
    v44 = v18;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v43, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 36) = 228;
    LOBYTE(v43) = -28;
    v19 = *(unsigned int *)(a1 + 12);
    v20 = *(unsigned int *)(a1 + 16);
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = -28;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v43);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v19) = -28;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    v23 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v23 = a2;
    LOBYTE(v43) = v23;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v24 = v21;
      if (v21 == *(_DWORD *)(a1 + 8))
      {
        v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v43);
        v24 = *(unsigned int *)(a1 + 12);
        v25 = *(_QWORD *)a1;
        v23 = *v40;
      }
      else
      {
        v25 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v25 + v24) = v23;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v10 + 16;
    if (v10 <= 0x3FFFFFFF)
      v28 = v10;
    LOBYTE(v43) = v28;
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v43);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        v28 = *v41;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v33 = v13 + 16;
    if (v13 <= 0x3FFFFFFF)
      v33 = v13;
    LOBYTE(v43) = v33;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v33;
      v36 = *(_DWORD *)(a1 + 12);
      v37 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v34 = v31;
      if (v31 == *(_DWORD *)(a1 + 8))
      {
        v42 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v43);
        v34 = *(unsigned int *)(a1 + 12);
        v35 = *(_QWORD *)a1;
        v33 = *v42;
      }
      else
      {
        v35 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v35 + v34) = v33;
      v36 = *(_DWORD *)(a1 + 12) + 1;
      v37 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v36;
      *(_DWORD *)(a1 + 16) = v37;
    }
    LOBYTE(v43) = v12;
    if (v36 > v37)
    {
      *(_DWORD *)(a1 + 16) = v37 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v37) = v12;
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v36 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v43);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v36) = v12;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    LOBYTE(v43) = v17;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v17;
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v43);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v17;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::WasmArrayNew::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  unsigned __int16 v12;
  int v13;
  uint64_t result;
  _BOOL4 v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a5;
  v13 = a4;
  result = 0;
  v16 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v16 = (a4 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a5) && v16)
  {
    v17 = a6;
    v18 = *(_DWORD *)(a1 + 16);
    v33 = a1;
    v34 = v18;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v33, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 36) = 228;
    LOBYTE(v33) = -115;
    v19 = *(unsigned int *)(a1 + 12);
    v20 = *(unsigned int *)(a1 + 16);
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = -115;
      v23 = *(_DWORD *)(a1 + 12);
      v24 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
      {
        v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v33);
        v19 = *(unsigned int *)(a1 + 12);
        v21 = *(_QWORD *)a1;
        v22 = *v31;
      }
      else
      {
        v21 = *(_QWORD *)a1;
        v22 = -115;
      }
      *(_BYTE *)(v21 + v19) = v22;
      v23 = *(_DWORD *)(a1 + 12) + 1;
      v24 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
    }
    v25 = -28;
    LOBYTE(v33) = -28;
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = -28;
    }
    else
    {
      v26 = v23;
      if (v23 == *(_DWORD *)(a1 + 8))
      {
        v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v33);
        v26 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        v25 = *v32;
      }
      else
      {
        v27 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v27 + v26) = v25;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v28 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v28 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
    v29 = v10 + 64;
    if (v10 <= 0x3FFFFFFF)
      v29 = v10;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
    v30 = v13 + 64;
    if (v13 <= 0x3FFFFFFF)
      v30 = v13;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
    return 1;
  }
  return result;
}

uint64_t JSC::WasmArrayNew::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v14 = *(_DWORD *)(a1 + 16);
  v27 = a1;
  v28 = v14;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v27, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 228;
  LOBYTE(v27) = -114;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -114;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v27);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v25;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -114;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = -28;
  LOBYTE(v27) = -28;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -28;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v27);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v26;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v11);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

uint64_t JSC::WasmStructNew::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;

  result = 0;
  v11 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 128) < 0x90;
  if (a3 <= 0xFF && v11)
  {
    v12 = a5;
    v13 = (a5 - 1073741808) < 0x80;
    if ((int)a5 <= 0x3FFFFFFF)
      v13 = (a5 + 128) < 0x90;
    if (v13)
    {
      v14 = a4;
      v15 = a3;
      v16 = *(_DWORD *)(a1 + 16);
      v35 = a1;
      v36 = v16;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v35, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 233;
      LOBYTE(v35) = -23;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(unsigned int *)(a1 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v18) = -23;
        v19 = *(_DWORD *)(a1 + 12);
        v20 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v35);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v17) = -23;
        v19 = *(_DWORD *)(a1 + 12) + 1;
        v20 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v19;
        *(_DWORD *)(a1 + 16) = v20;
      }
      v21 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v21 = a2;
      LOBYTE(v35) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(a1 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v20) = v21;
        v24 = *(_DWORD *)(a1 + 12);
        v25 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(a1 + 8))
        {
          v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v35);
          v22 = *(unsigned int *)(a1 + 12);
          v23 = *(_QWORD *)a1;
          v21 = *v33;
        }
        else
        {
          v23 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(a1 + 12) + 1;
        v25 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v24;
        *(_DWORD *)(a1 + 16) = v25;
      }
      LOBYTE(v35) = v15;
      if (v24 > v25)
      {
        *(_DWORD *)(a1 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v25) = v15;
        v26 = *(_DWORD *)(a1 + 12);
        v27 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v24 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v35);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v24) = v15;
        v26 = *(_DWORD *)(a1 + 12) + 1;
        v27 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v26;
        *(_DWORD *)(a1 + 16) = v27;
      }
      LOBYTE(v35) = v14;
      if (v26 > v27)
      {
        *(_DWORD *)(a1 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v27) = v14;
        v28 = *(_DWORD *)(a1 + 12);
        v29 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v26 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v35);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v26) = v14;
        v28 = *(_DWORD *)(a1 + 12) + 1;
        v29 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v28;
        *(_DWORD *)(a1 + 16) = v29;
      }
      v30 = v12 + 16;
      if (v12 <= 0x3FFFFFFF)
        v30 = v12;
      LOBYTE(v35) = v30;
      if (v28 > v29)
      {
        *(_DWORD *)(a1 + 16) = v29 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v29) = v30;
      }
      else
      {
        v31 = v28;
        if (v28 == *(_DWORD *)(a1 + 8))
        {
          v34 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v35);
          v31 = *(unsigned int *)(a1 + 12);
          v32 = *(_QWORD *)a1;
          v30 = *v34;
        }
        else
        {
          v32 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v32 + v31) = v30;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t JSC::WasmStructNew::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned __int16 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;

  result = 0;
  v11 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a3) && v11)
  {
    v12 = a5;
    v13 = (a5 - 1073741760) < 0x8000;
    if ((int)a5 <= 0x3FFFFFFF)
      v13 = (a5 + 0x8000) >> 6 < 0x201;
    if (v13)
    {
      v14 = a4;
      v15 = a3;
      v16 = *(_DWORD *)(a1 + 16);
      v30 = a1;
      v31 = v16;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v30, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 36) = 233;
      LOBYTE(v30) = -115;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(unsigned int *)(a1 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v18) = -115;
        v21 = *(_DWORD *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
        {
          v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v30);
          v17 = *(unsigned int *)(a1 + 12);
          v19 = *(_QWORD *)a1;
          v20 = *v28;
        }
        else
        {
          v19 = *(_QWORD *)a1;
          v20 = -115;
        }
        *(_BYTE *)(v19 + v17) = v20;
        v21 = *(_DWORD *)(a1 + 12) + 1;
        v22 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v21;
        *(_DWORD *)(a1 + 16) = v22;
      }
      v23 = -23;
      LOBYTE(v30) = -23;
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = -23;
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(a1 + 8))
        {
          v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v30);
          v24 = *(unsigned int *)(a1 + 12);
          v25 = *(_QWORD *)a1;
          v23 = *v29;
        }
        else
        {
          v25 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v25 + v24) = v23;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v26 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
      v27 = v12 + 64;
      if (v12 <= 0x3FFFFFFF)
        v27 = v12;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t JSC::WasmStructNew::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a1 + 16);
  v26 = a1;
  v27 = v13;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a1 + 40), &v26, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 36) = 233;
  LOBYTE(v26) = -114;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -114;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -114;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -23;
  LOBYTE(v26) = -23;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -23;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v26);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, a2);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v10);
  JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v9);
  return JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a1, v8);
}

JSC::Wasm::EntryPlan *JSC::Wasm::LLIntPlan::LLIntPlan(JSC::Wasm::EntryPlan *a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5)
{
  uint64_t v6;
  float v7;

  v6 = JSC::Wasm::EntryPlan::EntryPlan((uint64_t)a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_1E35B5B48;
  *(_QWORD *)(v6 + 72) = &unk_1E35B5BB0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_QWORD *)(v6 + 432) = 0;
  if (JSC::Wasm::EntryPlan::parseAndValidateModule(v6, *(const void **)(v6 + 80), *(unsigned int *)(v6 + 92), 0.0, v7))JSC::Wasm::EntryPlan::prepare(a1);
  return a1;
}

uint64_t JSC::Wasm::LLIntPlan::LLIntPlan(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  JSC::Wasm::ModuleInformation *v13;

  v7 = *a3;
  *a3 = 0;
  v12 = (unsigned int *)v7;
  JSC::Wasm::EntryPlan::EntryPlan(a1, a2, (uint64_t *)&v12, 0, a5);
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    do
    {
      v10 = __ldaxr(v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v8));
    if (!v11)
    {
      atomic_store(1u, v8);
      v13 = (JSC::Wasm::ModuleInformation *)v8;
      WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v13);
    }
  }
  *(_QWORD *)a1 = off_1E35B5B48;
  *(_QWORD *)(a1 + 72) = &unk_1E35B5BB0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = a4;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 354) = 1;
  JSC::Wasm::EntryPlan::prepare((JSC::Wasm::EntryPlan *)a1);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 132);
  return a1;
}

unsigned int **WTF::Ref<JSC::Wasm::ModuleInformation,WTF::RawPtrTraits<JSC::Wasm::ModuleInformation>,WTF::DefaultRefDerefTraits<JSC::Wasm::ModuleInformation>>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  JSC::Wasm::ModuleInformation *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (JSC::Wasm::ModuleInformation *)v2;
      WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v6);
    }
  }
  return a1;
}

uint64_t JSC::Wasm::LLIntPlan::LLIntPlan(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  v8 = *a5;
  *a5 = 0;
  v9 = *(_QWORD **)(a1 + 24);
  *v9 = a2;
  v9[1] = v8;
  *(_QWORD *)(a1 + 32) = 0x100000001;
  *(_QWORD *)(a1 + 72) = &unk_1E35B56A0;
  *(_QWORD *)a1 = off_1E35B5640;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v10 = *(unsigned int **)(a1 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 160) = a1 + 72;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  CC_SHA1_Init((CC_SHA1_CTX *)(a1 + 232));
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  if ((_QWORD)xmmword_1ECF4C290)
    WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
  *(_WORD *)(a1 + 352) = 1;
  *(_BYTE *)(a1 + 354) = 0;
  *(_BYTE *)(a1 + 355) = a4;
  *(_BYTE *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)a1 = off_1E35B5B48;
  *(_QWORD *)(a1 + 72) = &unk_1E35B5BB0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  JSC::Wasm::EntryPlan::prepare((JSC::Wasm::EntryPlan *)a1);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 132);
  return a1;
}

uint64_t JSC::Wasm::LLIntPlan::prepareImpl(JSC::Wasm::LLIntPlan *this)
{
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *((_QWORD *)this + 2);
  v3 = (char *)this + 368;
  result = JSC::Wasm::EntryPlan::tryReserveCapacity<std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>>((uint64_t)this, (uint64_t)this + 368, *(unsigned int *)(v2 + 132));
  if ((_DWORD)result)
  {
    WTF::Vector<std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)v3, *(unsigned int *)(v2 + 132), v5, v6, v7, v8, v9, v10);
    result = JSC::Wasm::EntryPlan::tryReserveCapacity<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>((uint64_t)this, (uint64_t)this + 408, *(unsigned int *)(v2 + 132), (uint64_t)" WebAssembly functions", 23);
    if ((_DWORD)result)
    {
      WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 408, *(unsigned int *)(v2 + 132), v11, v12, v13, v14, v15, v16);
      if (!*((_QWORD *)this + 48))
      {
        result = JSC::Wasm::EntryPlan::tryReserveCapacity<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>>((uint64_t)this, (uint64_t)this + 392, *(unsigned int *)(v2 + 132));
        if (!(_DWORD)result)
          return result;
        WTF::Vector<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 392, *(unsigned int *)(v2 + 132), v17, v18, v19, v20, v21, v22);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::Wasm::EntryPlan::tryReserveCapacity<std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v5 = WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(a2, a3);
  if ((v5 & 1) != 0)
    return v5;
  v7 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
LABEL_6:
  WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((uint64_t)"Failed allocating enough space for ", 36, a3, (uint64_t)" WebAssembly functions", 23, (int **)&v31);
  JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v31, 0, v9, v10, v11, v12, v13);
  v21 = v31;
  v31 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v22 = __ldxr(v7);
  if (v22 == 1)
  {
    if (!__stlxr(0, v7))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v15, v16, v17, v18, v19, v20);
  return v5;
}

void WTF::Vector<std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;

  v10 = *(unsigned int *)(a1 + 12);
  if (v10 >= a2)
  {
    WTF::VectorDestructor<true,std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>>::destruct((unint64_t *)(*(_QWORD *)a1 + 8 * a2), (unint64_t *)(*(_QWORD *)a1 + 8 * v10), a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned int *)(a1 + 8) < a2)
      WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    if (*(_QWORD *)a1)
      bzero((void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), 8 * a2 - 8 * *(unsigned int *)(a1 + 12));
  }
  *(_DWORD *)(a1 + 12) = a2;
}

uint64_t JSC::Wasm::EntryPlan::tryReserveCapacity<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v5 = WTF::Vector<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(a2, a3);
  if ((v5 & 1) != 0)
    return v5;
  v7 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
LABEL_6:
  WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((uint64_t)"Failed allocating enough space for ", 36, a3, (uint64_t)" WebAssembly functions", 23, (int **)&v31);
  JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v31, 0, v9, v10, v11, v12, v13);
  v21 = v31;
  v31 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v22 = __ldxr(v7);
  if (v22 == 1)
  {
    if (!__stlxr(0, v7))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v15, v16, v17, v18, v19, v20);
  return v5;
}

void WTF::Vector<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;

  v10 = *(unsigned int *)(a1 + 12);
  if (v10 >= a2)
  {
    WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>>::destruct((unsigned int **)(*(_QWORD *)a1 + 8 * a2), *(_QWORD *)a1 + 8 * v10, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned int *)(a1 + 8) < a2)
      WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    if (*(_QWORD *)a1)
      bzero((void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), 8 * a2 - 8 * *(unsigned int *)(a1 + 12));
  }
  *(_DWORD *)(a1 + 12) = a2;
}

void JSC::Wasm::LLIntPlan::compileFunction(JSC::Wasm::LLIntPlan *this, void *a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::Wasm::FunctionCodeBlockGenerator *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  WTF::StringImpl **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned __int8 *v76;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::AtomStringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::AtomStringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  WTF *v148;
  JSC::Wasm::TypeDefinition ***v149;
  WTF *v150;
  const JSC::Wasm::TypeDefinition *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  int v159;
  char v160;
  WTF::StringImpl *v161;
  unsigned int v162[2];
  WTF::StringImpl **v163;

  v8 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v8 + 132) <= a2)
  {
    __break(0xC471u);
    goto LABEL_119;
  }
  if (*(_DWORD *)(v8 + 52) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198D7CB60);
  }
  v11 = a2;
  v12 = *(_QWORD *)(v8 + 120);
  v13 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * a2);
  if (*(_DWORD *)(v13 + 32) == 4)
  {
    v147 = *(unsigned int **)(v13 + 8);
    v148 = *(WTF **)v147;
    v149 = *(JSC::Wasm::TypeDefinition ****)(*(_QWORD *)(*(_QWORD *)v147 + 8) + 8 * v147[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference((JSC::Wasm::TypeDefinition *)v149))
    {
      JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v13, (unint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      if (!(_BYTE)a2)
      {
        v150 = JSC::Wasm::TypeDefinition::replacePlaceholders(v149, v148, a3, a4, a5, a6, a7, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v13, v150, v151, v152, v153, v154, v155, v156);
      }
    }
  }
  if (*((_DWORD *)this + 37) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198D7CB68);
  }
  v14 = *(_DWORD *)(*((_QWORD *)this + 2) + 36);
  v15 = *((_QWORD *)this + 17) + 16 * a2;
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)v15 = 0;
    *(_DWORD *)(v15 + 8) = 0;
    WTF::fastFree(v16, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  JSC::Wasm::parseAndCompileBytecode(*(_QWORD *)(v12 + 40 * v11 + 16), *(unsigned int *)(v12 + 40 * v11 + 28));
  if (!v159)
  {
    if (!HIBYTE(word_1ECF4C7B4))
      goto LABEL_9;
    v76 = (unsigned __int8 *)this + 13;
    if (__ldaxr((unsigned __int8 *)this + 13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v76))
    {
LABEL_58:
      v78 = WTF::BitVector::begin((uint64_t *)(v158 + 152));
      v18 = (uint64_t)v17;
      v161 = (WTF::StringImpl *)v78;
      *(_QWORD *)v162 = v17;
      v79 = *(_QWORD *)(v158 + 152);
      if (v79 < 0)
        v80 = 63;
      else
        v80 = *(_QWORD *)(2 * v79);
      while (v18 != v80)
      {
        JSC::Wasm::LLIntPlan::addTailCallEdge(this, *(_DWORD *)v158 + *(_DWORD *)(*((_QWORD *)this + 2) + 36), v18, v19, v20, v21, v22, v23);
        WTF::BitVector::iterator::operator++((unint64_t **)&v161);
        v18 = *(_QWORD *)v162;
      }
      if (*(_BYTE *)(v158 + 16))
        JSC::Wasm::ModuleInformation::addClobberingTailCall(*((_QWORD *)this + 2), *(_DWORD *)v158 + *(_DWORD *)(*((_QWORD *)this + 2) + 36));
      v113 = __ldxr(v76);
      if (v113 == 1)
      {
        if (!__stlxr(0, v76))
        {
LABEL_9:
          if (*((_DWORD *)this + 95) <= a2)
          {
            __break(0xC471u);
            JUMPOUT(0x198D7CB70);
          }
          v24 = *((_QWORD *)this + 46);
          v25 = v158;
          v158 = 0;
          v26 = *(JSC::Wasm::FunctionCodeBlockGenerator **)(v24 + 8 * a2);
          *(_QWORD *)(v24 + 8 * a2) = v25;
          if (v26)
          {
            JSC::Wasm::FunctionCodeBlockGenerator::~FunctionCodeBlockGenerator(v26, v17, v18, v19, v20, v21, v22, v23);
            WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
          }
          v35 = *((_QWORD *)this + 48);
          if (v35)
          {
            v41 = *(WTF::StringImpl ***)(v35 + 8 * a2);
            goto LABEL_44;
          }
          if (*((_DWORD *)this + 95) <= a2)
          {
            __break(0xC471u);
            JUMPOUT(0x198D7CB78);
          }
          v36 = (v14 + (_DWORD)a2);
          v37 = *(_OWORD **)(*((_QWORD *)this + 46) + 8 * a2);
          v38 = *(_QWORD *)(*((_QWORD *)this + 2) + 248);
          if (*(_DWORD *)(v38 + 52) > v36)
            v39 = (WTF::StringImpl *)(*(_QWORD *)(v38 + 40) + 16 * v36);
          else
            v39 = 0;
          do
            v40 = __ldaxr((unsigned int *)v38);
          while (__stlxr(v40 + 1, (unsigned int *)v38));
          v161 = v39;
          *(_QWORD *)v162 = v38;
          v41 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0xB8);
          JSC::Wasm::LLIntCallee::LLIntCallee((uint64_t)v41, v37, v36, (unint64_t *)&v161, v42, v43, v44, v45);
          v53 = *(unsigned int **)v162;
          *(_QWORD *)v162 = 0;
          if (v53)
          {
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, v53);
              v163 = (WTF::StringImpl **)v53;
              WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v163, v46, v47, v48, v49, v50, v51, v52);
            }
          }
          if (BYTE1(dword_1ECF4C240))
          {
            if (!HIBYTE(dword_1ECF4C7B0))
              goto LABEL_26;
            if (!HIBYTE(word_1ECF4C79E))
            {
              v56 = *((_QWORD *)this + 2);
              if (*(_DWORD *)(v56 + 132) <= a2)
              {
                __break(0xC471u);
                JUMPOUT(0x198D7CB80);
              }
              if ((*(_BYTE *)(*(_QWORD *)(v56 + 120) + 40 * v11 + 32) & 1) == 0)
              {
LABEL_26:
                v57 = atomic_load(&JSC::LLInt::wasmFunctionEntryThunk(void)::onceKey);
                if (v57 != -1)
                {
                  v161 = (WTF::StringImpl *)&v160;
                  v163 = &v161;
                  std::__call_once(&JSC::LLInt::wasmFunctionEntryThunk(void)::onceKey, &v163, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::wasmFunctionEntryThunk(void)::$_0 &&>>);
                }
                v58 = JSC::LLInt::wasmFunctionEntryThunk(void)::codeRef;
                v59 = (unsigned int *)JSC::LLInt::wasmFunctionEntryThunk(void)::codeRef;
                if (JSC::LLInt::wasmFunctionEntryThunk(void)::codeRef)
                {
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 + 1, v59));
                }
                v41[22] = (WTF::StringImpl *)v58;
                v163 = v41;
                if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
                {
LABEL_33:
                  WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::add(&qword_1ECF53D80, (uint64_t *)&v163, v47, v48, v49, v50, v51, v52, (uint64_t)&v161);
                  v69 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
                  if (v69 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
                      goto LABEL_38;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v63, v64, v65, v66, v67, v68);
LABEL_38:
                  if (v59)
                  {
                    do
                    {
                      v70 = __ldaxr(v59);
                      v71 = v70 - 1;
                    }
                    while (__stlxr(v71, v59));
                    if (!v71)
                    {
                      atomic_store(1u, v59);
                      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v59, v62, v63, v64, v65, v66, v67, v68);
                      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
                    }
                  }
                  goto LABEL_42;
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
                goto LABEL_33;
              }
            }
            JSC::LLInt::wasmFunctionEntryThunkSIMD(&v161);
            JSC::Wasm::LLIntCallee::setEntrypoint((uint64_t)v41, (uint64_t)v161, v90, v91, v92, v93, v94, v95);
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v161, v96, v97, v98, v99, v100, v101, v102);
          }
          else
          {
            JSC::Wasm::LLIntCallee::setEntrypoint((uint64_t)v41, qword_1ECF53318, v47, v48, v49, v50, v51, v52);
          }
LABEL_42:
          if (*((_DWORD *)this + 101) > a2)
          {
            v72 = *((_QWORD *)this + 49);
            v73 = *(unsigned int **)(v72 + 8 * a2);
            *(_QWORD *)(v72 + 8 * a2) = v41;
            if (v73)
            {
              do
              {
                v74 = __ldaxr(v73);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, v73));
              if (!v75)
              {
                atomic_store(1u, v73);
                JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v73, v62, v63, v64, v65, v66, v67, v68);
              }
            }
LABEL_44:
            if (*((_BYTE *)this + 355) == 1
              || !WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::contains(*((_QWORD *)this + 16), (int)a2)|| JSC::Wasm::LLIntPlan::ensureEntrypoint((unint64_t)this, (JSC::Wasm::LLIntCallee *)v41, (uint64_t)a2))
            {
              goto LABEL_45;
            }
            v81 = (unsigned __int8 *)this + 13;
            if (__ldaxr((unsigned __int8 *)this + 13))
            {
              __clrex();
            }
            else if (!__stxr(1u, v81))
            {
LABEL_65:
              WTF::makeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>((int **)&v161, a2);
              JSC::Wasm::Plan::fail((uint64_t)this, (WTF::AtomStringImpl *)&v161, 0, v83, v84, v85, v86, v87);
              v89 = v161;
              v161 = 0;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                {
                  WTF::StringImpl::~StringImpl(v89, v88, v18, v19, v20, v21, v22, v23);
                  WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
                }
                else
                {
                  *(_DWORD *)v89 -= 2;
                }
              }
              goto LABEL_75;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
            goto LABEL_65;
          }
          __break(0xC471u);
LABEL_119:
          JUMPOUT(0x198D7CB58);
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 13, 0, v18, v19, v20, v21, v22, v23);
      goto LABEL_9;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
    goto LABEL_58;
  }
  v81 = (unsigned __int8 *)this + 13;
  if (!__ldaxr((unsigned __int8 *)this + 13))
    goto LABEL_93;
  __clrex();
LABEL_72:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v81);
  while (!*((_QWORD *)this + 7))
  {
    if (v159 == 1)
    {
      v114 = (WTF::StringImpl *)v158;
      if (v158)
        *(_DWORD *)v158 += 2;
      v157 = v114;
      WTF::makeString<WTF::String,WTF::ASCIILiteral,unsigned int>((uint64_t *)&v157, ", in function at index ", 24, a2, (int **)&v161);
      JSC::Wasm::Plan::fail((uint64_t)this, (WTF::AtomStringImpl *)&v161, 0, v115, v116, v117, v118, v119);
      v121 = v161;
      v161 = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
        {
          WTF::StringImpl::~StringImpl(v121, v120, v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
        }
        else
        {
          *(_DWORD *)v121 -= 2;
        }
      }
      v122 = v157;
      v157 = 0;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
        {
          WTF::StringImpl::~StringImpl(v122, v120, v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
        }
        else
        {
          *(_DWORD *)v122 -= 2;
        }
      }
      break;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_93:
    if (__stxr(1u, v81))
      goto LABEL_72;
  }
  *((_DWORD *)this + 90) = *(_DWORD *)(*((_QWORD *)this + 2) + 132);
LABEL_75:
  v104 = __ldxr(v81);
  if (v104 != 1)
  {
    __clrex();
    goto LABEL_79;
  }
  if (__stlxr(0, v81))
LABEL_79:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v81, 0, v18, v19, v20, v21, v22, v23);
LABEL_45:
  if (v159 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E35B5BD8[v159])(&v161, &v158);
}

uint64_t *JSC::Wasm::LLIntPlan::addTailCallEdge(JSC::Wasm::LLIntPlan *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[3];
  int v26;
  int v27;

  v26 = a3;
  v27 = a2;
  v8 = *((_QWORD *)this + 54);
  if (!v8)
    goto LABEL_9;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = v9 & (v11 ^ HIWORD(v11));
  v13 = *(_DWORD *)(v8 + 16 * v12);
  if (v13 != a3)
  {
    v14 = 1;
    while (v13 != -1)
    {
      v12 = ((_DWORD)v12 + v14) & v9;
      v13 = *(_DWORD *)(v8 + 16 * v12);
      ++v14;
      if (v13 == a3)
        goto LABEL_8;
    }
    v12 = *(unsigned int *)(v8 - 4);
  }
LABEL_8:
  if (v12 != *(_DWORD *)(v8 - 4))
  {
    v22 = v8 + 16 * v12;
  }
  else
  {
LABEL_9:
    v24 = 0;
    WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>((uint64_t *)this + 54, &v26, &v24, a4, a5, a6, a7, a8, (uint64_t)v25);
    v22 = v25[0];
    if (v24)
      WTF::fastFree(v24 - 16, v15, v16, v17, v18, v19, v20, v21);
  }
  return WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::add((uint64_t *)(v22 + 8), &v27, (uint64_t)v25);
}

uint64_t JSC::Wasm::ModuleInformation::addClobberingTailCall(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(this + 328);
  v3 = (unint64_t *)(2 * v2);
  if (v2 < 0)
    v4 = 63;
  else
    v4 = *v3;
  if (v4 > a2)
  {
    v5 = 1 << a2;
    v6 = v3 + 1;
    if (v2 >= 0)
      v7 = v6;
    else
      v7 = (_QWORD *)(this + 328);
    v8 = (_QWORD *)((char *)v7 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8));
    while (1)
    {
      v9 = *v8;
      if ((*v8 & v5) != 0)
        break;
      v10 = __ldxr(v8);
      if (v10 == v9)
      {
        if (!__stxr(v9 | v5, v8))
          return this;
      }
      else
      {
        __clrex();
      }
    }
  }
  return this;
}

uint64_t WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::contains(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  _BOOL8 v8;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  v5 = v2 & (v4 ^ HIWORD(v4));
  v6 = *(_DWORD *)(a1 + 4 * v5);
  if (v6 == a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v6 != -1;
    if (v6 == -1)
      break;
    v5 = (v5 + v7) & v2;
    v6 = *(_DWORD *)(a1 + 4 * v5);
    ++v7;
  }
  while (v6 != a2);
  return v8;
}

BOOL JSC::Wasm::LLIntPlan::ensureEntrypoint(unint64_t this, JSC::Wasm::LLIntCallee *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  JSC::Wasm::TypeDefinition *v9;
  int v10;
  unsigned __int8 **v11;
  unint64_t v12;
  pthread_key_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  JSC::Wasm::TypeDefinition *v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  pthread_key_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  WTF **p_start;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  WTF *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  JSC::Compilation *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  WTF *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::Wasm::InternalFunction *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned __int8 **v133;
  size_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  JSC::Wasm *v177;
  int v178;
  __int128 *v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t i;
  __int128 v189;
  uint64_t v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  int v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  char v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  unsigned int v210;
  unsigned __int8 *v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  int v215;
  JSC::ExecutableMemoryHandle *v216;
  unsigned int *v217;
  WTF *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const JSC::Wasm::Type *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  unsigned int *v233;
  WTF *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t CachedUnrolling;
  uint64_t v243;
  uint64_t v244;
  const JSC::Wasm::Type *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  int v250;
  char v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int v268;
  int v269;
  int v270;
  const JSC::Wasm::TypeDefinition *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  const JSC::Wasm::TypeDefinition *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  JSC::Wasm::InternalFunction *v284;
  char v285;
  BOOL v286;
  JSC::ExecutableMemoryHandle *v287[2];
  WTF *v288;
  JSC::ExecutableMemoryHandle *v289;
  WTF *v290;
  size_t len;
  uint64_t v292;
  WTF *v293;
  uint64_t v294;
  unsigned int v295;
  unsigned __int8 *v296;
  int v297;
  unsigned int v298;
  char v299;
  int v300;
  unsigned int v301;
  __int128 start;
  __int128 v303;
  uint64_t v304;
  unsigned int *v305[3];
  char v306;
  uint64_t v307;
  uint64_t v308;
  _BYTE *v309;
  WTF *v310;
  _QWORD v311[16];
  unsigned int v312;
  int v313;
  int v314;
  char v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  unsigned int **v319;
  char v320;
  uint64_t v321;
  int v322;
  unsigned int **v323;
  char v324;
  uint64_t v325;
  int v326;
  char v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;

  v330 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(this + 420) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198D7DCC0);
  }
  v4 = this;
  v5 = a3;
  if (*(_QWORD *)(*(_QWORD *)(this + 408) + 8 * a3))
    return 1;
  v6 = *(_QWORD *)(this + 16);
  if (*(_DWORD *)(v6 + 52) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198D7DCC8);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8 * a3);
  v9 = (JSC::Wasm::TypeDefinition *)v8;
  if (*(_DWORD *)(v8 + 32) == 4)
  {
    v217 = *(unsigned int **)(v8 + 8);
    v218 = *(WTF **)v217;
    v9 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v217 + 8) + 8 * v217[2]);
    this = JSC::Wasm::TypeDefinition::hasRecursiveReference(v9);
    if ((_DWORD)this)
    {
      this = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v8, v219, v220, v221, v222, v223, v224, v225);
      if (v232)
      {
        v9 = (JSC::Wasm::TypeDefinition *)this;
      }
      else
      {
        v9 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v9, v218, v226, v227, v228, v229, v230, v231);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v8, v9, v271, v272, v273, v274, v275, v276);
      }
    }
  }
  v10 = *((_DWORD *)v9 + 8);
  if (v10 == 5)
  {
    v9 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v9 + 1);
    v10 = *((_DWORD *)v9 + 8);
  }
  if (v10)
    v11 = 0;
  else
    v11 = (unsigned __int8 **)((char *)v9 + 8);
  if (!(_BYTE)word_1ECF4C79E)
    goto LABEL_11;
  if (HIBYTE(dword_1ECF4C7B0))
  {
    if (HIBYTE(word_1ECF4C79E))
      goto LABEL_11;
    v131 = *(_QWORD *)(v4 + 16);
    if (*(_DWORD *)(v131 + 132) <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198D7DCF8);
    }
    if ((*(_BYTE *)(*(_QWORD *)(v131 + 120) + 40 * v5 + 32) & 1) != 0)
      goto LABEL_11;
  }
  if (*((_DWORD *)v11 + 2) > 0x10u || *((_DWORD *)v11 + 3) > 0x10u)
  {
LABEL_11:
    if (!BYTE1(dword_1ECF4C240))
      return 0;
    LOBYTE(v305[0]) = 0;
    v306 = 0;
    v307 = 0;
    v308 = 0;
    v309 = (_BYTE *)0x8000000080000000;
    v310 = (WTF *)v311;
    v312 = 128;
    v12 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v12 != -1)
    {
      v290 = (WTF *)v287;
      v288 = (WTF *)&v290;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v288, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v13 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v21 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v21)
    {
      v21 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v21, v13);
    }
    v22 = *(WTF **)v21;
    if (*(_QWORD *)v21 != v21 + 8)
    {
      v23 = *(_DWORD *)(v21 + 136);
      if (v312 < v23)
      {
        if (v310 && v310 != (WTF *)v311)
        {
          WTF::fastFree((unint64_t)v310, v14, v15, v16, v17, v18, v19, v20);
          v22 = *(WTF **)v21;
          v23 = *(_DWORD *)(v21 + 136);
        }
        v310 = v22;
        v312 = v23;
        *(_QWORD *)v21 = v21 + 8;
        *(_DWORD *)(v21 + 136) = 128;
      }
    }
    v315 = 1;
    v313 = 0;
    v314 = 0;
    v318 = 0u;
    v317 = 0u;
    v316 = 0u;
    v319 = v305;
    v320 = 16;
    v321 = 0;
    v322 = 0x10000;
    v323 = v305;
    v324 = 17;
    v325 = 0;
    v326 = 0x20000;
    v327 = 0;
    v329 = 0;
    v328 = 0;
    v24 = *(_QWORD *)(v4 + 16);
    if (*(_DWORD *)(v24 + 52) <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198D7DCD0);
    }
    v25 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8 * v5);
    v26 = (JSC::Wasm::TypeDefinition *)v25;
    if (*(_DWORD *)(v25 + 32) == 4)
    {
      v233 = *(unsigned int **)(v25 + 8);
      v234 = *(WTF **)v233;
      v26 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v233 + 8) + 8 * v233[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v26))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v25, v235, v236, v237, v238, v239, v240, v241);
        if (v249)
        {
          v26 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v26 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v26, v234, v243, v244, v245, v246, v247, v248);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v25, v26, v277, v278, v279, v280, v281, v282);
        }
      }
    }
    if (*((_DWORD *)v26 + 8) == 5)
      v26 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v26 + 1);
    v27 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v27 = 1;
    *(_WORD *)(v27 + 4) = 257;
    *(_BYTE *)(v27 + 6) = 6;
    *(_QWORD *)(v27 + 8) = 0x4000000000000000;
    *(_QWORD *)(v27 + 16) = 0;
    *(_OWORD *)(v27 + 24) = 0u;
    *(_OWORD *)(v27 + 40) = 0u;
    if (*(_DWORD *)(v4 + 148) <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198D7DCD8);
    }
    v28 = (unsigned int *)v27;
    JSC::Wasm::createJSToWasmWrapper((uint64_t)v305, v27, (uint64_t)a2, (unsigned __int8 **)v26, *(_QWORD *)(v4 + 136) + 16 * v5, *(_QWORD *)(v4 + 16), 0, a3, (uint64_t *)&v284);
    v290 = 0;
    len = 0;
    v292 = 0;
    v293 = (WTF *)&v294;
    v298 = 128;
    v29 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v29 != -1)
    {
      v288 = (WTF *)&v283;
      v287[0] = (JSC::ExecutableMemoryHandle *)&v288;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, v287, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v30 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v38 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v38)
    {
      v38 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v38, v30);
    }
    v39 = *(WTF **)v38;
    if (*(_QWORD *)v38 != v38 + 8)
    {
      v40 = *(_DWORD *)(v38 + 136);
      if (v298 < v40)
      {
        if (v293 && v293 != (WTF *)&v294)
        {
          WTF::fastFree((unint64_t)v293, v31, v32, v33, v34, v35, v36, v37);
          v39 = *(WTF **)v38;
          v40 = *(_DWORD *)(v38 + 136);
        }
        v293 = v39;
        v298 = v40;
        *(_QWORD *)v38 = v38 + 8;
        *(_DWORD *)(v38 + 136) = 128;
      }
    }
    v299 = 1;
    v300 = 0;
    v301 = 12;
    start = 0u;
    v303 = 0u;
    v304 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v290, (uint64_t)v305, 0, v33, v34, v35, v36, v37);
    v48 = (_BYTE)v300 != 0;
    if (!(_BYTE)v300)
      goto LABEL_82;
    if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    {
      v142 = 1;
    }
    else
    {
      if (!byte_1ECF4C28E && !byte_1ECF4C289)
      {
        if (DWORD1(v303))
        {
          v115 = (uint64_t *)*((_QWORD *)&start + 1);
          v116 = 8 * DWORD1(v303);
          do
          {
            v117 = *v115++;
            (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v117 + 16))(v117, &v290);
            v116 -= 8;
          }
          while (v116);
        }
        p_start = (WTF **)&start;
        if (HIDWORD(v304))
        {
          v118 = (uint64_t *)*((_QWORD *)&v303 + 1);
          v119 = 8 * HIDWORD(v304);
          do
          {
            v120 = *v118++;
            (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v120 + 16))(v120, &v290);
            v119 -= 8;
          }
          while (v119);
        }
        v50 = v301;
        v51 = len;
        *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v301 / 2] += len;
        ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v50);
        sys_icache_invalidate((void *)start, v51);
        v59 = (unsigned int *)v290;
        if (v290)
        {
          do
            v214 = __ldaxr(v59);
          while (__stlxr(v214 + 1, v59));
          p_start = (WTF **)(v59 + 2);
        }
        v60 = *p_start;
        v288 = v60;
        v289 = (JSC::ExecutableMemoryHandle *)v59;
        if (byte_1ECF4C2A2)
          JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v290, (uint64_t)&v288, 0, 0);
        v287[0] = v60;
        v287[1] = 0;
        if (v59)
        {
          do
            v61 = __ldaxr(v59);
          while (__stlxr(v61 + 1, v59));
          v62 = (unsigned int *)v287[1];
          v287[1] = (JSC::ExecutableMemoryHandle *)v59;
          if (v62)
          {
            do
            {
              v63 = __ldaxr(v62);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, v62));
            if (!v64)
            {
              atomic_store(1u, v62);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v62, v52, v53, v54, v55, v56, v57, v58);
              WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
            }
          }
          v65 = (unsigned int *)v289;
          v289 = 0;
          if (v65)
          {
            do
            {
              v66 = __ldaxr(v65);
              v67 = v66 - 1;
            }
            while (__stlxr(v67, v65));
            if (!v67)
            {
              atomic_store(1u, v65);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v65, v52, v53, v54, v55, v56, v57, v58);
              WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
            }
          }
        }
        v68 = 0;
        goto LABEL_57;
      }
      v142 = byte_1ECF4C28E != 0;
    }
    JSC::Wasm::TypeDefinition::toString(v26, (uint64_t *)&v283);
    WTF::String::ascii((WTF::String *)&v283, (int8x16_t **)&v288);
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)2367,unsigned int,char const*>((uint64_t)&v290, v142, 0, 0, "JS->WebAssembly entrypoint[%i] %s", a3, v287);
    v68 = 1;
LABEL_57:
    v76 = WTF::fastMalloc((WTF *)0x18);
    v77 = (unsigned int *)v287[1];
    v287[1] = 0;
    *(JSC::ExecutableMemoryHandle **)v76 = v287[0];
    if (v77)
    {
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 + 1, v77));
      *(_QWORD *)(v76 + 8) = v77;
      *(_QWORD *)(v76 + 16) = 0;
      do
      {
        v79 = __ldaxr(v77);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v77));
      if (!v80)
      {
        atomic_store(1u, v77);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v77, (uint64_t)v69, v70, v71, v72, v73, v74, v75);
        WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
      }
    }
    else
    {
      *(_QWORD *)(v76 + 8) = 0;
      *(_QWORD *)(v76 + 16) = 0;
    }
    v81 = (JSC::Compilation *)*((_QWORD *)v284 + 6);
    *((_QWORD *)v284 + 6) = v76;
    if (v81)
    {
      JSC::Compilation::~Compilation(v81, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    v90 = (unsigned int *)v287[1];
    v287[1] = 0;
    if (v90)
    {
      do
      {
        v91 = __ldaxr(v90);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, v90));
      if (!v92)
      {
        atomic_store(1u, v90);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v90, (uint64_t)v69, v70, v71, v72, v73, v74, v75);
        WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
      }
    }
    if (v68)
    {
      v93 = v288;
      v288 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 1)
          WTF::fastFree((unint64_t)v93, v69, v70, v71, v72, v73, v74, v75);
        else
          --*(_DWORD *)v93;
      }
      v94 = v283;
      v283 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
        {
          WTF::StringImpl::~StringImpl(v94, (WTF::AtomStringImpl *)v69, v70, v71, v72, v73, v74, v75);
          WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
        }
        else
        {
          *(_DWORD *)v94 -= 2;
        }
      }
    }
    JSC::Wasm::JSEntrypointJITCallee::setEntrypoint(v28, (uint64_t *)v284 + 6, v70, v71, v72, v73, v74, v75);
    if (*(_DWORD *)(v4 + 420) <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198D7DCE0);
    }
    v95 = *(_QWORD *)(v4 + 408);
    v96 = *(unsigned int **)(v95 + 8 * v5);
    *(_QWORD *)(v95 + 8 * v5) = v28;
    if (v96)
    {
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (v97 == 1)
      {
        atomic_store(1u, v96);
        JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v96, (uint64_t)v41, v42, v43, v44, v45, v46, v47);
      }
    }
    v28 = 0;
LABEL_82:
    JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v290, v41, v42, v43, v44, v45, v46, v47);
    v105 = v284;
    v284 = 0;
    if (v105)
    {
      JSC::Wasm::InternalFunction::~InternalFunction(v105, v98, v99, v100, v101, v102, v103, v104);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    if (v28)
    {
      do
      {
        v129 = __ldaxr(v28);
        v130 = v129 - 1;
      }
      while (__stlxr(v130, v28));
      if (!v130)
      {
        atomic_store(1u, v28);
        JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v28, (uint64_t)v98, v99, v100, v101, v102, v103, v104);
      }
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v305, v98, v99, v100, v101, v102, v103, v104);
    return v48;
  }
  v288 = 0;
  v289 = 0;
  v132 = JSC::Wasm::wasmCallingConvention((JSC::Wasm *)this);
  if (*((_DWORD *)v9 + 8))
    v133 = 0;
  else
    v133 = (unsigned __int8 **)((char *)v9 + 8);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)v132, v133, 0, (char *)v305);
  JSC::Wasm::CallInformation::computeResultsOffsetList(v305, (unsigned int **)&v290);
  v134 = v311[3] + len + 15;
  LOBYTE(v287[0]) = 64;
  WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)v287);
  v175 = (v134 >> 3) & 0x1FFFFFFFFFFFFFFELL;
  if (v175 >= 0x80)
  {
    __break(0xC471u);
    JUMPOUT(0x198D7DCB8);
  }
  LOBYTE(v287[0]) = (v134 >> 3) & 0xFE;
  v176 = HIDWORD(v289);
  if (HIDWORD(v289) == (_DWORD)v289)
  {
    WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)v287);
  }
  else
  {
    *((_BYTE *)v288 + HIDWORD(v289)) = v175;
    HIDWORD(v289) = v176 + 1;
  }
  v177 = v290;
  v290 = 0;
  if (v177)
    WTF::fastFree((unint64_t)v177, v135, v136, v137, v138, v139, v140, v141);
  if (*(_DWORD *)(*(_QWORD *)(v4 + 16) + 104) != -1)
  {
    LOBYTE(v290) = 19;
    v178 = HIDWORD(v289);
    if (HIDWORD(v289) == (_DWORD)v289)
    {
      v177 = (JSC::Wasm *)WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)&v290);
    }
    else
    {
      *((_BYTE *)v288 + HIDWORD(v289)) = 19;
      HIDWORD(v289) = v178 + 1;
    }
  }
  v179 = JSC::Wasm::jsCallingConvention(v177);
  JSC::Wasm::JSCallingConvention::callInformationFor((uint64_t)v179, (uint64_t)v9, 1, (uint64_t)&v290);
  if (*((_DWORD *)v11 + 2))
  {
    v187 = 0;
    for (i = 0; i < *((unsigned int *)v11 + 2); ++i)
    {
      if (i >= v295)
      {
        __break(0xC471u);
        JUMPOUT(0x198D7DCE8);
      }
      if (*(_BYTE *)(v294 + v187 + 8) != 2)
        goto LABEL_230;
      v287[0] = 0;
      v287[1] = 0;
      v189 = *(_OWORD *)&(*v11)[16 * (i + *((_DWORD *)v11 + 3))];
      *(_OWORD *)v287 = v189;
      LOBYTE(v284) = 0;
      if (*(_QWORD *)(v294 + v187) / 8 != (char)(*(_QWORD *)(v294 + v187) / 8))
      {
        __break(0xC471u);
        JUMPOUT(0x198D7DC54);
      }
      LOBYTE(v284) = *(_QWORD *)(v294 + v187) / 8;
      if ((_BYTE)v189 != 0xFF)
        goto LABEL_194;
      if (i >= HIDWORD(v308))
      {
        __break(0xC471u);
        JUMPOUT(0x198D7DCF0);
      }
      if (*(_BYTE *)(v307 + v187 + 8) == 3)
      {
        LOBYTE(v283) = 0;
        v190 = *(_QWORD *)(v307 + v187);
        if (v190 / 8 != (char)(v190 / 8))
        {
          __break(0xC471u);
          JUMPOUT(0x198D7DC78);
        }
        LOBYTE(v283) = v190 / 8;
        v192 = v190 + 4;
        v191 = v190 < -4;
        v193 = v190 + 11;
        if (!v191)
          v193 = v192;
        if (v193 >> 3 != (char)(v193 >> 3))
        {
          __break(0xC471u);
          JUMPOUT(0x198D7DC98);
        }
        v286 = 0;
        v286 = JSC::Wasm::Type::width((JSC::Wasm::Type *)v287) != 2;
        v285 = 0;
        if (JSC::Wasm::Type::width((JSC::Wasm::Type *)v287) == 2)
          v194 = 4;
        else
          v194 = 5;
        v285 = v194;
        v195 = (int)v289;
        v196 = HIDWORD(v289);
        if (HIDWORD(v289) == (_DWORD)v289)
        {
          WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)&v286);
          v195 = (int)v289;
          v197 = HIDWORD(v289);
        }
        else
        {
          v197 = HIDWORD(v289) + 1;
          *((_BYTE *)v288 + HIDWORD(v289)) = v286;
          HIDWORD(v289) = v196 + 1;
        }
        if (v197 == v195)
        {
          WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)&v284);
          v195 = (int)v289;
          v204 = HIDWORD(v289);
        }
        else
        {
          v204 = v197 + 1;
          *((_BYTE *)v288 + v197) = (_BYTE)v284;
          HIDWORD(v289) = v197 + 1;
        }
        if (v204 == v195)
        {
          WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)&v285);
          v195 = (int)v289;
          v205 = HIDWORD(v289);
        }
        else
        {
          v205 = v204 + 1;
          *((_BYTE *)v288 + v204) = v285;
          HIDWORD(v289) = v204 + 1;
        }
        if (v205 != v195)
        {
          *((_BYTE *)v288 + v205) = (_BYTE)v283;
          HIDWORD(v289) = v205 + 1;
          goto LABEL_160;
        }
      }
      else
      {
        LOBYTE(v283) = 0;
        v198 = (int)v289;
        v199 = HIDWORD(v289);
        if (HIDWORD(v289) == (_DWORD)v289)
        {
          WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)&v283);
          v198 = (int)v289;
          v200 = HIDWORD(v289);
        }
        else
        {
          v200 = HIDWORD(v289) + 1;
          *((_BYTE *)v288 + HIDWORD(v289)) = 0;
          HIDWORD(v289) = v199 + 1;
        }
        if (v200 == v198)
        {
          WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)&v284);
        }
        else
        {
          *((_BYTE *)v288 + v200) = (_BYTE)v284;
          HIDWORD(v289) = v200 + 1;
        }
        if (i >= HIDWORD(v308))
        {
          __break(0xC471u);
          goto LABEL_227;
        }
        v201 = *(unsigned __int8 *)(v307 + v187);
        if (v201 >= 8)
          goto LABEL_227;
        v202 = v201 + 22;
        LOBYTE(v283) = v202;
        v203 = HIDWORD(v289);
        if (HIDWORD(v289) != (_DWORD)v289)
        {
          *((_BYTE *)v288 + HIDWORD(v289)) = v202;
          HIDWORD(v289) = v203 + 1;
          goto LABEL_160;
        }
      }
      WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)&v283);
LABEL_160:
      v187 += 24;
    }
  }
  LOBYTE(v287[0]) = 20;
  v206 = HIDWORD(v289);
  if (HIDWORD(v289) == (_DWORD)v289)
  {
    WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)v287);
  }
  else
  {
    *((_BYTE *)v288 + HIDWORD(v289)) = 20;
    HIDWORD(v289) = v206 + 1;
  }
  v207 = *((_DWORD *)v11 + 3);
  if (v207 == 1)
  {
    v211 = *v11;
    if (**v11 == 0xFF)
    {
      if (!HIDWORD(v310))
      {
        __break(0xC471u);
        JUMPOUT(0x198D7DD10);
      }
      if (!v297)
      {
LABEL_230:
        __break(0xC471u);
        JUMPOUT(0x198D7DC34);
      }
      if (!*v309)
      {
        v212 = *v296;
        LOBYTE(v287[0]) = 31;
        v213 = HIDWORD(v289);
        if (HIDWORD(v289) == (_DWORD)v289)
        {
          WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)v287);
          v211 = *v11;
        }
        else
        {
          *((_BYTE *)v288 + HIDWORD(v289)) = 31;
          HIDWORD(v289) = v213 + 1;
        }
        v250 = *v211;
        if (v250 == 255)
        {
          v251 = 8;
        }
        else
        {
          if (v250 != 254)
            goto LABEL_194;
          v251 = 9;
        }
        LOBYTE(v287[0]) = v251;
        v269 = HIDWORD(v289);
        if (HIDWORD(v289) == (_DWORD)v289)
        {
          WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)v287);
        }
        else
        {
          *((_BYTE *)v288 + HIDWORD(v289)) = v251;
          HIDWORD(v289) = v269 + 1;
        }
        if (v212 < 8)
        {
          LOBYTE(v287[0]) = v212 + 22;
          v270 = HIDWORD(v289);
          if (HIDWORD(v289) != (_DWORD)v289)
          {
            *((_BYTE *)v288 + HIDWORD(v289)) = v212 + 22;
            HIDWORD(v289) = v270 + 1;
            goto LABEL_179;
          }
          goto LABEL_178;
        }
      }
LABEL_227:
      __break(1u);
      goto LABEL_228;
    }
LABEL_194:
    v216 = 0;
    goto LABEL_195;
  }
  if (v207)
    goto LABEL_194;
  LOBYTE(v287[0]) = 17;
  v208 = (int)v289;
  v209 = HIDWORD(v289);
  if (HIDWORD(v289) == (_DWORD)v289)
  {
    WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)v287);
    v208 = (int)v289;
    v210 = HIDWORD(v289);
  }
  else
  {
    v210 = HIDWORD(v289) + 1;
    *((_BYTE *)v288 + HIDWORD(v289)) = 17;
    HIDWORD(v289) = v209 + 1;
  }
  LOBYTE(v287[0]) = 22;
  if (v210 != v208)
  {
    *((_BYTE *)v288 + v210) = 22;
    HIDWORD(v289) = v210 + 1;
    goto LABEL_179;
  }
LABEL_178:
  WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)v287);
LABEL_179:
  LOBYTE(v287[0]) = 21;
  v215 = HIDWORD(v289);
  if (HIDWORD(v289) == (_DWORD)v289)
  {
    WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>((uint64_t)&v288, (unint64_t)v287);
  }
  else
  {
    *((_BYTE *)v288 + HIDWORD(v289)) = 21;
    HIDWORD(v289) = v215 + 1;
  }
  JSC::Wasm::JSEntrypointInterpreterCallee::create((uint64_t *)v287, (uint64_t)&v288, *(_QWORD *)(*(_QWORD *)(v4 + 384) + 8 * v5));
  v216 = v287[0];
LABEL_195:
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)&v290, v180, v181, v182, v183, v184, v185, v186);
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v305, v252, v253, v254, v255, v256, v257, v258);
  if (v288)
    WTF::fastFree((unint64_t)v288, v259, v260, v261, v262, v263, v264, v265);
  if (!v216)
    goto LABEL_11;
  if (*(_DWORD *)(v4 + 420) <= a3)
  {
LABEL_228:
    __break(0xC471u);
    JUMPOUT(0x198D7DD08);
  }
  v266 = *(_QWORD *)(v4 + 408);
  v267 = *(unsigned int **)(v266 + 8 * v5);
  *(_QWORD *)(v266 + 8 * v5) = v216;
  if (!v267)
    return 1;
  do
    v268 = __ldaxr(v267);
  while (__stlxr(v268 - 1, v267));
  v48 = 1;
  if (v268 == 1)
  {
    atomic_store(1u, v267);
    JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v267, (uint64_t)v259, v260, v261, v262, v263, v264, v265);
  }
  return v48;
}

char *WTF::makeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(int **a1, unsigned int a2)
{
  char *result;
  const char *v4;
  int v5;
  unsigned int v6;
  const char *v7;
  int v8;

  v7 = "JIT is disabled, but the entrypoint for ";
  v8 = 40;
  v6 = a2;
  v4 = " requires JIT";
  v5 = 13;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v7, &v6, (uint64_t)&v4, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

double JSC::Wasm::JSCallingConvention::callInformationFor@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  unsigned int v30;
  int v31;
  unint64_t v32;
  _BYTE v33[7];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a3)
    v6 = 48;
  else
    v6 = 32;
  v34 = 0;
  v35 = 0;
  v7 = a2 + 8;
  if (*(_DWORD *)(a2 + 32))
    v8 = 0;
  else
    v8 = a2 + 8;
  v9 = *(_DWORD *)(v8 + 8);
  if (v9)
  {
    v12 = 0;
    v9 = 0;
    v13 = 0;
    v14 = 0;
    v32 = 0;
    if (a3)
      v15 = 2;
    else
      v15 = 3;
    while (1)
    {
      v16 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 16 * (v13 + *(_DWORD *)(a2 + 20)));
      if ((v16 - 254) >= 2)
      {
        v30 = v16 - 227;
        if (v30 > 0x1A)
          goto LABEL_34;
        v31 = 1 << v30;
        if ((v31 & 0x6000000) != 0)
        {
          if (v32 < *(unsigned int *)(a1 + 28))
          {
            v17 = v6;
            v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v32);
            v18 = 1;
            ++v32;
            goto LABEL_15;
          }
          v17 = v6 + 8;
          ++v32;
          goto LABEL_14;
        }
        if ((v31 & 0x3003) == 0)
        {
LABEL_34:
          __break(0xC471u);
          JUMPOUT(0x198D7E008);
        }
      }
      if (v14 < *(unsigned int *)(a1 + 12))
      {
        v18 = 0;
        v17 = v6;
        v6 = *(unsigned __int8 *)(*(_QWORD *)a1 + v14++);
        goto LABEL_15;
      }
      v17 = v6 + 8;
      ++v14;
LABEL_14:
      v18 = v15;
LABEL_15:
      *(_QWORD *)&v36 = v6;
      *((_QWORD *)&v36 + 1) = v18;
      LOBYTE(v37) = 3;
      if (v9 == (_DWORD)v35)
      {
        v23 = WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, v9 + 1, (unint64_t)&v36);
        v9 = HIDWORD(v35);
        v12 = v34;
        v24 = v34 + 24 * HIDWORD(v35);
        v25 = *(_QWORD *)(v23 + 16);
        *(_OWORD *)v24 = *(_OWORD *)v23;
        *(_QWORD *)(v24 + 16) = v25;
      }
      else
      {
        v19 = v36;
        v20 = v12 + 24 * v9;
        *(_QWORD *)(v20 + 16) = v37;
        *(_OWORD *)v20 = v19;
      }
      HIDWORD(v35) = ++v9;
      ++v13;
      if (*(_DWORD *)(a2 + 32))
        v21 = 0;
      else
        v21 = v7;
      v22 = *(unsigned int *)(v21 + 8);
      v6 = v17;
      if (v13 >= v22)
      {
        v26 = v35;
        v6 = v17;
        goto LABEL_23;
      }
    }
  }
  v26 = 0;
  v12 = 0;
LABEL_23:
  v27 = 40;
  if (!a3)
    v27 = 24;
  v28 = 2;
  if (!a3)
    v28 = 3;
  v37 = 0uLL;
  *(_BYTE *)a4 &= 0xF8u;
  *(_QWORD *)(a4 + 8) = v27;
  *(_QWORD *)(a4 + 16) = v28;
  *(_BYTE *)(a4 + 24) = 3;
  *(_QWORD *)(a4 + 32) = v12;
  *(_DWORD *)(a4 + 40) = v26;
  *(_DWORD *)(a4 + 44) = v9;
  *(_QWORD *)(a4 + 48) = a4 + 64;
  *(_OWORD *)(a4 + 64) = v37;
  *(_BYTE *)(a4 + 80) = 3;
  *(_DWORD *)(a4 + 81) = *(_DWORD *)v33;
  *(_DWORD *)(a4 + 84) = *(_DWORD *)&v33[3];
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a4 + 56) = 0x100000001;
  *(_QWORD *)(a4 + 88) = v6;
  return result;
}

uint64_t JSC::Wasm::JSEntrypointInterpreterCallee::create(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)(*(unsigned int *)(a2 + 12) + 72));
  result = JSC::Wasm::JSEntrypointInterpreterCallee::JSEntrypointInterpreterCallee(v6, a2, a3, v7, v8, v9, v10, v11);
  *a1 = result;
  return result;
}

void JSC::Wasm::LLIntPlan::didCompleteCompilation(JSC::Wasm::LLIntPlan *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  void *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  JSC::ExecutableAllocator *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  WTF::PrintStream *v75;
  WTF::StringImpl *v76[3];
  WTF::StringImpl **v77;

  JSC::Wasm::EntryPlan::generateStubsIfNecessary(this, a2, a3, a4, a5, a6, a7, a8);
  v17 = *((unsigned int *)this + 95);
  if (*((_QWORD *)this + 48))
    v18 = 1;
  else
    v18 = (_DWORD)v17 == 0;
  if (!v18)
  {
    if (BYTE1(dword_1ECF4C270))
    {
      v72 = 0;
      do
      {
        if (v72 >= *((unsigned int *)this + 95))
        {
          __break(0xC471u);
LABEL_67:
          JUMPOUT(0x198D7E3FCLL);
        }
        v73 = *(unsigned int **)(*((_QWORD *)this + 46) + 8 * v72);
        v74 = *((_QWORD *)this + 2);
        v75 = (WTF::PrintStream *)WTF::dataFile(v9);
        v9 = (WTF *)JSC::Wasm::BytecodeDumper::dumpBlock(v73, v74, v75);
        ++v72;
      }
      while (v17 != v72);
    }
    *((_QWORD *)this + 48) = *((_QWORD *)this + 49);
    v49 = *((_QWORD *)this + 2);
    v50 = *(_QWORD *)(v49 + 328);
    if ((v50 & 0x8000000000000000) == 0)
    {
      if (WTF::BitVector::isEmptySlow((WTF::BitVector *)(v49 + 328)))
        goto LABEL_6;
      goto LABEL_51;
    }
    if ((v50 & 0x7FFFFFFFFFFFFFFFLL) != 0)
LABEL_51:
      JSC::Wasm::LLIntPlan::computeTransitiveTailCalls(this, v10, v11, v12, v13, v14, v15, v16);
  }
LABEL_6:
  if (*((_BYTE *)this + 355) == 1)
    return;
  LODWORD(v77) = 0;
  v19 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v19 + 132))
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *((_DWORD *)this + 105);
      if (v22 <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198D7E404);
      }
      if (*(_QWORD *)(*((_QWORD *)this + 51) + 8 * v20))
        goto LABEL_25;
      v23 = *((_QWORD *)this + 16);
      if (!v23)
        goto LABEL_19;
      v24 = *(_DWORD *)(v23 - 8);
      v25 = 9 * ((v21 + ~((_DWORD)v21 << 15)) ^ ((v21 + ~((_DWORD)v21 << 15)) >> 10));
      v26 = v24 & (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6))
                                                                        + ~((v25 ^ (v25 >> 6)) << 11)) >> 16));
      v27 = *(_DWORD *)(v23 + 4 * v26);
      if (v27 != (_DWORD)v21)
        break;
LABEL_17:
      v29 = JSC::Wasm::LLIntPlan::ensureEntrypoint((unint64_t)this, *(JSC::Wasm::LLIntCallee **)(*((_QWORD *)this + 48) + 8 * v20), v21);
      LODWORD(v21) = (_DWORD)v77;
      if (!v29)
      {
        WTF::makeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>((int **)v76, v77);
        JSC::Wasm::Plan::fail((uint64_t)this, (WTF::AtomStringImpl *)v76, 0, v51, v52, v53, v54, v55);
        v63 = v76[0];
        v76[0] = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
          {
            WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
            WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
          }
          else
          {
            *(_DWORD *)v63 -= 2;
          }
        }
        return;
      }
      v22 = *((_DWORD *)this + 105);
LABEL_25:
      if (v22 <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198D7E40CLL);
      }
      if (*(_QWORD *)(*((_QWORD *)this + 51) + 8 * v21))
      {
        WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::add<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>&>((uint64_t *)this + 53, (int *)&v77, (unsigned int **)(*((_QWORD *)this + 51) + 8 * v21), v12, v13, v14, v15, v16, (uint64_t)v76);
        LODWORD(v21) = (_DWORD)v77;
      }
      v20 = (v21 + 1);
      LODWORD(v77) = v21 + 1;
      v19 = *((_QWORD *)this + 2);
      v21 = v20;
      if (*(_DWORD *)(v19 + 132) <= v20)
        goto LABEL_31;
    }
    v28 = 1;
    while (v27 != -1)
    {
      v26 = (v26 + v28) & v24;
      v27 = *(_DWORD *)(v23 + 4 * v26);
      ++v28;
      if (v27 == (_DWORD)v21)
        goto LABEL_17;
    }
LABEL_19:
    v30 = *(_QWORD *)(v19 + 320);
    v31 = (unint64_t *)(2 * v30);
    if (v30 < 0)
      v32 = 63;
    else
      v32 = *v31;
    v33 = (*(_DWORD *)(v19 + 36) + v21);
    if (v32 <= v33)
      goto LABEL_25;
    v34 = (_QWORD *)(v19 + 320);
    v35 = v31 + 1;
    if (v30 >= 0)
      v34 = v35;
    if (((*(_QWORD *)((char *)v34 + ((v33 >> 3) & 0x1FFFFFF8)) >> v33) & 1) == 0)
      goto LABEL_25;
    goto LABEL_17;
  }
LABEL_31:
  v36 = *((unsigned int *)this + 37);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)this + 17);
    v38 = v37 + 16 * v36;
    do
    {
      v39 = *(unsigned int *)(v37 + 12);
      if ((_DWORD)v39)
      {
        v40 = 32 * v39;
        v41 = *(_QWORD *)v37 + 8;
        do
        {
          v42 = *(_QWORD *)(v41 + 8);
          v43 = *(unsigned int *)(*((_QWORD *)this + 2) + 36);
          v44 = v42 >= v43;
          v45 = v42 - v43;
          if (v44)
          {
            v46 = *(_QWORD *)(*((_QWORD *)this + 48) + 8 * v45);
            v76[0] = 0;
            v77 = v76;
            JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v46, (uint64_t **)&v77);
            v47 = v76[0];
          }
          else
          {
            if (v42 >= *((unsigned int *)this + 27))
            {
              __break(0xC471u);
              JUMPOUT(0x198D7E414);
            }
            v47 = *(WTF::StringImpl **)(*((_QWORD *)this + 12) + 16 * v42);
          }
          v48 = *(JSC::ExecutableAllocator **)(v41 - 8);
          if (*(_BYTE *)v41)
          {
            if (*(_BYTE *)v41 != 1)
            {
              __break(0xC471u);
              goto LABEL_67;
            }
            JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(*(JSC::ExecutableAllocator **)(v41 - 8), *(_QWORD *)(v41 - 8), (unint64_t)v47);
          }
          else
          {
            v48 = (JSC::ExecutableAllocator *)((char *)v48 - 4);
            JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v48, (unint64_t)v48, (unint64_t)v47);
          }
          sys_icache_invalidate(v48, 4uLL);
          v41 += 32;
          v40 -= 32;
        }
        while (v40);
      }
      v37 += 16;
    }
    while (v37 != v38);
  }
}

void JSC::Wasm::LLIntPlan::computeTransitiveTailCalls(JSC::Wasm::LLIntPlan *this, void *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  WTF *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int *v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  WTF *v79;
  int v80;
  _DWORD *v81;
  unsigned int v82;
  WTF *v83;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[64];
  _DWORD v92[4];
  char v93;
  int v94;

  v88 = 0;
  v89 = (WTF *)v91;
  v90 = 16;
  v9 = *((_QWORD *)this + 2);
  v10 = *(_QWORD *)(v9 + 328);
  if ((v10 & 0x8000000000000000) != 0)
  {
    v87 = __clz(__rbit64(v10));
    v11 = 63;
    if (v87 >= 0x3F)
      v15 = 63;
    else
      v15 = v87;
  }
  else
  {
    v11 = *(_QWORD *)(2 * v10);
    if ((unint64_t)(v11 + 63) < 0x40)
      goto LABEL_113;
    v12 = *(_QWORD *)(2 * v10 + 8);
    if (v12 && (v13 = __clz(__rbit64(v12)), v13 < 0x40))
    {
      v14 = 0;
    }
    else
    {
      if ((unint64_t)(v11 + 63) >> 6 == 1)
        goto LABEL_113;
      v85 = 0;
      while (1)
      {
        v86 = *(_QWORD *)(2 * v10 + 0x10 + 8 * v85);
        if (v86)
        {
          v13 = __clz(__rbit64(v86));
          if (v13 <= 0x3F)
            break;
        }
        if (((unint64_t)(v11 + 63) >> 6) - 1 == ++v85)
          goto LABEL_113;
      }
      v14 = v85 + 1;
    }
    v15 = v13 + (v14 << 6);
  }
  if (v15 == v11)
    goto LABEL_113;
  do
  {
    v94 = v15;
    WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::add(&v88, &v94, (uint64_t)v92);
    if (v93)
    {
      v16 = HIDWORD(v90);
      if (HIDWORD(v90) == (_DWORD)v90)
      {
        v17 = WTF::Vector<unsigned int,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v89, HIDWORD(v90) + 1, (unint64_t)&v94);
        v16 = HIDWORD(v90);
        v18 = v89;
        v19 = *(_DWORD *)v17;
      }
      else
      {
        v18 = v89;
        v19 = v94;
      }
      *((_DWORD *)v18 + v16) = v19;
      ++HIDWORD(v90);
    }
    v20 = v15 + 1;
    v21 = *(_QWORD *)(v9 + 328);
    if ((v21 & 0x8000000000000000) != 0)
    {
      v29 = __clz(__rbit64(v21 >> v20)) + v20;
      if (v29 >= 0x3F)
        v15 = 63;
      else
        v15 = v29;
    }
    else
    {
      v22 = 2 * v21;
      v15 = *(_QWORD *)(2 * v21);
      v23 = v15 + 63;
      v24 = v20 >> 6;
      if (v20 >> 6 >= (unint64_t)(v15 + 63) >> 6)
        continue;
      v25 = *(_QWORD *)(v22 + 8 * v24 + 8);
      if (v25)
      {
        v26 = __clz(__rbit64(v25 >> v20)) + (v20 & 0x3F);
        if (v26 < 0x40)
          goto LABEL_17;
      }
      if (v24 + 1 != v23 >> 6)
      {
        v27 = v22 + 16;
        while (1)
        {
          v28 = *(_QWORD *)(v27 + 8 * v24);
          if (v28)
          {
            v26 = __clz(__rbit64(v28));
            if (v26 <= 0x3F)
              break;
          }
          if ((v23 >> 6) - 1 == ++v24)
            goto LABEL_18;
        }
        ++v24;
LABEL_17:
        v15 = v26 + (v24 << 6);
      }
    }
LABEL_18:
    ;
  }
  while (v15 != v11);
  v30 = HIDWORD(v90);
  if (HIDWORD(v90))
  {
    if (*((_QWORD *)this + 54))
    {
      while (1)
      {
        v31 = *((_DWORD *)v89 + --v30);
        HIDWORD(v90) = v30;
        v32 = *((_QWORD *)this + 54);
        if (!v32)
          goto LABEL_109;
        v33 = *(_DWORD *)(v32 - 8);
        v34 = 9 * ((v31 + ~(v31 << 15)) ^ ((v31 + ~(v31 << 15)) >> 10));
        v35 = (v34 ^ (v34 >> 6)) + ~((v34 ^ (v34 >> 6)) << 11);
        v36 = v33 & (v35 ^ HIWORD(v35));
        v37 = *(_DWORD *)(v32 + 16 * v36);
        if (v37 != v31)
        {
          v38 = 1;
          while (v37 != -1)
          {
            v36 = ((_DWORD)v36 + v38) & v33;
            v37 = *(_DWORD *)(v32 + 16 * v36);
            ++v38;
            if (v37 == v31)
              goto LABEL_39;
          }
          v36 = *(unsigned int *)(v32 - 4);
        }
LABEL_39:
        if (v36 == *(_DWORD *)(v32 - 4))
          goto LABEL_109;
        v39 = *(_DWORD **)(v32 + 16 * v36 + 8);
        if (!v39)
          break;
        v40 = *(v39 - 1);
        v41 = &v39[v40];
        if (!*(v39 - 3))
        {
          v42 = &v39[v40];
LABEL_49:
          v41 = &v39[v40];
          goto LABEL_50;
        }
        v42 = v39;
        if ((_DWORD)v40)
        {
          v43 = 4 * v40;
          v42 = v39;
          while (*v42 >= 0xFFFFFFFE)
          {
            ++v42;
            v43 -= 4;
            if (!v43)
            {
              v42 = v41;
              break;
            }
          }
        }
LABEL_50:
        if (v39)
          v44 = &v39[*(v39 - 1)];
        else
          v44 = 0;
        if (v44 != v42)
        {
          while (1)
          {
            v45 = *v42;
            v46 = v88;
            if (!v88)
              goto LABEL_59;
            v47 = *(_DWORD *)(v88 - 8);
            v48 = 9 * ((v45 + ~((_DWORD)v45 << 15)) ^ ((v45 + ~((_DWORD)v45 << 15)) >> 10));
            v49 = v47 & (((v48 ^ (v48 >> 6)) + ~((v48 ^ (v48 >> 6)) << 11)) ^ (((v48 ^ (v48 >> 6))
                                                                              + ~((v48 ^ (v48 >> 6)) << 11)) >> 16));
            v50 = *(_DWORD *)(v88 + 4 * v49);
            if (v50 != (_DWORD)v45)
              break;
LABEL_94:
            v81 = v42 + 1;
            v42 = v41;
            if (v81 != v41)
            {
              v42 = v81;
              while (*v42 >= 0xFFFFFFFE)
              {
                if (++v42 == v41)
                {
                  v42 = v41;
                  break;
                }
              }
            }
            if (v42 == v44)
            {
              v30 = HIDWORD(v90);
              goto LABEL_109;
            }
          }
          v51 = 1;
          while (v50 != -1)
          {
            v49 = (v49 + v51) & v47;
            v50 = *(_DWORD *)(v88 + 4 * v49);
            ++v51;
            if (v50 == (_DWORD)v45)
              goto LABEL_94;
          }
LABEL_59:
          v52 = *((_QWORD *)this + 2);
          v53 = *(_QWORD *)(v52 + 328);
          v54 = (unint64_t *)(2 * v53);
          if (v53 < 0)
            v55 = 63;
          else
            v55 = *v54;
          if (v55 > v45)
          {
            v56 = (_QWORD *)(v52 + 328);
            v57 = 1 << v45;
            v58 = v54 + 1;
            if (v53 >= 0)
              v59 = v58;
            else
              v59 = v56;
            v60 = (_QWORD *)((char *)v59 + ((v45 >> 3) & 0x1FFFFFF8));
            while (1)
            {
              v61 = *v60;
              if ((*v60 & v57) != 0)
                break;
              v62 = __ldxr(v60);
              if (v62 == v61)
              {
                if (!__stxr(v61 | v57, v60))
                  break;
              }
              else
              {
                __clrex();
              }
            }
            LODWORD(v45) = *v42;
            v46 = v88;
          }
          v92[0] = v45;
          if (v46)
            goto LABEL_75;
          v63 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)&v64 = -1;
          *((_QWORD *)&v64 + 1) = -1;
          *(_OWORD *)(v63 + 16) = v64;
          *(_OWORD *)(v63 + 32) = v64;
          v88 = v63 + 16;
          *(_DWORD *)(v63 + 12) = 8;
          *(_DWORD *)(v88 - 8) = 7;
          *(_DWORD *)(v88 - 16) = 0;
          *(_DWORD *)(v88 - 12) = 0;
          v46 = v88;
          if (v88)
LABEL_75:
            v65 = *(_DWORD *)(v46 - 8);
          else
            v65 = 0;
          v66 = v92[0];
          v67 = 9 * ((v92[0] + ~(v92[0] << 15)) ^ ((v92[0] + ~(v92[0] << 15)) >> 10));
          v68 = (v67 ^ (v67 >> 6)) + ~((v67 ^ (v67 >> 6)) << 11);
          v69 = (v68 ^ HIWORD(v68)) & v65;
          a3 = (int *)(v46 + 4 * v69);
          v70 = *a3;
          if (*a3 != -1)
          {
            v71 = 0;
            v72 = 1;
            while (v70 != v92[0])
            {
              if (v70 == -2)
                v71 = a3;
              v69 = (v69 + v72) & v65;
              a3 = (int *)(v46 + 4 * v69);
              v70 = *a3;
              ++v72;
              if (*a3 == -1)
              {
                if (v71)
                {
                  *v71 = -1;
                  --*(_DWORD *)(v88 - 16);
                  v66 = v92[0];
                  a3 = v71;
                }
                goto LABEL_84;
              }
            }
            goto LABEL_94;
          }
LABEL_84:
          *a3 = v66;
          if (v88)
            v73 = *(_DWORD *)(v88 - 12) + 1;
          else
            v73 = 1;
          *(_DWORD *)(v88 - 12) = v73;
          if (v88)
            v74 = *(_DWORD *)(v88 - 12);
          else
            v74 = 0;
          v75 = (*(_DWORD *)(v88 - 16) + v74);
          v76 = *(unsigned int *)(v88 - 4);
          if (v76 > 0x400)
          {
            if (v76 > 2 * v75)
              goto LABEL_90;
          }
          else
          {
            if (3 * v76 > 4 * v75)
            {
LABEL_90:
              v77 = HIDWORD(v90);
              if (HIDWORD(v90) == (_DWORD)v90)
              {
                v78 = WTF::Vector<unsigned int,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v89, HIDWORD(v90) + 1, (unint64_t)v92);
                v77 = HIDWORD(v90);
                v79 = v89;
                v80 = *(_DWORD *)v78;
              }
              else
              {
                v79 = v89;
                v80 = v92[0];
              }
              *((_DWORD *)v79 + v77) = v80;
              ++HIDWORD(v90);
              goto LABEL_94;
            }
            if (!(_DWORD)v76)
            {
              v82 = 8;
              goto LABEL_107;
            }
          }
          v82 = (_DWORD)v76 << (6 * *(_DWORD *)(v88 - 12) >= (2 * v76));
LABEL_107:
          WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(&v88, v82, a3);
          goto LABEL_90;
        }
LABEL_109:
        if (!v30)
          goto LABEL_113;
      }
      v42 = 0;
      v40 = 0;
      goto LABEL_49;
    }
    HIDWORD(v90) = 0;
  }
LABEL_113:
  v83 = v89;
  if (v91 != (_BYTE *)v89 && v89 != 0)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    WTF::fastFree((unint64_t)v83, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  if (v88)
    WTF::fastFree(v88 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

