uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, _OWORD *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v17;
  int **v18;
  int *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  _WORD *v35;
  unsigned int v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  int v52;
  char *v53;
  _QWORD v55[5];
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v17 = result;
  v18 = a9;
  v55[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v55);
        v19 = (int *)v55[0];
        if (v55[0])
        {
          v20 = (_BYTE *)(v55[0] + 20);
          *(_DWORD *)v55[0] = 2;
          v19[1] = v17;
          *((_QWORD *)v19 + 1) = v19 + 5;
          v19[4] = 4;
          if (a4 == 1)
          {
            *v20 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v19 + 5, a3, a4);
          }
          v49 = 0;
          v50 = a5;
          do
          {
            *((_BYTE *)&v55[3] + v49--) = (v50 % 0xA) | 0x30;
            v34 = v50 > 9;
            v50 /= 0xAuLL;
          }
          while (v34);
          v51 = &v20[a4];
          if (v49 + 26 <= 25)
            memcpy(v51, (char *)&v55[3] + v49 + 1, -v49);
          v52 = 0;
          do
          {
            ++v52;
            v34 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v34);
          v53 = &v51[v52];
          if (a7 == 1)
          {
            *v53 = *(_BYTE *)a6;
          }
          else if (a7)
          {
            memcpy(v53, a6, a7);
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v53[a7], a8, a10, a11);
        }
        v18 = a9;
        goto LABEL_45;
      }
LABEL_47:
      v19 = 0;
      goto LABEL_45;
    }
LABEL_46:
    v19 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_45;
  }
  if (!(_DWORD)result)
    goto LABEL_46;
  if (result > 0x7FFFFFEF)
    goto LABEL_47;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v55);
  v19 = (int *)v55[0];
  if (v55[0])
  {
    v21 = (char *)(v55[0] + 20);
    *(_DWORD *)v55[0] = 2;
    v19[1] = v17;
    *((_QWORD *)v19 + 1) = v19 + 5;
    v19[4] = 0;
    v22 = (uint64_t)v19 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v23 = &v21[2 * (a4 & 0xFFFFFFC0)];
      v24 = 0uLL;
      do
      {
        v56.val[0] = (int8x16_t)*a3;
        v25 = *((int8x16_t *)a3 + 1);
        v58.val[0] = (int8x16_t)a3[2];
        v26 = a3[3];
        a3 += 4;
        v27 = v26;
        v58.val[1] = 0uLL;
        v60.val[0] = v25;
        v56.val[1] = 0uLL;
        v28 = v21;
        vst2q_s8(v28, v56);
        v28 += 32;
        v60.val[1] = 0uLL;
        vst2q_s8(v28, v60);
        v29 = v21 + 64;
        vst2q_s8(v29, v58);
        v30 = v21 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
        v21 += 128;
      }
      while (v21 != v23);
      v21 = v23;
    }
    while (v21 != (char *)v22)
    {
      v31 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v21 = v31;
      v21 += 2;
    }
    v32 = 0;
    v33 = a5;
    do
    {
      *((_BYTE *)&v55[3] + v32--) = (v33 % 0xA) | 0x30;
      v34 = v33 > 9;
      v33 /= 0xAuLL;
    }
    while (v34);
    if (v32 + 26 <= 25)
    {
      v35 = (_WORD *)v19 + a4 + 10;
      do
        *v35++ = *((unsigned __int8 *)&v55[3] + v32 + 1);
      while (!__CFADD__(v32++, 1));
    }
    v37 = 0;
    do
    {
      ++v37;
      v34 = a5 > 9;
      a5 /= 0xAuLL;
    }
    while (v34);
    v38 = (char *)(v22 + 2 * v37);
    v39 = &v38[2 * a7];
    if ((a7 & 0xFFFFFFC0) != 0)
    {
      v40 = &v38[2 * (a7 & 0xFFFFFFC0)];
      v41 = 0uLL;
      do
      {
        v57.val[0] = (int8x16_t)*a6;
        v42 = *((int8x16_t *)a6 + 1);
        v59.val[0] = (int8x16_t)a6[2];
        v43 = a6[3];
        a6 += 4;
        v44 = v43;
        v59.val[1] = 0uLL;
        v61.val[0] = v42;
        v57.val[1] = 0uLL;
        v45 = v38;
        vst2q_s8(v45, v57);
        v45 += 32;
        v61.val[1] = 0uLL;
        vst2q_s8(v45, v61);
        v46 = v38 + 64;
        vst2q_s8(v46, v59);
        v47 = v38 + 96;
        vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
        v38 += 128;
      }
      while (v38 != v40);
      v38 = v40;
    }
    while (v38 != v39)
    {
      v48 = *(unsigned __int8 *)a6;
      a6 = (_OWORD *)((char *)a6 + 1);
      *(_WORD *)v38 = v48;
      v38 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, a8, a10, a11);
  }
LABEL_45:
  *v18 = v19;
  return result;
}

uint64_t JSC::Wasm::linearizeType(int a1)
{
  uint64_t result;
  int v2;

  if (a1 == -64)
    return 23;
  v2 = a1 + 50;
  result = 0;
  switch(v2)
  {
    case 0:
      result = 22;
      break;
    case 1:
      result = 21;
      break;
    case 2:
      result = 20;
      break;
    case 16:
      result = 19;
      break;
    case 17:
      result = 18;
      break;
    case 18:
      result = 17;
      break;
    case 21:
      result = 16;
      break;
    case 22:
      result = 15;
      break;
    case 28:
      result = 14;
      break;
    case 29:
      result = 13;
      break;
    case 30:
      result = 12;
      break;
    case 31:
      result = 11;
      break;
    case 32:
      result = 10;
      break;
    case 33:
      result = 9;
      break;
    case 34:
      result = 8;
      break;
    case 35:
      result = 7;
      break;
    case 36:
      result = 6;
      break;
    case 37:
      result = 5;
      break;
    case 45:
      result = 4;
      break;
    case 46:
      result = 3;
      break;
    case 47:
      result = 2;
      break;
    case 48:
      result = 1;
      break;
    case 49:
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x198CAB8F0);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int **a7@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;

  v7 = a1[1];
  if (v7)
  {
    --v7;
    v18 = *a1;
    if (v7 >> 31)
      goto LABEL_13;
  }
  else
  {
    v18 = *a1;
  }
  v19 = v7;
  v17 = *a2;
  v8 = a3[1];
  if (v8)
  {
    --v8;
    v15 = *a3;
    if (v8 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198CABA94);
    }
  }
  else
  {
    v15 = *a3;
  }
  v16 = v8;
  v14 = *a4;
  v9 = a5[1];
  if (v9)
  {
    --v9;
    v12 = *a5;
    if (!(v9 >> 31))
      goto LABEL_7;
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198CABA64);
  }
  v12 = *a5;
LABEL_7:
  v13 = v9;
  v11 = *a6;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v18, &v17, (uint64_t)&v15, &v14, (uint64_t)&v12, &v11, a7);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, int **a7@<X8>)
{
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  int v30;

  v8 = 0;
  v9 = *(_DWORD *)(result + 8);
  v10 = *a2;
  v11 = *a2;
  do
  {
    ++v8;
    v12 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v12);
  v13 = *a4;
  if (*a4)
    v14 = *(_DWORD *)(v13 + 4);
  else
    v14 = 0;
  v15 = *(_DWORD *)(a5 + 8);
  v16 = *a6;
  if (*a6)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  if ((v17 | v15) < 0)
    goto LABEL_35;
  v18 = __OFADD__(v15, v17);
  v19 = v15 + v17;
  v20 = v18;
  if (v14 < 0 || v20)
    goto LABEL_35;
  v21 = *(_DWORD *)(a3 + 8);
  v18 = __OFADD__(v14, v19);
  v22 = v14 + v19;
  v23 = v18;
  if (v21 < 0 || v23)
    goto LABEL_35;
  v18 = __OFADD__(v21, v22);
  v24 = v21 + v22;
  v25 = v18;
  if (v8 < 0
    || v25
    || ((v18 = __OFADD__(v8, v24), v26 = v8 + v24, !v18) ? (v27 = 0) : (v27 = 1),
        v9 < 0 || (v27 & 1) != 0 || (v18 = __OFADD__(v9, v26), v28 = (v9 + v26), v18)))
  {
LABEL_35:
    *a7 = 0;
    return result;
  }
  if (v13)
  {
    v29 = *(_DWORD *)(v13 + 16);
    v30 = (v29 >> 2) & 1;
    if (!v16 || (v29 & 4) == 0)
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v28, v30, *(_OWORD **)result, *(_QWORD *)(result + 8), v10, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v13, a7, *(int8x16_t **)a5, *(_QWORD *)(a5 + 8), v16);
  }
  else if (!v16)
  {
    v30 = 1;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v28, v30, *(_OWORD **)result, *(_QWORD *)(result + 8), v10, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v13, a7, *(int8x16_t **)a5, *(_QWORD *)(a5 + 8), v16);
  }
  v30 = (*(unsigned __int8 *)(v16 + 16) >> 2) & 1;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v28, v30, *(_OWORD **)result, *(_QWORD *)(result + 8), v10, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v13, a7, *(int8x16_t **)a5, *(_QWORD *)(a5 + 8), v16);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t *a10, unsigned int a11, uint64_t a12)
{
  int v18;
  int **v19;
  int *v22;
  _BYTE *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  _WORD *v38;
  unsigned int v40;
  char *v41;
  char *v42;
  int8x16_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  int v48;
  char *v49;
  __int128 v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int16 v57;
  _QWORD v58[5];
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;

  v18 = result;
  v19 = a9;
  v58[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v58);
        v22 = (int *)v58[0];
        if (v58[0])
        {
          v23 = (_BYTE *)(v58[0] + 20);
          *(_DWORD *)v58[0] = 2;
          v22[1] = v18;
          *((_QWORD *)v22 + 1) = v22 + 5;
          v22[4] = 4;
          if (a4 == 1)
          {
            *v23 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v22 + 5, a3, a4);
          }
          v45 = 0;
          v46 = a5;
          do
          {
            *((_BYTE *)&v58[3] + v45--) = (v46 % 0xA) | 0x30;
            v37 = v46 > 9;
            v46 /= 0xAuLL;
          }
          while (v37);
          v47 = &v23[a4];
          if (v45 + 26 <= 25)
            memcpy(&v23[a4], (char *)&v58[3] + v45 + 1, -v45);
          v48 = 0;
          v19 = a9;
          do
          {
            ++v48;
            v37 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v37);
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v47[v48], a6, a7, a8, a10, a11, a12);
        }
        goto LABEL_41;
      }
LABEL_43:
      v22 = 0;
      goto LABEL_41;
    }
LABEL_42:
    v22 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_41;
  }
  if (!(_DWORD)result)
    goto LABEL_42;
  if (result > 0x7FFFFFEF)
    goto LABEL_43;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v58);
  v22 = (int *)v58[0];
  if (v58[0])
  {
    v24 = (char *)(v58[0] + 20);
    *(_DWORD *)v58[0] = 2;
    v22[1] = v18;
    *((_QWORD *)v22 + 1) = v22 + 5;
    v22[4] = 0;
    v25 = (uint64_t)v22 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v26 = &v24[2 * (a4 & 0xFFFFFFC0)];
      v27 = 0uLL;
      do
      {
        v59.val[0] = (int8x16_t)*a3;
        v28 = *((int8x16_t *)a3 + 1);
        v61.val[0] = (int8x16_t)a3[2];
        v29 = a3[3];
        a3 += 4;
        v30 = v29;
        v61.val[1] = 0uLL;
        v63.val[0] = v28;
        v59.val[1] = 0uLL;
        v31 = v24;
        vst2q_s8(v31, v59);
        v31 += 32;
        v63.val[1] = 0uLL;
        vst2q_s8(v31, v63);
        v32 = v24 + 64;
        vst2q_s8(v32, v61);
        v33 = v24 + 96;
        vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
        v24 += 128;
      }
      while (v24 != v26);
      v24 = v26;
    }
    while (v24 != (char *)v25)
    {
      v34 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v24 = v34;
      v24 += 2;
    }
    v35 = 0;
    v36 = a5;
    do
    {
      *((_BYTE *)&v58[3] + v35--) = (v36 % 0xA) | 0x30;
      v37 = v36 > 9;
      v36 /= 0xAuLL;
    }
    while (v37);
    if (v35 + 26 <= 25)
    {
      v38 = (_WORD *)v22 + a4 + 10;
      do
        *v38++ = *((unsigned __int8 *)&v58[3] + v35 + 1);
      while (!__CFADD__(v35++, 1));
    }
    v40 = 0;
    do
    {
      ++v40;
      v37 = a5 > 9;
      a5 /= 0xAuLL;
    }
    while (v37);
    v41 = (char *)(v25 + 2 * v40);
    v42 = &v41[2 * a7];
    if ((a7 & 0xFFFFFFC0) != 0)
    {
      v49 = &v41[2 * (a7 & 0xFFFFFFC0)];
      v50 = 0uLL;
      v44 = a12;
      v43 = a10;
      do
      {
        v60.val[0] = *a6;
        v51 = a6[1];
        v62.val[0] = a6[2];
        v52 = a6[3];
        a6 += 4;
        v53 = v52;
        v62.val[1] = 0uLL;
        v64.val[0] = v51;
        v60.val[1] = 0uLL;
        v54 = v41;
        vst2q_s8(v54, v60);
        v54 += 32;
        v64.val[1] = 0uLL;
        vst2q_s8(v54, v64);
        v55 = v41 + 64;
        vst2q_s8(v55, v62);
        v56 = v41 + 96;
        vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
        v41 += 128;
      }
      while (v41 != v49);
      v41 = v49;
    }
    else
    {
      v44 = a12;
      v43 = a10;
    }
    while (v41 != v42)
    {
      v57 = a6->u8[0];
      a6 = (int8x16_t *)((char *)a6 + 1);
      *(_WORD *)v41 = v57;
      v41 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v42, a8, v43, a11, v44);
  }
LABEL_41:
  *v19 = v22;
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, uint64_t a4, double a5, float a6)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  float v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  WTF::PrintStream *v42;
  float v43;
  double v44;
  const WTF::String *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  const WTF::String *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  float v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  float v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  int v106;
  char v107;
  void (**v108)(WTF::StringPrintStream *__hidden);
  WTF *v109;
  __int128 v110;
  _BYTE v111[128];
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  if (*(_QWORD *)a2)
  {
    v9 = *(_QWORD *)(a2 + 8);
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (!v10)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v11, (uint64_t)&v105, a6);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v105 = (WTF::StringImpl *)v12;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v112, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  v112[5]((WTF::StringPrintStream *)&v112);
  v112[5]((WTF::StringPrintStream *)&v112);
  v20 = v113;
  if (!v113)
  {
    v104 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v104);
  v20 = v113;
  if (v113 != (WTF *)v115)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v112, "%u", *a3);
  v112[5]((WTF::StringPrintStream *)&v112);
  v28 = v113;
  if (!v113)
  {
    v103 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v103);
  v28 = v113;
  if (v113 != (WTF *)v115)
LABEL_17:
    WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  if (*(_QWORD *)a4)
  {
    v30 = *(_QWORD *)(a4 + 8);
    v10 = v30 != 0;
    v31 = v30 - 1;
    if (!v10)
      v31 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v31, (uint64_t)&v105, v29);
  }
  else
  {
    v32 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v32 = 1;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v105 = (WTF::StringImpl *)v32;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v112, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
  v112[5]((WTF::StringPrintStream *)&v112);
  v112[5]((WTF::StringPrintStream *)&v112);
  v40 = v113;
  if (!v113)
  {
    v105 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v105);
  v40 = v113;
  if (v113 != (WTF *)v115)
LABEL_29:
    WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  v41 = (WTF *)((uint64_t (*)(_QWORD))v108[4])(&v108);
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v41 + 32))(v41);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v112, v43);
  WTF::printExpectedCStringHelper(v42, "StringView", &v112);
  if ((_DWORD)v113 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v113])(&v107, &v112);
  v44 = (*(double (**)(WTF *))(*(_QWORD *)v41 + 40))(v41);
  WTF::printInternal(v41, (WTF::PrintStream *)&v104, v45, v46, v47, v48, v49, v50, v44, v51);
  WTF::printInternal(v41, (WTF::PrintStream *)&v103, v52, v53, v54, v55, v56, v57, v58, v59);
  WTF::printInternal(v41, (WTF::PrintStream *)&v105, v60, v61, v62, v63, v64, v65, v66, v67);
  v108[5]((WTF::StringPrintStream *)&v108);
  v75 = v105;
  v105 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = v103;
  v103 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
  v77 = v104;
  v104 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  v78 = v109;
  if (v109)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v112);
    v78 = v109;
    *a1 = v112;
    if (v78 == (WTF *)v111)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v78, v68, v69, v70, v71, v72, v73, v74);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral,unsigned long>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, uint64_t a3, _QWORD *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  float v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  WTF::PrintStream *v37;
  float v38;
  double v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  int v101;
  char v102;
  void (**v103)(WTF::StringPrintStream *__hidden);
  WTF *v104;
  __int128 v105;
  _BYTE v106[128];
  void (**v107)(WTF::StringPrintStream *__hidden);
  WTF *v108;
  __int128 v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v103 = off_1E3572250;
  v104 = (WTF *)v106;
  v105 = xmmword_199122F80;
  v106[0] = 0;
  v107 = off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%u", *a2);
  v107[5]((WTF::StringPrintStream *)&v107);
  v14 = v108;
  if (!v108)
  {
    v99 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v99);
  v14 = v108;
  if (v108 != (WTF *)v110)
LABEL_5:
    WTF::fastFree((unint64_t)v14, v7, v8, v9, v10, v11, v12, v13);
  v107 = off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (*(_QWORD *)a3)
  {
    v16 = *(_QWORD *)(a3 + 8);
    v17 = v16 != 0;
    v18 = v16 - 1;
    if (!v17)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v18, (uint64_t)&v100, v15);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v100 = (WTF::StringImpl *)v19;
    v101 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v100);
  if (v101 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v101])(&v98, &v100);
  v107[5]((WTF::StringPrintStream *)&v107);
  v107[5]((WTF::StringPrintStream *)&v107);
  v27 = v108;
  if (!v108)
  {
    v100 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v100);
  v27 = v108;
  if (v108 != (WTF *)v110)
LABEL_17:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v107 = off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%lu", *a4);
  v107[5]((WTF::StringPrintStream *)&v107);
  v35 = v108;
  if (!v108)
  {
    v98 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v98);
  v35 = v108;
  if (v108 != (WTF *)v110)
LABEL_22:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v36 = (WTF *)((uint64_t (*)(_QWORD))v103[4])(&v103);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v36 + 32))(v36);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v107, v38);
  WTF::printExpectedCStringHelper(v37, "StringView", &v107);
  if ((_DWORD)v108 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v108])(&v102, &v107);
  v39 = (*(double (**)(WTF *))(*(_QWORD *)v36 + 40))(v36);
  WTF::printInternal(v36, (WTF::PrintStream *)&v99, v40, v41, v42, v43, v44, v45, v39, v46);
  WTF::printInternal(v36, (WTF::PrintStream *)&v100, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v36, (WTF::PrintStream *)&v98, v55, v56, v57, v58, v59, v60, v61, v62);
  v103[5]((WTF::StringPrintStream *)&v103);
  v70 = v98;
  v98 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v100;
  v100 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v99;
  v99 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v104;
  if (v104)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v104, v105, (uint64_t *)&v107);
    v73 = v104;
    *a1 = v107;
    if (v73 == (WTF *)v106)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v73, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, float a9@<S1>)
{
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  const char *v105;
  int v106;
  const char *v107;
  WTF *v108;
  __int128 v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v14 = *a2;
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (__src)
  {
    v15 = a3 - 1;
    if (!a3)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v15, (uint64_t)&v105, a9);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v105 = (const char *)v16;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v24 = v108;
  if (!v108)
  {
    v98 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v98);
  v24 = v108;
  if (v108 != (WTF *)v110)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%u", a4);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v32 = v108;
  if (!v108)
  {
    v97 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v97);
  v32 = v108;
  if (v108 != (WTF *)v110)
LABEL_17:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (a5)
  {
    v34 = a6 - 1;
    if (!a6)
      v34 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v34, (uint64_t)&v105, v33);
  }
  else
  {
    v35 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v105 = (const char *)v35;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v43 = v108;
  if (!v108)
  {
    v96 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v96);
  v43 = v108;
  if (v108 != (WTF *)v110)
LABEL_29:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%lu", a7);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v51 = v108;
  if (!v108)
  {
    v95 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v95);
  v51 = v108;
  if (v108 != (WTF *)v110)
LABEL_34:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  v107 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v108) = 41;
  v104 = v14;
  v105 = ": ";
  v106 = 2;
  v102 = v97;
  v103 = v98;
  v100 = v95;
  v101 = v96;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v107, &v104, (uint64_t)&v105, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, &v99);
  if (v99)
  {
    *a8 = v99;
    v99 = 0;
    v59 = v95;
    v95 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
    v60 = v96;
    v96 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
    v61 = v97;
    v97 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
    }
    v62 = v98;
    v98 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF::PrintStream *v52;
  float v53;
  double v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  char v135;
  void (**v136)(WTF::StringPrintStream *__hidden);
  WTF *v137;
  __int128 v138;
  _BYTE v139[128];
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v136 = off_1E3572250;
  v137 = (WTF *)v139;
  v138 = xmmword_199122F80;
  v139[0] = 0;
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a2)
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v13, (uint64_t)&v133, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v133 = (WTF::StringImpl *)v14;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v132, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v22 = v141;
  if (!v141)
  {
    v132 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v132);
  v22 = v141;
  if (v141 != (WTF *)v143)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v140, "%u", *a3);
  v140[5]((WTF::StringPrintStream *)&v140);
  v30 = v141;
  if (!v141)
  {
    v131 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v131);
  v30 = v141;
  if (v141 != (WTF *)v143)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a4)
  {
    v32 = *(_QWORD *)(a4 + 8);
    v12 = v32 != 0;
    v33 = v32 - 1;
    if (!v12)
      v33 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v33, (uint64_t)&v133, v31);
  }
  else
  {
    v34 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v34 = 1;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 0;
    v133 = (WTF::StringImpl *)v34;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v130, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v42 = v141;
  if (!v141)
  {
    v133 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v133);
  v42 = v141;
  if (v141 != (WTF *)v143)
LABEL_29:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v140, "%u", *a5);
  v140[5]((WTF::StringPrintStream *)&v140);
  v50 = v141;
  if (!v141)
  {
    v130 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v130);
  v50 = v141;
  if (v141 != (WTF *)v143)
LABEL_34:
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  v51 = (WTF *)((uint64_t (*)(_QWORD))v136[4])(&v136);
  v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v51 + 32))(v51);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v140, v53);
  WTF::printExpectedCStringHelper(v52, "StringView", &v140);
  if ((_DWORD)v141 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v141])(&v135, &v140);
  v54 = (*(double (**)(WTF *))(*(_QWORD *)v51 + 40))(v51);
  WTF::printInternal(v51, (WTF::PrintStream *)&v132, v55, v56, v57, v58, v59, v60, v54, v61);
  WTF::printInternal(v51, (WTF::PrintStream *)&v131, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v51, (WTF::PrintStream *)&v133, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v51, (WTF::PrintStream *)&v130, v78, v79, v80, v81, v82, v83, v84, v85);
  v136[5]((WTF::StringPrintStream *)&v136);
  v93 = v130;
  v130 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v133;
  v133 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v131;
  v131 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v132;
  v132 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v137;
  if (v137)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v137, v138, (uint64_t *)&v140);
    v97 = v137;
    *a1 = v140;
    if (v97 == (WTF *)v139)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v97, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  float v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  float v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF::PrintStream *v56;
  float v57;
  double v58;
  const WTF::String *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  const WTF::String *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float v73;
  const WTF::String *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  float v81;
  const WTF::String *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  float v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  void (**v144)(WTF::StringPrintStream *__hidden);
  WTF *v145;
  __int128 v146;
  _BYTE v147[128];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a2)
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v13, (uint64_t)&v137, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v137 = (WTF::StringImpl *)v14;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v136, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v22 = v145;
  if (!v145)
  {
    v136 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v136);
  v22 = v145;
  if (v145 != (WTF *)v147)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a3)
  {
    v24 = *(_QWORD *)(a3 + 8);
    v12 = v24 != 0;
    v25 = v24 - 1;
    if (!v12)
      v25 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v25, (uint64_t)&v137, v23);
  }
  else
  {
    v26 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 16) = 0;
    v137 = (WTF::StringImpl *)v26;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v135, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v34 = v145;
  if (!v145)
  {
    v135 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v135);
  v34 = v145;
  if (v145 != (WTF *)v147)
LABEL_24:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v144, "%u", *a4);
  v144[5]((WTF::StringPrintStream *)&v144);
  v42 = v145;
  if (!v145)
  {
    v134 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v134);
  v42 = v145;
  if (v145 != (WTF *)v147)
LABEL_29:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a5)
  {
    v44 = *(_QWORD *)(a5 + 8);
    v12 = v44 != 0;
    v45 = v44 - 1;
    if (!v12)
      v45 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v45, (uint64_t)&v137, v43);
  }
  else
  {
    v46 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    v137 = (WTF::StringImpl *)v46;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v139, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v54 = v145;
  if (!v145)
  {
    v137 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v137);
  v54 = v145;
  if (v145 != (WTF *)v147)
LABEL_41:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v55 = (WTF *)((uint64_t (*)(_QWORD))v140[4])(&v140);
  v56 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v55 + 32))(v55);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v144, v57);
  WTF::printExpectedCStringHelper(v56, "StringView", &v144);
  if ((_DWORD)v145 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v145])(&v139, &v144);
  v58 = (*(double (**)(WTF *))(*(_QWORD *)v55 + 40))(v55);
  WTF::printInternal(v55, (WTF::PrintStream *)&v136, v59, v60, v61, v62, v63, v64, v58, v65);
  WTF::printInternal(v55, (WTF::PrintStream *)&v135, v66, v67, v68, v69, v70, v71, v72, v73);
  WTF::printInternal(v55, (WTF::PrintStream *)&v134, v74, v75, v76, v77, v78, v79, v80, v81);
  WTF::printInternal(v55, (WTF::PrintStream *)&v137, v82, v83, v84, v85, v86, v87, v88, v89);
  v140[5]((WTF::StringPrintStream *)&v140);
  v97 = v137;
  v137 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v134;
  v134 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v135;
  v135 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v136;
  v136 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v141;
  if (v141)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v144);
    v101 = v141;
    *a1 = v144;
    if (v101 == (WTF *)v143)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v90, v91, v92, v93, v94, v95, v96);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, _DWORD *a4, double a5, float a6)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  float v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  WTF::PrintStream *v42;
  float v43;
  double v44;
  const WTF::String *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  const WTF::String *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  float v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  float v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  int v106;
  char v107;
  void (**v108)(WTF::StringPrintStream *__hidden);
  WTF *v109;
  __int128 v110;
  _BYTE v111[128];
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  if (*(_QWORD *)a2)
  {
    v9 = *(_QWORD *)(a2 + 8);
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (!v10)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v11, (uint64_t)&v105, a6);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v105 = (WTF::StringImpl *)v12;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v112, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  v112[5]((WTF::StringPrintStream *)&v112);
  v112[5]((WTF::StringPrintStream *)&v112);
  v20 = v113;
  if (!v113)
  {
    v104 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v104);
  v20 = v113;
  if (v113 != (WTF *)v115)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  if (*(_QWORD *)a3)
  {
    v22 = *(_QWORD *)(a3 + 8);
    v10 = v22 != 0;
    v23 = v22 - 1;
    if (!v10)
      v23 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v23, (uint64_t)&v105, v21);
  }
  else
  {
    v24 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = 0;
    *(_BYTE *)(v24 + 16) = 0;
    v105 = (WTF::StringImpl *)v24;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v112, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v103, &v105);
  v112[5]((WTF::StringPrintStream *)&v112);
  v112[5]((WTF::StringPrintStream *)&v112);
  v32 = v113;
  if (!v113)
  {
    v105 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v105);
  v32 = v113;
  if (v113 != (WTF *)v115)
LABEL_24:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v112, "%u", *a4);
  v112[5]((WTF::StringPrintStream *)&v112);
  v40 = v113;
  if (!v113)
  {
    v103 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v103);
  v40 = v113;
  if (v113 != (WTF *)v115)
LABEL_29:
    WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  v41 = (WTF *)((uint64_t (*)(_QWORD))v108[4])(&v108);
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v41 + 32))(v41);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v112, v43);
  WTF::printExpectedCStringHelper(v42, "StringView", &v112);
  if ((_DWORD)v113 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v113])(&v107, &v112);
  v44 = (*(double (**)(WTF *))(*(_QWORD *)v41 + 40))(v41);
  WTF::printInternal(v41, (WTF::PrintStream *)&v104, v45, v46, v47, v48, v49, v50, v44, v51);
  WTF::printInternal(v41, (WTF::PrintStream *)&v105, v52, v53, v54, v55, v56, v57, v58, v59);
  WTF::printInternal(v41, (WTF::PrintStream *)&v103, v60, v61, v62, v63, v64, v65, v66, v67);
  v108[5]((WTF::StringPrintStream *)&v108);
  v75 = v103;
  v103 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = v105;
  v105 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
  v77 = v104;
  v104 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  v78 = v109;
  if (v109)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v112);
    v78 = v109;
    *a1 = v112;
    if (v78 == (WTF *)v111)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v78, v68, v69, v70, v71, v72, v73, v74);
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, char *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S1>)
{
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  float v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  int *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  const char *v110;
  int v111;
  const char *v112;
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v16 = *a2;
  v112 = (const char *)off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  if (__src)
  {
    v17 = a3 - 1;
    if (!a3)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v17, (uint64_t)&v110, a10);
  }
  else
  {
    v18 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 0;
    v110 = (const char *)v18;
    v111 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v112, "StringView", &v110);
  if (v111 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v111])(&v109, &v110);
  (*((void (**)(const char **))v112 + 5))(&v112);
  (*((void (**)(const char **))v112 + 5))(&v112);
  v26 = v113;
  if (!v113)
  {
    v103 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v103);
  v26 = v113;
  if (v113 != (WTF *)v115)
LABEL_12:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v112 = (const char *)off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  if (a4)
  {
    v28 = a5 - 1;
    if (!a5)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v28, (uint64_t)&v110, v27);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v110 = (const char *)v29;
    v111 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v112, "StringView", &v110);
  if (v111 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v111])(&v109, &v110);
  (*((void (**)(const char **))v112 + 5))(&v112);
  (*((void (**)(const char **))v112 + 5))(&v112);
  v37 = v113;
  if (!v113)
  {
    v102 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v102);
  v37 = v113;
  if (v113 != (WTF *)v115)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v112 = (const char *)off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v112, "%u", a6);
  (*((void (**)(const char **))v112 + 5))(&v112);
  v45 = v113;
  if (!v113)
  {
    v101 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v101);
  v45 = v113;
  if (v113 != (WTF *)v115)
LABEL_29:
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  v112 = (const char *)off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  if (a7)
  {
    v47 = a8 - 1;
    if (!a8)
      v47 = 0;
    WTF::StringImpl::utf8ForCharacters(a7, v47, (uint64_t)&v110, v46);
  }
  else
  {
    v48 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v48 = 1;
    *(_QWORD *)(v48 + 8) = 0;
    *(_BYTE *)(v48 + 16) = 0;
    v110 = (const char *)v48;
    v111 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v112, "StringView", &v110);
  if (v111 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v111])(&v109, &v110);
  (*((void (**)(const char **))v112 + 5))(&v112);
  (*((void (**)(const char **))v112 + 5))(&v112);
  v56 = v113;
  if (!v113)
  {
    v100 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v100);
  v56 = v113;
  if (v113 != (WTF *)v115)
LABEL_41:
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  v112 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v113) = 41;
  v109 = v16;
  v110 = ": ";
  v111 = 2;
  v107 = v102;
  v108 = v103;
  v105 = v100;
  v106 = v101;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v112, &v109, (uint64_t)&v110, (uint64_t *)&v108, (uint64_t *)&v107, (uint64_t *)&v106, (uint64_t *)&v105, &v104);
  if (v104)
  {
    *a9 = v104;
    v104 = 0;
    v64 = v100;
    v100 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::~StringImpl(v64, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      else
      {
        *(_DWORD *)v64 -= 2;
      }
    }
    v65 = v101;
    v101 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
      {
        WTF::StringImpl::~StringImpl(v65, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      }
      else
      {
        *(_DWORD *)v65 -= 2;
      }
    }
    v66 = v102;
    v102 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
      {
        WTF::StringImpl::~StringImpl(v66, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v66 -= 2;
      }
    }
    v67 = v103;
    v103 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
      {
        WTF::StringImpl::~StringImpl(v67, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
      }
      else
      {
        *(_DWORD *)v67 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, unint64_t *a3, _DWORD *a4, double a5, float a6)
{
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  char *v32;
  unint64_t *v33;
  uint64_t v34;
  void (**v35[2])(WTF::StringPrintStream *__hidden);
  void (**v36)(WTF::StringPrintStream *__hidden);
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  unsigned int v40;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_46;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v7 = 0;
        v40 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_37:
        v7 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_37;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_46;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
      goto LABEL_46;
LABEL_13:
    v7 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v7 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198CAE12CLL);
  }
LABEL_10:
  v7 = 2;
LABEL_15:
  v40 = v7;
LABEL_16:
  if (*(_DWORD *)(a3[3310] + 104) == -1)
  {
    v38 = "simd memory instructions need a memory defined in the module";
    v39 = 61;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v35, (uint64_t)&v38, a5, a6);
    v31 = v35[0];
  }
  else
  {
    v8 = a3[2];
    v9 = *a3;
    v10 = v8 - *a3;
    if (v8 <= *a3)
      goto LABEL_42;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = a3[1];
    v15 = 5;
    if (v10 < 5)
      v15 = v8 - *a3;
    v16 = v15 - 1;
    *a3 = v9 + 1;
    v17 = v14 + v9;
    while (1)
    {
      v18 = *(char *)(v17 + v11);
      v13 |= (v18 & 0x7F) << v12;
      if ((v18 & 0x80000000) == 0)
        break;
      if (v16 == v11)
        goto LABEL_42;
      v19 = v9 + v11 + 2;
      *a3 = v19;
      ++v11;
      v12 += 7;
      if (v10 == v11)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v37 = v13;
    if ((_DWORD)v11 == 4 && v18 >= 0x10u)
    {
LABEL_42:
      v32 = "can't get simd memory op alignment";
      v33 = a3;
      v34 = 35;
LABEL_45:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v33, v34, &v38, a6);
      v31 = (void (**)(WTF::StringPrintStream *__hidden))v38;
    }
    else
    {
      if (v8 <= v9 + v11 + 1)
        goto LABEL_44;
      v17 = 0;
      v20 = 0;
      v21 = 0;
      *a4 = 0;
      v22 = ~v11 + v10;
      v23 = 5;
      if (v22 < 5)
        v23 = v22;
      v24 = v9 + v11;
      *a3 = v9 + v11 + 2;
      v25 = v9 - v8;
      v26 = v14 + v9;
      v27 = v23 - 1;
      v28 = v25 + v11;
      while (1)
      {
        LODWORD(v19) = *(char *)(v26 + v17 + v11 + 1);
        v21 |= (v19 & 0x7F) << v20;
        *a4 = v21;
        if ((v19 & 0x80000000) == 0)
          break;
        if (v27 == v17)
          goto LABEL_44;
        v29 = v24 + v17;
        v30 = v28 + v17++;
        v19 = v29 + 3;
        *a3 = v19;
        v20 += 7;
        if (v30 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v17 == 4 && v19 >= 0x10u)
      {
LABEL_44:
        v32 = "can't get simd memory op offset";
        v33 = a3;
        v34 = 32;
        goto LABEL_45;
      }
      if (v13 <= v7)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v38 = "alignment: ";
      v39 = 12;
      v35[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
      v35[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v36, (uint64_t)&v38, &v37, (uint64_t)v35, &v40, a5, a6);
      v31 = v36;
    }
  }
  *(_QWORD *)a1 = v31;
  a1[8] = 1;
}

char *JSC::Wasm::ParserBase::fail<>@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  char *result;
  int *v4;
  const char *v5;
  int v6;
  unint64_t v7;
  const char *v8;
  int v9;

  v7 = *a1;
  v8 = "WebAssembly.Module doesn't parse at byte ";
  v9 = 41;
  v5 = ": ";
  v6 = 2;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v8, &v7, (uint64_t)&v5, &v4);
  if (v4)
    *a2 = v4;
  else
    __break(0xC471u);
  return result;
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>, float a6@<S1>)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int *v53;
  char v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  WTF *v59;
  __int128 v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v54 = a4;
  v7 = *a2;
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  if (__src)
  {
    v8 = a3 - 1;
    if (!a3)
      v8 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v8, (uint64_t)&v56, a6);
  }
  else
  {
    v9 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 0;
    v56 = (const char *)v9;
    LODWORD(v57) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v58, "StringView", &v56);
  if ((_DWORD)v57 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v55, &v56);
  (*((void (**)(const char **))v58 + 5))(&v58);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v17 = v59;
  if (!v59)
  {
    v52 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v52);
  v17 = v59;
  if (v59 != (WTF *)v61)
LABEL_12:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  JSC::SIMDLaneOperationDump::dump(&v54, (WTF::PrintStream *)&v58);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v25 = v59;
  if (!v59)
  {
    v51 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v51);
  v25 = v59;
  if (v59 != (WTF *)v61)
LABEL_17:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v58 = "WebAssembly.Module doesn't parse at byte ";
  v59 = (WTF *)42;
  v56 = ": ";
  v57 = 3;
  v55 = v7;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v58, &v55, (uint64_t)&v56, (uint64_t *)&v52, (uint64_t *)&v51, &v53);
  if (v53)
  {
    *a5 = v53;
    v53 = 0;
    v33 = v51;
    v51 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
    v34 = v52;
    v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, _QWORD *a8@<X8>, float a9@<S1>)
{
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  const char *v105;
  int v106;
  const char *v107;
  WTF *v108;
  __int128 v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v14 = *a2;
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (__src)
  {
    v15 = a3 - 1;
    if (!a3)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v15, (uint64_t)&v105, a9);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v105 = (const char *)v16;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v24 = v108;
  if (!v108)
  {
    v98 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v98);
  v24 = v108;
  if (v108 != (WTF *)v110)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%u", a4);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v32 = v108;
  if (!v108)
  {
    v97 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v97);
  v32 = v108;
  if (v108 != (WTF *)v110)
LABEL_17:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (a5)
  {
    v34 = a6 - 1;
    if (!a6)
      v34 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v34, (uint64_t)&v105, v33);
  }
  else
  {
    v35 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v105 = (const char *)v35;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v43 = v108;
  if (!v108)
  {
    v96 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v96);
  v43 = v108;
  if (v108 != (WTF *)v110)
LABEL_29:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%u", a7);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v51 = v108;
  if (!v108)
  {
    v95 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v95);
  v51 = v108;
  if (v108 != (WTF *)v110)
LABEL_34:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  v107 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v108) = 41;
  v104 = v14;
  v105 = ": ";
  v106 = 2;
  v102 = v97;
  v103 = v98;
  v100 = v95;
  v101 = v96;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v107, &v104, (uint64_t)&v105, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, &v99);
  if (v99)
  {
    *a8 = v99;
    v99 = 0;
    v59 = v95;
    v95 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
    v60 = v96;
    v96 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
    v61 = v97;
    v97 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
    }
    v62 = v98;
    v98 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

char *WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int **a6@<X8>)
{
  int v7;
  int v8;
  char *result;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;

  if (a2)
  {
    v7 = a2 - 1;
    v13 = a1;
    if ((unint64_t)(a2 - 1) >> 31)
    {
      __break(0xC471u);
      goto LABEL_12;
    }
  }
  else
  {
    v7 = 0;
    v13 = a1;
  }
  v14 = v7;
  v12 = a3;
  if (a5)
  {
    v8 = a5 - 1;
    v10 = a4;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198CAE9A0);
    }
  }
  else
  {
    v8 = 0;
    v10 = a4;
  }
  v11 = v8;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v13, &v12, (uint64_t)&v10, a6);
  if (!*a6)
  {
    __break(0xC471u);
LABEL_12:
    JUMPOUT(0x198CAE970);
  }
  return result;
}

char *JSC::SIMDLaneOperationDump::dump(char *this, WTF::PrintStream *a2)
{
  unint64_t v2;
  const char *v4;
  WTF::PrintStream *v5;

  v2 = *this;
  if (v2 <= 0x50)
  {
    v4 = off_1E35B5718[v2];
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v5, "%s", v4);
    return (char *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return this;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::binaryCase(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  void (*v17)(__int128 *__return_ptr, _QWORD *, __int128 *, __int128 *, __int128 *);
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::HandleSet *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  WTF::AtomStringImpl *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::HandleSet *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  WTF::AtomStringImpl *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  char v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t *v90;
  JSC::HandleSet *v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unsigned int v161;
  const char *v162;
  uint64_t v163;
  unsigned int v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  JSC::HandleSet *v179;
  JSC::HandleSet *v180;
  __int128 v183;
  uint64_t v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t *v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  _QWORD *v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  _QWORD *v202;
  char v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;

  *(_QWORD *)&v204 = a6;
  *((_QWORD *)&v204 + 1) = a7;
  v203 = a3;
  v199 = JSC::Wasm::Types::Void;
  LOBYTE(v200) = 1;
  *((_QWORD *)&v200 + 1) = 0;
  v202 = 0;
  v195 = JSC::Wasm::Types::Void;
  LOBYTE(v196) = 1;
  *((_QWORD *)&v196 + 1) = 0;
  v198 = 0;
  if (!*(_DWORD *)(a2 + 68))
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "binary right", 13, &v191, a10);
    *(_QWORD *)a1 = v191;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_81;
  }
  v17 = (void (*)(__int128 *__return_ptr, _QWORD *, __int128 *, __int128 *, __int128 *))a4;
  v18 = (uint64_t *)(a2 + 56);
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v191, a2 + 56, a3, a4, a5, a6, a7, a8);
  v199 = v191;
  v200 = v192;
  v201 = v193;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v202, &v194, v19, v20, v21, v22, v23, v24);
  if (v194)
  {
    v137 = v194 - 2;
    v138 = *(_QWORD *)(((unint64_t)(v194 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v139 = (uint64_t *)*(v194 - 1);
    if (v139)
    {
      v140 = *v137;
      *v139 = *v137;
      *(_QWORD *)(v140 + 8) = v139;
      *v137 = 0;
      v137[1] = 0;
    }
    *v137 = *(_QWORD *)(v138 + 40);
    *(_QWORD *)(v138 + 40) = v137;
  }
  if (v202)
  {
    v32 = *(JSC::HandleSet **)(((unint64_t)(v202 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v33 = (_QWORD *)*((_QWORD *)v32 + 5);
    if (!v33)
    {
      v179 = *(JSC::HandleSet **)(((unint64_t)(v202 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      JSC::HandleSet::grow(v32, v25, v26, v27, v28, v29, v30, v31);
      v32 = v179;
      v33 = (_QWORD *)*((_QWORD *)v179 + 5);
    }
    *((_QWORD *)v32 + 5) = *v33;
    v33[2] = 0;
    v34 = v33 + 2;
    *v33 = 0;
    v33[1] = 0;
    v35 = v202;
    if (v202)
    {
      v35 = (_QWORD *)*v202;
      if (*v202)
      {
        v165 = *(_QWORD **)(((unint64_t)(v34 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v166 = v165[3];
        v165 += 3;
        *(v34 - 2) = v166;
        *(v34 - 1) = v165;
        *v165 = v34 - 2;
        *(_QWORD *)(v166 + 8) = v34 - 2;
      }
    }
    *v34 = v35;
  }
  else
  {
    v34 = 0;
  }
  *(_QWORD *)&v191 = "WasmFunctionParser.h:";
  DWORD2(v191) = 21;
  LODWORD(v205) = 522;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v191, (unsigned int *)&v205, (int **)&v190);
  v44 = v190;
  if (!v190)
  {
    __break(0xC471u);
    goto LABEL_133;
  }
  v190 = 0;
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
    WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    if (!v34)
      goto LABEL_14;
  }
  else
  {
    *(_DWORD *)v44 -= 2;
    if (!v34)
      goto LABEL_14;
  }
  v116 = v34 - 2;
  v117 = *(_QWORD *)(((unint64_t)(v34 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v118 = (uint64_t *)*(v34 - 1);
  if (v118)
  {
    v119 = *v116;
    *v118 = *v116;
    *(_QWORD *)(v119 + 8) = v118;
    *v116 = 0;
    *(v34 - 1) = 0;
  }
  *v116 = *(_QWORD *)(v117 + 40);
  *(_QWORD *)(v117 + 40) = v116;
LABEL_14:
  if (!*(_DWORD *)(a2 + 68))
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "binary left", 12, &v191, v43);
    v128 = v191;
LABEL_129:
    *(_QWORD *)a1 = v128;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_81;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v191, a2 + 56, v37, v38, v39, v40, v41, v42);
  v195 = v191;
  v196 = v192;
  v197 = v193;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v198, &v194, v45, v46, v47, v48, v49, v50);
  if (v194)
  {
    v141 = v194 - 2;
    v142 = *(_QWORD *)(((unint64_t)(v194 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v143 = (uint64_t *)*(v194 - 1);
    if (v143)
    {
      v144 = *v141;
      *v143 = *v141;
      *(_QWORD *)(v144 + 8) = v143;
      *v141 = 0;
      v141[1] = 0;
    }
    *v141 = *(_QWORD *)(v142 + 40);
    *(_QWORD *)(v142 + 40) = v141;
  }
  if (v198)
  {
    v58 = *(JSC::HandleSet **)(((unint64_t)(v198 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v59 = (_QWORD *)*((_QWORD *)v58 + 5);
    if (!v59)
    {
      v180 = *(JSC::HandleSet **)(((unint64_t)(v198 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      JSC::HandleSet::grow(v58, v51, v52, v53, v54, v55, v56, v57);
      v58 = v180;
      v59 = (_QWORD *)*((_QWORD *)v180 + 5);
    }
    *((_QWORD *)v58 + 5) = *v59;
    v59[2] = 0;
    v60 = v59 + 2;
    *v59 = 0;
    v59[1] = 0;
    v61 = v198;
    if (v198)
    {
      v61 = (_QWORD *)*v198;
      if (*v198)
      {
        v167 = *(_QWORD **)(((unint64_t)(v60 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v168 = v167[3];
        v167 += 3;
        *(v60 - 2) = v168;
        *(v60 - 1) = v167;
        *v167 = v60 - 2;
        *(_QWORD *)(v168 + 8) = v60 - 2;
      }
    }
    *v60 = v61;
  }
  else
  {
    v60 = 0;
  }
  *(_QWORD *)&v191 = "WasmFunctionParser.h:";
  DWORD2(v191) = 21;
  LODWORD(v205) = 523;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v191, (unsigned int *)&v205, (int **)&v189);
  v69 = v189;
  if (!v189)
  {
    __break(0xC471u);
LABEL_133:
    JUMPOUT(0x198CAF398);
  }
  v189 = 0;
  if (*(_DWORD *)v69 == 2)
  {
    WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
    WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
  }
  else
  {
    *(_DWORD *)v69 -= 2;
  }
  if (v60)
  {
    v145 = v60 - 2;
    v146 = *(_QWORD *)(((unint64_t)(v60 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v147 = (uint64_t *)*(v60 - 1);
    if (v147)
    {
      v148 = *v145;
      *v147 = *v145;
      *(_QWORD *)(v148 + 8) = v147;
      *v145 = 0;
      *(v60 - 1) = 0;
    }
    *v145 = *(_QWORD *)(v146 + 40);
    *(_QWORD *)(v146 + 40) = v145;
  }
  if (v195 != a11)
    goto LABEL_121;
  if (a11 - 239 < 2 || a11 == 227)
  {
    if (a12 == *((_QWORD *)&v195 + 1))
      v70 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v70 = 0;
    if ((v70 & 1) == 0)
      goto LABEL_121;
  }
  else
  {
    if (a12 == *((_QWORD *)&v195 + 1))
      v161 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v161 = 1;
    if (v161 == 1)
    {
LABEL_121:
      v162 = " left value type mismatch";
      v163 = 26;
LABEL_128:
      *(_QWORD *)&v191 = v162;
      *((_QWORD *)&v191 + 1) = v163;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v205, (uint64_t)&v203, (uint64_t)&v191);
      v128 = v205;
      goto LABEL_129;
    }
  }
  if (v199 != a13)
  {
LABEL_127:
    v162 = " right value type mismatch";
    v163 = 27;
    goto LABEL_128;
  }
  if (a13 - 239 < 2 || a13 == 227)
  {
    if (a14 == *((_QWORD *)&v199 + 1))
      v71 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v71 = 0;
    if ((v71 & 1) == 0)
      goto LABEL_127;
  }
  else
  {
    if (a14 == *((_QWORD *)&v199 + 1))
      v164 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v164 = 1;
    if (v164 == 1)
      goto LABEL_127;
  }
  LOBYTE(v191) = 1;
  *((_QWORD *)&v191 + 1) = 0;
  *((_QWORD *)&v192 + 1) = 0;
  v72 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
  if ((a5 & 1) != 0)
    v17 = *(void (**)(__int128 *__return_ptr, _QWORD *, __int128 *, __int128 *, __int128 *))(*v72 + v17);
  v186 = v196;
  v187 = v197;
  v188 = 0;
  if (v198)
  {
    v73 = *(_QWORD *)(((unint64_t)(v198 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v74 = *(_QWORD **)(v73 + 40);
    if (!v74)
    {
      v173 = v72;
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v198 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v62, v63, v64, v65, v66, v67, v68);
      v72 = v173;
      v74 = *(_QWORD **)(v73 + 40);
    }
    *(_QWORD *)(v73 + 40) = *v74;
    v74[2] = 0;
    v75 = v74 + 2;
    *v74 = 0;
    v74[1] = 0;
    v188 = v74 + 2;
    v76 = v198;
    if (v198)
    {
      v76 = (_QWORD *)*v198;
      if (*v198)
      {
        v169 = *(_QWORD **)(((unint64_t)(v75 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v170 = v169[3];
        v169 += 3;
        *(v75 - 2) = v170;
        *(v75 - 1) = v169;
        *v169 = v75 - 2;
        *(_QWORD *)(v170 + 8) = v75 - 2;
      }
    }
    *v75 = v76;
  }
  v183 = v200;
  v184 = v201;
  v185 = 0;
  if (v202)
  {
    v77 = *(_QWORD *)(((unint64_t)(v202 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v78 = *(_QWORD **)(v77 + 40);
    if (!v78)
    {
      v174 = v72;
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v202 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v62, v63, v64, v65, v66, v67, v68);
      v72 = v174;
      v78 = *(_QWORD **)(v77 + 40);
    }
    *(_QWORD *)(v77 + 40) = *v78;
    v78[2] = 0;
    v79 = v78 + 2;
    *v78 = 0;
    v78[1] = 0;
    v185 = v78 + 2;
    v80 = v202;
    if (v202)
    {
      v80 = (_QWORD *)*v202;
      if (*v202)
      {
        v171 = *(_QWORD **)(((unint64_t)(v79 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v172 = v171[3];
        v171 += 3;
        *(v79 - 2) = v172;
        *(v79 - 1) = v171;
        *v171 = v79 - 2;
        *(_QWORD *)(v172 + 8) = v79 - 2;
      }
    }
    *v79 = v80;
  }
  v17(&v205, v72, &v186, &v183, &v191);
  if (v185)
  {
    v149 = v185 - 2;
    v150 = *(_QWORD *)(((unint64_t)(v185 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v151 = (uint64_t *)*(v185 - 1);
    if (v151)
    {
      v152 = *v149;
      *v151 = *v149;
      *(_QWORD *)(v152 + 8) = v151;
      *v149 = 0;
      v149[1] = 0;
    }
    *v149 = *(_QWORD *)(v150 + 40);
    *(_QWORD *)(v150 + 40) = v149;
    v185 = 0;
  }
  if (v188)
  {
    v153 = v188 - 2;
    v154 = *(_QWORD *)(((unint64_t)(v188 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v155 = (uint64_t *)*(v188 - 1);
    if (v155)
    {
      v156 = *v153;
      *v155 = *v153;
      *(_QWORD *)(v156 + 8) = v155;
      *v153 = 0;
      v153[1] = 0;
    }
    *v153 = *(_QWORD *)(v154 + 40);
    *(_QWORD *)(v154 + 40) = v153;
    v188 = 0;
  }
  if (BYTE8(v205))
  {
    *(_QWORD *)a1 = v205;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    v88 = *(_DWORD *)(a2 + 68);
    if (v88 == *(_DWORD *)(a2 + 64))
    {
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::ConstExprGenerator::ConstExprValue&>(a2 + 56, &v204, (unint64_t)&v191, v83, v84, v85, v86, v87);
    }
    else
    {
      v89 = *v18;
      v90 = (uint64_t *)(*v18 + 48 * v88);
      v205 = v191;
      v206 = v192;
      if (*((_QWORD *)&v192 + 1))
      {
        v91 = *(JSC::HandleSet **)(((*((_QWORD *)&v192 + 1) - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v92 = (_QWORD *)*((_QWORD *)v91 + 5);
        if (!v92)
        {
          JSC::HandleSet::grow(v91, v81, v82, v83, v84, v85, v86, v87);
          v92 = (_QWORD *)*((_QWORD *)v91 + 5);
        }
        *((_QWORD *)v91 + 5) = *v92;
        v92[2] = 0;
        v93 = v92 + 2;
        *v92 = 0;
        v92[1] = 0;
        v94 = *((_QWORD *)&v192 + 1);
        if (*((_QWORD *)&v192 + 1))
        {
          v94 = **((_QWORD **)&v192 + 1);
          if (**((_QWORD **)&v192 + 1))
          {
            v177 = *(_QWORD **)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v178 = v177[3];
            v177 += 3;
            *(v93 - 2) = v178;
            *(v93 - 1) = (uint64_t)v177;
            *v177 = v93 - 2;
            *(_QWORD *)(v178 + 8) = v93 - 2;
          }
        }
        *v93 = v94;
      }
      else
      {
        v93 = 0;
      }
      *v90 = a6;
      v90[1] = a7;
      v95 = v89 + 48 * v88;
      v96 = v205;
      *(_QWORD *)(v95 + 40) = 0;
      v97 = (_QWORD *)(v95 + 40);
      *(_OWORD *)(v97 - 3) = v96;
      *(v97 - 1) = v206;
      if (v93)
      {
        v98 = v93 - 2;
        v99 = *(_QWORD *)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v100 = *(_QWORD *)(v99 + 40);
        if (!v100)
        {
          JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v81, v82, v83, v84, v85, v86, v87);
          v100 = *(_QWORD *)(v99 + 40);
        }
        *(_QWORD *)(v99 + 40) = *(_QWORD *)v100;
        *(_QWORD *)(v100 + 16) = 0;
        v101 = (_QWORD *)(v100 + 16);
        *(_QWORD *)v100 = 0;
        *(_QWORD *)(v100 + 8) = 0;
        *v97 = v100 + 16;
        v102 = *v93;
        if ((*v93 != 0) != (*(_QWORD *)(v100 + 16) != 0))
        {
          if (v102)
          {
            v103 = *(unint64_t **)((v100 & 0xFFFFFFFFFFFFF000) + 0x10);
            v104 = v103[3];
            v103 += 3;
            *(_QWORD *)v100 = v104;
            *(_QWORD *)(v100 + 8) = v103;
            *v103 = v100;
            *(_QWORD *)(v104 + 8) = v100;
          }
          else
          {
            v176 = *(_QWORD *)v100;
            v175 = *(_QWORD **)(v100 + 8);
            *v175 = *(_QWORD *)v100;
            *(_QWORD *)(v176 + 8) = v175;
            *(_QWORD *)v100 = 0;
            *(_QWORD *)(v100 + 8) = 0;
            v101 = (_QWORD *)*v97;
          }
        }
        *v101 = v102;
        v105 = *(_QWORD *)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v106 = (uint64_t *)*(v93 - 1);
        if (v106)
        {
          v107 = *v98;
          *v106 = *v98;
          *(_QWORD *)(v107 + 8) = v106;
          *v98 = 0;
          *(v93 - 1) = 0;
        }
        *v98 = *(_QWORD *)(v105 + 40);
        *(_QWORD *)(v105 + 40) = v98;
      }
      ++*(_DWORD *)(a2 + 68);
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
  if (*((_QWORD *)&v192 + 1))
  {
    v157 = (uint64_t *)(*((_QWORD *)&v192 + 1) - 16);
    v158 = *(_QWORD *)(((*((_QWORD *)&v192 + 1) - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v159 = *(uint64_t **)(*((_QWORD *)&v192 + 1) - 8);
    if (v159)
    {
      v160 = *v157;
      *v159 = *v157;
      *(_QWORD *)(v160 + 8) = v159;
      *v157 = 0;
      v157[1] = 0;
    }
    *v157 = *(_QWORD *)(v158 + 40);
    *(_QWORD *)(v158 + 40) = v157;
  }
LABEL_81:
  if (v198)
  {
    v129 = v198 - 2;
    v130 = *(_QWORD *)(((unint64_t)(v198 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v131 = (uint64_t *)*(v198 - 1);
    if (v131)
    {
      v132 = *v129;
      *v131 = *v129;
      *(_QWORD *)(v132 + 8) = v131;
      *v129 = 0;
      v129[1] = 0;
    }
    *v129 = *(_QWORD *)(v130 + 40);
    *(_QWORD *)(v130 + 40) = v129;
  }
  if (v202)
  {
    v133 = v202 - 2;
    v134 = *(_QWORD *)(((unint64_t)(v202 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v135 = (uint64_t *)*(v202 - 1);
    if (v135)
    {
      v136 = *v133;
      *v135 = *v133;
      *(_QWORD *)(v136 + 8) = v135;
      *v133 = 0;
      v133[1] = 0;
    }
    *v133 = *(_QWORD *)(v134 + 40);
    *(_QWORD *)(v134 + 40) = v133;
  }
}

_QWORD **JSC::Wasm::ConstExprGenerator::addI32Add@<X0>(_QWORD **result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  JSC::HandleSet *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  JSC::HandleSet *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;

  if (*((_BYTE *)result + 8) != 1)
    goto LABEL_17;
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 1);
  v12 = *((_QWORD *)a3 + 3);
  if (v12)
  {
    v13 = *(JSC::HandleSet **)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = (_QWORD *)*((_QWORD *)v13 + 5);
    if (!v14)
    {
      v34 = a3;
      v35 = v13;
      v31 = a4;
      v30 = a2;
      v32 = *((_QWORD *)a3 + 1);
      v33 = *a3;
      JSC::HandleSet::grow(v13, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v33;
      v11 = v32;
      a3 = v34;
      v13 = v35;
      a2 = v30;
      a4 = v31;
      v14 = (_QWORD *)*((_QWORD *)v35 + 5);
    }
    *((_QWORD *)v13 + 5) = *v14;
    v14[2] = 0;
    v15 = v14 + 2;
    *v14 = 0;
    v14[1] = 0;
    v16 = (uint64_t *)*((_QWORD *)a3 + 3);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = *(_QWORD **)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v19 = v18[3];
        v18 += 3;
        *(v15 - 2) = v19;
        *(v15 - 1) = v18;
        *v18 = v15 - 2;
        *(_QWORD *)(v19 + 8) = v15 - 2;
      }
    }
    else
    {
      v17 = 0;
    }
    *v15 = v17;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = v11;
    else
      v21 = v17;
  }
  else
  {
    v15 = 0;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = *((_QWORD *)a3 + 1);
    else
      v21 = 0;
  }
  LOBYTE(v36) = 1;
  *((_QWORD *)&v36 + 1) = v21 + v20;
  v38 = 0;
  *(_QWORD *)(a4 + 16) = v37;
  *(_OWORD *)a4 = v36;
  result = JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(a4 + 24), &v38, (unint64_t)a3, a4, a5, a6, a7, a8);
  if (!v38)
  {
    if (!v15)
      goto LABEL_17;
    goto LABEL_21;
  }
  v22 = v38 - 2;
  v23 = *(_QWORD *)(((unint64_t)(v38 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v24 = (uint64_t *)*(v38 - 1);
  if (v24)
  {
    v25 = *v22;
    *v24 = *v22;
    *(_QWORD *)(v25 + 8) = v24;
    *v22 = 0;
    v22[1] = 0;
  }
  *v22 = *(_QWORD *)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v22;
  v38 = 0;
  if (v15)
  {
LABEL_21:
    v26 = v15 - 2;
    v27 = *(_QWORD *)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v28 = (uint64_t *)*(v15 - 1);
    if (v28)
    {
      v29 = *v26;
      *v28 = *v26;
      *(_QWORD *)(v29 + 8) = v28;
      *v26 = 0;
      *(v15 - 1) = 0;
    }
    *v26 = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;
  }
LABEL_17:
  *a9 = 0;
  a9[8] = 0;
  return result;
}

_QWORD **JSC::Wasm::ConstExprGenerator::addI32Sub@<X0>(_QWORD **result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  JSC::HandleSet *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  JSC::HandleSet *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;

  if (*((_BYTE *)result + 8) != 1)
    goto LABEL_17;
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 1);
  v12 = *((_QWORD *)a3 + 3);
  if (v12)
  {
    v13 = *(JSC::HandleSet **)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = (_QWORD *)*((_QWORD *)v13 + 5);
    if (!v14)
    {
      v34 = a3;
      v35 = v13;
      v31 = a4;
      v30 = a2;
      v32 = *((_QWORD *)a3 + 1);
      v33 = *a3;
      JSC::HandleSet::grow(v13, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v33;
      v11 = v32;
      a3 = v34;
      v13 = v35;
      a2 = v30;
      a4 = v31;
      v14 = (_QWORD *)*((_QWORD *)v35 + 5);
    }
    *((_QWORD *)v13 + 5) = *v14;
    v14[2] = 0;
    v15 = v14 + 2;
    *v14 = 0;
    v14[1] = 0;
    v16 = (uint64_t *)*((_QWORD *)a3 + 3);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = *(_QWORD **)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v19 = v18[3];
        v18 += 3;
        *(v15 - 2) = v19;
        *(v15 - 1) = v18;
        *v18 = v15 - 2;
        *(_QWORD *)(v19 + 8) = v15 - 2;
      }
    }
    else
    {
      v17 = 0;
    }
    *v15 = v17;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = v11;
    else
      v21 = v17;
  }
  else
  {
    v15 = 0;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = *((_QWORD *)a3 + 1);
    else
      v21 = 0;
  }
  LOBYTE(v36) = 1;
  *((_QWORD *)&v36 + 1) = v20 - v21;
  v38 = 0;
  *(_QWORD *)(a4 + 16) = v37;
  *(_OWORD *)a4 = v36;
  result = JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(a4 + 24), &v38, (unint64_t)a3, a4, a5, a6, a7, a8);
  if (!v38)
  {
    if (!v15)
      goto LABEL_17;
    goto LABEL_21;
  }
  v22 = v38 - 2;
  v23 = *(_QWORD *)(((unint64_t)(v38 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v24 = (uint64_t *)*(v38 - 1);
  if (v24)
  {
    v25 = *v22;
    *v24 = *v22;
    *(_QWORD *)(v25 + 8) = v24;
    *v22 = 0;
    v22[1] = 0;
  }
  *v22 = *(_QWORD *)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v22;
  v38 = 0;
  if (v15)
  {
LABEL_21:
    v26 = v15 - 2;
    v27 = *(_QWORD *)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v28 = (uint64_t *)*(v15 - 1);
    if (v28)
    {
      v29 = *v26;
      *v28 = *v26;
      *(_QWORD *)(v29 + 8) = v28;
      *v26 = 0;
      *(v15 - 1) = 0;
    }
    *v26 = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;
  }
LABEL_17:
  *a9 = 0;
  a9[8] = 0;
  return result;
}

_QWORD **JSC::Wasm::ConstExprGenerator::addI32Mul@<X0>(_QWORD **result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  JSC::HandleSet *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  JSC::HandleSet *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;

  if (*((_BYTE *)result + 8) != 1)
    goto LABEL_17;
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 1);
  v12 = *((_QWORD *)a3 + 3);
  if (v12)
  {
    v13 = *(JSC::HandleSet **)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = (_QWORD *)*((_QWORD *)v13 + 5);
    if (!v14)
    {
      v34 = a3;
      v35 = v13;
      v31 = a4;
      v30 = a2;
      v32 = *((_QWORD *)a3 + 1);
      v33 = *a3;
      JSC::HandleSet::grow(v13, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v33;
      v11 = v32;
      a3 = v34;
      v13 = v35;
      a2 = v30;
      a4 = v31;
      v14 = (_QWORD *)*((_QWORD *)v35 + 5);
    }
    *((_QWORD *)v13 + 5) = *v14;
    v14[2] = 0;
    v15 = v14 + 2;
    *v14 = 0;
    v14[1] = 0;
    v16 = (uint64_t *)*((_QWORD *)a3 + 3);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = *(_QWORD **)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v19 = v18[3];
        v18 += 3;
        *(v15 - 2) = v19;
        *(v15 - 1) = v18;
        *v18 = v15 - 2;
        *(_QWORD *)(v19 + 8) = v15 - 2;
      }
    }
    else
    {
      v17 = 0;
    }
    *v15 = v17;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = v11;
    else
      v21 = v17;
  }
  else
  {
    v15 = 0;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = *((_QWORD *)a3 + 1);
    else
      v21 = 0;
  }
  LOBYTE(v36) = 1;
  *((_QWORD *)&v36 + 1) = v21 * v20;
  v38 = 0;
  *(_QWORD *)(a4 + 16) = v37;
  *(_OWORD *)a4 = v36;
  result = JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(a4 + 24), &v38, (unint64_t)a3, a4, a5, a6, a7, a8);
  if (!v38)
  {
    if (!v15)
      goto LABEL_17;
    goto LABEL_21;
  }
  v22 = v38 - 2;
  v23 = *(_QWORD *)(((unint64_t)(v38 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v24 = (uint64_t *)*(v38 - 1);
  if (v24)
  {
    v25 = *v22;
    *v24 = *v22;
    *(_QWORD *)(v25 + 8) = v24;
    *v22 = 0;
    v22[1] = 0;
  }
  *v22 = *(_QWORD *)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v22;
  v38 = 0;
  if (v15)
  {
LABEL_21:
    v26 = v15 - 2;
    v27 = *(_QWORD *)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v28 = (uint64_t *)*(v15 - 1);
    if (v28)
    {
      v29 = *v26;
      *v28 = *v26;
      *(_QWORD *)(v29 + 8) = v28;
      *v26 = 0;
      *(v15 - 1) = 0;
    }
    *v26 = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;
  }
LABEL_17:
  *a9 = 0;
  a9[8] = 0;
  return result;
}

void JSC::Wasm::ConstExprGenerator::addI32And(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Or(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Xor(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Shl(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32ShrU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32ShrS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Rotr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Rotl(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Eq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Ne(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32LtS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32LeS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32LtU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32LeU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32GtS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32GeS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32GtU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32GeU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

_QWORD **JSC::Wasm::ConstExprGenerator::addI64Add@<X0>(_QWORD **result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  JSC::HandleSet *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  JSC::HandleSet *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;

  if (*((_BYTE *)result + 8) != 1)
    goto LABEL_17;
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 1);
  v12 = *((_QWORD *)a3 + 3);
  if (v12)
  {
    v13 = *(JSC::HandleSet **)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = (_QWORD *)*((_QWORD *)v13 + 5);
    if (!v14)
    {
      v34 = a3;
      v35 = v13;
      v31 = a4;
      v30 = a2;
      v32 = *((_QWORD *)a3 + 1);
      v33 = *a3;
      JSC::HandleSet::grow(v13, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v33;
      v11 = v32;
      a3 = v34;
      v13 = v35;
      a2 = v30;
      a4 = v31;
      v14 = (_QWORD *)*((_QWORD *)v35 + 5);
    }
    *((_QWORD *)v13 + 5) = *v14;
    v14[2] = 0;
    v15 = v14 + 2;
    *v14 = 0;
    v14[1] = 0;
    v16 = (uint64_t *)*((_QWORD *)a3 + 3);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = *(_QWORD **)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v19 = v18[3];
        v18 += 3;
        *(v15 - 2) = v19;
        *(v15 - 1) = v18;
        *v18 = v15 - 2;
        *(_QWORD *)(v19 + 8) = v15 - 2;
      }
    }
    else
    {
      v17 = 0;
    }
    *v15 = v17;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = v11;
    else
      v21 = v17;
  }
  else
  {
    v15 = 0;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = *((_QWORD *)a3 + 1);
    else
      v21 = 0;
  }
  LOBYTE(v36) = 1;
  *((_QWORD *)&v36 + 1) = v21 + v20;
  v38 = 0;
  *(_QWORD *)(a4 + 16) = v37;
  *(_OWORD *)a4 = v36;
  result = JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(a4 + 24), &v38, (unint64_t)a3, a4, a5, a6, a7, a8);
  if (!v38)
  {
    if (!v15)
      goto LABEL_17;
    goto LABEL_21;
  }
  v22 = v38 - 2;
  v23 = *(_QWORD *)(((unint64_t)(v38 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v24 = (uint64_t *)*(v38 - 1);
  if (v24)
  {
    v25 = *v22;
    *v24 = *v22;
    *(_QWORD *)(v25 + 8) = v24;
    *v22 = 0;
    v22[1] = 0;
  }
  *v22 = *(_QWORD *)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v22;
  v38 = 0;
  if (v15)
  {
LABEL_21:
    v26 = v15 - 2;
    v27 = *(_QWORD *)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v28 = (uint64_t *)*(v15 - 1);
    if (v28)
    {
      v29 = *v26;
      *v28 = *v26;
      *(_QWORD *)(v29 + 8) = v28;
      *v26 = 0;
      *(v15 - 1) = 0;
    }
    *v26 = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;
  }
LABEL_17:
  *a9 = 0;
  a9[8] = 0;
  return result;
}

_QWORD **JSC::Wasm::ConstExprGenerator::addI64Sub@<X0>(_QWORD **result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  JSC::HandleSet *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  JSC::HandleSet *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;

  if (*((_BYTE *)result + 8) != 1)
    goto LABEL_17;
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 1);
  v12 = *((_QWORD *)a3 + 3);
  if (v12)
  {
    v13 = *(JSC::HandleSet **)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = (_QWORD *)*((_QWORD *)v13 + 5);
    if (!v14)
    {
      v34 = a3;
      v35 = v13;
      v31 = a4;
      v30 = a2;
      v32 = *((_QWORD *)a3 + 1);
      v33 = *a3;
      JSC::HandleSet::grow(v13, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v33;
      v11 = v32;
      a3 = v34;
      v13 = v35;
      a2 = v30;
      a4 = v31;
      v14 = (_QWORD *)*((_QWORD *)v35 + 5);
    }
    *((_QWORD *)v13 + 5) = *v14;
    v14[2] = 0;
    v15 = v14 + 2;
    *v14 = 0;
    v14[1] = 0;
    v16 = (uint64_t *)*((_QWORD *)a3 + 3);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = *(_QWORD **)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v19 = v18[3];
        v18 += 3;
        *(v15 - 2) = v19;
        *(v15 - 1) = v18;
        *v18 = v15 - 2;
        *(_QWORD *)(v19 + 8) = v15 - 2;
      }
    }
    else
    {
      v17 = 0;
    }
    *v15 = v17;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = v11;
    else
      v21 = v17;
  }
  else
  {
    v15 = 0;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = *((_QWORD *)a3 + 1);
    else
      v21 = 0;
  }
  LOBYTE(v36) = 1;
  *((_QWORD *)&v36 + 1) = v20 - v21;
  v38 = 0;
  *(_QWORD *)(a4 + 16) = v37;
  *(_OWORD *)a4 = v36;
  result = JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(a4 + 24), &v38, (unint64_t)a3, a4, a5, a6, a7, a8);
  if (!v38)
  {
    if (!v15)
      goto LABEL_17;
    goto LABEL_21;
  }
  v22 = v38 - 2;
  v23 = *(_QWORD *)(((unint64_t)(v38 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v24 = (uint64_t *)*(v38 - 1);
  if (v24)
  {
    v25 = *v22;
    *v24 = *v22;
    *(_QWORD *)(v25 + 8) = v24;
    *v22 = 0;
    v22[1] = 0;
  }
  *v22 = *(_QWORD *)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v22;
  v38 = 0;
  if (v15)
  {
LABEL_21:
    v26 = v15 - 2;
    v27 = *(_QWORD *)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v28 = (uint64_t *)*(v15 - 1);
    if (v28)
    {
      v29 = *v26;
      *v28 = *v26;
      *(_QWORD *)(v29 + 8) = v28;
      *v26 = 0;
      *(v15 - 1) = 0;
    }
    *v26 = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;
  }
LABEL_17:
  *a9 = 0;
  a9[8] = 0;
  return result;
}

_QWORD **JSC::Wasm::ConstExprGenerator::addI64Mul@<X0>(_QWORD **result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  JSC::HandleSet *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  JSC::HandleSet *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;

  if (*((_BYTE *)result + 8) != 1)
    goto LABEL_17;
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 1);
  v12 = *((_QWORD *)a3 + 3);
  if (v12)
  {
    v13 = *(JSC::HandleSet **)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = (_QWORD *)*((_QWORD *)v13 + 5);
    if (!v14)
    {
      v34 = a3;
      v35 = v13;
      v31 = a4;
      v30 = a2;
      v32 = *((_QWORD *)a3 + 1);
      v33 = *a3;
      JSC::HandleSet::grow(v13, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v33;
      v11 = v32;
      a3 = v34;
      v13 = v35;
      a2 = v30;
      a4 = v31;
      v14 = (_QWORD *)*((_QWORD *)v35 + 5);
    }
    *((_QWORD *)v13 + 5) = *v14;
    v14[2] = 0;
    v15 = v14 + 2;
    *v14 = 0;
    v14[1] = 0;
    v16 = (uint64_t *)*((_QWORD *)a3 + 3);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = *(_QWORD **)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v19 = v18[3];
        v18 += 3;
        *(v15 - 2) = v19;
        *(v15 - 1) = v18;
        *v18 = v15 - 2;
        *(_QWORD *)(v19 + 8) = v15 - 2;
      }
    }
    else
    {
      v17 = 0;
    }
    *v15 = v17;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = v11;
    else
      v21 = v17;
  }
  else
  {
    v15 = 0;
    v20 = *(_QWORD *)(a2 + 8);
    if (v10 == 1)
      v21 = *((_QWORD *)a3 + 1);
    else
      v21 = 0;
  }
  LOBYTE(v36) = 1;
  *((_QWORD *)&v36 + 1) = v21 * v20;
  v38 = 0;
  *(_QWORD *)(a4 + 16) = v37;
  *(_OWORD *)a4 = v36;
  result = JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(a4 + 24), &v38, (unint64_t)a3, a4, a5, a6, a7, a8);
  if (!v38)
  {
    if (!v15)
      goto LABEL_17;
    goto LABEL_21;
  }
  v22 = v38 - 2;
  v23 = *(_QWORD *)(((unint64_t)(v38 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v24 = (uint64_t *)*(v38 - 1);
  if (v24)
  {
    v25 = *v22;
    *v24 = *v22;
    *(_QWORD *)(v25 + 8) = v24;
    *v22 = 0;
    v22[1] = 0;
  }
  *v22 = *(_QWORD *)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v22;
  v38 = 0;
  if (v15)
  {
LABEL_21:
    v26 = v15 - 2;
    v27 = *(_QWORD *)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v28 = (uint64_t *)*(v15 - 1);
    if (v28)
    {
      v29 = *v26;
      *v28 = *v26;
      *(_QWORD *)(v29 + 8) = v28;
      *v26 = 0;
      *(v15 - 1) = 0;
    }
    *v26 = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;
  }
LABEL_17:
  *a9 = 0;
  a9[8] = 0;
  return result;
}

void JSC::Wasm::ConstExprGenerator::addI64And(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Or(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Xor(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Shl(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64ShrU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64ShrS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Rotr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Rotl(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Eq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Ne(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64LtS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64LeS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64LtU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64LeU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64GtS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64GeS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64GtU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64GeU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Add(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Sub(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Mul(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Div(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Min(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Max(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Copysign(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Eq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Ne(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Lt(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Le(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Gt(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Ge(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Add(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Sub(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Mul(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Div(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Min(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Max(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Copysign(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Eq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Ne(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Lt(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Le(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Gt(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Ge(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32DivS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32DivU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32RemS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32RemU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64DivS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64DivU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64RemS(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64RemU(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::unaryCase(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10, unsigned __int8 a11, uint64_t a12)
{
  void (*v17)(__int128 *__return_ptr, _QWORD *, __int128 *, __int128 *);
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::HandleSet *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  WTF::AtomStringImpl *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  JSC::HandleSet *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  JSC::HandleSet *v115;
  __int128 v116;
  uint64_t v117;
  _QWORD *v118;
  WTF::StringImpl *v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t *v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _QWORD *v127;
  char v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;

  *(_QWORD *)&v129 = a6;
  *((_QWORD *)&v129 + 1) = a7;
  v128 = a3;
  v124 = JSC::Wasm::Types::Void;
  LOBYTE(v125) = 1;
  *((_QWORD *)&v125 + 1) = 0;
  v127 = 0;
  if (!*(_DWORD *)(a2 + 68))
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, &v120, a10);
    *(_QWORD *)a1 = v120;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_54;
  }
  v17 = (void (*)(__int128 *__return_ptr, _QWORD *, __int128 *, __int128 *))a4;
  v18 = (uint64_t *)(a2 + 56);
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v120, a2 + 56, a3, a4, a5, a6, a7, a8);
  v124 = v120;
  v125 = v121;
  v126 = v122;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v127, &v123, v19, v20, v21, v22, v23, v24);
  if (v123)
  {
    v89 = v123 - 2;
    v90 = *(_QWORD *)(((unint64_t)(v123 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v91 = (uint64_t *)*(v123 - 1);
    if (v91)
    {
      v92 = *v89;
      *v91 = *v89;
      *(_QWORD *)(v92 + 8) = v91;
      *v89 = 0;
      v89[1] = 0;
    }
    *v89 = *(_QWORD *)(v90 + 40);
    *(_QWORD *)(v90 + 40) = v89;
  }
  if (v127)
  {
    v32 = *(JSC::HandleSet **)(((unint64_t)(v127 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v33 = (_QWORD *)*((_QWORD *)v32 + 5);
    if (!v33)
    {
      v115 = *(JSC::HandleSet **)(((unint64_t)(v127 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      JSC::HandleSet::grow(v32, v25, v26, v27, v28, v29, v30, v31);
      v32 = v115;
      v33 = (_QWORD *)*((_QWORD *)v115 + 5);
    }
    *((_QWORD *)v32 + 5) = *v33;
    v33[2] = 0;
    v34 = v33 + 2;
    *v33 = 0;
    v33[1] = 0;
    v35 = v127;
    if (v127)
    {
      v35 = (_QWORD *)*v127;
      if (*v127)
      {
        v106 = *(_QWORD **)(((unint64_t)(v34 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v107 = v106[3];
        v106 += 3;
        *(v34 - 2) = v107;
        *(v34 - 1) = v106;
        *v106 = v34 - 2;
        *(_QWORD *)(v107 + 8) = v34 - 2;
      }
    }
    *v34 = v35;
  }
  else
  {
    v34 = 0;
  }
  *(_QWORD *)&v120 = "WasmFunctionParser.h:";
  DWORD2(v120) = 21;
  LODWORD(v130) = 538;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v120, (unsigned int *)&v130, (int **)&v119);
  v43 = v119;
  if (!v119)
  {
    __break(0xC471u);
    return;
  }
  v119 = 0;
  if (*(_DWORD *)v43 == 2)
  {
    WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v43 -= 2;
  }
  if (v34)
  {
    v93 = v34 - 2;
    v94 = *(_QWORD *)(((unint64_t)(v34 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v95 = (uint64_t *)*(v34 - 1);
    if (v95)
    {
      v96 = *v93;
      *v95 = *v93;
      *(_QWORD *)(v96 + 8) = v95;
      *v93 = 0;
      *(v34 - 1) = 0;
    }
    *v93 = *(_QWORD *)(v94 + 40);
    *(_QWORD *)(v94 + 40) = v93;
  }
  if (v124 == a11)
  {
    if (a11 - 239 < 2 || a11 == 227)
    {
      if (a12 == *((_QWORD *)&v124 + 1))
        v44 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
      else
        v44 = 0;
      if ((v44 & 1) == 0)
        goto LABEL_79;
    }
    else
    {
      if (a12 == *((_QWORD *)&v124 + 1))
        v105 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
      else
        v105 = 1;
      if (v105 == 1)
        goto LABEL_79;
    }
    LOBYTE(v120) = 1;
    *((_QWORD *)&v120 + 1) = 0;
    *((_QWORD *)&v121 + 1) = 0;
    v45 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
    if ((a5 & 1) != 0)
      v17 = *(void (**)(__int128 *__return_ptr, _QWORD *, __int128 *, __int128 *))(*v45 + v17);
    v116 = v125;
    v117 = v126;
    v118 = 0;
    if (v127)
    {
      v46 = *(_QWORD *)(((unint64_t)(v127 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v47 = *(_QWORD **)(v46 + 40);
      if (!v47)
      {
        v110 = v45;
        JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v127 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v36, v37, v38, v39, v40, v41, v42);
        v45 = v110;
        v47 = *(_QWORD **)(v46 + 40);
      }
      *(_QWORD *)(v46 + 40) = *v47;
      v47[2] = 0;
      v48 = v47 + 2;
      *v47 = 0;
      v47[1] = 0;
      v118 = v47 + 2;
      v49 = v127;
      if (v127)
      {
        v49 = (_QWORD *)*v127;
        if (*v127)
        {
          v108 = *(_QWORD **)(((unint64_t)(v48 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v109 = v108[3];
          v108 += 3;
          *(v48 - 2) = v109;
          *(v48 - 1) = v108;
          *v108 = v48 - 2;
          *(_QWORD *)(v109 + 8) = v48 - 2;
        }
      }
      *v48 = v49;
    }
    v17(&v130, v45, &v116, &v120);
    if (v118)
    {
      v97 = v118 - 2;
      v98 = *(_QWORD *)(((unint64_t)(v118 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v99 = (uint64_t *)*(v118 - 1);
      if (v99)
      {
        v100 = *v97;
        *v99 = *v97;
        *(_QWORD *)(v100 + 8) = v99;
        *v97 = 0;
        v97[1] = 0;
      }
      *v97 = *(_QWORD *)(v98 + 40);
      *(_QWORD *)(v98 + 40) = v97;
      v118 = 0;
    }
    if (BYTE8(v130))
    {
      *(_QWORD *)a1 = v130;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      v57 = *(_DWORD *)(a2 + 68);
      if (v57 == *(_DWORD *)(a2 + 64))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::ConstExprGenerator::ConstExprValue&>(a2 + 56, &v129, (unint64_t)&v120, v52, v53, v54, v55, v56);
      }
      else
      {
        v58 = *v18;
        v59 = (uint64_t *)(*v18 + 48 * v57);
        v130 = v120;
        v131 = v121;
        if (*((_QWORD *)&v121 + 1))
        {
          v60 = *(JSC::HandleSet **)(((*((_QWORD *)&v121 + 1) - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v61 = (_QWORD *)*((_QWORD *)v60 + 5);
          if (!v61)
          {
            JSC::HandleSet::grow(v60, v50, v51, v52, v53, v54, v55, v56);
            v61 = (_QWORD *)*((_QWORD *)v60 + 5);
          }
          *((_QWORD *)v60 + 5) = *v61;
          v61[2] = 0;
          v62 = v61 + 2;
          *v61 = 0;
          v61[1] = 0;
          v63 = *((_QWORD *)&v121 + 1);
          if (*((_QWORD *)&v121 + 1))
          {
            v63 = **((_QWORD **)&v121 + 1);
            if (**((_QWORD **)&v121 + 1))
            {
              v113 = *(_QWORD **)(((unint64_t)(v62 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v114 = v113[3];
              v113 += 3;
              *(v62 - 2) = v114;
              *(v62 - 1) = (uint64_t)v113;
              *v113 = v62 - 2;
              *(_QWORD *)(v114 + 8) = v62 - 2;
            }
          }
          *v62 = v63;
        }
        else
        {
          v62 = 0;
        }
        *v59 = a6;
        v59[1] = a7;
        v64 = v58 + 48 * v57;
        v65 = v130;
        *(_QWORD *)(v64 + 40) = 0;
        v66 = (_QWORD *)(v64 + 40);
        *(_OWORD *)(v66 - 3) = v65;
        *(v66 - 1) = v131;
        if (v62)
        {
          v67 = v62 - 2;
          v68 = *(_QWORD *)(((unint64_t)(v62 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v69 = *(_QWORD *)(v68 + 40);
          if (!v69)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v62 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v50, v51, v52, v53, v54, v55, v56);
            v69 = *(_QWORD *)(v68 + 40);
          }
          *(_QWORD *)(v68 + 40) = *(_QWORD *)v69;
          *(_QWORD *)(v69 + 16) = 0;
          v70 = (_QWORD *)(v69 + 16);
          *(_QWORD *)v69 = 0;
          *(_QWORD *)(v69 + 8) = 0;
          *v66 = v69 + 16;
          v71 = *v62;
          if ((*v62 != 0) != (*(_QWORD *)(v69 + 16) != 0))
          {
            if (v71)
            {
              v72 = *(unint64_t **)((v69 & 0xFFFFFFFFFFFFF000) + 0x10);
              v73 = v72[3];
              v72 += 3;
              *(_QWORD *)v69 = v73;
              *(_QWORD *)(v69 + 8) = v72;
              *v72 = v69;
              *(_QWORD *)(v73 + 8) = v69;
            }
            else
            {
              v112 = *(_QWORD *)v69;
              v111 = *(_QWORD **)(v69 + 8);
              *v111 = *(_QWORD *)v69;
              *(_QWORD *)(v112 + 8) = v111;
              *(_QWORD *)v69 = 0;
              *(_QWORD *)(v69 + 8) = 0;
              v70 = (_QWORD *)*v66;
            }
          }
          *v70 = v71;
          v74 = *(_QWORD *)(((unint64_t)(v62 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v75 = (uint64_t *)*(v62 - 1);
          if (v75)
          {
            v76 = *v67;
            *v75 = *v67;
            *(_QWORD *)(v76 + 8) = v75;
            *v67 = 0;
            *(v62 - 1) = 0;
          }
          *v67 = *(_QWORD *)(v74 + 40);
          *(_QWORD *)(v74 + 40) = v67;
        }
        ++*(_DWORD *)(a2 + 68);
      }
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
    }
    if (*((_QWORD *)&v121 + 1))
    {
      v101 = (uint64_t *)(*((_QWORD *)&v121 + 1) - 16);
      v102 = *(_QWORD *)(((*((_QWORD *)&v121 + 1) - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v103 = *(uint64_t **)(*((_QWORD *)&v121 + 1) - 8);
      if (v103)
      {
        v104 = *v101;
        *v103 = *v101;
        *(_QWORD *)(v104 + 8) = v103;
        *v101 = 0;
        v101[1] = 0;
      }
      *v101 = *(_QWORD *)(v102 + 40);
      *(_QWORD *)(v102 + 40) = v101;
    }
    goto LABEL_54;
  }
LABEL_79:
  *(_QWORD *)&v120 = " value type mismatch";
  *((_QWORD *)&v120 + 1) = 21;
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v130, (uint64_t)&v128, (uint64_t)&v120);
  *(_QWORD *)a1 = v130;
  *(_BYTE *)(a1 + 8) = 1;
LABEL_54:
  if (v127)
  {
    v85 = v127 - 2;
    v86 = *(_QWORD *)(((unint64_t)(v127 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v87 = (uint64_t *)*(v127 - 1);
    if (v87)
    {
      v88 = *v85;
      *v87 = *v85;
      *(_QWORD *)(v88 + 8) = v87;
      *v85 = 0;
      v85[1] = 0;
    }
    *v85 = *(_QWORD *)(v86 + 40);
    *(_QWORD *)(v86 + 40) = v85;
  }
}

void JSC::Wasm::ConstExprGenerator::addI32Clz(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Eqz(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Clz(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Eqz(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Abs(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Neg(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Ceil(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Floor(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Sqrt(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Abs(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Neg(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Ceil(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Floor(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Sqrt(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32WrapI64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64ExtendSI32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64ExtendUI32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32ConvertSI32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32ConvertUI32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32ConvertSI64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32DemoteF64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32ReinterpretI32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64ConvertSI32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64ConvertUI32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64ConvertSI64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64PromoteF32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64ReinterpretI64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32ReinterpretF32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64ReinterpretF64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Extend8S(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Extend16S(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Extend8S(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Extend16S(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Extend32S(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Ctz(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32Popcnt(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Ctz(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64Popcnt(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Trunc(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32Nearest(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Trunc(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64Nearest(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32TruncSF32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32TruncSF64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32TruncUF32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI32TruncUF64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64TruncSF32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64TruncSF64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64TruncUF32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addI64TruncUF64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF32ConvertUI64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

void JSC::Wasm::ConstExprGenerator::addF64ConvertUI64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 8) = 1;
}

uint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  JSC::HandleSet *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  JSC::HandleSet *v28;
  _QWORD **v29;
  uint64_t v30;
  uint64_t v31;

  v8 = *(unsigned int *)(a2 + 12) - 1;
  v9 = *(_QWORD *)a2 + 48 * v8;
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)result = *(_OWORD *)v9;
  *(_OWORD *)(result + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  v14 = *(_QWORD *)(v9 + 40);
  v12 = (_QWORD **)(v9 + 40);
  v13 = v14;
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  if (v14)
  {
    v15 = *(JSC::HandleSet **)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v16 = *((_QWORD *)v15 + 5);
    if (!v16)
    {
      v31 = result;
      v29 = v12;
      v30 = a2;
      v28 = v15;
      JSC::HandleSet::grow(v15, a2, a3, a4, a5, a6, a7, a8);
      v15 = v28;
      v12 = v29;
      result = v31;
      a2 = v30;
      v16 = *((_QWORD *)v28 + 5);
    }
    *((_QWORD *)v15 + 5) = *(_QWORD *)v16;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(result + 40) = v16 + 16;
    v17 = *v12;
    if (v17)
    {
      v17 = (_QWORD *)*v17;
      if (v17)
      {
        v26 = *(unint64_t **)((v16 & 0xFFFFFFFFFFFFF000) + 0x10);
        v27 = v26[3];
        v26 += 3;
        *(_QWORD *)v16 = v27;
        *(_QWORD *)(v16 + 8) = v26;
        *v26 = v16;
        *(_QWORD *)(v27 + 8) = v16;
      }
    }
    *(_QWORD *)(v16 + 16) = v17;
    v8 = *(unsigned int *)(a2 + 12) - 1;
    v18 = *(_QWORD *)a2 + 48 * v8;
    v21 = *(_QWORD *)(v18 + 40);
    v19 = (_QWORD *)(v18 + 40);
    v20 = v21;
    if (v21)
    {
      v22 = (uint64_t *)(v20 - 16);
      v23 = *(_QWORD *)(((v20 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v24 = *(uint64_t **)(v20 - 8);
      if (v24)
      {
        v25 = *v22;
        *v24 = *v22;
        *(_QWORD *)(v25 + 8) = v24;
        *v22 = 0;
        v22[1] = 0;
      }
      *v22 = *(_QWORD *)(v23 + 40);
      *(_QWORD *)(v23 + 40) = v22;
      *v19 = 0;
    }
  }
  *(_DWORD *)(a2 + 12) = v8;
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, unsigned __int8 *a4, double a5, float a6)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  double v21;
  float v22;
  WTF *v23;
  WTF::PrintStream *v24;
  float v25;
  double v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  const WTF::String *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  char v71;
  void (**v72)(WTF::StringPrintStream *__hidden);
  WTF *v73;
  __int128 v74;
  _BYTE v75[128];
  void (**v76)(WTF::StringPrintStream *__hidden);
  WTF *v77;
  __int128 v78;
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v72 = off_1E3572250;
  v73 = (WTF *)v75;
  v74 = xmmword_199122F80;
  v75[0] = 0;
  v76 = off_1E3572250;
  v77 = (WTF *)v79;
  v78 = xmmword_199122F80;
  v79[0] = 0;
  if (*(_QWORD *)a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (!v10)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v11, (uint64_t)&v69, a6);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v69 = (WTF::StringImpl *)v12;
    v70 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v76, "StringView", &v69);
  if (v70 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v70])(&v68, &v69);
  v76[5]((WTF::StringPrintStream *)&v76);
  v76[5]((WTF::StringPrintStream *)&v76);
  v20 = v77;
  if (!v77)
  {
    v69 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v77, v78, (uint64_t *)&v69);
  v20 = v77;
  if (v77 != (WTF *)v79)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v68, a2, a4, v21, v22);
  v23 = (WTF *)((uint64_t (*)(_QWORD))v72[4])(&v72);
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v23 + 32))(v23);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v76, v25);
  WTF::printExpectedCStringHelper(v24, "StringView", &v76);
  if ((_DWORD)v77 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v77])(&v71, &v76);
  v26 = (*(double (**)(WTF *))(*(_QWORD *)v23 + 40))(v23);
  WTF::printInternal(v23, (WTF::PrintStream *)&v69, v27, v28, v29, v30, v31, v32, v26, v33);
  WTF::printInternal(v23, (WTF::PrintStream *)&v68, v34, v35, v36, v37, v38, v39, v40, v41);
  v72[5]((WTF::StringPrintStream *)&v72);
  v49 = v68;
  v68 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v69;
  v69 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = v73;
  if (v73)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v73, v74, (uint64_t *)&v76);
    v51 = v73;
    *a1 = v76;
    if (v51 == (WTF *)v75)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v51, v42, v43, v44, v45, v46, v47, v48);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::load(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  WTF::AtomStringImpl *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  void (**v61)(WTF::StringPrintStream *__hidden);
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v91;
  _OWORD v92[2];
  uint64_t v93;
  uint64_t *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _QWORD *v98;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 26480) + 104) == -1)
  {
    *(_QWORD *)&v95 = "load instruction without memory";
    *((_QWORD *)&v95 + 1) = 32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))v92, (uint64_t)&v95, a9, a10);
    *(_QWORD *)a1 = *(_QWORD *)&v92[0];
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v95 = JSC::Wasm::Types::Void;
  v12 = 1;
  LOBYTE(v96) = 1;
  *((_QWORD *)&v96 + 1) = 0;
  v98 = 0;
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)a2;
  v15 = v13 - *(_QWORD *)a2;
  if (v13 > *(_QWORD *)a2)
  {
    v16 = 0;
    v17 = 0;
    LODWORD(v18) = 0;
    v19 = *(_QWORD *)(a2 + 8);
    v20 = 5;
    if (v15 < 5)
      v20 = v13 - *(_QWORD *)a2;
    v21 = v20 - 1;
    *(_QWORD *)a2 = v14 + 1;
    while (1)
    {
      v22 = *(char *)(v19 + v14 + v16);
      LODWORD(v18) = ((v22 & 0x7F) << v17) | v18;
      if ((v22 & 0x80000000) == 0)
        break;
      if (v21 == v16)
        goto LABEL_65;
      *(_QWORD *)a2 = v14 + v16++ + 2;
      v17 += 7;
      if (v15 == v16)
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    if ((_DWORD)v16 != 4 || *(unsigned __int8 *)(v19 + v14 + v16) < 0x10u)
    {
      v12 = a2 + 26512;
      v23 = *(unsigned __int8 *)(a2 + 26512) - 40;
      if (v23 >= 0x17)
      {
        __break(0xC471u);
        JUMPOUT(0x198CB2858);
      }
      if (v18 > dword_19915A240[(char)v23])
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v18, " exceeds load's natural alignment ", 35, 1 << qword_19915A2A0[(char)v23], v92, a10);
        *(_QWORD *)a1 = *(_QWORD *)&v92[0];
        *(_BYTE *)(a1 + 8) = 1;
        goto LABEL_48;
      }
      if (v13 <= v14 + v16 + 1)
        goto LABEL_67;
      v18 = 0;
      v24 = ~v16 + v15;
      if (v24 >= 5)
        v24 = 5;
      v25 = v24 - 1;
      v26 = v14 + v16;
      *(_QWORD *)a2 = v14 + v16 + 2;
      v27 = v14 - v13 + v16;
      v28 = v19 + v14;
      while (1)
      {
        LODWORD(v19) = *(char *)(v28 + v18 + v16 + 1);
        if ((v19 & 0x80000000) == 0)
          break;
        if (v25 == v18)
          goto LABEL_67;
        v29 = v26 + v18;
        v30 = v27 + v18++;
        v19 = v29 + 3;
        *(_QWORD *)a2 = v19;
        if (v30 == -2)
          goto LABEL_20;
      }
LABEL_21:
      if ((_DWORD)v18 == 4 && v19 >= 0x10u)
      {
LABEL_67:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load offset", (unint64_t *)a2, 22, v92, a10);
        goto LABEL_46;
      }
      if (!*(_DWORD *)(a2 + 68))
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, v92, a10);
        goto LABEL_46;
      }
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)v92, a2 + 56, a3, a4, a5, a6, a7, a8);
      v95 = v92[0];
      v96 = v92[1];
      v97 = v93;
      JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v98, &v94, v31, v32, v33, v34, v35, v36);
      if (v94)
      {
        v82 = v94 - 2;
        v83 = *(_QWORD *)(((unint64_t)(v94 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v84 = (uint64_t *)*(v94 - 1);
        if (v84)
        {
          v85 = *v82;
          *v84 = *v82;
          *(_QWORD *)(v85 + 8) = v84;
          *v82 = 0;
          v82[1] = 0;
        }
        *v82 = *(_QWORD *)(v83 + 40);
        *(_QWORD *)(v83 + 40) = v82;
      }
      if (v98)
      {
        v44 = *(_QWORD *)(((unint64_t)(v98 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v45 = *(_QWORD **)(v44 + 40);
        if (!v45)
        {
          JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v98 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v37, v38, v39, v40, v41, v42, v43);
          v45 = *(_QWORD **)(v44 + 40);
        }
        *(_QWORD *)(v44 + 40) = *v45;
        v45[2] = 0;
        v46 = v45 + 2;
        *v45 = 0;
        v45[1] = 0;
        v47 = v98;
        if (v98)
        {
          v47 = (_QWORD *)*v98;
          if (*v98)
          {
            v86 = *(_QWORD **)(((unint64_t)(v46 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v87 = v86[3];
            v86 += 3;
            *(v46 - 2) = v87;
            *(v46 - 1) = v86;
            *v86 = v46 - 2;
            *(_QWORD *)(v87 + 8) = v46 - 2;
          }
        }
        *v46 = v47;
      }
      else
      {
        v46 = 0;
      }
      *(_QWORD *)&v92[0] = "WasmFunctionParser.h:";
      DWORD2(v92[0]) = 21;
      LODWORD(v90) = 559;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v92, (unsigned int *)&v90, (int **)&v91);
      v55 = v91;
      if (!v91)
      {
        __break(0xC471u);
        JUMPOUT(0x198CB2860);
      }
      v91 = 0;
      if (*(_DWORD *)v55 == 2)
      {
        WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
        if (!v46)
          goto LABEL_35;
      }
      else
      {
        *(_DWORD *)v55 -= 2;
        if (!v46)
        {
LABEL_35:
          if ((_BYTE)v95 != 0xFF)
          {
            *(_QWORD *)&v92[0] = " pointer type mismatch";
            *((_QWORD *)&v92[0] + 1) = 23;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v90, v12, (uint64_t)v92);
            v61 = v90;
            goto LABEL_47;
          }
          v56 = *(_QWORD *)(a2 + 48);
          if (v98)
          {
            v57 = *(_QWORD *)(((unint64_t)(v98 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v58 = *(_QWORD **)(v57 + 40);
            if (!v58)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v98 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v48, v49, v50, v51, v52, v53, v54);
              v58 = *(_QWORD **)(v57 + 40);
            }
            *(_QWORD *)(v57 + 40) = *v58;
            v58[2] = 0;
            v59 = v58 + 2;
            *v58 = 0;
            v58[1] = 0;
            v60 = v98;
            if (v98)
            {
              v60 = (_QWORD *)*v98;
              if (*v98)
              {
                v88 = *(_QWORD **)(((unint64_t)(v59 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v89 = v88[3];
                v88 += 3;
                *(v59 - 2) = v89;
                *(v59 - 1) = v88;
                *v88 = v59 - 2;
                *(_QWORD *)(v89 + 8) = v59 - 2;
              }
            }
            *v59 = v60;
            JSC::Wasm::ConstExprGenerator::fail<char const*>(v92, **(_QWORD **)v56, *(_QWORD *)(v56 + 16));
            v61 = *(void (***)(WTF::StringPrintStream *__hidden))&v92[0];
            v62 = v59 - 2;
            v63 = *(_QWORD *)(((unint64_t)(v59 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v64 = (uint64_t *)*(v59 - 1);
            if (v64)
            {
              v65 = *v62;
              *v64 = *v62;
              *(_QWORD *)(v65 + 8) = v64;
              *v62 = 0;
              *(v59 - 1) = 0;
            }
            *v62 = *(_QWORD *)(v63 + 40);
            *(_QWORD *)(v63 + 40) = v62;
            goto LABEL_47;
          }
          JSC::Wasm::ConstExprGenerator::fail<char const*>(v92, **(_QWORD **)v56, *(_QWORD *)(v56 + 16));
LABEL_46:
          v61 = *(void (***)(WTF::StringPrintStream *__hidden))&v92[0];
LABEL_47:
          *(_QWORD *)a1 = v61;
          *(_BYTE *)(a1 + 8) = 1;
          goto LABEL_48;
        }
      }
      v74 = v46 - 2;
      v75 = *(_QWORD *)(((unint64_t)(v46 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v76 = (uint64_t *)*(v46 - 1);
      if (v76)
      {
        v77 = *v74;
        *v76 = *v74;
        *(_QWORD *)(v77 + 8) = v76;
        *v74 = 0;
        *(v46 - 1) = 0;
      }
      *v74 = *(_QWORD *)(v75 + 40);
      *(_QWORD *)(v75 + 40) = v74;
      goto LABEL_35;
    }
  }
LABEL_65:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load alignment", (unint64_t *)a2, 25, v92, a10);
  *(_QWORD *)a1 = *(_QWORD *)&v92[0];
  *(_BYTE *)(a1 + 8) = 1;
LABEL_48:
  if (v98)
  {
    v78 = v98 - 2;
    v79 = *(_QWORD *)(((unint64_t)(v98 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v80 = (uint64_t *)*(v98 - 1);
    if (v80)
    {
      v81 = *v78;
      *v80 = *v78;
      *(_QWORD *)(v81 + 8) = v80;
      *v78 = 0;
      v78[1] = 0;
    }
    *v78 = *(_QWORD *)(v79 + 40);
    *(_QWORD *)(v79 + 40) = v78;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::store(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v10;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  WTF::AtomStringImpl *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  WTF::AtomStringImpl *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  void (**v95)(WTF::StringPrintStream *__hidden);
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char *v124;
  unint64_t *v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  unsigned int v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  void (**v159)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t *v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  _QWORD *v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  _QWORD *v173;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 26480) + 104) == -1)
  {
    *(_QWORD *)&v170 = "store instruction without memory";
    *((_QWORD *)&v170 + 1) = 33;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v166, (uint64_t)&v170, a9, a10);
    *(_QWORD *)a1 = v166;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v170 = JSC::Wasm::Types::Void;
  LOBYTE(v171) = 1;
  *((_QWORD *)&v171 + 1) = 0;
  v173 = 0;
  v166 = JSC::Wasm::Types::Void;
  LOBYTE(v167) = 1;
  *((_QWORD *)&v167 + 1) = 0;
  v169 = 0;
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)a2;
  v15 = v13 - *(_QWORD *)a2;
  if (v13 <= *(_QWORD *)a2)
    goto LABEL_116;
  v16 = a3;
  v17 = 0;
  v18 = 0;
  LODWORD(v19) = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v15 < 5)
    v21 = v13 - *(_QWORD *)a2;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v14 + 1;
  while (1)
  {
    v23 = *(char *)(v20 + v14 + v17);
    LODWORD(v19) = ((v23 & 0x7F) << v18) | v19;
    if ((v23 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_116;
    v24 = v14 + v17 + 2;
    *(_QWORD *)a2 = v24;
    ++v17;
    v18 += 7;
    if (v15 == v17)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v20 + v14 + v17) >= 0x10u)
  {
LABEL_116:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get store alignment", (unint64_t *)a2, 26, &v162, a10);
    *(_QWORD *)a1 = v162;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_75;
  }
  v24 = a2 + 26512;
  v25 = *(unsigned __int8 *)(a2 + 26512) - 40;
  if (v25 >= 0x17)
  {
    __break(0xC471u);
    goto LABEL_122;
  }
  if (v19 > dword_19915A240[(char)v25])
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " exceeds store's natural alignment ", 36, 1 << qword_19915A2A0[(char)v25], &v162, a10);
    *(_QWORD *)a1 = v162;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_75;
  }
  v10 = a1;
  if (v13 <= v14 + v17 + 1)
    goto LABEL_118;
  v19 = 0;
  v26 = ~v17 + v15;
  if (v26 >= 5)
    v26 = 5;
  v27 = v26 - 1;
  v28 = v14 + v17;
  *(_QWORD *)a2 = v14 + v17 + 2;
  v29 = v14 - v13 + v17;
  v30 = v20 + v14;
  while (1)
  {
    LODWORD(v20) = *(char *)(v30 + v19 + v17 + 1);
    if ((v20 & 0x80000000) == 0)
      break;
    if (v27 == v19)
      goto LABEL_118;
    v31 = v28 + v19;
    v32 = v29 + v19++;
    v20 = v31 + 3;
    *(_QWORD *)a2 = v20;
    if (v32 == -2)
      goto LABEL_20;
  }
LABEL_21:
  if ((_DWORD)v19 == 4 && v20 >= 0x10u)
  {
LABEL_118:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get store offset", (unint64_t *)a2, 23, &v162, a10);
    goto LABEL_91;
  }
  if (!*(_DWORD *)(a2 + 68))
  {
    v124 = "store value";
    v125 = (unint64_t *)a2;
    v126 = 12;
LABEL_90:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v125, 26, v124, v126, &v162, a10);
LABEL_91:
    *(_QWORD *)v10 = v162;
    *(_BYTE *)(v10 + 8) = 1;
    goto LABEL_75;
  }
  v158 = v24;
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v162, a2 + 56, a3, a4, a5, a6, a7, a8);
  v170 = v162;
  v171 = v163;
  v172 = v164;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v173, &v165, v34, v35, v36, v37, v38, v39);
  if (v165)
  {
    v137 = v165 - 2;
    v138 = *(_QWORD *)(((unint64_t)(v165 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v139 = (uint64_t *)*(v165 - 1);
    if (v139)
    {
      v140 = *v137;
      *v139 = *v137;
      *(_QWORD *)(v140 + 8) = v139;
      *v137 = 0;
      v137[1] = 0;
    }
    *v137 = *(_QWORD *)(v138 + 40);
    *(_QWORD *)(v138 + 40) = v137;
  }
  if (v173)
  {
    v47 = *(_QWORD *)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v48 = *(_QWORD **)(v47 + 40);
    if (!v48)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v40, v41, v42, v43, v44, v45, v46);
      v48 = *(_QWORD **)(v47 + 40);
    }
    *(_QWORD *)(v47 + 40) = *v48;
    v48[2] = 0;
    v49 = v48 + 2;
    *v48 = 0;
    v48[1] = 0;
    v50 = v173;
    if (v173)
    {
      v50 = (_QWORD *)*v173;
      if (*v173)
      {
        v150 = *(_QWORD **)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v151 = v150[3];
        v150 += 3;
        *(v49 - 2) = v151;
        *(v49 - 1) = v150;
        *v150 = v49 - 2;
        *(_QWORD *)(v151 + 8) = v49 - 2;
      }
    }
    *v49 = v50;
  }
  else
  {
    v49 = 0;
  }
  *(_QWORD *)&v162 = "WasmFunctionParser.h:";
  DWORD2(v162) = 21;
  LODWORD(v159) = 581;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v162, (unsigned int *)&v159, (int **)&v161);
  v58 = v161;
  if (!v161)
  {
    __break(0xC471u);
    JUMPOUT(0x198CB31A8);
  }
  v161 = 0;
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    if (!v49)
      goto LABEL_35;
  }
  else
  {
    *(_DWORD *)v58 -= 2;
    if (!v49)
      goto LABEL_35;
  }
  v108 = v49 - 2;
  v109 = *(_QWORD *)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v110 = (uint64_t *)*(v49 - 1);
  if (v110)
  {
    v111 = *v108;
    *v110 = *v108;
    *(_QWORD *)(v111 + 8) = v110;
    *v108 = 0;
    *(v49 - 1) = 0;
  }
  *v108 = *(_QWORD *)(v109 + 40);
  *(_QWORD *)(v109 + 40) = v108;
LABEL_35:
  if (!*(_DWORD *)(a2 + 68))
  {
    v124 = "store pointer";
    v125 = (unint64_t *)a2;
    v126 = 14;
    goto LABEL_90;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v162, a2 + 56, v52, v53, v54, v55, v56, v57);
  v166 = v162;
  v167 = v163;
  v168 = v164;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v169, &v165, v59, v60, v61, v62, v63, v64);
  if (v165)
  {
    v141 = v165 - 2;
    v142 = *(_QWORD *)(((unint64_t)(v165 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v143 = (uint64_t *)*(v165 - 1);
    if (v143)
    {
      v144 = *v141;
      *v143 = *v141;
      *(_QWORD *)(v144 + 8) = v143;
      *v141 = 0;
      v141[1] = 0;
    }
    *v141 = *(_QWORD *)(v142 + 40);
    *(_QWORD *)(v142 + 40) = v141;
  }
  if (v169)
  {
    v72 = *(_QWORD *)(((unint64_t)(v169 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v73 = *(_QWORD **)(v72 + 40);
    v74 = v10;
    if (!v73)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v169 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v65, v66, v67, v68, v69, v70, v71);
      v73 = *(_QWORD **)(v72 + 40);
    }
    *(_QWORD *)(v72 + 40) = *v73;
    v73[2] = 0;
    v75 = v73 + 2;
    *v73 = 0;
    v73[1] = 0;
    v76 = v169;
    if (v169)
    {
      v76 = (_QWORD *)*v169;
      if (*v169)
      {
        v152 = *(_QWORD **)(((unint64_t)(v75 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v153 = v152[3];
        v152 += 3;
        *(v75 - 2) = v153;
        *(v75 - 1) = v152;
        *v152 = v75 - 2;
        *(_QWORD *)(v153 + 8) = v75 - 2;
      }
    }
    *v75 = v76;
  }
  else
  {
    v75 = 0;
    v74 = v10;
  }
  *(_QWORD *)&v162 = "WasmFunctionParser.h:";
  DWORD2(v162) = 21;
  LODWORD(v159) = 582;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v162, (unsigned int *)&v159, (int **)&v160);
  v84 = v160;
  if (!v160)
  {
    __break(0xC471u);
LABEL_122:
    JUMPOUT(0x198CB3180);
  }
  v160 = 0;
  if (*(_DWORD *)v84 == 2)
  {
    WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
    WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    if (!v75)
      goto LABEL_48;
  }
  else
  {
    *(_DWORD *)v84 -= 2;
    if (!v75)
      goto LABEL_48;
  }
  v120 = v75 - 2;
  v121 = *(_QWORD *)(((unint64_t)(v75 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v122 = (uint64_t *)*(v75 - 1);
  if (v122)
  {
    v123 = *v120;
    *v122 = *v120;
    *(_QWORD *)(v123 + 8) = v122;
    *v120 = 0;
    *(v75 - 1) = 0;
  }
  *v120 = *(_QWORD *)(v121 + 40);
  *(_QWORD *)(v121 + 40) = v120;
LABEL_48:
  if ((_BYTE)v166 != 0xFF)
  {
    v127 = " pointer type mismatch";
    v128 = 23;
LABEL_114:
    *(_QWORD *)&v162 = v127;
    *((_QWORD *)&v162 + 1) = v128;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v159, v158, (uint64_t)&v162);
    v95 = v159;
    goto LABEL_74;
  }
  if (v170 != v16)
  {
LABEL_113:
    v127 = " value type mismatch";
    v128 = 21;
    goto LABEL_114;
  }
  if (v16 - 239 < 2 || v16 == 227)
  {
    if (a4 == *((_QWORD *)&v170 + 1))
      v85 = ((v16 + 29) < 0xEu) & (0x3001u >> (v16 + 29));
    else
      v85 = 0;
    if ((v85 & 1) == 0)
      goto LABEL_113;
  }
  else
  {
    if (a4 == *((_QWORD *)&v170 + 1))
      v149 = ((v16 + 29) < 0xEu) & (0x3001u >> (v16 + 29));
    else
      v149 = 1;
    if (v149 == 1)
      goto LABEL_113;
  }
  v86 = *(_QWORD *)(a2 + 48);
  if (v169)
  {
    v87 = *(_QWORD *)(((unint64_t)(v169 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v88 = *(_QWORD **)(v87 + 40);
    if (!v88)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v169 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v77, v78, v79, v80, v81, v82, v83);
      v88 = *(_QWORD **)(v87 + 40);
    }
    *(_QWORD *)(v87 + 40) = *v88;
    v88[2] = 0;
    v89 = v88 + 2;
    *v88 = 0;
    v88[1] = 0;
    v90 = v169;
    if (v169)
    {
      v90 = (_QWORD *)*v169;
      if (*v169)
      {
        v154 = *(_QWORD **)(((unint64_t)(v89 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v155 = v154[3];
        v154 += 3;
        *(v89 - 2) = v155;
        *(v89 - 1) = v154;
        *v154 = v89 - 2;
        *(_QWORD *)(v155 + 8) = v89 - 2;
      }
    }
    *v89 = v90;
  }
  else
  {
    v89 = 0;
  }
  if (v173)
  {
    v91 = *(_QWORD *)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v92 = *(_QWORD **)(v91 + 40);
    if (!v92)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v77, v78, v79, v80, v81, v82, v83);
      v92 = *(_QWORD **)(v91 + 40);
    }
    *(_QWORD *)(v91 + 40) = *v92;
    v92[2] = 0;
    v93 = v92 + 2;
    *v92 = 0;
    v92[1] = 0;
    v94 = v173;
    if (v173)
    {
      v94 = (_QWORD *)*v173;
      if (*v173)
      {
        v156 = *(_QWORD **)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v157 = v156[3];
        v156 += 3;
        *(v93 - 2) = v157;
        *(v93 - 1) = v156;
        *v156 = v93 - 2;
        *(_QWORD *)(v157 + 8) = v93 - 2;
      }
    }
    *v93 = v94;
    JSC::Wasm::ConstExprGenerator::fail<char const*>(&v162, **(_QWORD **)v86, *(_QWORD *)(v86 + 16));
    v95 = (void (**)(WTF::StringPrintStream *__hidden))v162;
    v96 = v93 - 2;
    v97 = *(_QWORD *)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v98 = (uint64_t *)*(v93 - 1);
    if (v98)
    {
      v99 = *v96;
      *v98 = *v96;
      *(_QWORD *)(v99 + 8) = v98;
      *v96 = 0;
      *(v93 - 1) = 0;
    }
    *v96 = *(_QWORD *)(v97 + 40);
    *(_QWORD *)(v97 + 40) = v96;
    if (!v89)
      goto LABEL_74;
    goto LABEL_105;
  }
  JSC::Wasm::ConstExprGenerator::fail<char const*>(&v162, **(_QWORD **)v86, *(_QWORD *)(v86 + 16));
  v95 = (void (**)(WTF::StringPrintStream *__hidden))v162;
  if (v89)
  {
LABEL_105:
    v145 = v89 - 2;
    v146 = *(_QWORD *)(((unint64_t)(v89 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v147 = (uint64_t *)*(v89 - 1);
    if (v147)
    {
      v148 = *v145;
      *v147 = *v145;
      *(_QWORD *)(v148 + 8) = v147;
      *v145 = 0;
      *(v89 - 1) = 0;
    }
    *v145 = *(_QWORD *)(v146 + 40);
    *(_QWORD *)(v146 + 40) = v145;
  }
LABEL_74:
  *(_QWORD *)v74 = v95;
  *(_BYTE *)(v74 + 8) = 1;
LABEL_75:
  if (v169)
  {
    v129 = v169 - 2;
    v130 = *(_QWORD *)(((unint64_t)(v169 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v131 = (uint64_t *)*(v169 - 1);
    if (v131)
    {
      v132 = *v129;
      *v131 = *v129;
      *(_QWORD *)(v132 + 8) = v131;
      *v129 = 0;
      v129[1] = 0;
    }
    *v129 = *(_QWORD *)(v130 + 40);
    *(_QWORD *)(v130 + 40) = v129;
  }
  if (v173)
  {
    v133 = v173 - 2;
    v134 = *(_QWORD *)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v135 = (uint64_t *)*(v173 - 1);
    if (v135)
    {
      v136 = *v133;
      *v135 = *v133;
      *(_QWORD *)(v136 + 8) = v135;
      *v133 = 0;
      v133[1] = 0;
    }
    *v133 = *(_QWORD *)(v134 + 40);
    *(_QWORD *)(v134 + 40) = v133;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, char *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  char *String;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::PrintStream *v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF::PrintStream *v56;
  float v57;
  double v58;
  const WTF::String *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  const WTF::String *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float v73;
  const WTF::String *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  float v81;
  const WTF::String *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  float v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  void (**v144)(WTF::StringPrintStream *__hidden);
  WTF *v145;
  __int128 v146;
  _BYTE v147[128];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v137, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v137 = (WTF::StringImpl *)v16;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v136, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v24 = v145;
  if (!v145)
  {
    v136 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v136);
  v24 = v145;
  if (v145 != (WTF *)v147)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v135, a2, a4, v25, v26);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v137, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v137 = (WTF::StringImpl *)v30;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v134, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v38 = v145;
  if (!v145)
  {
    v134 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v134);
  v38 = v145;
  if (v145 != (WTF *)v147)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a6);
  v41 = v40;
  v42 = ((uint64_t (*)(_QWORD))v144[4])(&v144);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
  if (String)
  {
    v45 = v41 - 1;
    if (!v41)
      v45 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v45, (uint64_t)&v137, v44);
  }
  else
  {
    v46 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    v137 = (WTF::StringImpl *)v46;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper(v43, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v139, &v137);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v54 = v145;
  if (!v145)
  {
    v137 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v137);
  v54 = v145;
  if (v145 != (WTF *)v147)
LABEL_36:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v55 = (WTF *)((uint64_t (*)(_QWORD))v140[4])(&v140);
  v56 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v55 + 32))(v55);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v144, v57);
  WTF::printExpectedCStringHelper(v56, "StringView", &v144);
  if ((_DWORD)v145 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v145])(&v139, &v144);
  v58 = (*(double (**)(WTF *))(*(_QWORD *)v55 + 40))(v55);
  WTF::printInternal(v55, (WTF::PrintStream *)&v136, v59, v60, v61, v62, v63, v64, v58, v65);
  WTF::printInternal(v55, (WTF::PrintStream *)&v135, v66, v67, v68, v69, v70, v71, v72, v73);
  WTF::printInternal(v55, (WTF::PrintStream *)&v134, v74, v75, v76, v77, v78, v79, v80, v81);
  WTF::printInternal(v55, (WTF::PrintStream *)&v137, v82, v83, v84, v85, v86, v87, v88, v89);
  v140[5]((WTF::StringPrintStream *)&v140);
  v97 = v137;
  v137 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v134;
  v134 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v135;
  v135 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v136;
  v136 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v141;
  if (v141)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v144);
    v101 = v141;
    *a1 = v144;
    if (v101 == (WTF *)v143)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v90, v91, v92, v93, v94, v95, v96);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [35],JSC::Wasm::Type,char [23],JSC::Wasm::Type,char [15]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  float v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  WTF::PrintStream *v37;
  float v38;
  double v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  const WTF::String *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  float v70;
  const WTF::String *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  float v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  char v137;
  void (**v138)(WTF::StringPrintStream *__hidden);
  WTF *v139;
  __int128 v140;
  _BYTE v141[128];
  void (**v142)(WTF::StringPrintStream *__hidden);
  unint64_t v143;
  __int128 v144;
  _BYTE v145[128];
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v138 = off_1E3572250;
  v139 = (WTF *)v141;
  v140 = xmmword_199122F80;
  v141[0] = 0;
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "table.init requires table's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v15 = v143;
  if (!v143)
  {
    v136 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v136);
  v15 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v135, a2, a3, v16, v17);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" and element's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v25 = v143;
  if (!v143)
  {
    v134 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v134);
  v25 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v133, a2, a4, v26, v27);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" are the same");
  v142[5]((WTF::StringPrintStream *)&v142);
  v35 = v143;
  if (!v143)
  {
    v132 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v132);
  v35 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_15:
    WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
  v36 = (WTF *)((uint64_t (*)(_QWORD))v138[4])(&v138);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v36 + 32))(v36);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v142, v38);
  WTF::printExpectedCStringHelper(v37, "StringView", &v142);
  if ((_DWORD)v143 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v143])(&v137, &v142);
  v39 = (*(double (**)(WTF *))(*(_QWORD *)v36 + 40))(v36);
  WTF::printInternal(v36, (WTF::PrintStream *)&v136, v40, v41, v42, v43, v44, v45, v39, v46);
  WTF::printInternal(v36, (WTF::PrintStream *)&v135, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v36, (WTF::PrintStream *)&v134, v55, v56, v57, v58, v59, v60, v61, v62);
  WTF::printInternal(v36, (WTF::PrintStream *)&v133, v63, v64, v65, v66, v67, v68, v69, v70);
  WTF::printInternal(v36, (WTF::PrintStream *)&v132, v71, v72, v73, v74, v75, v76, v77, v78);
  v138[5]((WTF::StringPrintStream *)&v138);
  v86 = v132;
  v132 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v133;
  v133 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v134;
  v134 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v135;
  v135 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = v136;
  v136 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = v139;
  if (v139)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v139, v140, (uint64_t *)&v142);
    v91 = v139;
    *a1 = v142;
    if (v91 == (WTF *)v141)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v91, v79, v80, v81, v82, v83, v84, v85);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [23]>(void (***a1)(WTF::StringPrintStream *__hidden this))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::PrintStream *v11;
  float v12;
  double v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40 = off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  v44 = off_1E3572250;
  v45 = (WTF *)v47;
  v46 = xmmword_199122F80;
  v47[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "memory must be present");
  v44[5]((WTF::StringPrintStream *)&v44);
  v9 = v45;
  if (!v45)
  {
    v38 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v38);
  v9 = v45;
  if (v45 != (WTF *)v47)
LABEL_5:
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  v10 = (WTF *)((uint64_t (*)(_QWORD))v40[4])(&v40);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v44, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v44);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v39, &v44);
  v13 = (*(double (**)(WTF *))(*(_QWORD *)v10 + 40))(v10);
  WTF::printInternal(v10, (WTF::PrintStream *)&v38, v14, v15, v16, v17, v18, v19, v13, v20);
  v40[5]((WTF::StringPrintStream *)&v40);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v41;
  if (v41)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v44);
    v29 = v41;
    *a1 = v44;
    if (v29 == (WTF *)v43)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,char const*>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, const char *a4@<X3>, _QWORD *a5@<X8>, float a6@<S1>)
{
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int *v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  WTF *v59;
  __int128 v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  if (__src)
  {
    v9 = a3 - 1;
    if (!a3)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v9, (uint64_t)&v56, a6);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 0;
    v56 = (const char *)v10;
    LODWORD(v57) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v58, "StringView", &v56);
  if ((_DWORD)v57 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v55, &v56);
  (*((void (**)(const char **))v58 + 5))(&v58);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v18 = v59;
  if (!v59)
  {
    v53 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v53);
  v18 = v59;
  if (v59 != (WTF *)v61)
LABEL_12:
    WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v58, "%s", a4);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v26 = v59;
  if (!v59)
  {
    v52 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v52);
  v26 = v59;
  if (v59 != (WTF *)v61)
LABEL_17:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v58 = "WebAssembly.Module doesn't parse at byte ";
  v59 = (WTF *)42;
  v56 = ": ";
  v57 = 3;
  v55 = v8;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v58, &v55, (uint64_t)&v56, (uint64_t *)&v53, (uint64_t *)&v52, &v54);
  if (v54)
  {
    *a5 = v54;
    v54 = 0;
    v34 = v52;
    v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    v35 = v53;
    v53 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [32],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, unsigned __int8 *a4, char *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *String;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int v126;
  char v127;
  void (**v128)(WTF::StringPrintStream *__hidden);
  WTF *v129;
  __int128 v130;
  _BYTE v131[128];
  void (**v132)(WTF::StringPrintStream *__hidden);
  unint64_t v133;
  __int128 v134;
  _BYTE v135[128];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v128 = off_1E3572250;
  v129 = (WTF *)v131;
  v130 = xmmword_199122F80;
  v131[0] = 0;
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", a3);
  v132[5]((WTF::StringPrintStream *)&v132);
  v16 = v133;
  if (!v133)
  {
    v124 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v124);
  v16 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_5:
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v123, a2, a4, v17, v18);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", " expected ");
  v132[5]((WTF::StringPrintStream *)&v132);
  v26 = v133;
  if (!v133)
  {
    v122 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v122);
  v26 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_10:
    WTF::fastFree(v26, v19, v20, v21, v22, v23, v24, v25);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a5);
  v29 = v28;
  v30 = ((uint64_t (*)(_QWORD))v132[4])(&v132);
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
  if (String)
  {
    v33 = v29 - 1;
    if (!v29)
      v33 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v33, (uint64_t)&v125, v32);
  }
  else
  {
    v34 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v34 = 1;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 0;
    v125 = (WTF::StringImpl *)v34;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper(v31, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v127, &v125);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  v132[5]((WTF::StringPrintStream *)&v132);
  v132[5]((WTF::StringPrintStream *)&v132);
  v42 = v133;
  if (!v133)
  {
    v125 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v125);
  v42 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_22:
    WTF::fastFree(v42, v35, v36, v37, v38, v39, v40, v41);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v128[4])(&v128);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v132, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v132);
  if ((_DWORD)v133 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v133])(&v127, &v132);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v124, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v123, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v122, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v125, v70, v71, v72, v73, v74, v75, v76, v77);
  v128[5]((WTF::StringPrintStream *)&v128);
  v85 = v125;
  v125 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v129;
  if (v129)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v129, v130, (uint64_t *)&v132);
    v89 = v129;
    *a1 = v132;
    if (v89 == (WTF *)v131)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v89, v78, v79, v80, v81, v82, v83, v84);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "memory.init length to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::truncSaturated(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::HandleSet *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  WTF::StringImpl *v40;
  char v41;
  uint64_t v42;
  JSC::HandleSet *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  void (**v47)(WTF::StringPrintStream *__hidden);
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned int v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  JSC::HandleSet *v77;
  __int128 v78;
  _QWORD v79[2];
  void (**v80)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v81;
  _OWORD v82[2];
  uint64_t v83;
  uint64_t *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD v89[2];

  v89[0] = a3;
  v89[1] = a4;
  v85 = JSC::Wasm::Types::Void;
  LOBYTE(v86) = 1;
  *((_QWORD *)&v86 + 1) = 0;
  v88 = 0;
  if (*(_DWORD *)(a2 + 68))
  {
    v13 = a3;
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)v82, a2 + 56, a3, a4, a5, a6, a7, a8);
    v85 = v82[0];
    v86 = v82[1];
    v87 = v83;
    JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v88, &v84, v14, v15, v16, v17, v18, v19);
    if (v84)
    {
      v68 = v84 - 2;
      v69 = *(_QWORD *)(((unint64_t)(v84 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v70 = (uint64_t *)*(v84 - 1);
      if (v70)
      {
        v71 = *v68;
        *v70 = *v68;
        *(_QWORD *)(v71 + 8) = v70;
        *v68 = 0;
        v68[1] = 0;
      }
      *v68 = *(_QWORD *)(v69 + 40);
      *(_QWORD *)(v69 + 40) = v68;
    }
    if (v88)
    {
      v27 = *(JSC::HandleSet **)(((unint64_t)(v88 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v28 = (_QWORD *)*((_QWORD *)v27 + 5);
      if (!v28)
      {
        v77 = *(JSC::HandleSet **)(((unint64_t)(v88 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        JSC::HandleSet::grow(v27, v20, v21, v22, v23, v24, v25, v26);
        v27 = v77;
        v28 = (_QWORD *)*((_QWORD *)v77 + 5);
      }
      *((_QWORD *)v27 + 5) = *v28;
      v28[2] = 0;
      v29 = v28 + 2;
      *v28 = 0;
      v28[1] = 0;
      v30 = v88;
      if (v88)
      {
        v30 = (_QWORD *)*v88;
        if (*v88)
        {
          v73 = *(_QWORD **)(((unint64_t)(v29 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v74 = v73[3];
          v73 += 3;
          *(v29 - 2) = v74;
          *(v29 - 1) = v73;
          *v73 = v29 - 2;
          *(_QWORD *)(v74 + 8) = v29 - 2;
        }
      }
      *v29 = v30;
    }
    else
    {
      v29 = 0;
    }
    *(_QWORD *)&v82[0] = "WasmFunctionParser.h:";
    DWORD2(v82[0]) = 21;
    LODWORD(v79[0]) = 595;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v82, (unsigned int *)v79, (int **)&v81);
    v40 = v81;
    if (!v81)
    {
      __break(0xC471u);
      return;
    }
    v81 = 0;
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      if (!v29)
        goto LABEL_14;
    }
    else
    {
      *(_DWORD *)v40 -= 2;
      if (!v29)
        goto LABEL_14;
    }
    v60 = v29 - 2;
    v61 = *(_QWORD *)(((unint64_t)(v29 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v62 = (uint64_t *)*(v29 - 1);
    if (v62)
    {
      v63 = *v60;
      *v62 = *v60;
      *(_QWORD *)(v63 + 8) = v62;
      *v60 = 0;
      *(v29 - 1) = 0;
    }
    *v60 = *(_QWORD *)(v61 + 40);
    *(_QWORD *)(v61 + 40) = v60;
LABEL_14:
    if (v13 == v85)
    {
      if (v13 - 239 < 2 || v13 == 227)
      {
        if (a4 == *((_QWORD *)&v85 + 1))
          v41 = ((v13 + 29) < 0xEu) & (0x3001u >> (v13 + 29));
        else
          v41 = 0;
        if ((v41 & 1) == 0)
          goto LABEL_49;
      }
      else
      {
        if (a4 == *((_QWORD *)&v85 + 1))
          v72 = ((v13 + 29) < 0xEu) & (0x3001u >> (v13 + 29));
        else
          v72 = 1;
        if (v72 == 1)
          goto LABEL_49;
      }
      v42 = *(_QWORD *)(a2 + 48);
      if (v88)
      {
        v43 = *(JSC::HandleSet **)(((unint64_t)(v88 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v44 = (_QWORD *)*((_QWORD *)v43 + 5);
        if (!v44)
        {
          JSC::HandleSet::grow(v43, (uint64_t)v31, v32, v33, v34, v35, v36, v37);
          v44 = (_QWORD *)*((_QWORD *)v43 + 5);
        }
        *((_QWORD *)v43 + 5) = *v44;
        v44[2] = 0;
        v45 = v44 + 2;
        *v44 = 0;
        v44[1] = 0;
        v46 = v88;
        if (v88)
        {
          v46 = (_QWORD *)*v88;
          if (*v88)
          {
            v75 = *(_QWORD **)(((unint64_t)(v45 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v76 = v75[3];
            v75 += 3;
            *(v45 - 2) = v76;
            *(v45 - 1) = v75;
            *v75 = v45 - 2;
            *(_QWORD *)(v76 + 8) = v45 - 2;
          }
        }
        *v45 = v46;
        JSC::Wasm::ConstExprGenerator::fail<char const*>(v82, **(_QWORD **)v42, *(_QWORD *)(v42 + 16));
        v47 = *(void (***)(WTF::StringPrintStream *__hidden))&v82[0];
        v48 = v45 - 2;
        v49 = *(_QWORD *)(((unint64_t)(v45 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v50 = (uint64_t *)*(v45 - 1);
        if (v50)
        {
          v51 = *v48;
          *v50 = *v48;
          *(_QWORD *)(v51 + 8) = v50;
          *v48 = 0;
          *(v45 - 1) = 0;
        }
        *v48 = *(_QWORD *)(v49 + 40);
        *(_QWORD *)(v49 + 40) = v48;
      }
      else
      {
        JSC::Wasm::ConstExprGenerator::fail<char const*>(v82, **(_QWORD **)v42, *(_QWORD *)(v42 + 16));
        v47 = *(void (***)(WTF::StringPrintStream *__hidden))&v82[0];
      }
      goto LABEL_30;
    }
LABEL_49:
    *(_QWORD *)&v82[0] = "trunc-saturated value type mismatch. Expected: ";
    *((_QWORD *)&v82[0] + 1) = 48;
    v79[0] = " but expression stack has ";
    v79[1] = 27;
    v78 = v85;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v80, a2, (uint64_t)v82, (unsigned __int8 *)v89, (uint64_t)v79, (unsigned __int8 *)&v78, v38, v39);
    v47 = v80;
LABEL_30:
    *(_QWORD *)a1 = v47;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_31;
  }
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, v82, a10);
  *(_QWORD *)a1 = *(_QWORD *)&v82[0];
  *(_BYTE *)(a1 + 8) = 1;
LABEL_31:
  if (v88)
  {
    v64 = v88 - 2;
    v65 = *(_QWORD *)(((unint64_t)(v88 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v66 = (uint64_t *)*(v88 - 1);
    if (v66)
    {
      v67 = *v64;
      *v66 = *v64;
      *(_QWORD *)(v67 + 8) = v66;
      *v64 = 0;
      v64[1] = 0;
    }
    *v64 = *(_QWORD *)(v65 + 40);
    *(_QWORD *)(v65 + 40) = v64;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseArrayTypeDefinition(uint64_t a1, unint64_t *a2, char *a3, uint64_t a4, unsigned int a5, _DWORD *a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  JSC::Wasm::TypeInformation *v24;
  unint64_t v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  const char *v31;
  uint64_t v32;
  void (**v33)(WTF::StringPrintStream *__hidden);
  unsigned int *v34;
  WTF *v35;
  JSC::Wasm::TypeDefinition *v36;
  JSC::Wasm::TypeInformation *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 hasRecursiveReference;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t CachedUnrolling;
  uint64_t v46;
  uint64_t v47;
  const JSC::Wasm::Type *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  WTF *v53;
  const JSC::Wasm::TypeDefinition *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD v61[2];
  const char *v62;
  uint64_t v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  _QWORD v65[2];

  v65[0] = a3;
  v65[1] = a4;
  v11 = a2[2];
  v12 = *a2;
  v13 = v11 - *a2;
  if (v11 <= *a2)
    goto LABEL_28;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = a2[1];
  *a6 = 0;
  v18 = 5;
  if (v13 < 5)
    v18 = v13;
  v19 = v18 - 1;
  *a2 = v12 + 1;
  v20 = v17 + v12;
  v21 = v12 + 2;
  while (1)
  {
    v22 = *(char *)(v20 + v14);
    v16 |= (v22 & 0x7F) << v15;
    *a6 = v16;
    if ((v22 & 0x80000000) == 0)
      break;
    if (v19 == v14)
      goto LABEL_28;
    LOBYTE(v22) = v21 + v14;
    *a2 = v21 + v14;
    v15 += 7;
    if (v13 == ++v14)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v14 == 4 && v22 >= 0x10u)
  {
LABEL_28:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a3, a4, &v62, a10);
    v33 = (void (**)(WTF::StringPrintStream *__hidden))v62;
    goto LABEL_22;
  }
  v23 = a2[3310];
  if (v16 >= *(_DWORD *)(v23 + 100))
  {
    v62 = " index ";
    v63 = 8;
    v31 = " is out of bounds";
    v32 = 18;
LABEL_21:
    v61[0] = v31;
    v61[1] = v32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v64, (uint64_t)v65, (uint64_t)&v62, a6, (uint64_t)v61, a9, a10);
    v33 = v64;
LABEL_22:
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v24 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v23 + 88) + 8 * v16);
  v25 = (unint64_t)v24;
  if (*((_DWORD *)v24 + 8) == 4)
  {
    v34 = (unsigned int *)*((_QWORD *)v24 + 1);
    v35 = *(WTF **)v34;
    v36 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v34 + 8) + 8 * v34[2]);
    v37 = v24;
    v38 = (uint64_t)a6;
    v39 = a8;
    v40 = a7;
    v60 = a5;
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v36);
    a5 = v60;
    a7 = v40;
    a8 = v39;
    a6 = (_DWORD *)v38;
    v25 = (unint64_t)v36;
    v24 = v37;
    if (hasRecursiveReference)
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v37, v42, v43, v44, v60, v38, v40, v39);
      if (v52)
      {
        v25 = CachedUnrolling;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
        v24 = v37;
      }
      else
      {
        v53 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v36, v35, v46, v47, v48, v49, v50, v51);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v37, v53, v54, v55, v56, v57, v58, v59);
        v25 = (unint64_t)v53;
        v24 = v37;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
      }
    }
  }
  v26 = *(_DWORD *)(v25 + 32);
  if (v26 == 5)
  {
    v25 = **(_QWORD **)(v25 + 8);
    v26 = *(_DWORD *)(v25 + 32);
  }
  if (v26 != 2)
  {
    v62 = " index ";
    v63 = 8;
    v31 = " does not reference an array definition";
    v32 = 40;
    goto LABEL_21;
  }
  v27 = *(__int128 **)(v25 + 8);
  v28 = *v27;
  v29 = *((_QWORD *)v27 + 2);
  *(_BYTE *)(a7 + 24) = *((_BYTE *)v27 + 24);
  *(_QWORD *)(a7 + 16) = v29;
  *(_OWORD *)a7 = v28;
  if (a5)
    v30 = -29;
  else
    v30 = -28;
  *(_BYTE *)a8 = v30;
  *(_QWORD *)(a8 + 8) = v24;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [25],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  double v27;
  float v28;
  WTF *v29;
  WTF::PrintStream *v30;
  float v31;
  double v32;
  const WTF::String *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  char v112;
  void (**v113)(WTF::StringPrintStream *__hidden);
  WTF *v114;
  __int128 v115;
  _BYTE v116[128];
  void (**v117)(WTF::StringPrintStream *__hidden);
  WTF *v118;
  __int128 v119;
  _BYTE v120[128];
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v113 = off_1E3572250;
  v114 = (WTF *)v116;
  v115 = xmmword_199122F80;
  v116[0] = 0;
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", a3);
  v117[5]((WTF::StringPrintStream *)&v117);
  v16 = v118;
  if (!v118)
  {
    v111 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v111);
  v16 = v118;
  if (v118 != (WTF *)v120)
LABEL_5:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v110, a2, a4, v17, v18);
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", " expected ");
  v117[5]((WTF::StringPrintStream *)&v117);
  v26 = v118;
  if (!v118)
  {
    v109 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v109);
  v26 = v118;
  if (v118 != (WTF *)v120)
LABEL_10:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v108, a2, a5, v27, v28);
  v29 = (WTF *)((uint64_t (*)(_QWORD))v113[4])(&v113);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v29 + 32))(v29);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v117, v31);
  WTF::printExpectedCStringHelper(v30, "StringView", &v117);
  if ((_DWORD)v118 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v118])(&v112, &v117);
  v32 = (*(double (**)(WTF *))(*(_QWORD *)v29 + 40))(v29);
  WTF::printInternal(v29, (WTF::PrintStream *)&v111, v33, v34, v35, v36, v37, v38, v32, v39);
  WTF::printInternal(v29, (WTF::PrintStream *)&v110, v40, v41, v42, v43, v44, v45, v46, v47);
  WTF::printInternal(v29, (WTF::PrintStream *)&v109, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v29, (WTF::PrintStream *)&v108, v56, v57, v58, v59, v60, v61, v62, v63);
  v113[5]((WTF::StringPrintStream *)&v113);
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v111;
  v111 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = v114;
  if (v114)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v114, v115, (uint64_t *)&v117);
    v75 = v114;
    *a1 = v117;
    if (v75 == (WTF *)v116)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v75, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [25],unsigned int,char [64]>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  char v93;
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  void (**v98)(WTF::StringPrintStream *__hidden);
  unint64_t v99;
  __int128 v100;
  _BYTE v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%s", "array.new_default index ");
  v98[5]((WTF::StringPrintStream *)&v98);
  v11 = v99;
  if (!v99)
  {
    v92 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v92);
  v11 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_5:
    WTF::fastFree(v11, v4, v5, v6, v7, v8, v9, v10);
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%u", *a2);
  v98[5]((WTF::StringPrintStream *)&v98);
  v19 = v99;
  if (!v99)
  {
    v91 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v91);
  v19 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_10:
    WTF::fastFree(v19, v12, v13, v14, v15, v16, v17, v18);
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%s", " does not reference an array definition with a defaultable type");
  v98[5]((WTF::StringPrintStream *)&v98);
  v27 = v99;
  if (!v99)
  {
    v90 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v90);
  v27 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_15:
    WTF::fastFree(v27, v20, v21, v22, v23, v24, v25, v26);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v94[4])(&v94);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v98, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v98);
  if ((_DWORD)v99 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v99])(&v93, &v98);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v92, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v91, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v90, v47, v48, v49, v50, v51, v52, v53, v54);
  v94[5]((WTF::StringPrintStream *)&v94);
  v62 = v90;
  v90 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = v91;
  v91 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = v92;
  v92 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = v95;
  if (v95)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v98);
    v65 = v95;
    *a1 = v98;
    if (v65 == (WTF *)v97)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v65, v55, v56, v57, v58, v59, v60, v61);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, _DWORD *a4, double a5, float a6)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  WTF *v49;
  WTF::PrintStream *v50;
  float v51;
  double v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  const WTF::String *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  float v83;
  WTF::AtomStringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  int v132;
  char v133;
  void (**v134)(WTF::StringPrintStream *__hidden);
  WTF *v135;
  __int128 v136;
  _BYTE v137[128];
  void (**v138)(WTF::StringPrintStream *__hidden);
  unint64_t v139;
  __int128 v140;
  _BYTE v141[128];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v134 = off_1E3572250;
  v135 = (WTF *)v137;
  v136 = xmmword_199122F80;
  v137[0] = 0;
  v138 = off_1E3572250;
  v139 = (unint64_t)v141;
  v140 = xmmword_199122F80;
  v141[0] = 0;
  if (*(_QWORD *)a2)
  {
    v9 = *(_QWORD *)(a2 + 8);
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (!v10)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v11, (uint64_t)&v131, a6);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v131 = (WTF::StringImpl *)v12;
    v132 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v138, "StringView", &v131);
  if (v132 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v130, &v131);
  v138[5]((WTF::StringPrintStream *)&v138);
  v138[5]((WTF::StringPrintStream *)&v138);
  v20 = v139;
  if (!v139)
  {
    v130 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>(v139, v140, (uint64_t *)&v130);
  v20 = v139;
  if ((_BYTE *)v139 != v141)
LABEL_12:
    WTF::fastFree(v20, v13, v14, v15, v16, v17, v18, v19);
  v138 = off_1E3572250;
  v139 = (unint64_t)v141;
  v140 = xmmword_199122F80;
  v141[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v138, "%lu", 10000);
  v138[5]((WTF::StringPrintStream *)&v138);
  v28 = v139;
  if (!v139)
  {
    v129 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>(v139, v140, (uint64_t *)&v129);
  v28 = v139;
  if ((_BYTE *)v139 != v141)
LABEL_17:
    WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
  v138 = off_1E3572250;
  v139 = (unint64_t)v141;
  v140 = xmmword_199122F80;
  v141[0] = 0;
  if (*(_QWORD *)a3)
  {
    v30 = *(_QWORD *)(a3 + 8);
    v10 = v30 != 0;
    v31 = v30 - 1;
    if (!v10)
      v31 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v31, (uint64_t)&v131, v29);
  }
  else
  {
    v32 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v32 = 1;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v131 = (WTF::StringImpl *)v32;
    v132 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v138, "StringView", &v131);
  if (v132 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v128, &v131);
  v138[5]((WTF::StringPrintStream *)&v138);
  v138[5]((WTF::StringPrintStream *)&v138);
  v40 = v139;
  if (!v139)
  {
    v131 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>(v139, v140, (uint64_t *)&v131);
  v40 = v139;
  if ((_BYTE *)v139 != v141)
LABEL_29:
    WTF::fastFree(v40, v33, v34, v35, v36, v37, v38, v39);
  v138 = off_1E3572250;
  v139 = (unint64_t)v141;
  v140 = xmmword_199122F80;
  v141[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v138, "%u", *a4);
  v138[5]((WTF::StringPrintStream *)&v138);
  v48 = v139;
  if (!v139)
  {
    v128 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>(v139, v140, (uint64_t *)&v128);
  v48 = v139;
  if ((_BYTE *)v139 != v141)
LABEL_34:
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  v49 = (WTF *)((uint64_t (*)(_QWORD))v134[4])(&v134);
  v50 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v49 + 32))(v49);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v138, v51);
  WTF::printExpectedCStringHelper(v50, "StringView", &v138);
  if ((_DWORD)v139 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v139])(&v133, &v138);
  v52 = (*(double (**)(WTF *))(*(_QWORD *)v49 + 40))(v49);
  WTF::printInternal(v49, (WTF::PrintStream *)&v130, v53, v54, v55, v56, v57, v58, v52, v59);
  WTF::printInternal(v49, (WTF::PrintStream *)&v129, v60, v61, v62, v63, v64, v65, v66, v67);
  WTF::printInternal(v49, (WTF::PrintStream *)&v131, v68, v69, v70, v71, v72, v73, v74, v75);
  WTF::printInternal(v49, (WTF::PrintStream *)&v128, v76, v77, v78, v79, v80, v81, v82, v83);
  v134[5]((WTF::StringPrintStream *)&v134);
  v91 = v128;
  v128 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, v84, v85, v86, v87, v88, v89, v90);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  v92 = v131;
  v131 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v84, v85, v86, v87, v88, v89, v90);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = v129;
  v129 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v84, v85, v86, v87, v88, v89, v90);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v130;
  v130 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v84, v85, v86, v87, v88, v89, v90);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v135;
  if (v135)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v135, v136, (uint64_t *)&v138);
    v95 = v135;
    *a1 = v138;
    if (v95 == (WTF *)v137)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v95, v84, v85, v86, v87, v88, v89, v90);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [24],unsigned long,char [30],unsigned int,char [10]>(void (***a1)(WTF::StringPrintStream *__hidden this), _QWORD *a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  char v147;
  void (**v148)(WTF::StringPrintStream *__hidden);
  WTF *v149;
  __int128 v150;
  _BYTE v151[128];
  void (**v152)(WTF::StringPrintStream *__hidden);
  unint64_t v153;
  __int128 v154;
  _BYTE v155[128];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v148 = off_1E3572250;
  v149 = (WTF *)v151;
  v150 = xmmword_199122F80;
  v151[0] = 0;
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", "array_new_fixed: found ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v13 = v153;
  if (!v153)
  {
    v146 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v146);
  v13 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_5:
    WTF::fastFree(v13, v6, v7, v8, v9, v10, v11, v12);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%lu", *a2);
  v152[5]((WTF::StringPrintStream *)&v152);
  v21 = v153;
  if (!v153)
  {
    v145 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v145);
  v21 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_10:
    WTF::fastFree(v21, v14, v15, v16, v17, v18, v19, v20);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", " operands on stack; expected ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v29 = v153;
  if (!v153)
  {
    v144 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v144);
  v29 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_15:
    WTF::fastFree(v29, v22, v23, v24, v25, v26, v27, v28);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", *a3);
  v152[5]((WTF::StringPrintStream *)&v152);
  v37 = v153;
  if (!v153)
  {
    v143 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v143);
  v37 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_20:
    WTF::fastFree(v37, v30, v31, v32, v33, v34, v35, v36);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", " operands");
  v152[5]((WTF::StringPrintStream *)&v152);
  v45 = v153;
  if (!v153)
  {
    v142 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v142);
  v45 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_25:
    WTF::fastFree(v45, v38, v39, v40, v41, v42, v43, v44);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v148[4])(&v148);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v152, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v152);
  if ((_DWORD)v153 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v153])(&v147, &v152);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v146, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v145, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v144, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v143, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v142, v81, v82, v83, v84, v85, v86, v87, v88);
  v148[5]((WTF::StringPrintStream *)&v148);
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v144;
  v144 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v145;
  v145 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v146;
  v146 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v149;
  if (v149)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v149, v150, (uint64_t *)&v152);
    v101 = v149;
    *a1 = v152;
    if (v101 == (WTF *)v151)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v89, v90, v91, v92, v93, v94, v95);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [48],JSC::Wasm::Type,char [25],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in array.new_fixed, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected a subtype of ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [64],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "array.new_data expected numeric, packed, or vector type; found ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [47]>(void (***a1)(WTF::StringPrintStream *__hidden this))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::PrintStream *v11;
  float v12;
  double v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40 = off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  v44 = off_1E3572250;
  v45 = (WTF *)v47;
  v46 = xmmword_199122F80;
  v47[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "array.new_data in module with no data segments");
  v44[5]((WTF::StringPrintStream *)&v44);
  v9 = v45;
  if (!v45)
  {
    v38 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v38);
  v9 = v45;
  if (v45 != (WTF *)v47)
LABEL_5:
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  v10 = (WTF *)((uint64_t (*)(_QWORD))v40[4])(&v40);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v44, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v44);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v39, &v44);
  v13 = (*(double (**)(WTF *))(*(_QWORD *)v10 + 40))(v10);
  WTF::printInternal(v10, (WTF::PrintStream *)&v38, v14, v15, v16, v17, v18, v19, v13, v20);
  v40[5]((WTF::StringPrintStream *)&v40);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v41;
  if (v41)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v44);
    v29 = v41;
    *a1 = v44;
    if (v29 == (WTF *)v43)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [30],unsigned int,char [50],unsigned int,char [2]>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  char v147;
  void (**v148)(WTF::StringPrintStream *__hidden);
  WTF *v149;
  __int128 v150;
  _BYTE v151[128];
  void (**v152)(WTF::StringPrintStream *__hidden);
  unint64_t v153;
  __int128 v154;
  _BYTE v155[128];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v148 = off_1E3572250;
  v149 = (WTF *)v151;
  v150 = xmmword_199122F80;
  v151[0] = 0;
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", "array.new_data segment index ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v13 = v153;
  if (!v153)
  {
    v146 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v146);
  v13 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_5:
    WTF::fastFree(v13, v6, v7, v8, v9, v10, v11, v12);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", *a2);
  v152[5]((WTF::StringPrintStream *)&v152);
  v21 = v153;
  if (!v153)
  {
    v145 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v145);
  v21 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_10:
    WTF::fastFree(v21, v14, v15, v16, v17, v18, v19, v20);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", " is out of bounds (maximum data segment index is ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v29 = v153;
  if (!v153)
  {
    v144 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v144);
  v29 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_15:
    WTF::fastFree(v29, v22, v23, v24, v25, v26, v27, v28);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", *a3);
  v152[5]((WTF::StringPrintStream *)&v152);
  v37 = v153;
  if (!v153)
  {
    v143 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v143);
  v37 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_20:
    WTF::fastFree(v37, v30, v31, v32, v33, v34, v35, v36);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", ")");
  v152[5]((WTF::StringPrintStream *)&v152);
  v45 = v153;
  if (!v153)
  {
    v142 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v142);
  v45 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_25:
    WTF::fastFree(v45, v38, v39, v40, v41, v42, v43, v44);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v148[4])(&v148);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v152, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v152);
  if ((_DWORD)v153 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v153])(&v147, &v152);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v146, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v145, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v144, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v143, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v142, v81, v82, v83, v84, v85, v86, v87, v88);
  v148[5]((WTF::StringPrintStream *)&v148);
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v144;
  v144 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v145;
  v145 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v146;
  v146 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v149;
  if (v149)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v149, v150, (uint64_t *)&v152);
    v101 = v149;
    *a1 = v152;
    if (v101 == (WTF *)v151)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v89, v90, v91, v92, v93, v94, v95);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [31],JSC::Wasm::TypeKind,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), const char *a2, char *a3, char *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  char *String;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  float v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::PrintStream *v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF::PrintStream *v56;
  float v57;
  double v58;
  const WTF::String *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  const WTF::String *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float v73;
  const WTF::String *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  float v81;
  const WTF::String *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  float v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  void (**v144)(WTF::StringPrintStream *__hidden);
  WTF *v145;
  __int128 v146;
  _BYTE v147[128];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v144, "%s", a2);
  v144[5]((WTF::StringPrintStream *)&v144);
  v14 = v145;
  if (!v145)
  {
    v136 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v136);
  v14 = v145;
  if (v145 != (WTF *)v147)
LABEL_5:
    WTF::fastFree((unint64_t)v14, v7, v8, v9, v10, v11, v12, v13);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a3);
  v17 = v16;
  v18 = ((uint64_t (*)(_QWORD))v144[4])(&v144);
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  if (String)
  {
    v21 = v17 - 1;
    if (!v17)
      v21 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v21, (uint64_t)&v137, v20);
  }
  else
  {
    v22 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = 0;
    *(_BYTE *)(v22 + 16) = 0;
    v137 = (WTF::StringImpl *)v22;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper(v19, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v135, &v137);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v30 = v145;
  if (!v145)
  {
    v135 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v135);
  v30 = v145;
  if (v145 != (WTF *)v147)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v144, "%s", " expected ");
  v144[5]((WTF::StringPrintStream *)&v144);
  v38 = v145;
  if (!v145)
  {
    v134 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v134);
  v38 = v145;
  if (v145 != (WTF *)v147)
LABEL_22:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  v39 = (char *)JSC::Wasm::makeString(*a4);
  v41 = v40;
  v42 = ((uint64_t (*)(_QWORD))v144[4])(&v144);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
  if (v39)
  {
    v45 = v41 - 1;
    if (!v41)
      v45 = 0;
    WTF::StringImpl::utf8ForCharacters(v39, v45, (uint64_t)&v137, v44);
  }
  else
  {
    v46 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    v137 = (WTF::StringImpl *)v46;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper(v43, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v139, &v137);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v54 = v145;
  if (!v145)
  {
    v137 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v137);
  v54 = v145;
  if (v145 != (WTF *)v147)
LABEL_34:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v55 = (WTF *)((uint64_t (*)(_QWORD))v140[4])(&v140);
  v56 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v55 + 32))(v55);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v144, v57);
  WTF::printExpectedCStringHelper(v56, "StringView", &v144);
  if ((_DWORD)v145 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v145])(&v139, &v144);
  v58 = (*(double (**)(WTF *))(*(_QWORD *)v55 + 40))(v55);
  WTF::printInternal(v55, (WTF::PrintStream *)&v136, v59, v60, v61, v62, v63, v64, v58, v65);
  WTF::printInternal(v55, (WTF::PrintStream *)&v135, v66, v67, v68, v69, v70, v71, v72, v73);
  WTF::printInternal(v55, (WTF::PrintStream *)&v134, v74, v75, v76, v77, v78, v79, v80, v81);
  WTF::printInternal(v55, (WTF::PrintStream *)&v137, v82, v83, v84, v85, v86, v87, v88, v89);
  v140[5]((WTF::StringPrintStream *)&v140);
  v97 = v137;
  v137 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v134;
  v134 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v135;
  v135 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v136;
  v136 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v141;
  if (v141)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v144);
    v101 = v141;
    *a1 = v144;
    if (v101 == (WTF *)v143)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v90, v91, v92, v93, v94, v95, v96);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [51]>(void (***a1)(WTF::StringPrintStream *__hidden this))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::PrintStream *v11;
  float v12;
  double v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40 = off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  v44 = off_1E3572250;
  v45 = (WTF *)v47;
  v46 = xmmword_199122F80;
  v47[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "array.new_elem in module with no elements segments");
  v44[5]((WTF::StringPrintStream *)&v44);
  v9 = v45;
  if (!v45)
  {
    v38 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v38);
  v9 = v45;
  if (v45 != (WTF *)v47)
LABEL_5:
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  v10 = (WTF *)((uint64_t (*)(_QWORD))v40[4])(&v40);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v44, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v44);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v39, &v44);
  v13 = (*(double (**)(WTF *))(*(_QWORD *)v10 + 40))(v10);
  WTF::printInternal(v10, (WTF::PrintStream *)&v38, v14, v15, v16, v17, v18, v19, v13, v20);
  v40[5]((WTF::StringPrintStream *)&v40);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v41;
  if (v41)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v44);
    v29 = v41;
    *a1 = v44;
    if (v29 == (WTF *)v43)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [30],unsigned int,char [53],unsigned int,char [2]>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  char v147;
  void (**v148)(WTF::StringPrintStream *__hidden);
  WTF *v149;
  __int128 v150;
  _BYTE v151[128];
  void (**v152)(WTF::StringPrintStream *__hidden);
  unint64_t v153;
  __int128 v154;
  _BYTE v155[128];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v148 = off_1E3572250;
  v149 = (WTF *)v151;
  v150 = xmmword_199122F80;
  v151[0] = 0;
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", "array.new_elem segment index ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v13 = v153;
  if (!v153)
  {
    v146 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v146);
  v13 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_5:
    WTF::fastFree(v13, v6, v7, v8, v9, v10, v11, v12);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", *a2);
  v152[5]((WTF::StringPrintStream *)&v152);
  v21 = v153;
  if (!v153)
  {
    v145 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v145);
  v21 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_10:
    WTF::fastFree(v21, v14, v15, v16, v17, v18, v19, v20);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", " is out of bounds (maximum element segment index is ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v29 = v153;
  if (!v153)
  {
    v144 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v144);
  v29 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_15:
    WTF::fastFree(v29, v22, v23, v24, v25, v26, v27, v28);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", *a3);
  v152[5]((WTF::StringPrintStream *)&v152);
  v37 = v153;
  if (!v153)
  {
    v143 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v143);
  v37 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_20:
    WTF::fastFree(v37, v30, v31, v32, v33, v34, v35, v36);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", ")");
  v152[5]((WTF::StringPrintStream *)&v152);
  v45 = v153;
  if (!v153)
  {
    v142 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v142);
  v45 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_25:
    WTF::fastFree(v45, v38, v39, v40, v41, v42, v43, v44);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v148[4])(&v148);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v152, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v152);
  if ((_DWORD)v153 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v153])(&v147, &v152);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v146, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v145, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v144, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v143, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v142, v81, v82, v83, v84, v85, v86, v87, v88);
  v148[5]((WTF::StringPrintStream *)&v148);
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v144;
  v144 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v145;
  v145 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v146;
  v146 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v149;
  if (v149)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v149, v150, (uint64_t *)&v152);
    v101 = v149;
    *a1 = v152;
    if (v101 == (WTF *)v151)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v89, v90, v91, v92, v93, v94, v95);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [67]>(void (***a1)(WTF::StringPrintStream *__hidden this))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::PrintStream *v11;
  float v12;
  double v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40 = off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  v44 = off_1E3572250;
  v45 = (WTF *)v47;
  v46 = xmmword_199122F80;
  v47[0] = 0;
  v44[5]((WTF::StringPrintStream *)&v44);
  v9 = v45;
  if (!v45)
  {
    v38 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v38);
  v9 = v45;
  if (v45 != (WTF *)v47)
LABEL_5:
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  v10 = (WTF *)((uint64_t (*)(_QWORD))v40[4])(&v40);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v44, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v44);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v39, &v44);
  v13 = (*(double (**)(WTF *))(*(_QWORD *)v10 + 40))(v10);
  WTF::printInternal(v10, (WTF::PrintStream *)&v38, v14, v15, v16, v17, v18, v19, v13, v20);
  v40[5]((WTF::StringPrintStream *)&v40);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v41;
  if (v41)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v44);
    v29 = v41;
    *a1 = v44;
    if (v29 == (WTF *)v43)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [61],JSC::Wasm::Type,char [56],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.new_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.new_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::addReferencedFunctions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  if (BYTE1(dword_1ECF4C7B0))
    v12 = 227;
  else
    v12 = 240;
  if (BYTE1(dword_1ECF4C7B0))
    v13 = -16;
  else
    v13 = 0;
  result = JSC::Wasm::isSubtype(v10, v11, v12, v13, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v15 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v15)
    {
      for (i = 0; i < v15; ++i)
      {
        if (i >= v15)
        {
LABEL_29:
          __break(0xC471u);
          JUMPOUT(0x198CB7B40);
        }
        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + i) == 1)
        {
          if (i >= *(unsigned int *)(a2 + 76))
            goto LABEL_29;
          v17 = *(_QWORD *)(a1 + 26480);
          v18 = *(_QWORD *)(v17 + 320);
          v19 = (unint64_t *)(2 * v18);
          if (v18 < 0)
            v20 = 63;
          else
            v20 = *v19;
          v21 = *(unsigned int *)(*(_QWORD *)(a2 + 64) + 8 * i);
          if (v20 > v21)
          {
            v22 = (_QWORD *)(v17 + 320);
            v23 = 1 << v21;
            v24 = v19 + 1;
            if (v18 >= 0)
              v25 = v24;
            else
              v25 = v22;
            v26 = (_QWORD *)((char *)v25 + ((v21 >> 3) & 0x1FFFFFF8));
            while (1)
            {
              v27 = *v26;
              if ((*v26 & v23) != 0)
                break;
              v28 = __ldxr(v26);
              if (v28 == v27)
              {
                if (!__stxr(v27 | v23, v26))
                  break;
              }
              else
              {
                __clrex();
              }
            }
            v15 = *(unsigned int *)(a2 + 60);
          }
        }
      }
    }
  }
  return result;
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _QWORD *a7@<X8>, float a8@<S1>)
{
  unint64_t v12;
  unsigned int v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  float v23;
  unsigned int v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  const char *String;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  int *v63;
  unint64_t v64;
  uint64_t v65[2];
  const char *v66;
  uint64_t v67;
  const char *v68;
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v68 = (const char *)off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  if (__src)
  {
    v13 = a3 - 1;
    if (!a3)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v13, (uint64_t)&v66, a8);
  }
  else
  {
    v14 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *((_QWORD *)v14 + 1) = 0;
    v14[16] = 0;
    v66 = v14;
    LODWORD(v67) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v68, "StringView", &v66);
  if ((_DWORD)v67 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(v65, &v66);
  (*((void (**)(const char **))v68 + 5))(&v68);
  (*((void (**)(const char **))v68 + 5))(&v68);
  v22 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v22 = v69;
  if (v69 != (WTF *)v71)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v68 = (const char *)off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  if (a4)
  {
    v24 = a5 - 1;
    if (!a5)
      v24 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v24, (uint64_t)&v66, v23);
  }
  else
  {
    v25 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v25 = 1;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 0;
    v66 = v25;
    LODWORD(v67) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v68, "StringView", &v66);
  if ((_DWORD)v67 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(v65, &v66);
  (*((void (**)(const char **))v68 + 5))(&v68);
  (*((void (**)(const char **))v68 + 5))(&v68);
  v33 = v69;
  if (!v69)
  {
    v61 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v61);
  v33 = v69;
  if (v69 != (WTF *)v71)
LABEL_24:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  String = JSC::Wasm::makeString(a6);
  v68 = "WebAssembly.Module doesn't parse at byte ";
  v69 = (WTF *)42;
  v66 = ": ";
  v67 = 3;
  v65[0] = (uint64_t)String;
  v65[1] = v35;
  v64 = v12;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String,WTF::ASCIILiteral>((uint64_t *)&v68, &v64, (uint64_t *)&v66, (uint64_t *)&v62, (uint64_t *)&v61, v65, &v63);
  if (v63)
  {
    *a7 = v63;
    v63 = 0;
    v43 = v61;
    v61 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
    v44 = v62;
    v62 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::PackedType,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, char *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S1>)
{
  unint64_t v16;
  unsigned int v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  float v27;
  unsigned int v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  float v38;
  const char *v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int *v88;
  unint64_t v89;
  uint64_t v90[2];
  const char *v91;
  uint64_t v92;
  const char *v93;
  WTF *v94;
  __int128 v95;
  _BYTE v96[128];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v16 = *a2;
  v93 = (const char *)off_1E3572250;
  v94 = (WTF *)v96;
  v95 = xmmword_199122F80;
  v96[0] = 0;
  if (__src)
  {
    v17 = a3 - 1;
    if (!a3)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v17, (uint64_t)&v91, a10);
  }
  else
  {
    v18 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v18 = 1;
    *((_QWORD *)v18 + 1) = 0;
    v18[16] = 0;
    v91 = v18;
    LODWORD(v92) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v93, "StringView", &v91);
  if ((_DWORD)v92 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v92])(v90, &v91);
  (*((void (**)(const char **))v93 + 5))(&v93);
  (*((void (**)(const char **))v93 + 5))(&v93);
  v26 = v94;
  if (!v94)
  {
    v87 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v94, v95, (uint64_t *)&v87);
  v26 = v94;
  if (v94 != (WTF *)v96)
LABEL_12:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v93 = (const char *)off_1E3572250;
  v94 = (WTF *)v96;
  v95 = xmmword_199122F80;
  v96[0] = 0;
  if (a4)
  {
    v28 = a5 - 1;
    if (!a5)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v28, (uint64_t)&v91, v27);
  }
  else
  {
    v29 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *((_QWORD *)v29 + 1) = 0;
    v29[16] = 0;
    v91 = v29;
    LODWORD(v92) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v93, "StringView", &v91);
  if ((_DWORD)v92 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v92])(v90, &v91);
  (*((void (**)(const char **))v93 + 5))(&v93);
  (*((void (**)(const char **))v93 + 5))(&v93);
  v37 = v94;
  if (!v94)
  {
    v86 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v94, v95, (uint64_t *)&v86);
  v37 = v94;
  if (v94 != (WTF *)v96)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  if (a6 == -8)
  {
    v39 = "I8";
    v40 = 3;
  }
  else
  {
    if (a6 != -9)
    {
      __break(0xC471u);
      goto LABEL_57;
    }
    v39 = "I16";
    v40 = 4;
  }
  v93 = (const char *)off_1E3572250;
  v94 = (WTF *)v96;
  v95 = xmmword_199122F80;
  v96[0] = 0;
  if (a7)
  {
    v41 = a8 - 1;
    if (!a8)
      v41 = 0;
    WTF::StringImpl::utf8ForCharacters(a7, v41, (uint64_t)&v91, v38);
  }
  else
  {
    v42 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v42 = 1;
    *((_QWORD *)v42 + 1) = 0;
    v42[16] = 0;
    v91 = v42;
    LODWORD(v92) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v93, "StringView", &v91);
  if ((_DWORD)v92 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v92])(v90, &v91);
  (*((void (**)(const char **))v93 + 5))(&v93);
  (*((void (**)(const char **))v93 + 5))(&v93);
  v50 = v94;
  if (!v94)
  {
    v85 = 0;
    goto LABEL_40;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v94, v95, (uint64_t *)&v85);
  v50 = v94;
  if (v94 != (WTF *)v96)
LABEL_40:
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  v93 = "WebAssembly.Module doesn't parse at byte ";
  v94 = (WTF *)42;
  v91 = ": ";
  v92 = 3;
  v90[0] = (uint64_t)v39;
  v90[1] = v40;
  v89 = v16;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t *)&v93, &v89, (uint64_t *)&v91, (uint64_t *)&v87, (uint64_t *)&v86, v90, (uint64_t *)&v85, &v88);
  if (!v88)
  {
    __break(0xC471u);
LABEL_57:
    JUMPOUT(0x198CB8284);
  }
  *a9 = v88;
  v88 = 0;
  v58 = v85;
  v85 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v86;
  v86 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v87;
  v87 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,char [19],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  double v31;
  float v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  double v41;
  float v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  int v144;
  char v145;
  void (**v146)(WTF::StringPrintStream *__hidden);
  WTF *v147;
  __int128 v148;
  _BYTE v149[128];
  void (**v150)(WTF::StringPrintStream *__hidden);
  WTF *v151;
  __int128 v152;
  _BYTE v153[128];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v146 = off_1E3572250;
  v147 = (WTF *)v149;
  v148 = xmmword_199122F80;
  v149[0] = 0;
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v143, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v143 = (WTF::StringImpl *)v14;
    v144 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v150, "StringView", &v143);
  if (v144 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v144])(&v142, &v143);
  v150[5]((WTF::StringPrintStream *)&v150);
  v150[5]((WTF::StringPrintStream *)&v150);
  v22 = v151;
  if (!v151)
  {
    v143 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v143);
  v22 = v151;
  if (v151 != (WTF *)v153)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " arrayref to type ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v30 = v151;
  if (!v151)
  {
    v142 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v142);
  v30 = v151;
  if (v151 != (WTF *)v153)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v141, a2, a4, v31, v32);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " expected ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v40 = v151;
  if (!v151)
  {
    v140 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v140);
  v40 = v151;
  if (v151 != (WTF *)v153)
LABEL_22:
    WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v139, a2, a5, v41, v42);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v146[4])(&v146);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v150, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v150);
  if ((_DWORD)v151 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v151])(&v145, &v150);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v143, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v142, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v141, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v140, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v43, (WTF::PrintStream *)&v139, v78, v79, v80, v81, v82, v83, v84, v85);
  v146[5]((WTF::StringPrintStream *)&v146);
  v93 = v139;
  v139 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v140;
  v140 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v141;
  v141 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v147;
  if (v147)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v147, v148, (uint64_t *)&v150);
    v98 = v147;
    *a1 = v150;
    if (v98 == (WTF *)v149)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v98, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [17],unsigned int,char [47]>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  char v93;
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  void (**v98)(WTF::StringPrintStream *__hidden);
  unint64_t v99;
  __int128 v100;
  _BYTE v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%s", "array.set index ");
  v98[5]((WTF::StringPrintStream *)&v98);
  v11 = v99;
  if (!v99)
  {
    v92 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v92);
  v11 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_5:
    WTF::fastFree(v11, v4, v5, v6, v7, v8, v9, v10);
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%u", *a2);
  v98[5]((WTF::StringPrintStream *)&v98);
  v19 = v99;
  if (!v99)
  {
    v91 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v91);
  v19 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_10:
    WTF::fastFree(v19, v12, v13, v14, v15, v16, v17, v18);
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%s", " does not reference a mutable array definition");
  v98[5]((WTF::StringPrintStream *)&v98);
  v27 = v99;
  if (!v99)
  {
    v90 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v90);
  v27 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_15:
    WTF::fastFree(v27, v20, v21, v22, v23, v24, v25, v26);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v94[4])(&v94);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v98, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v98);
  if ((_DWORD)v99 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v99])(&v93, &v98);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v92, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v91, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v90, v47, v48, v49, v50, v51, v52, v53, v54);
  v94[5]((WTF::StringPrintStream *)&v94);
  v62 = v90;
  v90 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = v91;
  v91 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = v92;
  v92 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = v95;
  if (v95)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v98);
    v65 = v95;
    *a1 = v98;
    if (v65 == (WTF *)v97)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v65, v55, v56, v57, v58, v59, v60, v61);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.set arrayref to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [25],JSC::Wasm::Type,char [19]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "array.len value to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected arrayref");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [18],unsigned int,char [47]>(void (***a1)(WTF::StringPrintStream *__hidden this), const char *a2, _DWORD *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  WTF::PrintStream *v30;
  float v31;
  double v32;
  const WTF::String *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  char v94;
  void (**v95)(WTF::StringPrintStream *__hidden);
  WTF *v96;
  __int128 v97;
  _BYTE v98[128];
  void (**v99)(WTF::StringPrintStream *__hidden);
  unint64_t v100;
  __int128 v101;
  _BYTE v102[128];
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v95 = off_1E3572250;
  v96 = (WTF *)v98;
  v97 = xmmword_199122F80;
  v98[0] = 0;
  v99 = off_1E3572250;
  v100 = (unint64_t)v102;
  v101 = xmmword_199122F80;
  v102[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v99, "%s", a2);
  v99[5]((WTF::StringPrintStream *)&v99);
  v12 = v100;
  if (!v100)
  {
    v93 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v100, v101, (uint64_t *)&v93);
  v12 = v100;
  if ((_BYTE *)v100 != v102)
LABEL_5:
    WTF::fastFree(v12, v5, v6, v7, v8, v9, v10, v11);
  v99 = off_1E3572250;
  v100 = (unint64_t)v102;
  v101 = xmmword_199122F80;
  v102[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v99, "%u", *a3);
  v99[5]((WTF::StringPrintStream *)&v99);
  v20 = v100;
  if (!v100)
  {
    v92 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v100, v101, (uint64_t *)&v92);
  v20 = v100;
  if ((_BYTE *)v100 != v102)
LABEL_10:
    WTF::fastFree(v20, v13, v14, v15, v16, v17, v18, v19);
  v99 = off_1E3572250;
  v100 = (unint64_t)v102;
  v101 = xmmword_199122F80;
  v102[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v99, "%s", " does not reference a mutable array definition");
  v99[5]((WTF::StringPrintStream *)&v99);
  v28 = v100;
  if (!v100)
  {
    v91 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v100, v101, (uint64_t *)&v91);
  v28 = v100;
  if ((_BYTE *)v100 != v102)
LABEL_15:
    WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
  v29 = (WTF *)((uint64_t (*)(_QWORD))v95[4])(&v95);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v29 + 32))(v29);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v99, v31);
  WTF::printExpectedCStringHelper(v30, "StringView", &v99);
  if ((_DWORD)v100 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v100])(&v94, &v99);
  v32 = (*(double (**)(WTF *))(*(_QWORD *)v29 + 40))(v29);
  WTF::printInternal(v29, (WTF::PrintStream *)&v93, v33, v34, v35, v36, v37, v38, v32, v39);
  WTF::printInternal(v29, (WTF::PrintStream *)&v92, v40, v41, v42, v43, v44, v45, v46, v47);
  WTF::printInternal(v29, (WTF::PrintStream *)&v91, v48, v49, v50, v51, v52, v53, v54, v55);
  v95[5]((WTF::StringPrintStream *)&v95);
  v63 = v91;
  v91 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = v92;
  v92 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = v93;
  v93 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = v96;
  if (v96)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v96, v97, (uint64_t *)&v99);
    v66 = v96;
    *a1 = v99;
    if (v66 == (WTF *)v98)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v66, v56, v57, v58, v59, v60, v61, v62);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [27],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "array.fill offset to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [26],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.fill value to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [22],unsigned int,char [44],unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  WTF::PrintStream *v39;
  float v40;
  double v41;
  const WTF::String *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  const WTF::String *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  char v121;
  void (**v122)(WTF::StringPrintStream *__hidden);
  WTF *v123;
  __int128 v124;
  _BYTE v125[128];
  void (**v126)(WTF::StringPrintStream *__hidden);
  WTF *v127;
  __int128 v128;
  _BYTE v129[128];
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v122 = off_1E3572250;
  v123 = (WTF *)v125;
  v124 = xmmword_199122F80;
  v125[0] = 0;
  v126 = off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v126, "%s", "array.copy src index ");
  v126[5]((WTF::StringPrintStream *)&v126);
  v13 = v127;
  if (!v127)
  {
    v120 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v120);
  v13 = v127;
  if (v127 != (WTF *)v129)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  v126 = off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v126, "%u", *a2);
  v126[5]((WTF::StringPrintStream *)&v126);
  v21 = v127;
  if (!v127)
  {
    v119 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v119);
  v21 = v127;
  if (v127 != (WTF *)v129)
LABEL_10:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v126 = off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v126, "%s", " does not reference a subtype of dst index ");
  v126[5]((WTF::StringPrintStream *)&v126);
  v29 = v127;
  if (!v127)
  {
    v118 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v118);
  v29 = v127;
  if (v127 != (WTF *)v129)
LABEL_15:
    WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
  v126 = off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v126, "%u", *a3);
  v126[5]((WTF::StringPrintStream *)&v126);
  v37 = v127;
  if (!v127)
  {
    v117 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v117);
  v37 = v127;
  if (v127 != (WTF *)v129)
LABEL_20:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v38 = (WTF *)((uint64_t (*)(_QWORD))v122[4])(&v122);
  v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v38 + 32))(v38);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v126, v40);
  WTF::printExpectedCStringHelper(v39, "StringView", &v126);
  if ((_DWORD)v127 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v127])(&v121, &v126);
  v41 = (*(double (**)(WTF *))(*(_QWORD *)v38 + 40))(v38);
  WTF::printInternal(v38, (WTF::PrintStream *)&v120, v42, v43, v44, v45, v46, v47, v41, v48);
  WTF::printInternal(v38, (WTF::PrintStream *)&v119, v49, v50, v51, v52, v53, v54, v55, v56);
  WTF::printInternal(v38, (WTF::PrintStream *)&v118, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v38, (WTF::PrintStream *)&v117, v65, v66, v67, v68, v69, v70, v71, v72);
  v122[5]((WTF::StringPrintStream *)&v122);
  v80 = v117;
  v117 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  v81 = v118;
  v118 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      *(_DWORD *)v81 -= 2;
    }
  }
  v82 = v119;
  v119 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
  v83 = v120;
  v120 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = v123;
  if (v123)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v123, v124, (uint64_t *)&v126);
    v84 = v123;
    *a1 = v126;
    if (v84 == (WTF *)v125)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v84, v73, v74, v75, v76, v77, v78, v79);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [62],JSC::Wasm::Type,char [57],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.init_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.init_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [23],unsigned int,char [63]>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  char v93;
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  void (**v98)(WTF::StringPrintStream *__hidden);
  unint64_t v99;
  __int128 v100;
  _BYTE v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%s", "array.init_data index ");
  v98[5]((WTF::StringPrintStream *)&v98);
  v11 = v99;
  if (!v99)
  {
    v92 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v92);
  v11 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_5:
    WTF::fastFree(v11, v4, v5, v6, v7, v8, v9, v10);
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%u", *a2);
  v98[5]((WTF::StringPrintStream *)&v98);
  v19 = v99;
  if (!v99)
  {
    v91 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v91);
  v19 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_10:
    WTF::fastFree(v19, v12, v13, v14, v15, v16, v17, v18);
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%s", " must refer to an array definition with numeric or vector type");
  v98[5]((WTF::StringPrintStream *)&v98);
  v27 = v99;
  if (!v99)
  {
    v90 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v90);
  v27 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_15:
    WTF::fastFree(v27, v20, v21, v22, v23, v24, v25, v26);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v94[4])(&v94);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v98, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v98);
  if ((_DWORD)v99 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v99])(&v93, &v98);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v92, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v91, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v90, v47, v48, v49, v50, v51, v52, v53, v54);
  v94[5]((WTF::StringPrintStream *)&v94);
  v62 = v90;
  v90 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = v91;
  v91 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = v92;
  v92 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = v95;
  if (v95)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v98);
    v65 = v95;
    *a1 = v98;
    if (v65 == (WTF *)v97)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v65, v55, v56, v57, v58, v59, v60, v61);
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, _QWORD *a8@<X8>, float a9@<S1>, char *a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14)
{
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  float v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  float v57;
  unsigned int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  float v76;
  unsigned int v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  int *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  unint64_t v172;
  const char *v173;
  int v174;
  const char *v175;
  WTF *v176;
  __int128 v177;
  _BYTE v178[128];
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v19 = *a2;
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  if (__src)
  {
    v20 = a3 - 1;
    if (!a3)
      v20 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v20, (uint64_t)&v173, a9);
  }
  else
  {
    v21 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 8) = 0;
    *(_BYTE *)(v21 + 16) = 0;
    v173 = (const char *)v21;
    v174 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v175, "StringView", &v173);
  if (v174 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v174])(&v172, &v173);
  (*((void (**)(const char **))v175 + 5))(&v175);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v29 = v176;
  if (!v176)
  {
    v163 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v163);
  v29 = v176;
  if (v176 != (WTF *)v178)
LABEL_12:
    WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v175, "%u", a4);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v37 = v176;
  if (!v176)
  {
    v162 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v162);
  v37 = v176;
  if (v176 != (WTF *)v178)
LABEL_17:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  if (a5)
  {
    v39 = a6 - 1;
    if (!a6)
      v39 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v39, (uint64_t)&v173, v38);
  }
  else
  {
    v40 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = 0;
    *(_BYTE *)(v40 + 16) = 0;
    v173 = (const char *)v40;
    v174 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v175, "StringView", &v173);
  if (v174 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v174])(&v172, &v173);
  (*((void (**)(const char **))v175 + 5))(&v175);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v48 = v176;
  if (!v176)
  {
    v161 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v161);
  v48 = v176;
  if (v176 != (WTF *)v178)
LABEL_29:
    WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v175, "%u", a7);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v56 = v176;
  if (!v176)
  {
    v160 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v160);
  v56 = v176;
  if (v176 != (WTF *)v178)
LABEL_34:
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  if (a10)
  {
    v58 = a11 - 1;
    if (!a11)
      v58 = 0;
    WTF::StringImpl::utf8ForCharacters(a10, v58, (uint64_t)&v173, v57);
  }
  else
  {
    v59 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v59 = 1;
    *(_QWORD *)(v59 + 8) = 0;
    *(_BYTE *)(v59 + 16) = 0;
    v173 = (const char *)v59;
    v174 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v175, "StringView", &v173);
  if (v174 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v174])(&v172, &v173);
  (*((void (**)(const char **))v175 + 5))(&v175);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v67 = v176;
  if (!v176)
  {
    v159 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v159);
  v67 = v176;
  if (v176 != (WTF *)v178)
LABEL_46:
    WTF::fastFree((unint64_t)v67, v60, v61, v62, v63, v64, v65, v66);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v175, "%lu", a12);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v75 = v176;
  if (!v176)
  {
    v158 = 0;
    goto LABEL_51;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v158);
  v75 = v176;
  if (v176 != (WTF *)v178)
LABEL_51:
    WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  if (a13)
  {
    v77 = a14 - 1;
    if (!a14)
      v77 = 0;
    WTF::StringImpl::utf8ForCharacters(a13, v77, (uint64_t)&v173, v76);
  }
  else
  {
    v78 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v78 = 1;
    *(_QWORD *)(v78 + 8) = 0;
    *(_BYTE *)(v78 + 16) = 0;
    v173 = (const char *)v78;
    v174 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v175, "StringView", &v173);
  if (v174 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v174])(&v172, &v173);
  (*((void (**)(const char **))v175 + 5))(&v175);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v86 = v176;
  if (!v176)
  {
    v157 = 0;
    goto LABEL_63;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v157);
  v86 = v176;
  if (v176 != (WTF *)v178)
LABEL_63:
    WTF::fastFree((unint64_t)v86, v79, v80, v81, v82, v83, v84, v85);
  v175 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v176) = 41;
  v172 = v19;
  v173 = ": ";
  v174 = 2;
  v170 = v162;
  v171 = v163;
  v168 = v160;
  v169 = v161;
  v166 = v158;
  v167 = v159;
  v165 = v157;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v175, &v172, (uint64_t)&v173, (uint64_t *)&v171, (uint64_t *)&v170, (uint64_t *)&v169, (uint64_t *)&v168, (uint64_t *)&v167, &v164, (uint64_t *)&v166, (uint64_t *)&v165);
  if (v164)
  {
    *a8 = v164;
    v164 = 0;
    v94 = v157;
    v157 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
      {
        WTF::StringImpl::~StringImpl(v94, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
      }
      else
      {
        *(_DWORD *)v94 -= 2;
      }
    }
    v95 = v158;
    v158 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::~StringImpl(v95, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
      else
      {
        *(_DWORD *)v95 -= 2;
      }
    }
    v96 = v159;
    v159 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
      {
        WTF::StringImpl::~StringImpl(v96, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
      }
      else
      {
        *(_DWORD *)v96 -= 2;
      }
    }
    v97 = v160;
    v160 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    v98 = v161;
    v161 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::~StringImpl(v98, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
      }
      else
      {
        *(_DWORD *)v98 -= 2;
      }
    }
    v99 = v162;
    v162 = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
      {
        WTF::StringImpl::~StringImpl(v99, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
      }
      else
      {
        *(_DWORD *)v99 -= 2;
      }
    }
    v100 = v163;
    v163 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
      {
        WTF::StringImpl::~StringImpl(v100, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
      }
      else
      {
        *(_DWORD *)v100 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,JSC::Wasm::StorageType>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, _QWORD *a8@<X8>, float a9@<S1>, char *a10, uint64_t a11, unsigned __int8 *a12)
{
  unint64_t v17;
  unsigned int v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  float v36;
  unsigned int v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  float v55;
  unsigned int v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  int v66;
  const char *String;
  uint64_t v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int *v126;
  unint64_t v127;
  uint64_t v128[2];
  const char *v129;
  uint64_t v130;
  const char *v131;
  WTF *v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v17 = *a2;
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  if (__src)
  {
    v18 = a3 - 1;
    if (!a3)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v18, (uint64_t)&v129, a9);
  }
  else
  {
    v19 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *((_QWORD *)v19 + 1) = 0;
    v19[16] = 0;
    v129 = v19;
    LODWORD(v130) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v131, "StringView", &v129);
  if ((_DWORD)v130 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v130])(v128, &v129);
  (*((void (**)(const char **))v131 + 5))(&v131);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v27 = v132;
  if (!v132)
  {
    v125 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v125);
  v27 = v132;
  if (v132 != (WTF *)v134)
LABEL_12:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%u", a4);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v35 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v124);
  v35 = v132;
  if (v132 != (WTF *)v134)
LABEL_17:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  if (a5)
  {
    v37 = a6 - 1;
    if (!a6)
      v37 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v37, (uint64_t)&v129, v36);
  }
  else
  {
    v38 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v38 = 1;
    *((_QWORD *)v38 + 1) = 0;
    v38[16] = 0;
    v129 = v38;
    LODWORD(v130) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v131, "StringView", &v129);
  if ((_DWORD)v130 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v130])(v128, &v129);
  (*((void (**)(const char **))v131 + 5))(&v131);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v46 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v123);
  v46 = v132;
  if (v132 != (WTF *)v134)
LABEL_29:
    WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%u", a7);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v54 = v132;
  if (!v132)
  {
    v122 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v122);
  v54 = v132;
  if (v132 != (WTF *)v134)
LABEL_34:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  if (a10)
  {
    v56 = a11 - 1;
    if (!a11)
      v56 = 0;
    WTF::StringImpl::utf8ForCharacters(a10, v56, (uint64_t)&v129, v55);
  }
  else
  {
    v57 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v57 = 1;
    *((_QWORD *)v57 + 1) = 0;
    v57[16] = 0;
    v129 = v57;
    LODWORD(v130) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v131, "StringView", &v129);
  if ((_DWORD)v130 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v130])(v128, &v129);
  (*((void (**)(const char **))v131 + 5))(&v131);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v65 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v121);
  v65 = v132;
  if (v132 != (WTF *)v134)
LABEL_46:
    WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
  if (*((_DWORD *)a12 + 4))
  {
    v66 = *a12;
    if (v66 == 248)
    {
      String = "I8";
      v68 = 3;
    }
    else
    {
      if (v66 != 247)
      {
LABEL_75:
        __break(0xC471u);
        JUMPOUT(0x198CBB164);
      }
      String = "I16";
      v68 = 4;
    }
  }
  else
  {
    String = JSC::Wasm::makeString((char)*a12);
  }
  v131 = "WebAssembly.Module doesn't parse at byte ";
  v132 = (WTF *)42;
  v129 = ": ";
  v130 = 3;
  v128[0] = (uint64_t)String;
  v128[1] = v68;
  v127 = v17;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::ASCIILiteral>((uint64_t *)&v131, &v127, (uint64_t *)&v129, (uint64_t *)&v125, (uint64_t *)&v124, (uint64_t *)&v123, (uint64_t *)&v122, (uint64_t *)&v121, &v126, v128);
  if (!v126)
    goto LABEL_75;
  *a8 = v126;
  v126 = 0;
  v76 = v121;
  v121 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
  v77 = v122;
  v122 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  v78 = v123;
  v123 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  v79 = v124;
  v124 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  v80 = v125;
  v125 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseStructFieldManipulation(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6, float a7)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::HandleSet *v30;
  _QWORD *v31;
  uint64_t **v32;
  uint64_t *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  const JSC::Wasm::Type *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  float v52;
  JSC::Wasm::TypeDefinition *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t v68;
  uint64_t **v69;
  uint64_t *v70;
  void (**v71)(WTF::StringPrintStream *__hidden);
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned int *v80;
  WTF *v81;
  unint64_t v82;
  unint64_t CachedUnrolling;
  char v84;
  uint64_t *v85;
  uint64_t *v86;
  const JSC::Wasm::TypeDefinition *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::Wasm::TypeInformation *v93;
  _QWORD v94[2];
  __int128 v95;
  const char *v96;
  uint64_t v97;
  void (**v98)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v99;
  _OWORD v100[2];
  uint64_t v101;
  uint64_t *v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t *v106[2];
  unsigned int v107[2];
  _QWORD v108[2];

  v108[0] = a4;
  v108[1] = a5;
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseStructTypeIndexAndFieldIndex((uint64_t)&v103, (unint64_t *)a2, v107, a4, a5, a6, a7);
  if (BYTE8(v103))
  {
    *(_QWORD *)a1 = v103;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v103 = JSC::Wasm::Types::Void;
  LOBYTE(v104) = 1;
  *((_QWORD *)&v104 + 1) = 0;
  v106[0] = 0;
  if (!*(_DWORD *)(a2 + 68))
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "struct reference", 17, v100, v16);
    *(_QWORD *)a1 = *(_QWORD *)&v100[0];
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_22;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)v100, a2 + 56, v10, v11, v12, v13, v14, v15);
  v103 = v100[0];
  v104 = v100[1];
  v105 = v101;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(v106, &v102, v17, v18, v19, v20, v21, v22);
  if (v102)
  {
    v76 = v102 - 2;
    v77 = *(_QWORD *)(((unint64_t)(v102 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v78 = (uint64_t *)*(v102 - 1);
    if (v78)
    {
      v79 = *v76;
      *v78 = *v76;
      *(_QWORD *)(v79 + 8) = v78;
      *v76 = 0;
      v76[1] = 0;
    }
    *v76 = *(_QWORD *)(v77 + 40);
    *(_QWORD *)(v77 + 40) = v76;
  }
  if (v106[0])
  {
    v30 = *(JSC::HandleSet **)(((unint64_t)(v106[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v31 = (_QWORD *)*((_QWORD *)v30 + 5);
    if (!v31)
    {
      JSC::HandleSet::grow(v30, v23, v24, v25, v26, v27, v28, v29);
      v31 = (_QWORD *)*((_QWORD *)v30 + 5);
    }
    *((_QWORD *)v30 + 5) = *v31;
    v31[2] = 0;
    v32 = (uint64_t **)(v31 + 2);
    *v31 = 0;
    v31[1] = 0;
    v33 = v106[0];
    if (v106[0])
    {
      v33 = (uint64_t *)*v106[0];
      if (*v106[0])
      {
        v85 = *(uint64_t **)(((unint64_t)(v32 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v86 = (uint64_t *)v85[3];
        v85 += 3;
        *(v32 - 2) = v86;
        *(v32 - 1) = v85;
        *v85 = (uint64_t)(v32 - 2);
        v86[1] = (uint64_t)(v32 - 2);
      }
    }
    *v32 = v33;
  }
  else
  {
    v32 = 0;
  }
  *(_QWORD *)&v100[0] = "WasmFunctionParser.h:";
  DWORD2(v100[0]) = 21;
  LODWORD(v96) = 1581;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v100, (unsigned int *)&v96, (int **)&v99);
  v41 = v99;
  if (!v99)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x198CBB59CLL);
  }
  v99 = 0;
  if (*(_DWORD *)v41 == 2)
  {
    WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    if (!v32)
      goto LABEL_15;
  }
  else
  {
    *(_DWORD *)v41 -= 2;
    if (!v32)
      goto LABEL_15;
  }
  v67 = v32 - 2;
  v68 = *(_QWORD *)(((unint64_t)(v32 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v69 = (uint64_t **)*(v32 - 1);
  if (v69)
  {
    v70 = *v67;
    *v69 = *v67;
    v70[1] = (uint64_t)v69;
    *v67 = 0;
    *(v32 - 1) = 0;
  }
  *v67 = *(uint64_t **)(v68 + 40);
  *(_QWORD *)(v68 + 40) = v67;
LABEL_15:
  v42 = *(_QWORD *)(a2 + 26480);
  v43 = v107[0];
  if (*(_DWORD *)(v42 + 100) <= v107[0])
    goto LABEL_43;
  v44 = *(_QWORD *)(v42 + 88);
  *(_QWORD *)&v100[0] = 227;
  *((_QWORD *)&v100[0] + 1) = *(_QWORD *)(v44 + 8 * v107[0]);
  if ((JSC::Wasm::isSubtype(v103, *((unint64_t *)&v103 + 1), 227, *((unint64_t *)&v100[0] + 1), v37, v38, v39, v40) & 1) != 0)
  {
    v53 = *(JSC::Wasm::TypeDefinition **)(v44 + 8 * v43);
    if (*((_DWORD *)v53 + 8) == 4)
    {
      v93 = *(JSC::Wasm::TypeInformation **)(v44 + 8 * v43);
      v80 = (unsigned int *)*((_QWORD *)v53 + 1);
      v81 = *(WTF **)v80;
      v53 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v80 + 8) + 8 * v80[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v53))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v93, v82, v45, v46, (uint64_t)v47, v48, v49, v50);
        if (v84)
        {
          v53 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v53 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v53, v81, v45, v46, v47, v48, v49, v50);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v93, v53, v87, v88, v89, v90, v91, v92);
        }
      }
    }
    v54 = *((_DWORD *)v53 + 8);
    if (v54 == 5)
    {
      v53 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v53 + 1);
      v54 = *((_DWORD *)v53 + 8);
    }
    if (v54 == 1)
    {
      *(_OWORD *)(a3 + 8) = v103;
      *(_OWORD *)(a3 + 24) = v104;
      *(_QWORD *)(a3 + 40) = v105;
      JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(a3 + 48), v106, v45, v46, (uint64_t)v47, v48, v49, v50);
      v55 = v107[1];
      *(_DWORD *)a3 = v43;
      *(_DWORD *)(a3 + 4) = v55;
      v56 = *((_QWORD *)v53 + 1) + 32 * v55;
      v57 = *(_BYTE *)(v56 + 24);
      v58 = *(_QWORD *)(v56 + 16);
      *(_OWORD *)(a3 + 56) = *(_OWORD *)v56;
      *(_QWORD *)(a3 + 72) = v58;
      *(_BYTE *)(a3 + 80) = v57;
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      goto LABEL_22;
    }
    v96 = " type index points into a non struct type";
    v97 = 42;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v95, (uint64_t)v108, (uint64_t)&v96, v51, v52);
    v71 = (void (**)(WTF::StringPrintStream *__hidden))v95;
  }
  else
  {
    v96 = " structref to type ";
    v97 = 20;
    v95 = v103;
    v94[0] = " expected ";
    v94[1] = 11;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v98, a2, (uint64_t)v108, (uint64_t)&v96, (unsigned __int8 *)&v95, (uint64_t)v94, (unsigned __int8 *)v100, *(double *)&v103, v52);
    v71 = v98;
  }
  *(_QWORD *)a1 = v71;
  *(_BYTE *)(a1 + 8) = 1;
LABEL_22:
  if (v106[0])
  {
    v72 = v106[0] - 2;
    v73 = *(_QWORD *)(((unint64_t)(v106[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v74 = (uint64_t *)*(v106[0] - 1);
    if (v74)
    {
      v75 = *v72;
      *v74 = *v72;
      *(_QWORD *)(v75 + 8) = v74;
      *v72 = 0;
      v72[1] = 0;
    }
    *v72 = *(_QWORD *)(v73 + 40);
    *(_QWORD *)(v73 + 40) = v72;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  double v37;
  float v38;
  float v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF::PrintStream *v52;
  float v53;
  double v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  char v135;
  void (**v136)(WTF::StringPrintStream *__hidden);
  WTF *v137;
  __int128 v138;
  _BYTE v139[128];
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v136 = off_1E3572250;
  v137 = (WTF *)v139;
  v138 = xmmword_199122F80;
  v139[0] = 0;
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v133, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v133 = (WTF::StringImpl *)v16;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v132, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v24 = v141;
  if (!v141)
  {
    v132 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v132);
  v24 = v141;
  if (v141 != (WTF *)v143)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a4)
  {
    v26 = *(_QWORD *)(a4 + 8);
    v14 = v26 != 0;
    v27 = v26 - 1;
    if (!v14)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v27, (uint64_t)&v133, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v133 = (WTF::StringImpl *)v28;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v131, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v36 = v141;
  if (!v141)
  {
    v131 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v131);
  v36 = v141;
  if (v141 != (WTF *)v143)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v130, a2, a5, v37, v38);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a6)
  {
    v40 = *(_QWORD *)(a6 + 8);
    v14 = v40 != 0;
    v41 = v40 - 1;
    if (!v14)
      v41 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v41, (uint64_t)&v133, v39);
  }
  else
  {
    v42 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = 0;
    *(_BYTE *)(v42 + 16) = 0;
    v133 = (WTF::StringImpl *)v42;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v135, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v50 = v141;
  if (!v141)
  {
    v133 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v133);
  v50 = v141;
  if (v141 != (WTF *)v143)
LABEL_36:
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  v51 = (WTF *)((uint64_t (*)(_QWORD))v136[4])(&v136);
  v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v51 + 32))(v51);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v140, v53);
  WTF::printExpectedCStringHelper(v52, "StringView", &v140);
  if ((_DWORD)v141 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v141])(&v135, &v140);
  v54 = (*(double (**)(WTF *))(*(_QWORD *)v51 + 40))(v51);
  WTF::printInternal(v51, (WTF::PrintStream *)&v132, v55, v56, v57, v58, v59, v60, v54, v61);
  WTF::printInternal(v51, (WTF::PrintStream *)&v131, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v51, (WTF::PrintStream *)&v130, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v51, (WTF::PrintStream *)&v133, v78, v79, v80, v81, v82, v83, v84, v85);
  v136[5]((WTF::StringPrintStream *)&v136);
  v93 = v133;
  v133 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v130;
  v130 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v131;
  v131 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v132;
  v132 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v137;
  if (v137)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v137, v138, (uint64_t *)&v140);
    v97 = v137;
    *a1 = v140;
    if (v97 == (WTF *)v139)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v97, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  double v23;
  float v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF::PrintStream *v38;
  float v39;
  double v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  char v103;
  void (**v104)(WTF::StringPrintStream *__hidden);
  WTF *v105;
  __int128 v106;
  _BYTE v107[128];
  void (**v108)(WTF::StringPrintStream *__hidden);
  WTF *v109;
  __int128 v110;
  _BYTE v111[128];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v104 = off_1E3572250;
  v105 = (WTF *)v107;
  v106 = xmmword_199122F80;
  v107[0] = 0;
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v101, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v101 = (WTF::StringImpl *)v14;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v100, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v22 = v109;
  if (!v109)
  {
    v100 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v100);
  v22 = v109;
  if (v109 != (WTF *)v111)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v99, a2, a4, v23, v24);
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a5)
  {
    v26 = *(_QWORD *)(a5 + 8);
    v12 = v26 != 0;
    v27 = v26 - 1;
    if (!v12)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v27, (uint64_t)&v101, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v101 = (WTF::StringImpl *)v28;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v103, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v36 = v109;
  if (!v109)
  {
    v101 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v101);
  v36 = v109;
  if (v109 != (WTF *)v111)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v37 = (WTF *)((uint64_t (*)(_QWORD))v104[4])(&v104);
  v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v37 + 32))(v37);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v108, v39);
  WTF::printExpectedCStringHelper(v38, "StringView", &v108);
  if ((_DWORD)v109 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v109])(&v103, &v108);
  v40 = (*(double (**)(WTF *))(*(_QWORD *)v37 + 40))(v37);
  WTF::printInternal(v37, (WTF::PrintStream *)&v100, v41, v42, v43, v44, v45, v46, v40, v47);
  WTF::printInternal(v37, (WTF::PrintStream *)&v99, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v37, (WTF::PrintStream *)&v101, v56, v57, v58, v59, v60, v61, v62, v63);
  v104[5]((WTF::StringPrintStream *)&v104);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v99;
  v99 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v100;
  v100 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v105;
  if (v105)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v105, v106, (uint64_t *)&v108);
    v74 = v105;
    *a1 = v108;
    if (v74 == (WTF *)v107)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, double a4, float a5)
{
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  WTF::PrintStream *v32;
  float v33;
  double v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  const WTF::String *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  float v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  char v79;
  void (**v80)(WTF::StringPrintStream *__hidden);
  WTF *v81;
  __int128 v82;
  _BYTE v83[128];
  void (**v84)(WTF::StringPrintStream *__hidden);
  WTF *v85;
  __int128 v86;
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v80 = off_1E3572250;
  v81 = (WTF *)v83;
  v82 = xmmword_199122F80;
  v83[0] = 0;
  v84 = off_1E3572250;
  v85 = (WTF *)v87;
  v86 = xmmword_199122F80;
  v87[0] = 0;
  if (*(_QWORD *)a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 != 0;
    v9 = v7 - 1;
    if (!v8)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v9, (uint64_t)&v77, a5);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 0;
    v77 = (WTF::StringImpl *)v10;
    v78 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v84, "StringView", &v77);
  if (v78 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v78])(&v76, &v77);
  v84[5]((WTF::StringPrintStream *)&v84);
  v84[5]((WTF::StringPrintStream *)&v84);
  v18 = v85;
  if (!v85)
  {
    v76 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v85, v86, (uint64_t *)&v76);
  v18 = v85;
  if (v85 != (WTF *)v87)
LABEL_12:
    WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
  v84 = off_1E3572250;
  v85 = (WTF *)v87;
  v86 = xmmword_199122F80;
  v87[0] = 0;
  if (*(_QWORD *)a3)
  {
    v20 = *(_QWORD *)(a3 + 8);
    v8 = v20 != 0;
    v21 = v20 - 1;
    if (!v8)
      v21 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v21, (uint64_t)&v77, v19);
  }
  else
  {
    v22 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = 0;
    *(_BYTE *)(v22 + 16) = 0;
    v77 = (WTF::StringImpl *)v22;
    v78 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v84, "StringView", &v77);
  if (v78 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v78])(&v79, &v77);
  v84[5]((WTF::StringPrintStream *)&v84);
  v84[5]((WTF::StringPrintStream *)&v84);
  v30 = v85;
  if (!v85)
  {
    v77 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v85, v86, (uint64_t *)&v77);
  v30 = v85;
  if (v85 != (WTF *)v87)
LABEL_24:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v31 = (WTF *)((uint64_t (*)(_QWORD))v80[4])(&v80);
  v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v31 + 32))(v31);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v84, v33);
  WTF::printExpectedCStringHelper(v32, "StringView", &v84);
  if ((_DWORD)v85 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v85])(&v79, &v84);
  v34 = (*(double (**)(WTF *))(*(_QWORD *)v31 + 40))(v31);
  WTF::printInternal(v31, (WTF::PrintStream *)&v76, v35, v36, v37, v38, v39, v40, v34, v41);
  WTF::printInternal(v31, (WTF::PrintStream *)&v77, v42, v43, v44, v45, v46, v47, v48, v49);
  v80[5]((WTF::StringPrintStream *)&v80);
  v57 = v77;
  v77 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
  v58 = v76;
  v76 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v81;
  if (v81)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v81, v82, (uint64_t *)&v84);
    v59 = v81;
    *a1 = v84;
    if (v59 == (WTF *)v83)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v59, v50, v51, v52, v53, v54, v55, v56);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::atomicLoad(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  WTF::AtomStringImpl *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  char v81;
  float v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  void (**v96)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v97;
  _OWORD v98[2];
  uint64_t v99;
  uint64_t *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 26480) + 104) == -1)
  {
    *(_QWORD *)&v101 = "atomic instruction without memory";
    *((_QWORD *)&v101 + 1) = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))v98, (uint64_t)&v101, a9, a10);
    *(_QWORD *)a1 = *(_QWORD *)&v98[0];
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v101 = JSC::Wasm::Types::Void;
  LOBYTE(v102) = 1;
  *((_QWORD *)&v102 + 1) = 0;
  v104 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)a2;
  v14 = v12 > *(_QWORD *)a2;
  v15 = v12 - *(_QWORD *)a2;
  if (v14)
  {
    v16 = a3;
    v17 = 0;
    LODWORD(v18) = 0;
    v19 = 0;
    v20 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = v13 + 1;
    v21 = 5;
    if (v15 < 5)
      v21 = v15;
    v22 = v21 - 1;
    v23 = v20 + v13;
    v24 = v13 + 2;
    while (1)
    {
      v25 = *(char *)(v23 + v17);
      v19 |= (v25 & 0x7F) << v18;
      if ((v25 & 0x80000000) == 0)
        break;
      if (v22 == v17)
        goto LABEL_66;
      *(_QWORD *)a2 = v24 + v17;
      LODWORD(v18) = v18 + 7;
      if (v15 == ++v17)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    if ((_DWORD)v17 != 4 || *(unsigned __int8 *)(v23 + v17) < 0x10u)
    {
      if (v19 != JSC::Wasm::memoryLog2Alignment())
      {
        v81 = JSC::Wasm::memoryLog2Alignment();
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v81, v98, v82);
        *(_QWORD *)a1 = *(_QWORD *)&v98[0];
        *(_BYTE *)(a1 + 8) = 1;
        goto LABEL_49;
      }
      v26 = *(_QWORD *)(a2 + 16);
      v27 = *(_QWORD *)a2;
      v14 = v26 > *(_QWORD *)a2;
      v28 = v26 - *(_QWORD *)a2;
      if (!v14)
        goto LABEL_68;
      v18 = 0;
      v29 = *(_QWORD *)(a2 + 8);
      v30 = 5;
      if (v28 < 5)
        v30 = v28;
      v31 = v30 - 1;
      *(_QWORD *)a2 = v27 + 1;
      v32 = v29 + v27;
      v33 = v27 + 2;
      while (1)
      {
        LODWORD(v24) = *(char *)(v32 + v18);
        if ((v24 & 0x80000000) == 0)
          break;
        if (v31 == v18)
          goto LABEL_68;
        LOBYTE(v24) = v33 + v18;
        *(_QWORD *)a2 = v33 + v18++;
        if (v28 == v18)
          goto LABEL_21;
      }
LABEL_22:
      if ((_DWORD)v18 == 4 && v24 >= 0x10u)
      {
LABEL_68:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load offset", (unint64_t *)a2, 22, v98, a10);
        goto LABEL_47;
      }
      if (!*(_DWORD *)(a2 + 68))
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, v98, a10);
        goto LABEL_47;
      }
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)v98, a2 + 56, a3, a4, a5, a6, a7, a8);
      v101 = v98[0];
      v102 = v98[1];
      v103 = v99;
      JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v104, &v100, v34, v35, v36, v37, v38, v39);
      if (v100)
      {
        v87 = v100 - 2;
        v88 = *(_QWORD *)(((unint64_t)(v100 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v89 = (uint64_t *)*(v100 - 1);
        if (v89)
        {
          v90 = *v87;
          *v89 = *v87;
          *(_QWORD *)(v90 + 8) = v89;
          *v87 = 0;
          v87[1] = 0;
        }
        *v87 = *(_QWORD *)(v88 + 40);
        *(_QWORD *)(v88 + 40) = v87;
      }
      if (v104)
      {
        v47 = *(_QWORD *)(((unint64_t)(v104 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v48 = *(_QWORD **)(v47 + 40);
        if (!v48)
        {
          JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v104 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v40, v41, v42, v43, v44, v45, v46);
          v48 = *(_QWORD **)(v47 + 40);
        }
        *(_QWORD *)(v47 + 40) = *v48;
        v48[2] = 0;
        v49 = v48 + 2;
        *v48 = 0;
        v48[1] = 0;
        v50 = v104;
        if (v104)
        {
          v50 = (_QWORD *)*v104;
          if (*v104)
          {
            v91 = *(_QWORD **)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v92 = v91[3];
            v91 += 3;
            *(v49 - 2) = v92;
            *(v49 - 1) = v91;
            *v91 = v49 - 2;
            *(_QWORD *)(v92 + 8) = v49 - 2;
          }
        }
        *v49 = v50;
      }
      else
      {
        v49 = 0;
      }
      *(_QWORD *)&v98[0] = "WasmFunctionParser.h:";
      DWORD2(v98[0]) = 21;
      LODWORD(v96) = 616;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v98, (unsigned int *)&v96, (int **)&v97);
      v58 = v97;
      if (!v97)
      {
        __break(0xC471u);
        return;
      }
      v97 = 0;
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        if (!v49)
          goto LABEL_36;
      }
      else
      {
        *(_DWORD *)v58 -= 2;
        if (!v49)
        {
LABEL_36:
          if ((_BYTE)v101 != 0xFF)
          {
            v95 = v16;
            *(_QWORD *)&v98[0] = " pointer type mismatch";
            *((_QWORD *)&v98[0] + 1) = 23;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v96, &v95, (uint64_t)v98);
            v64 = v96;
            goto LABEL_48;
          }
          v59 = *(_QWORD *)(a2 + 48);
          if (v104)
          {
            v60 = *(_QWORD *)(((unint64_t)(v104 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v61 = *(_QWORD **)(v60 + 40);
            if (!v61)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v104 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v51, v52, v53, v54, v55, v56, v57);
              v61 = *(_QWORD **)(v60 + 40);
            }
            *(_QWORD *)(v60 + 40) = *v61;
            v61[2] = 0;
            v62 = v61 + 2;
            *v61 = 0;
            v61[1] = 0;
            v63 = v104;
            if (v104)
            {
              v63 = (_QWORD *)*v104;
              if (*v104)
              {
                v93 = *(_QWORD **)(((unint64_t)(v62 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v94 = v93[3];
                v93 += 3;
                *(v62 - 2) = v94;
                *(v62 - 1) = v93;
                *v93 = v62 - 2;
                *(_QWORD *)(v94 + 8) = v62 - 2;
              }
            }
            *v62 = v63;
            JSC::Wasm::ConstExprGenerator::fail<char const*>(v98, **(_QWORD **)v59, *(_QWORD *)(v59 + 16));
            v64 = *(void (***)(WTF::StringPrintStream *__hidden))&v98[0];
            v65 = v62 - 2;
            v66 = *(_QWORD *)(((unint64_t)(v62 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v67 = (uint64_t *)*(v62 - 1);
            if (v67)
            {
              v68 = *v65;
              *v67 = *v65;
              *(_QWORD *)(v68 + 8) = v67;
              *v65 = 0;
              *(v62 - 1) = 0;
            }
            *v65 = *(_QWORD *)(v66 + 40);
            *(_QWORD *)(v66 + 40) = v65;
            goto LABEL_48;
          }
          JSC::Wasm::ConstExprGenerator::fail<char const*>(v98, **(_QWORD **)v59, *(_QWORD *)(v59 + 16));
LABEL_47:
          v64 = *(void (***)(WTF::StringPrintStream *__hidden))&v98[0];
LABEL_48:
          *(_QWORD *)a1 = v64;
          *(_BYTE *)(a1 + 8) = 1;
          goto LABEL_49;
        }
      }
      v77 = v49 - 2;
      v78 = *(_QWORD *)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v79 = (uint64_t *)*(v49 - 1);
      if (v79)
      {
        v80 = *v77;
        *v79 = *v77;
        *(_QWORD *)(v80 + 8) = v79;
        *v77 = 0;
        *(v49 - 1) = 0;
      }
      *v77 = *(_QWORD *)(v78 + 40);
      *(_QWORD *)(v78 + 40) = v77;
      goto LABEL_36;
    }
  }
LABEL_66:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load alignment", (unint64_t *)a2, 25, v98, a10);
  *(_QWORD *)a1 = *(_QWORD *)&v98[0];
  *(_BYTE *)(a1 + 8) = 1;
LABEL_49:
  if (v104)
  {
    v83 = v104 - 2;
    v84 = *(_QWORD *)(((unint64_t)(v104 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v85 = (uint64_t *)*(v104 - 1);
    if (v85)
    {
      v86 = *v83;
      *v85 = *v83;
      *(_QWORD *)(v86 + 8) = v85;
      *v83 = 0;
      v83[1] = 0;
    }
    *v83 = *(_QWORD *)(v84 + 40);
    *(_QWORD *)(v84 + 40) = v83;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::atomicStore(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  WTF::AtomStringImpl *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  WTF::AtomStringImpl *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  void (**v95)(WTF::StringPrintStream *__hidden);
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char v124;
  float v125;
  char *v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  unsigned int v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  void (**v161)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t *v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  _QWORD *v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  _QWORD *v175;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 26480) + 104) == -1)
  {
    *(_QWORD *)&v172 = "atomic instruction without memory";
    *((_QWORD *)&v172 + 1) = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v168, (uint64_t)&v172, a9, a10);
    *(_QWORD *)a1 = v168;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v172 = JSC::Wasm::Types::Void;
  LOBYTE(v173) = 1;
  *((_QWORD *)&v173 + 1) = 0;
  v175 = 0;
  v168 = JSC::Wasm::Types::Void;
  LOBYTE(v169) = 1;
  *((_QWORD *)&v169 + 1) = 0;
  v171 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)a2;
  v14 = v12 > *(_QWORD *)a2;
  v15 = v12 - *(_QWORD *)a2;
  if (!v14)
    goto LABEL_117;
  v17 = a4;
  v18 = 0;
  LODWORD(v19) = 0;
  v20 = 0;
  v21 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v13 + 1;
  v22 = 5;
  if (v15 < 5)
    v22 = v15;
  v23 = v22 - 1;
  v24 = v21 + v13;
  v25 = v13 + 2;
  while (1)
  {
    v26 = *(char *)(v24 + v18);
    v20 |= (v26 & 0x7F) << v19;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v23 == v18)
      goto LABEL_117;
    *(_QWORD *)a2 = v25 + v18;
    LODWORD(v19) = v19 + 7;
    if (v15 == ++v18)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v18 == 4 && *(unsigned __int8 *)(v24 + v18) >= 0x10u)
  {
LABEL_117:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get store alignment", (unint64_t *)a2, 26, &v164, a10);
    *(_QWORD *)a1 = v164;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_76;
  }
  if (v20 != JSC::Wasm::memoryLog2Alignment())
  {
    v124 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v20, " does not match against atomic op's natural alignment ", 55, 1 << v124, &v164, v125);
    *(_QWORD *)a1 = v164;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_76;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v14 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v14)
    goto LABEL_119;
  v19 = 0;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = 5;
  if (v29 < 5)
    v31 = v29;
  v32 = v31 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v33 = v30 + v28;
  v34 = v28 + 2;
  while (1)
  {
    LODWORD(v25) = *(char *)(v33 + v19);
    if ((v25 & 0x80000000) == 0)
      break;
    if (v32 == v19)
      goto LABEL_119;
    LOBYTE(v25) = v34 + v19;
    *(_QWORD *)a2 = v34 + v19++;
    if (v29 == v19)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v19 == 4 && v25 >= 0x10u)
  {
LABEL_119:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get store offset", (unint64_t *)a2, 23, &v164, a10);
    goto LABEL_92;
  }
  if (!*(_DWORD *)(a2 + 68))
  {
    v126 = "store value";
    v127 = (unint64_t *)a2;
    v128 = 12;
LABEL_91:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v127, 26, v126, v128, &v164, a10);
LABEL_92:
    v95 = (void (**)(WTF::StringPrintStream *__hidden))v164;
    goto LABEL_75;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v164, a2 + 56, a3, a4, a5, a6, a7, a8);
  v172 = v164;
  v173 = v165;
  v174 = v166;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v175, &v167, v35, v36, v37, v38, v39, v40);
  if (v167)
  {
    v140 = v167 - 2;
    v141 = *(_QWORD *)(((unint64_t)(v167 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v142 = (uint64_t *)*(v167 - 1);
    if (v142)
    {
      v143 = *v140;
      *v142 = *v140;
      *(_QWORD *)(v143 + 8) = v142;
      *v140 = 0;
      v140[1] = 0;
    }
    *v140 = *(_QWORD *)(v141 + 40);
    *(_QWORD *)(v141 + 40) = v140;
  }
  if (v175)
  {
    v48 = *(_QWORD *)(((unint64_t)(v175 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v49 = *(_QWORD **)(v48 + 40);
    if (!v49)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v175 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v41, v42, v43, v44, v45, v46, v47);
      v49 = *(_QWORD **)(v48 + 40);
    }
    *(_QWORD *)(v48 + 40) = *v49;
    v49[2] = 0;
    v50 = v49 + 2;
    *v49 = 0;
    v49[1] = 0;
    v51 = v175;
    if (v175)
    {
      v51 = (_QWORD *)*v175;
      if (*v175)
      {
        v153 = *(_QWORD **)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v154 = v153[3];
        v153 += 3;
        *(v50 - 2) = v154;
        *(v50 - 1) = v153;
        *v153 = v50 - 2;
        *(_QWORD *)(v154 + 8) = v50 - 2;
      }
    }
    *v50 = v51;
  }
  else
  {
    v50 = 0;
  }
  *(_QWORD *)&v164 = "WasmFunctionParser.h:";
  DWORD2(v164) = 21;
  LODWORD(v161) = 638;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v164, (unsigned int *)&v161, (int **)&v163);
  v59 = v163;
  if (!v163)
  {
LABEL_120:
    __break(0xC471u);
    JUMPOUT(0x198CBCFA0);
  }
  v163 = 0;
  if (*(_DWORD *)v59 == 2)
  {
    WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    if (!v50)
      goto LABEL_36;
  }
  else
  {
    *(_DWORD *)v59 -= 2;
    if (!v50)
      goto LABEL_36;
  }
  v108 = v50 - 2;
  v109 = *(_QWORD *)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v110 = (uint64_t *)*(v50 - 1);
  if (v110)
  {
    v111 = *v108;
    *v110 = *v108;
    *(_QWORD *)(v111 + 8) = v110;
    *v108 = 0;
    *(v50 - 1) = 0;
  }
  *v108 = *(_QWORD *)(v109 + 40);
  *(_QWORD *)(v109 + 40) = v108;
LABEL_36:
  if (!*(_DWORD *)(a2 + 68))
  {
    v126 = "store pointer";
    v127 = (unint64_t *)a2;
    v128 = 14;
    goto LABEL_91;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v164, a2 + 56, v53, v54, v55, v56, v57, v58);
  v168 = v164;
  v169 = v165;
  v170 = v166;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v171, &v167, v60, v61, v62, v63, v64, v65);
  if (v167)
  {
    v144 = v167 - 2;
    v145 = *(_QWORD *)(((unint64_t)(v167 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v146 = (uint64_t *)*(v167 - 1);
    if (v146)
    {
      v147 = *v144;
      *v146 = *v144;
      *(_QWORD *)(v147 + 8) = v146;
      *v144 = 0;
      v144[1] = 0;
    }
    *v144 = *(_QWORD *)(v145 + 40);
    *(_QWORD *)(v145 + 40) = v144;
  }
  if (v171)
  {
    v73 = *(_QWORD *)(((unint64_t)(v171 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v74 = *(_QWORD **)(v73 + 40);
    if (!v74)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v171 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v66, v67, v68, v69, v70, v71, v72);
      v74 = *(_QWORD **)(v73 + 40);
    }
    *(_QWORD *)(v73 + 40) = *v74;
    v74[2] = 0;
    v75 = v74 + 2;
    *v74 = 0;
    v74[1] = 0;
    v76 = v171;
    if (v171)
    {
      v76 = (_QWORD *)*v171;
      if (*v171)
      {
        v155 = *(_QWORD **)(((unint64_t)(v75 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v156 = v155[3];
        v155 += 3;
        *(v75 - 2) = v156;
        *(v75 - 1) = v155;
        *v155 = v75 - 2;
        *(_QWORD *)(v156 + 8) = v75 - 2;
      }
    }
    *v75 = v76;
  }
  else
  {
    v75 = 0;
  }
  *(_QWORD *)&v164 = "WasmFunctionParser.h:";
  DWORD2(v164) = 21;
  LODWORD(v161) = 639;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v164, (unsigned int *)&v161, (int **)&v162);
  v84 = v162;
  if (!v162)
    goto LABEL_120;
  v162 = 0;
  if (*(_DWORD *)v84 == 2)
  {
    WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
    WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    if (!v75)
      goto LABEL_49;
  }
  else
  {
    *(_DWORD *)v84 -= 2;
    if (!v75)
      goto LABEL_49;
  }
  v120 = v75 - 2;
  v121 = *(_QWORD *)(((unint64_t)(v75 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v122 = (uint64_t *)*(v75 - 1);
  if (v122)
  {
    v123 = *v120;
    *v122 = *v120;
    *(_QWORD *)(v123 + 8) = v122;
    *v120 = 0;
    *(v75 - 1) = 0;
  }
  *v120 = *(_QWORD *)(v121 + 40);
  *(_QWORD *)(v121 + 40) = v120;
LABEL_49:
  if ((_BYTE)v168 != 0xFF)
  {
    v129 = a2 + 26512;
    v130 = " pointer type mismatch";
    v131 = 23;
LABEL_115:
    *(_QWORD *)&v164 = v130;
    *((_QWORD *)&v164 + 1) = v131;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v161, v129, (uint64_t)&v164);
    v95 = v161;
    goto LABEL_75;
  }
  if (v172 != v17)
  {
LABEL_114:
    v129 = a2 + 26512;
    v130 = " value type mismatch";
    v131 = 21;
    goto LABEL_115;
  }
  if (v17 - 239 < 2 || v17 == 227)
  {
    if (a5 == *((_QWORD *)&v172 + 1))
      v85 = ((v17 + 29) < 0xEu) & (0x3001u >> (v17 + 29));
    else
      v85 = 0;
    if ((v85 & 1) == 0)
      goto LABEL_114;
  }
  else
  {
    if (a5 == *((_QWORD *)&v172 + 1))
      v152 = ((v17 + 29) < 0xEu) & (0x3001u >> (v17 + 29));
    else
      v152 = 1;
    if (v152 == 1)
      goto LABEL_114;
  }
  v86 = *(_QWORD *)(a2 + 48);
  if (v171)
  {
    v87 = *(_QWORD *)(((unint64_t)(v171 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v88 = *(_QWORD **)(v87 + 40);
    if (!v88)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v171 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v77, v78, v79, v80, v81, v82, v83);
      v88 = *(_QWORD **)(v87 + 40);
    }
    *(_QWORD *)(v87 + 40) = *v88;
    v88[2] = 0;
    v89 = v88 + 2;
    *v88 = 0;
    v88[1] = 0;
    v90 = v171;
    if (v171)
    {
      v90 = (_QWORD *)*v171;
      if (*v171)
      {
        v157 = *(_QWORD **)(((unint64_t)(v89 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v158 = v157[3];
        v157 += 3;
        *(v89 - 2) = v158;
        *(v89 - 1) = v157;
        *v157 = v89 - 2;
        *(_QWORD *)(v158 + 8) = v89 - 2;
      }
    }
    *v89 = v90;
  }
  else
  {
    v89 = 0;
  }
  if (v175)
  {
    v91 = *(_QWORD *)(((unint64_t)(v175 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v92 = *(_QWORD **)(v91 + 40);
    if (!v92)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v175 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v77, v78, v79, v80, v81, v82, v83);
      v92 = *(_QWORD **)(v91 + 40);
    }
    *(_QWORD *)(v91 + 40) = *v92;
    v92[2] = 0;
    v93 = v92 + 2;
    *v92 = 0;
    v92[1] = 0;
    v94 = v175;
    if (v175)
    {
      v94 = (_QWORD *)*v175;
      if (*v175)
      {
        v159 = *(_QWORD **)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v160 = v159[3];
        v159 += 3;
        *(v93 - 2) = v160;
        *(v93 - 1) = v159;
        *v159 = v93 - 2;
        *(_QWORD *)(v160 + 8) = v93 - 2;
      }
    }
    *v93 = v94;
    JSC::Wasm::ConstExprGenerator::fail<char const*>(&v164, **(_QWORD **)v86, *(_QWORD *)(v86 + 16));
    v95 = (void (**)(WTF::StringPrintStream *__hidden))v164;
    v96 = v93 - 2;
    v97 = *(_QWORD *)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v98 = (uint64_t *)*(v93 - 1);
    if (v98)
    {
      v99 = *v96;
      *v98 = *v96;
      *(_QWORD *)(v99 + 8) = v98;
      *v96 = 0;
      *(v93 - 1) = 0;
    }
    *v96 = *(_QWORD *)(v97 + 40);
    *(_QWORD *)(v97 + 40) = v96;
    if (!v89)
      goto LABEL_75;
    goto LABEL_106;
  }
  JSC::Wasm::ConstExprGenerator::fail<char const*>(&v164, **(_QWORD **)v86, *(_QWORD *)(v86 + 16));
  v95 = (void (**)(WTF::StringPrintStream *__hidden))v164;
  if (v89)
  {
LABEL_106:
    v148 = v89 - 2;
    v149 = *(_QWORD *)(((unint64_t)(v89 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v150 = (uint64_t *)*(v89 - 1);
    if (v150)
    {
      v151 = *v148;
      *v150 = *v148;
      *(_QWORD *)(v151 + 8) = v150;
      *v148 = 0;
      *(v89 - 1) = 0;
    }
    *v148 = *(_QWORD *)(v149 + 40);
    *(_QWORD *)(v149 + 40) = v148;
  }
LABEL_75:
  *(_QWORD *)a1 = v95;
  *(_BYTE *)(a1 + 8) = 1;
LABEL_76:
  if (v171)
  {
    v132 = v171 - 2;
    v133 = *(_QWORD *)(((unint64_t)(v171 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v134 = (uint64_t *)*(v171 - 1);
    if (v134)
    {
      v135 = *v132;
      *v134 = *v132;
      *(_QWORD *)(v135 + 8) = v134;
      *v132 = 0;
      v132[1] = 0;
    }
    *v132 = *(_QWORD *)(v133 + 40);
    *(_QWORD *)(v133 + 40) = v132;
  }
  if (v175)
  {
    v136 = v175 - 2;
    v137 = *(_QWORD *)(((unint64_t)(v175 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v138 = (uint64_t *)*(v175 - 1);
    if (v138)
    {
      v139 = *v136;
      *v138 = *v136;
      *(_QWORD *)(v139 + 8) = v138;
      *v136 = 0;
      v136[1] = 0;
    }
    *v136 = *(_QWORD *)(v137 + 40);
    *(_QWORD *)(v137 + 40) = v136;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::atomicBinaryRMW(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  WTF::AtomStringImpl *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  WTF::AtomStringImpl *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  void (**v95)(WTF::StringPrintStream *__hidden);
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char v124;
  float v125;
  char *v126;
  unint64_t *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unsigned int v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  int v161;
  int v162;
  void (**v163)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t *v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  _QWORD *v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  _QWORD *v177;

  v161 = a3;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 26480) + 104) == -1)
  {
    *(_QWORD *)&v174 = "atomic instruction without memory";
    *((_QWORD *)&v174 + 1) = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v170, (uint64_t)&v174, a9, a10);
    *(_QWORD *)a1 = v170;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v174 = JSC::Wasm::Types::Void;
  LOBYTE(v175) = 1;
  *((_QWORD *)&v175 + 1) = 0;
  v177 = 0;
  v170 = JSC::Wasm::Types::Void;
  LOBYTE(v171) = 1;
  *((_QWORD *)&v171 + 1) = 0;
  v173 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)a2;
  v14 = v12 > *(_QWORD *)a2;
  v15 = v12 - *(_QWORD *)a2;
  if (!v14)
    goto LABEL_117;
  v17 = a4;
  v18 = 0;
  LODWORD(v19) = 0;
  v20 = 0;
  v21 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v13 + 1;
  v22 = 5;
  if (v15 < 5)
    v22 = v15;
  v23 = v22 - 1;
  v24 = v21 + v13;
  v25 = v13 + 2;
  while (1)
  {
    v26 = *(char *)(v24 + v18);
    v20 |= (v26 & 0x7F) << v19;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v23 == v18)
      goto LABEL_117;
    *(_QWORD *)a2 = v25 + v18;
    LODWORD(v19) = v19 + 7;
    if (v15 == ++v18)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v18 == 4 && *(unsigned __int8 *)(v24 + v18) >= 0x10u)
  {
LABEL_117:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load alignment", (unint64_t *)a2, 25, &v166, a10);
    *(_QWORD *)a1 = v166;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_76;
  }
  if (v20 != JSC::Wasm::memoryLog2Alignment())
  {
    v124 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v20, " does not match against atomic op's natural alignment ", 55, 1 << v124, &v166, v125);
    *(_QWORD *)a1 = v166;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_76;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v14 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v14)
    goto LABEL_119;
  v19 = 0;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = 5;
  if (v29 < 5)
    v31 = v29;
  v32 = v31 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v33 = v30 + v28;
  v34 = v28 + 2;
  while (1)
  {
    LODWORD(v25) = *(char *)(v33 + v19);
    if ((v25 & 0x80000000) == 0)
      break;
    if (v32 == v19)
      goto LABEL_119;
    LOBYTE(v25) = v34 + v19;
    *(_QWORD *)a2 = v34 + v19++;
    if (v29 == v19)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v19 == 4 && v25 >= 0x10u)
  {
LABEL_119:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load offset", (unint64_t *)a2, 22, &v166, a10);
    goto LABEL_92;
  }
  if (!*(_DWORD *)(a2 + 68))
  {
    v126 = "value";
    v127 = (unint64_t *)a2;
    v128 = 6;
LABEL_91:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v127, 26, v126, v128, &v166, a10);
LABEL_92:
    *(_QWORD *)a1 = v166;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_76;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v166, a2 + 56, a3, a4, a5, a6, a7, a8);
  v170 = v166;
  v171 = v167;
  v172 = v168;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v173, &v169, v35, v36, v37, v38, v39, v40);
  if (v169)
  {
    v139 = v169 - 2;
    v140 = *(_QWORD *)(((unint64_t)(v169 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v141 = (uint64_t *)*(v169 - 1);
    if (v141)
    {
      v142 = *v139;
      *v141 = *v139;
      *(_QWORD *)(v142 + 8) = v141;
      *v139 = 0;
      v139[1] = 0;
    }
    *v139 = *(_QWORD *)(v140 + 40);
    *(_QWORD *)(v140 + 40) = v139;
  }
  if (v173)
  {
    v48 = *(_QWORD *)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v49 = *(_QWORD **)(v48 + 40);
    if (!v49)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v41, v42, v43, v44, v45, v46, v47);
      v49 = *(_QWORD **)(v48 + 40);
    }
    *(_QWORD *)(v48 + 40) = *v49;
    v49[2] = 0;
    v50 = v49 + 2;
    *v49 = 0;
    v49[1] = 0;
    v51 = v173;
    if (v173)
    {
      v51 = (_QWORD *)*v173;
      if (*v173)
      {
        v152 = *(_QWORD **)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v153 = v152[3];
        v152 += 3;
        *(v50 - 2) = v153;
        *(v50 - 1) = v152;
        *v152 = v50 - 2;
        *(_QWORD *)(v153 + 8) = v50 - 2;
      }
    }
    *v50 = v51;
  }
  else
  {
    v50 = 0;
  }
  *(_QWORD *)&v166 = "WasmFunctionParser.h:";
  DWORD2(v166) = 21;
  LODWORD(v163) = 660;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v166, (unsigned int *)&v163, (int **)&v165);
  v59 = v165;
  if (!v165)
  {
LABEL_120:
    __break(0xC471u);
    JUMPOUT(0x198CBD86CLL);
  }
  v165 = 0;
  if (*(_DWORD *)v59 == 2)
  {
    WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    if (!v50)
      goto LABEL_36;
  }
  else
  {
    *(_DWORD *)v59 -= 2;
    if (!v50)
      goto LABEL_36;
  }
  v108 = v50 - 2;
  v109 = *(_QWORD *)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v110 = (uint64_t *)*(v50 - 1);
  if (v110)
  {
    v111 = *v108;
    *v110 = *v108;
    *(_QWORD *)(v111 + 8) = v110;
    *v108 = 0;
    *(v50 - 1) = 0;
  }
  *v108 = *(_QWORD *)(v109 + 40);
  *(_QWORD *)(v109 + 40) = v108;
LABEL_36:
  if (!*(_DWORD *)(a2 + 68))
  {
    v126 = "pointer";
    v127 = (unint64_t *)a2;
    v128 = 8;
    goto LABEL_91;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v166, a2 + 56, v53, v54, v55, v56, v57, v58);
  v174 = v166;
  v175 = v167;
  v176 = v168;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v177, &v169, v60, v61, v62, v63, v64, v65);
  if (v169)
  {
    v143 = v169 - 2;
    v144 = *(_QWORD *)(((unint64_t)(v169 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v145 = (uint64_t *)*(v169 - 1);
    if (v145)
    {
      v146 = *v143;
      *v145 = *v143;
      *(_QWORD *)(v146 + 8) = v145;
      *v143 = 0;
      v143[1] = 0;
    }
    *v143 = *(_QWORD *)(v144 + 40);
    *(_QWORD *)(v144 + 40) = v143;
  }
  if (v177)
  {
    v73 = *(_QWORD *)(((unint64_t)(v177 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v74 = *(_QWORD **)(v73 + 40);
    if (!v74)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v177 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v66, v67, v68, v69, v70, v71, v72);
      v74 = *(_QWORD **)(v73 + 40);
    }
    *(_QWORD *)(v73 + 40) = *v74;
    v74[2] = 0;
    v75 = v74 + 2;
    *v74 = 0;
    v74[1] = 0;
    v76 = v177;
    if (v177)
    {
      v76 = (_QWORD *)*v177;
      if (*v177)
      {
        v154 = *(_QWORD **)(((unint64_t)(v75 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v155 = v154[3];
        v154 += 3;
        *(v75 - 2) = v155;
        *(v75 - 1) = v154;
        *v154 = v75 - 2;
        *(_QWORD *)(v155 + 8) = v75 - 2;
      }
    }
    *v75 = v76;
  }
  else
  {
    v75 = 0;
  }
  *(_QWORD *)&v166 = "WasmFunctionParser.h:";
  DWORD2(v166) = 21;
  LODWORD(v163) = 661;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v166, (unsigned int *)&v163, (int **)&v164);
  v84 = v164;
  if (!v164)
    goto LABEL_120;
  v164 = 0;
  if (*(_DWORD *)v84 == 2)
  {
    WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
    WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    if (!v75)
      goto LABEL_49;
  }
  else
  {
    *(_DWORD *)v84 -= 2;
    if (!v75)
      goto LABEL_49;
  }
  v120 = v75 - 2;
  v121 = *(_QWORD *)(((unint64_t)(v75 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v122 = (uint64_t *)*(v75 - 1);
  if (v122)
  {
    v123 = *v120;
    *v122 = *v120;
    *(_QWORD *)(v123 + 8) = v122;
    *v120 = 0;
    *(v75 - 1) = 0;
  }
  *v120 = *(_QWORD *)(v121 + 40);
  *(_QWORD *)(v121 + 40) = v120;
LABEL_49:
  if ((_BYTE)v174 != 0xFF)
  {
    v162 = v161;
    v129 = " pointer type mismatch";
    v130 = 23;
LABEL_115:
    *(_QWORD *)&v166 = v129;
    *((_QWORD *)&v166 + 1) = v130;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v163, &v162, (uint64_t)&v166);
    v95 = v163;
    goto LABEL_75;
  }
  if (v170 != v17)
  {
LABEL_114:
    v162 = v161;
    v129 = " value type mismatch";
    v130 = 21;
    goto LABEL_115;
  }
  if (v17 - 239 < 2 || v17 == 227)
  {
    if (a5 == *((_QWORD *)&v170 + 1))
      v85 = ((v17 + 29) < 0xEu) & (0x3001u >> (v17 + 29));
    else
      v85 = 0;
    if ((v85 & 1) == 0)
      goto LABEL_114;
  }
  else
  {
    if (a5 == *((_QWORD *)&v170 + 1))
      v151 = ((v17 + 29) < 0xEu) & (0x3001u >> (v17 + 29));
    else
      v151 = 1;
    if (v151 == 1)
      goto LABEL_114;
  }
  v86 = *(_QWORD *)(a2 + 48);
  if (v177)
  {
    v87 = *(_QWORD *)(((unint64_t)(v177 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v88 = *(_QWORD **)(v87 + 40);
    if (!v88)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v177 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v77, v78, v79, v80, v81, v82, v83);
      v88 = *(_QWORD **)(v87 + 40);
    }
    *(_QWORD *)(v87 + 40) = *v88;
    v88[2] = 0;
    v89 = v88 + 2;
    *v88 = 0;
    v88[1] = 0;
    v90 = v177;
    if (v177)
    {
      v90 = (_QWORD *)*v177;
      if (*v177)
      {
        v156 = *(_QWORD **)(((unint64_t)(v89 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v157 = v156[3];
        v156 += 3;
        *(v89 - 2) = v157;
        *(v89 - 1) = v156;
        *v156 = v89 - 2;
        *(_QWORD *)(v157 + 8) = v89 - 2;
      }
    }
    *v89 = v90;
  }
  else
  {
    v89 = 0;
  }
  if (v173)
  {
    v91 = *(_QWORD *)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v92 = *(_QWORD **)(v91 + 40);
    if (!v92)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v77, v78, v79, v80, v81, v82, v83);
      v92 = *(_QWORD **)(v91 + 40);
    }
    *(_QWORD *)(v91 + 40) = *v92;
    v92[2] = 0;
    v93 = v92 + 2;
    *v92 = 0;
    v92[1] = 0;
    v94 = v173;
    if (v173)
    {
      v94 = (_QWORD *)*v173;
      if (*v173)
      {
        v158 = *(_QWORD **)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v159 = v158[3];
        v158 += 3;
        *(v93 - 2) = v159;
        *(v93 - 1) = v158;
        *v158 = v93 - 2;
        *(_QWORD *)(v159 + 8) = v93 - 2;
      }
    }
    *v93 = v94;
    JSC::Wasm::ConstExprGenerator::fail<char const*>(&v166, **(_QWORD **)v86, *(_QWORD *)(v86 + 16));
    v95 = (void (**)(WTF::StringPrintStream *__hidden))v166;
    v96 = v93 - 2;
    v97 = *(_QWORD *)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v98 = (uint64_t *)*(v93 - 1);
    if (v98)
    {
      v99 = *v96;
      *v98 = *v96;
      *(_QWORD *)(v99 + 8) = v98;
      *v96 = 0;
      *(v93 - 1) = 0;
    }
    *v96 = *(_QWORD *)(v97 + 40);
    *(_QWORD *)(v97 + 40) = v96;
    if (!v89)
      goto LABEL_75;
    goto LABEL_106;
  }
  JSC::Wasm::ConstExprGenerator::fail<char const*>(&v166, **(_QWORD **)v86, *(_QWORD *)(v86 + 16));
  v95 = (void (**)(WTF::StringPrintStream *__hidden))v166;
  if (v89)
  {
LABEL_106:
    v147 = v89 - 2;
    v148 = *(_QWORD *)(((unint64_t)(v89 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v149 = (uint64_t *)*(v89 - 1);
    if (v149)
    {
      v150 = *v147;
      *v149 = *v147;
      *(_QWORD *)(v150 + 8) = v149;
      *v147 = 0;
      *(v89 - 1) = 0;
    }
    *v147 = *(_QWORD *)(v148 + 40);
    *(_QWORD *)(v148 + 40) = v147;
  }
LABEL_75:
  *(_QWORD *)a1 = v95;
  *(_BYTE *)(a1 + 8) = 1;
LABEL_76:
  if (v173)
  {
    v131 = v173 - 2;
    v132 = *(_QWORD *)(((unint64_t)(v173 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v133 = (uint64_t *)*(v173 - 1);
    if (v133)
    {
      v134 = *v131;
      *v133 = *v131;
      *(_QWORD *)(v134 + 8) = v133;
      *v131 = 0;
      v131[1] = 0;
    }
    *v131 = *(_QWORD *)(v132 + 40);
    *(_QWORD *)(v132 + 40) = v131;
  }
  if (v177)
  {
    v135 = v177 - 2;
    v136 = *(_QWORD *)(((unint64_t)(v177 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v137 = (uint64_t *)*(v177 - 1);
    if (v137)
    {
      v138 = *v135;
      *v137 = *v135;
      *(_QWORD *)(v138 + 8) = v137;
      *v135 = 0;
      v135[1] = 0;
    }
    *v135 = *(_QWORD *)(v136 + 40);
    *(_QWORD *)(v136 + 40) = v135;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::atomicWait(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  WTF::AtomStringImpl *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  WTF::AtomStringImpl *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  WTF::AtomStringImpl *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  void (**v123)(WTF::StringPrintStream *__hidden);
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  char v172;
  float v173;
  char *v174;
  unint64_t *v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  unsigned int v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD **v217;
  int v219;
  int v220;
  void (**v221)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t *v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  _QWORD *v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  _QWORD *v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  _QWORD *v240;

  v219 = a3;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 26480) + 104) == -1)
  {
    *(_QWORD *)&v237 = "atomic instruction without memory";
    *((_QWORD *)&v237 + 1) = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v233, (uint64_t)&v237, a9, a10);
    *(_QWORD *)a1 = v233;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v237 = JSC::Wasm::Types::Void;
  LOBYTE(v238) = 1;
  *((_QWORD *)&v238 + 1) = 0;
  v240 = 0;
  v233 = JSC::Wasm::Types::Void;
  LOBYTE(v234) = 1;
  *((_QWORD *)&v234 + 1) = 0;
  v236 = 0;
  v229 = JSC::Wasm::Types::Void;
  LOBYTE(v230) = 1;
  *((_QWORD *)&v230 + 1) = 0;
  v232 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)a2;
  v14 = v12 > *(_QWORD *)a2;
  v15 = v12 - *(_QWORD *)a2;
  if (!v14)
    goto LABEL_157;
  v16 = a4;
  v17 = 0;
  LODWORD(v18) = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v13 + 1;
  v21 = 5;
  if (v15 < 5)
    v21 = v15;
  v22 = v21 - 1;
  v23 = v20 + v13;
  v24 = v13 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_157;
    *(_QWORD *)a2 = v24 + v17;
    LODWORD(v18) = v18 + 7;
    if (v15 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_157:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load alignment", (unint64_t *)a2, 25, &v225, a10);
    *(_QWORD *)a1 = v225;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_97;
  }
  v217 = &v240;
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v172 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v172, &v225, v173);
    *(_QWORD *)a1 = v225;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_97;
  }
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)a2;
  v14 = v26 > *(_QWORD *)a2;
  v28 = v26 - *(_QWORD *)a2;
  if (!v14)
    goto LABEL_159;
  v18 = 0;
  v29 = *(_QWORD *)(a2 + 8);
  v30 = 5;
  if (v28 < 5)
    v30 = v28;
  v31 = v30 - 1;
  *(_QWORD *)a2 = v27 + 1;
  v32 = v29 + v27;
  v33 = v27 + 2;
  while (1)
  {
    LODWORD(v24) = *(char *)(v32 + v18);
    if ((v24 & 0x80000000) == 0)
      break;
    if (v31 == v18)
      goto LABEL_159;
    LOBYTE(v24) = v33 + v18;
    *(_QWORD *)a2 = v33 + v18++;
    if (v28 == v18)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v18 == 4 && v24 >= 0x10u)
  {
LABEL_159:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load offset", (unint64_t *)a2, 22, &v225, a10);
    goto LABEL_127;
  }
  if (!*(_DWORD *)(a2 + 68))
  {
    v174 = "timeout";
LABEL_125:
    v175 = (unint64_t *)a2;
    v176 = 8;
    goto LABEL_126;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v225, a2 + 56, a3, a4, a5, a6, a7, a8);
  v229 = v225;
  v230 = v226;
  v231 = v227;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v232, &v228, v34, v35, v36, v37, v38, v39);
  if (v228)
  {
    v191 = v228 - 2;
    v192 = *(_QWORD *)(((unint64_t)(v228 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v193 = (uint64_t *)*(v228 - 1);
    if (v193)
    {
      v194 = *v191;
      *v193 = *v191;
      *(_QWORD *)(v194 + 8) = v193;
      *v191 = 0;
      v191[1] = 0;
    }
    *v191 = *(_QWORD *)(v192 + 40);
    *(_QWORD *)(v192 + 40) = v191;
  }
  if (v232)
  {
    v47 = *(_QWORD *)(((unint64_t)(v232 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v48 = *(_QWORD **)(v47 + 40);
    if (!v48)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v232 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v40, v41, v42, v43, v44, v45, v46);
      v48 = *(_QWORD **)(v47 + 40);
    }
    *(_QWORD *)(v47 + 40) = *v48;
    v48[2] = 0;
    v49 = v48 + 2;
    *v48 = 0;
    v48[1] = 0;
    v50 = v232;
    if (v232)
    {
      v50 = (_QWORD *)*v232;
      if (*v232)
      {
        v204 = *(_QWORD **)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v205 = v204[3];
        v204 += 3;
        *(v49 - 2) = v205;
        *(v49 - 1) = v204;
        *v204 = v49 - 2;
        *(_QWORD *)(v205 + 8) = v49 - 2;
      }
    }
    *v49 = v50;
  }
  else
  {
    v49 = 0;
  }
  *(_QWORD *)&v225 = "WasmFunctionParser.h:";
  DWORD2(v225) = 21;
  LODWORD(v221) = 712;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v225, (unsigned int *)&v221, (int **)&v224);
  v58 = v224;
  if (!v224)
  {
LABEL_162:
    __break(0xC471u);
    JUMPOUT(0x198CBE3F0);
  }
  v224 = 0;
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
    WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    if (!v49)
      goto LABEL_36;
  }
  else
  {
    *(_DWORD *)v58 -= 2;
    if (!v49)
      goto LABEL_36;
  }
  v144 = v49 - 2;
  v145 = *(_QWORD *)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v146 = (uint64_t *)*(v49 - 1);
  if (v146)
  {
    v147 = *v144;
    *v146 = *v144;
    *(_QWORD *)(v147 + 8) = v146;
    *v144 = 0;
    *(v49 - 1) = 0;
  }
  *v144 = *(_QWORD *)(v145 + 40);
  *(_QWORD *)(v145 + 40) = v144;
LABEL_36:
  if (!*(_DWORD *)(a2 + 68))
  {
    v174 = "value";
    v175 = (unint64_t *)a2;
    v176 = 6;
LABEL_126:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v175, 26, v174, v176, &v225, a10);
LABEL_127:
    *(_QWORD *)a1 = v225;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_97;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v225, a2 + 56, v52, v53, v54, v55, v56, v57);
  v233 = v225;
  v234 = v226;
  v235 = v227;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v236, &v228, v59, v60, v61, v62, v63, v64);
  if (v228)
  {
    v195 = v228 - 2;
    v196 = *(_QWORD *)(((unint64_t)(v228 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v197 = (uint64_t *)*(v228 - 1);
    if (v197)
    {
      v198 = *v195;
      *v197 = *v195;
      *(_QWORD *)(v198 + 8) = v197;
      *v195 = 0;
      v195[1] = 0;
    }
    *v195 = *(_QWORD *)(v196 + 40);
    *(_QWORD *)(v196 + 40) = v195;
  }
  if (v236)
  {
    v72 = *(_QWORD *)(((unint64_t)(v236 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v73 = *(_QWORD **)(v72 + 40);
    if (!v73)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v236 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v65, v66, v67, v68, v69, v70, v71);
      v73 = *(_QWORD **)(v72 + 40);
    }
    *(_QWORD *)(v72 + 40) = *v73;
    v73[2] = 0;
    v74 = v73 + 2;
    *v73 = 0;
    v73[1] = 0;
    v75 = v236;
    if (v236)
    {
      v75 = (_QWORD *)*v236;
      if (*v236)
      {
        v206 = *(_QWORD **)(((unint64_t)(v74 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v207 = v206[3];
        v206 += 3;
        *(v74 - 2) = v207;
        *(v74 - 1) = v206;
        *v206 = v74 - 2;
        *(_QWORD *)(v207 + 8) = v74 - 2;
      }
    }
    *v74 = v75;
  }
  else
  {
    v74 = 0;
  }
  *(_QWORD *)&v225 = "WasmFunctionParser.h:";
  DWORD2(v225) = 21;
  LODWORD(v221) = 713;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v225, (unsigned int *)&v221, (int **)&v223);
  v83 = v223;
  if (!v223)
  {
    __break(0xC471u);
    JUMPOUT(0x198CBE3F8);
  }
  v223 = 0;
  if (*(_DWORD *)v83 == 2)
  {
    WTF::StringImpl::~StringImpl(v83, v76, v77, v78, v79, v80, v81, v82);
    WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    if (!v74)
      goto LABEL_49;
  }
  else
  {
    *(_DWORD *)v83 -= 2;
    if (!v74)
      goto LABEL_49;
  }
  v156 = v74 - 2;
  v157 = *(_QWORD *)(((unint64_t)(v74 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v158 = (uint64_t *)*(v74 - 1);
  if (v158)
  {
    v159 = *v156;
    *v158 = *v156;
    *(_QWORD *)(v159 + 8) = v158;
    *v156 = 0;
    *(v74 - 1) = 0;
  }
  *v156 = *(_QWORD *)(v157 + 40);
  *(_QWORD *)(v157 + 40) = v156;
LABEL_49:
  if (!*(_DWORD *)(a2 + 68))
  {
    v174 = "pointer";
    goto LABEL_125;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v225, a2 + 56, v77, v78, v79, v80, v81, v82);
  v237 = v225;
  v238 = v226;
  v239 = v227;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(v217, &v228, v84, v85, v86, v87, v88, v89);
  if (v228)
  {
    v199 = v228 - 2;
    v200 = *(_QWORD *)(((unint64_t)(v228 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v201 = (uint64_t *)*(v228 - 1);
    if (v201)
    {
      v202 = *v199;
      *v201 = *v199;
      *(_QWORD *)(v202 + 8) = v201;
      *v199 = 0;
      v199[1] = 0;
    }
    *v199 = *(_QWORD *)(v200 + 40);
    *(_QWORD *)(v200 + 40) = v199;
  }
  if (v240)
  {
    v97 = *(_QWORD *)(((unint64_t)(v240 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v98 = *(_QWORD **)(v97 + 40);
    if (!v98)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v240 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v90, v91, v92, v93, v94, v95, v96);
      v98 = *(_QWORD **)(v97 + 40);
    }
    *(_QWORD *)(v97 + 40) = *v98;
    v98[2] = 0;
    v99 = v98 + 2;
    *v98 = 0;
    v98[1] = 0;
    v100 = v240;
    if (v240)
    {
      v100 = (_QWORD *)*v240;
      if (*v240)
      {
        v208 = *(_QWORD **)(((unint64_t)(v99 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v209 = v208[3];
        v208 += 3;
        *(v99 - 2) = v209;
        *(v99 - 1) = v208;
        *v208 = v99 - 2;
        *(_QWORD *)(v209 + 8) = v99 - 2;
      }
    }
    *v99 = v100;
  }
  else
  {
    v99 = 0;
  }
  *(_QWORD *)&v225 = "WasmFunctionParser.h:";
  DWORD2(v225) = 21;
  LODWORD(v221) = 714;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v225, (unsigned int *)&v221, (int **)&v222);
  v108 = v222;
  if (!v222)
    goto LABEL_162;
  v222 = 0;
  if (*(_DWORD *)v108 == 2)
  {
    WTF::StringImpl::~StringImpl(v108, v101, v102, v103, v104, v105, v106, v107);
    WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
    if (!v99)
      goto LABEL_62;
  }
  else
  {
    *(_DWORD *)v108 -= 2;
    if (!v99)
      goto LABEL_62;
  }
  v168 = v99 - 2;
  v169 = *(_QWORD *)(((unint64_t)(v99 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v170 = (uint64_t *)*(v99 - 1);
  if (v170)
  {
    v171 = *v168;
    *v170 = *v168;
    *(_QWORD *)(v171 + 8) = v170;
    *v168 = 0;
    *(v99 - 1) = 0;
  }
  *v168 = *(_QWORD *)(v169 + 40);
  *(_QWORD *)(v169 + 40) = v168;
LABEL_62:
  if ((_BYTE)v237 != 0xFF)
  {
    v220 = v219;
    v177 = " pointer type mismatch";
LABEL_130:
    v178 = 23;
LABEL_155:
    *(_QWORD *)&v225 = v177;
    *((_QWORD *)&v225 + 1) = v178;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v221, &v220, (uint64_t)&v225);
    v123 = v221;
    goto LABEL_96;
  }
  if (v233 != v16)
  {
LABEL_154:
    v220 = v219;
    v177 = " value type mismatch";
    v178 = 21;
    goto LABEL_155;
  }
  if (v16 - 239 < 2 || v16 == 227)
  {
    if (a5 == *((_QWORD *)&v233 + 1))
      v109 = ((v16 + 29) < 0xEu) & (0x3001u >> (v16 + 29));
    else
      v109 = 0;
    if ((v109 & 1) == 0)
      goto LABEL_154;
  }
  else
  {
    if (a5 == *((_QWORD *)&v233 + 1))
      v203 = ((v16 + 29) < 0xEu) & (0x3001u >> (v16 + 29));
    else
      v203 = 1;
    if (v203 == 1)
      goto LABEL_154;
  }
  if (v229 != 254)
  {
    v220 = v219;
    v177 = " timeout type mismatch";
    goto LABEL_130;
  }
  v110 = *(_QWORD *)(a2 + 48);
  if (v240)
  {
    v111 = *(_QWORD *)(((unint64_t)(v240 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v112 = *(_QWORD **)(v111 + 40);
    if (!v112)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v240 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v101, v102, v103, v104, v105, v106, v107);
      v112 = *(_QWORD **)(v111 + 40);
    }
    *(_QWORD *)(v111 + 40) = *v112;
    v112[2] = 0;
    v113 = v112 + 2;
    *v112 = 0;
    v112[1] = 0;
    v114 = v240;
    if (v240)
    {
      v114 = (_QWORD *)*v240;
      if (*v240)
      {
        v210 = *(_QWORD **)(((unint64_t)(v113 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v211 = v210[3];
        v210 += 3;
        *(v113 - 2) = v211;
        *(v113 - 1) = v210;
        *v210 = v113 - 2;
        *(_QWORD *)(v211 + 8) = v113 - 2;
      }
    }
    *v113 = v114;
  }
  else
  {
    v113 = 0;
  }
  if (v236)
  {
    v115 = *(_QWORD *)(((unint64_t)(v236 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v116 = *(_QWORD **)(v115 + 40);
    if (!v116)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v236 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v101, v102, v103, v104, v105, v106, v107);
      v116 = *(_QWORD **)(v115 + 40);
    }
    *(_QWORD *)(v115 + 40) = *v116;
    v116[2] = 0;
    v117 = v116 + 2;
    *v116 = 0;
    v116[1] = 0;
    v118 = v236;
    if (v236)
    {
      v118 = (_QWORD *)*v236;
      if (*v236)
      {
        v212 = *(_QWORD **)(((unint64_t)(v117 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v213 = v212[3];
        v212 += 3;
        *(v117 - 2) = v213;
        *(v117 - 1) = v212;
        *v212 = v117 - 2;
        *(_QWORD *)(v213 + 8) = v117 - 2;
      }
    }
    *v117 = v118;
  }
  else
  {
    v117 = 0;
  }
  if (!v232)
  {
    JSC::Wasm::ConstExprGenerator::fail<char const*>(&v225, **(_QWORD **)v110, *(_QWORD *)(v110 + 16));
    v123 = (void (**)(WTF::StringPrintStream *__hidden))v225;
    if (!v117)
      goto LABEL_95;
LABEL_102:
    v128 = v117 - 2;
    v129 = *(_QWORD *)(((unint64_t)(v117 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v130 = (uint64_t *)*(v117 - 1);
    if (v130)
    {
      v131 = *v128;
      *v130 = *v128;
      *(_QWORD *)(v131 + 8) = v130;
      *v128 = 0;
      *(v117 - 1) = 0;
    }
    *v128 = *(_QWORD *)(v129 + 40);
    *(_QWORD *)(v129 + 40) = v128;
    if (!v113)
      goto LABEL_96;
    goto LABEL_105;
  }
  v119 = *(_QWORD *)(((unint64_t)(v232 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v120 = *(_QWORD **)(v119 + 40);
  if (!v120)
  {
    JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v232 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v101, v102, v103, v104, v105, v106, v107);
    v120 = *(_QWORD **)(v119 + 40);
  }
  *(_QWORD *)(v119 + 40) = *v120;
  v120[2] = 0;
  v121 = v120 + 2;
  *v120 = 0;
  v120[1] = 0;
  v122 = v232;
  if (v232)
  {
    v122 = (_QWORD *)*v232;
    if (*v232)
    {
      v214 = *(_QWORD **)(((unint64_t)(v121 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v215 = v214[3];
      v214 += 3;
      *(v121 - 2) = v215;
      *(v121 - 1) = v214;
      *v214 = v121 - 2;
      *(_QWORD *)(v215 + 8) = v121 - 2;
    }
  }
  *v121 = v122;
  JSC::Wasm::ConstExprGenerator::fail<char const*>(&v225, **(_QWORD **)v110, *(_QWORD *)(v110 + 16));
  v123 = (void (**)(WTF::StringPrintStream *__hidden))v225;
  v124 = v121 - 2;
  v125 = *(_QWORD *)(((unint64_t)(v121 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v126 = (uint64_t *)*(v121 - 1);
  if (v126)
  {
    v127 = *v124;
    *v126 = *v124;
    *(_QWORD *)(v127 + 8) = v126;
    *v124 = 0;
    *(v121 - 1) = 0;
  }
  *v124 = *(_QWORD *)(v125 + 40);
  *(_QWORD *)(v125 + 40) = v124;
  if (v117)
    goto LABEL_102;
LABEL_95:
  if (v113)
  {
LABEL_105:
    v132 = v113 - 2;
    v133 = *(_QWORD *)(((unint64_t)(v113 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v134 = (uint64_t *)*(v113 - 1);
    if (v134)
    {
      v135 = *v132;
      *v134 = *v132;
      *(_QWORD *)(v135 + 8) = v134;
      *v132 = 0;
      *(v113 - 1) = 0;
    }
    *v132 = *(_QWORD *)(v133 + 40);
    *(_QWORD *)(v133 + 40) = v132;
  }
LABEL_96:
  *(_QWORD *)a1 = v123;
  *(_BYTE *)(a1 + 8) = 1;
LABEL_97:
  if (v232)
  {
    v179 = v232 - 2;
    v180 = *(_QWORD *)(((unint64_t)(v232 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v181 = (uint64_t *)*(v232 - 1);
    if (v181)
    {
      v182 = *v179;
      *v181 = *v179;
      *(_QWORD *)(v182 + 8) = v181;
      *v179 = 0;
      v179[1] = 0;
    }
    *v179 = *(_QWORD *)(v180 + 40);
    *(_QWORD *)(v180 + 40) = v179;
  }
  if (v236)
  {
    v183 = v236 - 2;
    v184 = *(_QWORD *)(((unint64_t)(v236 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v185 = (uint64_t *)*(v236 - 1);
    if (v185)
    {
      v186 = *v183;
      *v185 = *v183;
      *(_QWORD *)(v186 + 8) = v185;
      *v183 = 0;
      v183[1] = 0;
    }
    *v183 = *(_QWORD *)(v184 + 40);
    *(_QWORD *)(v184 + 40) = v183;
  }
  if (v240)
  {
    v187 = v240 - 2;
    v188 = *(_QWORD *)(((unint64_t)(v240 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v189 = (uint64_t *)*(v240 - 1);
    if (v189)
    {
      v190 = *v187;
      *v189 = *v187;
      *(_QWORD *)(v190 + 8) = v189;
      *v187 = 0;
      v187[1] = 0;
    }
    *v187 = *(_QWORD *)(v188 + 40);
    *(_QWORD *)(v188 + 40) = v187;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::atomicCompareExchange(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  WTF::AtomStringImpl *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  WTF::AtomStringImpl *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  WTF::AtomStringImpl *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  void (**v124)(WTF::StringPrintStream *__hidden);
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  char v173;
  float v174;
  char *v175;
  unint64_t *v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD **v218;
  int v221;
  int v222;
  void (**v223)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t *v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  _QWORD *v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  _QWORD *v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  _QWORD *v242;

  v221 = a3;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 26480) + 104) == -1)
  {
    *(_QWORD *)&v239 = "atomic instruction without memory";
    *((_QWORD *)&v239 + 1) = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v235, (uint64_t)&v239, a9, a10);
    *(_QWORD *)a1 = v235;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v239 = JSC::Wasm::Types::Void;
  LOBYTE(v240) = 1;
  *((_QWORD *)&v240 + 1) = 0;
  v242 = 0;
  v235 = JSC::Wasm::Types::Void;
  LOBYTE(v236) = 1;
  *((_QWORD *)&v236 + 1) = 0;
  v238 = 0;
  v231 = JSC::Wasm::Types::Void;
  LOBYTE(v232) = 1;
  *((_QWORD *)&v232 + 1) = 0;
  v234 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)a2;
  v14 = v12 > *(_QWORD *)a2;
  v15 = v12 - *(_QWORD *)a2;
  if (!v14)
    goto LABEL_165;
  v16 = a4;
  v17 = 0;
  LODWORD(v18) = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v13 + 1;
  v21 = 5;
  if (v15 < 5)
    v21 = v15;
  v22 = v21 - 1;
  v23 = v20 + v13;
  v24 = v13 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_165;
    *(_QWORD *)a2 = v24 + v17;
    LODWORD(v18) = v18 + 7;
    if (v15 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_165:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load alignment", (unint64_t *)a2, 25, &v227, a10);
    *(_QWORD *)a1 = v227;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_102;
  }
  v218 = &v242;
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v173 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v173, &v227, v174);
    *(_QWORD *)a1 = v227;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_102;
  }
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)a2;
  v14 = v26 > *(_QWORD *)a2;
  v28 = v26 - *(_QWORD *)a2;
  if (!v14)
    goto LABEL_167;
  v18 = 0;
  v29 = *(_QWORD *)(a2 + 8);
  v30 = 5;
  if (v28 < 5)
    v30 = v28;
  v31 = v30 - 1;
  *(_QWORD *)a2 = v27 + 1;
  v32 = v29 + v27;
  v33 = v27 + 2;
  while (1)
  {
    LODWORD(v24) = *(char *)(v32 + v18);
    if ((v24 & 0x80000000) == 0)
      break;
    if (v31 == v18)
      goto LABEL_167;
    LOBYTE(v24) = v33 + v18;
    *(_QWORD *)a2 = v33 + v18++;
    if (v28 == v18)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v18 == 4 && v24 >= 0x10u)
  {
LABEL_167:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load offset", (unint64_t *)a2, 22, &v227, a10);
    goto LABEL_131;
  }
  if (!*(_DWORD *)(a2 + 68))
  {
    v175 = "value";
    v176 = (unint64_t *)a2;
    v177 = 6;
LABEL_130:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v176, 26, v175, v177, &v227, a10);
LABEL_131:
    *(_QWORD *)a1 = v227;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_102;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v227, a2 + 56, a3, a4, a5, a6, a7, a8);
  v231 = v227;
  v232 = v228;
  v233 = v229;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v234, &v230, v34, v35, v36, v37, v38, v39);
  if (v230)
  {
    v192 = v230 - 2;
    v193 = *(_QWORD *)(((unint64_t)(v230 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v194 = (uint64_t *)*(v230 - 1);
    if (v194)
    {
      v195 = *v192;
      *v194 = *v192;
      *(_QWORD *)(v195 + 8) = v194;
      *v192 = 0;
      v192[1] = 0;
    }
    *v192 = *(_QWORD *)(v193 + 40);
    *(_QWORD *)(v193 + 40) = v192;
  }
  if (v234)
  {
    v47 = *(_QWORD *)(((unint64_t)(v234 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v48 = *(_QWORD **)(v47 + 40);
    if (!v48)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v234 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v40, v41, v42, v43, v44, v45, v46);
      v48 = *(_QWORD **)(v47 + 40);
    }
    *(_QWORD *)(v47 + 40) = *v48;
    v48[2] = 0;
    v49 = v48 + 2;
    *v48 = 0;
    v48[1] = 0;
    v50 = v234;
    if (v234)
    {
      v50 = (_QWORD *)*v234;
      if (*v234)
      {
        v206 = *(_QWORD **)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v207 = v206[3];
        v206 += 3;
        *(v49 - 2) = v207;
        *(v49 - 1) = v206;
        *v206 = v49 - 2;
        *(_QWORD *)(v207 + 8) = v49 - 2;
      }
    }
    *v49 = v50;
  }
  else
  {
    v49 = 0;
  }
  *(_QWORD *)&v227 = "WasmFunctionParser.h:";
  DWORD2(v227) = 21;
  LODWORD(v223) = 685;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v227, (unsigned int *)&v223, (int **)&v226);
  v58 = v226;
  if (!v226)
  {
LABEL_170:
    __break(0xC471u);
    JUMPOUT(0x198CBEFD8);
  }
  v226 = 0;
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
    WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    if (!v49)
      goto LABEL_36;
  }
  else
  {
    *(_DWORD *)v58 -= 2;
    if (!v49)
      goto LABEL_36;
  }
  v145 = v49 - 2;
  v146 = *(_QWORD *)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v147 = (uint64_t *)*(v49 - 1);
  if (v147)
  {
    v148 = *v145;
    *v147 = *v145;
    *(_QWORD *)(v148 + 8) = v147;
    *v145 = 0;
    *(v49 - 1) = 0;
  }
  *v145 = *(_QWORD *)(v146 + 40);
  *(_QWORD *)(v146 + 40) = v145;
LABEL_36:
  if (!*(_DWORD *)(a2 + 68))
  {
    v175 = "expected";
    v176 = (unint64_t *)a2;
    v177 = 9;
    goto LABEL_130;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v227, a2 + 56, v52, v53, v54, v55, v56, v57);
  v235 = v227;
  v236 = v228;
  v237 = v229;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v238, &v230, v59, v60, v61, v62, v63, v64);
  if (v230)
  {
    v196 = v230 - 2;
    v197 = *(_QWORD *)(((unint64_t)(v230 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v198 = (uint64_t *)*(v230 - 1);
    if (v198)
    {
      v199 = *v196;
      *v198 = *v196;
      *(_QWORD *)(v199 + 8) = v198;
      *v196 = 0;
      v196[1] = 0;
    }
    *v196 = *(_QWORD *)(v197 + 40);
    *(_QWORD *)(v197 + 40) = v196;
  }
  if (v238)
  {
    v72 = *(_QWORD *)(((unint64_t)(v238 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v73 = *(_QWORD **)(v72 + 40);
    if (!v73)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v238 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v65, v66, v67, v68, v69, v70, v71);
      v73 = *(_QWORD **)(v72 + 40);
    }
    *(_QWORD *)(v72 + 40) = *v73;
    v73[2] = 0;
    v74 = v73 + 2;
    *v73 = 0;
    v73[1] = 0;
    v75 = v238;
    if (v238)
    {
      v75 = (_QWORD *)*v238;
      if (*v238)
      {
        v208 = *(_QWORD **)(((unint64_t)(v74 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v209 = v208[3];
        v208 += 3;
        *(v74 - 2) = v209;
        *(v74 - 1) = v208;
        *v208 = v74 - 2;
        *(_QWORD *)(v209 + 8) = v74 - 2;
      }
    }
    *v74 = v75;
  }
  else
  {
    v74 = 0;
  }
  *(_QWORD *)&v227 = "WasmFunctionParser.h:";
  DWORD2(v227) = 21;
  LODWORD(v223) = 686;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v227, (unsigned int *)&v223, (int **)&v225);
  v83 = v225;
  if (!v225)
  {
    __break(0xC471u);
    JUMPOUT(0x198CBEFE0);
  }
  v225 = 0;
  if (*(_DWORD *)v83 == 2)
  {
    WTF::StringImpl::~StringImpl(v83, v76, v77, v78, v79, v80, v81, v82);
    WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    if (!v74)
      goto LABEL_49;
  }
  else
  {
    *(_DWORD *)v83 -= 2;
    if (!v74)
      goto LABEL_49;
  }
  v157 = v74 - 2;
  v158 = *(_QWORD *)(((unint64_t)(v74 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v159 = (uint64_t *)*(v74 - 1);
  if (v159)
  {
    v160 = *v157;
    *v159 = *v157;
    *(_QWORD *)(v160 + 8) = v159;
    *v157 = 0;
    *(v74 - 1) = 0;
  }
  *v157 = *(_QWORD *)(v158 + 40);
  *(_QWORD *)(v158 + 40) = v157;
LABEL_49:
  if (!*(_DWORD *)(a2 + 68))
  {
    v175 = "pointer";
    v176 = (unint64_t *)a2;
    v177 = 8;
    goto LABEL_130;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v227, a2 + 56, v77, v78, v79, v80, v81, v82);
  v239 = v227;
  v240 = v228;
  v241 = v229;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(v218, &v230, v84, v85, v86, v87, v88, v89);
  if (v230)
  {
    v200 = v230 - 2;
    v201 = *(_QWORD *)(((unint64_t)(v230 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v202 = (uint64_t *)*(v230 - 1);
    if (v202)
    {
      v203 = *v200;
      *v202 = *v200;
      *(_QWORD *)(v203 + 8) = v202;
      *v200 = 0;
      v200[1] = 0;
    }
    *v200 = *(_QWORD *)(v201 + 40);
    *(_QWORD *)(v201 + 40) = v200;
  }
  if (v242)
  {
    v97 = *(_QWORD *)(((unint64_t)(v242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v98 = *(_QWORD **)(v97 + 40);
    if (!v98)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v90, v91, v92, v93, v94, v95, v96);
      v98 = *(_QWORD **)(v97 + 40);
    }
    *(_QWORD *)(v97 + 40) = *v98;
    v98[2] = 0;
    v99 = v98 + 2;
    *v98 = 0;
    v98[1] = 0;
    v100 = v242;
    if (v242)
    {
      v100 = (_QWORD *)*v242;
      if (*v242)
      {
        v210 = *(_QWORD **)(((unint64_t)(v99 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v211 = v210[3];
        v210 += 3;
        *(v99 - 2) = v211;
        *(v99 - 1) = v210;
        *v210 = v99 - 2;
        *(_QWORD *)(v211 + 8) = v99 - 2;
      }
    }
    *v99 = v100;
  }
  else
  {
    v99 = 0;
  }
  *(_QWORD *)&v227 = "WasmFunctionParser.h:";
  DWORD2(v227) = 21;
  LODWORD(v223) = 687;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v227, (unsigned int *)&v223, (int **)&v224);
  v108 = v224;
  if (!v224)
    goto LABEL_170;
  v224 = 0;
  if (*(_DWORD *)v108 == 2)
  {
    WTF::StringImpl::~StringImpl(v108, v101, v102, v103, v104, v105, v106, v107);
    WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    if (!v99)
      goto LABEL_62;
  }
  else
  {
    *(_DWORD *)v108 -= 2;
    if (!v99)
      goto LABEL_62;
  }
  v169 = v99 - 2;
  v170 = *(_QWORD *)(((unint64_t)(v99 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v171 = (uint64_t *)*(v99 - 1);
  if (v171)
  {
    v172 = *v169;
    *v171 = *v169;
    *(_QWORD *)(v172 + 8) = v171;
    *v169 = 0;
    *(v99 - 1) = 0;
  }
  *v169 = *(_QWORD *)(v170 + 40);
  *(_QWORD *)(v170 + 40) = v169;
LABEL_62:
  if ((_BYTE)v239 != 0xFF)
  {
    v222 = v221;
    v178 = " pointer type mismatch";
    v179 = 23;
LABEL_163:
    *(_QWORD *)&v227 = v178;
    *((_QWORD *)&v227 + 1) = v179;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v223, &v222, (uint64_t)&v227);
    v124 = v223;
    goto LABEL_101;
  }
  if (v235 != v16)
  {
LABEL_156:
    v222 = v221;
    v178 = " expected type mismatch";
    v179 = 24;
    goto LABEL_163;
  }
  if (v16 - 239 < 2 || v16 == 227)
  {
    if (a5 == *((_QWORD *)&v235 + 1))
      v109 = ((v16 + 29) < 0xEu) & (0x3001u >> (v16 + 29));
    else
      v109 = 0;
    if ((v109 & 1) == 0)
      goto LABEL_156;
  }
  else
  {
    if (a5 == *((_QWORD *)&v235 + 1))
      v204 = ((v16 + 29) < 0xEu) & (0x3001u >> (v16 + 29));
    else
      v204 = 1;
    if (v204 == 1)
      goto LABEL_156;
  }
  if (v231 != v16)
  {
LABEL_162:
    v222 = v221;
    v178 = " value type mismatch";
    v179 = 21;
    goto LABEL_163;
  }
  if (v16 - 239 < 2 || v16 == 227)
  {
    if (a5 == *((_QWORD *)&v231 + 1))
      v110 = ((v16 + 29) < 0xEu) & (0x3001u >> (v16 + 29));
    else
      v110 = 0;
    if ((v110 & 1) == 0)
      goto LABEL_162;
  }
  else
  {
    if (a5 == *((_QWORD *)&v231 + 1))
      v205 = ((v16 + 29) < 0xEu) & (0x3001u >> (v16 + 29));
    else
      v205 = 1;
    if (v205 == 1)
      goto LABEL_162;
  }
  v111 = *(_QWORD *)(a2 + 48);
  if (v242)
  {
    v112 = *(_QWORD *)(((unint64_t)(v242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v113 = *(_QWORD **)(v112 + 40);
    if (!v113)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v101, v102, v103, v104, v105, v106, v107);
      v113 = *(_QWORD **)(v112 + 40);
    }
    *(_QWORD *)(v112 + 40) = *v113;
    v113[2] = 0;
    v114 = v113 + 2;
    *v113 = 0;
    v113[1] = 0;
    v115 = v242;
    if (v242)
    {
      v115 = (_QWORD *)*v242;
      if (*v242)
      {
        v212 = *(_QWORD **)(((unint64_t)(v114 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v213 = v212[3];
        v212 += 3;
        *(v114 - 2) = v213;
        *(v114 - 1) = v212;
        *v212 = v114 - 2;
        *(_QWORD *)(v213 + 8) = v114 - 2;
      }
    }
    *v114 = v115;
  }
  else
  {
    v114 = 0;
  }
  if (v238)
  {
    v116 = *(_QWORD *)(((unint64_t)(v238 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v117 = *(_QWORD **)(v116 + 40);
    if (!v117)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v238 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v101, v102, v103, v104, v105, v106, v107);
      v117 = *(_QWORD **)(v116 + 40);
    }
    *(_QWORD *)(v116 + 40) = *v117;
    v117[2] = 0;
    v118 = v117 + 2;
    *v117 = 0;
    v117[1] = 0;
    v119 = v238;
    if (v238)
    {
      v119 = (_QWORD *)*v238;
      if (*v238)
      {
        v214 = *(_QWORD **)(((unint64_t)(v118 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v215 = v214[3];
        v214 += 3;
        *(v118 - 2) = v215;
        *(v118 - 1) = v214;
        *v214 = v118 - 2;
        *(_QWORD *)(v215 + 8) = v118 - 2;
      }
    }
    *v118 = v119;
  }
  else
  {
    v118 = 0;
  }
  if (!v234)
  {
    JSC::Wasm::ConstExprGenerator::fail<char const*>(&v227, **(_QWORD **)v111, *(_QWORD *)(v111 + 16));
    v124 = (void (**)(WTF::StringPrintStream *__hidden))v227;
    if (!v118)
      goto LABEL_100;
LABEL_107:
    v129 = v118 - 2;
    v130 = *(_QWORD *)(((unint64_t)(v118 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v131 = (uint64_t *)*(v118 - 1);
    if (v131)
    {
      v132 = *v129;
      *v131 = *v129;
      *(_QWORD *)(v132 + 8) = v131;
      *v129 = 0;
      *(v118 - 1) = 0;
    }
    *v129 = *(_QWORD *)(v130 + 40);
    *(_QWORD *)(v130 + 40) = v129;
    if (!v114)
      goto LABEL_101;
    goto LABEL_110;
  }
  v120 = *(_QWORD *)(((unint64_t)(v234 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v121 = *(_QWORD **)(v120 + 40);
  if (!v121)
  {
    JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v234 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v101, v102, v103, v104, v105, v106, v107);
    v121 = *(_QWORD **)(v120 + 40);
  }
  *(_QWORD *)(v120 + 40) = *v121;
  v121[2] = 0;
  v122 = v121 + 2;
  *v121 = 0;
  v121[1] = 0;
  v123 = v234;
  if (v234)
  {
    v123 = (_QWORD *)*v234;
    if (*v234)
    {
      v216 = *(_QWORD **)(((unint64_t)(v122 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v217 = v216[3];
      v216 += 3;
      *(v122 - 2) = v217;
      *(v122 - 1) = v216;
      *v216 = v122 - 2;
      *(_QWORD *)(v217 + 8) = v122 - 2;
    }
  }
  *v122 = v123;
  JSC::Wasm::ConstExprGenerator::fail<char const*>(&v227, **(_QWORD **)v111, *(_QWORD *)(v111 + 16));
  v124 = (void (**)(WTF::StringPrintStream *__hidden))v227;
  v125 = v122 - 2;
  v126 = *(_QWORD *)(((unint64_t)(v122 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
  v127 = (uint64_t *)*(v122 - 1);
  if (v127)
  {
    v128 = *v125;
    *v127 = *v125;
    *(_QWORD *)(v128 + 8) = v127;
    *v125 = 0;
    *(v122 - 1) = 0;
  }
  *v125 = *(_QWORD *)(v126 + 40);
  *(_QWORD *)(v126 + 40) = v125;
  if (v118)
    goto LABEL_107;
LABEL_100:
  if (v114)
  {
LABEL_110:
    v133 = v114 - 2;
    v134 = *(_QWORD *)(((unint64_t)(v114 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v135 = (uint64_t *)*(v114 - 1);
    if (v135)
    {
      v136 = *v133;
      *v135 = *v133;
      *(_QWORD *)(v136 + 8) = v135;
      *v133 = 0;
      *(v114 - 1) = 0;
    }
    *v133 = *(_QWORD *)(v134 + 40);
    *(_QWORD *)(v134 + 40) = v133;
  }
LABEL_101:
  *(_QWORD *)a1 = v124;
  *(_BYTE *)(a1 + 8) = 1;
LABEL_102:
  if (v234)
  {
    v180 = v234 - 2;
    v181 = *(_QWORD *)(((unint64_t)(v234 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v182 = (uint64_t *)*(v234 - 1);
    if (v182)
    {
      v183 = *v180;
      *v182 = *v180;
      *(_QWORD *)(v183 + 8) = v182;
      *v180 = 0;
      v180[1] = 0;
    }
    *v180 = *(_QWORD *)(v181 + 40);
    *(_QWORD *)(v181 + 40) = v180;
  }
  if (v238)
  {
    v184 = v238 - 2;
    v185 = *(_QWORD *)(((unint64_t)(v238 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v186 = (uint64_t *)*(v238 - 1);
    if (v186)
    {
      v187 = *v184;
      *v186 = *v184;
      *(_QWORD *)(v187 + 8) = v186;
      *v184 = 0;
      v184[1] = 0;
    }
    *v184 = *(_QWORD *)(v185 + 40);
    *(_QWORD *)(v185 + 40) = v184;
  }
  if (v242)
  {
    v188 = v242 - 2;
    v189 = *(_QWORD *)(((unint64_t)(v242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v190 = (uint64_t *)*(v242 - 1);
    if (v190)
    {
      v191 = *v188;
      *v190 = *v188;
      *(_QWORD *)(v191 + 8) = v190;
      *v188 = 0;
      v188[1] = 0;
    }
    *v188 = *(_QWORD *)(v189 + 40);
    *(_QWORD *)(v189 + 40) = v188;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [29],JSC::Wasm::Type,char [27]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "ref.as_non_null ref to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected a reference type");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::TypeKind,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, char *a3, uint64_t a4, char *a5, double a6, float a7)
{
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  char *String;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  float v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::PrintStream *v54;
  float v55;
  unsigned int v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  WTF *v66;
  WTF::PrintStream *v67;
  float v68;
  double v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  const WTF::String *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  float v84;
  const WTF::String *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  float v92;
  const WTF::String *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  float v100;
  WTF::AtomStringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  int v150;
  char v151;
  void (**v152)(WTF::StringPrintStream *__hidden);
  WTF *v153;
  __int128 v154;
  _BYTE v155[128];
  void (**v156)(WTF::StringPrintStream *__hidden);
  WTF *v157;
  __int128 v158;
  _BYTE v159[128];
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v152 = off_1E3572250;
  v153 = (WTF *)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  v156 = off_1E3572250;
  v157 = (WTF *)v159;
  v158 = xmmword_199122F80;
  v159[0] = 0;
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = v10 != 0;
    v12 = v10 - 1;
    if (!v11)
      v12 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v12, (uint64_t)&v149, a7);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v149 = (WTF::StringImpl *)v13;
    v150 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v156, "StringView", &v149);
  if (v150 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v150])(&v148, &v149);
  v156[5]((WTF::StringPrintStream *)&v156);
  v156[5]((WTF::StringPrintStream *)&v156);
  v21 = v157;
  if (!v157)
  {
    v148 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v157, v158, (uint64_t *)&v148);
  v21 = v157;
  if (v157 != (WTF *)v159)
LABEL_12:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v156 = off_1E3572250;
  v157 = (WTF *)v159;
  v158 = xmmword_199122F80;
  v159[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a3);
  v24 = v23;
  v25 = ((uint64_t (*)(_QWORD))v156[4])(&v156);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
  if (String)
  {
    v28 = v24 - 1;
    if (!v24)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v28, (uint64_t)&v149, v27);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v149 = (WTF::StringImpl *)v29;
    v150 = 0;
  }
  WTF::printExpectedCStringHelper(v26, "StringView", &v149);
  if (v150 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v150])(&v147, &v149);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
  v156[5]((WTF::StringPrintStream *)&v156);
  v156[5]((WTF::StringPrintStream *)&v156);
  v37 = v157;
  if (!v157)
  {
    v147 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v157, v158, (uint64_t *)&v147);
  v37 = v157;
  if (v157 != (WTF *)v159)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v156 = off_1E3572250;
  v157 = (WTF *)v159;
  v158 = xmmword_199122F80;
  v159[0] = 0;
  if (*(_QWORD *)a4)
  {
    v39 = *(_QWORD *)(a4 + 8);
    v11 = v39 != 0;
    v40 = v39 - 1;
    if (!v11)
      v40 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v40, (uint64_t)&v149, v38);
  }
  else
  {
    v41 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v41 = 1;
    *(_QWORD *)(v41 + 8) = 0;
    *(_BYTE *)(v41 + 16) = 0;
    v149 = (WTF::StringImpl *)v41;
    v150 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v156, "StringView", &v149);
  if (v150 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v150])(&v146, &v149);
  v156[5]((WTF::StringPrintStream *)&v156);
  v156[5]((WTF::StringPrintStream *)&v156);
  v49 = v157;
  if (!v157)
  {
    v146 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v157, v158, (uint64_t *)&v146);
  v49 = v157;
  if (v157 != (WTF *)v159)
LABEL_36:
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  v156 = off_1E3572250;
  v157 = (WTF *)v159;
  v158 = xmmword_199122F80;
  v159[0] = 0;
  v50 = (char *)JSC::Wasm::makeString(*a5);
  v52 = v51;
  v53 = ((uint64_t (*)(_QWORD))v156[4])(&v156);
  v54 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 32))(v53);
  if (v50)
  {
    v56 = v52 - 1;
    if (!v52)
      v56 = 0;
    WTF::StringImpl::utf8ForCharacters(v50, v56, (uint64_t)&v149, v55);
  }
  else
  {
    v57 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v57 = 1;
    *(_QWORD *)(v57 + 8) = 0;
    *(_BYTE *)(v57 + 16) = 0;
    v149 = (WTF::StringImpl *)v57;
    v150 = 0;
  }
  WTF::printExpectedCStringHelper(v54, "StringView", &v149);
  if (v150 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v150])(&v151, &v149);
  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
  v156[5]((WTF::StringPrintStream *)&v156);
  v156[5]((WTF::StringPrintStream *)&v156);
  v65 = v157;
  if (!v157)
  {
    v149 = 0;
    goto LABEL_48;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v157, v158, (uint64_t *)&v149);
  v65 = v157;
  if (v157 != (WTF *)v159)
LABEL_48:
    WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
  v66 = (WTF *)((uint64_t (*)(_QWORD))v152[4])(&v152);
  v67 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v66 + 32))(v66);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v156, v68);
  WTF::printExpectedCStringHelper(v67, "StringView", &v156);
  if ((_DWORD)v157 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v157])(&v151, &v156);
  v69 = (*(double (**)(WTF *))(*(_QWORD *)v66 + 40))(v66);
  WTF::printInternal(v66, (WTF::PrintStream *)&v148, v70, v71, v72, v73, v74, v75, v69, v76);
  WTF::printInternal(v66, (WTF::PrintStream *)&v147, v77, v78, v79, v80, v81, v82, v83, v84);
  WTF::printInternal(v66, (WTF::PrintStream *)&v146, v85, v86, v87, v88, v89, v90, v91, v92);
  WTF::printInternal(v66, (WTF::PrintStream *)&v149, v93, v94, v95, v96, v97, v98, v99, v100);
  v152[5]((WTF::StringPrintStream *)&v152);
  v108 = v149;
  v149 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v101, v102, v103, v104, v105, v106, v107);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v146;
  v146 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v101, v102, v103, v104, v105, v106, v107);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v147;
  v147 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, v101, v102, v103, v104, v105, v106, v107);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v110 -= 2;
    }
  }
  v111 = v148;
  v148 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v101, v102, v103, v104, v105, v106, v107);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  v112 = v153;
  if (v153)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v153, v154, (uint64_t *)&v156);
    v112 = v153;
    *a1 = v156;
    if (v112 == (WTF *)v155)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v112, v101, v102, v103, v104, v105, v106, v107);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,JSC::Wasm::TypeKind,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, double a8, float a9)
{
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  float v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  char *String;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::PrintStream *v50;
  float v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  float v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::PrintStream *v78;
  float v79;
  unsigned int v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  WTF *v90;
  WTF::PrintStream *v91;
  float v92;
  double v93;
  const WTF::String *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  const WTF::String *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  float v108;
  const WTF::String *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  float v116;
  const WTF::String *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  float v124;
  const WTF::String *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  float v132;
  const WTF::String *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  float v140;
  WTF::AtomStringImpl *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  int v210;
  char v211;
  void (**v212)(WTF::StringPrintStream *__hidden);
  WTF *v213;
  __int128 v214;
  _BYTE v215[128];
  void (**v216)(WTF::StringPrintStream *__hidden);
  WTF *v217;
  __int128 v218;
  _BYTE v219[128];
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  v212 = off_1E3572250;
  v213 = (WTF *)v215;
  v214 = xmmword_199122F80;
  v215[0] = 0;
  v216 = off_1E3572250;
  v217 = (WTF *)v219;
  v218 = xmmword_199122F80;
  v219[0] = 0;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(a2 + 8);
    v15 = v14 != 0;
    v16 = v14 - 1;
    if (!v15)
      v16 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v16, (uint64_t)&v209, a9);
  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 0;
    v209 = (WTF::StringImpl *)v17;
    v210 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v216, "StringView", &v209);
  if (v210 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v210])(&v208, &v209);
  v216[5]((WTF::StringPrintStream *)&v216);
  v216[5]((WTF::StringPrintStream *)&v216);
  v25 = v217;
  if (!v217)
  {
    v208 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v217, v218, (uint64_t *)&v208);
  v25 = v217;
  if (v217 != (WTF *)v219)
LABEL_12:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v216 = off_1E3572250;
  v217 = (WTF *)v219;
  v218 = xmmword_199122F80;
  v219[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v216, "%u", *a3);
  v216[5]((WTF::StringPrintStream *)&v216);
  v33 = v217;
  if (!v217)
  {
    v207 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v217, v218, (uint64_t *)&v207);
  v33 = v217;
  if (v217 != (WTF *)v219)
LABEL_17:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  v216 = off_1E3572250;
  v217 = (WTF *)v219;
  v218 = xmmword_199122F80;
  v219[0] = 0;
  if (*(_QWORD *)a4)
  {
    v35 = *(_QWORD *)(a4 + 8);
    v15 = v35 != 0;
    v36 = v35 - 1;
    if (!v15)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v36, (uint64_t)&v209, v34);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v209 = (WTF::StringImpl *)v37;
    v210 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v216, "StringView", &v209);
  if (v210 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v210])(&v206, &v209);
  v216[5]((WTF::StringPrintStream *)&v216);
  v216[5]((WTF::StringPrintStream *)&v216);
  v45 = v217;
  if (!v217)
  {
    v206 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v217, v218, (uint64_t *)&v206);
  v45 = v217;
  if (v217 != (WTF *)v219)
LABEL_29:
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  v216 = off_1E3572250;
  v217 = (WTF *)v219;
  v218 = xmmword_199122F80;
  v219[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a5);
  v48 = v47;
  v49 = ((uint64_t (*)(_QWORD))v216[4])(&v216);
  v50 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
  if (String)
  {
    v52 = v48 - 1;
    if (!v48)
      v52 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v52, (uint64_t)&v209, v51);
  }
  else
  {
    v53 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v53 = 1;
    *(_QWORD *)(v53 + 8) = 0;
    *(_BYTE *)(v53 + 16) = 0;
    v209 = (WTF::StringImpl *)v53;
    v210 = 0;
  }
  WTF::printExpectedCStringHelper(v50, "StringView", &v209);
  if (v210 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v210])(&v205, &v209);
  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
  v216[5]((WTF::StringPrintStream *)&v216);
  v216[5]((WTF::StringPrintStream *)&v216);
  v61 = v217;
  if (!v217)
  {
    v205 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v217, v218, (uint64_t *)&v205);
  v61 = v217;
  if (v217 != (WTF *)v219)
LABEL_41:
    WTF::fastFree((unint64_t)v61, v54, v55, v56, v57, v58, v59, v60);
  v216 = off_1E3572250;
  v217 = (WTF *)v219;
  v218 = xmmword_199122F80;
  v219[0] = 0;
  if (*(_QWORD *)a6)
  {
    v63 = *(_QWORD *)(a6 + 8);
    v15 = v63 != 0;
    v64 = v63 - 1;
    if (!v15)
      v64 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v64, (uint64_t)&v209, v62);
  }
  else
  {
    v65 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v65 = 1;
    *(_QWORD *)(v65 + 8) = 0;
    *(_BYTE *)(v65 + 16) = 0;
    v209 = (WTF::StringImpl *)v65;
    v210 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v216, "StringView", &v209);
  if (v210 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v210])(&v204, &v209);
  v216[5]((WTF::StringPrintStream *)&v216);
  v216[5]((WTF::StringPrintStream *)&v216);
  v73 = v217;
  if (!v217)
  {
    v204 = 0;
    goto LABEL_53;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v217, v218, (uint64_t *)&v204);
  v73 = v217;
  if (v217 != (WTF *)v219)
LABEL_53:
    WTF::fastFree((unint64_t)v73, v66, v67, v68, v69, v70, v71, v72);
  v216 = off_1E3572250;
  v217 = (WTF *)v219;
  v218 = xmmword_199122F80;
  v219[0] = 0;
  v74 = (char *)JSC::Wasm::makeString(*a7);
  v76 = v75;
  v77 = ((uint64_t (*)(_QWORD))v216[4])(&v216);
  v78 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 32))(v77);
  if (v74)
  {
    v80 = v76 - 1;
    if (!v76)
      v80 = 0;
    WTF::StringImpl::utf8ForCharacters(v74, v80, (uint64_t)&v209, v79);
  }
  else
  {
    v81 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v81 = 1;
    *(_QWORD *)(v81 + 8) = 0;
    *(_BYTE *)(v81 + 16) = 0;
    v209 = (WTF::StringImpl *)v81;
    v210 = 0;
  }
  WTF::printExpectedCStringHelper(v78, "StringView", &v209);
  if (v210 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v210])(&v211, &v209);
  (*(void (**)(uint64_t))(*(_QWORD *)v77 + 40))(v77);
  v216[5]((WTF::StringPrintStream *)&v216);
  v216[5]((WTF::StringPrintStream *)&v216);
  v89 = v217;
  if (!v217)
  {
    v209 = 0;
    goto LABEL_65;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v217, v218, (uint64_t *)&v209);
  v89 = v217;
  if (v217 != (WTF *)v219)
LABEL_65:
    WTF::fastFree((unint64_t)v89, v82, v83, v84, v85, v86, v87, v88);
  v90 = (WTF *)((uint64_t (*)(_QWORD))v212[4])(&v212);
  v91 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v90 + 32))(v90);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v216, v92);
  WTF::printExpectedCStringHelper(v91, "StringView", &v216);
  if ((_DWORD)v217 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v217])(&v211, &v216);
  v93 = (*(double (**)(WTF *))(*(_QWORD *)v90 + 40))(v90);
  WTF::printInternal(v90, (WTF::PrintStream *)&v208, v94, v95, v96, v97, v98, v99, v93, v100);
  WTF::printInternal(v90, (WTF::PrintStream *)&v207, v101, v102, v103, v104, v105, v106, v107, v108);
  WTF::printInternal(v90, (WTF::PrintStream *)&v206, v109, v110, v111, v112, v113, v114, v115, v116);
  WTF::printInternal(v90, (WTF::PrintStream *)&v205, v117, v118, v119, v120, v121, v122, v123, v124);
  WTF::printInternal(v90, (WTF::PrintStream *)&v204, v125, v126, v127, v128, v129, v130, v131, v132);
  WTF::printInternal(v90, (WTF::PrintStream *)&v209, v133, v134, v135, v136, v137, v138, v139, v140);
  v212[5]((WTF::StringPrintStream *)&v212);
  v148 = v209;
  v209 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, v141, v142, v143, v144, v145, v146, v147);
      WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  v149 = v204;
  v204 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, v141, v142, v143, v144, v145, v146, v147);
      WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
  v150 = v205;
  v205 = 0;
  if (v150)
  {
    if (*(_DWORD *)v150 == 2)
    {
      WTF::StringImpl::~StringImpl(v150, v141, v142, v143, v144, v145, v146, v147);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
    }
    else
    {
      *(_DWORD *)v150 -= 2;
    }
  }
  v151 = v206;
  v206 = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
    {
      WTF::StringImpl::~StringImpl(v151, v141, v142, v143, v144, v145, v146, v147);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
    }
    else
    {
      *(_DWORD *)v151 -= 2;
    }
  }
  v152 = v207;
  v207 = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
    {
      WTF::StringImpl::~StringImpl(v152, v141, v142, v143, v144, v145, v146, v147);
      WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
    }
    else
    {
      *(_DWORD *)v152 -= 2;
    }
  }
  v153 = v208;
  v208 = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
    {
      WTF::StringImpl::~StringImpl(v153, v141, v142, v143, v144, v145, v146, v147);
      WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
    }
    else
    {
      *(_DWORD *)v153 -= 2;
    }
  }
  v154 = v213;
  if (v213)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v213, v214, (uint64_t *)&v216);
    v154 = v213;
    *a1 = v216;
    if (v154 == (WTF *)v215)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v154, v141, v142, v143, v144, v145, v146, v147);
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, _QWORD *a8@<X8>, float a9@<S1>, char *a10, uint64_t a11, int a12, char *a13, uint64_t a14)
{
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  float v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  float v57;
  unsigned int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  float v76;
  unsigned int v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  int *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  unint64_t v172;
  const char *v173;
  int v174;
  const char *v175;
  WTF *v176;
  __int128 v177;
  _BYTE v178[128];
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v19 = *a2;
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  if (__src)
  {
    v20 = a3 - 1;
    if (!a3)
      v20 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v20, (uint64_t)&v173, a9);
  }
  else
  {
    v21 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 8) = 0;
    *(_BYTE *)(v21 + 16) = 0;
    v173 = (const char *)v21;
    v174 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v175, "StringView", &v173);
  if (v174 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v174])(&v172, &v173);
  (*((void (**)(const char **))v175 + 5))(&v175);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v29 = v176;
  if (!v176)
  {
    v163 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v163);
  v29 = v176;
  if (v176 != (WTF *)v178)
LABEL_12:
    WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v175, "%u", a4);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v37 = v176;
  if (!v176)
  {
    v162 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v162);
  v37 = v176;
  if (v176 != (WTF *)v178)
LABEL_17:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  if (a5)
  {
    v39 = a6 - 1;
    if (!a6)
      v39 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v39, (uint64_t)&v173, v38);
  }
  else
  {
    v40 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = 0;
    *(_BYTE *)(v40 + 16) = 0;
    v173 = (const char *)v40;
    v174 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v175, "StringView", &v173);
  if (v174 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v174])(&v172, &v173);
  (*((void (**)(const char **))v175 + 5))(&v175);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v48 = v176;
  if (!v176)
  {
    v161 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v161);
  v48 = v176;
  if (v176 != (WTF *)v178)
LABEL_29:
    WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v175, "%u", a7);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v56 = v176;
  if (!v176)
  {
    v160 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v160);
  v56 = v176;
  if (v176 != (WTF *)v178)
LABEL_34:
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  if (a10)
  {
    v58 = a11 - 1;
    if (!a11)
      v58 = 0;
    WTF::StringImpl::utf8ForCharacters(a10, v58, (uint64_t)&v173, v57);
  }
  else
  {
    v59 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v59 = 1;
    *(_QWORD *)(v59 + 8) = 0;
    *(_BYTE *)(v59 + 16) = 0;
    v173 = (const char *)v59;
    v174 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v175, "StringView", &v173);
  if (v174 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v174])(&v172, &v173);
  (*((void (**)(const char **))v175 + 5))(&v175);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v67 = v176;
  if (!v176)
  {
    v159 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v159);
  v67 = v176;
  if (v176 != (WTF *)v178)
LABEL_46:
    WTF::fastFree((unint64_t)v67, v60, v61, v62, v63, v64, v65, v66);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v175, "%u", a12);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v75 = v176;
  if (!v176)
  {
    v158 = 0;
    goto LABEL_51;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v158);
  v75 = v176;
  if (v176 != (WTF *)v178)
LABEL_51:
    WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
  v175 = (const char *)off_1E3572250;
  v176 = (WTF *)v178;
  v177 = xmmword_199122F80;
  v178[0] = 0;
  if (a13)
  {
    v77 = a14 - 1;
    if (!a14)
      v77 = 0;
    WTF::StringImpl::utf8ForCharacters(a13, v77, (uint64_t)&v173, v76);
  }
  else
  {
    v78 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v78 = 1;
    *(_QWORD *)(v78 + 8) = 0;
    *(_BYTE *)(v78 + 16) = 0;
    v173 = (const char *)v78;
    v174 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v175, "StringView", &v173);
  if (v174 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v174])(&v172, &v173);
  (*((void (**)(const char **))v175 + 5))(&v175);
  (*((void (**)(const char **))v175 + 5))(&v175);
  v86 = v176;
  if (!v176)
  {
    v157 = 0;
    goto LABEL_63;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v176, v177, (uint64_t *)&v157);
  v86 = v176;
  if (v176 != (WTF *)v178)
LABEL_63:
    WTF::fastFree((unint64_t)v86, v79, v80, v81, v82, v83, v84, v85);
  v175 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v176) = 41;
  v172 = v19;
  v173 = ": ";
  v174 = 2;
  v170 = v162;
  v171 = v163;
  v168 = v160;
  v169 = v161;
  v166 = v158;
  v167 = v159;
  v165 = v157;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v175, &v172, (uint64_t)&v173, (uint64_t *)&v171, (uint64_t *)&v170, (uint64_t *)&v169, (uint64_t *)&v168, (uint64_t *)&v167, &v164, (uint64_t *)&v166, (uint64_t *)&v165);
  if (v164)
  {
    *a8 = v164;
    v164 = 0;
    v94 = v157;
    v157 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
      {
        WTF::StringImpl::~StringImpl(v94, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
      }
      else
      {
        *(_DWORD *)v94 -= 2;
      }
    }
    v95 = v158;
    v158 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::~StringImpl(v95, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
      else
      {
        *(_DWORD *)v95 -= 2;
      }
    }
    v96 = v159;
    v159 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
      {
        WTF::StringImpl::~StringImpl(v96, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
      }
      else
      {
        *(_DWORD *)v96 -= 2;
      }
    }
    v97 = v160;
    v160 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    v98 = v161;
    v161 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::~StringImpl(v98, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
      }
      else
      {
        *(_DWORD *)v98 -= 2;
      }
    }
    v99 = v162;
    v162 = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
      {
        WTF::StringImpl::~StringImpl(v99, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
      }
      else
      {
        *(_DWORD *)v99 -= 2;
      }
    }
    v100 = v163;
    v163 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
      {
        WTF::StringImpl::~StringImpl(v100, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
      }
      else
      {
        *(_DWORD *)v100 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, double a9, float a10, unsigned __int8 *a11)
{
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  float v62;
  float v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  float v76;
  WTF *v77;
  WTF::PrintStream *v78;
  float v79;
  double v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  const WTF::String *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  float v95;
  const WTF::String *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  float v103;
  const WTF::String *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  float v111;
  const WTF::String *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  float v119;
  const WTF::String *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  float v127;
  const WTF::String *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  float v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  int v215;
  char v216;
  void (**v217)(WTF::StringPrintStream *__hidden);
  WTF *v218;
  __int128 v219;
  _BYTE v220[128];
  void (**v221)(WTF::StringPrintStream *__hidden);
  unint64_t v222;
  __int128 v223;
  _BYTE v224[128];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v217 = off_1E3572250;
  v218 = (WTF *)v220;
  v219 = xmmword_199122F80;
  v220[0] = 0;
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = v17 != 0;
    v19 = v17 - 1;
    if (!v18)
      v19 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v19, (uint64_t)&v214, a10);
  }
  else
  {
    v20 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v214 = (WTF::StringImpl *)v20;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v213, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v28 = v222;
  if (!v222)
  {
    v213 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v213);
  v28 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_12:
    WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v221, "%u", *a4);
  v221[5]((WTF::StringPrintStream *)&v221);
  v36 = v222;
  if (!v222)
  {
    v212 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v212);
  v36 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_17:
    WTF::fastFree(v36, v29, v30, v31, v32, v33, v34, v35);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a5)
  {
    v38 = *(_QWORD *)(a5 + 8);
    v18 = v38 != 0;
    v39 = v38 - 1;
    if (!v18)
      v39 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v39, (uint64_t)&v214, v37);
  }
  else
  {
    v40 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = 0;
    *(_BYTE *)(v40 + 16) = 0;
    v214 = (WTF::StringImpl *)v40;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v211, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v48 = v222;
  if (!v222)
  {
    v211 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v211);
  v48 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_29:
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a6)
  {
    v50 = *(_QWORD *)(a6 + 8);
    v18 = v50 != 0;
    v51 = v50 - 1;
    if (!v18)
      v51 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v51, (uint64_t)&v214, v49);
  }
  else
  {
    v52 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v52 = 1;
    *(_QWORD *)(v52 + 8) = 0;
    *(_BYTE *)(v52 + 16) = 0;
    v214 = (WTF::StringImpl *)v52;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v210, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v60 = v222;
  if (!v222)
  {
    v210 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v210);
  v60 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_41:
    WTF::fastFree(v60, v53, v54, v55, v56, v57, v58, v59);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v209, a2, a7, v61, v62);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a8)
  {
    v64 = *(_QWORD *)(a8 + 8);
    v18 = v64 != 0;
    v65 = v64 - 1;
    if (!v18)
      v65 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a8, v65, (uint64_t)&v214, v63);
  }
  else
  {
    v66 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v66 = 1;
    *(_QWORD *)(v66 + 8) = 0;
    *(_BYTE *)(v66 + 16) = 0;
    v214 = (WTF::StringImpl *)v66;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v208, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v74 = v222;
  if (!v222)
  {
    v214 = 0;
    goto LABEL_53;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v214);
  v74 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_53:
    WTF::fastFree(v74, v67, v68, v69, v70, v71, v72, v73);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v208, a2, a11, v75, v76);
  v77 = (WTF *)((uint64_t (*)(_QWORD))v217[4])(&v217);
  v78 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v77 + 32))(v77);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v221, v79);
  WTF::printExpectedCStringHelper(v78, "StringView", &v221);
  if ((_DWORD)v222 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v216, &v221);
  v80 = (*(double (**)(WTF *))(*(_QWORD *)v77 + 40))(v77);
  WTF::printInternal(v77, (WTF::PrintStream *)&v213, v81, v82, v83, v84, v85, v86, v80, v87);
  WTF::printInternal(v77, (WTF::PrintStream *)&v212, v88, v89, v90, v91, v92, v93, v94, v95);
  WTF::printInternal(v77, (WTF::PrintStream *)&v211, v96, v97, v98, v99, v100, v101, v102, v103);
  WTF::printInternal(v77, (WTF::PrintStream *)&v210, v104, v105, v106, v107, v108, v109, v110, v111);
  WTF::printInternal(v77, (WTF::PrintStream *)&v209, v112, v113, v114, v115, v116, v117, v118, v119);
  WTF::printInternal(v77, (WTF::PrintStream *)&v214, v120, v121, v122, v123, v124, v125, v126, v127);
  WTF::printInternal(v77, (WTF::PrintStream *)&v208, v128, v129, v130, v131, v132, v133, v134, v135);
  v217[5]((WTF::StringPrintStream *)&v217);
  v143 = v208;
  v208 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v144 = v214;
  v214 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  v145 = v209;
  v209 = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  v146 = v210;
  v210 = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  v147 = v211;
  v211 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  v148 = v212;
  v212 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  v149 = v213;
  v213 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
  v150 = v218;
  if (v218)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v218, v219, (uint64_t *)&v221);
    v150 = v218;
    *a1 = v221;
    if (v150 == (WTF *)v220)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v150, v136, v137, v138, v139, v140, v141, v142);
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, float a9@<S1>, char *a10, uint64_t a11)
{
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  float v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  int *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  const char *v129;
  int v130;
  const char *v131;
  WTF *v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v16 = *a2;
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  if (__src)
  {
    v17 = a3 - 1;
    if (!a3)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v17, (uint64_t)&v129, a9);
  }
  else
  {
    v18 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 0;
    v129 = (const char *)v18;
    v130 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v131, "StringView", &v129);
  if (v130 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v130])(&v128, &v129);
  (*((void (**)(const char **))v131 + 5))(&v131);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v26 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v121);
  v26 = v132;
  if (v132 != (WTF *)v134)
LABEL_12:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%lu", a4);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v34 = v132;
  if (!v132)
  {
    v120 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v120);
  v34 = v132;
  if (v132 != (WTF *)v134)
LABEL_17:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  if (a5)
  {
    v36 = a6 - 1;
    if (!a6)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v36, (uint64_t)&v129, v35);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v129 = (const char *)v37;
    v130 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v131, "StringView", &v129);
  if (v130 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v130])(&v128, &v129);
  (*((void (**)(const char **))v131 + 5))(&v131);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v45 = v132;
  if (!v132)
  {
    v119 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v119);
  v45 = v132;
  if (v132 != (WTF *)v134)
LABEL_29:
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%lu", a7);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v53 = v132;
  if (!v132)
  {
    v118 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v118);
  v53 = v132;
  if (v132 != (WTF *)v134)
LABEL_34:
    WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  if (a10)
  {
    v55 = a11 - 1;
    if (!a11)
      v55 = 0;
    WTF::StringImpl::utf8ForCharacters(a10, v55, (uint64_t)&v129, v54);
  }
  else
  {
    v56 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v56 = 1;
    *(_QWORD *)(v56 + 8) = 0;
    *(_BYTE *)(v56 + 16) = 0;
    v129 = (const char *)v56;
    v130 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v131, "StringView", &v129);
  if (v130 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v130])(&v128, &v129);
  (*((void (**)(const char **))v131 + 5))(&v131);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v64 = v132;
  if (!v132)
  {
    v117 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v117);
  v64 = v132;
  if (v132 != (WTF *)v134)
LABEL_46:
    WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
  v131 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v132) = 41;
  v128 = v16;
  v129 = ": ";
  v130 = 2;
  v126 = v120;
  v127 = v121;
  v124 = v118;
  v125 = v119;
  v123 = v117;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v131, &v128, (uint64_t)&v129, (uint64_t *)&v127, (uint64_t *)&v126, (uint64_t *)&v125, (uint64_t *)&v124, (uint64_t *)&v123, &v122);
  if (v122)
  {
    *a8 = v122;
    v122 = 0;
    v72 = v117;
    v117 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
      {
        WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      else
      {
        *(_DWORD *)v72 -= 2;
      }
    }
    v73 = v118;
    v118 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
      {
        WTF::StringImpl::~StringImpl(v73, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
      }
      else
      {
        *(_DWORD *)v73 -= 2;
      }
    }
    v74 = v119;
    v119 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
    v75 = v120;
    v120 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
      {
        WTF::StringImpl::~StringImpl(v75, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
      }
      else
      {
        *(_DWORD *)v75 -= 2;
      }
    }
    v76 = v121;
    v121 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
      {
        WTF::StringImpl::~StringImpl(v76, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
      else
      {
        *(_DWORD *)v76 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S1>)
{
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  const char *v84;
  int v85;
  const char *v86;
  WTF *v87;
  __int128 v88;
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v86 = (const char *)off_1E3572250;
  v87 = (WTF *)v89;
  v88 = xmmword_199122F80;
  v89[0] = 0;
  if (__src)
  {
    v13 = a3 - 1;
    if (!a3)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v13, (uint64_t)&v84, a8);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v84 = (const char *)v14;
    v85 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v86, "StringView", &v84);
  if (v85 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v85])(&v83, &v84);
  (*((void (**)(const char **))v86 + 5))(&v86);
  (*((void (**)(const char **))v86 + 5))(&v86);
  v22 = v87;
  if (!v87)
  {
    v78 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v87, v88, (uint64_t *)&v78);
  v22 = v87;
  if (v87 != (WTF *)v89)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v86 = (const char *)off_1E3572250;
  v87 = (WTF *)v89;
  v88 = xmmword_199122F80;
  v89[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v86, "%lu", a4);
  (*((void (**)(const char **))v86 + 5))(&v86);
  v30 = v87;
  if (!v87)
  {
    v77 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v87, v88, (uint64_t *)&v77);
  v30 = v87;
  if (v87 != (WTF *)v89)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v86 = (const char *)off_1E3572250;
  v87 = (WTF *)v89;
  v88 = xmmword_199122F80;
  v89[0] = 0;
  if (a5)
  {
    v32 = a6 - 1;
    if (!a6)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v32, (uint64_t)&v84, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v84 = (const char *)v33;
    v85 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v86, "StringView", &v84);
  if (v85 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v85])(&v83, &v84);
  (*((void (**)(const char **))v86 + 5))(&v86);
  (*((void (**)(const char **))v86 + 5))(&v86);
  v41 = v87;
  if (!v87)
  {
    v76 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v87, v88, (uint64_t *)&v76);
  v41 = v87;
  if (v87 != (WTF *)v89)
LABEL_29:
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  v86 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v87) = 41;
  v83 = v12;
  v84 = ": ";
  v85 = 2;
  v81 = v77;
  v82 = v78;
  v80 = v76;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v86, &v83, (uint64_t)&v84, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, &v79);
  if (v79)
  {
    *a7 = v79;
    v79 = 0;
    v49 = v76;
    v76 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    v50 = v77;
    v77 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    v51 = v78;
    v78 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, _QWORD *a8@<X8>, float a9@<S1>, char *a10, uint64_t a11)
{
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  float v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  int *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  const char *v129;
  int v130;
  const char *v131;
  WTF *v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v16 = *a2;
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  if (__src)
  {
    v17 = a3 - 1;
    if (!a3)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v17, (uint64_t)&v129, a9);
  }
  else
  {
    v18 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 0;
    v129 = (const char *)v18;
    v130 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v131, "StringView", &v129);
  if (v130 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v130])(&v128, &v129);
  (*((void (**)(const char **))v131 + 5))(&v131);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v26 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v121);
  v26 = v132;
  if (v132 != (WTF *)v134)
LABEL_12:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%u", a4);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v34 = v132;
  if (!v132)
  {
    v120 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v120);
  v34 = v132;
  if (v132 != (WTF *)v134)
LABEL_17:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  if (a5)
  {
    v36 = a6 - 1;
    if (!a6)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v36, (uint64_t)&v129, v35);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v129 = (const char *)v37;
    v130 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v131, "StringView", &v129);
  if (v130 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v130])(&v128, &v129);
  (*((void (**)(const char **))v131 + 5))(&v131);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v45 = v132;
  if (!v132)
  {
    v119 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v119);
  v45 = v132;
  if (v132 != (WTF *)v134)
LABEL_29:
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%u", a7);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v53 = v132;
  if (!v132)
  {
    v118 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v118);
  v53 = v132;
  if (v132 != (WTF *)v134)
LABEL_34:
    WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
  v131 = (const char *)off_1E3572250;
  v132 = (WTF *)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  if (a10)
  {
    v55 = a11 - 1;
    if (!a11)
      v55 = 0;
    WTF::StringImpl::utf8ForCharacters(a10, v55, (uint64_t)&v129, v54);
  }
  else
  {
    v56 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v56 = 1;
    *(_QWORD *)(v56 + 8) = 0;
    *(_BYTE *)(v56 + 16) = 0;
    v129 = (const char *)v56;
    v130 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v131, "StringView", &v129);
  if (v130 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v130])(&v128, &v129);
  (*((void (**)(const char **))v131 + 5))(&v131);
  (*((void (**)(const char **))v131 + 5))(&v131);
  v64 = v132;
  if (!v132)
  {
    v117 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v132, v133, (uint64_t *)&v117);
  v64 = v132;
  if (v132 != (WTF *)v134)
LABEL_46:
    WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
  v131 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v132) = 41;
  v128 = v16;
  v129 = ": ";
  v130 = 2;
  v126 = v120;
  v127 = v121;
  v124 = v118;
  v125 = v119;
  v123 = v117;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v131, &v128, (uint64_t)&v129, (uint64_t *)&v127, (uint64_t *)&v126, (uint64_t *)&v125, (uint64_t *)&v124, (uint64_t *)&v123, &v122);
  if (v122)
  {
    *a8 = v122;
    v122 = 0;
    v72 = v117;
    v117 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
      {
        WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      else
      {
        *(_DWORD *)v72 -= 2;
      }
    }
    v73 = v118;
    v118 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
      {
        WTF::StringImpl::~StringImpl(v73, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
      }
      else
      {
        *(_DWORD *)v73 -= 2;
      }
    }
    v74 = v119;
    v119 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
    v75 = v120;
    v120 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
      {
        WTF::StringImpl::~StringImpl(v75, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
      }
      else
      {
        *(_DWORD *)v75 -= 2;
      }
    }
    v76 = v121;
    v121 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
      {
        WTF::StringImpl::~StringImpl(v76, v65, v66, v67, v68, v69, v70, v71);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
      else
      {
        *(_DWORD *)v76 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, double a8, float a9)
{
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  double v38;
  float v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  double v52;
  float v53;
  WTF *v54;
  WTF::PrintStream *v55;
  float v56;
  double v57;
  const WTF::String *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  char v157;
  void (**v158)(WTF::StringPrintStream *__hidden);
  WTF *v159;
  __int128 v160;
  _BYTE v161[128];
  void (**v162)(WTF::StringPrintStream *__hidden);
  WTF *v163;
  __int128 v164;
  _BYTE v165[128];
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v158 = off_1E3572250;
  v159 = (WTF *)v161;
  v160 = xmmword_199122F80;
  v161[0] = 0;
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a3)
  {
    v14 = *(_QWORD *)(a3 + 8);
    v15 = v14 != 0;
    v16 = v14 - 1;
    if (!v15)
      v16 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v16, (uint64_t)&v155, a9);
  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 0;
    v155 = (WTF::StringImpl *)v17;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v154, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v25 = v163;
  if (!v163)
  {
    v154 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v154);
  v25 = v163;
  if (v163 != (WTF *)v165)
LABEL_12:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a4)
  {
    v27 = *(_QWORD *)(a4 + 8);
    v15 = v27 != 0;
    v28 = v27 - 1;
    if (!v15)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v28, (uint64_t)&v155, v26);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v155 = (WTF::StringImpl *)v29;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v153, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v37 = v163;
  if (!v163)
  {
    v153 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v153);
  v37 = v163;
  if (v163 != (WTF *)v165)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v152, a2, a5, v38, v39);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a6)
  {
    v41 = *(_QWORD *)(a6 + 8);
    v15 = v41 != 0;
    v42 = v41 - 1;
    if (!v15)
      v42 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v42, (uint64_t)&v155, v40);
  }
  else
  {
    v43 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = 0;
    *(_BYTE *)(v43 + 16) = 0;
    v155 = (WTF::StringImpl *)v43;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v151, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v51 = v163;
  if (!v163)
  {
    v155 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v155);
  v51 = v163;
  if (v163 != (WTF *)v165)
LABEL_36:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v151, a2, a7, v52, v53);
  v54 = (WTF *)((uint64_t (*)(_QWORD))v158[4])(&v158);
  v55 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v54 + 32))(v54);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v162, v56);
  WTF::printExpectedCStringHelper(v55, "StringView", &v162);
  if ((_DWORD)v163 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v163])(&v157, &v162);
  v57 = (*(double (**)(WTF *))(*(_QWORD *)v54 + 40))(v54);
  WTF::printInternal(v54, (WTF::PrintStream *)&v154, v58, v59, v60, v61, v62, v63, v57, v64);
  WTF::printInternal(v54, (WTF::PrintStream *)&v153, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v54, (WTF::PrintStream *)&v152, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v54, (WTF::PrintStream *)&v155, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v54, (WTF::PrintStream *)&v151, v89, v90, v91, v92, v93, v94, v95, v96);
  v158[5]((WTF::StringPrintStream *)&v158);
  v104 = v151;
  v151 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v155;
  v155 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v152;
  v152 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v153;
  v153 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v154;
  v154 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v159;
  if (v159)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v159, v160, (uint64_t *)&v162);
    v109 = v159;
    *a1 = v162;
    if (v109 == (WTF *)v161)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v109, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::ParserBase::fail<char const*>(unint64_t *a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int *v30;
  unint64_t v31;
  _QWORD v32[2];
  const char *v33;
  WTF *v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v33 = (const char *)off_1E3572250;
  v34 = (WTF *)v36;
  v35 = xmmword_199122F80;
  v36[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%s", a2);
  (*((void (**)(const char **))v33 + 5))(&v33);
  v12 = v34;
  if (!v34)
  {
    v29 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v34, v35, (uint64_t *)&v29);
  v12 = v34;
  if (v34 != (WTF *)v36)
LABEL_5:
    WTF::fastFree((unint64_t)v12, v5, v6, v7, v8, v9, v10, v11);
  v33 = "WebAssembly.Module doesn't parse at byte ";
  v34 = (WTF *)42;
  v32[0] = ": ";
  v32[1] = 3;
  v31 = v4;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String>((uint64_t)&v33, &v31, (uint64_t)v32, (uint64_t *)&v29, &v30);
  if (v30)
  {
    *a3 = v30;
    v20 = v29;
    v29 = 0;
    v30 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [16],unsigned int,char [18]>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  char v93;
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  void (**v98)(WTF::StringPrintStream *__hidden);
  unint64_t v99;
  __int128 v100;
  _BYTE v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%s", "call_ref index ");
  v98[5]((WTF::StringPrintStream *)&v98);
  v11 = v99;
  if (!v99)
  {
    v92 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v92);
  v11 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_5:
    WTF::fastFree(v11, v4, v5, v6, v7, v8, v9, v10);
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%u", *a2);
  v98[5]((WTF::StringPrintStream *)&v98);
  v19 = v99;
  if (!v99)
  {
    v91 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v91);
  v19 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_10:
    WTF::fastFree(v19, v12, v13, v14, v15, v16, v17, v18);
  v98 = off_1E3572250;
  v99 = (unint64_t)v101;
  v100 = xmmword_199122F80;
  v101[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v98, "%s", " is out of bounds");
  v98[5]((WTF::StringPrintStream *)&v98);
  v27 = v99;
  if (!v99)
  {
    v90 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v99, v100, (uint64_t *)&v90);
  v27 = v99;
  if ((_BYTE *)v99 != v101)
LABEL_15:
    WTF::fastFree(v27, v20, v21, v22, v23, v24, v25, v26);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v94[4])(&v94);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v98, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v98);
  if ((_DWORD)v99 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v99])(&v93, &v98);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v92, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v91, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v90, v47, v48, v49, v50, v51, v52, v53, v54);
  v94[5]((WTF::StringPrintStream *)&v94);
  v62 = v90;
  v90 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = v91;
  v91 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = v92;
  v92 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = v95;
  if (v95)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v98);
    v65 = v95;
    *a1 = v98;
    if (v65 == (WTF *)v97)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v65, v55, v56, v57, v58, v59, v60, v61);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [65],unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  WTF::PrintStream *v21;
  float v22;
  double v23;
  const WTF::String *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  const WTF::String *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  float v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  char v67;
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  void (**v72)(WTF::StringPrintStream *__hidden);
  WTF *v73;
  __int128 v74;
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  v72 = off_1E3572250;
  v73 = (WTF *)v75;
  v74 = xmmword_199122F80;
  v75[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v72, "%s", "invalid type index (not a function signature) for call_ref, got ");
  v72[5]((WTF::StringPrintStream *)&v72);
  v11 = v73;
  if (!v73)
  {
    v66 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v73, v74, (uint64_t *)&v66);
  v11 = v73;
  if (v73 != (WTF *)v75)
LABEL_5:
    WTF::fastFree((unint64_t)v11, v4, v5, v6, v7, v8, v9, v10);
  v72 = off_1E3572250;
  v73 = (WTF *)v75;
  v74 = xmmword_199122F80;
  v75[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v72, "%u", *a2);
  v72[5]((WTF::StringPrintStream *)&v72);
  v19 = v73;
  if (!v73)
  {
    v65 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v73, v74, (uint64_t *)&v65);
  v19 = v73;
  if (v73 != (WTF *)v75)
LABEL_10:
    WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
  v20 = (WTF *)((uint64_t (*)(_QWORD))v68[4])(&v68);
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v20 + 32))(v20);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v72, v22);
  WTF::printExpectedCStringHelper(v21, "StringView", &v72);
  if ((_DWORD)v73 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v73])(&v67, &v72);
  v23 = (*(double (**)(WTF *))(*(_QWORD *)v20 + 40))(v20);
  WTF::printInternal(v20, (WTF::PrintStream *)&v66, v24, v25, v26, v27, v28, v29, v23, v30);
  WTF::printInternal(v20, (WTF::PrintStream *)&v65, v31, v32, v33, v34, v35, v36, v37, v38);
  v68[5]((WTF::StringPrintStream *)&v68);
  v46 = v65;
  v65 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = v66;
  v66 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = v69;
  if (v69)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v72);
    v48 = v69;
    *a1 = v72;
    if (v48 == (WTF *)v71)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v48, v39, v40, v41, v42, v43, v44, v45);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [43],JSC::Wasm::Type,char [6],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "invalid type for call_ref value, expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::ParserBase::fail<char const*,unsigned long,char const*,unsigned long,char const*>(unint64_t *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X4>, const char *a6@<X5>, _QWORD *a7@<X8>)
{
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  int *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  const char *v116;
  int v117;
  unint64_t v118;
  const char *v119;
  WTF *v120;
  __int128 v121;
  _BYTE v122[128];
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  v119 = (const char *)off_1E3572250;
  v120 = (WTF *)v122;
  v121 = xmmword_199122F80;
  v122[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v119, "%s", a2);
  (*((void (**)(const char **))v119 + 5))(&v119);
  v20 = v120;
  if (!v120)
  {
    v109 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v120, v121, (uint64_t *)&v109);
  v20 = v120;
  if (v120 != (WTF *)v122)
LABEL_5:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  v119 = (const char *)off_1E3572250;
  v120 = (WTF *)v122;
  v121 = xmmword_199122F80;
  v122[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v119, "%lu", a3);
  (*((void (**)(const char **))v119 + 5))(&v119);
  v28 = v120;
  if (!v120)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v120, v121, (uint64_t *)&v108);
  v28 = v120;
  if (v120 != (WTF *)v122)
LABEL_10:
    WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
  v119 = (const char *)off_1E3572250;
  v120 = (WTF *)v122;
  v121 = xmmword_199122F80;
  v122[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v119, "%s", a4);
  (*((void (**)(const char **))v119 + 5))(&v119);
  v36 = v120;
  if (!v120)
  {
    v107 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v120, v121, (uint64_t *)&v107);
  v36 = v120;
  if (v120 != (WTF *)v122)
LABEL_15:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v119 = (const char *)off_1E3572250;
  v120 = (WTF *)v122;
  v121 = xmmword_199122F80;
  v122[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v119, "%lu", a5);
  (*((void (**)(const char **))v119 + 5))(&v119);
  v44 = v120;
  if (!v120)
  {
    v106 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v120, v121, (uint64_t *)&v106);
  v44 = v120;
  if (v120 != (WTF *)v122)
LABEL_20:
    WTF::fastFree((unint64_t)v44, v37, v38, v39, v40, v41, v42, v43);
  v119 = (const char *)off_1E3572250;
  v120 = (WTF *)v122;
  v121 = xmmword_199122F80;
  v122[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v119, "%s", a6);
  (*((void (**)(const char **))v119 + 5))(&v119);
  v52 = v120;
  if (!v120)
  {
    v105 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v120, v121, (uint64_t *)&v105);
  v52 = v120;
  if (v120 != (WTF *)v122)
LABEL_25:
    WTF::fastFree((unint64_t)v52, v45, v46, v47, v48, v49, v50, v51);
  v118 = v12;
  v119 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v120) = 41;
  v117 = 2;
  v115 = v109;
  v116 = ": ";
  v113 = v107;
  v114 = v108;
  v111 = v105;
  v112 = v106;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v119, &v118, (uint64_t)&v116, (uint64_t *)&v115, (uint64_t *)&v114, (uint64_t *)&v113, (uint64_t *)&v112, (uint64_t *)&v111, &v110);
  if (v110)
  {
    *a7 = v110;
    v110 = 0;
    v60 = v105;
    v105 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
    v61 = v106;
    v106 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
    }
    v62 = v107;
    v107 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
    v63 = v108;
    v108 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
      {
        WTF::StringImpl::~StringImpl(v63, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
      }
      else
      {
        *(_DWORD *)v63 -= 2;
      }
    }
    v64 = v109;
    v109 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::~StringImpl(v64, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
      }
      else
      {
        *(_DWORD *)v64 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<char const*,unsigned long,char const*>(unint64_t *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  const char *v74;
  int v75;
  unint64_t v76;
  const char *v77;
  WTF *v78;
  __int128 v79;
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v77 = (const char *)off_1E3572250;
  v78 = (WTF *)v80;
  v79 = xmmword_199122F80;
  v80[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v77, "%s", a2);
  (*((void (**)(const char **))v77 + 5))(&v77);
  v16 = v78;
  if (!v78)
  {
    v69 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v78, v79, (uint64_t *)&v69);
  v16 = v78;
  if (v78 != (WTF *)v80)
LABEL_5:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  v77 = (const char *)off_1E3572250;
  v78 = (WTF *)v80;
  v79 = xmmword_199122F80;
  v80[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v77, "%lu", a3);
  (*((void (**)(const char **))v77 + 5))(&v77);
  v24 = v78;
  if (!v78)
  {
    v68 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v78, v79, (uint64_t *)&v68);
  v24 = v78;
  if (v78 != (WTF *)v80)
LABEL_10:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v77 = (const char *)off_1E3572250;
  v78 = (WTF *)v80;
  v79 = xmmword_199122F80;
  v80[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v77, "%s", a4);
  (*((void (**)(const char **))v77 + 5))(&v77);
  v32 = v78;
  if (!v78)
  {
    v67 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v78, v79, (uint64_t *)&v67);
  v32 = v78;
  if (v78 != (WTF *)v80)
LABEL_15:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v76 = v8;
  v77 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v78) = 41;
  v75 = 2;
  v73 = v69;
  v74 = ": ";
  v71 = v67;
  v72 = v68;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v77, &v76, (uint64_t)&v74, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, &v70);
  if (v70)
  {
    *a5 = v70;
    v70 = 0;
    v40 = v67;
    v67 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
    v41 = v68;
    v68 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    v42 = v69;
    v69 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      }
      else
      {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [41],JSC::Wasm::Type,char [12],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in call_ref, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [50],unsigned int,char [12],unsigned long,char [43],WTF::String>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _QWORD *a3, WTF::PrintStream *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  float v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  WTF::PrintStream *v58;
  float v59;
  double v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  const WTF::String *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  float v83;
  const WTF::String *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  float v91;
  const WTF::String *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  float v99;
  const WTF::String *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  float v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  char v176;
  void (**v177)(WTF::StringPrintStream *__hidden);
  WTF *v178;
  __int128 v179;
  _BYTE v180[128];
  void (**v181)(WTF::StringPrintStream *__hidden);
  WTF *v182;
  __int128 v183;
  _BYTE v184[128];
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v177 = off_1E3572250;
  v178 = (WTF *)v180;
  v179 = xmmword_199122F80;
  v180[0] = 0;
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", "Too few values on stack for block. Block expects ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v15 = v182;
  if (!v182)
  {
    v175 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v175);
  v15 = v182;
  if (v182 != (WTF *)v184)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%u", *a2);
  v181[5]((WTF::StringPrintStream *)&v181);
  v23 = v182;
  if (!v182)
  {
    v174 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v174);
  v23 = v182;
  if (v182 != (WTF *)v184)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", ", but only ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v31 = v182;
  if (!v182)
  {
    v173 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v173);
  v31 = v182;
  if (v182 != (WTF *)v184)
LABEL_15:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%lu", *a3);
  v181[5]((WTF::StringPrintStream *)&v181);
  v39 = v182;
  if (!v182)
  {
    v172 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v172);
  v39 = v182;
  if (v182 != (WTF *)v184)
LABEL_20:
    WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", " were present. Block has inlineSignature: ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v47 = v182;
  if (!v182)
  {
    v171 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v171);
  v47 = v182;
  if (v182 != (WTF *)v184)
LABEL_25:
    WTF::fastFree((unint64_t)v47, v40, (uint64_t)v41, v42, v43, v44, v45, v46);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::printInternal((WTF *)&v181, a4, v41, v42, v43, v44, v45, v46, 0.0, v48);
  v181[5]((WTF::StringPrintStream *)&v181);
  v56 = v182;
  if (!v182)
  {
    v170 = 0;
    goto LABEL_30;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v170);
  v56 = v182;
  if (v182 != (WTF *)v184)
LABEL_30:
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  v57 = (WTF *)((uint64_t (*)(_QWORD))v177[4])(&v177);
  v58 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v57 + 32))(v57);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v181, v59);
  WTF::printExpectedCStringHelper(v58, "StringView", &v181);
  if ((_DWORD)v182 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v176, &v181);
  v60 = (*(double (**)(WTF *))(*(_QWORD *)v57 + 40))(v57);
  WTF::printInternal(v57, (WTF::PrintStream *)&v175, v61, v62, v63, v64, v65, v66, v60, v67);
  WTF::printInternal(v57, (WTF::PrintStream *)&v174, v68, v69, v70, v71, v72, v73, v74, v75);
  WTF::printInternal(v57, (WTF::PrintStream *)&v173, v76, v77, v78, v79, v80, v81, v82, v83);
  WTF::printInternal(v57, (WTF::PrintStream *)&v172, v84, v85, v86, v87, v88, v89, v90, v91);
  WTF::printInternal(v57, (WTF::PrintStream *)&v171, v92, v93, v94, v95, v96, v97, v98, v99);
  WTF::printInternal(v57, (WTF::PrintStream *)&v170, v100, v101, v102, v103, v104, v105, v106, v107);
  v177[5]((WTF::StringPrintStream *)&v177);
  v115 = v170;
  v170 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v171;
  v171 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = v172;
  v172 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = v173;
  v173 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = v174;
  v174 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = v175;
  v175 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  v121 = v178;
  if (v178)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v178, v179, (uint64_t *)&v181);
    v121 = v178;
    *a1 = v181;
    if (v121 == (WTF *)v180)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v121, v108, v109, v110, v111, v112, v113, v114);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [36],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Block expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [54],unsigned int,char [12],unsigned long,char [42],WTF::String>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _QWORD *a3, WTF::PrintStream *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  float v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  WTF::PrintStream *v58;
  float v59;
  double v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  const WTF::String *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  float v83;
  const WTF::String *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  float v91;
  const WTF::String *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  float v99;
  const WTF::String *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  float v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  char v176;
  void (**v177)(WTF::StringPrintStream *__hidden);
  WTF *v178;
  __int128 v179;
  _BYTE v180[128];
  void (**v181)(WTF::StringPrintStream *__hidden);
  WTF *v182;
  __int128 v183;
  _BYTE v184[128];
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v177 = off_1E3572250;
  v178 = (WTF *)v180;
  v179 = xmmword_199122F80;
  v180[0] = 0;
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", "Too few values on stack for loop block. Loop expects ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v15 = v182;
  if (!v182)
  {
    v175 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v175);
  v15 = v182;
  if (v182 != (WTF *)v184)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%u", *a2);
  v181[5]((WTF::StringPrintStream *)&v181);
  v23 = v182;
  if (!v182)
  {
    v174 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v174);
  v23 = v182;
  if (v182 != (WTF *)v184)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", ", but only ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v31 = v182;
  if (!v182)
  {
    v173 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v173);
  v31 = v182;
  if (v182 != (WTF *)v184)
LABEL_15:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%lu", *a3);
  v181[5]((WTF::StringPrintStream *)&v181);
  v39 = v182;
  if (!v182)
  {
    v172 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v172);
  v39 = v182;
  if (v182 != (WTF *)v184)
LABEL_20:
    WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", " were present. Loop has inlineSignature: ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v47 = v182;
  if (!v182)
  {
    v171 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v171);
  v47 = v182;
  if (v182 != (WTF *)v184)
LABEL_25:
    WTF::fastFree((unint64_t)v47, v40, (uint64_t)v41, v42, v43, v44, v45, v46);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::printInternal((WTF *)&v181, a4, v41, v42, v43, v44, v45, v46, 0.0, v48);
  v181[5]((WTF::StringPrintStream *)&v181);
  v56 = v182;
  if (!v182)
  {
    v170 = 0;
    goto LABEL_30;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v170);
  v56 = v182;
  if (v182 != (WTF *)v184)
LABEL_30:
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  v57 = (WTF *)((uint64_t (*)(_QWORD))v177[4])(&v177);
  v58 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v57 + 32))(v57);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v181, v59);
  WTF::printExpectedCStringHelper(v58, "StringView", &v181);
  if ((_DWORD)v182 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v176, &v181);
  v60 = (*(double (**)(WTF *))(*(_QWORD *)v57 + 40))(v57);
  WTF::printInternal(v57, (WTF::PrintStream *)&v175, v61, v62, v63, v64, v65, v66, v60, v67);
  WTF::printInternal(v57, (WTF::PrintStream *)&v174, v68, v69, v70, v71, v72, v73, v74, v75);
  WTF::printInternal(v57, (WTF::PrintStream *)&v173, v76, v77, v78, v79, v80, v81, v82, v83);
  WTF::printInternal(v57, (WTF::PrintStream *)&v172, v84, v85, v86, v87, v88, v89, v90, v91);
  WTF::printInternal(v57, (WTF::PrintStream *)&v171, v92, v93, v94, v95, v96, v97, v98, v99);
  WTF::printInternal(v57, (WTF::PrintStream *)&v170, v100, v101, v102, v103, v104, v105, v106, v107);
  v177[5]((WTF::StringPrintStream *)&v177);
  v115 = v170;
  v170 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v171;
  v171 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = v172;
  v172 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = v173;
  v173 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = v174;
  v174 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = v175;
  v175 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  v121 = v178;
  if (v178)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v178, v179, (uint64_t *)&v181);
    v121 = v178;
    *a1 = v181;
    if (v121 == (WTF *)v180)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v121, v108, v109, v110, v111, v112, v113, v114);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [35],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Loop expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [31],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "if condition must be i32, got ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [53],unsigned int,char [12],unsigned long,char [40],WTF::String>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _QWORD *a3, WTF::PrintStream *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  float v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  WTF::PrintStream *v58;
  float v59;
  double v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  const WTF::String *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  float v83;
  const WTF::String *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  float v91;
  const WTF::String *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  float v99;
  const WTF::String *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  float v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  char v176;
  void (**v177)(WTF::StringPrintStream *__hidden);
  WTF *v178;
  __int128 v179;
  _BYTE v180[128];
  void (**v181)(WTF::StringPrintStream *__hidden);
  WTF *v182;
  __int128 v183;
  _BYTE v184[128];
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v177 = off_1E3572250;
  v178 = (WTF *)v180;
  v179 = xmmword_199122F80;
  v180[0] = 0;
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", "Too few arguments on stack for if block. If expects ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v15 = v182;
  if (!v182)
  {
    v175 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v175);
  v15 = v182;
  if (v182 != (WTF *)v184)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%u", *a2);
  v181[5]((WTF::StringPrintStream *)&v181);
  v23 = v182;
  if (!v182)
  {
    v174 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v174);
  v23 = v182;
  if (v182 != (WTF *)v184)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", ", but only ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v31 = v182;
  if (!v182)
  {
    v173 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v173);
  v31 = v182;
  if (v182 != (WTF *)v184)
LABEL_15:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%lu", *a3);
  v181[5]((WTF::StringPrintStream *)&v181);
  v39 = v182;
  if (!v182)
  {
    v172 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v172);
  v39 = v182;
  if (v182 != (WTF *)v184)
LABEL_20:
    WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", " were present. If block has signature: ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v47 = v182;
  if (!v182)
  {
    v171 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v171);
  v47 = v182;
  if (v182 != (WTF *)v184)
LABEL_25:
    WTF::fastFree((unint64_t)v47, v40, (uint64_t)v41, v42, v43, v44, v45, v46);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::printInternal((WTF *)&v181, a4, v41, v42, v43, v44, v45, v46, 0.0, v48);
  v181[5]((WTF::StringPrintStream *)&v181);
  v56 = v182;
  if (!v182)
  {
    v170 = 0;
    goto LABEL_30;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v170);
  v56 = v182;
  if (v182 != (WTF *)v184)
LABEL_30:
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  v57 = (WTF *)((uint64_t (*)(_QWORD))v177[4])(&v177);
  v58 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v57 + 32))(v57);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v181, v59);
  WTF::printExpectedCStringHelper(v58, "StringView", &v181);
  if ((_DWORD)v182 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v176, &v181);
  v60 = (*(double (**)(WTF *))(*(_QWORD *)v57 + 40))(v57);
  WTF::printInternal(v57, (WTF::PrintStream *)&v175, v61, v62, v63, v64, v65, v66, v60, v67);
  WTF::printInternal(v57, (WTF::PrintStream *)&v174, v68, v69, v70, v71, v72, v73, v74, v75);
  WTF::printInternal(v57, (WTF::PrintStream *)&v173, v76, v77, v78, v79, v80, v81, v82, v83);
  WTF::printInternal(v57, (WTF::PrintStream *)&v172, v84, v85, v86, v87, v88, v89, v90, v91);
  WTF::printInternal(v57, (WTF::PrintStream *)&v171, v92, v93, v94, v95, v96, v97, v98, v99);
  WTF::printInternal(v57, (WTF::PrintStream *)&v170, v100, v101, v102, v103, v104, v105, v106, v107);
  v177[5]((WTF::StringPrintStream *)&v177);
  v115 = v170;
  v170 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v171;
  v171 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = v172;
  v172 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = v173;
  v173 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = v174;
  v174 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = v175;
  v175 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  v121 = v178;
  if (v178)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v178, v179, (uint64_t *)&v181);
    v121 = v178;
    *a1 = v181;
    if (v121 == (WTF *)v180)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v121, v108, v109, v110, v111, v112, v113, v114);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [55],unsigned int,char [12],unsigned long,char [41],WTF::String>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _QWORD *a3, WTF::PrintStream *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  float v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  WTF::PrintStream *v58;
  float v59;
  double v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  const WTF::String *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  float v83;
  const WTF::String *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  float v91;
  const WTF::String *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  float v99;
  const WTF::String *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  float v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  char v176;
  void (**v177)(WTF::StringPrintStream *__hidden);
  WTF *v178;
  __int128 v179;
  _BYTE v180[128];
  void (**v181)(WTF::StringPrintStream *__hidden);
  WTF *v182;
  __int128 v183;
  _BYTE v184[128];
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v177 = off_1E3572250;
  v178 = (WTF *)v180;
  v179 = xmmword_199122F80;
  v180[0] = 0;
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", "Too few arguments on stack for try block. Try expects ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v15 = v182;
  if (!v182)
  {
    v175 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v175);
  v15 = v182;
  if (v182 != (WTF *)v184)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%u", *a2);
  v181[5]((WTF::StringPrintStream *)&v181);
  v23 = v182;
  if (!v182)
  {
    v174 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v174);
  v23 = v182;
  if (v182 != (WTF *)v184)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", ", but only ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v31 = v182;
  if (!v182)
  {
    v173 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v173);
  v31 = v182;
  if (v182 != (WTF *)v184)
LABEL_15:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%lu", *a3);
  v181[5]((WTF::StringPrintStream *)&v181);
  v39 = v182;
  if (!v182)
  {
    v172 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v172);
  v39 = v182;
  if (v182 != (WTF *)v184)
LABEL_20:
    WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", " were present. Try block has signature: ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v47 = v182;
  if (!v182)
  {
    v171 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v171);
  v47 = v182;
  if (v182 != (WTF *)v184)
LABEL_25:
    WTF::fastFree((unint64_t)v47, v40, (uint64_t)v41, v42, v43, v44, v45, v46);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::printInternal((WTF *)&v181, a4, v41, v42, v43, v44, v45, v46, 0.0, v48);
  v181[5]((WTF::StringPrintStream *)&v181);
  v56 = v182;
  if (!v182)
  {
    v170 = 0;
    goto LABEL_30;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v170);
  v56 = v182;
  if (v182 != (WTF *)v184)
LABEL_30:
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  v57 = (WTF *)((uint64_t (*)(_QWORD))v177[4])(&v177);
  v58 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v57 + 32))(v57);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v181, v59);
  WTF::printExpectedCStringHelper(v58, "StringView", &v181);
  if ((_DWORD)v182 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v176, &v181);
  v60 = (*(double (**)(WTF *))(*(_QWORD *)v57 + 40))(v57);
  WTF::printInternal(v57, (WTF::PrintStream *)&v175, v61, v62, v63, v64, v65, v66, v60, v67);
  WTF::printInternal(v57, (WTF::PrintStream *)&v174, v68, v69, v70, v71, v72, v73, v74, v75);
  WTF::printInternal(v57, (WTF::PrintStream *)&v173, v76, v77, v78, v79, v80, v81, v82, v83);
  WTF::printInternal(v57, (WTF::PrintStream *)&v172, v84, v85, v86, v87, v88, v89, v90, v91);
  WTF::printInternal(v57, (WTF::PrintStream *)&v171, v92, v93, v94, v95, v96, v97, v98, v99);
  WTF::printInternal(v57, (WTF::PrintStream *)&v170, v100, v101, v102, v103, v104, v105, v106, v107);
  v177[5]((WTF::StringPrintStream *)&v177);
  v115 = v170;
  v170 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v171;
  v171 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = v172;
  v172 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = v173;
  v173 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = v174;
  v174 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = v175;
  v175 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  v121 = v178;
  if (v178)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v178, v179, (uint64_t *)&v181);
    v121 = v178;
    *a1 = v181;
    if (v121 == (WTF *)v180)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v121, v108, v109, v110, v111, v112, v113, v114);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [34],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Try expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [82],unsigned int,char [12],unsigned long,char [41],WTF::String>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _QWORD *a3, WTF::PrintStream *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  float v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  WTF::PrintStream *v58;
  float v59;
  double v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  const WTF::String *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  float v83;
  const WTF::String *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  float v91;
  const WTF::String *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  float v99;
  const WTF::String *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  float v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  char v176;
  void (**v177)(WTF::StringPrintStream *__hidden);
  WTF *v178;
  __int128 v179;
  _BYTE v180[128];
  void (**v181)(WTF::StringPrintStream *__hidden);
  WTF *v182;
  __int128 v183;
  _BYTE v184[128];
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v177 = off_1E3572250;
  v178 = (WTF *)v180;
  v179 = xmmword_199122F80;
  v180[0] = 0;
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", "Too few arguments on stack for the exception being thrown. The exception expects ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v15 = v182;
  if (!v182)
  {
    v175 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v175);
  v15 = v182;
  if (v182 != (WTF *)v184)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%u", *a2);
  v181[5]((WTF::StringPrintStream *)&v181);
  v23 = v182;
  if (!v182)
  {
    v174 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v174);
  v23 = v182;
  if (v182 != (WTF *)v184)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", ", but only ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v31 = v182;
  if (!v182)
  {
    v173 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v173);
  v31 = v182;
  if (v182 != (WTF *)v184)
LABEL_15:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%lu", *a3);
  v181[5]((WTF::StringPrintStream *)&v181);
  v39 = v182;
  if (!v182)
  {
    v172 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v172);
  v39 = v182;
  if (v182 != (WTF *)v184)
LABEL_20:
    WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", " were present. Exception has signature: ");
  v181[5]((WTF::StringPrintStream *)&v181);
  v47 = v182;
  if (!v182)
  {
    v171 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v171);
  v47 = v182;
  if (v182 != (WTF *)v184)
LABEL_25:
    WTF::fastFree((unint64_t)v47, v40, (uint64_t)v41, v42, v43, v44, v45, v46);
  v181 = off_1E3572250;
  v182 = (WTF *)v184;
  v183 = xmmword_199122F80;
  v184[0] = 0;
  WTF::printInternal((WTF *)&v181, a4, v41, v42, v43, v44, v45, v46, 0.0, v48);
  v181[5]((WTF::StringPrintStream *)&v181);
  v56 = v182;
  if (!v182)
  {
    v170 = 0;
    goto LABEL_30;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v182, v183, (uint64_t *)&v170);
  v56 = v182;
  if (v182 != (WTF *)v184)
LABEL_30:
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  v57 = (WTF *)((uint64_t (*)(_QWORD))v177[4])(&v177);
  v58 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v57 + 32))(v57);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v181, v59);
  WTF::printExpectedCStringHelper(v58, "StringView", &v181);
  if ((_DWORD)v182 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v176, &v181);
  v60 = (*(double (**)(WTF *))(*(_QWORD *)v57 + 40))(v57);
  WTF::printInternal(v57, (WTF::PrintStream *)&v175, v61, v62, v63, v64, v65, v66, v60, v67);
  WTF::printInternal(v57, (WTF::PrintStream *)&v174, v68, v69, v70, v71, v72, v73, v74, v75);
  WTF::printInternal(v57, (WTF::PrintStream *)&v173, v76, v77, v78, v79, v80, v81, v82, v83);
  WTF::printInternal(v57, (WTF::PrintStream *)&v172, v84, v85, v86, v87, v88, v89, v90, v91);
  WTF::printInternal(v57, (WTF::PrintStream *)&v171, v92, v93, v94, v95, v96, v97, v98, v99);
  WTF::printInternal(v57, (WTF::PrintStream *)&v170, v100, v101, v102, v103, v104, v105, v106, v107);
  v177[5]((WTF::StringPrintStream *)&v177);
  v115 = v170;
  v170 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v171;
  v171 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = v172;
  v172 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = v173;
  v173 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = v174;
  v174 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = v175;
  v175 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  v121 = v178;
  if (v178)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v178, v179, (uint64_t *)&v181);
    v121 = v178;
    *a1 = v181;
    if (v121 == (WTF *)v180)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v121, v108, v109, v110, v111, v112, v113, v114);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [58],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "The exception being thrown expects the argument at index ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [39]>(void (***a1)(WTF::StringPrintStream *__hidden this))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::PrintStream *v11;
  float v12;
  double v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40 = off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  v44 = off_1E3572250;
  v45 = (WTF *)v47;
  v46 = xmmword_199122F80;
  v47[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "rethrow doesn't refer to a catch block");
  v44[5]((WTF::StringPrintStream *)&v44);
  v9 = v45;
  if (!v45)
  {
    v38 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v38);
  v9 = v45;
  if (v45 != (WTF *)v47)
LABEL_5:
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  v10 = (WTF *)((uint64_t (*)(_QWORD))v40[4])(&v40);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v44, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v44);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v39, &v44);
  v13 = (*(double (**)(WTF *))(*(_QWORD *)v10 + 40))(v10);
  WTF::printInternal(v10, (WTF::PrintStream *)&v38, v14, v15, v16, v17, v18, v19, v13, v20);
  v40[5]((WTF::StringPrintStream *)&v40);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v41;
  if (v41)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v44);
    v29 = v41;
    *a1 = v44;
    if (v29 == (WTF *)v43)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [43],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "conditional branch with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::ParserBase::fail<WTF::String>(unint64_t *a1@<X0>, WTF::PrintStream *a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S1>)
{
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int *v37;
  unint64_t v38;
  _QWORD v39[2];
  const char *v40;
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  v40 = (const char *)off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  WTF::printInternal((WTF *)&v40, a2, a3, a4, a5, a6, a7, a8, 0.0, a10);
  (*((void (**)(const char **))v40 + 5))(&v40);
  v19 = v41;
  if (!v41)
  {
    v36 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v36);
  v19 = v41;
  if (v41 != (WTF *)v43)
LABEL_5:
    WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
  v40 = "WebAssembly.Module doesn't parse at byte ";
  v41 = (WTF *)42;
  v39[0] = ": ";
  v39[1] = 3;
  v38 = v11;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String>((uint64_t)&v40, &v38, (uint64_t)v39, (uint64_t *)&v36, &v37);
  if (v37)
  {
    *a9 = v37;
    v27 = v36;
    v36 = 0;
    v37 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [33],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "br_table with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [51],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, unsigned __int8 *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "grow_memory with non-i32 delta argument has type: ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<true,void>(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint8x16_t a10, double a11, uint8x8_t a12)
{
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t **v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  WTF::AtomStringImpl *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  WTF::AtomStringImpl *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  WTF::StringImpl *v92;
  double v93;
  float v94;
  int *v95;
  uint64_t v96;
  _QWORD *v97;
  JSC::HandleSet *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t **v145;
  uint64_t v146;
  uint64_t **v147;
  uint64_t *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t **v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t **v209;
  uint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t **v226;
  uint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  WTF::AtomStringImpl *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  WTF::StringImpl *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t **v268;
  uint64_t *v269;
  WTF::AtomStringImpl *v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  WTF::StringImpl *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  unint64_t v296;
  char *v297;
  unint64_t *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  uint64_t v317;
  uint8x8_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t **v335;
  uint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  JSC::HandleSet *v350;
  _QWORD *v351;
  uint64_t **v352;
  uint64_t *v353;
  WTF::AtomStringImpl *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  WTF::StringImpl *v361;
  unsigned int v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  JSC::HandleSet *v376;
  _QWORD *v377;
  uint64_t **v378;
  uint64_t *v379;
  WTF::AtomStringImpl *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  WTF::StringImpl *v387;
  unsigned int v388;
  unint64_t v389;
  unint64_t *v390;
  int v391;
  WTF::AtomStringImpl *v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  float v399;
  WTF::StringImpl *v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t **v416;
  uint64_t *v417;
  WTF::AtomStringImpl *v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  WTF::StringImpl *v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  _QWORD *v440;
  _QWORD *v441;
  _QWORD *v442;
  WTF::AtomStringImpl *v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  WTF::StringImpl *v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _QWORD *v465;
  _QWORD *v466;
  _QWORD *v467;
  WTF::AtomStringImpl *v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  WTF::StringImpl *v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t *v491;
  WTF::AtomStringImpl *v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  WTF::StringImpl *v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  _QWORD *v515;
  _QWORD *v516;
  WTF::StringImpl *v517;
  const char *v518;
  uint64_t v519;
  WTF::StringImpl *v520;
  uint64_t v521;
  uint64_t v522;
  _QWORD *v523;
  uint64_t **v524;
  uint64_t *v525;
  uint64_t v526;
  _QWORD *v527;
  uint64_t **v528;
  uint64_t *v529;
  unint64_t v530;
  void *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t **v538;
  uint64_t v539;
  uint64_t **v540;
  uint64_t *v541;
  WTF::AtomStringImpl *v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  double v549;
  float v550;
  WTF::StringImpl *v551;
  unint64_t v552;
  void *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t *v560;
  uint64_t v561;
  uint64_t *v562;
  uint64_t v563;
  unint64_t v564;
  void *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t **v572;
  uint64_t v573;
  uint64_t **v574;
  uint64_t *v575;
  unint64_t v576;
  void *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t **v584;
  uint64_t v585;
  uint64_t **v586;
  uint64_t *v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  char v591;
  uint64_t v592;
  __int8 v593;
  __int8 v594;
  __int8 v595;
  __int8 v596;
  uint8x16_t v597;
  uint8x8_t v598;
  int8x8_t v599;
  uint32x2_t v600;
  __int8 v601;
  uint8x8_t v602;
  WTF::AtomStringImpl *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  WTF::StringImpl *v610;
  WTF::StringImpl *v611;
  WTF::AtomStringImpl *v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  WTF::StringImpl *v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  _QWORD *v634;
  uint64_t **v635;
  uint64_t *v636;
  WTF::AtomStringImpl *v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  WTF::StringImpl *v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  _QWORD *v659;
  _QWORD *v660;
  _QWORD *v661;
  WTF::StringImpl *v662;
  uint64_t v663;
  uint64_t v664;
  _QWORD *v665;
  _QWORD *v666;
  _QWORD *v667;
  uint64_t v668;
  _QWORD *v669;
  uint64_t **v670;
  uint64_t *v671;
  uint64_t v672;
  _QWORD *v673;
  uint64_t **v674;
  uint64_t *v675;
  void (**v676)(WTF::StringPrintStream *__hidden);
  uint64_t **v677;
  uint64_t v678;
  uint64_t **v679;
  uint64_t *v680;
  uint64_t *v681;
  uint64_t v682;
  uint64_t *v683;
  uint64_t v684;
  unint64_t v685;
  void *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t **v693;
  uint64_t v694;
  uint64_t **v695;
  uint64_t *v696;
  unint64_t v697;
  void *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t **v705;
  uint64_t v706;
  uint64_t **v707;
  uint64_t *v708;
  unint64_t v709;
  void *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t **v717;
  uint64_t v718;
  uint64_t **v719;
  uint64_t *v720;
  unint64_t v721;
  void *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t *v729;
  uint64_t v730;
  uint64_t *v731;
  uint64_t v732;
  unint64_t v733;
  void *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t **v741;
  uint64_t v742;
  uint64_t **v743;
  uint64_t *v744;
  unint64_t v745;
  void *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t *v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  unint64_t v757;
  void *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t *v765;
  uint64_t v766;
  uint64_t *v767;
  uint64_t v768;
  unint64_t v769;
  void *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t *v777;
  uint64_t v778;
  uint64_t *v779;
  uint64_t v780;
  unsigned int v781;
  uint64_t v782;
  unint64_t v783;
  unint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  JSC::HandleSet *v797;
  _QWORD *v798;
  uint64_t **v799;
  uint64_t *v800;
  WTF::AtomStringImpl *v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  WTF::StringImpl *v808;
  unint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  _QWORD *v823;
  _QWORD *v824;
  _QWORD *v825;
  WTF::StringImpl *v826;
  unint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  unint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  _QWORD *v842;
  _QWORD *v843;
  int8x8_t v844;
  uint32x2_t v845;
  __int8 v846;
  uint8x8_t v847;
  const char *v848;
  uint64_t v849;
  unint64_t v850;
  void *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t *v858;
  uint64_t v859;
  uint64_t *v860;
  uint64_t v861;
  unint64_t v862;
  void *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t *v870;
  uint64_t v871;
  uint64_t *v872;
  uint64_t v873;
  unint64_t v874;
  void *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t **v882;
  uint64_t v883;
  uint64_t **v884;
  uint64_t *v885;
  unint64_t v886;
  void *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t **v894;
  uint64_t v895;
  uint64_t **v896;
  uint64_t *v897;
  unint64_t v898;
  void *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t **v906;
  uint64_t v907;
  uint64_t **v908;
  uint64_t *v909;
  unint64_t v910;
  void *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t *v918;
  uint64_t v919;
  uint64_t *v920;
  uint64_t v921;
  unint64_t v922;
  void *v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t *v930;
  uint64_t v931;
  uint64_t *v932;
  uint64_t v933;
  __int8 v934;
  __int8 v935;
  __int8 v936;
  __int8 v937;
  __int8 v938;
  uint8x8_t v939;
  unint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  unint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  _QWORD *v954;
  uint64_t **v955;
  uint64_t *v956;
  WTF::AtomStringImpl *v957;
  unint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  WTF::StringImpl *v964;
  unint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  unint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  _QWORD *v979;
  _QWORD *v980;
  _QWORD *v981;
  WTF::StringImpl *v982;
  uint64_t v983;
  _QWORD *v984;
  uint64_t *v985;
  uint64_t v986;
  _QWORD *v987;
  uint64_t v988;
  uint64_t **v989;
  uint64_t v990;
  uint64_t **v991;
  uint64_t *v992;
  unint64_t v993;
  void *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t **v1001;
  uint64_t v1002;
  uint64_t **v1003;
  uint64_t *v1004;
  unint64_t v1005;
  void *v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t *v1013;
  uint64_t v1014;
  uint64_t *v1015;
  uint64_t v1016;
  uint64_t *v1017;
  uint64_t v1018;
  uint64_t *v1019;
  uint64_t v1020;
  char *v1021;
  unint64_t *v1022;
  uint64_t v1023;
  char *v1024;
  unint64_t *v1025;
  uint64_t v1026;
  char *v1027;
  unint64_t *v1028;
  uint64_t v1029;
  uint64_t *v1030;
  uint64_t v1031;
  uint64_t *v1032;
  uint64_t v1033;
  uint64_t **v1034;
  uint64_t v1035;
  uint64_t **v1036;
  uint64_t *v1037;
  uint64_t *v1038;
  uint64_t v1039;
  uint64_t *v1040;
  uint64_t v1041;
  uint64_t *v1042;
  uint64_t v1043;
  uint64_t *v1044;
  uint64_t v1045;
  uint64_t *v1046;
  uint64_t v1047;
  uint64_t *v1048;
  uint64_t v1049;
  const char *v1050;
  uint64_t *v1051;
  uint64_t v1052;
  uint64_t *v1053;
  uint64_t v1054;
  uint64_t *v1055;
  uint64_t v1056;
  uint64_t *v1057;
  uint64_t v1058;
  uint64_t *v1059;
  uint64_t v1060;
  uint64_t *v1061;
  uint64_t v1062;
  uint64_t *v1063;
  uint64_t v1064;
  uint64_t *v1065;
  uint64_t v1066;
  uint64_t *v1067;
  uint64_t v1068;
  uint64_t *v1069;
  uint64_t v1070;
  uint64_t **v1071;
  uint64_t v1072;
  uint64_t **v1073;
  uint64_t *v1074;
  uint64_t *v1075;
  uint64_t v1076;
  uint64_t *v1077;
  uint64_t v1078;
  uint64_t *v1079;
  uint64_t v1080;
  uint64_t *v1081;
  uint64_t v1082;
  uint64_t *v1083;
  uint64_t v1084;
  uint64_t *v1085;
  uint64_t v1086;
  uint64_t *v1087;
  uint64_t v1088;
  uint64_t *v1089;
  uint64_t v1090;
  uint64_t *v1091;
  uint64_t v1092;
  uint64_t *v1093;
  uint64_t v1094;
  uint64_t *v1095;
  uint64_t v1096;
  uint64_t *v1097;
  uint64_t v1098;
  uint64_t *v1099;
  uint64_t v1100;
  uint64_t *v1101;
  uint64_t v1102;
  uint64_t *v1103;
  uint64_t v1104;
  uint64_t *v1105;
  uint64_t v1106;
  uint64_t *v1107;
  uint64_t v1108;
  uint64_t *v1109;
  uint64_t v1110;
  uint64_t *v1111;
  uint64_t v1112;
  uint64_t *v1113;
  uint64_t v1114;
  uint64_t *v1115;
  uint64_t *v1116;
  uint64_t *v1117;
  uint64_t v1118;
  uint64_t *v1119;
  uint64_t v1120;
  uint64_t *v1121;
  uint64_t v1122;
  uint64_t *v1123;
  uint64_t v1124;
  uint64_t *v1125;
  uint64_t v1126;
  uint64_t *v1127;
  uint64_t v1128;
  uint64_t *v1129;
  uint64_t v1130;
  uint64_t *v1131;
  uint64_t v1132;
  uint64_t *v1133;
  uint64_t v1134;
  uint64_t *v1135;
  uint64_t v1136;
  uint64_t *v1137;
  uint64_t v1138;
  uint64_t *v1139;
  uint64_t v1140;
  uint64_t *v1141;
  uint64_t v1142;
  uint64_t *v1143;
  uint64_t v1144;
  uint64_t *v1145;
  uint64_t v1146;
  uint64_t *v1147;
  uint64_t v1148;
  _QWORD *v1149;
  uint64_t v1150;
  uint64_t *v1151;
  uint64_t *v1152;
  uint64_t *v1153;
  uint64_t *v1154;
  _QWORD *v1155;
  uint64_t v1156;
  uint64_t *v1157;
  uint64_t v1158;
  uint64_t *v1159;
  uint64_t v1160;
  uint64_t *v1161;
  uint64_t v1162;
  uint64_t *v1163;
  uint64_t v1164;
  _QWORD *v1165;
  uint64_t v1166;
  uint64_t *v1167;
  uint64_t *v1168;
  _QWORD *v1169;
  uint64_t v1170;
  uint64_t *v1171;
  uint64_t *v1172;
  uint64_t *v1173;
  uint64_t *v1174;
  uint64_t *v1175;
  uint64_t *v1176;
  _QWORD *v1177;
  uint64_t v1178;
  _QWORD *v1179;
  uint64_t v1180;
  uint64_t *v1181;
  uint64_t *v1182;
  uint64_t *v1183;
  uint64_t *v1184;
  uint64_t *v1185;
  uint64_t *v1186;
  uint64_t *v1187;
  uint64_t *v1188;
  uint64_t *v1189;
  uint64_t *v1190;
  _QWORD *v1191;
  uint64_t v1192;
  uint64_t *v1193;
  uint64_t *v1194;
  _QWORD *v1195;
  uint64_t v1196;
  _QWORD *v1197;
  uint64_t v1198;
  uint64_t *v1199;
  uint64_t *v1200;
  _QWORD *v1201;
  uint64_t v1202;
  _QWORD *v1203;
  uint64_t v1204;
  _QWORD *v1205;
  uint64_t v1206;
  uint64_t *v1207;
  uint64_t *v1208;
  uint64_t *v1209;
  uint64_t *v1210;
  uint64_t *v1211;
  uint64_t *v1212;
  _QWORD *v1213;
  uint64_t v1214;
  _QWORD *v1215;
  uint64_t v1216;
  _QWORD *v1217;
  uint64_t v1218;
  uint64_t *v1219;
  uint64_t *v1220;
  _QWORD *v1221;
  uint64_t v1222;
  JSC::HandleSet *v1223;
  JSC::HandleSet *v1224;
  JSC::HandleSet *v1225;
  WTF::StringImpl *v1226;
  WTF::StringImpl *v1227;
  WTF::StringImpl *v1228;
  WTF::StringImpl *v1229;
  WTF::StringImpl *v1230;
  WTF::StringImpl *v1231;
  WTF::StringImpl *v1232;
  WTF::StringImpl *v1233;
  WTF::StringImpl *v1234;
  void (**v1235)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v1236;
  WTF::StringImpl *v1237;
  WTF::StringImpl *v1238;
  __int128 v1239;
  __int128 v1240;
  uint64_t v1241;
  uint64_t *v1242;
  WTF::StringImpl *v1243;
  int *v1244;
  WTF::StringImpl *v1245;
  WTF::StringImpl *v1246;
  int *v1247;
  WTF::StringImpl *v1248;
  WTF::StringImpl *v1249;
  WTF::StringImpl *v1250;
  WTF::StringImpl *v1251;
  WTF::StringImpl *v1252;
  WTF::StringImpl *v1253;
  WTF::StringImpl *v1254;
  WTF::StringImpl *v1255;
  WTF::StringImpl *v1256;
  __int128 v1257;
  __int128 v1258;
  uint64_t v1259;
  uint64_t *v1260[2];
  WTF::StringImpl *v1261;
  __int128 v1262;
  __int128 v1263;
  uint64_t v1264;
  uint64_t *v1265;
  __int128 v1266;
  __int128 v1267;
  uint64_t v1268;
  _QWORD *v1269;

  if ((a3 - 77) > 3u || word_1ECF4C7B4 != 0)
  {
    v16 = a3;
    v17 = a3;
    switch((int)a3)
    {
      case 0:
      case 5:
      case 10:
      case 20:
      case 21:
      case 23:
      case 28:
      case 38:
      case 45:
      case 49:
      case 54:
      case 55:
      case 58:
      case 62:
      case 63:
      case 67:
      case 75:
      case 78:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_669;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1262, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1266 = v1262;
        v1267 = v1263;
        v1268 = v1264;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, &v1265, v35, v36, v37, v38, v39, v40);
        if (v1265)
        {
          v1046 = v1265 - 2;
          v1047 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1048 = (uint64_t *)*(v1265 - 1);
          if (v1048)
          {
            v1049 = *v1046;
            *v1048 = *v1046;
            *(_QWORD *)(v1049 + 8) = v1048;
            *v1046 = 0;
            v1046[1] = 0;
          }
          *v1046 = *(_QWORD *)(v1047 + 40);
          *(_QWORD *)(v1047 + 40) = v1046;
        }
        if (v1269)
        {
          v48 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v49 = *(_QWORD **)(v48 + 40);
          if (!v49)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v41, v42, v43, v44, v45, v46, v47);
            v49 = *(_QWORD **)(v48 + 40);
          }
          *(_QWORD *)(v48 + 40) = *v49;
          v49[2] = 0;
          v50 = v49 + 2;
          *v49 = 0;
          v49[1] = 0;
          v51 = v1269;
          if (v1269)
          {
            v51 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1165 = *(_QWORD **)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1166 = v1165[3];
              v1165 += 3;
              *(v50 - 2) = v1166;
              *(v50 - 1) = v1165;
              *v1165 = v50 - 2;
              *(_QWORD *)(v1166 + 8) = v50 - 2;
            }
          }
          *v50 = v51;
        }
        else
        {
          v50 = 0;
        }
        *(_QWORD *)&v1262 = "WasmFunctionParser.h:";
        DWORD2(v1262) = 21;
        LODWORD(v1257) = 1205;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1262, (unsigned int *)&v1257, (int **)&v1243);
        v95 = (int *)v1243;
        if (!v1243)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE1CLL);
        }
        v1243 = 0;
        goto LABEL_51;
      case 1:
      case 3:
      case 6:
      case 9:
      case 18:
      case 24:
      case 26:
      case 31:
      case 32:
      case 39:
      case 42:
      case 43:
      case 47:
      case 52:
      case 53:
      case 60:
      case 69:
      case 73:
      case 76:
      case 77:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_664;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1262 = v1257;
        v1263 = v1258;
        v1264 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, v1260, v18, v19, v20, v21, v22, v23);
        if (v1260[0])
        {
          v1038 = v1260[0] - 2;
          v1039 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1040 = (uint64_t *)*(v1260[0] - 1);
          if (v1040)
          {
            v1041 = *v1038;
            *v1040 = *v1038;
            *(_QWORD *)(v1041 + 8) = v1040;
            *v1038 = 0;
            v1038[1] = 0;
          }
          *v1038 = *(_QWORD *)(v1039 + 40);
          *(_QWORD *)(v1039 + 40) = v1038;
        }
        if (v1265)
        {
          v31 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v32 = *(_QWORD **)(v31 + 40);
          if (!v32)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v24, v25, v26, v27, v28, v29, v30);
            v32 = *(_QWORD **)(v31 + 40);
          }
          *(_QWORD *)(v31 + 40) = *v32;
          v32[2] = 0;
          v33 = (uint64_t **)(v32 + 2);
          *v32 = 0;
          v32[1] = 0;
          v34 = v1265;
          if (v1265)
          {
            v34 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1153 = *(uint64_t **)(((unint64_t)(v33 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1154 = (uint64_t *)v1153[3];
              v1153 += 3;
              *(v33 - 2) = v1154;
              *(v33 - 1) = v1153;
              *v1153 = (uint64_t)(v33 - 2);
              v1154[1] = (uint64_t)(v33 - 2);
            }
          }
          *v33 = v34;
        }
        else
        {
          v33 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 1305;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1230);
        v66 = v1230;
        if (!v1230)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE0CLL);
        }
        v1230 = 0;
        if (*(_DWORD *)v66 == 2)
        {
          WTF::StringImpl::~StringImpl(v66, v59, v60, v61, v62, v63, v64, v65);
          WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
          if (!v33)
            goto LABEL_30;
        }
        else
        {
          *(_DWORD *)v66 -= 2;
          if (!v33)
            goto LABEL_30;
        }
        v145 = v33 - 2;
        v146 = *(_QWORD *)(((unint64_t)(v33 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v147 = (uint64_t **)*(v33 - 1);
        if (v147)
        {
          v148 = *v145;
          *v147 = *v145;
          v148[1] = (uint64_t)v147;
          *v145 = 0;
          *(v33 - 1) = 0;
        }
        *v145 = *(uint64_t **)(v146 + 40);
        *(_QWORD *)(v146 + 40) = v145;
LABEL_30:
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_659;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, v60, v61, v62, v63, v64, v65);
        v1266 = v1257;
        v1267 = v1258;
        v1268 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, v1260, v67, v68, v69, v70, v71, v72);
        if (v1260[0])
        {
          v1042 = v1260[0] - 2;
          v1043 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1044 = (uint64_t *)*(v1260[0] - 1);
          if (v1044)
          {
            v1045 = *v1042;
            *v1044 = *v1042;
            *(_QWORD *)(v1045 + 8) = v1044;
            *v1042 = 0;
            v1042[1] = 0;
          }
          *v1042 = *(_QWORD *)(v1043 + 40);
          *(_QWORD *)(v1043 + 40) = v1042;
        }
        if (v1269)
        {
          v80 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v81 = *(_QWORD **)(v80 + 40);
          if (!v81)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v73, v74, v75, v76, v77, v78, v79);
            v81 = *(_QWORD **)(v80 + 40);
          }
          *(_QWORD *)(v80 + 40) = *v81;
          v81[2] = 0;
          v82 = v81 + 2;
          *v81 = 0;
          v81[1] = 0;
          v83 = v1269;
          if (v1269)
          {
            v83 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1155 = *(_QWORD **)(((unint64_t)(v82 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1156 = v1155[3];
              v1155 += 3;
              *(v82 - 2) = v1156;
              *(v82 - 1) = v1155;
              *v1155 = v82 - 2;
              *(_QWORD *)(v1156 + 8) = v82 - 2;
            }
          }
          *v82 = v83;
        }
        else
        {
          v82 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 1306;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1229);
        v92 = v1229;
        if (!v1229)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE14);
        }
        v1229 = 0;
        if (*(_DWORD *)v92 == 2)
        {
          WTF::StringImpl::~StringImpl(v92, v84, v85, v86, v87, v88, v89, v90);
          WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
          if (!v82)
            goto LABEL_43;
        }
        else
        {
          *(_DWORD *)v92 -= 2;
          if (!v82)
            goto LABEL_43;
        }
        v157 = v82 - 2;
        v158 = *(_QWORD *)(((unint64_t)(v82 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v159 = (uint64_t *)*(v82 - 1);
        if (v159)
        {
          v160 = *v157;
          *v159 = *v157;
          *(_QWORD *)(v160 + 8) = v159;
          *v157 = 0;
          *(v82 - 1) = 0;
        }
        *v157 = *(_QWORD *)(v158 + 40);
        *(_QWORD *)(v158 + 40) = v157;
LABEL_43:
        if (v1266 != 251 || *((_QWORD *)&v1266 + 1))
          goto LABEL_661;
        if (v1262 == 251)
          goto LABEL_46;
        goto LABEL_539;
      case 2:
      case 16:
      case 46:
      case 71:
        LODWORD(v1235) = 0;
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        if ((int)a3 > 45)
        {
          if ((_DWORD)a3 == 46)
          {
            v107 = 4;
          }
          else
          {
            if ((_DWORD)a3 != 71)
            {
LABEL_796:
              __break(0xC471u);
              JUMPOUT(0x198CCACE4);
            }
            v107 = 2;
          }
        }
        else if ((_DWORD)a3 == 2)
        {
          v107 = 8;
        }
        else
        {
          v107 = a3;
          if ((_DWORD)a3 != 16)
            goto LABEL_796;
        }
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_684;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1262 = v1257;
        v1263 = v1258;
        v1264 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, v1260, v363, v364, v365, v366, v367, v368);
        if (v1260[0])
        {
          v1059 = v1260[0] - 2;
          v1060 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1061 = (uint64_t *)*(v1260[0] - 1);
          if (v1061)
          {
            v1062 = *v1059;
            *v1061 = *v1059;
            *(_QWORD *)(v1062 + 8) = v1061;
            *v1059 = 0;
            v1059[1] = 0;
          }
          *v1059 = *(_QWORD *)(v1060 + 40);
          *(_QWORD *)(v1060 + 40) = v1059;
        }
        if (v1265)
        {
          v376 = *(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v377 = (_QWORD *)*((_QWORD *)v376 + 5);
          if (!v377)
          {
            v1224 = *(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            JSC::HandleSet::grow(v376, v369, v370, v371, v372, v373, v374, v375);
            v376 = v1224;
            v377 = (_QWORD *)*((_QWORD *)v1224 + 5);
          }
          *((_QWORD *)v376 + 5) = *v377;
          v377[2] = 0;
          v378 = (uint64_t **)(v377 + 2);
          *v377 = 0;
          v377[1] = 0;
          v379 = v1265;
          if (v1265)
          {
            v379 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1173 = *(uint64_t **)(((unint64_t)(v378 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1174 = (uint64_t *)v1173[3];
              v1173 += 3;
              *(v378 - 2) = v1174;
              *(v378 - 1) = v1173;
              *v1173 = (uint64_t)(v378 - 2);
              v1174[1] = (uint64_t)(v378 - 2);
            }
          }
          *v378 = v379;
        }
        else
        {
          v378 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 1001;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1251);
        v387 = v1251;
        if (!v1251)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE3CLL);
        }
        v1251 = 0;
        if (*(_DWORD *)v387 == 2)
        {
          WTF::StringImpl::~StringImpl(v387, v380, v381, v382, v383, v384, v385, v386);
          WTF::fastFree(v576, v577, v578, v579, v580, v581, v582, v583);
          if (!v378)
            goto LABEL_241;
        }
        else
        {
          *(_DWORD *)v387 -= 2;
          if (!v378)
            goto LABEL_241;
        }
        v584 = v378 - 2;
        v585 = *(_QWORD *)(((unint64_t)(v378 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v586 = (uint64_t **)*(v378 - 1);
        if (v586)
        {
          v587 = *v584;
          *v586 = *v584;
          v587[1] = (uint64_t)v586;
          *v584 = 0;
          *(v378 - 1) = 0;
        }
        *v584 = *(uint64_t **)(v585 + 40);
        *(_QWORD *)(v585 + 40) = v584;
LABEL_241:
        if (v1262 != 251)
        {
          v518 = "load_lane input must be a vector";
          v519 = 33;
          goto LABEL_663;
        }
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1257, v16, a2, &v1235, (uint64_t)&v1266, v384, v385, v386, v91, *(float *)a10.i32);
        if (BYTE8(v1257))
          goto LABEL_686;
        v388 = (v107 - 2) >> 1;
        if (v388 > 7 || ((1 << v388) & 0x8B) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAD04);
        }
        goto LABEL_245;
      case 4:
      case 15:
      case 30:
      case 59:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_664;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1266 = v1257;
        v1267 = v1258;
        v1268 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, v1260, v108, v109, v110, v111, v112, v113);
        if (v1260[0])
        {
          v1051 = v1260[0] - 2;
          v1052 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1053 = (uint64_t *)*(v1260[0] - 1);
          if (v1053)
          {
            v1054 = *v1051;
            *v1053 = *v1051;
            *(_QWORD *)(v1054 + 8) = v1053;
            *v1051 = 0;
            v1051[1] = 0;
          }
          *v1051 = *(_QWORD *)(v1052 + 40);
          *(_QWORD *)(v1052 + 40) = v1051;
        }
        if (v1269)
        {
          v121 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v122 = *(_QWORD **)(v121 + 40);
          if (!v122)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v114, v115, v116, v117, v118, v119, v120);
            v122 = *(_QWORD **)(v121 + 40);
          }
          *(_QWORD *)(v121 + 40) = *v122;
          v122[2] = 0;
          v123 = v122 + 2;
          *v122 = 0;
          v122[1] = 0;
          v124 = v1269;
          if (v1269)
          {
            v124 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1169 = *(_QWORD **)(((unint64_t)(v123 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1170 = v1169[3];
              v1169 += 3;
              *(v123 - 2) = v1170;
              *(v123 - 1) = v1169;
              *v1169 = v123 - 2;
              *(_QWORD *)(v1170 + 8) = v123 - 2;
            }
          }
          *v123 = v124;
        }
        else
        {
          v123 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 1247;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1234);
        v252 = v1234;
        if (!v1234)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE24);
        }
        v1234 = 0;
        if (*(_DWORD *)v252 == 2)
        {
          WTF::StringImpl::~StringImpl(v252, v245, v246, v247, v248, v249, v250, v251);
          WTF::fastFree(v552, v553, v554, v555, v556, v557, v558, v559);
          if (!v123)
            goto LABEL_153;
        }
        else
        {
          *(_DWORD *)v252 -= 2;
          if (!v123)
            goto LABEL_153;
        }
        v560 = v123 - 2;
        v561 = *(_QWORD *)(((unint64_t)(v123 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v562 = (uint64_t *)*(v123 - 1);
        if (v562)
        {
          v563 = *v560;
          *v562 = *v560;
          *(_QWORD *)(v563 + 8) = v562;
          *v560 = 0;
          *(v123 - 1) = 0;
        }
        *v560 = *(_QWORD *)(v561 + 40);
        *(_QWORD *)(v561 + 40) = v560;
LABEL_153:
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_659;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, v246, v247, v248, v249, v250, v251);
        v1262 = v1257;
        v1263 = v1258;
        v1264 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, v1260, v253, v254, v255, v256, v257, v258);
        if (v1260[0])
        {
          v1063 = v1260[0] - 2;
          v1064 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1065 = (uint64_t *)*(v1260[0] - 1);
          if (v1065)
          {
            v1066 = *v1063;
            *v1065 = *v1063;
            *(_QWORD *)(v1066 + 8) = v1065;
            *v1063 = 0;
            v1063[1] = 0;
          }
          *v1063 = *(_QWORD *)(v1064 + 40);
          *(_QWORD *)(v1064 + 40) = v1063;
        }
        if (v1265)
        {
          v266 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v267 = *(_QWORD **)(v266 + 40);
          if (!v267)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v259, v260, v261, v262, v263, v264, v265);
            v267 = *(_QWORD **)(v266 + 40);
          }
          *(_QWORD *)(v266 + 40) = *v267;
          v267[2] = 0;
          v268 = (uint64_t **)(v267 + 2);
          *v267 = 0;
          v267[1] = 0;
          v269 = v1265;
          if (v1265)
          {
            v269 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1175 = *(uint64_t **)(((unint64_t)(v268 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1176 = (uint64_t *)v1175[3];
              v1175 += 3;
              *(v268 - 2) = v1176;
              *(v268 - 1) = v1175;
              *v1175 = (uint64_t)(v268 - 2);
              v1176[1] = (uint64_t)(v268 - 2);
            }
          }
          *v268 = v269;
        }
        else
        {
          v268 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 1248;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1233);
        v277 = v1233;
        if (!v1233)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE2CLL);
        }
        v1233 = 0;
        goto LABEL_331;
      case 7:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        if (!*(_DWORD *)(a2 + 68))
        {
          v1027 = "val";
          v1028 = (unint64_t *)a2;
          v1029 = 4;
          goto LABEL_670;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1262, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1266 = v1262;
        v1267 = v1263;
        v1268 = v1264;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, &v1265, v279, v280, v281, v282, v283, v284);
        if (v1265)
        {
          v1117 = v1265 - 2;
          v1118 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1119 = (uint64_t *)*(v1265 - 1);
          if (v1119)
          {
            v1120 = *v1117;
            *v1119 = *v1117;
            *(_QWORD *)(v1120 + 8) = v1119;
            *v1117 = 0;
            v1117[1] = 0;
          }
          *v1117 = *(_QWORD *)(v1118 + 40);
          *(_QWORD *)(v1118 + 40) = v1117;
        }
        if (v1269)
        {
          v292 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v293 = *(_QWORD **)(v292 + 40);
          if (!v293)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v285, v286, v287, v288, v289, v290, v291);
            v293 = *(_QWORD **)(v292 + 40);
          }
          *(_QWORD *)(v292 + 40) = *v293;
          v293[2] = 0;
          v294 = v293 + 2;
          *v293 = 0;
          v293[1] = 0;
          v295 = v1269;
          if (v1269)
          {
            v295 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1203 = *(_QWORD **)(((unint64_t)(v294 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1204 = v1203[3];
              v1203 += 3;
              *(v294 - 2) = v1204;
              *(v294 - 1) = v1203;
              *v1203 = v294 - 2;
              *(_QWORD *)(v1204 + 8) = v294 - 2;
            }
          }
          *v294 = v295;
        }
        else
        {
          v294 = 0;
        }
        *(_QWORD *)&v1262 = "WasmFunctionParser.h:";
        DWORD2(v1262) = 21;
        LODWORD(v1257) = 960;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1262, (unsigned int *)&v1257, (int **)&v1252);
        v610 = v1252;
        if (!v1252)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE94);
        }
        v1252 = 0;
        if (*(_DWORD *)v610 == 2)
        {
          WTF::StringImpl::~StringImpl(v610, v603, v604, v605, v606, v607, v608, v609);
          WTF::fastFree(v850, v851, v852, v853, v854, v855, v856, v857);
          if (!v294)
            goto LABEL_388;
        }
        else
        {
          *(_DWORD *)v610 -= 2;
          if (!v294)
            goto LABEL_388;
        }
        v858 = v294 - 2;
        v859 = *(_QWORD *)(((unint64_t)(v294 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v860 = (uint64_t *)*(v294 - 1);
        if (v860)
        {
          v861 = *v858;
          *v860 = *v858;
          *(_QWORD *)(v861 + 8) = v860;
          *v858 = 0;
          *(v294 - 1) = 0;
        }
        *v858 = *(_QWORD *)(v859 + 40);
        *(_QWORD *)(v859 + 40) = v858;
LABEL_388:
        if (v1266 != 251)
        {
          v848 = "store vector must be v128";
          v849 = 26;
          goto LABEL_668;
        }
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1257, 7u, a2, &v1239, (uint64_t)&v1262, v607, v608, v609, *(double *)&JSC::Wasm::Types::Void, v94);
        if (!BYTE8(v1257))
          goto LABEL_624;
        goto LABEL_666;
      case 8:
      case 25:
      case 29:
      case 48:
        LODWORD(v1235) = 0;
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        if ((int)a3 > 28)
        {
          if ((_DWORD)a3 == 29)
          {
            v107 = 2;
          }
          else
          {
            if ((_DWORD)a3 != 48)
              goto LABEL_795;
            v107 = 8;
          }
        }
        else
        {
          if ((_DWORD)a3 != 8)
          {
            if ((_DWORD)a3 == 25)
            {
              v107 = 4;
              goto LABEL_208;
            }
LABEL_795:
            __break(0xC471u);
            JUMPOUT(0x198CCACC4);
          }
          v107 = 16;
        }
LABEL_208:
        if (!*(_DWORD *)(a2 + 68))
        {
LABEL_684:
          v1021 = "vector";
          v1022 = (unint64_t *)a2;
          v1023 = 7;
LABEL_685:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v1022, 26, v1021, v1023, &v1257, *(float *)a10.i32);
          goto LABEL_686;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1262 = v1257;
        v1263 = v1258;
        v1264 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, v1260, v337, v338, v339, v340, v341, v342);
        if (v1260[0])
        {
          v1055 = v1260[0] - 2;
          v1056 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1057 = (uint64_t *)*(v1260[0] - 1);
          if (v1057)
          {
            v1058 = *v1055;
            *v1057 = *v1055;
            *(_QWORD *)(v1058 + 8) = v1057;
            *v1055 = 0;
            v1055[1] = 0;
          }
          *v1055 = *(_QWORD *)(v1056 + 40);
          *(_QWORD *)(v1056 + 40) = v1055;
        }
        if (v1265)
        {
          v350 = *(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v351 = (_QWORD *)*((_QWORD *)v350 + 5);
          if (!v351)
          {
            v1223 = *(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            JSC::HandleSet::grow(v350, v343, v344, v345, v346, v347, v348, v349);
            v350 = v1223;
            v351 = (_QWORD *)*((_QWORD *)v1223 + 5);
          }
          *((_QWORD *)v350 + 5) = *v351;
          v351[2] = 0;
          v352 = (uint64_t **)(v351 + 2);
          *v351 = 0;
          v351[1] = 0;
          v353 = v1265;
          if (v1265)
          {
            v353 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1171 = *(uint64_t **)(((unint64_t)(v352 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1172 = (uint64_t *)v1171[3];
              v1171 += 3;
              *(v352 - 2) = v1172;
              *(v352 - 1) = v1171;
              *v1171 = (uint64_t)(v352 - 2);
              v1172[1] = (uint64_t)(v352 - 2);
            }
          }
          *v352 = v353;
        }
        else
        {
          v352 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 1043;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1250);
        v361 = v1250;
        if (!v1250)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE34);
        }
        v1250 = 0;
        if (*(_DWORD *)v361 == 2)
        {
          WTF::StringImpl::~StringImpl(v361, v354, v355, v356, v357, v358, v359, v360);
          WTF::fastFree(v564, v565, v566, v567, v568, v569, v570, v571);
          if (!v352)
            goto LABEL_221;
        }
        else
        {
          *(_DWORD *)v361 -= 2;
          if (!v352)
          {
LABEL_221:
            if (v1262 == 251)
            {
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1257, v16, a2, &v1235, (uint64_t)&v1266, v358, v359, v360, v91, *(float *)a10.i32);
              if (BYTE8(v1257))
              {
LABEL_686:
                v988 = v1257;
                goto LABEL_643;
              }
              v362 = (v107 - 2) >> 1;
              if (v362 > 7 || ((1 << v362) & 0x8B) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x198CC7EF8);
              }
LABEL_245:
              v389 = *(_QWORD *)a2;
              if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
              {
LABEL_793:
                JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("Could not parse the lane index immediate byte.", (unint64_t *)a2, 47, &v1257, *(float *)a10.i32);
                goto LABEL_686;
              }
              *(_QWORD *)a2 = v389 + 1;
              if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v389) >= v107)
              {
                v390 = (unint64_t *)a2;
                LODWORD(v278) = v107;
                v391 = v107;
LABEL_248:
                JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", v390, 40, v278, ", expected an ImmLaneIdx", 25, v391, &v1257, *(float *)a10.i32);
                goto LABEL_686;
              }
LABEL_624:
              v521 = *(_QWORD *)(a2 + 48);
              if (v1269)
              {
                v983 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v984 = *(_QWORD **)(v983 + 40);
                if (!v984)
                {
                  JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v84, v85, v86, v87, v88, v89, v90);
                  v984 = *(_QWORD **)(v983 + 40);
                }
                *(_QWORD *)(v983 + 40) = *v984;
                v984[2] = 0;
                v524 = (uint64_t **)(v984 + 2);
                *v984 = 0;
                v984[1] = 0;
                v985 = v1269;
                if (v1269)
                {
                  v985 = (uint64_t *)*v1269;
                  if (*v1269)
                  {
                    v1151 = *(uint64_t **)(((unint64_t)(v524 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v1152 = (uint64_t *)v1151[3];
                    v1151 += 3;
                    *(v524 - 2) = v1152;
                    *(v524 - 1) = v1151;
                    *v1151 = (uint64_t)(v524 - 2);
                    v1152[1] = (uint64_t)(v524 - 2);
                  }
                }
                *v524 = v985;
              }
              else
              {
                v524 = 0;
              }
              if (v1265)
              {
                v986 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v987 = *(_QWORD **)(v986 + 40);
                if (!v987)
                {
                  JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v84, v85, v86, v87, v88, v89, v90);
                  v987 = *(_QWORD **)(v986 + 40);
                }
                *(_QWORD *)(v986 + 40) = *v987;
                v987[2] = 0;
                v528 = (uint64_t **)(v987 + 2);
                *v987 = 0;
                v987[1] = 0;
                v529 = v1265;
                if (v1265)
                {
LABEL_636:
                  v529 = (uint64_t *)*v529;
                  if (v529)
                  {
                    v1115 = *(uint64_t **)(((unint64_t)(v528 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v1116 = (uint64_t *)v1115[3];
                    v1115 += 3;
                    *(v528 - 2) = v1116;
                    *(v528 - 1) = v1115;
                    *v1115 = (uint64_t)(v528 - 2);
                    v1116[1] = (uint64_t)(v528 - 2);
                  }
                }
LABEL_638:
                *v528 = v529;
                JSC::Wasm::ConstExprGenerator::fail<char const*>(&v1257, **(_QWORD **)v521, *(_QWORD *)(v521 + 16));
                v988 = v1257;
                v989 = v528 - 2;
                v990 = *(_QWORD *)(((unint64_t)(v528 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v991 = (uint64_t **)*(v528 - 1);
                if (v991)
                {
                  v992 = *v989;
                  *v991 = *v989;
                  v992[1] = (uint64_t)v991;
                  *v989 = 0;
                  *(v528 - 1) = 0;
                }
                *v989 = *(uint64_t **)(v990 + 40);
                *(_QWORD *)(v990 + 40) = v989;
                if (!v524)
                  goto LABEL_643;
                goto LABEL_675;
              }
LABEL_642:
              JSC::Wasm::ConstExprGenerator::fail<char const*>(&v1257, **(_QWORD **)v521, *(_QWORD *)(v521 + 16));
              v988 = v1257;
              if (v524)
              {
LABEL_675:
                v1034 = v524 - 2;
                v1035 = *(_QWORD *)(((unint64_t)(v524 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v1036 = (uint64_t **)*(v524 - 1);
                if (v1036)
                {
                  v1037 = *v1034;
                  *v1036 = *v1034;
                  v1037[1] = (uint64_t)v1036;
                  *v1034 = 0;
                  *(v524 - 1) = 0;
                }
                *v1034 = *(uint64_t **)(v1035 + 40);
                *(_QWORD *)(v1035 + 40) = v1034;
              }
LABEL_643:
              *(_QWORD *)a1 = v988;
              *(_BYTE *)(a1 + 8) = 1;
LABEL_644:
              if (v1265)
              {
                v1030 = v1265 - 2;
                v1031 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v1032 = (uint64_t *)*(v1265 - 1);
                if (v1032)
                {
                  v1033 = *v1030;
                  *v1032 = *v1030;
                  *(_QWORD *)(v1033 + 8) = v1032;
                  *v1030 = 0;
                  v1030[1] = 0;
                }
                *v1030 = *(_QWORD *)(v1031 + 40);
                *(_QWORD *)(v1031 + 40) = v1030;
              }
              goto LABEL_645;
            }
            v518 = "store_lane input must be a vector";
            v519 = 34;
LABEL_663:
            *(_QWORD *)&v1257 = v518;
            *((_QWORD *)&v1257 + 1) = v519;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v1239, (uint64_t)&v1257, v91, *(float *)a10.i32);
            v988 = v1239;
            goto LABEL_643;
          }
        }
        v572 = v352 - 2;
        v573 = *(_QWORD *)(((unint64_t)(v352 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v574 = (uint64_t **)*(v352 - 1);
        if (v574)
        {
          v575 = *v572;
          *v574 = *v572;
          v575[1] = (uint64_t)v574;
          *v572 = 0;
          *(v352 - 1) = 0;
        }
        *v572 = *(uint64_t **)(v573 + 40);
        *(_QWORD *)(v573 + 40) = v572;
        goto LABEL_221;
      case 11:
      case 51:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        if (!*(_DWORD *)(a2 + 68))
        {
          v1024 = "rhs";
          v1025 = (unint64_t *)a2;
          v1026 = 4;
          goto LABEL_665;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1262 = v1257;
        v1263 = v1258;
        v1264 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, v1260, v211, v212, v213, v214, v215, v216);
        if (v1260[0])
        {
          v1087 = v1260[0] - 2;
          v1088 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1089 = (uint64_t *)*(v1260[0] - 1);
          if (v1089)
          {
            v1090 = *v1087;
            *v1089 = *v1087;
            *(_QWORD *)(v1090 + 8) = v1089;
            *v1087 = 0;
            v1087[1] = 0;
          }
          *v1087 = *(_QWORD *)(v1088 + 40);
          *(_QWORD *)(v1088 + 40) = v1087;
        }
        if (v1265)
        {
          v224 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v225 = *(_QWORD **)(v224 + 40);
          if (!v225)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v217, v218, v219, v220, v221, v222, v223);
            v225 = *(_QWORD **)(v224 + 40);
          }
          *(_QWORD *)(v224 + 40) = *v225;
          v225[2] = 0;
          v226 = (uint64_t **)(v225 + 2);
          *v225 = 0;
          v225[1] = 0;
          v227 = v1265;
          if (v1265)
          {
            v227 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1189 = *(uint64_t **)(((unint64_t)(v226 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1190 = (uint64_t *)v1189[3];
              v1189 += 3;
              *(v226 - 2) = v1190;
              *(v226 - 1) = v1189;
              *v1189 = (uint64_t)(v226 - 2);
              v1190[1] = (uint64_t)(v226 - 2);
            }
          }
          *v226 = v227;
        }
        else
        {
          v226 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 920;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1254);
        v450 = v1254;
        if (!v1254)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE5CLL);
        }
        v1254 = 0;
        if (*(_DWORD *)v450 == 2)
        {
          WTF::StringImpl::~StringImpl(v450, v443, v444, v445, v446, v447, v448, v449);
          WTF::fastFree(v709, v710, v711, v712, v713, v714, v715, v716);
          if (!v226)
            goto LABEL_279;
        }
        else
        {
          *(_DWORD *)v450 -= 2;
          if (!v226)
            goto LABEL_279;
        }
        v717 = v226 - 2;
        v718 = *(_QWORD *)(((unint64_t)(v226 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v719 = (uint64_t **)*(v226 - 1);
        if (v719)
        {
          v720 = *v717;
          *v719 = *v717;
          v720[1] = (uint64_t)v719;
          *v717 = 0;
          *(v226 - 1) = 0;
        }
        *v717 = *(uint64_t **)(v718 + 40);
        *(_QWORD *)(v718 + 40) = v717;
LABEL_279:
        if (!*(_DWORD *)(a2 + 68))
        {
          v1021 = "lhs";
          v1022 = (unint64_t *)a2;
          v1023 = 4;
          goto LABEL_685;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, v444, v445, v446, v447, v448, v449);
        v1266 = v1257;
        v1267 = v1258;
        v1268 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, v1260, v451, v452, v453, v454, v455, v456);
        if (v1260[0])
        {
          v1103 = v1260[0] - 2;
          v1104 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1105 = (uint64_t *)*(v1260[0] - 1);
          if (v1105)
          {
            v1106 = *v1103;
            *v1105 = *v1103;
            *(_QWORD *)(v1106 + 8) = v1105;
            *v1103 = 0;
            v1103[1] = 0;
          }
          *v1103 = *(_QWORD *)(v1104 + 40);
          *(_QWORD *)(v1104 + 40) = v1103;
        }
        if (v1269)
        {
          v464 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v465 = *(_QWORD **)(v464 + 40);
          if (!v465)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v457, v458, v459, v460, v461, v462, v463);
            v465 = *(_QWORD **)(v464 + 40);
          }
          *(_QWORD *)(v464 + 40) = *v465;
          v465[2] = 0;
          v466 = v465 + 2;
          *v465 = 0;
          v465[1] = 0;
          v467 = v1269;
          if (v1269)
          {
            v467 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1197 = *(_QWORD **)(((unint64_t)(v466 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1198 = v1197[3];
              v1197 += 3;
              *(v466 - 2) = v1198;
              *(v466 - 1) = v1197;
              *v1197 = v466 - 2;
              *(_QWORD *)(v1198 + 8) = v466 - 2;
            }
          }
          *v466 = v467;
        }
        else
        {
          v466 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 921;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1253);
        v520 = v1253;
        if (!v1253)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE7CLL);
        }
        v1253 = 0;
        if (*(_DWORD *)v520 == 2)
        {
          WTF::StringImpl::~StringImpl(v520, v84, v85, v86, v87, v88, v89, v90);
          WTF::fastFree(v757, v758, v759, v760, v761, v762, v763, v764);
          if (!v466)
            goto LABEL_325;
        }
        else
        {
          *(_DWORD *)v520 -= 2;
          if (!v466)
            goto LABEL_325;
        }
        v765 = v466 - 2;
        v766 = *(_QWORD *)(((unint64_t)(v466 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v767 = (uint64_t *)*(v466 - 1);
        if (v767)
        {
          v768 = *v765;
          *v767 = *v765;
          *(_QWORD *)(v768 + 8) = v767;
          *v765 = 0;
          *(v466 - 1) = 0;
        }
        *v765 = *(_QWORD *)(v766 + 40);
        *(_QWORD *)(v766 + 40) = v765;
LABEL_325:
        if (v1266 == 251)
        {
          if (v1262 == 251)
            goto LABEL_624;
          v518 = "extmul rhs vector must be v128";
        }
        else
        {
          v518 = "extmul lhs vector must be v128";
        }
        goto LABEL_734;
      case 12:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        if (!*(_DWORD *)(a2 + 68))
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "select condition", 17, &v1262, *(float *)a10.i32);
          *(_QWORD *)a1 = v1262;
          *(_BYTE *)(a1 + 8) = 1;
          goto LABEL_645;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1262, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1266 = v1262;
        v1267 = v1263;
        v1268 = v1264;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, &v1265, v300, v301, v302, v303, v304, v305);
        if (v1265)
        {
          v1121 = v1265 - 2;
          v1122 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1123 = (uint64_t *)*(v1265 - 1);
          if (v1123)
          {
            v1124 = *v1121;
            *v1123 = *v1121;
            *(_QWORD *)(v1124 + 8) = v1123;
            *v1121 = 0;
            v1121[1] = 0;
          }
          *v1121 = *(_QWORD *)(v1122 + 40);
          *(_QWORD *)(v1122 + 40) = v1121;
        }
        if (v1269)
        {
          v313 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v314 = *(_QWORD **)(v313 + 40);
          if (!v314)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v306, v307, v308, v309, v310, v311, v312);
            v314 = *(_QWORD **)(v313 + 40);
          }
          *(_QWORD *)(v313 + 40) = *v314;
          v314[2] = 0;
          v315 = v314 + 2;
          *v314 = 0;
          v314[1] = 0;
          v316 = v1269;
          if (v1269)
          {
            v316 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1205 = *(_QWORD **)(((unint64_t)(v315 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1206 = v1205[3];
              v1205 += 3;
              *(v315 - 2) = v1206;
              *(v315 - 1) = v1205;
              *v1205 = v315 - 2;
              *(_QWORD *)(v1206 + 8) = v315 - 2;
            }
          }
          *v315 = v316;
        }
        else
        {
          v315 = 0;
        }
        *(_QWORD *)&v1262 = "WasmFunctionParser.h:";
        DWORD2(v1262) = 21;
        LODWORD(v1257) = 862;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1262, (unsigned int *)&v1257, (int **)&v1261);
        v611 = v1261;
        if (!v1261)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE9CLL);
        }
        v1261 = 0;
        if (*(_DWORD *)v611 == 2)
        {
          WTF::StringImpl::~StringImpl(v611, v52, v53, v54, v55, v56, v57, v58);
          WTF::fastFree(v862, v863, v864, v865, v866, v867, v868, v869);
          if (!v315)
            goto LABEL_395;
        }
        else
        {
          *(_DWORD *)v611 -= 2;
          if (!v315)
            goto LABEL_395;
        }
        v870 = v315 - 2;
        v871 = *(_QWORD *)(((unint64_t)(v315 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v872 = (uint64_t *)*(v315 - 1);
        if (v872)
        {
          v873 = *v870;
          *v872 = *v870;
          *(_QWORD *)(v873 + 8) = v872;
          *v870 = 0;
          *(v315 - 1) = 0;
        }
        *v870 = *(_QWORD *)(v871 + 40);
        *(_QWORD *)(v871 + 40) = v870;
LABEL_395:
        switch(a4)
        {
          case 1:
          case 2:
          case 3:
            if ((_BYTE)v1266 != 0xFF)
              goto LABEL_563;
            goto LABEL_55;
          case 4:
            if (v1266 != 254)
              goto LABEL_563;
            goto LABEL_55;
          case 5:
            if (v1266 != 253)
              goto LABEL_563;
            goto LABEL_55;
          case 6:
            if (v1266 == 252)
              goto LABEL_55;
LABEL_563:
            v848 = "Wrong type to SIMD splat";
            v849 = 25;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198CCAD84);
        }
        goto LABEL_668;
      case 13:
      case 14:
      case 27:
      case 36:
      case 37:
      case 50:
      case 61:
      case 64:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1262, a3, a2, &v1257, (uint64_t)&v1266, a6, a7, a8, *(double *)&JSC::Wasm::Types::Void, *(float *)a10.i32);
        if (BYTE8(v1262))
          goto LABEL_671;
        goto LABEL_55;
      case 17:
      case 68:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        if (!*(_DWORD *)(a2 + 68))
        {
          v1024 = "shift i32";
          v1025 = (unint64_t *)a2;
          v1026 = 10;
          goto LABEL_665;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1262 = v1257;
        v1263 = v1258;
        v1264 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, v1260, v194, v195, v196, v197, v198, v199);
        if (v1260[0])
        {
          v1083 = v1260[0] - 2;
          v1084 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1085 = (uint64_t *)*(v1260[0] - 1);
          if (v1085)
          {
            v1086 = *v1083;
            *v1085 = *v1083;
            *(_QWORD *)(v1086 + 8) = v1085;
            *v1083 = 0;
            v1083[1] = 0;
          }
          *v1083 = *(_QWORD *)(v1084 + 40);
          *(_QWORD *)(v1084 + 40) = v1083;
        }
        if (v1265)
        {
          v207 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v208 = *(_QWORD **)(v207 + 40);
          if (!v208)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v200, v201, v202, v203, v204, v205, v206);
            v208 = *(_QWORD **)(v207 + 40);
          }
          *(_QWORD *)(v207 + 40) = *v208;
          v208[2] = 0;
          v209 = (uint64_t **)(v208 + 2);
          *v208 = 0;
          v208[1] = 0;
          v210 = v1265;
          if (v1265)
          {
            v210 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1187 = *(uint64_t **)(((unint64_t)(v209 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1188 = (uint64_t *)v1187[3];
              v1187 += 3;
              *(v209 - 2) = v1188;
              *(v209 - 1) = v1187;
              *v1187 = (uint64_t)(v209 - 2);
              v1188[1] = (uint64_t)(v209 - 2);
            }
          }
          *v209 = v210;
        }
        else
        {
          v209 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 899;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1256);
        v425 = v1256;
        if (!v1256)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE54);
        }
        v1256 = 0;
        if (*(_DWORD *)v425 == 2)
        {
          WTF::StringImpl::~StringImpl(v425, v418, v419, v420, v421, v422, v423, v424);
          WTF::fastFree(v697, v698, v699, v700, v701, v702, v703, v704);
          if (!v209)
            goto LABEL_266;
        }
        else
        {
          *(_DWORD *)v425 -= 2;
          if (!v209)
            goto LABEL_266;
        }
        v705 = v209 - 2;
        v706 = *(_QWORD *)(((unint64_t)(v209 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v707 = (uint64_t **)*(v209 - 1);
        if (v707)
        {
          v708 = *v705;
          *v707 = *v705;
          v708[1] = (uint64_t)v707;
          *v705 = 0;
          *(v209 - 1) = 0;
        }
        *v705 = *(uint64_t **)(v706 + 40);
        *(_QWORD *)(v706 + 40) = v705;
LABEL_266:
        if (!*(_DWORD *)(a2 + 68))
        {
          v1021 = "shift vector";
          v1022 = (unint64_t *)a2;
          v1023 = 13;
          goto LABEL_685;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, v419, v420, v421, v422, v423, v424);
        v1266 = v1257;
        v1267 = v1258;
        v1268 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, v1260, v426, v427, v428, v429, v430, v431);
        if (v1260[0])
        {
          v1099 = v1260[0] - 2;
          v1100 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1101 = (uint64_t *)*(v1260[0] - 1);
          if (v1101)
          {
            v1102 = *v1099;
            *v1101 = *v1099;
            *(_QWORD *)(v1102 + 8) = v1101;
            *v1099 = 0;
            v1099[1] = 0;
          }
          *v1099 = *(_QWORD *)(v1100 + 40);
          *(_QWORD *)(v1100 + 40) = v1099;
        }
        if (v1269)
        {
          v439 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v440 = *(_QWORD **)(v439 + 40);
          if (!v440)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v432, v433, v434, v435, v436, v437, v438);
            v440 = *(_QWORD **)(v439 + 40);
          }
          *(_QWORD *)(v439 + 40) = *v440;
          v440[2] = 0;
          v441 = v440 + 2;
          *v440 = 0;
          v440[1] = 0;
          v442 = v1269;
          if (v1269)
          {
            v442 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1195 = *(_QWORD **)(((unint64_t)(v441 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1196 = v1195[3];
              v1195 += 3;
              *(v441 - 2) = v1196;
              *(v441 - 1) = v1195;
              *v1195 = v441 - 2;
              *(_QWORD *)(v1196 + 8) = v441 - 2;
            }
          }
          *v441 = v442;
        }
        else
        {
          v441 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 900;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1255);
        v517 = v1255;
        if (!v1255)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE74);
        }
        v1255 = 0;
        if (*(_DWORD *)v517 == 2)
        {
          WTF::StringImpl::~StringImpl(v517, v84, v85, v86, v87, v88, v89, v90);
          WTF::fastFree(v745, v746, v747, v748, v749, v750, v751, v752);
          if (!v441)
            goto LABEL_318;
        }
        else
        {
          *(_DWORD *)v517 -= 2;
          if (!v441)
            goto LABEL_318;
        }
        v753 = v441 - 2;
        v754 = *(_QWORD *)(((unint64_t)(v441 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v755 = (uint64_t *)*(v441 - 1);
        if (v755)
        {
          v756 = *v753;
          *v755 = *v753;
          *(_QWORD *)(v756 + 8) = v755;
          *v753 = 0;
          *(v441 - 1) = 0;
        }
        *v753 = *(_QWORD *)(v754 + 40);
        *(_QWORD *)(v754 + 40) = v753;
LABEL_318:
        if (v1266 == 251)
        {
          if ((_BYTE)v1262 == 0xFF)
            goto LABEL_624;
          v518 = "Shift amount must be i32";
          v519 = 25;
        }
        else
        {
          v518 = "Shift vector must be v128";
          v519 = 26;
        }
        goto LABEL_663;
      case 19:
        v296 = *(_QWORD *)a2 + 16;
        if (*(_QWORD *)(a2 + 16) < v296)
        {
          v297 = "can't parse 128-bit vector constant";
          v298 = (unint64_t *)a2;
          v299 = 36;
          goto LABEL_181;
        }
        v588 = (uint64_t *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        v589 = *v588;
        v590 = v588[1];
        *(_QWORD *)a2 = v296;
        if (!HIBYTE(dword_1ECF4C7B0))
        {
          __break(0xC471u);
          JUMPOUT(0x198CCA3DCLL);
        }
        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + 8) == 1)
        {
          *(_QWORD *)&v1267 = v590;
          v591 = 2;
        }
        else
        {
          v589 = 0;
          v591 = 1;
        }
        LOBYTE(v1266) = v591;
        *((_QWORD *)&v1266 + 1) = v589;
        *((_QWORD *)&v1267 + 1) = 0;
        v781 = *(_DWORD *)(a2 + 68);
        if (v781 == *(_DWORD *)(a2 + 64))
        {
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::ConstExprGenerator::ConstExprValue&>(a2 + 56, &JSC::Wasm::Types::V128, (unint64_t)&v1266, a3, a5, a6, a7, a8);
        }
        else
        {
          v782 = *(_QWORD *)(a2 + 56) + 48 * v781;
          *(_OWORD *)v782 = xmmword_19915A170;
          *(_OWORD *)(v782 + 16) = v1266;
          *(_QWORD *)(v782 + 32) = v1267;
          *(_QWORD *)(v782 + 40) = 0;
          ++*(_DWORD *)(a2 + 68);
        }
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      case 22:
      case 33:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        if (!*(_DWORD *)(a2 + 68))
        {
LABEL_664:
          v1024 = "vector argument";
          v1025 = (unint64_t *)a2;
          v1026 = 16;
LABEL_665:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v1025, 26, v1024, v1026, &v1257, *(float *)a10.i32);
LABEL_666:
          *(_QWORD *)a1 = v1257;
          *(_BYTE *)(a1 + 8) = 1;
          goto LABEL_644;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1266 = v1257;
        v1267 = v1258;
        v1268 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, v1260, v228, v229, v230, v231, v232, v233);
        if (v1260[0])
        {
          v1091 = v1260[0] - 2;
          v1092 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1093 = (uint64_t *)*(v1260[0] - 1);
          if (v1093)
          {
            v1094 = *v1091;
            *v1093 = *v1091;
            *(_QWORD *)(v1094 + 8) = v1093;
            *v1091 = 0;
            v1091[1] = 0;
          }
          *v1091 = *(_QWORD *)(v1092 + 40);
          *(_QWORD *)(v1092 + 40) = v1091;
        }
        if (v1269)
        {
          v241 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v242 = *(_QWORD **)(v241 + 40);
          if (!v242)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v234, v235, v236, v237, v238, v239, v240);
            v242 = *(_QWORD **)(v241 + 40);
          }
          *(_QWORD *)(v241 + 40) = *v242;
          v242[2] = 0;
          v243 = v242 + 2;
          *v242 = 0;
          v242[1] = 0;
          v244 = v1269;
          if (v1269)
          {
            v244 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1191 = *(_QWORD **)(((unint64_t)(v243 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1192 = v1191[3];
              v1191 += 3;
              *(v243 - 2) = v1192;
              *(v243 - 1) = v1191;
              *v1191 = v243 - 2;
              *(_QWORD *)(v1192 + 8) = v243 - 2;
            }
          }
          *v243 = v244;
        }
        else
        {
          v243 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 1267;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1232);
        v475 = v1232;
        if (!v1232)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE64);
        }
        v1232 = 0;
        if (*(_DWORD *)v475 == 2)
        {
          WTF::StringImpl::~StringImpl(v475, v468, v469, v470, v471, v472, v473, v474);
          WTF::fastFree(v721, v722, v723, v724, v725, v726, v727, v728);
          if (!v243)
            goto LABEL_292;
        }
        else
        {
          *(_DWORD *)v475 -= 2;
          if (!v243)
            goto LABEL_292;
        }
        v729 = v243 - 2;
        v730 = *(_QWORD *)(((unint64_t)(v243 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v731 = (uint64_t *)*(v243 - 1);
        if (v731)
        {
          v732 = *v729;
          *v731 = *v729;
          *(_QWORD *)(v732 + 8) = v731;
          *v729 = 0;
          *(v243 - 1) = 0;
        }
        *v729 = *(_QWORD *)(v730 + 40);
        *(_QWORD *)(v730 + 40) = v729;
LABEL_292:
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_659;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, v469, v470, v471, v472, v473, v474);
        v1262 = v1257;
        v1263 = v1258;
        v1264 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, v1260, v476, v477, v478, v479, v480, v481);
        if (v1260[0])
        {
          v1107 = v1260[0] - 2;
          v1108 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1109 = (uint64_t *)*(v1260[0] - 1);
          if (v1109)
          {
            v1110 = *v1107;
            *v1109 = *v1107;
            *(_QWORD *)(v1110 + 8) = v1109;
            *v1107 = 0;
            v1107[1] = 0;
          }
          *v1107 = *(_QWORD *)(v1108 + 40);
          *(_QWORD *)(v1108 + 40) = v1107;
        }
        if (v1265)
        {
          v489 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v490 = *(_QWORD **)(v489 + 40);
          if (!v490)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v482, v483, v484, v485, v486, v487, v488);
            v490 = *(_QWORD **)(v489 + 40);
          }
          *(_QWORD *)(v489 + 40) = *v490;
          v490[2] = 0;
          v268 = (uint64_t **)(v490 + 2);
          *v490 = 0;
          v490[1] = 0;
          v491 = v1265;
          if (v1265)
          {
            v491 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1199 = *(uint64_t **)(((unint64_t)(v268 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1200 = (uint64_t *)v1199[3];
              v1199 += 3;
              *(v268 - 2) = v1200;
              *(v268 - 1) = v1199;
              *v1199 = (uint64_t)(v268 - 2);
              v1200[1] = (uint64_t)(v268 - 2);
            }
          }
          *v268 = v491;
        }
        else
        {
          v268 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 1268;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1231);
        v277 = v1231;
        if (!v1231)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE84);
        }
        v1231 = 0;
LABEL_331:
        if (*(_DWORD *)v277 == 2)
        {
          WTF::StringImpl::~StringImpl(v277, v270, v271, v272, v273, v274, v275, v276);
          WTF::fastFree(v530, v531, v532, v533, v534, v535, v536, v537);
          if (!v268)
            goto LABEL_333;
        }
        else
        {
          *(_DWORD *)v277 -= 2;
          if (!v268)
            goto LABEL_333;
        }
        v538 = v268 - 2;
        v539 = *(_QWORD *)(((unint64_t)(v268 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v540 = (uint64_t **)*(v268 - 1);
        if (v540)
        {
          v541 = *v538;
          *v540 = *v538;
          v541[1] = (uint64_t)v540;
          *v538 = 0;
          *(v268 - 1) = 0;
        }
        *v538 = *(uint64_t **)(v539 + 40);
        *(_QWORD *)(v539 + 40) = v538;
LABEL_333:
        if (v1262 != 251 || *((_QWORD *)&v1262 + 1))
          goto LABEL_661;
        if (v1266 != 251 || *((_QWORD *)&v1266 + 1))
          goto LABEL_539;
        v521 = *(_QWORD *)(a2 + 48);
        if (v1265)
        {
          v522 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v523 = *(_QWORD **)(v522 + 40);
          if (!v523)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v270, v271, v272, v273, v274, v275, v276);
            v523 = *(_QWORD **)(v522 + 40);
          }
          *(_QWORD *)(v522 + 40) = *v523;
          v523[2] = 0;
          v524 = (uint64_t **)(v523 + 2);
          *v523 = 0;
          v523[1] = 0;
          v525 = v1265;
          if (v1265)
          {
            v525 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1167 = *(uint64_t **)(((unint64_t)(v524 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1168 = (uint64_t *)v1167[3];
              v1167 += 3;
              *(v524 - 2) = v1168;
              *(v524 - 1) = v1167;
              *v1167 = (uint64_t)(v524 - 2);
              v1168[1] = (uint64_t)(v524 - 2);
            }
          }
          *v524 = v525;
        }
        else
        {
          v524 = 0;
        }
        if (!v1269)
          goto LABEL_642;
        v526 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v527 = *(_QWORD **)(v526 + 40);
        if (!v527)
        {
          JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v270, v271, v272, v273, v274, v275, v276);
          v527 = *(_QWORD **)(v526 + 40);
        }
        *(_QWORD *)(v526 + 40) = *v527;
        v527[2] = 0;
        v528 = (uint64_t **)(v527 + 2);
        *v527 = 0;
        v527[1] = 0;
        v529 = v1269;
        if (v1269)
          goto LABEL_636;
        goto LABEL_638;
      case 34:
      case 35:
      case 40:
      case 56:
      case 70:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1262, a3, a2, &v1257, (uint64_t)&v1266, a6, a7, a8, *(double *)&JSC::Wasm::Types::Void, *(float *)a10.i32);
        if (BYTE8(v1262))
          goto LABEL_671;
        v96 = *(_QWORD *)(a2 + 48);
        v97 = v1269;
        if (!v1269)
          goto LABEL_66;
        goto LABEL_56;
      case 41:
        v318.i32[1] = DWORD1(JSC::Wasm::Types::Void);
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        v319 = *(_QWORD *)a2 + 16;
        if (*(_QWORD *)(a2 + 16) < v319)
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse 128-bit shuffle immediate", (unint64_t *)a2, 38, &v1257, *(float *)a10.i32);
          *(_QWORD *)a1 = v1257;
          *(_BYTE *)(a1 + 8) = 1;
          goto LABEL_644;
        }
        v592 = *(_QWORD *)(a2 + 8) + *(_QWORD *)a2;
        v318.i32[0] = *(_DWORD *)v592;
        v593 = *(_BYTE *)(v592 + 4);
        a10.i32[0] = *(_DWORD *)(v592 + 5);
        v594 = *(_BYTE *)(v592 + 9);
        v595 = *(_BYTE *)(v592 + 10);
        v596 = *(_BYTE *)(v592 + 11);
        a12.i32[0] = *(_DWORD *)(v592 + 12);
        *(_QWORD *)a2 = v319;
        v597.i64[0] = vmovl_u8(v318).u64[0];
        v598 = (uint8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
        a10.i64[0] = vmovl_u8(a12).u64[0];
        switch(a4)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198CCADE4);
          case 1:
            v935 = v598.i8[6];
            v936 = v598.i8[4];
            v937 = v598.i8[2];
            v938 = v598.i8[0];
            v939.i8[0] = v597.i8[0];
            v939.i8[1] = v597.i8[4];
            v939.i8[2] = v597.i8[6];
            v939.i8[3] = v593;
            v939.i8[4] = v938;
            v939.i8[5] = v937;
            v939.i8[6] = v936;
            v939.i8[7] = v935;
            if ((vmaxv_u8(vcgt_u8(v939, (uint8x8_t)0x1F1F1F1F1F1F1F1FLL)) & 1) == 0
              && (a10.i8[0] | v597.i8[2] | a10.i8[2] | a10.i8[4] | a10.i8[6] | v596 | v594 | v595) < 0x20u)
            {
              goto LABEL_596;
            }
            goto LABEL_687;
          case 2:
            v934 = v597.i8[0];
            a3 = a10.u16[3];
            v17 = a10.u16[2];
            a5 = a10.u16[1];
            a6 = a10.u16[0];
            v597.i8[0] = v597.i8[2];
            v597.i8[1] = v934;
            v597.i8[2] = v597.i8[4];
            v597.i8[3] = v597.i8[6];
            v597.i8[4] = v593;
            v597.i8[5] = v598.i8[0];
            v597.i8[6] = v598.i8[2];
            v597.i8[7] = v598.i8[4];
            v597.i8[8] = v598.i8[6];
            v597.i8[9] = v594;
            v597.i8[10] = v595;
            v597.i8[11] = v596;
            v597.i8[12] = a10.i8[0];
            v597.i8[13] = a10.i8[2];
            v597.i8[14] = a10.i8[4];
            v597.i8[15] = a10.i8[6];
            a10.i16[0] = 3855;
            a10.i8[2] = 15;
            a10.i8[3] = 15;
            a10.i8[4] = 15;
            a10.i8[5] = 15;
            a10.i8[6] = 15;
            a10.i8[7] = 15;
            a10.i8[8] = 15;
            a10.i8[9] = 15;
            a10.i8[10] = 15;
            a10.i8[11] = 15;
            a10.i8[12] = 15;
            a10.i8[13] = 15;
            a10.i8[14] = 15;
            a10.i8[15] = 15;
            if ((vmaxvq_u8(vcgtq_u8(v597, a10)) & 1) != 0)
              goto LABEL_687;
            goto LABEL_596;
          case 3:
          case 5:
            v599.i32[0] = v597.u16[1];
            v599.i32[1] = v597.u16[0];
            v600 = vcgt_u32((uint32x2_t)0x800000008, (uint32x2_t)vand_s8(v599, (int8x8_t)0xFF000000FFLL));
            v601 = v598.i8[0];
            v598.i8[0] = v593;
            v598.i8[1] = v601;
            v598.i8[3] = v598.i8[4];
            v598.i8[4] = v598.i8[6];
            v598.i8[5] = v594;
            v598.i8[6] = v595;
            v598.i8[7] = v596;
            a10.i32[0] &= 0xFF00FFu;
            a10.i16[2] = a10.u8[4];
            a10.i16[3] = a10.u8[6];
            v602 = vcgt_u8(v598, (uint8x8_t)0x707070707070707);
            v602.i8[0] = vmaxv_u8(v602);
            *(uint16x4_t *)a10.i8 = vcgt_u16(*(uint16x4_t *)a10.i8, (uint16x4_t)0x7000700070007);
            a10.i16[0] = vmaxv_u16(*(uint16x4_t *)a10.i8);
            if ((~v602.i32[0] & ~a10.i32[0] & v600.i32[0] & v600.i32[1] & 1) == 0
              || (v597.i8[4] | v597.i8[6]) >= 8u)
            {
              goto LABEL_687;
            }
            goto LABEL_596;
          case 4:
          case 6:
            v844.i32[0] = v597.u16[1];
            v844.i32[1] = v597.u16[0];
            v845 = vcgt_u32((uint32x2_t)0x400000004, (uint32x2_t)vand_s8(v844, (int8x8_t)0xFF000000FFLL));
            v846 = v598.i8[0];
            v598.i8[0] = v593;
            v598.i8[1] = v846;
            v598.i8[3] = v598.i8[4];
            v598.i8[4] = v598.i8[6];
            v598.i8[5] = v594;
            v598.i8[6] = v595;
            v598.i8[7] = v596;
            a10.i32[0] &= 0xFF00FFu;
            a10.i16[2] = a10.u8[4];
            a10.i16[3] = a10.u8[6];
            v847 = vcgt_u8(v598, (uint8x8_t)0x303030303030303);
            v847.i8[0] = vmaxv_u8(v847);
            *(uint16x4_t *)a10.i8 = vcgt_u16(*(uint16x4_t *)a10.i8, (uint16x4_t)0x3000300030003);
            a10.i16[0] = vmaxv_u16(*(uint16x4_t *)a10.i8);
            if ((~v847.i32[0] & ~a10.i32[0] & v845.i32[0] & v845.i32[1] & 1) == 0
              || (v597.i8[4] | v597.i8[6]) >= 4u)
            {
LABEL_687:
              JSC::Wasm::ParserBase::fail<>((unint64_t *)a2, &v1257);
              goto LABEL_686;
            }
LABEL_596:
            if (!*(_DWORD *)(a2 + 68))
              goto LABEL_659;
            WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, a3, v17, a5, a6, a7, a8);
            v1262 = v1257;
            v1263 = v1258;
            v1264 = v1259;
            JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, v1260, v940, v941, v942, v943, v944, v945);
            if (v1260[0])
            {
              v1157 = v1260[0] - 2;
              v1158 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1159 = (uint64_t *)*(v1260[0] - 1);
              if (v1159)
              {
                v1160 = *v1157;
                *v1159 = *v1157;
                *(_QWORD *)(v1160 + 8) = v1159;
                *v1157 = 0;
                v1157[1] = 0;
              }
              *v1157 = *(_QWORD *)(v1158 + 40);
              *(_QWORD *)(v1158 + 40) = v1157;
            }
            if (v1265)
            {
              v953 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v954 = *(_QWORD **)(v953 + 40);
              if (!v954)
              {
                JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v946, v947, v948, v949, v950, v951, v952);
                v954 = *(_QWORD **)(v953 + 40);
              }
              *(_QWORD *)(v953 + 40) = *v954;
              v954[2] = 0;
              v955 = (uint64_t **)(v954 + 2);
              *v954 = 0;
              v954[1] = 0;
              v956 = v1265;
              if (v1265)
              {
                v956 = (uint64_t *)*v1265;
                if (*v1265)
                {
                  v1219 = *(uint64_t **)(((unint64_t)(v955 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                  v1220 = (uint64_t *)v1219[3];
                  v1219 += 3;
                  *(v955 - 2) = v1220;
                  *(v955 - 1) = v1219;
                  *v1219 = (uint64_t)(v955 - 2);
                  v1220[1] = (uint64_t)(v955 - 2);
                }
              }
              *v955 = v956;
            }
            else
            {
              v955 = 0;
            }
            *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
            DWORD2(v1257) = 21;
            LODWORD(v1239) = 1111;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1249);
            v964 = v1249;
            if (!v1249)
            {
              __break(0xC471u);
              JUMPOUT(0x198CCAED4);
            }
            v1249 = 0;
            if (*(_DWORD *)v964 == 2)
            {
              WTF::StringImpl::~StringImpl(v964, v957, v958, v959, v960, v961, v962, v963);
              WTF::fastFree(v993, v994, v995, v996, v997, v998, v999, v1000);
              if (!v955)
                goto LABEL_609;
            }
            else
            {
              *(_DWORD *)v964 -= 2;
              if (!v955)
                goto LABEL_609;
            }
            v1001 = v955 - 2;
            v1002 = *(_QWORD *)(((unint64_t)(v955 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v1003 = (uint64_t **)*(v955 - 1);
            if (v1003)
            {
              v1004 = *v1001;
              *v1003 = *v1001;
              v1004[1] = (uint64_t)v1003;
              *v1001 = 0;
              *(v955 - 1) = 0;
            }
            *v1001 = *(uint64_t **)(v1002 + 40);
            *(_QWORD *)(v1002 + 40) = v1001;
LABEL_609:
            if (v1262 != 251)
              goto LABEL_733;
            if (!*(_DWORD *)(a2 + 68))
              goto LABEL_659;
            WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, v958, v959, v960, v961, v962, v963);
            v1266 = v1257;
            v1267 = v1258;
            v1268 = v1259;
            JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, v1260, v965, v966, v967, v968, v969, v970);
            if (v1260[0])
            {
              v1161 = v1260[0] - 2;
              v1162 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1163 = (uint64_t *)*(v1260[0] - 1);
              if (v1163)
              {
                v1164 = *v1161;
                *v1163 = *v1161;
                *(_QWORD *)(v1164 + 8) = v1163;
                *v1161 = 0;
                v1161[1] = 0;
              }
              *v1161 = *(_QWORD *)(v1162 + 40);
              *(_QWORD *)(v1162 + 40) = v1161;
            }
            if (v1269)
            {
              v978 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v979 = *(_QWORD **)(v978 + 40);
              if (!v979)
              {
                JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v971, v972, v973, v974, v975, v976, v977);
                v979 = *(_QWORD **)(v978 + 40);
              }
              *(_QWORD *)(v978 + 40) = *v979;
              v979[2] = 0;
              v980 = v979 + 2;
              *v979 = 0;
              v979[1] = 0;
              v981 = v1269;
              if (v1269)
              {
                v981 = (_QWORD *)*v1269;
                if (*v1269)
                {
                  v1221 = *(_QWORD **)(((unint64_t)(v980 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                  v1222 = v1221[3];
                  v1221 += 3;
                  *(v980 - 2) = v1222;
                  *(v980 - 1) = v1221;
                  *v1221 = v980 - 2;
                  *(_QWORD *)(v1222 + 8) = v980 - 2;
                }
              }
              *v980 = v981;
            }
            else
            {
              v980 = 0;
            }
            *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
            DWORD2(v1257) = 21;
            LODWORD(v1239) = 1113;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1248);
            v982 = v1248;
            if (!v1248)
            {
              __break(0xC471u);
              JUMPOUT(0x198CCAEDCLL);
            }
            v1248 = 0;
            if (*(_DWORD *)v982 == 2)
            {
              WTF::StringImpl::~StringImpl(v982, v84, v85, v86, v87, v88, v89, v90);
              WTF::fastFree(v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012);
              if (!v980)
                goto LABEL_623;
            }
            else
            {
              *(_DWORD *)v982 -= 2;
              if (!v980)
                goto LABEL_623;
            }
            v1013 = v980 - 2;
            v1014 = *(_QWORD *)(((unint64_t)(v980 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v1015 = (uint64_t *)*(v980 - 1);
            if (v1015)
            {
              v1016 = *v1013;
              *v1015 = *v1013;
              *(_QWORD *)(v1016 + 8) = v1015;
              *v1013 = 0;
              *(v980 - 1) = 0;
            }
            *v1013 = *(_QWORD *)(v1014 + 40);
            *(_QWORD *)(v1014 + 40) = v1013;
LABEL_623:
            if (v1266 == 251)
              goto LABEL_624;
LABEL_733:
            v518 = "shuffle input must be a vector";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198CCAE04);
        }
LABEL_734:
        v519 = 31;
        goto LABEL_663;
      case 44:
      case 57:
      case 74:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        if (*(_DWORD *)(a2 + 68))
        {
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1262, a2 + 56, a3, a3, a5, a6, a7, a8);
          v1266 = v1262;
          v1267 = v1263;
          v1268 = v1264;
          JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, &v1265, v161, v162, v163, v164, v165, v166);
          if (v1265)
          {
            v1067 = v1265 - 2;
            v1068 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v1069 = (uint64_t *)*(v1265 - 1);
            if (v1069)
            {
              v1070 = *v1067;
              *v1069 = *v1067;
              *(_QWORD *)(v1070 + 8) = v1069;
              *v1067 = 0;
              v1067[1] = 0;
            }
            *v1067 = *(_QWORD *)(v1068 + 40);
            *(_QWORD *)(v1068 + 40) = v1067;
          }
          if (v1269)
          {
            v174 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v175 = *(_QWORD **)(v174 + 40);
            if (!v175)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v167, v168, v169, v170, v171, v172, v173);
              v175 = *(_QWORD **)(v174 + 40);
            }
            *(_QWORD *)(v174 + 40) = *v175;
            v175[2] = 0;
            v50 = v175 + 2;
            *v175 = 0;
            v175[1] = 0;
            v176 = v1269;
            if (v1269)
            {
              v176 = (_QWORD *)*v1269;
              if (*v1269)
              {
                v1177 = *(_QWORD **)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v1178 = v1177[3];
                v1177 += 3;
                *(v50 - 2) = v1178;
                *(v50 - 1) = v1177;
                *v1177 = v50 - 2;
                *(_QWORD *)(v1178 + 8) = v50 - 2;
              }
            }
            *v50 = v176;
          }
          else
          {
            v50 = 0;
          }
          *(_QWORD *)&v1262 = "WasmFunctionParser.h:";
          DWORD2(v1262) = 21;
          LODWORD(v1257) = 1172;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1262, (unsigned int *)&v1257, &v1244);
          v95 = v1244;
          if (!v1244)
          {
            __break(0xC471u);
            JUMPOUT(0x198CCAE44);
          }
          v1244 = 0;
          goto LABEL_51;
        }
LABEL_669:
        v1027 = "vector argument";
        v1028 = (unint64_t *)a2;
        v1029 = 16;
LABEL_670:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v1028, 26, v1027, v1029, &v1262, *(float *)a10.i32);
LABEL_671:
        *(_QWORD *)a1 = v1262;
        *(_BYTE *)(a1 + 8) = 1;
        goto LABEL_645;
      case 65:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v317 = 16;
        switch(a4)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198CCAD64);
          case 1:
            break;
          case 2:
            v317 = 8;
            break;
          case 3:
          case 5:
            v317 = 4;
            break;
          case 4:
          case 6:
            v317 = 2;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198CCADC4);
        }
        v827 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("Could not parse the lane index immediate byte.", (unint64_t *)a2, 47, &v1262, *(float *)a10.i32);
          goto LABEL_67;
        }
        *(_QWORD *)a2 = v827 + 1;
        if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v827) >= v317)
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", (unint64_t *)a2, 40, v317, ", expected an ImmLaneIdx", 25, v317, &v1262, *(float *)a10.i32);
          goto LABEL_67;
        }
        if (!*(_DWORD *)(a2 + 68))
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "vector argument", 16, &v1262, *(float *)a10.i32);
          goto LABEL_67;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1262, a2 + 56, a3, v317, a5, a6, a7, a8);
        v1266 = v1262;
        v1267 = v1263;
        v1268 = v1264;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, &v1265, v828, v829, v830, v831, v832, v833);
        if (v1265)
        {
          v1137 = v1265 - 2;
          v1138 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1139 = (uint64_t *)*(v1265 - 1);
          if (v1139)
          {
            v1140 = *v1137;
            *v1139 = *v1137;
            *(_QWORD *)(v1140 + 8) = v1139;
            *v1137 = 0;
            v1137[1] = 0;
          }
          *v1137 = *(_QWORD *)(v1138 + 40);
          *(_QWORD *)(v1138 + 40) = v1137;
        }
        if (v1269)
        {
          v841 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v842 = *(_QWORD **)(v841 + 40);
          if (!v842)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v834, v835, v836, v837, v838, v839, v840);
            v842 = *(_QWORD **)(v841 + 40);
          }
          *(_QWORD *)(v841 + 40) = *v842;
          v842[2] = 0;
          v50 = v842 + 2;
          *v842 = 0;
          v842[1] = 0;
          v843 = v1269;
          if (v1269)
          {
            v843 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1213 = *(_QWORD **)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1214 = v1213[3];
              v1213 += 3;
              *(v50 - 2) = v1214;
              *(v50 - 1) = v1213;
              *v1213 = v50 - 2;
              *(_QWORD *)(v1214 + 8) = v50 - 2;
            }
          }
          *v50 = v843;
        }
        else
        {
          v50 = 0;
        }
        *(_QWORD *)&v1262 = "WasmFunctionParser.h:";
        DWORD2(v1262) = 21;
        LODWORD(v1257) = 1132;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1262, (unsigned int *)&v1257, &v1247);
        v95 = v1247;
        if (!v1247)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAECCLL);
        }
        v1247 = 0;
LABEL_51:
        if (*v95 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v95, v52, v53, v54, v55, v56, v57, v58);
          WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
          if (!v50)
          {
LABEL_53:
            if (v1266 != 251 || *((_QWORD *)&v1266 + 1))
            {
              v848 = "type mismatch for argument 0";
              v849 = 29;
LABEL_668:
              *(_QWORD *)&v1262 = v848;
              *((_QWORD *)&v1262 + 1) = v849;
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v1257, (uint64_t)&v1262, v93, v94);
              v102 = v1257;
              goto LABEL_68;
            }
LABEL_55:
            v96 = *(_QWORD *)(a2 + 48);
            v97 = v1269;
            if (v1269)
            {
LABEL_56:
              v98 = *(JSC::HandleSet **)(((unint64_t)(v97 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v99 = (_QWORD *)*((_QWORD *)v98 + 5);
              if (!v99)
              {
                JSC::HandleSet::grow(v98, (uint64_t)v52, v53, v54, v55, v56, v57, v58);
                v99 = (_QWORD *)*((_QWORD *)v98 + 5);
              }
              *((_QWORD *)v98 + 5) = *v99;
              v99[2] = 0;
              v100 = v99 + 2;
              *v99 = 0;
              v99[1] = 0;
              v101 = v1269;
              if (v1269)
              {
                v101 = (_QWORD *)*v1269;
                if (*v1269)
                {
                  v1149 = *(_QWORD **)(((unint64_t)(v100 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                  v1150 = v1149[3];
                  v1149 += 3;
                  *(v100 - 2) = v1150;
                  *(v100 - 1) = v1149;
                  *v1149 = v100 - 2;
                  *(_QWORD *)(v1150 + 8) = v100 - 2;
                }
              }
              *v100 = v101;
              JSC::Wasm::ConstExprGenerator::fail<char const*>(&v1262, **(_QWORD **)v96, *(_QWORD *)(v96 + 16));
              v102 = v1262;
              v103 = v100 - 2;
              v104 = *(_QWORD *)(((unint64_t)(v100 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v105 = (uint64_t *)*(v100 - 1);
              if (v105)
              {
                v106 = *v103;
                *v105 = *v103;
                *(_QWORD *)(v106 + 8) = v105;
                *v103 = 0;
                *(v100 - 1) = 0;
              }
              *v103 = *(_QWORD *)(v104 + 40);
              *(_QWORD *)(v104 + 40) = v103;
LABEL_68:
              *(_QWORD *)a1 = v102;
              *(_BYTE *)(a1 + 8) = 1;
LABEL_645:
              if (v1269)
              {
                v1017 = v1269 - 2;
                v1018 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v1019 = (uint64_t *)*(v1269 - 1);
                if (v1019)
                {
                  v1020 = *v1017;
                  *v1019 = *v1017;
                  *(_QWORD *)(v1020 + 8) = v1019;
                  *v1017 = 0;
                  v1017[1] = 0;
                }
                *v1017 = *(_QWORD *)(v1018 + 40);
                *(_QWORD *)(v1018 + 40) = v1017;
              }
              return;
            }
LABEL_66:
            JSC::Wasm::ConstExprGenerator::fail<char const*>(&v1262, **(_QWORD **)v96, *(_QWORD *)(v96 + 16));
LABEL_67:
            v102 = v1262;
            goto LABEL_68;
          }
        }
        else
        {
          *v95 -= 2;
          if (!v50)
            goto LABEL_53;
        }
        v133 = v50 - 2;
        v134 = *(_QWORD *)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v135 = (uint64_t *)*(v50 - 1);
        if (v135)
        {
          v136 = *v133;
          *v135 = *v133;
          *(_QWORD *)(v136 + 8) = v135;
          *v133 = 0;
          *(v50 - 1) = 0;
        }
        *v133 = *(_QWORD *)(v134 + 40);
        *(_QWORD *)(v134 + 40) = v133;
        goto LABEL_53;
      case 66:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        v278 = 16;
        switch(a4)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198CCAD44);
          case 1:
            break;
          case 2:
            v278 = 8;
            break;
          case 3:
          case 5:
            v278 = 4;
            break;
          case 4:
          case 6:
            v278 = 2;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198CCADA4);
        }
        v783 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
          goto LABEL_793;
        *(_QWORD *)a2 = v783 + 1;
        if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v783) >= v278)
        {
          v390 = (unint64_t *)a2;
          v391 = v278;
          goto LABEL_248;
        }
        if (!*(_DWORD *)(a2 + 68))
        {
          v1021 = "scalar argument";
          goto LABEL_660;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, a3, v278, a5, a6, a7, a8);
        v1262 = v1257;
        v1263 = v1258;
        v1264 = v1259;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, v1260, v784, v785, v786, v787, v788, v789);
        if (v1260[0])
        {
          v1133 = v1260[0] - 2;
          v1134 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1135 = (uint64_t *)*(v1260[0] - 1);
          if (v1135)
          {
            v1136 = *v1133;
            *v1135 = *v1133;
            *(_QWORD *)(v1136 + 8) = v1135;
            *v1133 = 0;
            v1133[1] = 0;
          }
          *v1133 = *(_QWORD *)(v1134 + 40);
          *(_QWORD *)(v1134 + 40) = v1133;
        }
        if (v1265)
        {
          v797 = *(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v798 = (_QWORD *)*((_QWORD *)v797 + 5);
          if (!v798)
          {
            v1225 = *(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            JSC::HandleSet::grow(v797, v790, v791, v792, v793, v794, v795, v796);
            v797 = v1225;
            v798 = (_QWORD *)*((_QWORD *)v1225 + 5);
          }
          *((_QWORD *)v797 + 5) = *v798;
          v798[2] = 0;
          v799 = (uint64_t **)(v798 + 2);
          *v798 = 0;
          v798[1] = 0;
          v800 = v1265;
          if (v1265)
          {
            v800 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1211 = *(uint64_t **)(((unint64_t)(v799 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1212 = (uint64_t *)v1211[3];
              v1211 += 3;
              *(v799 - 2) = v1212;
              *(v799 - 1) = v1211;
              *v1211 = (uint64_t)(v799 - 2);
              v1212[1] = (uint64_t)(v799 - 2);
            }
          }
          *v799 = v800;
        }
        else
        {
          v799 = 0;
        }
        *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
        DWORD2(v1257) = 21;
        LODWORD(v1239) = 1152;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1246);
        v808 = v1246;
        if (!v1246)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAEBCLL);
        }
        v1246 = 0;
        if (*(_DWORD *)v808 == 2)
        {
          WTF::StringImpl::~StringImpl(v808, v801, v802, v803, v804, v805, v806, v807);
          WTF::fastFree(v898, v899, v900, v901, v902, v903, v904, v905);
          if (!v799)
            goto LABEL_522;
        }
        else
        {
          *(_DWORD *)v808 -= 2;
          if (!v799)
          {
LABEL_522:
            if (*(_DWORD *)(a2 + 68))
            {
              WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1257, a2 + 56, v802, v803, v804, v805, v806, v807);
              v1266 = v1257;
              v1267 = v1258;
              v1268 = v1259;
              JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, v1260, v809, v810, v811, v812, v813, v814);
              if (v1260[0])
              {
                v1145 = v1260[0] - 2;
                v1146 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v1147 = (uint64_t *)*(v1260[0] - 1);
                if (v1147)
                {
                  v1148 = *v1145;
                  *v1147 = *v1145;
                  *(_QWORD *)(v1148 + 8) = v1147;
                  *v1145 = 0;
                  v1145[1] = 0;
                }
                *v1145 = *(_QWORD *)(v1146 + 40);
                *(_QWORD *)(v1146 + 40) = v1145;
              }
              if (v1269)
              {
                v822 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v823 = *(_QWORD **)(v822 + 40);
                if (!v823)
                {
                  JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v815, v816, v817, v818, v819, v820, v821);
                  v823 = *(_QWORD **)(v822 + 40);
                }
                *(_QWORD *)(v822 + 40) = *v823;
                v823[2] = 0;
                v824 = v823 + 2;
                *v823 = 0;
                v823[1] = 0;
                v825 = v1269;
                if (v1269)
                {
                  v825 = (_QWORD *)*v1269;
                  if (*v1269)
                  {
                    v1217 = *(_QWORD **)(((unint64_t)(v824 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v1218 = v1217[3];
                    v1217 += 3;
                    *(v824 - 2) = v1218;
                    *(v824 - 1) = v1217;
                    *v1217 = v824 - 2;
                    *(_QWORD *)(v1218 + 8) = v824 - 2;
                  }
                }
                *v824 = v825;
              }
              else
              {
                v824 = 0;
              }
              *(_QWORD *)&v1257 = "WasmFunctionParser.h:";
              DWORD2(v1257) = 21;
              LODWORD(v1239) = 1153;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1257, (unsigned int *)&v1239, (int **)&v1245);
              v826 = v1245;
              if (!v1245)
              {
                __break(0xC471u);
                JUMPOUT(0x198CCAEC4);
              }
              v1245 = 0;
              if (*(_DWORD *)v826 == 2)
              {
                WTF::StringImpl::~StringImpl(v826, v84, v85, v86, v87, v88, v89, v90);
                WTF::fastFree(v922, v923, v924, v925, v926, v927, v928, v929);
                if (!v824)
                {
LABEL_535:
                  if (v1266 != 251 || *((_QWORD *)&v1266 + 1))
                  {
LABEL_661:
                    v518 = "type mismatch for argument 1";
                  }
                  else
                  {
                    if ((a4 - 1) >= 6)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198CCAD24);
                    }
                    if (v1262 == (0xFCFDFEFFFFFFuLL >> (8 * (a4 - 1))))
                    {
LABEL_46:
                      if (!*((_QWORD *)&v1262 + 1))
                        goto LABEL_624;
                    }
LABEL_539:
                    v518 = "type mismatch for argument 0";
                  }
                  v519 = 29;
                  goto LABEL_663;
                }
              }
              else
              {
                *(_DWORD *)v826 -= 2;
                if (!v824)
                  goto LABEL_535;
              }
              v930 = v824 - 2;
              v931 = *(_QWORD *)(((unint64_t)(v824 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v932 = (uint64_t *)*(v824 - 1);
              if (v932)
              {
                v933 = *v930;
                *v932 = *v930;
                *(_QWORD *)(v933 + 8) = v932;
                *v930 = 0;
                *(v824 - 1) = 0;
              }
              *v930 = *(_QWORD *)(v931 + 40);
              *(_QWORD *)(v931 + 40) = v930;
              goto LABEL_535;
            }
LABEL_659:
            v1021 = "vector argument";
LABEL_660:
            v1022 = (unint64_t *)a2;
            v1023 = 16;
            goto LABEL_685;
          }
        }
        v906 = v799 - 2;
        v907 = *(_QWORD *)(((unint64_t)(v799 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v908 = (uint64_t **)*(v799 - 1);
        if (v908)
        {
          v909 = *v906;
          *v908 = *v906;
          v909[1] = (uint64_t)v908;
          *v906 = 0;
          *(v799 - 1) = 0;
        }
        *v906 = *(uint64_t **)(v907 + 40);
        *(_QWORD *)(v907 + 40) = v906;
        goto LABEL_522;
      case 72:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        v1257 = JSC::Wasm::Types::Void;
        LOBYTE(v1258) = 1;
        *((_QWORD *)&v1258 + 1) = 0;
        v1260[0] = 0;
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_694;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1239, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1257 = v1239;
        v1258 = v1240;
        v1259 = v1241;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(v1260, &v1242, v320, v321, v322, v323, v324, v325);
        if (v1242)
        {
          v1125 = v1242 - 2;
          v1126 = *(_QWORD *)(((unint64_t)(v1242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1127 = (uint64_t *)*(v1242 - 1);
          if (v1127)
          {
            v1128 = *v1125;
            *v1127 = *v1125;
            *(_QWORD *)(v1128 + 8) = v1127;
            *v1125 = 0;
            v1125[1] = 0;
          }
          *v1125 = *(_QWORD *)(v1126 + 40);
          *(_QWORD *)(v1126 + 40) = v1125;
        }
        if (v1260[0])
        {
          v333 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v334 = *(_QWORD **)(v333 + 40);
          if (!v334)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v326, v327, v328, v329, v330, v331, v332);
            v334 = *(_QWORD **)(v333 + 40);
          }
          *(_QWORD *)(v333 + 40) = *v334;
          v334[2] = 0;
          v335 = (uint64_t **)(v334 + 2);
          *v334 = 0;
          v334[1] = 0;
          v336 = v1260[0];
          if (v1260[0])
          {
            v336 = (uint64_t *)*v1260[0];
            if (*v1260[0])
            {
              v1207 = *(uint64_t **)(((unint64_t)(v335 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1208 = (uint64_t *)v1207[3];
              v1207 += 3;
              *(v335 - 2) = v1208;
              *(v335 - 1) = v1207;
              *v1207 = (uint64_t)(v335 - 2);
              v1208[1] = (uint64_t)(v335 - 2);
            }
          }
          *v335 = v336;
        }
        else
        {
          v335 = 0;
        }
        *(_QWORD *)&v1239 = "WasmFunctionParser.h:";
        DWORD2(v1239) = 21;
        LODWORD(v1235) = 1223;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1239, (unsigned int *)&v1235, (int **)&v1238);
        v619 = v1238;
        if (!v1238)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAEA4);
        }
        v1238 = 0;
        if (*(_DWORD *)v619 == 2)
        {
          WTF::StringImpl::~StringImpl(v619, v612, v613, v614, v615, v616, v617, v618);
          WTF::fastFree(v874, v875, v876, v877, v878, v879, v880, v881);
          if (!v335)
            goto LABEL_402;
        }
        else
        {
          *(_DWORD *)v619 -= 2;
          if (!v335)
            goto LABEL_402;
        }
        v882 = v335 - 2;
        v883 = *(_QWORD *)(((unint64_t)(v335 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v884 = (uint64_t **)*(v335 - 1);
        if (v884)
        {
          v885 = *v882;
          *v884 = *v882;
          v885[1] = (uint64_t)v884;
          *v882 = 0;
          *(v335 - 1) = 0;
        }
        *v882 = *(uint64_t **)(v883 + 40);
        *(_QWORD *)(v883 + 40) = v882;
LABEL_402:
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_691;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1239, a2 + 56, v613, v614, v615, v616, v617, v618);
        v1262 = v1239;
        v1263 = v1240;
        v1264 = v1241;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, &v1242, v620, v621, v622, v623, v624, v625);
        if (v1242)
        {
          v1129 = v1242 - 2;
          v1130 = *(_QWORD *)(((unint64_t)(v1242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1131 = (uint64_t *)*(v1242 - 1);
          if (v1131)
          {
            v1132 = *v1129;
            *v1131 = *v1129;
            *(_QWORD *)(v1132 + 8) = v1131;
            *v1129 = 0;
            v1129[1] = 0;
          }
          *v1129 = *(_QWORD *)(v1130 + 40);
          *(_QWORD *)(v1130 + 40) = v1129;
        }
        if (v1265)
        {
          v633 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v634 = *(_QWORD **)(v633 + 40);
          if (!v634)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v626, v627, v628, v629, v630, v631, v632);
            v634 = *(_QWORD **)(v633 + 40);
          }
          *(_QWORD *)(v633 + 40) = *v634;
          v634[2] = 0;
          v635 = (uint64_t **)(v634 + 2);
          *v634 = 0;
          v634[1] = 0;
          v636 = v1265;
          if (v1265)
          {
            v636 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1209 = *(uint64_t **)(((unint64_t)(v635 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1210 = (uint64_t *)v1209[3];
              v1209 += 3;
              *(v635 - 2) = v1210;
              *(v635 - 1) = v1209;
              *v1209 = (uint64_t)(v635 - 2);
              v1210[1] = (uint64_t)(v635 - 2);
            }
          }
          *v635 = v636;
        }
        else
        {
          v635 = 0;
        }
        *(_QWORD *)&v1239 = "WasmFunctionParser.h:";
        DWORD2(v1239) = 21;
        LODWORD(v1235) = 1224;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1239, (unsigned int *)&v1235, (int **)&v1237);
        v644 = v1237;
        if (!v1237)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAEACLL);
        }
        v1237 = 0;
        if (*(_DWORD *)v644 == 2)
        {
          WTF::StringImpl::~StringImpl(v644, v637, v638, v639, v640, v641, v642, v643);
          WTF::fastFree(v886, v887, v888, v889, v890, v891, v892, v893);
          if (!v635)
            goto LABEL_415;
        }
        else
        {
          *(_DWORD *)v644 -= 2;
          if (!v635)
            goto LABEL_415;
        }
        v894 = v635 - 2;
        v895 = *(_QWORD *)(((unint64_t)(v635 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v896 = (uint64_t **)*(v635 - 1);
        if (v896)
        {
          v897 = *v894;
          *v896 = *v894;
          v897[1] = (uint64_t)v896;
          *v894 = 0;
          *(v635 - 1) = 0;
        }
        *v894 = *(uint64_t **)(v895 + 40);
        *(_QWORD *)(v895 + 40) = v894;
LABEL_415:
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_691;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1239, a2 + 56, v638, v639, v640, v641, v642, v643);
        v1266 = v1239;
        v1267 = v1240;
        v1268 = v1241;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, &v1242, v645, v646, v647, v648, v649, v650);
        if (v1242)
        {
          v1141 = v1242 - 2;
          v1142 = *(_QWORD *)(((unint64_t)(v1242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1143 = (uint64_t *)*(v1242 - 1);
          if (v1143)
          {
            v1144 = *v1141;
            *v1143 = *v1141;
            *(_QWORD *)(v1144 + 8) = v1143;
            *v1141 = 0;
            v1141[1] = 0;
          }
          *v1141 = *(_QWORD *)(v1142 + 40);
          *(_QWORD *)(v1142 + 40) = v1141;
        }
        if (v1269)
        {
          v658 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v659 = *(_QWORD **)(v658 + 40);
          if (!v659)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v651, v652, v653, v654, v655, v656, v657);
            v659 = *(_QWORD **)(v658 + 40);
          }
          *(_QWORD *)(v658 + 40) = *v659;
          v659[2] = 0;
          v660 = v659 + 2;
          *v659 = 0;
          v659[1] = 0;
          v661 = v1269;
          if (v1269)
          {
            v661 = (_QWORD *)*v1269;
            if (*v1269)
            {
              v1215 = *(_QWORD **)(((unint64_t)(v660 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1216 = v1215[3];
              v1215 += 3;
              *(v660 - 2) = v1216;
              *(v660 - 1) = v1215;
              *v1215 = v660 - 2;
              *(_QWORD *)(v1216 + 8) = v660 - 2;
            }
          }
          *v660 = v661;
        }
        else
        {
          v660 = 0;
        }
        *(_QWORD *)&v1239 = "WasmFunctionParser.h:";
        DWORD2(v1239) = 21;
        LODWORD(v1235) = 1225;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1239, (unsigned int *)&v1235, (int **)&v1236);
        v662 = v1236;
        if (!v1236)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAEB4);
        }
        v1236 = 0;
        if (*(_DWORD *)v662 == 2)
        {
          WTF::StringImpl::~StringImpl(v662, v542, v543, v544, v545, v546, v547, v548);
          WTF::fastFree(v910, v911, v912, v913, v914, v915, v916, v917);
          if (!v660)
            goto LABEL_428;
        }
        else
        {
          *(_DWORD *)v662 -= 2;
          if (!v660)
            goto LABEL_428;
        }
        v918 = v660 - 2;
        v919 = *(_QWORD *)(((unint64_t)(v660 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v920 = (uint64_t *)*(v660 - 1);
        if (v920)
        {
          v921 = *v918;
          *v920 = *v918;
          *(_QWORD *)(v921 + 8) = v920;
          *v918 = 0;
          *(v660 - 1) = 0;
        }
        *v918 = *(_QWORD *)(v919 + 40);
        *(_QWORD *)(v919 + 40) = v918;
LABEL_428:
        if (v1266 != 251 || *((_QWORD *)&v1266 + 1))
          goto LABEL_697;
        if (v1262 != 251 || *((_QWORD *)&v1262 + 1))
          goto LABEL_696;
        if (v1257 == 251 && !*((_QWORD *)&v1257 + 1))
          goto LABEL_434;
        goto LABEL_695;
      case 79:
      case 80:
        v1266 = JSC::Wasm::Types::Void;
        LOBYTE(v1267) = 1;
        *((_QWORD *)&v1267 + 1) = 0;
        v1269 = 0;
        v1262 = JSC::Wasm::Types::Void;
        LOBYTE(v1263) = 1;
        *((_QWORD *)&v1263 + 1) = 0;
        v1265 = 0;
        v1257 = JSC::Wasm::Types::Void;
        LOBYTE(v1258) = 1;
        *((_QWORD *)&v1258 + 1) = 0;
        v1260[0] = 0;
        if (!*(_DWORD *)(a2 + 68))
        {
LABEL_694:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "vector argument", 16, &v1239, *(float *)a10.i32);
          *(_QWORD *)a1 = v1239;
          *(_BYTE *)(a1 + 8) = 1;
LABEL_463:
          if (v1260[0])
          {
            v681 = v1260[0] - 2;
            v682 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v683 = (uint64_t *)*(v1260[0] - 1);
            if (v683)
            {
              v684 = *v681;
              *v683 = *v681;
              *(_QWORD *)(v684 + 8) = v683;
              *v681 = 0;
              v681[1] = 0;
            }
            *v681 = *(_QWORD *)(v682 + 40);
            *(_QWORD *)(v682 + 40) = v681;
          }
          goto LABEL_644;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1239, a2 + 56, a3, a3, a5, a6, a7, a8);
        v1257 = v1239;
        v1258 = v1240;
        v1259 = v1241;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(v1260, &v1242, v177, v178, v179, v180, v181, v182);
        if (v1242)
        {
          v1079 = v1242 - 2;
          v1080 = *(_QWORD *)(((unint64_t)(v1242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1081 = (uint64_t *)*(v1242 - 1);
          if (v1081)
          {
            v1082 = *v1079;
            *v1081 = *v1079;
            *(_QWORD *)(v1082 + 8) = v1081;
            *v1079 = 0;
            v1079[1] = 0;
          }
          *v1079 = *(_QWORD *)(v1080 + 40);
          *(_QWORD *)(v1080 + 40) = v1079;
        }
        if (v1260[0])
        {
          v190 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v191 = *(_QWORD **)(v190 + 40);
          if (!v191)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v183, v184, v185, v186, v187, v188, v189);
            v191 = *(_QWORD **)(v190 + 40);
          }
          *(_QWORD *)(v190 + 40) = *v191;
          v191[2] = 0;
          v192 = (uint64_t **)(v191 + 2);
          *v191 = 0;
          v191[1] = 0;
          v193 = v1260[0];
          if (v1260[0])
          {
            v193 = (uint64_t *)*v1260[0];
            if (*v1260[0])
            {
              v1185 = *(uint64_t **)(((unint64_t)(v192 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1186 = (uint64_t *)v1185[3];
              v1185 += 3;
              *(v192 - 2) = v1186;
              *(v192 - 1) = v1185;
              *v1185 = (uint64_t)(v192 - 2);
              v1186[1] = (uint64_t)(v192 - 2);
            }
          }
          *v192 = v193;
        }
        else
        {
          v192 = 0;
        }
        *(_QWORD *)&v1239 = "WasmFunctionParser.h:";
        DWORD2(v1239) = 21;
        LODWORD(v1235) = 1325;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1239, (unsigned int *)&v1235, (int **)&v1228);
        v400 = v1228;
        if (!v1228)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE4CLL);
        }
        v1228 = 0;
        if (*(_DWORD *)v400 == 2)
        {
          WTF::StringImpl::~StringImpl(v400, v392, v393, v394, v395, v396, v397, v398);
          WTF::fastFree(v685, v686, v687, v688, v689, v690, v691, v692);
          if (!v192)
            goto LABEL_253;
        }
        else
        {
          *(_DWORD *)v400 -= 2;
          if (!v192)
            goto LABEL_253;
        }
        v693 = v192 - 2;
        v694 = *(_QWORD *)(((unint64_t)(v192 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v695 = (uint64_t **)*(v192 - 1);
        if (v695)
        {
          v696 = *v693;
          *v695 = *v693;
          v696[1] = (uint64_t)v695;
          *v693 = 0;
          *(v192 - 1) = 0;
        }
        *v693 = *(uint64_t **)(v694 + 40);
        *(_QWORD *)(v694 + 40) = v693;
LABEL_253:
        if (!*(_DWORD *)(a2 + 68))
          goto LABEL_691;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1239, a2 + 56, v393, v394, v395, v396, v397, v398);
        v1262 = v1239;
        v1263 = v1240;
        v1264 = v1241;
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1265, &v1242, v401, v402, v403, v404, v405, v406);
        if (v1242)
        {
          v1095 = v1242 - 2;
          v1096 = *(_QWORD *)(((unint64_t)(v1242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v1097 = (uint64_t *)*(v1242 - 1);
          if (v1097)
          {
            v1098 = *v1095;
            *v1097 = *v1095;
            *(_QWORD *)(v1098 + 8) = v1097;
            *v1095 = 0;
            v1095[1] = 0;
          }
          *v1095 = *(_QWORD *)(v1096 + 40);
          *(_QWORD *)(v1096 + 40) = v1095;
        }
        if (v1265)
        {
          v414 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v415 = *(_QWORD **)(v414 + 40);
          if (!v415)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v407, v408, v409, v410, v411, v412, v413);
            v415 = *(_QWORD **)(v414 + 40);
          }
          *(_QWORD *)(v414 + 40) = *v415;
          v415[2] = 0;
          v416 = (uint64_t **)(v415 + 2);
          *v415 = 0;
          v415[1] = 0;
          v417 = v1265;
          if (v1265)
          {
            v417 = (uint64_t *)*v1265;
            if (*v1265)
            {
              v1193 = *(uint64_t **)(((unint64_t)(v416 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1194 = (uint64_t *)v1193[3];
              v1193 += 3;
              *(v416 - 2) = v1194;
              *(v416 - 1) = v1193;
              *v1193 = (uint64_t)(v416 - 2);
              v1194[1] = (uint64_t)(v416 - 2);
            }
          }
          *v416 = v417;
        }
        else
        {
          v416 = 0;
        }
        *(_QWORD *)&v1239 = "WasmFunctionParser.h:";
        DWORD2(v1239) = 21;
        LODWORD(v1235) = 1326;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1239, (unsigned int *)&v1235, (int **)&v1227);
        v499 = v1227;
        if (!v1227)
        {
          __break(0xC471u);
          JUMPOUT(0x198CCAE6CLL);
        }
        v1227 = 0;
        if (*(_DWORD *)v499 == 2)
        {
          WTF::StringImpl::~StringImpl(v499, v492, v493, v494, v495, v496, v497, v498);
          WTF::fastFree(v733, v734, v735, v736, v737, v738, v739, v740);
          if (!v416)
            goto LABEL_305;
        }
        else
        {
          *(_DWORD *)v499 -= 2;
          if (!v416)
            goto LABEL_305;
        }
        v741 = v416 - 2;
        v742 = *(_QWORD *)(((unint64_t)(v416 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v743 = (uint64_t **)*(v416 - 1);
        if (v743)
        {
          v744 = *v741;
          *v743 = *v741;
          v744[1] = (uint64_t)v743;
          *v741 = 0;
          *(v416 - 1) = 0;
        }
        *v741 = *(uint64_t **)(v742 + 40);
        *(_QWORD *)(v742 + 40) = v741;
LABEL_305:
        if (*(_DWORD *)(a2 + 68))
        {
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v1239, a2 + 56, v493, v494, v495, v496, v497, v498);
          v1266 = v1239;
          v1267 = v1240;
          v1268 = v1241;
          JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v1269, &v1242, v500, v501, v502, v503, v504, v505);
          if (v1242)
          {
            v1111 = v1242 - 2;
            v1112 = *(_QWORD *)(((unint64_t)(v1242 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v1113 = (uint64_t *)*(v1242 - 1);
            if (v1113)
            {
              v1114 = *v1111;
              *v1113 = *v1111;
              *(_QWORD *)(v1114 + 8) = v1113;
              *v1111 = 0;
              v1111[1] = 0;
            }
            *v1111 = *(_QWORD *)(v1112 + 40);
            *(_QWORD *)(v1112 + 40) = v1111;
          }
          if (v1269)
          {
            v513 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v514 = *(_QWORD **)(v513 + 40);
            if (!v514)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), v506, v507, v508, v509, v510, v511, v512);
              v514 = *(_QWORD **)(v513 + 40);
            }
            *(_QWORD *)(v513 + 40) = *v514;
            v514[2] = 0;
            v515 = v514 + 2;
            *v514 = 0;
            v514[1] = 0;
            v516 = v1269;
            if (v1269)
            {
              v516 = (_QWORD *)*v1269;
              if (*v1269)
              {
                v1201 = *(_QWORD **)(((unint64_t)(v515 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v1202 = v1201[3];
                v1201 += 3;
                *(v515 - 2) = v1202;
                *(v515 - 1) = v1201;
                *v1201 = v515 - 2;
                *(_QWORD *)(v1202 + 8) = v515 - 2;
              }
            }
            *v515 = v516;
          }
          else
          {
            v515 = 0;
          }
          *(_QWORD *)&v1239 = "WasmFunctionParser.h:";
          DWORD2(v1239) = 21;
          LODWORD(v1235) = 1327;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1239, (unsigned int *)&v1235, (int **)&v1226);
          v551 = v1226;
          if (!v1226)
          {
            __break(0xC471u);
            JUMPOUT(0x198CCAE8CLL);
          }
          v1226 = 0;
          if (*(_DWORD *)v551 == 2)
          {
            WTF::StringImpl::~StringImpl(v551, v542, v543, v544, v545, v546, v547, v548);
            WTF::fastFree(v769, v770, v771, v772, v773, v774, v775, v776);
            if (!v515)
              goto LABEL_358;
          }
          else
          {
            *(_DWORD *)v551 -= 2;
            if (!v515)
              goto LABEL_358;
          }
          v777 = v515 - 2;
          v778 = *(_QWORD *)(((unint64_t)(v515 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v779 = (uint64_t *)*(v515 - 1);
          if (v779)
          {
            v780 = *v777;
            *v779 = *v777;
            *(_QWORD *)(v780 + 8) = v779;
            *v777 = 0;
            *(v515 - 1) = 0;
          }
          *v777 = *(_QWORD *)(v778 + 40);
          *(_QWORD *)(v778 + 40) = v777;
LABEL_358:
          if (v1266 != 251 || *((_QWORD *)&v1266 + 1))
          {
LABEL_695:
            v1050 = "type mismatch for argument 0";
          }
          else
          {
            if (v1262 == 251 && !*((_QWORD *)&v1262 + 1))
            {
              if (v1257 != 251 || *((_QWORD *)&v1257 + 1))
              {
LABEL_697:
                v1050 = "type mismatch for argument 2";
                goto LABEL_698;
              }
LABEL_434:
              v663 = *(_QWORD *)(a2 + 48);
              if (v1269)
              {
                v664 = *(_QWORD *)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v665 = *(_QWORD **)(v664 + 40);
                if (!v665)
                {
                  JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1269 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v542, v543, v544, v545, v546, v547, v548);
                  v665 = *(_QWORD **)(v664 + 40);
                }
                *(_QWORD *)(v664 + 40) = *v665;
                v665[2] = 0;
                v666 = v665 + 2;
                *v665 = 0;
                v665[1] = 0;
                v667 = v1269;
                if (v1269)
                {
                  v667 = (_QWORD *)*v1269;
                  if (*v1269)
                  {
                    v1179 = *(_QWORD **)(((unint64_t)(v666 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v1180 = v1179[3];
                    v1179 += 3;
                    *(v666 - 2) = v1180;
                    *(v666 - 1) = v1179;
                    *v1179 = v666 - 2;
                    *(_QWORD *)(v1180 + 8) = v666 - 2;
                  }
                }
                *v666 = v667;
              }
              else
              {
                v666 = 0;
              }
              if (v1265)
              {
                v668 = *(_QWORD *)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v669 = *(_QWORD **)(v668 + 40);
                if (!v669)
                {
                  JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1265 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v542, v543, v544, v545, v546, v547, v548);
                  v669 = *(_QWORD **)(v668 + 40);
                }
                *(_QWORD *)(v668 + 40) = *v669;
                v669[2] = 0;
                v670 = (uint64_t **)(v669 + 2);
                *v669 = 0;
                v669[1] = 0;
                v671 = v1265;
                if (v1265)
                {
                  v671 = (uint64_t *)*v1265;
                  if (*v1265)
                  {
                    v1181 = *(uint64_t **)(((unint64_t)(v670 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v1182 = (uint64_t *)v1181[3];
                    v1181 += 3;
                    *(v670 - 2) = v1182;
                    *(v670 - 1) = v1181;
                    *v1181 = (uint64_t)(v670 - 2);
                    v1182[1] = (uint64_t)(v670 - 2);
                  }
                }
                *v670 = v671;
              }
              else
              {
                v670 = 0;
              }
              if (v1260[0])
              {
                v672 = *(_QWORD *)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v673 = *(_QWORD **)(v672 + 40);
                if (!v673)
                {
                  JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v1260[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v542, v543, v544, v545, v546, v547, v548);
                  v673 = *(_QWORD **)(v672 + 40);
                }
                *(_QWORD *)(v672 + 40) = *v673;
                v673[2] = 0;
                v674 = (uint64_t **)(v673 + 2);
                *v673 = 0;
                v673[1] = 0;
                v675 = v1260[0];
                if (v1260[0])
                {
                  v675 = (uint64_t *)*v1260[0];
                  if (*v1260[0])
                  {
                    v1183 = *(uint64_t **)(((unint64_t)(v674 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v1184 = (uint64_t *)v1183[3];
                    v1183 += 3;
                    *(v674 - 2) = v1184;
                    *(v674 - 1) = v1183;
                    *v1183 = (uint64_t)(v674 - 2);
                    v1184[1] = (uint64_t)(v674 - 2);
                  }
                }
                *v674 = v675;
                JSC::Wasm::ConstExprGenerator::fail<char const*>(&v1239, **(_QWORD **)v663, *(_QWORD *)(v663 + 16));
                v676 = (void (**)(WTF::StringPrintStream *__hidden))v1239;
                v677 = v674 - 2;
                v678 = *(_QWORD *)(((unint64_t)(v674 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v679 = (uint64_t **)*(v674 - 1);
                if (v679)
                {
                  v680 = *v677;
                  *v679 = *v677;
                  v680[1] = (uint64_t)v679;
                  *v677 = 0;
                  *(v674 - 1) = 0;
                }
                *v677 = *(uint64_t **)(v678 + 40);
                *(_QWORD *)(v678 + 40) = v677;
              }
              else
              {
                JSC::Wasm::ConstExprGenerator::fail<char const*>(&v1239, **(_QWORD **)v663, *(_QWORD *)(v663 + 16));
                v676 = (void (**)(WTF::StringPrintStream *__hidden))v1239;
              }
              if (v670)
              {
                v1071 = v670 - 2;
                v1072 = *(_QWORD *)(((unint64_t)(v670 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v1073 = (uint64_t **)*(v670 - 1);
                if (v1073)
                {
                  v1074 = *v1071;
                  *v1073 = *v1071;
                  v1074[1] = (uint64_t)v1073;
                  *v1071 = 0;
                  *(v670 - 1) = 0;
                }
                *v1071 = *(uint64_t **)(v1072 + 40);
                *(_QWORD *)(v1072 + 40) = v1071;
                if (!v666)
                  goto LABEL_462;
              }
              else if (!v666)
              {
LABEL_462:
                *(_QWORD *)a1 = v676;
                *(_BYTE *)(a1 + 8) = 1;
                goto LABEL_463;
              }
              v1075 = v666 - 2;
              v1076 = *(_QWORD *)(((unint64_t)(v666 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v1077 = (uint64_t *)*(v666 - 1);
              if (v1077)
              {
                v1078 = *v1075;
                *v1077 = *v1075;
                *(_QWORD *)(v1078 + 8) = v1077;
                *v1075 = 0;
                *(v666 - 1) = 0;
              }
              *v1075 = *(_QWORD *)(v1076 + 40);
              *(_QWORD *)(v1076 + 40) = v1075;
              goto LABEL_462;
            }
LABEL_696:
            v1050 = "type mismatch for argument 1";
          }
LABEL_698:
          *(_QWORD *)&v1239 = v1050;
          *((_QWORD *)&v1239 + 1) = 29;
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v1235, (uint64_t)&v1239, v549, v550);
          v676 = v1235;
          goto LABEL_462;
        }
LABEL_691:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "vector argument", 16, &v1239, v399);
        v676 = (void (**)(WTF::StringPrintStream *__hidden))v1239;
        goto LABEL_462;
      default:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", (unint64_t *)a2, 17, a3, &v1266, *(float *)a10.i32);
        goto LABEL_205;
    }
  }
  v297 = "relaxed simd instructions not supported";
  v298 = (unint64_t *)a2;
  v299 = 40;
LABEL_181:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v297, v298, v299, &v1266, *(float *)a10.i32);
LABEL_205:
  *(_QWORD *)a1 = v1266;
  *(_BYTE *)(a1 + 8) = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3)
{
  char *String;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  float v21;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  WTF::PrintStream *v35;
  float v36;
  double v37;
  const WTF::String *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  const WTF::String *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  float v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int v81;
  char v82;
  void (**v83)(WTF::StringPrintStream *__hidden);
  WTF *v84;
  __int128 v85;
  _BYTE v86[128];
  void (**v87)(WTF::StringPrintStream *__hidden);
  WTF *v88;
  __int128 v89;
  _BYTE v90[128];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v83 = off_1E3572250;
  v84 = (WTF *)v86;
  v85 = xmmword_199122F80;
  v86[0] = 0;
  v87 = off_1E3572250;
  v88 = (WTF *)v90;
  v89 = xmmword_199122F80;
  v90[0] = 0;
  String = (char *)JSC::Wasm::makeString();
  v7 = v6;
  v8 = ((uint64_t (*)(_QWORD))v87[4])(&v87);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  if (String)
  {
    v11 = v7 - 1;
    if (!v7)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v11, (uint64_t)&v80, v10);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v80 = (WTF::StringImpl *)v12;
    v81 = 0;
  }
  WTF::printExpectedCStringHelper(v9, "StringView", &v80);
  if (v81 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v81])(&v79, &v80);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v87[5]((WTF::StringPrintStream *)&v87);
  v87[5]((WTF::StringPrintStream *)&v87);
  v20 = v88;
  if (!v88)
  {
    v79 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v88, v89, (uint64_t *)&v79);
  v20 = v88;
  if (v88 != (WTF *)v90)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  v87 = off_1E3572250;
  v88 = (WTF *)v90;
  v89 = xmmword_199122F80;
  v90[0] = 0;
  if (*(_QWORD *)a3)
  {
    v22 = *(_QWORD *)(a3 + 8);
    v23 = v22 != 0;
    v24 = v22 - 1;
    if (!v23)
      v24 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v24, (uint64_t)&v80, v21);
  }
  else
  {
    v25 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = 0;
    *(_BYTE *)(v25 + 16) = 0;
    v80 = (WTF::StringImpl *)v25;
    v81 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v87, "StringView", &v80);
  if (v81 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v81])(&v82, &v80);
  v87[5]((WTF::StringPrintStream *)&v87);
  v87[5]((WTF::StringPrintStream *)&v87);
  v33 = v88;
  if (!v88)
  {
    v80 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v88, v89, (uint64_t *)&v80);
  v33 = v88;
  if (v88 != (WTF *)v90)
LABEL_24:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  v34 = (WTF *)((uint64_t (*)(_QWORD))v83[4])(&v83);
  v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v34 + 32))(v34);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v87, v36);
  WTF::printExpectedCStringHelper(v35, "StringView", &v87);
  if ((_DWORD)v88 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v88])(&v82, &v87);
  v37 = (*(double (**)(WTF *))(*(_QWORD *)v34 + 40))(v34);
  WTF::printInternal(v34, (WTF::PrintStream *)&v79, v38, v39, v40, v41, v42, v43, v37, v44);
  WTF::printInternal(v34, (WTF::PrintStream *)&v80, v45, v46, v47, v48, v49, v50, v51, v52);
  v83[5]((WTF::StringPrintStream *)&v83);
  v60 = v80;
  v80 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v79;
  v79 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = v84;
  if (v84)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v84, v85, (uint64_t *)&v87);
    v62 = v84;
    *a1 = v87;
    if (v62 == (WTF *)v86)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v62, v53, v54, v55, v56, v57, v58, v59);
}

void JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6, float a7)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  WTF *v57;
  __int128 v58;
  _BYTE v59[128];
  uint64_t v60;

  v10 = 0;
  v60 = *MEMORY[0x1E0C80C00];
  v11 = a3 + a2;
  do
  {
    v12 = (v11 % 0xA) | 0x30;
    v59[v10-- - 8] = v12;
    v13 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v13);
  if (v10 + 26 >= 27)
    __break(1u);
  if (v10)
  {
    if ((unint64_t)-v10 >> 31)
    {
      __break(0xC471u);
LABEL_35:
      JUMPOUT(0x198CCB708);
    }
    v14 = WTF::fastCompactMalloc((WTF *)(20 - v10));
    v15 = (_BYTE *)(v14 + 20);
    *(_DWORD *)v14 = 2;
    *(_DWORD *)(v14 + 4) = -(int)v10;
    *(_QWORD *)(v14 + 8) = v14 + 20;
    *(_DWORD *)(v14 + 16) = 4;
    v52 = (WTF::StringImpl *)v14;
    if (v10 == -1)
      *v15 = v12;
    else
      memcpy(v15, &v59[v10 - 7], -v10);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v52 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v56 = (const char *)off_1E3572250;
  v57 = (WTF *)v59;
  v58 = xmmword_199122F80;
  v59[0] = 0;
  if (a4)
  {
    v16 = a5 - 1;
    if (!a5)
      v16 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v16, (uint64_t)&v54, a7);
  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 0;
    v54 = (const char *)v17;
    LODWORD(v55) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v56, "StringView", &v54);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v55])(&v53, &v54);
  (*((void (**)(const char **))v56 + 5))(&v56);
  (*((void (**)(const char **))v56 + 5))(&v56);
  v25 = v57;
  if (!v57)
  {
    v51 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v57, v58, (uint64_t *)&v51);
  v25 = v57;
  if (v57 != (WTF *)v59)
LABEL_21:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v56 = "WebAssembly.Module doesn't parse at byte ";
  v57 = (WTF *)42;
  v54 = ": ";
  v55 = 3;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)&v56, (uint64_t *)&v52, (uint64_t)&v54, (uint64_t *)&v51, &v53);
  if (!v53)
  {
    __break(0xC471u);
    goto LABEL_35;
  }
  *a1 = v53;
  v53 = 0;
  v33 = v51;
  v51 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  v34 = v52;
  v52 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
}

unint64_t JSC::Wasm::ConstExprGenerator::createNewArray(uint64_t a1, JSC::Wasm *a2, void *a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  JSC::HandleSet *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  JSC::HandleSet *v37;

  v9 = *((_QWORD *)a2 + 1);
  v10 = *a5;
  if (v10 == 1)
  {
    v19 = a5 + 8;
LABEL_6:
    v19 = (_QWORD *)*v19;
    goto LABEL_7;
  }
  if (v10 == 2)
  {
    result = JSC::Wasm::arrayNew(a2, a3, a4, *((_QWORD *)a5 + 1), *((const JSC::Wasm::Type **)a5 + 2), a6, a7, a8);
    goto LABEL_8;
  }
  v19 = (_QWORD *)*((_QWORD *)a5 + 3);
  if (v19)
    goto LABEL_6;
LABEL_7:
  result = JSC::Wasm::arrayNew(a2, (JSC::Wasm::Instance *)a3, a4, (uint64_t)v19, (const JSC::Wasm::Type *)a5, a6, a7, a8);
LABEL_8:
  if (result)
  {
    if ((result & 0xFFFE000000000002) != 0)
    {
      v20 = 0;
    }
    else if (*(unsigned __int8 *)(result + 5) <= 0x16u)
    {
      v20 = 0;
    }
    else
    {
      v20 = result;
    }
    v21 = *(_QWORD *)(v9 + 712);
    if (!v21)
    {
      v36 = v20;
      result = (unint64_t)JSC::HandleSet::grow((JSC::HandleSet *)(v9 + 672), v12, v13, v14, v15, v16, v17, v18);
      v20 = v36;
      v21 = *(_QWORD *)(v9 + 712);
    }
    *(_QWORD *)(v9 + 712) = *(_QWORD *)v21;
    *(_QWORD *)(v21 + 16) = 0;
    v22 = (unint64_t *)(v21 + 16);
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    v23 = v21 & 0xFFFFFFFFFFFFF000;
    if (v20)
    {
      v24 = *(unint64_t **)((v21 & 0xFFFFFFFFFFFFF000) + 0x10);
      v25 = v24[3];
      v24 += 3;
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *v24 = v21;
      *(_QWORD *)(v25 + 8) = v21;
    }
    *v22 = v20;
    *(_BYTE *)a1 = 3;
    v26 = *(JSC::HandleSet **)((v21 & 0xFFFFFFFFFFFFF000) + 0x10);
    v27 = *((_QWORD *)v26 + 5);
    if (!v27)
    {
      v35 = (_QWORD *)v21;
      v37 = *(JSC::HandleSet **)((v21 & 0xFFFFFFFFFFFFF000) + 0x10);
      v34 = (unint64_t *)(v21 + 16);
      result = (unint64_t)JSC::HandleSet::grow(v26, v12, v13, v14, v15, v16, v17, v18);
      v22 = v34;
      v21 = (unint64_t)v35;
      v26 = v37;
      v27 = *((_QWORD *)v37 + 5);
    }
    *((_QWORD *)v26 + 5) = *(_QWORD *)v27;
    *(_QWORD *)(v27 + 16) = 0;
    *(_QWORD *)v27 = 0;
    *(_QWORD *)(v27 + 8) = 0;
    *(_QWORD *)(a1 + 24) = v27 + 16;
    v28 = *v22;
    if (v28)
    {
      v29 = *(unint64_t **)((v27 & 0xFFFFFFFFFFFFF000) + 0x10);
      v30 = v29[3];
      v29 += 3;
      *(_QWORD *)v27 = v30;
      *(_QWORD *)(v27 + 8) = v29;
      *v29 = v27;
      *(_QWORD *)(v30 + 8) = v27;
    }
    *(_QWORD *)(v27 + 16) = v28;
    v31 = *(_QWORD *)(v23 + 16);
    v32 = *(_QWORD **)(v21 + 8);
    if (v32)
    {
      v33 = *(_QWORD *)v21;
      *v32 = *(_QWORD *)v21;
      *(_QWORD *)(v33 + 8) = v32;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
    }
    *(_QWORD *)v21 = *(_QWORD *)(v31 + 40);
    *(_QWORD *)(v31 + 40) = v21;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

unint64_t JSC::Wasm::arrayNew(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  JSC *v15;
  uint64_t v16;
  JSC::Wasm::TypeDefinition *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t (*v39)(_QWORD *);
  _QWORD *v40;
  uint64_t v41;
  unsigned int *v42;
  WTF *v43;
  unint64_t CachedUnrolling;
  const JSC::Wasm::TypeDefinition *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::Wasm::TypeInformation *v51[2];
  JSC::Wasm::TypeInformation *v52[2];
  JSC::Wasm::TypeInformation *v53;
  WTF *v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  int v58;
  WTF *v59;
  _QWORD v60[3];
  uint64_t v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1[7] + 8);
  if (*(_DWORD *)(v8 + 100) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198CCBC6CLL);
  }
  v11 = a3;
  v12 = a2;
  v14 = a1[4];
  v15 = (JSC *)a1[1];
  v16 = a2;
  v17 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v8 + 88) + 8 * a2);
  if (*((_DWORD *)v17 + 8) == 4)
  {
    v53 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v8 + 88) + 8 * a2);
    v42 = (unsigned int *)*((_QWORD *)v17 + 1);
    v43 = *(WTF **)v42;
    v17 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v42 + 8) + 8 * v42[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v17))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v53, (unint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v17 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v17 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v17, v43, a3, a4, a5, a6, a7, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v53, v17, v45, v46, v47, v48, v49, v50);
      }
    }
  }
  if (*((_DWORD *)v17 + 8) == 5)
    v17 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v17 + 1);
  v18 = *((_QWORD *)v17 + 1);
  v19 = *(_OWORD *)v18;
  v20 = *(_DWORD *)(v18 + 16);
  v61 = *(_QWORD *)(v18 + 20);
  v62 = *(_DWORD *)(v18 + 28);
  v21 = *(_QWORD *)(a1[7] + 8);
  if (*(_DWORD *)(v21 + 284) <= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198CCBC74);
  }
  v22 = *(unsigned int **)(*(_QWORD *)(v21 + 272) + 8 * v16);
  if (v22)
  {
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  if (v20)
  {
    if (v19 == 248)
    {
      v24 = 1;
    }
    else
    {
      if (v19 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198CCBC44);
      }
      v24 = 2;
    }
  }
  else
  {
    v24 = 4;
    switch((char)v19)
    {
      case -5:
        v24 = 16;
        break;
      case -4:
      case -2:
        v24 = 8;
        break;
      case -3:
      case -1:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198CCBC64);
    }
  }
  if (v24 * (unint64_t)v11 > 0x40000000)
  {
    v31 = 2;
    if (!v22)
      return v31;
    goto LABEL_34;
  }
  v25 = v11;
  if (v11)
  {
    *(_OWORD *)v51 = v19;
    v26 = WTF::fastMalloc((WTF *)((16 * v11) | 8));
    *(_DWORD *)v26 = v11;
    v27 = (uint64_t *)(v26 + 8);
    bzero((void *)(v26 + 8), 16 * v25);
    v19 = *(_OWORD *)v51;
    v59 = (WTF *)v26;
    v28 = v25 + 1;
    do
    {
      *v27 = a4;
      v27[1] = (uint64_t)a5;
      v27 += 2;
      --v28;
    }
    while (v28 > 1);
  }
  else
  {
    v59 = 0;
  }
  v29 = *(_QWORD *)(v14 + 1280);
  if ((v29 & 1) != 0)
  {
    v39 = *(uint64_t (**)(_QWORD *))(v29 & 0xFFFFFFFFFFFFFFFCLL);
    v40 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v14 & 8) != 0)
      v40 = (_QWORD *)(v14 - 16);
    v60[0] = *v40;
    v60[1] = v14;
    v60[2] = v14 + 1280;
    *(_OWORD *)v52 = v19;
    v41 = v39(v60);
    v19 = *(_OWORD *)v52;
    v29 = v41;
  }
  v55 = v19;
  v56 = v20;
  v57 = v61;
  v58 = v62;
  if (v22)
  {
    do
      v30 = __ldaxr(v22);
    while (__stlxr(v30 + 1, v22));
  }
  v54 = (WTF *)v22;
  v31 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v15, (JSC::VM *)v29, &v55, v25, (uint64_t *)&v59, (unsigned int **)&v54, a7, a8);
  v32 = (unsigned int *)v54;
  v54 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      WTF::fastFree((unint64_t)v32, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
  }
  if (!v31)
    v31 = 2;
  v35 = v59;
  v59 = 0;
  if (v35)
    WTF::fastFree((unint64_t)v35, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (v22)
  {
    do
    {
LABEL_34:
      v36 = __ldaxr(v22);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v22));
    if (!v37)
    {
      atomic_store(1u, v22);
      WTF::fastFree((unint64_t)v22, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
  }
  return v31;
}

unint64_t JSC::Wasm::arrayNew(JSC::Wasm *this, JSC::Wasm::Instance *a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  JSC::Wasm::TypeDefinition *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 hasRecursiveReference;
  _BOOL4 v39;
  unint64_t CachedUnrolling;
  uint64_t v41;
  uint64_t v42;
  const JSC::Wasm::TypeDefinition *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::Wasm::TypeInformation *v49;
  uint64_t v50;
  JSC::Wasm *v51;
  unsigned int *v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int *v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int *v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*(_DWORD *)(v8 + 100) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198CCC0D8);
  }
  v9 = a2;
  v10 = a2;
  v11 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v8 + 88) + 8 * a2);
  if (*((_DWORD *)v11 + 8) == 4)
  {
    v49 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v8 + 88) + 8 * a2);
    v50 = a2;
    v34 = (unsigned int *)*((_QWORD *)v11 + 1);
    v35 = *(WTF **)v34;
    v11 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v34 + 8) + 8 * v34[2]);
    v51 = this;
    v36 = a4;
    v37 = a3;
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v11);
    a3 = v37;
    a4 = v36;
    v39 = hasRecursiveReference;
    v10 = v50;
    this = v51;
    if (v39)
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v49, (unint64_t)a2, v37, v36, (uint64_t)a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v11 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v11, v35, v41, v42, a5, a6, a7, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v49, v11, v43, v44, v45, v46, v47, v48);
      }
      a4 = v36;
      a3 = v37;
      v10 = v50;
      this = v51;
    }
  }
  if (*((_DWORD *)v11 + 8) == 5)
    v11 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v11 + 1);
  v12 = (uint64_t *)*((_QWORD *)v11 + 1);
  v14 = *v12;
  v13 = v12[1];
  v15 = *((_DWORD *)v12 + 4);
  v72 = *(uint64_t *)((char *)v12 + 20);
  v73 = *((_DWORD *)v12 + 7);
  v16 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*(_DWORD *)(v16 + 284) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198CCC0E0);
  }
  v17 = *(unsigned int **)(*(_QWORD *)(v16 + 272) + 8 * v10);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  if (v15)
  {
    if (v14 == 248)
    {
      v19 = 1;
    }
    else
    {
      if (v14 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198CCC090);
      }
      v19 = 2;
    }
  }
  else
  {
    v19 = 4;
    switch((char)v14)
    {
      case -5:
        v19 = 16;
        break;
      case -4:
      case -2:
        v19 = 8;
        break;
      case -3:
      case -1:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198CCC0D0);
    }
  }
  if (v19 * (unint64_t)a3 > 0x40000000)
  {
    v21 = 2;
    if (!v17)
      return v21;
    goto LABEL_42;
  }
  switch(v19)
  {
    case 1:
      *(_QWORD *)&v68 = v14;
      *((_QWORD *)&v68 + 1) = v13;
      v69 = v15;
      v70 = v72;
      v71 = v73;
      if (v17)
      {
        do
          v20 = __ldaxr(v17);
        while (__stlxr(v20 + 1, v17));
      }
      v67 = v17;
      v21 = JSC::Wasm::fillArray<unsigned char>((uint64_t)this, &v68, a3, a4, &v67, a6, a7, a8);
      v22 = v67;
      v67 = 0;
      if (!v22)
        goto LABEL_39;
      do
      {
        v23 = __ldaxr(v22);
        v24 = --v23 == 0;
      }
      while (__stlxr(v23, v22));
      break;
    case 2:
      *(_QWORD *)&v63 = v14;
      *((_QWORD *)&v63 + 1) = v13;
      v64 = v15;
      v65 = v72;
      v66 = v73;
      if (v17)
      {
        do
          v29 = __ldaxr(v17);
        while (__stlxr(v29 + 1, v17));
      }
      v62 = (WTF *)v17;
      v21 = JSC::Wasm::fillArray<unsigned short>((uint64_t)this, &v63, a3, a4, (unsigned int **)&v62, a6, a7, a8);
      v22 = (unsigned int *)v62;
      v62 = 0;
      if (!v22)
        goto LABEL_39;
      do
      {
        v30 = __ldaxr(v22);
        v24 = --v30 == 0;
      }
      while (__stlxr(v30, v22));
      break;
    case 4:
      *(_QWORD *)&v58 = v14;
      *((_QWORD *)&v58 + 1) = v13;
      v59 = v15;
      v60 = v72;
      v61 = v73;
      if (v17)
      {
        do
          v25 = __ldaxr(v17);
        while (__stlxr(v25 + 1, v17));
      }
      v57 = v17;
      v21 = JSC::Wasm::fillArray<unsigned int>((uint64_t)this, &v58, a3, a4, &v57, a6, a7, a8);
      v22 = v57;
      v57 = 0;
      if (!v22)
        goto LABEL_39;
      do
      {
        v26 = __ldaxr(v22);
        v24 = --v26 == 0;
      }
      while (__stlxr(v26, v22));
      break;
    case 8:
      *(_QWORD *)&v53 = v14;
      *((_QWORD *)&v53 + 1) = v13;
      v54 = v15;
      v55 = v72;
      v56 = v73;
      if (v17)
      {
        do
          v27 = __ldaxr(v17);
        while (__stlxr(v27 + 1, v17));
      }
      v52 = v17;
      v21 = JSC::Wasm::fillArray<unsigned long long>((uint64_t)this, &v53, a3, a4, &v52, a6, a7, a8);
      v22 = v52;
      v52 = 0;
      if (!v22)
        goto LABEL_39;
      do
      {
        v28 = __ldaxr(v22);
        v24 = --v28 == 0;
      }
      while (__stlxr(v28, v22));
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198CCC0B0);
  }
  if (v24)
  {
    atomic_store(1u, v22);
    WTF::fastFree((unint64_t)v22, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
LABEL_39:
  if (!v21)
    v21 = 2;
  if (v17)
  {
    do
    {
LABEL_42:
      v31 = __ldaxr(v17);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v17));
    if (!v32)
    {
      atomic_store(1u, v17);
      WTF::fastFree((unint64_t)v17, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
  }
  return v21;
}

unint64_t JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(JSC *this, JSC::VM *a2, __int128 *a3, uint64_t a4, uint64_t *a5, unsigned int **a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v14;
  unint64_t SlowCase;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  v14 = (_QWORD *)*((_QWORD *)this + 5120);
  if (!v14)
    v14 = (_QWORD *)JSC::GCClient::Heap::webAssemblyArraySpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = v14[3];
  if (SlowCase < v14[4])
  {
    v14[3] = SlowCase + 80;
    goto LABEL_5;
  }
  SlowCase = v14[5];
  if ((SlowCase & 1) != 0)
  {
    v29 = (uint64_t)v14;
    JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v29, (uint64_t)this + 192, 80, 0, 1, v30, v31, v32);
LABEL_5:
    if (!SlowCase)
      return SlowCase;
    goto LABEL_6;
  }
  v27 = *(_QWORD *)(SlowCase + 8) ^ v14[6];
  v14[4] = SlowCase + HIDWORD(v27);
  v14[5] = SlowCase + (int)v27;
  v14[3] = SlowCase + 80;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v33 = *a3;
  v34 = a3[1];
  v16 = *a6;
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
  }
  v19 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v19;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (v16)
  {
    do
      v20 = __ldaxr(v16);
    while (__stlxr(v20 + 1, v16));
    *(_QWORD *)(SlowCase + 16) = v16;
    do
    {
      v21 = __ldaxr(v16);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v16));
    if (!v22)
    {
      atomic_store(1u, v16);
      WTF::fastFree((unint64_t)v16, a2, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    *(_OWORD *)(SlowCase + 24) = v33;
    *(_OWORD *)(SlowCase + 40) = v34;
    v23 = *a5;
    *a5 = 0;
    *(_QWORD *)(SlowCase + 56) = a4;
    *(_QWORD *)(SlowCase + 64) = v23;
    do
    {
      v24 = __ldaxr(v16);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v16));
    if (!v25)
    {
      atomic_store(1u, v16);
      WTF::fastFree((unint64_t)v16, a2, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
  }
  else
  {
    *(_QWORD *)(SlowCase + 16) = 0;
    *(_OWORD *)(SlowCase + 24) = v33;
    *(_OWORD *)(SlowCase + 40) = v34;
    v28 = *a5;
    *a5 = 0;
    *(_QWORD *)(SlowCase + 56) = a4;
    *(_QWORD *)(SlowCase + 64) = v28;
  }
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return SlowCase;
}

unint64_t JSC::Wasm::fillArray<unsigned char>(uint64_t a1, __int128 *a2, unsigned int a3, int a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC *v11;
  size_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  unint64_t v33;
  __int128 v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  uint64_t (*v40)(uint64_t *);
  uint64_t *v41;
  uint64_t (*v42)(uint64_t *);
  uint64_t *v43;
  unsigned int *v44;
  __int128 v45[2];
  WTF *v46;
  __int128 v47[2];
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(JSC **)(a1 + 8);
  v12 = a3;
  if (a3)
  {
    v15 = WTF::fastMalloc((WTF *)(a3 + 4));
    *(_DWORD *)v15 = a3;
    v48 = (WTF *)v15;
    memset((void *)(v15 + 4), a4, v12);
    v18 = *(_QWORD *)(v10 + 1280);
    if ((v18 & 1) != 0)
    {
      v40 = *(uint64_t (**)(uint64_t *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v41 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v10 & 8) != 0)
        v41 = (uint64_t *)(v10 - 16);
      v49 = *v41;
      v50 = v10;
      v51 = v10 + 1280;
      v18 = v40(&v49);
    }
    v19 = a2[1];
    v45[0] = *a2;
    v45[1] = v19;
    v20 = *a5;
    if (*a5)
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    v44 = v20;
    v29 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v11, (JSC::VM *)v18, v45, v12, (uint64_t *)&v48, &v44, v16, v17);
    v30 = v44;
    v44 = 0;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = --v31 == 0;
      }
      while (__stlxr(v31, v30));
      goto LABEL_13;
    }
  }
  else
  {
    v48 = 0;
    v33 = *(_QWORD *)(v10 + 1280);
    if ((v33 & 1) != 0)
    {
      v42 = *(uint64_t (**)(uint64_t *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
      v43 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v10 & 8) != 0)
        v43 = (uint64_t *)(v10 - 16);
      v49 = *v43;
      v50 = v10;
      v51 = v10 + 1280;
      v33 = v42(&v49);
    }
    v34 = a2[1];
    v47[0] = *a2;
    v47[1] = v34;
    v35 = *a5;
    if (*a5)
    {
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 + 1, v35));
    }
    v46 = (WTF *)v35;
    v29 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v11, (JSC::VM *)v33, v47, v12, (uint64_t *)&v48, (unsigned int **)&v46, a7, a8);
    v30 = (unsigned int *)v46;
    v46 = 0;
    if (v30)
    {
      do
      {
        v37 = __ldaxr(v30);
        v32 = --v37 == 0;
      }
      while (__stlxr(v37, v30));
LABEL_13:
      if (v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((unint64_t)v30, v22, v23, v24, v25, v26, v27, v28);
      }
    }
  }
  v38 = v48;
  v48 = 0;
  if (v38)
    WTF::fastFree((unint64_t)v38, v22, v23, v24, v25, v26, v27, v28);
  return v29;
}

unint64_t JSC::Wasm::fillArray<unsigned short>(uint64_t a1, __int128 *a2, unsigned int a3, __int16 a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC *v11;
  uint64_t v12;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unsigned int *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  __int128 v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF *v40;
  uint64_t (*v42)(uint64_t *);
  uint64_t *v43;
  uint64_t (*v44)(uint64_t *);
  uint64_t *v45;
  unsigned int *v46;
  __int128 v47[2];
  WTF *v48;
  __int128 v49[2];
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(JSC **)(a1 + 8);
  v12 = a3;
  if (a3)
  {
    v15 = (WTF *)WTF::fastMalloc((WTF *)(2 * a3 + 4));
    *(_DWORD *)v15 = a3;
    v18 = (_WORD *)((char *)v15 + 4);
    v50 = v15;
    v19 = v12 + 1;
    do
    {
      *v18++ = a4;
      --v19;
    }
    while (v19 > 1);
    v20 = *(_QWORD *)(v10 + 1280);
    if ((v20 & 1) != 0)
    {
      v42 = *(uint64_t (**)(uint64_t *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
      v43 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v10 & 8) != 0)
        v43 = (uint64_t *)(v10 - 16);
      v51 = *v43;
      v52 = v10;
      v53 = v10 + 1280;
      v20 = v42(&v51);
    }
    v21 = a2[1];
    v47[0] = *a2;
    v47[1] = v21;
    v22 = *a5;
    if (*a5)
    {
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    v46 = v22;
    v31 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v11, (JSC::VM *)v20, v47, v12, (uint64_t *)&v50, &v46, v16, v17);
    v32 = v46;
    v46 = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = --v33 == 0;
      }
      while (__stlxr(v33, v32));
      goto LABEL_15;
    }
  }
  else
  {
    v50 = 0;
    v35 = *(_QWORD *)(v10 + 1280);
    if ((v35 & 1) != 0)
    {
      v44 = *(uint64_t (**)(uint64_t *))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      v45 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v10 & 8) != 0)
        v45 = (uint64_t *)(v10 - 16);
      v51 = *v45;
      v52 = v10;
      v53 = v10 + 1280;
      v35 = v44(&v51);
    }
    v36 = a2[1];
    v49[0] = *a2;
    v49[1] = v36;
    v37 = *a5;
    if (*a5)
    {
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
    v48 = (WTF *)v37;
    v31 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v11, (JSC::VM *)v35, v49, v12, (uint64_t *)&v50, (unsigned int **)&v48, a7, a8);
    v32 = (unsigned int *)v48;
    v48 = 0;
    if (v32)
    {
      do
      {
        v39 = __ldaxr(v32);
        v34 = --v39 == 0;
      }
      while (__stlxr(v39, v32));
LABEL_15:
      if (v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((unint64_t)v32, v24, v25, v26, v27, v28, v29, v30);
      }
    }
  }
  v40 = v50;
  v50 = 0;
  if (v40)
    WTF::fastFree((unint64_t)v40, v24, v25, v26, v27, v28, v29, v30);
  return v31;
}

unint64_t JSC::Wasm::fillArray<unsigned int>(uint64_t a1, __int128 *a2, unsigned int a3, int a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC *v11;
  uint64_t v12;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unsigned int *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  __int128 v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF *v40;
  uint64_t (*v42)(uint64_t *);
  uint64_t *v43;
  uint64_t (*v44)(uint64_t *);
  uint64_t *v45;
  unsigned int *v46;
  __int128 v47[2];
  WTF *v48;
  __int128 v49[2];
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(JSC **)(a1 + 8);
  v12 = a3;
  if (a3)
  {
    v15 = (WTF *)WTF::fastMalloc((WTF *)(4 * a3 + 4));
    *(_DWORD *)v15 = a3;
    v18 = (_DWORD *)((char *)v15 + 4);
    v50 = v15;
    v19 = v12 + 1;
    do
    {
      *v18++ = a4;
      --v19;
    }
    while (v19 > 1);
    v20 = *(_QWORD *)(v10 + 1280);
    if ((v20 & 1) != 0)
    {
      v42 = *(uint64_t (**)(uint64_t *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
      v43 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v10 & 8) != 0)
        v43 = (uint64_t *)(v10 - 16);
      v51 = *v43;
      v52 = v10;
      v53 = v10 + 1280;
      v20 = v42(&v51);
    }
    v21 = a2[1];
    v47[0] = *a2;
    v47[1] = v21;
    v22 = *a5;
    if (*a5)
    {
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    v46 = v22;
    v31 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v11, (JSC::VM *)v20, v47, v12, (uint64_t *)&v50, &v46, v16, v17);
    v32 = v46;
    v46 = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = --v33 == 0;
      }
      while (__stlxr(v33, v32));
      goto LABEL_15;
    }
  }
  else
  {
    v50 = 0;
    v35 = *(_QWORD *)(v10 + 1280);
    if ((v35 & 1) != 0)
    {
      v44 = *(uint64_t (**)(uint64_t *))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      v45 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v10 & 8) != 0)
        v45 = (uint64_t *)(v10 - 16);
      v51 = *v45;
      v52 = v10;
      v53 = v10 + 1280;
      v35 = v44(&v51);
    }
    v36 = a2[1];
    v49[0] = *a2;
    v49[1] = v36;
    v37 = *a5;
    if (*a5)
    {
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
    v48 = (WTF *)v37;
    v31 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v11, (JSC::VM *)v35, v49, v12, (uint64_t *)&v50, (unsigned int **)&v48, a7, a8);
    v32 = (unsigned int *)v48;
    v48 = 0;
    if (v32)
    {
      do
      {
        v39 = __ldaxr(v32);
        v34 = --v39 == 0;
      }
      while (__stlxr(v39, v32));
LABEL_15:
      if (v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((unint64_t)v32, v24, v25, v26, v27, v28, v29, v30);
      }
    }
  }
  v40 = v50;
  v50 = 0;
  if (v40)
    WTF::fastFree((unint64_t)v40, v24, v25, v26, v27, v28, v29, v30);
  return v31;
}

unint64_t JSC::Wasm::fillArray<unsigned long long>(uint64_t a1, __int128 *a2, unsigned int a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC *v11;
  uint64_t v12;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unsigned int *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  __int128 v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF *v40;
  uint64_t (*v42)(uint64_t *);
  uint64_t *v43;
  uint64_t (*v44)(uint64_t *);
  uint64_t *v45;
  unsigned int *v46;
  __int128 v47[2];
  WTF *v48;
  __int128 v49[2];
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(JSC **)(a1 + 8);
  v12 = a3;
  if (a3)
  {
    v15 = (WTF *)WTF::fastMalloc((WTF *)(8 * a3 + 8));
    *(_DWORD *)v15 = a3;
    v18 = (_QWORD *)((char *)v15 + 8);
    v50 = v15;
    v19 = v12 + 1;
    do
    {
      *v18++ = a4;
      --v19;
    }
    while (v19 > 1);
    v20 = *(_QWORD *)(v10 + 1280);
    if ((v20 & 1) != 0)
    {
      v42 = *(uint64_t (**)(uint64_t *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
      v43 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v10 & 8) != 0)
        v43 = (uint64_t *)(v10 - 16);
      v51 = *v43;
      v52 = v10;
      v53 = v10 + 1280;
      v20 = v42(&v51);
    }
    v21 = a2[1];
    v47[0] = *a2;
    v47[1] = v21;
    v22 = *a5;
    if (*a5)
    {
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    v46 = v22;
    v31 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v11, (JSC::VM *)v20, v47, v12, (uint64_t *)&v50, &v46, v16, v17);
    v32 = v46;
    v46 = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = --v33 == 0;
      }
      while (__stlxr(v33, v32));
      goto LABEL_15;
    }
  }
  else
  {
    v50 = 0;
    v35 = *(_QWORD *)(v10 + 1280);
    if ((v35 & 1) != 0)
    {
      v44 = *(uint64_t (**)(uint64_t *))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      v45 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v10 & 8) != 0)
        v45 = (uint64_t *)(v10 - 16);
      v51 = *v45;
      v52 = v10;
      v53 = v10 + 1280;
      v35 = v44(&v51);
    }
    v36 = a2[1];
    v49[0] = *a2;
    v49[1] = v36;
    v37 = *a5;
    if (*a5)
    {
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
    v48 = (WTF *)v37;
    v31 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v11, (JSC::VM *)v35, v49, v12, (uint64_t *)&v50, (unsigned int **)&v48, a7, a8);
    v32 = (unsigned int *)v48;
    v48 = 0;
    if (v32)
    {
      do
      {
        v39 = __ldaxr(v32);
        v34 = --v39 == 0;
      }
      while (__stlxr(v39, v32));
LABEL_15:
      if (v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((unint64_t)v32, v24, v25, v26, v27, v28, v29, v30);
      }
    }
  }
  v40 = v50;
  v50 = 0;
  if (v40)
    WTF::fastFree((unint64_t)v40, v24, v25, v26, v27, v28, v29, v30);
  return v31;
}

__int128 *WTF::VectorMover<false,JSC::Wasm::ConstExprGenerator::ConstExprValue>::move(__int128 *result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  JSC::HandleSet *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  JSC::HandleSet *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;

  if (result != (__int128 *)a2)
  {
    v8 = (_QWORD *)(a3 + 24);
    do
    {
      v9 = *result;
      *(v8 - 1) = *((_QWORD *)result + 2);
      *v8 = 0;
      *(_OWORD *)(v8 - 3) = v9;
      v10 = *((_QWORD *)result + 3);
      if (v10)
      {
        v11 = *(JSC::HandleSet **)(((v10 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v12 = (_QWORD *)*((_QWORD *)v11 + 5);
        if (!v12)
        {
          v28 = result;
          v26 = v8;
          v27 = a2;
          v25 = v11;
          JSC::HandleSet::grow(v11, a2, a3, a4, a5, a6, a7, a8);
          v11 = v25;
          v8 = v26;
          result = v28;
          a2 = v27;
          v12 = (_QWORD *)*((_QWORD *)v25 + 5);
        }
        *((_QWORD *)v11 + 5) = *v12;
        v12[2] = 0;
        v13 = v12 + 2;
        *v12 = 0;
        v12[1] = 0;
        *v8 = v12 + 2;
        v14 = (_QWORD *)*((_QWORD *)result + 3);
        if (v14)
          v14 = (_QWORD *)*v14;
        v15 = (unint64_t)(v13 - 2);
        if ((v14 != 0) != (*v13 != 0))
        {
          if (v14)
          {
            v16 = *(unint64_t **)((v15 & 0xFFFFFFFFFFFFF000) + 0x10);
            v17 = v16[3];
            v16 += 3;
            *(_QWORD *)v15 = v17;
            *(v13 - 1) = v16;
            *v16 = v15;
            *(_QWORD *)(v17 + 8) = v15;
          }
          else
          {
            v24 = *(_QWORD *)v15;
            v23 = (_QWORD *)*(v13 - 1);
            *v23 = *(_QWORD *)v15;
            *(_QWORD *)(v24 + 8) = v23;
            *(_QWORD *)v15 = 0;
            *(_QWORD *)(v15 + 8) = 0;
            v13 = (_QWORD *)*v8;
          }
        }
        *v13 = v14;
        v18 = *((_QWORD *)result + 3);
        if (v18)
        {
          v19 = (uint64_t *)(v18 - 16);
          v20 = *(_QWORD *)(((v18 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v21 = *(uint64_t **)(v18 - 8);
          if (v21)
          {
            v22 = *v19;
            *v21 = *v19;
            *(_QWORD *)(v22 + 8) = v21;
            *v19 = 0;
            v19[1] = 0;
          }
          *v19 = *(_QWORD *)(v20 + 40);
          *(_QWORD *)(v20 + 40) = v19;
          *((_QWORD *)result + 3) = 0;
        }
      }
      result += 2;
      v8 += 4;
    }
    while (result != (__int128 *)a2);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int **a7@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;

  v7 = a1[1];
  if (v7)
  {
    --v7;
    v19 = *a1;
    if (v7 >> 31)
      goto LABEL_13;
  }
  else
  {
    v19 = *a1;
  }
  v20 = v7;
  v18 = *a2;
  v8 = a3[1];
  if (v8)
  {
    --v8;
    v16 = *a3;
    if (v8 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198CCCCF4);
    }
  }
  else
  {
    v16 = *a3;
  }
  v17 = v8;
  v9 = *a4;
  v14 = *a5;
  v15 = v9;
  v10 = a6[1];
  if (v10)
  {
    --v10;
    v12 = *a6;
    if (!(v10 >> 31))
      goto LABEL_7;
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198CCCCC4);
  }
  v12 = *a6;
LABEL_7:
  v13 = v10;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v19, &v18, (uint64_t)&v16, &v15, &v14, (uint64_t)&v12, a7);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, int **a7@<X8>)
{
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  char v27;
  uint64_t v28;
  _BOOL4 v29;

  v8 = 0;
  v9 = *(_DWORD *)(result + 8);
  v10 = *a2;
  v11 = *a2;
  do
  {
    ++v8;
    v12 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v12);
  v13 = *a4;
  if (*a4)
    v14 = *(_DWORD *)(v13 + 4);
  else
    v14 = 0;
  v15 = *a5;
  if (*a5)
    v16 = *(_DWORD *)(v15 + 4);
  else
    v16 = 0;
  v17 = *(_DWORD *)(a6 + 8);
  if ((v17 | v16) < 0)
    goto LABEL_37;
  v18 = __OFADD__(v16, v17);
  v19 = v16 + v17;
  v20 = v18;
  if (v14 < 0 || v20)
    goto LABEL_37;
  v21 = *(_DWORD *)(a3 + 8);
  v18 = __OFADD__(v14, v19);
  v22 = v14 + v19;
  v23 = v18;
  if (v21 < 0 || v23)
    goto LABEL_37;
  v18 = __OFADD__(v21, v22);
  v24 = v21 + v22;
  v25 = v18;
  if (v8 < 0
    || v25
    || ((v18 = __OFADD__(v8, v24), v26 = v8 + v24, !v18) ? (v27 = 0) : (v27 = 1),
        v9 < 0 || (v27 & 1) != 0 || (v18 = __OFADD__(v9, v26), v28 = (v9 + v26), v18)))
  {
LABEL_37:
    *a7 = 0;
  }
  else
  {
    v29 = (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0) && (!v15 || (*(_BYTE *)(v15 + 16) & 4) != 0);
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v28, v29, *(_OWORD **)result, *(_QWORD *)(result + 8), v10, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v13, a7, v15, *(int8x16_t **)a6, *(_QWORD *)(a6 + 8));
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10, int8x16_t *a11, unsigned int a12)
{
  int v17;
  int **v18;
  int *v20;
  _BYTE *v21;
  char *v23;
  char *v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  _BYTE *v30;
  int v31;
  char *v32;
  __int128 v33;
  int8x16_t v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  char *v39;
  _QWORD v43[5];
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  v17 = result;
  v18 = a9;
  v43[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v43);
        v20 = (int *)v43[0];
        if (v43[0])
        {
          v21 = (_BYTE *)(v43[0] + 20);
          *(_DWORD *)v43[0] = 2;
          v20[1] = v17;
          *((_QWORD *)v20 + 1) = v20 + 5;
          v20[4] = 4;
          if (a4 == 1)
          {
            *v21 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v20 + 5, a3, a4);
          }
          v27 = 0;
          v28 = a5;
          do
          {
            *((_BYTE *)&v43[3] + v27--) = (v28 % 0xA) | 0x30;
            v29 = v28 > 9;
            v28 /= 0xAuLL;
          }
          while (v29);
          v30 = &v21[a4];
          if (v27 + 26 <= 25)
            memcpy(&v21[a4], (char *)&v43[3] + v27 + 1, -v27);
          v31 = 0;
          v18 = a9;
          do
          {
            ++v31;
            v29 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v29);
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v30[v31], a6->i8, a7, a8, a10, a11->i8, a12);
        }
        goto LABEL_24;
      }
LABEL_29:
      v20 = 0;
      goto LABEL_24;
    }
LABEL_28:
    v20 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_24;
  }
  if (!(_DWORD)result)
    goto LABEL_28;
  if (result > 0x7FFFFFEF)
    goto LABEL_29;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v43);
  v20 = (int *)v43[0];
  if (v43[0])
  {
    v23 = (char *)(v43[0] + 20);
    *(_DWORD *)v43[0] = 2;
    v20[1] = v17;
    *((_QWORD *)v20 + 1) = v20 + 5;
    v20[4] = 0;
    v24 = (char *)v20 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v32 = &v23[2 * (a4 & 0xFFFFFFC0)];
      v33 = 0uLL;
      v25 = a12;
      do
      {
        v44.val[0] = (int8x16_t)*a3;
        v34 = *((int8x16_t *)a3 + 1);
        v45.val[0] = (int8x16_t)a3[2];
        v35 = a3[3];
        a3 += 4;
        v36 = v35;
        v45.val[1] = 0uLL;
        v46.val[0] = v34;
        v44.val[1] = 0uLL;
        v37 = v23;
        vst2q_s8(v37, v44);
        v37 += 32;
        v46.val[1] = 0uLL;
        vst2q_s8(v37, v46);
        v38 = v23 + 64;
        vst2q_s8(v38, v45);
        v39 = v23 + 96;
        vst2q_s8(v39, *(int8x16x2_t *)(&v33 - 1));
        v23 += 128;
      }
      while (v23 != v32);
      v23 = v32;
    }
    else
    {
      v25 = a12;
    }
    for (; v23 != v24; v23 += 2)
    {
      v26 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v23 = v26;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v24, a5, a6, a7, a8, a10, a11, v25);
  }
LABEL_24:
  *v18 = v20;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, char *__src, unsigned int a7)
{
  char *v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  char *result;
  char *v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  unsigned __int128 *v25;
  unsigned __int128 *v26;
  unsigned __int128 v27;
  char v28;
  char v29;

  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    memcpy(__dst, a2, a3);
  }
  v13 = &__dst[a3];
  if (a4)
  {
    v14 = *(char **)(a4 + 8);
    v15 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v15 == 1)
      {
        *v13 = *v14;
      }
      else if ((_DWORD)v15)
      {
        memcpy(v13, v14, v15);
      }
    }
    else
    {
      if (v15 < 0x10)
      {
        v22 = v13;
      }
      else
      {
        v22 = &v13[v15 & 0xFFFFFFF0];
        v23 = (unsigned __int128 *)v13;
        do
        {
          v24 = (unsigned __int128)vld2q_s8(v14);
          v14 += 32;
          *v23++ = v24;
        }
        while (v23 != (unsigned __int128 *)v22);
      }
      while (v22 != &v13[v15])
      {
        v28 = *v14;
        v14 += 2;
        *v22++ = v28;
      }
    }
    v16 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v13[v16];
  if (a5)
  {
    v18 = *(char **)(a5 + 8);
    v19 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v19 == 1)
      {
        *v17 = *v18;
      }
      else if ((_DWORD)v19)
      {
        memcpy(v17, v18, v19);
      }
    }
    else
    {
      if (v19 < 0x10)
      {
        v25 = (unsigned __int128 *)&v13[v16];
      }
      else
      {
        v25 = (unsigned __int128 *)&v17[v19 & 0xFFFFFFF0];
        v26 = (unsigned __int128 *)&v13[v16];
        do
        {
          v27 = (unsigned __int128)vld2q_s8(v18);
          v18 += 32;
          *v26++ = v27;
        }
        while (v26 != v25);
      }
      while (v25 != (unsigned __int128 *)&v17[v19])
      {
        v29 = *v18;
        v18 += 2;
        *(_BYTE *)v25 = v29;
        v25 = (unsigned __int128 *)((char *)v25 + 1);
      }
    }
    v20 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v20 = 0;
  }
  result = &v17[v20];
  if (a7 == 1)
  {
    *result = *__src;
  }
  else if (a7)
  {
    return (char *)memcpy(result, __src, a7);
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_WORD *a1, unint64_t a2, int8x16_t *a3, int a4, uint64_t a5, uint64_t a6, int8x16_t *a7, int a8)
{
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  _WORD *v15;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  int8x16_t *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  uint64_t v42;
  _BYTE v44[25];
  uint64_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;

  v12 = 0;
  v45 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  do
  {
    v44[v12-- + 24] = (v13 % 0xA) | 0x30;
    v14 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v14);
  if (v12 + 26 <= 25)
  {
    v15 = a1;
    do
      *v15++ = *((unsigned __int8 *)&v45 + v12);
    while (!__CFADD__(v12++, 1));
  }
  v17 = 0;
  do
  {
    ++v17;
    v14 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v14);
  v18 = (char *)&a1[v17];
  v19 = &v18[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v20 = &v18[2 * (a4 & 0xFFFFFFC0)];
    v21 = 0uLL;
    do
    {
      v46.val[0] = *a3;
      v22 = a3[1];
      v48.val[0] = a3[2];
      v23 = a3[3];
      a3 += 4;
      v24 = v23;
      v48.val[1] = 0uLL;
      v50.val[0] = v22;
      v46.val[1] = 0uLL;
      v25 = v18;
      vst2q_s8(v25, v46);
      v25 += 32;
      v50.val[1] = 0uLL;
      vst2q_s8(v25, v50);
      v26 = v18 + 64;
      vst2q_s8(v26, v48);
      v27 = v18 + 96;
      vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
      v18 += 128;
    }
    while (v18 != v20);
    v18 = v20;
  }
  while (v18 != v19)
  {
    v28 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v18 = v28;
    v18 += 2;
  }
  if (a5)
  {
    v29 = *(int8x16_t **)(a5 + 8);
    v30 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v31 = &v19[2 * v30];
      if (v30 >= 0x40)
      {
        v32 = &v19[2 * (v30 & 0xFFFFFFC0)];
        v33 = 0uLL;
        v34 = v19;
        do
        {
          v47.val[0] = *v29;
          v35 = v29[1];
          v49.val[0] = v29[2];
          v36 = v29[3];
          v29 += 4;
          v37 = v36;
          v49.val[1] = 0uLL;
          v51.val[0] = v35;
          v47.val[1] = 0uLL;
          v38 = v34;
          vst2q_s8(v38, v47);
          v38 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v38, v51);
          v39 = v34 + 64;
          vst2q_s8(v39, v49);
          v40 = v34 + 96;
          vst2q_s8(v40, *(int8x16x2_t *)(&v33 - 1));
          v34 += 128;
        }
        while (v34 != v32);
      }
      else
      {
        v32 = v19;
      }
      while (v32 != v31)
      {
        v41 = v29->u8[0];
        v29 = (int8x16_t *)((char *)v29 + 1);
        *(_WORD *)v32 = v41;
        v32 += 2;
      }
    }
    else if ((_DWORD)v30 == 1)
    {
      *(_WORD *)v19 = v29->i16[0];
    }
    else if ((_DWORD)v30)
    {
      memcpy(v19, v29, 2 * v30);
    }
    v42 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v42 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v19[2 * v42], a6, a7, a8);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, int **a8@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;

  v8 = a1[1];
  if (v8)
  {
    --v8;
    v21 = *a1;
    if (v8 >> 31)
      goto LABEL_13;
  }
  else
  {
    v21 = *a1;
  }
  v22 = v8;
  v20 = *a2;
  v9 = a3[1];
  if (v9)
  {
    --v9;
    v18 = *a3;
    if (v9 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198CCD5CCLL);
    }
  }
  else
  {
    v18 = *a3;
  }
  v19 = v9;
  v10 = *a4;
  v16 = *a5;
  v17 = v10;
  v11 = a6[1];
  if (v11)
  {
    --v11;
    v14 = *a6;
    if (!(v11 >> 31))
      goto LABEL_7;
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198CCD59CLL);
  }
  v14 = *a6;
LABEL_7:
  v15 = v11;
  v13 = *a7;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v21, &v20, (uint64_t)&v18, &v17, &v16, (uint64_t)&v14, &v13, a8);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, int **a8@<X8>)
{
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  unsigned int v35;

  v9 = 0;
  v10 = *(_DWORD *)(result + 8);
  v11 = *a2;
  v12 = *a2;
  do
  {
    ++v9;
    v13 = v12 > 9;
    v12 /= 0xAuLL;
  }
  while (v13);
  v14 = *a4;
  if (*a4)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  v16 = *a5;
  if (*a5)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  v18 = *(_DWORD *)(a6 + 8);
  v19 = *a7;
  if (*a7)
    v20 = *(_DWORD *)(v19 + 4);
  else
    v20 = 0;
  if ((v20 | v18) < 0)
    goto LABEL_45;
  v21 = __OFADD__(v18, v20);
  v22 = v18 + v20;
  v23 = v21;
  if (v17 < 0 || v23)
    goto LABEL_45;
  v21 = __OFADD__(v17, v22);
  v24 = v17 + v22;
  v25 = v21;
  if (v15 < 0 || v25)
    goto LABEL_45;
  v26 = *(_DWORD *)(a3 + 8);
  v21 = __OFADD__(v15, v24);
  v27 = v15 + v24;
  v28 = v21;
  if (v26 < 0 || v28)
    goto LABEL_45;
  v21 = __OFADD__(v26, v27);
  v29 = v26 + v27;
  v30 = v21;
  if (v9 < 0
    || v30
    || ((v21 = __OFADD__(v9, v29), v31 = v9 + v29, !v21) ? (v32 = 0) : (v32 = 1),
        v10 < 0 || (v32 & 1) != 0 || (v21 = __OFADD__(v10, v31), v33 = (v10 + v31), v21)))
  {
LABEL_45:
    *a8 = 0;
    return result;
  }
  if (!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    if (v16)
    {
      v35 = *(_DWORD *)(v16 + 16);
      v34 = (v35 >> 2) & 1;
      if (!v19 || (v35 & 4) == 0)
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v33, v34, *(_OWORD **)result, *(_QWORD *)(result + 8), v11, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v14, a8, v16, *(int8x16_t **)a6, *(_QWORD *)(a6 + 8), v19);
    }
    else if (!v19)
    {
      v34 = 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v33, v34, *(_OWORD **)result, *(_QWORD *)(result + 8), v11, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v14, a8, v16, *(int8x16_t **)a6, *(_QWORD *)(a6 + 8), v19);
    }
    v34 = (*(unsigned __int8 *)(v19 + 16) >> 2) & 1;
  }
  else
  {
    v34 = 0;
  }
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v33, v34, *(_OWORD **)result, *(_QWORD *)(result + 8), v11, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v14, a8, v16, *(int8x16_t **)a6, *(_QWORD *)(a6 + 8), v19);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10, int8x16_t *a11, int a12, uint64_t a13)
{
  int v18;
  int **v19;
  int *v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  char *v38;
  int v39;
  char *v40;
  unsigned int v41;
  _QWORD v43[5];
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  v18 = result;
  v19 = a9;
  v43[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v43);
        v22 = (int *)v43[0];
        if (v43[0])
        {
          v23 = (_BYTE *)(v43[0] + 20);
          *(_DWORD *)v43[0] = 2;
          v22[1] = v18;
          *((_QWORD *)v22 + 1) = v22 + 5;
          v22[4] = 4;
          if (a4 == 1)
          {
            *v23 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v22 + 5, a3, a4);
          }
          v35 = 0;
          v36 = a5;
          do
          {
            *((_BYTE *)&v43[3] + v35--) = (v36 % 0xA) | 0x30;
            v37 = v36 > 9;
            v36 /= 0xAuLL;
          }
          while (v37);
          v38 = &v23[a4];
          if (v35 + 26 <= 25)
            memcpy(v38, (char *)&v43[3] + v35 + 1, -v35);
          v39 = 0;
          v19 = a9;
          do
          {
            ++v39;
            v37 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v37);
          v40 = &v38[v39];
          if (a7 == 1)
          {
            v41 = a12;
            *v40 = a6->i8[0];
          }
          else
          {
            v41 = a12;
            if (a7)
              memcpy(v40, a6, a7);
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v40[a7], a8, a10, a11, v41, a13);
        }
        goto LABEL_30;
      }
LABEL_32:
      v22 = 0;
      goto LABEL_30;
    }
LABEL_31:
    v22 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_30;
  }
  if (!(_DWORD)result)
    goto LABEL_31;
  if (result > 0x7FFFFFEF)
    goto LABEL_32;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v43);
  v22 = (int *)v43[0];
  if (v43[0])
  {
    v24 = (char *)(v43[0] + 20);
    *(_DWORD *)v43[0] = 2;
    v22[1] = v18;
    *((_QWORD *)v22 + 1) = v22 + 5;
    v22[4] = 0;
    v25 = (char *)v22 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v26 = &v24[2 * (a4 & 0xFFFFFFC0)];
      v27 = 0uLL;
      do
      {
        v44.val[0] = (int8x16_t)*a3;
        v28 = *((int8x16_t *)a3 + 1);
        v45.val[0] = (int8x16_t)a3[2];
        v29 = a3[3];
        a3 += 4;
        v30 = v29;
        v45.val[1] = 0uLL;
        v46.val[0] = v28;
        v44.val[1] = 0uLL;
        v31 = v24;
        vst2q_s8(v31, v44);
        v31 += 32;
        v46.val[1] = 0uLL;
        vst2q_s8(v31, v46);
        v32 = v24 + 64;
        vst2q_s8(v32, v45);
        v33 = v24 + 96;
        vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
        v24 += 128;
      }
      while (v24 != v26);
      v24 = v26;
    }
    while (v24 != v25)
    {
      v34 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v24 = v34;
      v24 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v25, a5, a6, a7, a8, a10, a11, a12, a13);
  }
LABEL_30:
  *v19 = v22;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, uint64_t a2, uint64_t a3, _BYTE *__src, unsigned int a5, uint64_t a6)
{
  _BYTE *v10;
  _BYTE *v12;
  size_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  size_t v21;
  unsigned __int128 *v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  unsigned __int128 *v25;
  unsigned __int128 *v26;
  unsigned __int128 v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned __int128 v30;
  char v31;
  char v32;
  char v33;

  v10 = __dst;
  if (a2)
  {
    v12 = *(_BYTE **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v13 == 1)
      {
        *__dst = *v12;
      }
      else if ((_DWORD)v13)
      {
        __dst = memcpy(__dst, v12, v13);
      }
    }
    else
    {
      if (v13 < 0x10)
      {
        v22 = (unsigned __int128 *)__dst;
      }
      else
      {
        v22 = (unsigned __int128 *)&__dst[v13 & 0xFFFFFFF0];
        v23 = (unsigned __int128 *)__dst;
        do
        {
          v24 = (unsigned __int128)vld2q_s8(v12);
          v12 += 32;
          *v23++ = v24;
        }
        while (v23 != v22);
      }
      while (v22 != (unsigned __int128 *)&__dst[v13])
      {
        v32 = *v12;
        v12 += 2;
        *(_BYTE *)v22 = v32;
        v22 = (unsigned __int128 *)((char *)v22 + 1);
      }
    }
    v14 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v14 = 0;
  }
  v15 = &v10[v14];
  if (a3)
  {
    v16 = *(_BYTE **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v17 == 1)
      {
        *v15 = *v16;
      }
      else if ((_DWORD)v17)
      {
        __dst = memcpy(v15, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v25 = (unsigned __int128 *)v15;
      }
      else
      {
        v25 = (unsigned __int128 *)&v15[v17 & 0xFFFFFFF0];
        v26 = (unsigned __int128 *)v15;
        do
        {
          v27 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v26++ = v27;
        }
        while (v26 != v25);
      }
      while (v25 != (unsigned __int128 *)&v15[v17])
      {
        v33 = *v16;
        v16 += 2;
        *(_BYTE *)v25 = v33;
        v25 = (unsigned __int128 *)((char *)v25 + 1);
      }
    }
    v18 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v15[v18];
  if (a5 == 1)
  {
    *v19 = *__src;
  }
  else if (a5)
  {
    __dst = memcpy(&v15[v18], __src, a5);
  }
  if (a6)
  {
    __dst = &v19[a5];
    v20 = *(_BYTE **)(a6 + 8);
    v21 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      if ((_DWORD)v21 == 1)
      {
        *__dst = *v20;
      }
      else if ((_DWORD)v21)
      {
        return memcpy(__dst, v20, v21);
      }
    }
    else
    {
      v28 = &__dst[v21];
      if (v21 >= 0x10)
      {
        v29 = &__dst[v21 & 0xFFFFFFF0];
        do
        {
          v30 = (unsigned __int128)vld2q_s8(v20);
          v20 += 32;
          *(_OWORD *)__dst = v30;
          __dst += 16;
        }
        while (__dst != v29);
        __dst = v29;
      }
      while (__dst != v28)
      {
        v31 = *v20;
        v20 += 2;
        *__dst++ = v31;
      }
    }
  }
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(_WORD *a1, unint64_t a2, int8x16_t *a3, int a4, uint64_t a5, uint64_t a6, int8x16_t *a7, int a8, uint64_t a9)
{
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  _WORD *v16;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  int8x16_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  uint64_t v43;
  _BYTE v45[25];
  uint64_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;

  v13 = 0;
  v46 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  do
  {
    v45[v13-- + 24] = (v14 % 0xA) | 0x30;
    v15 = v14 > 9;
    v14 /= 0xAuLL;
  }
  while (v15);
  if (v13 + 26 <= 25)
  {
    v16 = a1;
    do
      *v16++ = *((unsigned __int8 *)&v46 + v13);
    while (!__CFADD__(v13++, 1));
  }
  v18 = 0;
  do
  {
    ++v18;
    v15 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v15);
  v19 = (char *)&a1[v18];
  v20 = &v19[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v21 = &v19[2 * (a4 & 0xFFFFFFC0)];
    v22 = 0uLL;
    do
    {
      v47.val[0] = *a3;
      v23 = a3[1];
      v49.val[0] = a3[2];
      v24 = a3[3];
      a3 += 4;
      v25 = v24;
      v49.val[1] = 0uLL;
      v51.val[0] = v23;
      v47.val[1] = 0uLL;
      v26 = v19;
      vst2q_s8(v26, v47);
      v26 += 32;
      v51.val[1] = 0uLL;
      vst2q_s8(v26, v51);
      v27 = v19 + 64;
      vst2q_s8(v27, v49);
      v28 = v19 + 96;
      vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
      v19 += 128;
    }
    while (v19 != v21);
    v19 = v21;
  }
  while (v19 != v20)
  {
    v29 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v19 = v29;
    v19 += 2;
  }
  if (a5)
  {
    v30 = *(int8x16_t **)(a5 + 8);
    v31 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v32 = &v20[2 * v31];
      if (v31 >= 0x40)
      {
        v33 = &v20[2 * (v31 & 0xFFFFFFC0)];
        v34 = 0uLL;
        v35 = v20;
        do
        {
          v48.val[0] = *v30;
          v36 = v30[1];
          v50.val[0] = v30[2];
          v37 = v30[3];
          v30 += 4;
          v38 = v37;
          v50.val[1] = 0uLL;
          v52.val[0] = v36;
          v48.val[1] = 0uLL;
          v39 = v35;
          vst2q_s8(v39, v48);
          v39 += 32;
          v52.val[1] = 0uLL;
          vst2q_s8(v39, v52);
          v40 = v35 + 64;
          vst2q_s8(v40, v50);
          v41 = v35 + 96;
          vst2q_s8(v41, *(int8x16x2_t *)(&v34 - 1));
          v35 += 128;
        }
        while (v35 != v33);
      }
      else
      {
        v33 = v20;
      }
      while (v33 != v32)
      {
        v42 = v30->u8[0];
        v30 = (int8x16_t *)((char *)v30 + 1);
        *(_WORD *)v33 = v42;
        v33 += 2;
      }
    }
    else if ((_DWORD)v31 == 1)
    {
      *(_WORD *)v20 = v30->i16[0];
    }
    else if ((_DWORD)v31)
    {
      memcpy(v20, v30, 2 * v31);
    }
    v43 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v43 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v20[2 * v43], a6, a7, a8, a9);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, int **a9@<X8>, uint64_t *a10, uint64_t *a11)
{
  int v18;
  int v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BYTE v35[4];
  int v36;

  v18 = 0;
  v19 = *(_DWORD *)(a1 + 8);
  v20 = *a2;
  do
  {
    ++v18;
    v21 = v20 > 9;
    v20 /= 0xAuLL;
  }
  while (v21);
  if (*a4)
    v22 = *(unsigned int *)(*a4 + 4);
  else
    v22 = 0;
  if (*a5)
    v23 = *(_DWORD *)(*a5 + 4);
  else
    v23 = 0;
  if (*a6)
    v24 = *(_DWORD *)(*a6 + 4);
  else
    v24 = 0;
  if (*a7)
    v25 = *(_DWORD *)(*a7 + 4);
  else
    v25 = 0;
  if (*a8)
    v26 = *(_DWORD *)(*a8 + 4);
  else
    v26 = 0;
  if (*a10)
    v27 = *(_DWORD *)(*a10 + 4);
  else
    v27 = 0;
  v28 = *a11;
  if (*a11)
    LODWORD(v28) = *(_DWORD *)(v28 + 4);
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v18, *(_DWORD *)(a3 + 8), v22, v23, v24, v25, v26, v27, (uint64_t)v35, v28);
  if (v19 < 0 || v35[0] || (result = (v19 + v36), __OFADD__(v19, v36)))
  {
    *a9 = 0;
  }
  else
  {
    v30 = *a4;
    if (!*a4 || (*(_BYTE *)(v30 + 16) & 4) != 0)
    {
      v32 = *a5;
      if ((!*a5 || (*(_BYTE *)(v32 + 16) & 4) != 0)
        && (!*a6 || (*(_BYTE *)(*a6 + 16) & 4) != 0)
        && (!*a7 || (*(_BYTE *)(*a7 + 16) & 4) != 0)
        && (!*a8 || (*(_BYTE *)(*a8 + 16) & 4) != 0)
        && (!*a10 || (*(_BYTE *)(*a10 + 16) & 4) != 0))
      {
        if (*a11)
          v31 = (*(unsigned __int8 *)(*a11 + 16) >> 2) & 1;
        else
          v31 = 1;
      }
      else
      {
        v31 = 0;
      }
    }
    else
    {
      v31 = 0;
      v32 = *a5;
    }
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v31, *(_OWORD **)a1, *(_QWORD *)(a1 + 8), *a2, *(_OWORD **)a3, *(_QWORD *)(a3 + 8), v30, a9, v32, *a6, *a7, *a8, *a10, *a11);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, _OWORD *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v20;
  int *v22;
  _BYTE *v23;
  uint64_t i;
  char *v25;
  uint64_t v26;
  int **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  _BYTE *v32;
  int v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  unint64_t v50;
  _WORD *v51;
  unsigned int v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  int8x16_t v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  __int16 v64;
  unsigned __int128 *v65;
  unsigned __int128 *v66;
  unsigned __int128 *v67;
  unsigned __int128 v68;
  char v69;
  _QWORD v71[5];
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;

  v20 = result;
  v71[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v71);
        v22 = (int *)v71[0];
        if (v71[0])
        {
          v23 = (_BYTE *)(v71[0] + 20);
          *(_DWORD *)v71[0] = 2;
          v22[1] = v20;
          *((_QWORD *)v22 + 1) = v22 + 5;
          v22[4] = 4;
          if (a4 == 1)
          {
            *v23 = *(_BYTE *)a3;
            i = a8;
          }
          else
          {
            i = a8;
            if (a4)
              memcpy(v22 + 5, a3, a4);
          }
          v29 = 0;
          v30 = a5;
          do
          {
            *((_BYTE *)&v71[3] + v29--) = (v30 % 0xA) | 0x30;
            v31 = v30 > 9;
            v30 /= 0xAuLL;
          }
          while (v31);
          v32 = &v23[a4];
          if (v29 + 26 <= 25)
            memcpy(&v23[a4], (char *)&v71[3] + v29 + 1, -v29);
          v33 = 0;
          v27 = a9;
          do
          {
            ++v33;
            v31 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v31);
          v34 = &v32[v33];
          if (a7 == 1)
          {
            *v34 = *(_BYTE *)a6;
          }
          else if (a7)
          {
            memcpy(&v32[v33], a6, a7);
          }
          v35 = &v34[a7];
          if (i)
          {
            v36 = *(_BYTE **)(i + 8);
            v37 = *(unsigned int *)(i + 4);
            if ((*(_BYTE *)(i + 16) & 4) != 0)
            {
              if ((_DWORD)v37 == 1)
              {
                *v35 = *v36;
                v38 = a15;
              }
              else
              {
                v38 = a15;
                if ((_DWORD)v37)
                  memcpy(v35, v36, v37);
              }
            }
            else
            {
              v65 = (unsigned __int128 *)&v35[v37];
              if (v37 < 0x10)
              {
                v66 = (unsigned __int128 *)v35;
              }
              else
              {
                v66 = (unsigned __int128 *)&v35[v37 & 0xFFFFFFF0];
                v67 = (unsigned __int128 *)v35;
                do
                {
                  v68 = (unsigned __int128)vld2q_s8(v36);
                  v36 += 32;
                  *v67++ = v68;
                }
                while (v67 != v66);
              }
              v27 = a9;
              v38 = a15;
              for (i = a8; v66 != v65; v66 = (unsigned __int128 *)((char *)v66 + 1))
              {
                v69 = *v36;
                v36 += 2;
                *(_BYTE *)v66 = v69;
              }
            }
            v39 = *(unsigned int *)(i + 4);
          }
          else
          {
            v39 = 0;
            v38 = a15;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v35[v39], a10, a11, a12, a13, a14, v38);
          goto LABEL_52;
        }
LABEL_55:
        v27 = a9;
        goto LABEL_52;
      }
LABEL_54:
      v22 = 0;
      goto LABEL_55;
    }
LABEL_53:
    v22 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_55;
  }
  if (!(_DWORD)result)
    goto LABEL_53;
  if (result > 0x7FFFFFEF)
    goto LABEL_54;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v71);
  v22 = (int *)v71[0];
  if (!v71[0])
    goto LABEL_55;
  v25 = (char *)(v71[0] + 20);
  *(_DWORD *)v71[0] = 2;
  v22[1] = v20;
  *((_QWORD *)v22 + 1) = v22 + 5;
  v22[4] = 0;
  v26 = (uint64_t)v22 + 2 * a4 + 20;
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v40 = &v25[2 * (a4 & 0xFFFFFFC0)];
    v41 = 0uLL;
    v27 = a9;
    v28 = a8;
    do
    {
      v72.val[0] = (int8x16_t)*a3;
      v42 = *((int8x16_t *)a3 + 1);
      v74.val[0] = (int8x16_t)a3[2];
      v43 = a3[3];
      a3 += 4;
      v44 = v43;
      v74.val[1] = 0uLL;
      v76.val[0] = v42;
      v72.val[1] = 0uLL;
      v45 = v25;
      vst2q_s8(v45, v72);
      v45 += 32;
      v76.val[1] = 0uLL;
      vst2q_s8(v45, v76);
      v46 = v25 + 64;
      vst2q_s8(v46, v74);
      v47 = v25 + 96;
      vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
      v25 += 128;
    }
    while (v25 != v40);
    v25 = v40;
  }
  else
  {
    v27 = a9;
    v28 = a8;
  }
  while (v25 != (char *)v26)
  {
    v48 = *(unsigned __int8 *)a3;
    a3 = (_OWORD *)((char *)a3 + 1);
    *(_WORD *)v25 = v48;
    v25 += 2;
  }
  v49 = 0;
  v50 = a5;
  do
  {
    *((_BYTE *)&v71[3] + v49--) = (v50 % 0xA) | 0x30;
    v31 = v50 > 9;
    v50 /= 0xAuLL;
  }
  while (v31);
  if (v49 + 26 <= 25)
  {
    v51 = (_WORD *)v26;
    do
      *v51++ = *((unsigned __int8 *)&v71[3] + v49 + 1);
    while (!__CFADD__(v49++, 1));
  }
  v53 = 0;
  do
  {
    ++v53;
    v31 = a5 > 9;
    a5 /= 0xAuLL;
  }
  while (v31);
  v54 = (char *)(v26 + 2 * v53);
  v55 = &v54[2 * a7];
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    v56 = &v54[2 * (a7 & 0xFFFFFFC0)];
    v57 = 0uLL;
    do
    {
      v73.val[0] = (int8x16_t)*a6;
      v58 = *((int8x16_t *)a6 + 1);
      v75.val[0] = (int8x16_t)a6[2];
      v59 = a6[3];
      a6 += 4;
      v60 = v59;
      v75.val[1] = 0uLL;
      v77.val[0] = v58;
      v73.val[1] = 0uLL;
      v61 = v54;
      vst2q_s8(v61, v73);
      v61 += 32;
      v77.val[1] = 0uLL;
      vst2q_s8(v61, v77);
      v62 = v54 + 64;
      vst2q_s8(v62, v75);
      v63 = v54 + 96;
      vst2q_s8(v63, *(int8x16x2_t *)(&v57 - 1));
      v54 += 128;
    }
    while (v54 != v56);
    v54 = v56;
  }
  while (v54 != v55)
  {
    v64 = *(unsigned __int8 *)a6;
    a6 = (_OWORD *)((char *)a6 + 1);
    *(_WORD *)v54 = v64;
    v54 += 2;
  }
  result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v55, v28, a10, a11, a12, a13, a14, a15);
LABEL_52:
  *v27 = v22;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  char *v26;
  unsigned __int128 *v27;
  unsigned __int128 v28;
  char *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  unsigned __int128 *v32;
  unsigned __int128 *v33;
  unsigned __int128 v34;
  char v35;
  char v36;
  char v37;

  if (a2)
  {
    v14 = *(char **)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v15 == 1)
      {
        *__dst = *v14;
      }
      else if ((_DWORD)v15)
      {
        memcpy(__dst, v14, v15);
      }
    }
    else
    {
      if (v15 < 0x10)
      {
        v26 = __dst;
      }
      else
      {
        v26 = &__dst[v15 & 0xFFFFFFF0];
        v27 = (unsigned __int128 *)__dst;
        do
        {
          v28 = (unsigned __int128)vld2q_s8(v14);
          v14 += 32;
          *v27++ = v28;
        }
        while (v27 != (unsigned __int128 *)v26);
      }
      while (v26 != &__dst[v15])
      {
        v35 = *v14;
        v14 += 2;
        *v26++ = v35;
      }
    }
    v16 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v16 = 0;
  }
  v17 = &__dst[v16];
  if (a3)
  {
    v18 = *(char **)(a3 + 8);
    v19 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v19 == 1)
      {
        *v17 = *v18;
      }
      else if ((_DWORD)v19)
      {
        memcpy(v17, v18, v19);
      }
    }
    else
    {
      if (v19 < 0x10)
      {
        v29 = v17;
      }
      else
      {
        v29 = &v17[v19 & 0xFFFFFFF0];
        v30 = (unsigned __int128 *)v17;
        do
        {
          v31 = (unsigned __int128)vld2q_s8(v18);
          v18 += 32;
          *v30++ = v31;
        }
        while (v30 != (unsigned __int128 *)v29);
      }
      while (v29 != &v17[v19])
      {
        v36 = *v18;
        v18 += 2;
        *v29++ = v36;
      }
    }
    v20 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v17[v20];
  if (a4)
  {
    v22 = *(char **)(a4 + 8);
    v23 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v23 == 1)
      {
        *v21 = *v22;
      }
      else if ((_DWORD)v23)
      {
        memcpy(v21, v22, v23);
      }
    }
    else
    {
      if (v23 < 0x10)
      {
        v32 = (unsigned __int128 *)&v17[v20];
      }
      else
      {
        v32 = (unsigned __int128 *)&v21[v23 & 0xFFFFFFF0];
        v33 = (unsigned __int128 *)&v17[v20];
        do
        {
          v34 = (unsigned __int128)vld2q_s8(v22);
          v22 += 32;
          *v33++ = v34;
        }
        while (v33 != v32);
      }
      while (v32 != (unsigned __int128 *)&v21[v23])
      {
        v37 = *v22;
        v22 += 2;
        *(_BYTE *)v32 = v37;
        v32 = (unsigned __int128 *)((char *)v32 + 1);
      }
    }
    v24 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v24 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v21[v24], a5, a6, a7);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  uint64_t v29;
  char *v30;
  int8x16_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  uint64_t v44;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;

  if (a2)
  {
    v16 = *(int8x16_t **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v18 = &__dst[2 * v17];
      if (v17 >= 0x40)
      {
        v19 = &__dst[2 * (v17 & 0xFFFFFFC0)];
        v20 = 0uLL;
        v21 = __dst;
        do
        {
          v46.val[0] = *v16;
          v22 = v16[1];
          v48.val[0] = v16[2];
          v23 = v16[3];
          v16 += 4;
          v24 = v23;
          v48.val[1] = 0uLL;
          v50.val[0] = v22;
          v46.val[1] = 0uLL;
          v25 = v21;
          vst2q_s8(v25, v46);
          v25 += 32;
          v50.val[1] = 0uLL;
          vst2q_s8(v25, v50);
          v26 = v21 + 64;
          vst2q_s8(v26, v48);
          v27 = v21 + 96;
          vst2q_s8(v27, *(int8x16x2_t *)(&v20 - 1));
          v21 += 128;
        }
        while (v21 != v19);
      }
      else
      {
        v19 = __dst;
      }
      while (v19 != v18)
      {
        v28 = v16->u8[0];
        v16 = (int8x16_t *)((char *)v16 + 1);
        *(_WORD *)v19 = v28;
        v19 += 2;
      }
    }
    else if ((_DWORD)v17 == 1)
    {
      *(_WORD *)__dst = v16->i16[0];
    }
    else if ((_DWORD)v17)
    {
      memcpy(__dst, v16, 2 * v17);
    }
    v29 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v29 = 0;
  }
  v30 = &__dst[2 * v29];
  if (a3)
  {
    v31 = *(int8x16_t **)(a3 + 8);
    v32 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v33 = &v30[2 * v32];
      if (v32 >= 0x40)
      {
        v34 = &v30[2 * (v32 & 0xFFFFFFC0)];
        v35 = 0uLL;
        v36 = v30;
        do
        {
          v47.val[0] = *v31;
          v37 = v31[1];
          v49.val[0] = v31[2];
          v38 = v31[3];
          v31 += 4;
          v39 = v38;
          v49.val[1] = 0uLL;
          v51.val[0] = v37;
          v47.val[1] = 0uLL;
          v40 = v36;
          vst2q_s8(v40, v47);
          v40 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v40, v51);
          v41 = v36 + 64;
          vst2q_s8(v41, v49);
          v42 = v36 + 96;
          vst2q_s8(v42, *(int8x16x2_t *)(&v35 - 1));
          v36 += 128;
        }
        while (v36 != v34);
      }
      else
      {
        v34 = v30;
      }
      while (v34 != v33)
      {
        v43 = v31->u8[0];
        v31 = (int8x16_t *)((char *)v31 + 1);
        *(_WORD *)v34 = v43;
        v34 += 2;
      }
    }
    else if ((_DWORD)v32 == 1)
    {
      *(_WORD *)v30 = v31->i16[0];
    }
    else if ((_DWORD)v32)
    {
      memcpy(v30, v31, 2 * v32);
    }
    v44 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v44 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v30[2 * v44], a4, a5, a6, a7, a8);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int8x16_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  char *v26;
  int8x16_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  uint64_t v40;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;

  if (a2)
  {
    v12 = *(int8x16_t **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v14 = &__dst[2 * v13];
      if (v13 >= 0x40)
      {
        v15 = &__dst[2 * (v13 & 0xFFFFFFC0)];
        v16 = 0uLL;
        v17 = __dst;
        do
        {
          v42.val[0] = *v12;
          v18 = v12[1];
          v44.val[0] = v12[2];
          v19 = v12[3];
          v12 += 4;
          v20 = v19;
          v44.val[1] = 0uLL;
          v46.val[0] = v18;
          v42.val[1] = 0uLL;
          v21 = v17;
          vst2q_s8(v21, v42);
          v21 += 32;
          v46.val[1] = 0uLL;
          vst2q_s8(v21, v46);
          v22 = v17 + 64;
          vst2q_s8(v22, v44);
          v23 = v17 + 96;
          vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
          v17 += 128;
        }
        while (v17 != v15);
      }
      else
      {
        v15 = __dst;
      }
      while (v15 != v14)
      {
        v24 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)v15 = v24;
        v15 += 2;
      }
    }
    else if ((_DWORD)v13 == 1)
    {
      *(_WORD *)__dst = v12->i16[0];
    }
    else if ((_DWORD)v13)
    {
      memcpy(__dst, v12, 2 * v13);
    }
    v25 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v25 = 0;
  }
  v26 = &__dst[2 * v25];
  if (a3)
  {
    v27 = *(int8x16_t **)(a3 + 8);
    v28 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v29 = &v26[2 * v28];
      if (v28 >= 0x40)
      {
        v30 = &v26[2 * (v28 & 0xFFFFFFC0)];
        v31 = 0uLL;
        v32 = v26;
        do
        {
          v43.val[0] = *v27;
          v33 = v27[1];
          v45.val[0] = v27[2];
          v34 = v27[3];
          v27 += 4;
          v35 = v34;
          v45.val[1] = 0uLL;
          v47.val[0] = v33;
          v43.val[1] = 0uLL;
          v36 = v32;
          vst2q_s8(v36, v43);
          v36 += 32;
          v47.val[1] = 0uLL;
          vst2q_s8(v36, v47);
          v37 = v32 + 64;
          vst2q_s8(v37, v45);
          v38 = v32 + 96;
          vst2q_s8(v38, *(int8x16x2_t *)(&v31 - 1));
          v32 += 128;
        }
        while (v32 != v30);
      }
      else
      {
        v30 = v26;
      }
      while (v30 != v29)
      {
        v39 = v27->u8[0];
        v27 = (int8x16_t *)((char *)v27 + 1);
        *(_WORD *)v30 = v39;
        v30 += 2;
      }
    }
    else if ((_DWORD)v28 == 1)
    {
      *(_WORD *)v26 = v27->i16[0];
    }
    else if ((_DWORD)v28)
    {
      memcpy(v26, v27, 2 * v28);
    }
    v40 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v40 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v26[2 * v40], a4, a5, a6);
}

uint64_t JSC::Wasm::ConstExprGenerator::createNewStruct(JSC::Wasm::ConstExprGenerator *this, JSC::Wasm *a2, JSC::Wasm::Instance *a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  JSC::HandleSet *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  JSC::HandleSet *v36;

  v9 = *((_QWORD *)a2 + 1);
  result = JSC::Wasm::structNew(a2, a3, 1, 0, a5, a6, a7, a8);
  if (result)
  {
    if ((result & 0xFFFE000000000002) != 0)
    {
      v18 = 0;
    }
    else if (*(unsigned __int8 *)(result + 5) <= 0x16u)
    {
      v18 = 0;
    }
    else
    {
      v18 = result;
    }
    v19 = *(_QWORD *)(v9 + 712);
    if (!v19)
    {
      v35 = v18;
      result = (uint64_t)JSC::HandleSet::grow((JSC::HandleSet *)(v9 + 672), v11, v12, v13, v14, v15, v16, v17);
      v18 = v35;
      v19 = *(_QWORD *)(v9 + 712);
    }
    *(_QWORD *)(v9 + 712) = *(_QWORD *)v19;
    *(_QWORD *)(v19 + 16) = 0;
    v20 = (uint64_t *)(v19 + 16);
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    v21 = v19 & 0xFFFFFFFFFFFFF000;
    if (v18)
    {
      v22 = *(unint64_t **)((v19 & 0xFFFFFFFFFFFFF000) + 0x10);
      v23 = v22[3];
      v22 += 3;
      *(_QWORD *)v19 = v23;
      *(_QWORD *)(v19 + 8) = v22;
      *v22 = v19;
      *(_QWORD *)(v23 + 8) = v19;
    }
    *v20 = v18;
    *(_BYTE *)this = 3;
    v24 = *(JSC::HandleSet **)((v19 & 0xFFFFFFFFFFFFF000) + 0x10);
    v25 = (_QWORD *)*((_QWORD *)v24 + 5);
    if (!v25)
    {
      v34 = (_QWORD *)v19;
      v36 = *(JSC::HandleSet **)((v19 & 0xFFFFFFFFFFFFF000) + 0x10);
      v33 = v19 & 0xFFFFFFFFFFFFF000;
      result = (uint64_t)JSC::HandleSet::grow(v24, v11, v12, v13, v14, v15, v16, v17);
      v21 = v33;
      v19 = (unint64_t)v34;
      v24 = v36;
      v25 = (_QWORD *)*((_QWORD *)v36 + 5);
    }
    *((_QWORD *)v24 + 5) = *v25;
    v25[2] = 0;
    v26 = v25 + 2;
    *v25 = 0;
    v25[1] = 0;
    *((_QWORD *)this + 3) = v25 + 2;
    v27 = *v20;
    if (*v20)
    {
      v28 = *(_QWORD **)(((unint64_t)(v26 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = v28[3];
      v28 += 3;
      *(v26 - 2) = v29;
      *(v26 - 1) = (uint64_t)v28;
      *v28 = v26 - 2;
      *(_QWORD *)(v29 + 8) = v26 - 2;
    }
    *v26 = v27;
    v30 = *(_QWORD *)(v21 + 16);
    v31 = *(_QWORD **)(v19 + 8);
    if (v31)
    {
      v32 = *(_QWORD *)v19;
      *v31 = *(_QWORD *)v19;
      *(_QWORD *)(v32 + 8) = v31;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
    }
    *(_QWORD *)v19 = *(_QWORD *)(v30 + 40);
    *(_QWORD *)(v30 + 40) = v19;
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

unint64_t JSC::Wasm::structNew(JSC::Wasm *this, JSC::Wasm::Instance *a2, char a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  JSC::Wasm::TypeDefinition *v16;
  int v17;
  char *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t (*v78)(_QWORD *);
  _QWORD *v79;
  unsigned int *v80;
  WTF *v81;
  uint64_t v82;
  _BOOL4 hasRecursiveReference;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t CachedUnrolling;
  uint64_t v89;
  uint64_t v90;
  const JSC::Wasm::Type *v91;
  char v92;
  const JSC::Wasm::TypeDefinition *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  JSC::Wasm::TypeInformation *v99;
  WTF *v100;
  _QWORD v101[3];

  v8 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*(_DWORD *)(v8 + 100) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198CCF140);
  }
  v13 = *((_QWORD *)this + 3);
  v14 = *((_QWORD *)this + 4);
  v15 = a2;
  v16 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v8 + 88) + 8 * a2);
  if (*((_DWORD *)v16 + 8) == 4)
  {
    v99 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v8 + 88) + 8 * a2);
    v80 = (unsigned int *)*((_QWORD *)v16 + 1);
    v81 = *(WTF **)v80;
    v16 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v80 + 8) + 8 * v80[2]);
    v82 = a2;
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v16);
    v15 = v82;
    if (hasRecursiveReference)
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v99, v84, v85, v86, v87, a6, a7, a8);
      if (v92)
      {
        v16 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v16 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v16, v81, v89, v90, v91, a6, a7, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v99, v16, v93, v94, v95, v96, v97, v98);
      }
      v15 = v82;
    }
  }
  v17 = *((_DWORD *)v16 + 8);
  if (v17 == 5)
  {
    v16 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v16 + 1);
    v17 = *((_DWORD *)v16 + 8);
  }
  if (v17 == 1)
    v18 = (char *)v16 + 8;
  else
    v18 = 0;
  v19 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*(_DWORD *)(v19 + 284) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198CCF148);
  }
  v20 = *(unsigned int **)(*(_QWORD *)(v19 + 272) + 8 * v15);
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v22 = *(_QWORD *)(v14 + 1424);
  if ((v22 & 1) != 0)
  {
    v78 = *(uint64_t (**)(_QWORD *))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    v79 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v14 & 8) != 0)
      v79 = (_QWORD *)(v14 - 16);
    v101[0] = *v79;
    v101[1] = v14;
    v101[2] = v14 + 1424;
    v22 = v78(v101);
    if (v20)
      goto LABEL_13;
  }
  else if (v20)
  {
    do
LABEL_13:
      v23 = __ldaxr(v20);
    while (__stlxr(v23 + 1, v20));
  }
  v100 = (WTF *)v20;
  v31 = JSC::JSWebAssemblyStruct::tryCreate(v14, v22, v13, (uint64_t)a2, (const JSC::Wasm::Type *)&v100, a6, a7, a8);
  v32 = (unsigned int *)v100;
  v100 = 0;
  if (!v32)
    goto LABEL_17;
  do
  {
    v33 = __ldaxr(v32);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v32));
  if (v34)
  {
LABEL_17:
    if (v31)
      goto LABEL_18;
LABEL_93:
    v31 = 2;
    if (!v20)
      return v31;
    goto LABEL_84;
  }
  atomic_store(1u, v32);
  WTF::fastFree((unint64_t)v32, v24, v25, v26, v27, v28, v29, v30);
  if (!v31)
    goto LABEL_93;
LABEL_18:
  LODWORD(v35) = *((_DWORD *)v18 + 2);
  if ((a3 & 1) != 0)
  {
    if ((_DWORD)v35)
    {
      v36 = 0;
      v37 = 0;
      while (1)
      {
        v38 = (unsigned __int8 *)(*(_QWORD *)v18 + v36);
        if (*((_DWORD *)v38 + 4))
          break;
        v40 = *v38;
        v41 = *((_QWORD *)v38 + 1);
        if (v40 != 251 || v41 != 0)
        {
          if (BYTE1(dword_1ECF4C7B0))
            v43 = 29;
          else
            v43 = 17;
          v39 = 2 * ((v43 + v40) < 2u);
          goto LABEL_31;
        }
        v54 = *(_QWORD *)(v31 + 24);
        v53 = *(_QWORD *)(v31 + 32);
        if (v53)
          v55 = v53 + 4;
        else
          v55 = 0;
        if (*(_DWORD *)(v54 + 32) == 1)
          v56 = v54 + 8;
        else
          v56 = 0;
        v57 = (_QWORD *)(v55
                       + (*(_DWORD *)(*(_QWORD *)v56 + 32 * *(unsigned int *)(v56 + 8) + 4 * v37) - 4));
        *v57 = 0;
        v57[1] = 0;
LABEL_54:
        ++v37;
        v36 += 32;
        if (v37 >= *((unsigned int *)v18 + 2))
          goto LABEL_83;
      }
      v39 = 0;
LABEL_31:
      v45 = *(_QWORD *)(v31 + 24);
      v44 = *(_QWORD *)(v31 + 32);
      if (v44)
        v46 = v44 + 4;
      else
        v46 = 0;
      v49 = *(_QWORD *)(v45 + 8);
      v47 = v45 + 8;
      v48 = v49;
      if (*(_DWORD *)(v47 + 24) != 1)
        v47 = 0;
      v50 = (*(_DWORD *)(*(_QWORD *)v47 + 32 * *(unsigned int *)(v47 + 8) + 4 * v37) - 4);
      v51 = (unsigned __int8 *)(v48 + v36);
      if (*((_DWORD *)v51 + 4) == 1)
      {
        if (*v51 == 248)
          *(_BYTE *)(v46 + v50) = v39;
        else
          *(_WORD *)(v46 + v50) = v39;
      }
      else
      {
        v52 = *v51;
        if (v52 > 251)
        {
          switch(v52)
          {
            case 252:
            case 254:
              goto LABEL_53;
            case 253:
            case 255:
              *(_DWORD *)(v46 + v50) = v39;
              break;
            default:
              goto LABEL_54;
          }
        }
        else if ((v52 - 227) < 2 || (v52 - 234) < 2 || (v52 - 239) < 2)
        {
LABEL_53:
          *(_QWORD *)(v46 + v50) = v39;
        }
      }
      goto LABEL_54;
    }
  }
  else if ((_DWORD)v35)
  {
    v58 = 0;
    v59 = 0;
    v60 = v31 - 16;
    if ((v31 & 8) != 0)
      v61 = (uint64_t *)(v31 - 16);
    else
      v61 = (uint64_t *)(v31 & 0xFFFFFFFFFFFFC000 | 8);
    v62 = -1;
    do
    {
      v63 = *(_QWORD *)(a4 + 8 * (v35 + v62));
      v65 = *(_QWORD *)(v31 + 24);
      v64 = *(_QWORD *)(v31 + 32);
      if (v64)
        v66 = v64 + 4;
      else
        v66 = 0;
      v69 = *(_QWORD *)(v65 + 8);
      v67 = v65 + 8;
      v68 = v69;
      if (*(_DWORD *)(v67 + 24) != 1)
        v67 = 0;
      v70 = (*(_DWORD *)(*(_QWORD *)v67 + 32 * *(unsigned int *)(v67 + 8) + 4 * v59) - 4);
      v71 = (unsigned __int8 *)(v68 + v58);
      if (*((_DWORD *)v71 + 4) == 1)
      {
        if (*v71 == 248)
          *(_BYTE *)(v66 + v70) = v63;
        else
          *(_WORD *)(v66 + v70) = v63;
      }
      else
      {
        v72 = *v71;
        if (v72 > 251)
        {
          switch(v72)
          {
            case 252:
            case 254:
              *(_QWORD *)(v66 + v70) = v63;
              break;
            case 253:
            case 255:
              *(_DWORD *)(v66 + v70) = v63;
              break;
            default:
              break;
          }
        }
        else if ((v72 - 227) < 2 || (v72 - 234) < 2 || (v72 - 239) < 2)
        {
          v73 = *v61;
          *(_QWORD *)(v66 + v70) = v63;
          if (v63)
          {
            if ((v63 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v73 + 760) >= *(unsigned __int8 *)(v31 + 7))
            {
              v74 = v60;
              JSC::Heap::writeBarrierSlowPath(v73 + 192, v31);
              v60 = v74;
            }
          }
        }
      }
      ++v59;
      v35 = *((unsigned int *)v18 + 2);
      --v62;
      v58 += 32;
    }
    while (v59 < v35);
  }
LABEL_83:
  if (v20)
  {
    do
    {
LABEL_84:
      v75 = __ldaxr(v20);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v20));
    if (!v76)
    {
      atomic_store(1u, v20);
      WTF::fastFree((unint64_t)v20, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  return v31;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, int **a9@<X8>, uint64_t *a10)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;

  v10 = a1[1];
  if (v10)
  {
    --v10;
    v26 = *a1;
    if (v10 >> 31)
      goto LABEL_13;
  }
  else
  {
    v26 = *a1;
  }
  v27 = v10;
  v25 = *a2;
  v11 = a3[1];
  if (v11)
  {
    --v11;
    v23 = *a3;
    if (v11 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198CCF268);
    }
  }
  else
  {
    v23 = *a3;
  }
  v24 = v11;
  v22 = *a4;
  v12 = *a5;
  v20 = *a6;
  v21 = v12;
  v13 = *a7;
  v18 = *a8;
  v19 = v13;
  v14 = a10[1];
  if (v14)
  {
    --v14;
    v16 = *a10;
    if (!(v14 >> 31))
      goto LABEL_7;
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198CCF238);
  }
  v16 = *a10;
LABEL_7:
  v17 = v14;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v26, &v25, (uint64_t)&v23, &v22, &v21, &v20, &v19, &v18, a9, (uint64_t)&v16);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, int **a9@<X8>, uint64_t a10)
{
  int v19;
  int v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t result;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  _BYTE v33[4];
  unsigned int v34;

  v19 = 0;
  v20 = *(_DWORD *)(a1 + 8);
  v21 = *a2;
  do
  {
    ++v19;
    v22 = v21 > 9;
    v21 /= 0xAuLL;
  }
  while (v22);
  if (*a4)
    v23 = *(_DWORD *)(*a4 + 4);
  else
    v23 = 0;
  if (*a5)
    v24 = *(_DWORD *)(*a5 + 4);
  else
    v24 = 0;
  if (*a6)
    v25 = *(_DWORD *)(*a6 + 4);
  else
    v25 = 0;
  v26 = *(unsigned int *)(a3 + 8);
  if (*a7)
    v27 = *(_DWORD *)(*a7 + 4);
  else
    v27 = 0;
  if (*a8)
    v28 = *(_DWORD *)(*a8 + 4);
  else
    v28 = 0;
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v20, v19, v26, v23, v24, v25, v27, v28, (uint64_t)v33, *(_DWORD *)(a10 + 8));
  if (v33[0])
  {
    *a9 = 0;
  }
  else
  {
    v30 = *a4;
    if (!*a4 || (*(_BYTE *)(v30 + 16) & 4) != 0)
    {
      v32 = *a5;
      v31 = (!*a5 || (*(_BYTE *)(v32 + 16) & 4) != 0)
         && (!*a6 || (*(_BYTE *)(*a6 + 16) & 4) != 0)
         && (!*a7 || (*(_BYTE *)(*a7 + 16) & 4) != 0)
         && (!*a8 || (*(_BYTE *)(*a8 + 16) & 4) != 0);
    }
    else
    {
      v31 = 0;
      v32 = *a5;
    }
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v34, v31, *(_OWORD **)a1, *(_QWORD *)(a1 + 8), *a2, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v30, a9, v32, *a6, *a7, *a8, *(char **)a10, *(_QWORD *)(a10 + 8));
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15)
{
  int v19;
  int **v20;
  int *v22;
  _BYTE *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  _WORD *v38;
  unsigned int v40;
  char *v41;
  char *v42;
  int8x16_t *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  int v50;
  char *v51;
  __int128 v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  char *v56;
  char *v57;
  char *v58;
  __int16 v59;
  _QWORD v62[5];
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;

  v19 = result;
  v20 = a9;
  v62[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v62);
        v22 = (int *)v62[0];
        if (v62[0])
        {
          v23 = (_BYTE *)(v62[0] + 20);
          *(_DWORD *)v62[0] = 2;
          v22[1] = v19;
          *((_QWORD *)v22 + 1) = v22 + 5;
          v22[4] = 4;
          if (a4 == 1)
          {
            *v23 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v22 + 5, a3, a4);
          }
          v47 = 0;
          v48 = a5;
          do
          {
            *((_BYTE *)&v62[3] + v47--) = (v48 % 0xA) | 0x30;
            v37 = v48 > 9;
            v48 /= 0xAuLL;
          }
          while (v37);
          v49 = &v23[a4];
          if (v47 + 26 <= 25)
            memcpy(&v23[a4], (char *)&v62[3] + v47 + 1, -v47);
          v50 = 0;
          v20 = a9;
          do
          {
            ++v50;
            v37 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v37);
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v49[v50], a6->i8, a7, a8, a10, a11, a12, a13, a14, a15);
        }
        goto LABEL_41;
      }
LABEL_43:
      v22 = 0;
      goto LABEL_41;
    }
LABEL_42:
    v22 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_41;
  }
  if (!(_DWORD)result)
    goto LABEL_42;
  if (result > 0x7FFFFFEF)
    goto LABEL_43;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v62);
  v22 = (int *)v62[0];
  if (v62[0])
  {
    v24 = (char *)(v62[0] + 20);
    *(_DWORD *)v62[0] = 2;
    v22[1] = v19;
    *((_QWORD *)v22 + 1) = v22 + 5;
    v22[4] = 0;
    v25 = (uint64_t)v22 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v26 = &v24[2 * (a4 & 0xFFFFFFC0)];
      v27 = 0uLL;
      do
      {
        v63.val[0] = (int8x16_t)*a3;
        v28 = *((int8x16_t *)a3 + 1);
        v65.val[0] = (int8x16_t)a3[2];
        v29 = a3[3];
        a3 += 4;
        v30 = v29;
        v65.val[1] = 0uLL;
        v67.val[0] = v28;
        v63.val[1] = 0uLL;
        v31 = v24;
        vst2q_s8(v31, v63);
        v31 += 32;
        v67.val[1] = 0uLL;
        vst2q_s8(v31, v67);
        v32 = v24 + 64;
        vst2q_s8(v32, v65);
        v33 = v24 + 96;
        vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
        v24 += 128;
      }
      while (v24 != v26);
      v24 = v26;
    }
    while (v24 != (char *)v25)
    {
      v34 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v24 = v34;
      v24 += 2;
    }
    v35 = 0;
    v36 = a5;
    do
    {
      *((_BYTE *)&v62[3] + v35--) = (v36 % 0xA) | 0x30;
      v37 = v36 > 9;
      v36 /= 0xAuLL;
    }
    while (v37);
    if (v35 + 26 <= 25)
    {
      v38 = (_WORD *)v22 + a4 + 10;
      do
        *v38++ = *((unsigned __int8 *)&v62[3] + v35 + 1);
      while (!__CFADD__(v35++, 1));
    }
    v40 = 0;
    do
    {
      ++v40;
      v37 = a5 > 9;
      a5 /= 0xAuLL;
    }
    while (v37);
    v41 = (char *)(v25 + 2 * v40);
    v42 = &v41[2 * a7];
    if ((a7 & 0xFFFFFFC0) != 0)
    {
      v51 = &v41[2 * (a7 & 0xFFFFFFC0)];
      v52 = 0uLL;
      v43 = (int8x16_t *)a14;
      v44 = a15;
      v45 = a11;
      v46 = a12;
      do
      {
        v64.val[0] = *a6;
        v53 = a6[1];
        v66.val[0] = a6[2];
        v54 = a6[3];
        a6 += 4;
        v55 = v54;
        v66.val[1] = 0uLL;
        v68.val[0] = v53;
        v64.val[1] = 0uLL;
        v56 = v41;
        vst2q_s8(v56, v64);
        v56 += 32;
        v68.val[1] = 0uLL;
        vst2q_s8(v56, v68);
        v57 = v41 + 64;
        vst2q_s8(v57, v66);
        v58 = v41 + 96;
        vst2q_s8(v58, *(int8x16x2_t *)(&v52 - 1));
        v41 += 128;
      }
      while (v41 != v51);
      v41 = v51;
    }
    else
    {
      v43 = (int8x16_t *)a14;
      v44 = a15;
      v45 = a11;
      v46 = a12;
    }
    while (v41 != v42)
    {
      v59 = a6->u8[0];
      a6 = (int8x16_t *)((char *)a6 + 1);
      *(_WORD *)v41 = v59;
      v41 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v42, a8, a10, v45, v46, a13, v43, v44);
  }
LABEL_41:
  *v20 = v22;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10)
{
  char *v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  char *v26;
  unsigned __int128 *v27;
  unsigned __int128 v28;
  unsigned __int128 *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  char v32;
  char v33;

  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    memcpy(__dst, a2, a3);
  }
  v17 = &__dst[a3];
  if (a4)
  {
    v18 = *(char **)(a4 + 8);
    v19 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v19 == 1)
      {
        *v17 = *v18;
      }
      else if ((_DWORD)v19)
      {
        memcpy(v17, v18, v19);
      }
    }
    else
    {
      if (v19 < 0x10)
      {
        v26 = v17;
      }
      else
      {
        v26 = &v17[v19 & 0xFFFFFFF0];
        v27 = (unsigned __int128 *)v17;
        do
        {
          v28 = (unsigned __int128)vld2q_s8(v18);
          v18 += 32;
          *v27++ = v28;
        }
        while (v27 != (unsigned __int128 *)v26);
      }
      while (v26 != &v17[v19])
      {
        v32 = *v18;
        v18 += 2;
        *v26++ = v32;
      }
    }
    v20 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v17[v20];
  if (a5)
  {
    v22 = *(char **)(a5 + 8);
    v23 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v23 == 1)
      {
        *v21 = *v22;
      }
      else if ((_DWORD)v23)
      {
        memcpy(v21, v22, v23);
      }
    }
    else
    {
      if (v23 < 0x10)
      {
        v29 = (unsigned __int128 *)&v17[v20];
      }
      else
      {
        v29 = (unsigned __int128 *)&v21[v23 & 0xFFFFFFF0];
        v30 = (unsigned __int128 *)&v17[v20];
        do
        {
          v31 = (unsigned __int128)vld2q_s8(v22);
          v22 += 32;
          *v30++ = v31;
        }
        while (v30 != v29);
      }
      while (v29 != (unsigned __int128 *)&v21[v23])
      {
        v33 = *v22;
        v22 += 2;
        *(_BYTE *)v29 = v33;
        v29 = (unsigned __int128 *)((char *)v29 + 1);
      }
    }
    v24 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v24 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v21[v24], a6, a7, a8, a9, a10);
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, char *__src, unsigned int a6)
{
  char *v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  char *result;
  char *v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  char *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  unsigned __int128 *v30;
  unsigned __int128 *v31;
  unsigned __int128 v32;
  char v33;
  char v34;
  char v35;

  if (a2)
  {
    v12 = *(char **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v13 == 1)
      {
        *__dst = *v12;
      }
      else if ((_DWORD)v13)
      {
        memcpy(__dst, v12, v13);
      }
    }
    else
    {
      if (v13 < 0x10)
      {
        v24 = __dst;
      }
      else
      {
        v24 = &__dst[v13 & 0xFFFFFFF0];
        v25 = (unsigned __int128 *)__dst;
        do
        {
          v26 = (unsigned __int128)vld2q_s8(v12);
          v12 += 32;
          *v25++ = v26;
        }
        while (v25 != (unsigned __int128 *)v24);
      }
      while (v24 != &__dst[v13])
      {
        v33 = *v12;
        v12 += 2;
        *v24++ = v33;
      }
    }
    v14 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v14 = 0;
  }
  v15 = &__dst[v14];
  if (a3)
  {
    v16 = *(char **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v17 == 1)
      {
        *v15 = *v16;
      }
      else if ((_DWORD)v17)
      {
        memcpy(v15, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v27 = v15;
      }
      else
      {
        v27 = &v15[v17 & 0xFFFFFFF0];
        v28 = (unsigned __int128 *)v15;
        do
        {
          v29 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v28++ = v29;
        }
        while (v28 != (unsigned __int128 *)v27);
      }
      while (v27 != &v15[v17])
      {
        v34 = *v16;
        v16 += 2;
        *v27++ = v34;
      }
    }
    v18 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v15[v18];
  if (a4)
  {
    v20 = *(char **)(a4 + 8);
    v21 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v21 == 1)
      {
        *v19 = *v20;
      }
      else if ((_DWORD)v21)
      {
        memcpy(v19, v20, v21);
      }
    }
    else
    {
      if (v21 < 0x10)
      {
        v30 = (unsigned __int128 *)&v15[v18];
      }
      else
      {
        v30 = (unsigned __int128 *)&v19[v21 & 0xFFFFFFF0];
        v31 = (unsigned __int128 *)&v15[v18];
        do
        {
          v32 = (unsigned __int128)vld2q_s8(v20);
          v20 += 32;
          *v31++ = v32;
        }
        while (v31 != v30);
      }
      while (v30 != (unsigned __int128 *)&v19[v21])
      {
        v35 = *v20;
        v20 += 2;
        *(_BYTE *)v30 = v35;
        v30 = (unsigned __int128 *)((char *)v30 + 1);
      }
    }
    v22 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v22 = 0;
  }
  result = &v19[v22];
  if (a6 == 1)
  {
    *result = *__src;
  }
  else if (a6)
  {
    return (char *)memcpy(result, __src, a6);
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int8x16_t *a7, int a8)
{
  int8x16_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  uint64_t v29;
  char *v30;
  int8x16_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  uint64_t v44;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;

  if (a2)
  {
    v16 = *(int8x16_t **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v18 = &__dst[2 * v17];
      if (v17 >= 0x40)
      {
        v19 = &__dst[2 * (v17 & 0xFFFFFFC0)];
        v20 = 0uLL;
        v21 = __dst;
        do
        {
          v46.val[0] = *v16;
          v22 = v16[1];
          v48.val[0] = v16[2];
          v23 = v16[3];
          v16 += 4;
          v24 = v23;
          v48.val[1] = 0uLL;
          v50.val[0] = v22;
          v46.val[1] = 0uLL;
          v25 = v21;
          vst2q_s8(v25, v46);
          v25 += 32;
          v50.val[1] = 0uLL;
          vst2q_s8(v25, v50);
          v26 = v21 + 64;
          vst2q_s8(v26, v48);
          v27 = v21 + 96;
          vst2q_s8(v27, *(int8x16x2_t *)(&v20 - 1));
          v21 += 128;
        }
        while (v21 != v19);
      }
      else
      {
        v19 = __dst;
      }
      while (v19 != v18)
      {
        v28 = v16->u8[0];
        v16 = (int8x16_t *)((char *)v16 + 1);
        *(_WORD *)v19 = v28;
        v19 += 2;
      }
    }
    else if ((_DWORD)v17 == 1)
    {
      *(_WORD *)__dst = v16->i16[0];
    }
    else if ((_DWORD)v17)
    {
      memcpy(__dst, v16, 2 * v17);
    }
    v29 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v29 = 0;
  }
  v30 = &__dst[2 * v29];
  if (a3)
  {
    v31 = *(int8x16_t **)(a3 + 8);
    v32 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v33 = &v30[2 * v32];
      if (v32 >= 0x40)
      {
        v34 = &v30[2 * (v32 & 0xFFFFFFC0)];
        v35 = 0uLL;
        v36 = v30;
        do
        {
          v47.val[0] = *v31;
          v37 = v31[1];
          v49.val[0] = v31[2];
          v38 = v31[3];
          v31 += 4;
          v39 = v38;
          v49.val[1] = 0uLL;
          v51.val[0] = v37;
          v47.val[1] = 0uLL;
          v40 = v36;
          vst2q_s8(v40, v47);
          v40 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v40, v51);
          v41 = v36 + 64;
          vst2q_s8(v41, v49);
          v42 = v36 + 96;
          vst2q_s8(v42, *(int8x16x2_t *)(&v35 - 1));
          v36 += 128;
        }
        while (v36 != v34);
      }
      else
      {
        v34 = v30;
      }
      while (v34 != v33)
      {
        v43 = v31->u8[0];
        v31 = (int8x16_t *)((char *)v31 + 1);
        *(_WORD *)v34 = v43;
        v34 += 2;
      }
    }
    else if ((_DWORD)v32 == 1)
    {
      *(_WORD *)v30 = v31->i16[0];
    }
    else if ((_DWORD)v32)
    {
      memcpy(v30, v31, 2 * v32);
    }
    v44 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v44 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v30[2 * v44], a4, a5, a6, a7, a8);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t *a5, int a6)
{
  int8x16_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  char *v26;
  int8x16_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  uint64_t v40;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;

  if (a2)
  {
    v12 = *(int8x16_t **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v14 = &__dst[2 * v13];
      if (v13 >= 0x40)
      {
        v15 = &__dst[2 * (v13 & 0xFFFFFFC0)];
        v16 = 0uLL;
        v17 = __dst;
        do
        {
          v42.val[0] = *v12;
          v18 = v12[1];
          v44.val[0] = v12[2];
          v19 = v12[3];
          v12 += 4;
          v20 = v19;
          v44.val[1] = 0uLL;
          v46.val[0] = v18;
          v42.val[1] = 0uLL;
          v21 = v17;
          vst2q_s8(v21, v42);
          v21 += 32;
          v46.val[1] = 0uLL;
          vst2q_s8(v21, v46);
          v22 = v17 + 64;
          vst2q_s8(v22, v44);
          v23 = v17 + 96;
          vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
          v17 += 128;
        }
        while (v17 != v15);
      }
      else
      {
        v15 = __dst;
      }
      while (v15 != v14)
      {
        v24 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)v15 = v24;
        v15 += 2;
      }
    }
    else if ((_DWORD)v13 == 1)
    {
      *(_WORD *)__dst = v12->i16[0];
    }
    else if ((_DWORD)v13)
    {
      memcpy(__dst, v12, 2 * v13);
    }
    v25 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v25 = 0;
  }
  v26 = &__dst[2 * v25];
  if (a3)
  {
    v27 = *(int8x16_t **)(a3 + 8);
    v28 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v29 = &v26[2 * v28];
      if (v28 >= 0x40)
      {
        v30 = &v26[2 * (v28 & 0xFFFFFFC0)];
        v31 = 0uLL;
        v32 = v26;
        do
        {
          v43.val[0] = *v27;
          v33 = v27[1];
          v45.val[0] = v27[2];
          v34 = v27[3];
          v27 += 4;
          v35 = v34;
          v45.val[1] = 0uLL;
          v47.val[0] = v33;
          v43.val[1] = 0uLL;
          v36 = v32;
          vst2q_s8(v36, v43);
          v36 += 32;
          v47.val[1] = 0uLL;
          vst2q_s8(v36, v47);
          v37 = v32 + 64;
          vst2q_s8(v37, v45);
          v38 = v32 + 96;
          vst2q_s8(v38, *(int8x16x2_t *)(&v31 - 1));
          v32 += 128;
        }
        while (v32 != v30);
      }
      else
      {
        v30 = v26;
      }
      while (v30 != v29)
      {
        v39 = v27->u8[0];
        v27 = (int8x16_t *)((char *)v27 + 1);
        *(_WORD *)v30 = v39;
        v30 += 2;
      }
    }
    else if ((_DWORD)v28 == 1)
    {
      *(_WORD *)v26 = v27->i16[0];
    }
    else if ((_DWORD)v28)
    {
      memcpy(v26, v27, 2 * v28);
    }
    v40 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v40 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v26[2 * v40], a4, a5, a6);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF *v26;
  WTF::PrintStream *v27;
  float v28;
  double v29;
  const WTF::String *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  const WTF::String *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  float v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  int v73;
  char v74;
  void (**v75)(WTF::StringPrintStream *__hidden);
  WTF *v76;
  __int128 v77;
  _BYTE v78[128];
  void (**v79)(WTF::StringPrintStream *__hidden);
  unint64_t v80;
  __int128 v81;
  _BYTE v82[128];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v75 = off_1E3572250;
  v76 = (WTF *)v78;
  v77 = xmmword_199122F80;
  v78[0] = 0;
  v79 = off_1E3572250;
  v80 = (unint64_t)v82;
  v81 = xmmword_199122F80;
  v82[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v79, "%u", *a2);
  v79[5]((WTF::StringPrintStream *)&v79);
  v12 = v80;
  if (!v80)
  {
    v71 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v80, v81, (uint64_t *)&v71);
  v12 = v80;
  if ((_BYTE *)v80 != v82)
LABEL_5:
    WTF::fastFree(v12, v5, v6, v7, v8, v9, v10, v11);
  v79 = off_1E3572250;
  v80 = (unint64_t)v82;
  v81 = xmmword_199122F80;
  v82[0] = 0;
  if (*(_QWORD *)a3)
  {
    v14 = *(_QWORD *)(a3 + 8);
    v15 = v14 != 0;
    v16 = v14 - 1;
    if (!v15)
      v16 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v16, (uint64_t)&v72, v13);
  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 0;
    v72 = (WTF::StringImpl *)v17;
    v73 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v79, "StringView", &v72);
  if (v73 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v73])(&v74, &v72);
  v79[5]((WTF::StringPrintStream *)&v79);
  v79[5]((WTF::StringPrintStream *)&v79);
  v25 = v80;
  if (!v80)
  {
    v72 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>(v80, v81, (uint64_t *)&v72);
  v25 = v80;
  if ((_BYTE *)v80 != v82)
LABEL_17:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v26 = (WTF *)((uint64_t (*)(_QWORD))v75[4])(&v75);
  v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v26 + 32))(v26);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v79, v28);
  WTF::printExpectedCStringHelper(v27, "StringView", &v79);
  if ((_DWORD)v80 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v80])(&v74, &v79);
  v29 = (*(double (**)(WTF *))(*(_QWORD *)v26 + 40))(v26);
  WTF::printInternal(v26, (WTF::PrintStream *)&v71, v30, v31, v32, v33, v34, v35, v29, v36);
  WTF::printInternal(v26, (WTF::PrintStream *)&v72, v37, v38, v39, v40, v41, v42, v43, v44);
  v75[5]((WTF::StringPrintStream *)&v75);
  v52 = v72;
  v72 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = v71;
  v71 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = v76;
  if (v76)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v76, v77, (uint64_t *)&v79);
    v54 = v76;
    *a1 = v79;
    if (v54 == (WTF *)v78)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v54, v45, v46, v47, v48, v49, v50, v51);
}

void JSC::Wasm::ConstExprGenerator::fail<char const*,unsigned int,char const*,unsigned long>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  int *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  int *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  const char *v106;
  int v107;
  int *v108;
  const char *v109;
  WTF *v110;
  __int128 v111;
  _BYTE v112[128];
  uint64_t v113;

  v8 = 0;
  v113 = *MEMORY[0x1E0C80C00];
  v9 = a3 + a2;
  do
  {
    v10 = (v9 % 0xA) | 0x30;
    v112[v8-- - 8] = v10;
    v11 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v11);
  if (v8 + 26 >= 27)
    __break(1u);
  if (v8)
  {
    if ((unint64_t)-v8 >> 31)
    {
      __break(0xC471u);
LABEL_54:
      JUMPOUT(0x198CD06BCLL);
    }
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v8));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = -(int)v8;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v8 == -1)
      *v13 = v10;
    else
      memcpy(v13, &v112[v8 - 7], -v8);
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v109 = (const char *)off_1E3572250;
  v110 = (WTF *)v112;
  v111 = xmmword_199122F80;
  v112[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v109, "%s", "get_global's index ");
  (*((void (**)(const char **))v109 + 5))(&v109);
  v21 = v110;
  if (!v110)
  {
    v100 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v100);
  v21 = v110;
  if (v110 != (WTF *)v112)
LABEL_14:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v109 = (const char *)off_1E3572250;
  v110 = (WTF *)v112;
  v111 = xmmword_199122F80;
  v112[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v109, "%u", a4);
  (*((void (**)(const char **))v109 + 5))(&v109);
  v29 = v110;
  if (!v110)
  {
    v99 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v99);
  v29 = v110;
  if (v110 != (WTF *)v112)
LABEL_19:
    WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
  v109 = (const char *)off_1E3572250;
  v110 = (WTF *)v112;
  v111 = xmmword_199122F80;
  v112[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v109, "%s", " exceeds the number of globals ");
  (*((void (**)(const char **))v109 + 5))(&v109);
  v37 = v110;
  if (!v110)
  {
    v98 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v98);
  v37 = v110;
  if (v110 != (WTF *)v112)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v109 = (const char *)off_1E3572250;
  v110 = (WTF *)v112;
  v111 = xmmword_199122F80;
  v112[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v109, "%lu", a5);
  (*((void (**)(const char **))v109 + 5))(&v109);
  v45 = v110;
  if (!v110)
  {
    v97 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v97);
  v45 = v110;
  if (v110 != (WTF *)v112)
LABEL_29:
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  v108 = v12;
  v109 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v110) = 41;
  v107 = 2;
  v105 = v100;
  v106 = ": ";
  v103 = v98;
  v104 = v99;
  v102 = v97;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v109, (uint64_t *)&v108, (uint64_t)&v106, (uint64_t *)&v105, (uint64_t *)&v104, (uint64_t *)&v103, (uint64_t *)&v102, &v101);
  if (!v101)
  {
    __break(0xC471u);
    goto LABEL_54;
  }
  *a1 = v101;
  v101 = 0;
  v53 = v97;
  v97 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = v98;
  v98 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = v99;
  v99 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  v56 = v100;
  v100 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
  }
  else
  {
    *v12 -= 2;
  }
}

void JSC::Wasm::ConstExprGenerator::fail<char const*,unsigned int,char const*,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  int *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  int *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  const char *v106;
  int v107;
  int *v108;
  const char *v109;
  WTF *v110;
  __int128 v111;
  _BYTE v112[128];
  uint64_t v113;

  v8 = 0;
  v113 = *MEMORY[0x1E0C80C00];
  v9 = a3 + a2;
  do
  {
    v10 = (v9 % 0xA) | 0x30;
    v112[v8-- - 8] = v10;
    v11 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v11);
  if (v8 + 26 >= 27)
    __break(1u);
  if (v8)
  {
    if ((unint64_t)-v8 >> 31)
    {
      __break(0xC471u);
LABEL_54:
      JUMPOUT(0x198CD0AFCLL);
    }
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v8));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = -(int)v8;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v8 == -1)
      *v13 = v10;
    else
      memcpy(v13, &v112[v8 - 7], -v8);
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v109 = (const char *)off_1E3572250;
  v110 = (WTF *)v112;
  v111 = xmmword_199122F80;
  v112[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v109, "%s", "get_global import kind index ");
  (*((void (**)(const char **))v109 + 5))(&v109);
  v21 = v110;
  if (!v110)
  {
    v100 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v100);
  v21 = v110;
  if (v110 != (WTF *)v112)
LABEL_14:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v109 = (const char *)off_1E3572250;
  v110 = (WTF *)v112;
  v111 = xmmword_199122F80;
  v112[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v109, "%u", a4);
  (*((void (**)(const char **))v109 + 5))(&v109);
  v29 = v110;
  if (!v110)
  {
    v99 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v99);
  v29 = v110;
  if (v110 != (WTF *)v112)
LABEL_19:
    WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
  v109 = (const char *)off_1E3572250;
  v110 = (WTF *)v112;
  v111 = xmmword_199122F80;
  v112[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v109, "%s", " exceeds the first internal global ");
  (*((void (**)(const char **))v109 + 5))(&v109);
  v37 = v110;
  if (!v110)
  {
    v98 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v98);
  v37 = v110;
  if (v110 != (WTF *)v112)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v109 = (const char *)off_1E3572250;
  v110 = (WTF *)v112;
  v111 = xmmword_199122F80;
  v112[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v109, "%u", a5);
  (*((void (**)(const char **))v109 + 5))(&v109);
  v45 = v110;
  if (!v110)
  {
    v97 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v97);
  v45 = v110;
  if (v110 != (WTF *)v112)
LABEL_29:
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  v108 = v12;
  v109 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v110) = 41;
  v107 = 2;
  v105 = v100;
  v106 = ": ";
  v103 = v98;
  v104 = v99;
  v102 = v97;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v109, (uint64_t *)&v108, (uint64_t)&v106, (uint64_t *)&v105, (uint64_t *)&v104, (uint64_t *)&v103, (uint64_t *)&v102, &v101);
  if (!v101)
  {
    __break(0xC471u);
    goto LABEL_54;
  }
  *a1 = v101;
  v101 = 0;
  v53 = v97;
  v97 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = v98;
  v98 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = v99;
  v99 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  v56 = v100;
  v100 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
  }
  else
  {
    *v12 -= 2;
  }
}

void JSC::Wasm::ConstExprGenerator::fail<char const*,unsigned int,char const*>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int *v10;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  const char *v85;
  int v86;
  int *v87;
  const char *v88;
  WTF *v89;
  __int128 v90;
  _BYTE v91[128];
  uint64_t v92;

  v6 = 0;
  v92 = *MEMORY[0x1E0C80C00];
  v7 = a3 + a2;
  do
  {
    v8 = (v7 % 0xA) | 0x30;
    v91[v6-- - 8] = v8;
    v9 = v7 > 9;
    v7 /= 0xAuLL;
  }
  while (v9);
  if (v6 + 26 >= 27)
    __break(1u);
  if (v6)
  {
    if ((unint64_t)-v6 >> 31)
    {
      __break(0xC471u);
LABEL_45:
      JUMPOUT(0x198CD0E94);
    }
    v10 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v6));
    v11 = v10 + 5;
    *v10 = 2;
    v10[1] = -(int)v6;
    *((_QWORD *)v10 + 1) = v10 + 5;
    v10[4] = 4;
    if (v6 == -1)
      *v11 = v8;
    else
      memcpy(v11, &v91[v6 - 7], -v6);
  }
  else
  {
    v10 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v88 = (const char *)off_1E3572250;
  v89 = (WTF *)v91;
  v90 = xmmword_199122F80;
  v91[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v88, "%s", "get_global import kind index ");
  (*((void (**)(const char **))v88 + 5))(&v88);
  v19 = v89;
  if (!v89)
  {
    v80 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v89, v90, (uint64_t *)&v80);
  v19 = v89;
  if (v89 != (WTF *)v91)
LABEL_14:
    WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
  v88 = (const char *)off_1E3572250;
  v89 = (WTF *)v91;
  v90 = xmmword_199122F80;
  v91[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v88, "%u", a4);
  (*((void (**)(const char **))v88 + 5))(&v88);
  v27 = v89;
  if (!v89)
  {
    v79 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v89, v90, (uint64_t *)&v79);
  v27 = v89;
  if (v89 != (WTF *)v91)
LABEL_19:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v88 = (const char *)off_1E3572250;
  v89 = (WTF *)v91;
  v90 = xmmword_199122F80;
  v91[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v88, "%s", " is mutable ");
  (*((void (**)(const char **))v88 + 5))(&v88);
  v35 = v89;
  if (!v89)
  {
    v78 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v89, v90, (uint64_t *)&v78);
  v35 = v89;
  if (v89 != (WTF *)v91)
LABEL_24:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v87 = v10;
  v88 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v89) = 41;
  v86 = 2;
  v84 = v80;
  v85 = ": ";
  v82 = v78;
  v83 = v79;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v88, (uint64_t *)&v87, (uint64_t)&v85, (uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v82, &v81);
  if (!v81)
  {
    __break(0xC471u);
    goto LABEL_45;
  }
  *a1 = v81;
  v81 = 0;
  v43 = v78;
  v78 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v79;
  v79 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  v45 = v80;
  v80 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  if (*v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v36, v37, v38, v39, v40, v41, v42);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
  }
  else
  {
    *v10 -= 2;
  }
}

uint64_t JSC::Wasm::Instance::loadI64Global(JSC::Wasm::Instance *this, unsigned int a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;

  v4 = *((_QWORD *)this + 13);
  v2 = (char *)this + 104;
  v3 = v4;
  v5 = (unint64_t *)(2 * v4);
  if (v4 < 0)
    v6 = 63;
  else
    v6 = *v5;
  v7 = *((_QWORD *)v2 - 3) + 16 * a2;
  if (v6 <= a2)
    return *(_QWORD *)v7;
  v8 = (char *)(v5 + 1);
  v9 = v3 >= 0 ? v8 : v2;
  if (((*(_QWORD *)&v9[((unint64_t)a2 >> 3) & 0x1FFFFFF8] >> a2) & 1) == 0)
    return *(_QWORD *)v7;
  v7 = *(_QWORD *)v7;
  if (v7)
    return *(_QWORD *)v7;
  else
    return 0;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, int **a8@<X8>)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  unsigned int v34;

  v9 = *a2;
  if (*a2)
    v10 = *(_DWORD *)(v9 + 4);
  else
    v10 = 0;
  v11 = *a4;
  if (*a4)
    v12 = *(_DWORD *)(v11 + 4);
  else
    v12 = 0;
  v13 = *a5;
  if (*a5)
    v14 = *(_DWORD *)(v13 + 4);
  else
    v14 = 0;
  v15 = *a6;
  if (*a6)
    v16 = *(_DWORD *)(v15 + 4);
  else
    v16 = 0;
  v17 = *a7;
  if (*a7)
    v18 = *(_DWORD *)(v17 + 4);
  else
    v18 = 0;
  if ((v18 | v16) < 0)
    goto LABEL_51;
  v19 = __OFADD__(v16, v18);
  v20 = v16 + v18;
  v21 = v19;
  if (v14 < 0 || v21)
    goto LABEL_51;
  v19 = __OFADD__(v14, v20);
  v22 = v14 + v20;
  v23 = v19;
  if (v12 < 0 || v23)
    goto LABEL_51;
  v24 = *(_DWORD *)(a3 + 8);
  v19 = __OFADD__(v12, v22);
  v25 = v12 + v22;
  v26 = v19;
  if (v24 < 0 || v26)
    goto LABEL_51;
  v19 = __OFADD__(v24, v25);
  v27 = v24 + v25;
  v28 = v19;
  if (v10 < 0
    || v28
    || ((v29 = *(_DWORD *)(result + 8), v19 = __OFADD__(v10, v27), v30 = v10 + v27, !v19) ? (v31 = 0) : (v31 = 1),
        v29 < 0 || (v31 & 1) != 0 || (v19 = __OFADD__(v29, v30), v32 = (v29 + v30), v19)))
  {
LABEL_51:
    *a8 = 0;
    return result;
  }
  if ((!v9 || (*(_BYTE *)(v9 + 16) & 4) != 0)
    && (!v11 || (*(_BYTE *)(v11 + 16) & 4) != 0)
    && (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0))
  {
    if (v15)
    {
      v34 = *(_DWORD *)(v15 + 16);
      v33 = (v34 >> 2) & 1;
      if (!v17 || (v34 & 4) == 0)
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v32, v33, *(_OWORD **)result, *(_QWORD *)(result + 8), v9, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v11, a8, v13, v15, v17);
    }
    else if (!v17)
    {
      v33 = 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v32, v33, *(_OWORD **)result, *(_QWORD *)(result + 8), v9, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v11, a8, v13, v15, v17);
    }
    v33 = (*(unsigned __int8 *)(v17 + 16) >> 2) & 1;
  }
  else
  {
    v33 = 0;
  }
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v32, v33, *(_OWORD **)result, *(_QWORD *)(result + 8), v9, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v11, a8, v13, v15, v17);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v18;
  int **v19;
  int *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  _DWORD *v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;

  v18 = result;
  v19 = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v34);
        v20 = v34;
        if (v34)
        {
          v21 = v34 + 5;
          *v34 = 2;
          v20[1] = v18;
          *((_QWORD *)v20 + 1) = v20 + 5;
          v20[4] = 4;
          if (a4 == 1)
          {
            *v21 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v20 + 5, a3, a4);
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v21[a4], a5, a6->i8, a7, a8, a10, a11, a12);
        }
        v19 = a9;
        goto LABEL_21;
      }
LABEL_23:
      v20 = 0;
      goto LABEL_21;
    }
LABEL_22:
    v20 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_21;
  }
  if (!(_DWORD)result)
    goto LABEL_22;
  if (result > 0x7FFFFFEF)
    goto LABEL_23;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v34);
  v20 = v34;
  if (v34)
  {
    v22 = (char *)(v34 + 5);
    *v34 = 2;
    v20[1] = v18;
    *((_QWORD *)v20 + 1) = v20 + 5;
    v20[4] = 0;
    v23 = (char *)v20 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v24 = &v22[2 * (a4 & 0xFFFFFFC0)];
      v25 = 0uLL;
      do
      {
        v35.val[0] = (int8x16_t)*a3;
        v26 = *((int8x16_t *)a3 + 1);
        v36.val[0] = (int8x16_t)a3[2];
        v27 = a3[3];
        a3 += 4;
        v28 = v27;
        v36.val[1] = 0uLL;
        v37.val[0] = v26;
        v35.val[1] = 0uLL;
        v29 = v22;
        vst2q_s8(v29, v35);
        v29 += 32;
        v37.val[1] = 0uLL;
        vst2q_s8(v29, v37);
        v30 = v22 + 64;
        vst2q_s8(v30, v36);
        v31 = v22 + 96;
        vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
        v22 += 128;
      }
      while (v22 != v24);
      v22 = v24;
    }
    while (v22 != v23)
    {
      v32 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v22 = v32;
      v22 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v23, a5, a6, a7, a8, a10, a11, a12);
  }
LABEL_21:
  *v19 = v20;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, char *__src, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  char *v25;
  unsigned __int128 *v26;
  unsigned __int128 v27;
  unsigned __int128 *v28;
  unsigned __int128 *v29;
  unsigned __int128 v30;
  char v31;
  char v32;

  if (a2)
  {
    v16 = *(char **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v17 == 1)
      {
        *__dst = *v16;
      }
      else if ((_DWORD)v17)
      {
        memcpy(__dst, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v25 = __dst;
      }
      else
      {
        v25 = &__dst[v17 & 0xFFFFFFF0];
        v26 = (unsigned __int128 *)__dst;
        do
        {
          v27 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v26++ = v27;
        }
        while (v26 != (unsigned __int128 *)v25);
      }
      while (v25 != &__dst[v17])
      {
        v31 = *v16;
        v16 += 2;
        *v25++ = v31;
      }
    }
    v18 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v18 = 0;
  }
  v19 = &__dst[v18];
  if (a4 == 1)
  {
    *v19 = *__src;
  }
  else if (a4)
  {
    memcpy(v19, __src, a4);
  }
  v20 = &v19[a4];
  if (a5)
  {
    v21 = *(char **)(a5 + 8);
    v22 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v22 == 1)
      {
        *v20 = *v21;
      }
      else if ((_DWORD)v22)
      {
        memcpy(v20, v21, v22);
      }
    }
    else
    {
      if (v22 < 0x10)
      {
        v28 = (unsigned __int128 *)v20;
      }
      else
      {
        v28 = (unsigned __int128 *)&v20[v22 & 0xFFFFFFF0];
        v29 = (unsigned __int128 *)v20;
        do
        {
          v30 = (unsigned __int128)vld2q_s8(v21);
          v21 += 32;
          *v29++ = v30;
        }
        while (v29 != v28);
      }
      while (v28 != (unsigned __int128 *)&v20[v22])
      {
        v32 = *v21;
        v21 += 2;
        *(_BYTE *)v28 = v32;
        v28 = (unsigned __int128 *)((char *)v28 + 1);
      }
    }
    v23 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v23 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v20[v23], a6, a7, a8);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  int8x16_t *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  uint64_t v54;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;

  if (a2)
  {
    v16 = *(int8x16_t **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v18 = &__dst[2 * v17];
      if (v17 >= 0x40)
      {
        v19 = &__dst[2 * (v17 & 0xFFFFFFC0)];
        v20 = 0uLL;
        v21 = __dst;
        do
        {
          v56.val[0] = *v16;
          v22 = v16[1];
          v59.val[0] = v16[2];
          v23 = v16[3];
          v16 += 4;
          v24 = v23;
          v59.val[1] = 0uLL;
          v62.val[0] = v22;
          v56.val[1] = 0uLL;
          v25 = v21;
          vst2q_s8(v25, v56);
          v25 += 32;
          v62.val[1] = 0uLL;
          vst2q_s8(v25, v62);
          v26 = v21 + 64;
          vst2q_s8(v26, v59);
          v27 = v21 + 96;
          vst2q_s8(v27, *(int8x16x2_t *)(&v20 - 1));
          v21 += 128;
        }
        while (v21 != v19);
      }
      else
      {
        v19 = __dst;
      }
      while (v19 != v18)
      {
        v28 = v16->u8[0];
        v16 = (int8x16_t *)((char *)v16 + 1);
        *(_WORD *)v19 = v28;
        v19 += 2;
      }
    }
    else if ((_DWORD)v17 == 1)
    {
      *(_WORD *)__dst = v16->i16[0];
    }
    else if ((_DWORD)v17)
    {
      memcpy(__dst, v16, 2 * v17);
    }
    v29 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v29 = 0;
  }
  v30 = &__dst[2 * v29];
  v31 = &v30[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v32 = &v30[2 * (a4 & 0xFFFFFFC0)];
    v33 = 0uLL;
    do
    {
      v57.val[0] = *a3;
      v34 = a3[1];
      v60.val[0] = a3[2];
      v35 = a3[3];
      a3 += 4;
      v36 = v35;
      v60.val[1] = 0uLL;
      v63.val[0] = v34;
      v57.val[1] = 0uLL;
      v37 = v30;
      vst2q_s8(v37, v57);
      v37 += 32;
      v63.val[1] = 0uLL;
      vst2q_s8(v37, v63);
      v38 = v30 + 64;
      vst2q_s8(v38, v60);
      v39 = v30 + 96;
      vst2q_s8(v39, *(int8x16x2_t *)(&v33 - 1));
      v30 += 128;
    }
    while (v30 != v32);
    v30 = v32;
  }
  while (v30 != v31)
  {
    v40 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v30 = v40;
    v30 += 2;
  }
  if (a5)
  {
    v41 = *(int8x16_t **)(a5 + 8);
    v42 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v43 = &v31[2 * v42];
      if (v42 >= 0x40)
      {
        v44 = &v31[2 * (v42 & 0xFFFFFFC0)];
        v45 = 0uLL;
        v46 = v31;
        do
        {
          v58.val[0] = *v41;
          v47 = v41[1];
          v61.val[0] = v41[2];
          v48 = v41[3];
          v41 += 4;
          v49 = v48;
          v61.val[1] = 0uLL;
          v64.val[0] = v47;
          v58.val[1] = 0uLL;
          v50 = v46;
          vst2q_s8(v50, v58);
          v50 += 32;
          v64.val[1] = 0uLL;
          vst2q_s8(v50, v64);
          v51 = v46 + 64;
          vst2q_s8(v51, v61);
          v52 = v46 + 96;
          vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
          v46 += 128;
        }
        while (v46 != v44);
      }
      else
      {
        v44 = v31;
      }
      while (v44 != v43)
      {
        v53 = v41->u8[0];
        v41 = (int8x16_t *)((char *)v41 + 1);
        *(_WORD *)v44 = v53;
        v44 += 2;
      }
    }
    else if ((_DWORD)v42 == 1)
    {
      *(_WORD *)v31 = v41->i16[0];
    }
    else if ((_DWORD)v42)
    {
      memcpy(v31, v41, 2 * v42);
    }
    v54 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v54 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v31[2 * v54], a6, a7, a8);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int **a7@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  unsigned int v29;

  v8 = *a2;
  if (*a2)
    v9 = *(_DWORD *)(v8 + 4);
  else
    v9 = 0;
  v10 = *a4;
  if (*a4)
    v11 = *(_DWORD *)(v10 + 4);
  else
    v11 = 0;
  v12 = *a5;
  if (*a5)
    v13 = *(_DWORD *)(v12 + 4);
  else
    v13 = 0;
  v14 = *a6;
  if (*a6)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  if ((v15 | v13) < 0)
    goto LABEL_42;
  v16 = __OFADD__(v13, v15);
  v17 = v13 + v15;
  v18 = v16;
  if (v11 < 0 || v18)
    goto LABEL_42;
  v19 = *(_DWORD *)(a3 + 8);
  v16 = __OFADD__(v11, v17);
  v20 = v11 + v17;
  v21 = v16;
  if (v19 < 0 || v21)
    goto LABEL_42;
  v16 = __OFADD__(v19, v20);
  v22 = v19 + v20;
  v23 = v16;
  if (v9 < 0
    || v23
    || ((v24 = *(_DWORD *)(result + 8), v16 = __OFADD__(v9, v22), v25 = v9 + v22, !v16) ? (v26 = 0) : (v26 = 1),
        v24 < 0 || (v26 & 1) != 0 || (v16 = __OFADD__(v24, v25), v27 = (v24 + v25), v16)))
  {
LABEL_42:
    *a7 = 0;
    return result;
  }
  if ((!v8 || (*(_BYTE *)(v8 + 16) & 4) != 0) && (!v10 || (*(_BYTE *)(v10 + 16) & 4) != 0))
  {
    if (v12)
    {
      v29 = *(_DWORD *)(v12 + 16);
      v28 = (v29 >> 2) & 1;
      if (!v14 || (v29 & 4) == 0)
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v27, v28, *(int8x16_t **)result, *(_QWORD *)(result + 8), v8, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v10, a7, v12, v14);
    }
    else if (!v14)
    {
      v28 = 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v27, v28, *(int8x16_t **)result, *(_QWORD *)(result + 8), v8, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v10, a7, v12, v14);
    }
    v28 = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
  }
  else
  {
    v28 = 0;
  }
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v27, v28, *(int8x16_t **)result, *(_QWORD *)(result + 8), v8, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v10, a7, v12, v14);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v16;
  int **v17;
  int *v18;
  _BYTE *v19;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  size_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned __int128 *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  char v30;
  _DWORD *v33;

  v16 = result;
  v17 = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v33);
        v18 = v33;
        if (v33)
        {
          v19 = v33 + 5;
          *v33 = 2;
          v18[1] = v16;
          *((_QWORD *)v18 + 1) = v18 + 5;
          v18[4] = 4;
          if (a4 == 1)
          {
            *v19 = a3->i8[0];
          }
          else if (a4)
          {
            memcpy(v18 + 5, a3, a4);
          }
          v22 = &v19[a4];
          if (a5)
          {
            v23 = *(_BYTE **)(a5 + 8);
            v24 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v24 == 1)
              {
                *v22 = *v23;
              }
              else if ((_DWORD)v24)
              {
                memcpy(v22, v23, v24);
              }
            }
            else
            {
              if (v24 < 0x10)
              {
                v27 = (unsigned __int128 *)v22;
              }
              else
              {
                v27 = (unsigned __int128 *)&v22[v24 & 0xFFFFFFF0];
                v28 = (unsigned __int128 *)v22;
                do
                {
                  v29 = (unsigned __int128)vld2q_s8(v23);
                  v23 += 32;
                  *v28++ = v29;
                }
                while (v28 != v27);
              }
              while (v27 != (unsigned __int128 *)&v22[v24])
              {
                v30 = *v23;
                v23 += 2;
                *(_BYTE *)v27 = v30;
                v27 = (unsigned __int128 *)((char *)v27 + 1);
              }
            }
            v25 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v22[v25];
          if (a7 == 1)
          {
            *v26 = a6->i8[0];
          }
          else if (a7)
          {
            memcpy(&v22[v25], a6, a7);
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v26[a7], a8, a10, a11);
        }
        v17 = a9;
        goto LABEL_26;
      }
LABEL_28:
      v18 = 0;
      goto LABEL_26;
    }
LABEL_27:
    v18 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_26;
  }
  if (!(_DWORD)result)
    goto LABEL_27;
  if (result > 0x7FFFFFEF)
    goto LABEL_28;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v33);
  v18 = v33;
  if (v33)
  {
    v21 = (char *)(v33 + 5);
    *v33 = 2;
    v18[1] = v16;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v21, a3, a4, a5, a6, a7, a8, a10, a11);
  }
LABEL_26:
  *v17 = v18;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v14;
  char *v15;
  __int128 v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  int8x16_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;

  v14 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v15 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v16 = 0uLL;
    do
    {
      v50.val[0] = *a2;
      v17 = a2[1];
      v53.val[0] = a2[2];
      v18 = a2[3];
      a2 += 4;
      v19 = v18;
      v53.val[1] = 0uLL;
      v56.val[0] = v17;
      v50.val[1] = 0uLL;
      v20 = a1;
      vst2q_s8(v20, v50);
      v20 += 32;
      v56.val[1] = 0uLL;
      vst2q_s8(v20, v56);
      v21 = a1 + 64;
      vst2q_s8(v21, v53);
      v22 = a1 + 96;
      vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
      a1 += 128;
    }
    while (a1 != v15);
    a1 = v15;
  }
  while (a1 != v14)
  {
    v23 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v23;
    a1 += 2;
  }
  if (a4)
  {
    v24 = *(int8x16_t **)(a4 + 8);
    v25 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v26 = &v14[2 * v25];
      if (v25 >= 0x40)
      {
        v27 = &v14[2 * (v25 & 0xFFFFFFC0)];
        v28 = 0uLL;
        v29 = v14;
        do
        {
          v51.val[0] = *v24;
          v30 = v24[1];
          v54.val[0] = v24[2];
          v31 = v24[3];
          v24 += 4;
          v32 = v31;
          v54.val[1] = 0uLL;
          v57.val[0] = v30;
          v51.val[1] = 0uLL;
          v33 = v29;
          vst2q_s8(v33, v51);
          v33 += 32;
          v57.val[1] = 0uLL;
          vst2q_s8(v33, v57);
          v34 = v29 + 64;
          vst2q_s8(v34, v54);
          v35 = v29 + 96;
          vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
          v29 += 128;
        }
        while (v29 != v27);
      }
      else
      {
        v27 = v14;
      }
      while (v27 != v26)
      {
        v36 = v24->u8[0];
        v24 = (int8x16_t *)((char *)v24 + 1);
        *(_WORD *)v27 = v36;
        v27 += 2;
      }
    }
    else if ((_DWORD)v25 == 1)
    {
      *(_WORD *)v14 = v24->i16[0];
    }
    else if ((_DWORD)v25)
    {
      memcpy(v14, v24, 2 * v25);
    }
    v37 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v37 = 0;
  }
  v38 = &v14[2 * v37];
  v39 = &v38[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v40 = &v38[2 * (a6 & 0xFFFFFFC0)];
    v41 = 0uLL;
    do
    {
      v52.val[0] = *a5;
      v42 = a5[1];
      v55.val[0] = a5[2];
      v43 = a5[3];
      a5 += 4;
      v44 = v43;
      v55.val[1] = 0uLL;
      v58.val[0] = v42;
      v52.val[1] = 0uLL;
      v45 = v38;
      vst2q_s8(v45, v52);
      v45 += 32;
      v58.val[1] = 0uLL;
      vst2q_s8(v45, v58);
      v46 = v38 + 64;
      vst2q_s8(v46, v55);
      v47 = v38 + 96;
      vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
      v38 += 128;
    }
    while (v38 != v40);
    v38 = v40;
  }
  while (v38 != v39)
  {
    v48 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v38 = v48;
    v38 += 2;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, a7, a8, a9);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, int **a9@<X8>)
{
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  char v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;

  v11 = 0;
  v12 = *(_DWORD *)(result + 8);
  v13 = *a2;
  v14 = *a2;
  do
  {
    ++v11;
    v15 = v14 > 9;
    v14 /= 0xAuLL;
  }
  while (v15);
  v16 = *a4;
  if (*a4)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  v18 = *a5;
  if (*a5)
    v19 = *(_DWORD *)(v18 + 4);
  else
    v19 = 0;
  v20 = *a6;
  if (*a6)
    v21 = *(_DWORD *)(v20 + 4);
  else
    v21 = 0;
  v22 = *a7;
  if (*a7)
    v23 = *(_DWORD *)(v22 + 4);
  else
    v23 = 0;
  v24 = *a8;
  if (*a8)
    v25 = *(_DWORD *)(v24 + 4);
  else
    v25 = 0;
  if ((v25 | v23) < 0)
    goto LABEL_55;
  v26 = __OFADD__(v23, v25);
  v27 = v23 + v25;
  v28 = v26;
  if (v21 < 0 || v28)
    goto LABEL_55;
  v26 = __OFADD__(v21, v27);
  v29 = v21 + v27;
  v30 = v26;
  if (v19 < 0 || v30)
    goto LABEL_55;
  v26 = __OFADD__(v19, v29);
  v31 = v19 + v29;
  v32 = v26;
  if (v17 < 0 || v32)
    goto LABEL_55;
  v33 = *(_DWORD *)(a3 + 8);
  v26 = __OFADD__(v17, v31);
  v34 = v17 + v31;
  v35 = v26;
  if (v33 < 0
    || v35
    || ((v26 = __OFADD__(v33, v34), v36 = v33 + v34, !v26) ? (v37 = 0) : (v37 = 1),
        v11 < 0
     || (v37 & 1) != 0
     || (v26 = __OFADD__(v11, v36), v38 = v11 + v36, v26)
     || v12 < 0
     || (v26 = __OFADD__(v12, v38), v39 = (v12 + v38), v26)))
  {
LABEL_55:
    *a9 = 0;
    return result;
  }
  if ((!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0)
    && (!v18 || (*(_BYTE *)(v18 + 16) & 4) != 0)
    && (!v20 || (*(_BYTE *)(v20 + 16) & 4) != 0))
  {
    if (v22)
    {
      v41 = *(_DWORD *)(v22 + 16);
      v40 = (v41 >> 2) & 1;
      if (!v24 || (v41 & 4) == 0)
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, v40, *(_OWORD **)result, *(_QWORD *)(result + 8), v13, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v16, a9, v18, v20, v22, v24);
    }
    else if (!v24)
    {
      v40 = 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, v40, *(_OWORD **)result, *(_QWORD *)(result + 8), v13, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v16, a9, v18, v20, v22, v24);
    }
    v40 = (*(unsigned __int8 *)(v24 + 16) >> 2) & 1;
  }
  else
  {
    v40 = 0;
  }
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, v40, *(_OWORD **)result, *(_QWORD *)(result + 8), v13, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v16, a9, v18, v20, v22, v24);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v19;
  int **v20;
  int *v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  _WORD *v39;
  unsigned int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  int v50;
  char *v51;
  __int128 v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  char *v56;
  char *v57;
  char *v58;
  __int16 v59;
  _QWORD v60[5];
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;

  v19 = result;
  v20 = a9;
  v60[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v60);
        v23 = (int *)v60[0];
        if (v60[0])
        {
          v24 = (_BYTE *)(v60[0] + 20);
          *(_DWORD *)v60[0] = 2;
          v23[1] = v19;
          *((_QWORD *)v23 + 1) = v23 + 5;
          v23[4] = 4;
          if (a4 == 1)
          {
            *v24 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v23 + 5, a3, a4);
          }
          v47 = 0;
          v48 = a5;
          do
          {
            *((_BYTE *)&v60[3] + v47--) = (v48 % 0xA) | 0x30;
            v38 = v48 > 9;
            v48 /= 0xAuLL;
          }
          while (v38);
          v49 = &v24[a4];
          if (v47 + 26 <= 25)
            memcpy(v49, (char *)&v60[3] + v47 + 1, -v47);
          v50 = 0;
          v20 = a9;
          do
          {
            ++v50;
            v38 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v38);
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v49[v50], a6->i8, a7, a8, a10, a11, a12, a13);
        }
        goto LABEL_41;
      }
LABEL_43:
      v23 = 0;
      goto LABEL_41;
    }
LABEL_42:
    v23 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_41;
  }
  if (!(_DWORD)result)
    goto LABEL_42;
  if (result > 0x7FFFFFEF)
    goto LABEL_43;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v60);
  v23 = (int *)v60[0];
  if (v60[0])
  {
    v25 = (char *)(v60[0] + 20);
    *(_DWORD *)v60[0] = 2;
    v23[1] = v19;
    *((_QWORD *)v23 + 1) = v23 + 5;
    v23[4] = 0;
    v26 = (uint64_t)v23 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v27 = &v25[2 * (a4 & 0xFFFFFFC0)];
      v28 = 0uLL;
      do
      {
        v61.val[0] = (int8x16_t)*a3;
        v29 = *((int8x16_t *)a3 + 1);
        v63.val[0] = (int8x16_t)a3[2];
        v30 = a3[3];
        a3 += 4;
        v31 = v30;
        v63.val[1] = 0uLL;
        v65.val[0] = v29;
        v61.val[1] = 0uLL;
        v32 = v25;
        vst2q_s8(v32, v61);
        v32 += 32;
        v65.val[1] = 0uLL;
        vst2q_s8(v32, v65);
        v33 = v25 + 64;
        vst2q_s8(v33, v63);
        v34 = v25 + 96;
        vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
        v25 += 128;
      }
      while (v25 != v27);
      v25 = v27;
    }
    while (v25 != (char *)v26)
    {
      v35 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v25 = v35;
      v25 += 2;
    }
    v36 = 0;
    v37 = a5;
    do
    {
      *((_BYTE *)&v60[3] + v36--) = (v37 % 0xA) | 0x30;
      v38 = v37 > 9;
      v37 /= 0xAuLL;
    }
    while (v38);
    if (v36 + 26 <= 25)
    {
      v39 = (_WORD *)v23 + a4 + 10;
      do
        *v39++ = *((unsigned __int8 *)&v60[3] + v36 + 1);
      while (!__CFADD__(v36++, 1));
    }
    v41 = 0;
    do
    {
      ++v41;
      v38 = a5 > 9;
      a5 /= 0xAuLL;
    }
    while (v38);
    v42 = (char *)(v26 + 2 * v41);
    v43 = &v42[2 * a7];
    if ((a7 & 0xFFFFFFC0) != 0)
    {
      v51 = &v42[2 * (a7 & 0xFFFFFFC0)];
      v52 = 0uLL;
      v44 = a11;
      v45 = a12;
      v46 = a10;
      do
      {
        v62.val[0] = *a6;
        v53 = a6[1];
        v64.val[0] = a6[2];
        v54 = a6[3];
        a6 += 4;
        v55 = v54;
        v64.val[1] = 0uLL;
        v66.val[0] = v53;
        v62.val[1] = 0uLL;
        v56 = v42;
        vst2q_s8(v56, v62);
        v56 += 32;
        v66.val[1] = 0uLL;
        vst2q_s8(v56, v66);
        v57 = v42 + 64;
        vst2q_s8(v57, v64);
        v58 = v42 + 96;
        vst2q_s8(v58, *(int8x16x2_t *)(&v52 - 1));
        v42 += 128;
      }
      while (v42 != v51);
      v42 = v51;
    }
    else
    {
      v44 = a11;
      v45 = a12;
      v46 = a10;
    }
    while (v42 != v43)
    {
      v59 = a6->u8[0];
      a6 = (int8x16_t *)((char *)a6 + 1);
      *(_WORD *)v42 = v59;
      v42 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v43, a8, v46, v44, v45, a13);
  }
LABEL_41:
  *v20 = v23;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  char *v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  unsigned __int128 *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  char v30;
  char v31;

  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    memcpy(__dst, a2, a3);
  }
  v15 = &__dst[a3];
  if (a4)
  {
    v16 = *(char **)(a4 + 8);
    v17 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v17 == 1)
      {
        *v15 = *v16;
      }
      else if ((_DWORD)v17)
      {
        memcpy(v15, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v24 = v15;
      }
      else
      {
        v24 = &v15[v17 & 0xFFFFFFF0];
        v25 = (unsigned __int128 *)v15;
        do
        {
          v26 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v25++ = v26;
        }
        while (v25 != (unsigned __int128 *)v24);
      }
      while (v24 != &v15[v17])
      {
        v30 = *v16;
        v16 += 2;
        *v24++ = v30;
      }
    }
    v18 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v15[v18];
  if (a5)
  {
    v20 = *(char **)(a5 + 8);
    v21 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v21 == 1)
      {
        *v19 = *v20;
      }
      else if ((_DWORD)v21)
      {
        memcpy(v19, v20, v21);
      }
    }
    else
    {
      if (v21 < 0x10)
      {
        v27 = (unsigned __int128 *)&v15[v18];
      }
      else
      {
        v27 = (unsigned __int128 *)&v19[v21 & 0xFFFFFFF0];
        v28 = (unsigned __int128 *)&v15[v18];
        do
        {
          v29 = (unsigned __int128)vld2q_s8(v20);
          v20 += 32;
          *v28++ = v29;
        }
        while (v28 != v27);
      }
      while (v27 != (unsigned __int128 *)&v19[v21])
      {
        v31 = *v20;
        v20 += 2;
        *(_BYTE *)v27 = v31;
        v27 = (unsigned __int128 *)((char *)v27 + 1);
      }
    }
    v22 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v22 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v19[v22], a6, a7, a8);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X5>, int **a7@<X8>)
{
  _OWORD *v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;

  v10 = *(_OWORD **)result;
  v11 = *(_QWORD *)(result + 8);
  if (v11)
  {
    v12 = v11 - 1;
    if ((unint64_t)(v11 - 1) >> 31)
      goto LABEL_33;
  }
  else
  {
    v12 = 0;
  }
  v13 = *(int8x16_t **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  if (v14)
  {
    v15 = v14 - 1;
    if ((unint64_t)(v14 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198CD23E4);
    }
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_QWORD *)(a5 + 8);
  if (v16)
  {
    if ((unint64_t)--v16 >> 31)
    {
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x198CD23B8);
    }
  }
  v17 = 0;
  v18 = *a6;
  v19 = *a2;
  do
  {
    ++v17;
    v20 = v19 > 9;
    v19 /= 0xAuLL;
  }
  while (v20);
  v21 = 0;
  v22 = *a4;
  do
  {
    ++v21;
    v20 = v22 > 9;
    v22 /= 0xAu;
  }
  while (v20);
  v23 = 0;
  v24 = v18;
  do
  {
    ++v23;
    v20 = v24 > 9;
    v24 /= 0xAuLL;
  }
  while (v20);
  if ((v23 & 0x80000000) == 0)
  {
    v25 = __OFADD__((_DWORD)v16, v23);
    v26 = v16 + v23;
    v27 = v25;
    if ((v21 & 0x80000000) == 0 && !v27)
    {
      v25 = __OFADD__(v21, v26);
      v28 = v21 + v26;
      if (!v25)
      {
        v25 = __OFADD__(v15, v28);
        v29 = v15 + v28;
        v30 = v25;
        if ((v17 & 0x80000000) == 0 && !v30)
        {
          v25 = __OFADD__(v17, v29);
          v31 = v17 + v29;
          if (!v25)
          {
            result = v12 + v31;
            if (!__OFADD__(v12, v31))
              return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>>(result, 1, v10, v12, *a2, v13, v15, *a4, a7, *(int8x16_t **)a5, v16, v18);
          }
        }
      }
    }
  }
  *a7 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, unsigned int a8@<W7>, int **a9@<X8>, int8x16_t *a10, unsigned int a11, unint64_t a12)
{
  int v17;
  int **v18;
  unint64_t v19;
  int *v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  int8x16_t v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  __int16 v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  _BYTE *v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  int v43;
  char *v44;
  uint64_t v45;
  _QWORD v47[5];
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;

  v17 = result;
  v18 = a9;
  v19 = a12;
  v47[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v47);
        v21 = (int *)v47[0];
        if (v47[0])
        {
          v22 = (_BYTE *)(v47[0] + 20);
          *(_DWORD *)v47[0] = 2;
          v21[1] = v17;
          *((_QWORD *)v21 + 1) = v21 + 5;
          v21[4] = 4;
          if (a4 == 1)
          {
            *v22 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            result = (uint64_t)memcpy(v21 + 5, a3, a4);
          }
          v34 = 0;
          v35 = a5;
          do
          {
            *((_BYTE *)&v47[3] + v34--) = (v35 % 0xA) | 0x30;
            v36 = v35 > 9;
            v35 /= 0xAuLL;
          }
          while (v36);
          v37 = &v22[a4];
          if (v34 + 26 <= 25)
            result = (uint64_t)memcpy(&v22[a4], (char *)&v47[3] + v34 + 1, -v34);
          v38 = 0;
          v18 = a9;
          do
          {
            ++v38;
            v36 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v36);
          v39 = &v37[v38];
          if (a7 == 1)
          {
            *v39 = a6->i8[0];
          }
          else if (a7)
          {
            result = (uint64_t)memcpy(v39, a6, a7);
          }
          v40 = 0;
          v41 = a8;
          do
          {
            *((_BYTE *)&v47[1] + v40-- + 4) = (v41 % 0xA) | 0x30;
            v36 = v41 > 9;
            v41 /= 0xAu;
          }
          while (v36);
          v42 = &v39[a7];
          if (v40 + 14 <= 13)
            result = (uint64_t)memcpy(v42, (char *)&v47[1] + v40 + 5, -v40);
          v43 = 0;
          do
          {
            ++v43;
            v36 = a8 > 9;
            a8 /= 0xAu;
          }
          while (v36);
          v44 = &v42[v43];
          if (a11 == 1)
          {
            *v44 = a10->i8[0];
          }
          else if (a11)
          {
            result = (uint64_t)memcpy(&v42[v43], a10, a11);
          }
          v45 = 0;
          do
          {
            *((_BYTE *)&v47[3] + v45--) = (v19 % 0xA) | 0x30;
            v36 = v19 > 9;
            v19 /= 0xAuLL;
          }
          while (v36);
          if (v45 + 26 <= 25)
            result = (uint64_t)memcpy(&v44[a11], (char *)&v47[3] + v45 + 1, -v45);
        }
        goto LABEL_43;
      }
LABEL_45:
      v21 = 0;
      goto LABEL_43;
    }
LABEL_44:
    v21 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_43;
  }
  if (!(_DWORD)result)
    goto LABEL_44;
  if (result > 0x7FFFFFEF)
    goto LABEL_45;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v47);
  v21 = (int *)v47[0];
  if (v47[0])
  {
    v23 = (char *)(v47[0] + 20);
    *(_DWORD *)v47[0] = 2;
    v21[1] = v17;
    *((_QWORD *)v21 + 1) = v21 + 5;
    v21[4] = 0;
    v24 = (char *)v21 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v25 = &v23[2 * (a4 & 0xFFFFFFC0)];
      v26 = 0uLL;
      do
      {
        v48.val[0] = (int8x16_t)*a3;
        v27 = *((int8x16_t *)a3 + 1);
        v49.val[0] = (int8x16_t)a3[2];
        v28 = a3[3];
        a3 += 4;
        v29 = v28;
        v49.val[1] = 0uLL;
        v50.val[0] = v27;
        v48.val[1] = 0uLL;
        v30 = v23;
        vst2q_s8(v30, v48);
        v30 += 32;
        v50.val[1] = 0uLL;
        vst2q_s8(v30, v50);
        v31 = v23 + 64;
        vst2q_s8(v31, v49);
        v32 = v23 + 96;
        vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
        v23 += 128;
      }
      while (v23 != v25);
      v23 = v25;
    }
    while (v23 != v24)
    {
      v33 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v23 = v33;
      v23 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>>(v24, a5, a6, a7, a8, a10, a11, a12);
  }
LABEL_43:
  *v18 = v21;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>>(_WORD *result, unint64_t a2, int8x16_t *a3, int a4, unsigned int a5, int8x16_t *a6, int a7, unint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _WORD *v11;
  BOOL v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  int v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  uint64_t v40;
  _BYTE v41[25];
  uint64_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;

  v8 = 0;
  v42 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  do
  {
    v41[v8-- + 24] = (v9 % 0xA) | 0x30;
    v10 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v10);
  if (v8 + 26 <= 25)
  {
    v11 = result;
    do
    {
      *v11++ = *((unsigned __int8 *)&v42 + v8);
      v12 = __CFADD__(v8++, 1);
    }
    while (!v12);
  }
  v13 = 0;
  do
  {
    ++v13;
    v10 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v10);
  v14 = (char *)&result[v13];
  v15 = &v14[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v16 = &v14[2 * (a4 & 0xFFFFFFC0)];
    v17 = 0uLL;
    do
    {
      v43.val[0] = *a3;
      v18 = a3[1];
      v45.val[0] = a3[2];
      v19 = a3[3];
      a3 += 4;
      v20 = v19;
      v45.val[1] = 0uLL;
      v47.val[0] = v18;
      v43.val[1] = 0uLL;
      v21 = v14;
      vst2q_s8(v21, v43);
      v21 += 32;
      v47.val[1] = 0uLL;
      vst2q_s8(v21, v47);
      v22 = v14 + 64;
      vst2q_s8(v22, v45);
      v23 = v14 + 96;
      vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
      v14 += 128;
    }
    while (v14 != v16);
    v14 = v16;
  }
  while (v14 != v15)
  {
    v24 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v14 = v24;
    v14 += 2;
  }
  v25 = 0;
  v26 = a5;
  do
  {
    v41[v25-- + 12] = (v26 % 0xA) | 0x30;
    v10 = v26 > 9;
    v26 /= 0xAu;
  }
  while (v10);
  if (v25 + 14 <= 13)
  {
    v27 = v15;
    do
    {
      *(_WORD *)v27 = v41[v25 + 13];
      v27 += 2;
      v12 = __CFADD__(v25++, 1);
    }
    while (!v12);
  }
  v28 = 0;
  do
  {
    ++v28;
    v10 = a5 > 9;
    a5 /= 0xAu;
  }
  while (v10);
  v29 = &v15[2 * v28];
  v30 = &v29[2 * a7];
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    v31 = &v29[2 * (a7 & 0xFFFFFFC0)];
    v32 = 0uLL;
    do
    {
      v44.val[0] = *a6;
      v33 = a6[1];
      v46.val[0] = a6[2];
      v34 = a6[3];
      a6 += 4;
      v35 = v34;
      v46.val[1] = 0uLL;
      v48.val[0] = v33;
      v44.val[1] = 0uLL;
      v36 = v29;
      vst2q_s8(v36, v44);
      v36 += 32;
      v48.val[1] = 0uLL;
      vst2q_s8(v36, v48);
      v37 = v29 + 64;
      vst2q_s8(v37, v46);
      v38 = v29 + 96;
      vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
      v29 += 128;
    }
    while (v29 != v31);
    v29 = v31;
  }
  while (v29 != v30)
  {
    v39 = a6->u8[0];
    a6 = (int8x16_t *)((char *)a6 + 1);
    *(_WORD *)v29 = v39;
    v29 += 2;
  }
  v40 = 0;
  do
  {
    v41[v40-- + 24] = (a8 % 0xA) | 0x30;
    v10 = a8 > 9;
    a8 /= 0xAuLL;
  }
  while (v10);
  if (v40 + 26 <= 25)
  {
    do
    {
      *(_WORD *)v30 = *((unsigned __int8 *)&v42 + v40);
      v30 += 2;
      v12 = __CFADD__(v40++, 1);
    }
    while (!v12);
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, unint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::HandleSet *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  void (**v77)(WTF::StringPrintStream *__hidden);
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  unint64_t *v85;
  uint64_t v86;
  JSC::HandleSet *v87;
  WTF::StringImpl *v88;
  _OWORD v89[2];
  uint64_t v90;
  uint64_t *v91;
  void (**v92[2])(WTF::StringPrintStream *__hidden);
  void (**v93)(WTF::StringPrintStream *__hidden);
  unsigned int v94;
  unsigned int v95;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_8;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v12 = 0;
        v95 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_55:
        v12 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_55;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_8;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x198CD2AFCLL);
    }
LABEL_13:
    v12 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v12 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
    goto LABEL_8;
LABEL_10:
  v12 = 2;
LABEL_15:
  v95 = v12;
LABEL_16:
  if (*(_DWORD *)(*(_QWORD *)(a3 + 26480) + 104) == -1)
  {
    v75 = "simd memory instructions need a memory defined in the module";
    v76 = 61;
LABEL_61:
    *(_QWORD *)&v89[0] = v75;
    *((_QWORD *)&v89[0] + 1) = v76;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v92, (uint64_t)v89, a9, a10);
    v77 = v92[0];
    goto LABEL_62;
  }
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)a3;
  v15 = v13 - *(_QWORD *)a3;
  if (v13 > *(_QWORD *)a3)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD *)(a3 + 8);
    v20 = 5;
    if (v15 < 5)
      v20 = v13 - *(_QWORD *)a3;
    v21 = v20 - 1;
    *(_QWORD *)a3 = v14 + 1;
    v22 = v19 + v14;
    while (1)
    {
      v23 = *(char *)(v22 + v16);
      v18 |= (v23 & 0x7F) << v17;
      if ((v23 & 0x80000000) == 0)
        break;
      if (v21 == v16)
        goto LABEL_67;
      v24 = v14 + v16 + 2;
      *(_QWORD *)a3 = v24;
      ++v16;
      v17 += 7;
      if (v15 == v16)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v94 = v18;
    if ((_DWORD)v16 != 4 || v23 < 0x10u)
    {
      if (v13 <= v14 + v16 + 1)
        goto LABEL_69;
      v22 = 0;
      v25 = 0;
      v26 = 0;
      *a4 = 0;
      v27 = ~v16 + v15;
      v28 = 5;
      if (v27 < 5)
        v28 = v27;
      v29 = v14 + v16;
      *(_QWORD *)a3 = v14 + v16 + 2;
      v30 = v14 - v13;
      v31 = v19 + v14;
      v32 = v28 - 1;
      v33 = v30 + v16;
      while (1)
      {
        LODWORD(v24) = *(char *)(v31 + v22 + v16 + 1);
        v26 |= (v24 & 0x7F) << v25;
        *a4 = v26;
        if ((v24 & 0x80000000) == 0)
          break;
        if (v32 == v22)
          goto LABEL_69;
        v34 = v29 + v22;
        v35 = v33 + v22++;
        v24 = v34 + 3;
        *(_QWORD *)a3 = v24;
        v25 += 7;
        if (v35 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v22 == 4 && v24 >= 0x10u)
      {
LABEL_69:
        v84 = "can't get simd memory op offset";
        v85 = (unint64_t *)a3;
        v86 = 32;
        goto LABEL_70;
      }
      if (v18 > v12)
      {
        *(_QWORD *)&v89[0] = "alignment: ";
        *((_QWORD *)&v89[0] + 1) = 12;
        v92[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
        v92[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v93, (uint64_t)v89, &v94, (uint64_t)v92, &v95, a9, a10);
        v77 = v93;
        goto LABEL_62;
      }
      if (!*(_DWORD *)(a3 + 68))
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a3, 26, "simd memory op pointer", 23, v89, a10);
        goto LABEL_59;
      }
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)v89, a3 + 56, a3, (uint64_t)a4, a5, a6, a7, a8);
      v36 = v89[1];
      *(_OWORD *)a5 = v89[0];
      *(_OWORD *)(a5 + 16) = v36;
      *(_QWORD *)(a5 + 32) = v90;
      v37 = (_QWORD *)(a5 + 40);
      JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(a5 + 40), &v91, v38, v39, v40, v41, v42, v43);
      if (v91)
      {
        v78 = v91 - 2;
        v79 = *(_QWORD *)(((unint64_t)(v91 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v80 = (uint64_t *)*(v91 - 1);
        if (v80)
        {
          v81 = *v78;
          *v80 = *v78;
          *(_QWORD *)(v81 + 8) = v80;
          *v78 = 0;
          v78[1] = 0;
        }
        *v78 = *(_QWORD *)(v79 + 40);
        *(_QWORD *)(v79 + 40) = v78;
      }
      if (*v37)
      {
        v51 = *(JSC::HandleSet **)(((*v37 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v52 = (_QWORD *)*((_QWORD *)v51 + 5);
        if (!v52)
        {
          v87 = *(JSC::HandleSet **)(((*v37 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          JSC::HandleSet::grow(v51, v44, v45, v46, v47, v48, v49, v50);
          v51 = v87;
          v52 = (_QWORD *)*((_QWORD *)v87 + 5);
        }
        *((_QWORD *)v51 + 5) = *v52;
        v52[2] = 0;
        v53 = v52 + 2;
        *v52 = 0;
        v52[1] = 0;
        v54 = (_QWORD *)*v37;
        if (*v37)
        {
          v54 = (_QWORD *)*v54;
          if (v54)
          {
            v82 = *(_QWORD **)(((unint64_t)(v53 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v83 = v82[3];
            v82 += 3;
            *(v53 - 2) = v83;
            *(v53 - 1) = v82;
            *v82 = v53 - 2;
            *(_QWORD *)(v83 + 8) = v53 - 2;
          }
        }
        *v53 = v54;
      }
      else
      {
        v53 = 0;
      }
      *(_QWORD *)&v89[0] = "WasmFunctionParser.h:";
      DWORD2(v89[0]) = 21;
      LODWORD(v92[0]) = 830;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v89, (unsigned int *)v92, (int **)&v88);
      v62 = v88;
      if (!v88)
      {
        __break(0xC471u);
        JUMPOUT(0x198CD2F60);
      }
      v88 = 0;
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v55, v56, v57, v58, v59, v60, v61);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
        if (!v53)
          goto LABEL_49;
      }
      else
      {
        *(_DWORD *)v62 -= 2;
        if (!v53)
        {
LABEL_49:
          if (*(_BYTE *)a5 == 0xFF)
          {
            *a1 = 0;
            a1[8] = 0;
            return;
          }
          v75 = "pointer must be i32";
          v76 = 20;
          goto LABEL_61;
        }
      }
      v71 = v53 - 2;
      v72 = *(_QWORD *)(((unint64_t)(v53 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v73 = (uint64_t *)*(v53 - 1);
      if (v73)
      {
        v74 = *v71;
        *v73 = *v71;
        *(_QWORD *)(v74 + 8) = v73;
        *v71 = 0;
        *(v53 - 1) = 0;
      }
      *v71 = *(_QWORD *)(v72 + 40);
      *(_QWORD *)(v72 + 40) = v71;
      goto LABEL_49;
    }
  }
LABEL_67:
  v84 = "can't get simd memory op alignment";
  v85 = (unint64_t *)a3;
  v86 = 35;
LABEL_70:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v84, v85, v86, v89, a10);
LABEL_59:
  v77 = *(void (***)(WTF::StringPrintStream *__hidden))&v89[0];
LABEL_62:
  *(_QWORD *)a1 = v77;
  a1[8] = 1;
}

uint64_t WTF::Vector<std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198CD3184);
    }
    v4 = *(unint64_t **)a1;
    v5 = (unint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>>::move(v4, v5, v6, v7, v8, v9, v10, v11);
    if (v4)
    {
      if (*(unint64_t **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

void WTF::VectorMover<false,std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>>::move(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  if (a1 != a2)
  {
    v8 = (_QWORD *)a3;
    v10 = a1;
    do
    {
      v11 = *v10;
      *v10 = 0;
      *v8 = v11;
      v12 = *v10;
      *v10 = 0;
      if (v12)
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      ++v8;
      ++v10;
    }
    while (v10 != a2);
  }
}

uint64_t WTF::dataLog<char [6],double,char [23],char [2]>(const char *a1, double *a2, const char *a3, const char *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", a1);
  WTF::PrintStream::printf(v10, "%lf", *a2);
  WTF::PrintStream::printf(v10, "%s", a3);
  WTF::PrintStream::printf(v10, "%s", a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(unint64_t **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    result = WTF::VectorBufferBase<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a1, a2);
    if (!(_DWORD)result)
      return result;
    WTF::VectorMover<false,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v3, &v3[2 * v4], *(_QWORD *)a1, v6, v7, v8, v9, v10);
    if (v3)
    {
      if (*(unint64_t **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  return 1;
}

uint64_t WTF::VectorBufferBase<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v6;

  if (a2 >> 28)
    return 0;
  v2 = a2;
  WTF::tryFastMalloc((WTF *)(16 * a2), &v6);
  v4 = v6;
  if (!v6)
    return 0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)a1 = v4;
  return 1;
}

void WTF::VectorMover<false,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      v11 = *v10;
      *v10 = 0;
      *(_QWORD *)v8 = v11;
      LODWORD(v11) = *((_DWORD *)v10 + 2);
      *((_DWORD *)v10 + 2) = 0;
      *(_DWORD *)(v8 + 8) = v11;
      LODWORD(v11) = *((_DWORD *)v10 + 3);
      *((_DWORD *)v10 + 3) = 0;
      *(_DWORD *)(v8 + 12) = v11;
      v12 = *v10;
      if (*v10)
      {
        *v10 = 0;
        *((_DWORD *)v10 + 2) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      v10 += 2;
      v8 += 16;
    }
    while (v10 != a2);
  }
}

void WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(unint64_t **)a1;
      v8 = (unint64_t *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      WTF::VectorMover<false,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v7, v8, v9, v10, v11, v12, v13, v14);
      if (v7)
      {
        if (*(unint64_t **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v15, v16, v17, v18, v19, v20, v21);
      }
    }
  }
}

int *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(int *result, uint64_t *a2, int *a3)
{
  int *v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13 != -1)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v24 = 0;
        v23 = v6 + 4 * v25;
        goto LABEL_18;
      }
      if (v14 == -2)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (int *)(v6 + 4 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13 != -1);
    if (v15)
    {
      *v15 = -1;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v13 = v15;
    }
  }
  *v13 = v9;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_17;
LABEL_23:
    result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a2, v13);
    v13 = result;
    v19 = *a2;
    if (*a2)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_17;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_23;
LABEL_17:
  v23 = v19 + 4 * v22;
  v24 = 1;
LABEL_18:
  *(_QWORD *)v5 = v13;
  *((_QWORD *)v5 + 1) = v23;
  *((_BYTE *)v5 + 16) = v24;
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::activateSignalingMemory(void)::$_0 &&>>()
{
  BOOL v0;

  if (BYTE2(dword_1ECF4C6C3))
    v0 = BYTE3(qword_1ECF4C789) == 0;
  else
    v0 = 1;
  if (!v0)
    WTF::activateSignalHandlersFor(4);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::prepareSignalingMemory(void)::$_0 &&>>()
{
  BOOL v0;
  _QWORD *v1;
  char v2;

  if (BYTE2(dword_1ECF4C6C3))
    v0 = BYTE3(qword_1ECF4C789) == 0;
  else
    v0 = 1;
  if (!v0)
  {
    v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v1 = off_1E35B5618;
    if (byte_1ECF4C090)
      goto LABEL_13;
    if (byte_1ECF4C0AA != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198CD3780);
    }
    v2 = byte_1ECF4C0AF;
    dword_1ECF4C0A4 |= 2u;
    if (byte_1ECF4C0AF >= 4u)
    {
      __break(0xC471u);
      JUMPOUT(0x198CD37A0);
    }
    g_config[byte_1ECF4C0AF + 39] = (uint64_t)v1;
    byte_1ECF4C0AF = v2 + 1;
    if (byte_1ECF4C090)
    {
LABEL_13:
      __break(0xC471u);
      JUMPOUT(0x198CD3760);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<JSC::Wasm::prepareSignalingMemory(void)::$_0::operator() const(void)::{lambda(WTF::Signal,WTF::SigInfo &,__darwin_arm_thread_state64 &)#1},WTF::SignalAction,WTF::Signal,WTF::SigInfo &,__darwin_arm_thread_state64 &>::call(uint64_t a1, int a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  JSC::Wasm::Callee **v26;
  uint64_t v27;
  uint64_t v28;
  JSC::Wasm::Callee **v30;
  int v31;
  int v32;
  char v33;

  if (a2 != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x198CD3A1CLL);
  }
  v5 = *a3;
  v6 = *(_QWORD *)(a4 + 256);
  if (qword_1ECF4C1F8 > v6 || qword_1ECF4C200 <= v6)
  {
    if ((unint64_t)wasmLLIntPCRangeStart >= (unint64_t)wasmLLIntPCRangeEnd)
    {
      __break(0xC471u);
      JUMPOUT(0x198CD3A3CLL);
    }
    if (v6 < (unint64_t)wasmLLIntPCRangeStart || v6 > (unint64_t)wasmLLIntPCRangeEnd)
      return 1;
  }
  std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v33);
  if (!JSC::BufferMemoryManager::isInGrowableOrFastMemory((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, v5, v9, v10, v11, v12, v13, v14))return 1;
  if ((unint64_t)wasmLLIntPCRangeStart >= (unint64_t)wasmLLIntPCRangeEnd)
  {
    __break(0xC471u);
    JUMPOUT(0x198CD3A5CLL);
  }
  if (v6 >= (unint64_t)wasmLLIntPCRangeStart && v6 <= (unint64_t)wasmLLIntPCRangeEnd)
    goto LABEL_15;
  if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
  {
    goto LABEL_20;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
LABEL_20:
  if (!qword_1ECF53D80)
  {
    v26 = 0;
    v24 = 0;
    goto LABEL_28;
  }
  v24 = *(unsigned int *)(qword_1ECF53D80 - 4);
  v25 = qword_1ECF53D80 + 8 * v24;
  if (!*(_DWORD *)(qword_1ECF53D80 - 12))
  {
    v26 = (JSC::Wasm::Callee **)(qword_1ECF53D80 + 8 * v24);
LABEL_28:
    v25 = qword_1ECF53D80 + 8 * v24;
    goto LABEL_29;
  }
  v26 = (JSC::Wasm::Callee **)qword_1ECF53D80;
  if ((_DWORD)v24)
  {
    v27 = 8 * v24;
    v26 = (JSC::Wasm::Callee **)qword_1ECF53D80;
    while ((unint64_t)*v26 + 1 <= 1)
    {
      ++v26;
      v27 -= 8;
      if (!v27)
      {
        v26 = (JSC::Wasm::Callee **)v25;
        break;
      }
    }
  }
LABEL_29:
  if (qword_1ECF53D80)
    v28 = qword_1ECF53D80 + 8 * *(unsigned int *)(qword_1ECF53D80 - 4);
  else
    v28 = 0;
  if ((JSC::Wasm::Callee **)v28 != v26)
  {
    while (*((_BYTE *)*v26 + 4) != 1
         || JSC::Wasm::Callee::range(*v26, v15, v16, v17, v18, v19, v20, v21) > v6
         || v15 <= v6)
    {
      v30 = v26 + 1;
      v26 = (JSC::Wasm::Callee **)v25;
      if (v30 != (JSC::Wasm::Callee **)v25)
      {
        v26 = v30;
        while ((unint64_t)*v26 + 1 <= 1)
        {
          if (++v26 == (JSC::Wasm::Callee **)v25)
          {
            v26 = (JSC::Wasm::Callee **)v25;
            break;
          }
        }
      }
      if (v26 == (JSC::Wasm::Callee **)v28)
        goto LABEL_43;
    }
    v32 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v16, v17, v18, v19, v20, v21);
LABEL_15:
    result = 0;
    *(_QWORD *)(a4 + 256) = qword_1ECF53808;
    return result;
  }
LABEL_43:
  v31 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
  if (v31 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
      return 1;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v16, v17, v18, v19, v20, v21);
  return 1;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  int v5;
  int *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[4];

  v5 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v10);
        v7 = (int *)v10[0];
        if (v10[0])
        {
          v8 = (void *)(v10[0] + 20);
          *(_DWORD *)v10[0] = 2;
          v7[1] = v5;
          *((_QWORD *)v7 + 1) = v7 + 5;
          v7[4] = 4;
          result = (uint64_t)memcpy(v8, *(const void **)a3, *(_QWORD *)(a3 + 16));
        }
        goto LABEL_6;
      }
LABEL_12:
      v7 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v7 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_6;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v10);
  v7 = (int *)v10[0];
  if (v10[0])
  {
    v9 = v10[0] + 20;
    *(_DWORD *)v10[0] = 2;
    v7[1] = v5;
    *((_QWORD *)v7 + 1) = v7 + 5;
    v7[4] = 0;
    result = WTF::Unicode::convert(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), v9, *(_QWORD *)(a3 + 16), (uint64_t)v10);
  }
LABEL_6:
  *a4 = v7;
  return result;
}

uint64_t WTF::Vector<WTF::FixedVector<JSC::Wasm::JumpTableEntry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::FixedVector<JSC::Wasm::JumpTableEntry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = (_QWORD *)v11;
      v20 = 8 * v10;
      v21 = (unint64_t *)v5;
      do
      {
        v22 = *v21;
        *v21 = 0;
        *v19 = v22;
        v23 = *v21;
        *v21 = 0;
        if (v23)
          WTF::fastFree(v23, v12, v13, v14, v15, v16, v17, v18);
        ++v19;
        ++v21;
        v20 -= 8;
      }
      while (v20);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::FixedVector<JSC::Wasm::JumpTableEntry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (_QWORD *)v9;
        v18 = 8 * v8;
        v19 = (unint64_t *)v7;
        do
        {
          v20 = *v19;
          *v19 = 0;
          *v17 = v20;
          v21 = *v19;
          *v19 = 0;
          if (v21)
            WTF::fastFree(v21, v10, v11, v12, v13, v14, v15, v16);
          ++v17;
          ++v19;
          v18 -= 8;
        }
        while (v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::Wasm::FunctionIPIntMetadataGenerator::addLEB128ConstantAndLengthForType(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v5 = a5;
  if (a2 == 240)
  {
    v14 = *(unsigned int *)(a1 + 40);
    v9 = *(unsigned int *)(a1 + 44);
    v15 = v9 + 5;
    if (v9 + 5 <= v14)
      goto LABEL_19;
    v16 = v14 + (v14 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= v15)
      v18 = v9 + 5;
    else
      v18 = v17;
    if (!HIDWORD(v18))
      goto LABEL_50;
    goto LABEL_56;
  }
  if (a2 != 254)
  {
    if (a2 != 255)
      return;
    v8 = *(unsigned int *)(a1 + 40);
    v9 = *(unsigned int *)(a1 + 44);
    if (a5 == 2)
    {
      v10 = v9 + 1;
      if (v9 >= v8)
      {
        v31 = v8 + (v8 >> 2);
        if (v31 >= 0x10)
          v32 = v31 + 1;
        else
          v32 = 16;
        if (v32 <= v10)
          v33 = v9 + 1;
        else
          v33 = v32;
        if (HIDWORD(v33))
        {
          __break(0xC471u);
          JUMPOUT(0x198CD3FA8);
        }
        v34 = *(const void **)(a1 + 32);
        v35 = (void *)WTF::fastMalloc((WTF *)v33);
        *(_DWORD *)(a1 + 40) = v33;
        *(_QWORD *)(a1 + 32) = v35;
        memcpy(v35, v34, v9);
        if (v34)
        {
          if (*(const void **)(a1 + 32) == v34)
          {
            *(_QWORD *)(a1 + 32) = 0;
            *(_DWORD *)(a1 + 40) = 0;
          }
          WTF::fastFree((unint64_t)v34, v36, v37, v38, v39, v40, v41, v42);
        }
      }
      *(_DWORD *)(a1 + 44) = v10;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + v9) = (a4 & 0x80) != 0;
      return;
    }
    v15 = v9 + 5;
    if (v9 + 5 <= v8)
    {
LABEL_19:
      *(_DWORD *)(a1 + 44) = v15;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + v9) = v5;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + v9 + 1) = a4;
      return;
    }
    v43 = v8 + (v8 >> 2);
    if (v43 >= 0x10)
      v44 = v43 + 1;
    else
      v44 = 16;
    if (v44 <= v15)
      v18 = v9 + 5;
    else
      v18 = v44;
    if (!HIDWORD(v18))
    {
LABEL_50:
      v45 = *(const void **)(a1 + 32);
      v46 = (void *)WTF::fastMalloc((WTF *)v18);
      *(_DWORD *)(a1 + 40) = v18;
      *(_QWORD *)(a1 + 32) = v46;
      memcpy(v46, v45, v9);
      if (v45)
      {
        if (*(const void **)(a1 + 32) == v45)
        {
          *(_QWORD *)(a1 + 32) = 0;
          *(_DWORD *)(a1 + 40) = 0;
        }
        WTF::fastFree((unint64_t)v45, v47, v48, v49, v50, v51, v52, v53);
      }
      goto LABEL_19;
    }
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x198CD3E30);
  }
  v11 = *(unsigned int *)(a1 + 40);
  v12 = *(unsigned int *)(a1 + 44);
  v13 = v12 + 9;
  if (v12 + 9 > v11)
  {
    v19 = v11 + (v11 >> 2);
    if (v19 >= 0x10)
      v20 = v19 + 1;
    else
      v20 = 16;
    if (v20 <= v13)
      v21 = v12 + 9;
    else
      v21 = v20;
    if (HIDWORD(v21))
    {
      __break(0xC471u);
      JUMPOUT(0x198CD3FA0);
    }
    v22 = *(const void **)(a1 + 32);
    v23 = (void *)WTF::fastMalloc((WTF *)v21);
    *(_DWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 32) = v23;
    memcpy(v23, v22, v12);
    if (v22)
    {
      if (*(const void **)(a1 + 32) == v22)
      {
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 40) = 0;
      }
      WTF::fastFree((unint64_t)v22, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  *(_DWORD *)(a1 + 44) = v13;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + v12) = v5;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + v12 + 1) = a4;
}

uint64_t JSC::Wasm::Global::get(JSC::Wasm::Global *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  JSC::Heap **v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  JSC::Exception *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  double v31;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD *);
  _QWORD *v43;
  WTF::StringImpl *v44;
  _QWORD v45[3];

  v9 = *((unsigned __int8 *)this + 8);
  result = 10;
  switch(v9)
  {
    case 239:
    case 240:
      return *((_QWORD *)this + 5);
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
      return result;
    case 251:
      v12 = *(JSC::Heap ***)(a2 + 56);
      v13 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v13 = 0x1F00000002;
      *(_QWORD *)(v13 + 8) = "Cannot get value of v128 global";
      *(_DWORD *)(v13 + 16) = 4;
      v44 = (WTF::StringImpl *)v13;
      v14 = *(_QWORD *)(a2 + 1408);
      if ((v14 & 1) != 0)
      {
        v42 = *(uint64_t (**)(_QWORD *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
        v43 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a2 & 8) != 0)
          v43 = (_QWORD *)(a2 - 16);
        v45[0] = *v43;
        v45[1] = a2;
        v45[2] = a2 + 1408;
        v14 = v42(v45);
      }
      v15 = JSC::ErrorInstance::create(v12, v14, &v44, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
      v22 = (JSC::Exception *)v15;
      if ((v15 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)))
      {
        v22 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, (JSC::VM *)v15, 0, v16, v17, v18, v19, v20);
      }
      JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v22, v21, v16, v17, v18, v19, v20);
      v30 = v44;
      v44 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
      return 0;
    case 252:
      v31 = *((double *)this + 5);
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FF7FFFFFFFFFFFFLL
        && (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFLL) != 0x7FF0000000000000)
      {
        goto LABEL_18;
      }
      return *(_QWORD *)&v31 + 0x2000000000000;
    case 253:
      v31 = *((float *)this + 10);
      if (COERCE_UNSIGNED_INT64(fabs(v31)) > 0x7FEFFFFFFFFFFFFFLL)
        return *(_QWORD *)&v31 + 0x2000000000000;
LABEL_18:
      v33 = (int)v31;
      if (v31 == (double)(int)v33 && ((_DWORD)v33 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
        return v33 | 0xFFFE000000000000;
      else
        return *(_QWORD *)&v31 + 0x2000000000000;
    case 254:
      return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a2, *((_QWORD *)this + 5), a3, a4, a5, a6, a7, a8);
    case 255:
      v33 = *((unsigned int *)this + 10);
      return v33 | 0xFFFE000000000000;
    default:
      if ((v9 - 227) < 2)
        return *((_QWORD *)this + 5);
      return result;
  }
}

void JSC::Wasm::Global::set(uint64_t a1, JSC::JSGlobalObject *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, __n128 a10)
{
  unint64_t v10;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unsigned int v19;
  BOOL v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  char **v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  double v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  double v64;
  double v65;
  JSC::VM *v66;
  JSC::Structure *v67;

  v10 = (unint64_t)a3;
  v13 = *((_QWORD *)a2 + 7);
  v66 = (JSC::VM *)v13;
  v67 = a3;
  switch(*(_BYTE *)(a1 + 8))
  {
    case 0xEF:
    case 0xF0:
      goto LABEL_4;
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
      goto LABEL_141;
    case 0xFB:
      v14 = "Cannot set value of v128 global";
      v15 = (unint64_t)a2;
      v16 = 32;
      goto LABEL_139;
    case 0xFC:
      if ((unint64_t)a3 >= 0xFFFE000000000000)
      {
        v22 = (double)(int)a3;
      }
      else if ((unint64_t)a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase(&v67, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      }
      else
      {
        *(_QWORD *)&v22 = (char *)a3 - 0x2000000000000;
      }
      if (!*(_DWORD *)(v13 + 80))
        goto LABEL_67;
      v64 = v22;
      v58 = *(_DWORD *)(v13 + 80);
      if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v22 = v64;
      if (!*(_QWORD *)(v13 + 16))
LABEL_67:
        *(double *)(a1 + 40) = v22;
      return;
    case 0xFD:
      if ((unint64_t)a3 >= 0xFFFE000000000000)
      {
        v35 = (double)(int)a3;
      }
      else if ((unint64_t)a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase(&v67, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      }
      else
      {
        *(_QWORD *)&v35 = (char *)a3 - 0x2000000000000;
      }
      if (*(_DWORD *)(v13 + 80))
      {
        v65 = v35;
        v62 = *(_DWORD *)(v13 + 80);
        if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v35 = v65;
        if (*(_QWORD *)(v13 + 16))
          return;
      }
      *(float *)&v47 = v35;
      v23 = v47;
      goto LABEL_71;
    case 0xFE:
      JSC::JSValue::toBigInt(&v67, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v31 = v30;
      if (*(_DWORD *)(v13 + 80))
      {
        v60 = *(_DWORD *)(v13 + 80);
        if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v24, v25, v26, v27, v28, v29);
        if (*(_QWORD *)(v13 + 16))
          goto LABEL_118;
      }
      if (!*(_DWORD *)(v31 + 8))
      {
LABEL_118:
        v34 = 0;
      }
      else
      {
        v32 = *(_QWORD *)(v31 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v33 = *(_QWORD *)v32;
        if (*(_BYTE *)(v31 + 16))
          v34 = -v33;
        else
          v34 = v33;
      }
      if (!*(_DWORD *)(v13 + 80))
        goto LABEL_120;
      v61 = *(_DWORD *)(v13 + 80);
      if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v24, v25, v26, v27, v28, v29);
      if (!*(_QWORD *)(v13 + 16))
LABEL_120:
        *(_QWORD *)(a1 + 40) = v34;
      return;
    case 0xFF:
      if ((unint64_t)a3 < 0xFFFE000000000000)
      {
        v51 = (unint64_t)a3 - 0x2000000000000;
        if ((unint64_t)a3 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase(&v67, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          v51 = v57;
        }
        v52 = (v51 >> 52) & 0x7FF;
        v53 = v52 - 1023;
        v54 = v51 >> (51 - (v51 >> 52));
        if (v52 > 0x433)
          LODWORD(v54) = v51 << ((v51 >> 52) - 51);
        if (v52 >= 0x41F)
          v55 = v54;
        else
          v55 = (((1 << ((v51 >> 52) + 1)) - 1) & v54) + (1 << ((v51 >> 52) + 1));
        if ((v51 & 0x8000000000000000) == 0)
          v56 = v55;
        else
          v56 = -v55;
        if (v53 <= 0x53)
          LODWORD(v10) = v56;
        else
          LODWORD(v10) = 0;
      }
      if (*(_DWORD *)(v13 + 80))
      {
        v59 = *(_DWORD *)(v13 + 80);
        if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v13 + 16))
          return;
      }
      v23 = v10;
LABEL_71:
      *(_QWORD *)(a1 + 40) = v23;
      return;
    default:
      if (*(unsigned __int8 *)(a1 + 8) - 227 >= 2)
      {
LABEL_141:
        __break(0xC471u);
        JUMPOUT(0x198CD4838);
      }
LABEL_4:
      v17 = *(_QWORD *)(a1 + 16);
      v18 = *(_BYTE *)(a1 + 8);
      if (BYTE1(dword_1ECF4C7B0))
      {
        v19 = (v18 + 29);
        if (v19 > 1 || v17 != -17)
        {
          v21 = v19 <= 1 && v17 == -16;
          if (v21 || (v18 + 29) <= 1u && v17 <= 0xFFFFFFFFFFFFFFC0 && !*(_DWORD *)(v17 + 32))
            goto LABEL_43;
          goto LABEL_58;
        }
      }
      else
      {
        if (*(unsigned __int8 *)(a1 + 8) == 240)
        {
LABEL_43:
          v36 = *(_QWORD *)(a1 + 32);
          if (!v36)
          {
            __break(0xC471u);
            JUMPOUT(0x198CD46D4);
          }
          if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) < 0x17u)
            goto LABEL_49;
          v40 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
          if (v40 == &JSC::WebAssemblyFunction::s_info)
          {
            v41 = 0;
            v42 = v10;
            goto LABEL_51;
          }
          if (v40 == &JSC::WebAssemblyWrapperFunction::s_info)
          {
            v42 = 0;
            v41 = v10;
          }
          else
          {
LABEL_49:
            if (*(unsigned __int8 *)(a1 + 8) - 239 >= 2 && *(unsigned __int8 *)(a1 + 8) != 227
              || v10 != 2)
            {
              v14 = "Funcref must be an exported wasm function";
              v15 = (unint64_t)a2;
              v16 = 42;
              goto LABEL_139;
            }
            v41 = 0;
            v42 = 0;
          }
LABEL_51:
          if (BYTE1(dword_1ECF4C7B0) && (v18 + 29) <= 1u && v17 <= 0xFFFFFFFFFFFFFFC0 && v10 != 2)
          {
            v63 = v42 ? v42 : v41;
            if (v17 != *(_QWORD *)(v63 + 40))
            {
              v14 = "Argument function did not match the reference type";
              v15 = (unint64_t)a2;
              v16 = 51;
              goto LABEL_139;
            }
          }
          v43 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v36 & 8) != 0)
            v43 = (uint64_t *)(v36 - 16);
          v39 = *v43;
          *(_QWORD *)(a1 + 40) = v10;
          if (v10 && (v10 & 0xFFFE000000000002) == 0)
            goto LABEL_88;
          return;
        }
        if (*(unsigned __int8 *)(a1 + 8) != 239)
        {
LABEL_58:
          *(_QWORD *)&v44 = v10 - 0x2000000000000;
          if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
            && (*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            a9.i64[0] = v10 - 0x2000000000000;
            a10.n128_f64[0] = (double)(int)v44;
            if (a10.n128_f64[0] == v44 && ((*(_QWORD *)&v44 & 0x8000000000000000) == 0 || (int)v44))
            {
              v45 = (*(_QWORD *)&v44 >> 52) & 0x7FFLL;
              if ((v45 - 1023) > 0x53)
              {
                v46 = 0;
LABEL_81:
                v10 = v46 | 0xFFFE000000000000;
                goto LABEL_82;
              }
              v48 = *(_QWORD *)&v44 >> (51 - (*(_QWORD *)&v44 >> 52));
              if (v45 > 0x433)
                LODWORD(v48) = v10 << ((*(_QWORD *)&v44 >> 52) - 51);
              if (v45 >= 0x41F)
                v49 = v48;
              else
                v49 = (((1 << ((*(_QWORD *)&v44 >> 52) + 1)) - 1) & v48) + (1 << ((*(_QWORD *)&v44 >> 52) + 1));
              if (v44 >= 0.0)
                v46 = v49;
              else
                v46 = -v49;
              if ((int)(v46 + 0x40000000) >= 0)
                goto LABEL_81;
            }
          }
LABEL_82:
          if ((((uint64_t (*)(unint64_t, _QWORD, __n128, __n128))JSC::Wasm::TypeInformation::castReference)(v10, ((v18 + 29) < 0xEu) & (0x3001u >> (v18 + 29)), (__n128)a9, a10) & 1) == 0)
          {
            v14 = "Argument value did not match reference type";
            v15 = (unint64_t)a2;
            v16 = 44;
LABEL_139:
            JSC::throwTypeError(v15, &v66, (uint64_t)v14, v16);
            return;
          }
          v36 = *(_QWORD *)(a1 + 32);
          v50 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v36 & 8) != 0)
            v50 = (uint64_t *)(v36 - 16);
          v39 = *v50;
          *(_QWORD *)(a1 + 40) = v10;
          if ((v10 & 0xFFFE000000000002) == 0 && v10 && v36)
            goto LABEL_88;
          return;
        }
      }
      v36 = *(_QWORD *)(a1 + 32);
      if (!v36)
      {
        __break(0xC471u);
        JUMPOUT(0x198CD46B4);
      }
      v37 = *(unsigned __int8 *)(a1 + 8);
      if (v37 != 239 && v37 != 227 && v10 == 2)
      {
        v14 = "Non-null Externref cannot be null";
        v15 = (unint64_t)a2;
        v16 = 34;
        goto LABEL_139;
      }
      v38 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v36 & 8) != 0)
        v38 = (uint64_t *)(v36 - 16);
      v39 = *v38;
      *(_QWORD *)(a1 + 40) = v10;
      if (v10 && (v10 & 0xFFFE000000000002) == 0)
      {
LABEL_88:
        if (*(_DWORD *)(v39 + 760) >= *(unsigned __int8 *)(v36 + 7))
          JSC::Heap::writeBarrierSlowPath(v39 + 192, v36);
      }
      return;
  }
}

void JSC::Wasm::Global::visitAggregate(JSC::Wasm::Global *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unint64_t v9;
  int v12;

  if (BYTE1(dword_1ECF4C7B0))
    v8 = 29;
  else
    v8 = 17;
  if ((v8 + *((_BYTE *)this + 8)) <= 1u)
  {
    if (!*((_QWORD *)this + 4))
    {
      __break(0xC471u);
      JUMPOUT(0x198CD49CCLL);
    }
    v9 = *((_QWORD *)this + 5);
    if ((v9 & 0xFFFE000000000002) == 0 && v9 != 0)
    {
      if ((v9 & 8) != 0)
      {
        if ((*(_BYTE *)(v9 - 79) & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        v12 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != v12)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000), v12, a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v9 & 0xFFFFFFFFFFFFC000) + 8 * ((v9 >> 10) & 0xF) + 0x28) >> (v9 >> 4)) & 1) == 0)
          goto LABEL_18;
      }
      if (!*((_QWORD *)a2 + 21))
        return;
LABEL_18:
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v9, 0, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::Wasm::HandlerInfo::initialize(uint64_t result, __int128 *a2, uint64_t a3)
{
  __int128 v3;

  v3 = *a2;
  *(_OWORD *)result = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(result + 32) = a3;
  if ((v3 | 2) == 2)
    *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 6);
  return result;
}

uint64_t JSC::Wasm::HandlerInfo::handlerForIndex(uint64_t a1, unsigned int **a2, unsigned int a3, uint64_t a4)
{
  unsigned int *v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;

  v5 = *a2;
  if (*a2)
    result = (uint64_t)(*a2 + 2);
  else
    result = 0;
  if (v5)
    v7 = (uint64_t)&(*a2)[12 * *v5 + 2];
  else
    v7 = 0;
  if (result != v7)
  {
    if (a4)
    {
      v8 = 0;
      v9 = 0;
      v10 = *(_DWORD **)(a1 + 144);
      while (1)
      {
        if (*(_DWORD *)(result + 4) > a3 || *(_DWORD *)(result + 8) <= a3)
          goto LABEL_23;
        if ((v8 & 1) != 0 && *(_DWORD *)(result + 20) != v9)
          goto LABEL_22;
        v11 = *(_DWORD *)result;
        if (*(_DWORD *)result)
        {
          if (v11 == 2)
          {
            v9 = *(_DWORD *)(result + 40);
LABEL_22:
            v8 = 1;
            goto LABEL_23;
          }
          if (v11 == 1)
            return result;
        }
        else
        {
          v12 = *(unsigned int *)(result + 40);
          if (*v10 <= v12)
          {
            result = 146;
            __break(0xC471u);
            return result;
          }
          if (*(_QWORD *)&v10[2 * v12 + 2] == a4)
            return result;
        }
        v8 = 0;
LABEL_23:
        result += 48;
        if (result == v7)
          return 0;
      }
    }
    v13 = 0;
    v14 = 0;
    do
    {
      if (*(_DWORD *)(result + 4) <= a3 && *(_DWORD *)(result + 8) > a3)
      {
        if ((v13 & 1) == 0 || *(_DWORD *)(result + 20) == v14)
        {
          if (*(_DWORD *)result != 2)
          {
            if (*(_DWORD *)result == 1)
              return result;
            v13 = 0;
            goto LABEL_35;
          }
          v14 = *(_DWORD *)(result + 40);
        }
        v13 = 1;
      }
LABEL_35:
      result += 48;
    }
    while (result != v7);
  }
  return 0;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Add@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Add@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Sub@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Sub@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Mul@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Mul@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32DivS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32DivU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64DivS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64DivU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32RemS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32RemU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64RemS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64RemU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32And@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64And@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Xor@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Xor@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Or@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Or@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Shl@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32ShrU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32ShrS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Shl@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64ShrU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64ShrS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Rotl@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Rotl@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Rotr@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Rotr@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void JSC::Wasm::IPIntGenerator::addI32Popcnt(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64Popcnt(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32Clz(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64Clz(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32Ctz(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64Ctz(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Add@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Add@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Sub@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Sub@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Mul@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Mul@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Div@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Div@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Min@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Max@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Min@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Max@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void JSC::Wasm::IPIntGenerator::addF32Nearest(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64Nearest(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32Floor(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64Floor(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32Ceil(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64Ceil(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Copysign@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Copysign@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void JSC::Wasm::IPIntGenerator::addF32Sqrt(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64Sqrt(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32Neg(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64Neg(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32Abs(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64Abs(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Eq@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32Ne@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32LtS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32LtU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32LeS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32LeU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32GtS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32GtU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32GeU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI32GeS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void JSC::Wasm::IPIntGenerator::addI32Eqz(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Eq@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64Ne@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64GtS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64GtU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64GeS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64GeU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64LtS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64LtU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64LeS@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addI64LeU@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void JSC::Wasm::IPIntGenerator::addI64Eqz(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Eq@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Ne@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Lt@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Le@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Gt@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF32Ge@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Eq@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Ne@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Lt@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Le@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Gt@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::IPIntGenerator::addF64Ge@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (HIDWORD(v2))
  {
    __break(0xC471u);
  }
  else
  {
    *result = v2;
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void JSC::Wasm::IPIntGenerator::addI64ExtendSI32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64ExtendUI32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32Extend8S(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32Extend16S(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64Extend8S(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64Extend16S(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64Extend32S(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64Trunc(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32Trunc(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32TruncSF64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32TruncSF32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32TruncUF64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32TruncUF32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64TruncSF64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64TruncSF32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64TruncUF64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64TruncUF32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32WrapI64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32DemoteF64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64PromoteF32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32ReinterpretI32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI32ReinterpretF32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64ReinterpretI64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addI64ReinterpretF64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32ConvertSI32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32ConvertUI32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32ConvertSI64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF32ConvertUI64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64ConvertSI32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64ConvertUI32(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64ConvertSI64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addF64ConvertUI64(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addBlock(_BYTE *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  const void *v44;
  void *v45;

  JSC::Wasm::splitStack<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(*(_DWORD *)(a3 + 8), a4, a6, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
  v20 = *(_DWORD *)a2 - a6[3];
  *(_QWORD *)a5 = a3;
  *(_QWORD *)(a5 + 8) = 1;
  v21 = *(_QWORD *)(a5 + 16);
  if (v21)
  {
    *(_QWORD *)(a5 + 16) = 0;
    *(_DWORD *)(a5 + 24) = 0;
    WTF::fastFree(v21, v13, v14, v15, v16, v17, v18, v19);
  }
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = -1;
  *(_QWORD *)(a5 + 40) = -1;
  *(_DWORD *)(a5 + 48) = v20;
  *(_DWORD *)(a5 + 52) = 0;
  v22 = *(_QWORD *)(a2 + 32);
  v23 = *(_DWORD *)(v22 + 44);
  v24 = *(unsigned int *)(v22 + 164);
  if ((_DWORD)v24 == *(_DWORD *)(v22 + 160))
  {
    v25 = v24 + (v24 >> 2);
    if (v25 >= 0x10)
      v26 = v25 + 1;
    else
      v26 = 16;
    if (v26 <= v24 + 1)
      v27 = v24 + 1;
    else
      v27 = v26;
    if (v27 >> 30)
    {
      __break(0xC471u);
      goto LABEL_44;
    }
    v28 = *(const void **)(v22 + 152);
    v29 = (void *)WTF::fastMalloc((WTF *)(4 * v27));
    *(_DWORD *)(v22 + 160) = v27;
    *(_QWORD *)(v22 + 152) = v29;
    memcpy(v29, v28, 4 * v24);
    if (v28)
    {
      if (*(const void **)(v22 + 152) == v28)
      {
        *(_QWORD *)(v22 + 152) = 0;
        *(_DWORD *)(v22 + 160) = 0;
      }
      WTF::fastFree((unint64_t)v28, v13, v14, v15, v16, v17, v18, v19);
    }
    *(_DWORD *)(*(_QWORD *)(v22 + 152) + 4 * *(unsigned int *)(v22 + 164)) = v23;
    v30 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v22 + 152) + 4 * v24) = v23;
    v30 = v22;
  }
  ++*(_DWORD *)(v22 + 164);
  v31 = *(unsigned int *)(v30 + 40);
  v32 = *(unsigned int *)(v30 + 44);
  v33 = v32 + 8;
  if (v32 + 8 > v31)
  {
    v41 = v31 + (v31 >> 2);
    if (v41 >= 0x10)
      v42 = v41 + 1;
    else
      v42 = 16;
    if (v42 <= v33)
      v43 = v32 + 8;
    else
      v43 = v42;
    if (HIDWORD(v43))
    {
      __break(0xC471u);
      goto LABEL_43;
    }
    v44 = *(const void **)(v30 + 32);
    v45 = (void *)WTF::fastMalloc((WTF *)v43);
    *(_DWORD *)(v30 + 40) = v43;
    *(_QWORD *)(v30 + 32) = v45;
    memcpy(v45, v44, v32);
    if (v44)
    {
      if (*(const void **)(v30 + 32) == v44)
      {
        *(_QWORD *)(v30 + 32) = 0;
        *(_DWORD *)(v30 + 40) = 0;
      }
      WTF::fastFree((unint64_t)v44, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  *(_DWORD *)(v30 + 44) = v33;
  v34 = *(_QWORD *)(a2 + 32);
  v35 = **(_QWORD **)(a2 + 16);
  if (*(_QWORD *)(v34 + 24) <= v35)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    JUMPOUT(0x198CD5C38);
  }
  if (*(_BYTE *)(*(_QWORD *)(v34 + 16) + v35) != 2)
  {
    v36 = *(unsigned int *)(v34 + 164);
    if ((_DWORD)v36)
    {
      v37 = *(unsigned int **)(v34 + 152);
      v38 = 4 * v36;
      do
      {
        v39 = *v37++;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v39) = **(_DWORD **)(a2 + 16)
                                                                    - *(_DWORD *)(*(_QWORD *)(a2 + 32) + 52);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v39 + 4) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 44);
        v38 -= 4;
      }
      while (v38);
      v34 = *(_QWORD *)(a2 + 32);
    }
    if (*(_DWORD *)(v34 + 160))
    {
      if (*(_DWORD *)(v34 + 164))
        *(_DWORD *)(v34 + 164) = 0;
      v40 = *(_QWORD *)(v34 + 152);
      if (v40)
      {
        *(_QWORD *)(v34 + 152) = 0;
        *(_DWORD *)(v34 + 160) = 0;
        WTF::fastFree(v40, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::splitStack<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(unsigned int a1, _DWORD *a2, _DWORD *__dst, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  __int128 v16;
  unint64_t v17;
  int v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE v22[384];

  v10 = a2[3] - a1;
  v11 = a1;
  v20 = v22;
  v21 = 16;
  if (a1 >= 0x11)
  {
    if (a1 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return;
    }
    LODWORD(v21) = 24 * a1 / 0x18;
    v20 = (_BYTE *)WTF::fastMalloc((WTF *)(24 * a1));
    v12 = 0;
    goto LABEL_6;
  }
  if (a1)
  {
    v12 = 0;
LABEL_6:
    v13 = 24 * v10;
    do
    {
      v14 = *(_QWORD *)a2 + v13;
      v15 = &v20[24 * v12];
      v16 = *(_OWORD *)v14;
      *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
      *(_OWORD *)v15 = v16;
      v12 = ++HIDWORD(v21);
      v13 += 24;
      --v11;
    }
    while (v11);
  }
  v17 = *(_QWORD *)__dst;
  if (*(_DWORD **)__dst != __dst + 4)
  {
    if (v17)
    {
      *(_QWORD *)__dst = 0;
      __dst[2] = 0;
      WTF::fastFree(v17, a2, (uint64_t)__dst, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)__dst = __dst + 4;
  }
  if (v20 == v22)
  {
    v19 = HIDWORD(v21);
    if (HIDWORD(v21))
      memcpy(__dst + 4, v22, 24 * ((24 * (unint64_t)HIDWORD(v21) - 24) / 0x18) + 24);
    v18 = v21;
  }
  else
  {
    *(_QWORD *)__dst = v20;
    v18 = v21;
    v19 = HIDWORD(v21);
  }
  __dst[2] = v18;
  __dst[3] = v19;
  a2[3] = v10;
}

void JSC::Wasm::IPIntGenerator::addElse(_BYTE *a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  __int128 v21;

  v12 = *a3;
  if (*(_DWORD *)(a4 + 8))
  {
    if (*(_DWORD *)(a4 + 12))
      *(_DWORD *)(a4 + 12) = 0;
    v13 = *(_QWORD *)a4;
    if (a4 + 16 != *(_QWORD *)a4 && v13 != 0)
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      WTF::fastFree(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v13 = *(_QWORD *)a4;
    }
    if (!v13)
    {
      *(_QWORD *)a4 = a4 + 16;
      *(_DWORD *)(a4 + 8) = 16;
    }
  }
  if (*(_DWORD *)(v12 + 8))
  {
    v15 = 0;
    do
    {
      v16 = (uint64_t *)(*(_QWORD *)v12 + 16 * (v15 + *(_DWORD *)(v12 + 12)));
      v17 = *v16;
      v18 = v16[1];
      *(_QWORD *)&v21 = v17;
      *((_QWORD *)&v21 + 1) = v18;
      v19 = *(_DWORD *)(a4 + 12);
      if (v19 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a4, &v21, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v20 = (_QWORD *)(*(_QWORD *)a4 + 24 * v19);
        *v20 = v17;
        v20[1] = v18;
        ++*(_DWORD *)(a4 + 12);
      }
      ++v15;
    }
    while (v15 < *(_DWORD *)(v12 + 8));
  }
  JSC::Wasm::IPIntGenerator::addElseToUnreachable(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::Wasm::IPIntGenerator::addElseToUnreachable(_BYTE *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  const void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = *(_QWORD *)a3;
  v9 = *(unsigned int *)(a3 + 48);
  *(_DWORD *)a2 = v9;
  v10 = *(int *)(v8 + 8);
  v11 = v10 + v9;
  if ((unint64_t)(v10 + v9) >> 32)
    goto LABEL_26;
  *(_DWORD *)a2 = v11;
  if ((int)v10 >= 1)
  {
    if (*((_DWORD *)a2 + 1) > v11)
      v11 = *((_DWORD *)a2 + 1);
    *((_DWORD *)a2 + 1) = v11;
  }
  v15 = (_QWORD *)(a3 + 32);
  *(_DWORD *)(*(_QWORD *)(a2[4] + 32) + *(int *)(a3 + 32)) = *(_DWORD *)a2[2] - *(_DWORD *)(a2[4] + 52);
  v16 = a2[4];
  v17 = *(_DWORD *)(v16 + 44);
  if (*(_BYTE *)(a2[2] + 14608) != 11)
  {
    *(_DWORD *)(*(_QWORD *)(v16 + 32) + *(int *)(a3 + 32) + 4) = v17 + 8;
    v22 = (_QWORD *)(a3 + 16);
    v21 = *(_QWORD *)(a3 + 16);
    v23 = *(_DWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 8) = 1;
    if (v21)
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 24) = 0;
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    }
    *v22 = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *v15 = -1;
    *(_QWORD *)(a3 + 40) = -1;
    *(_DWORD *)(a3 + 48) = v23;
    *(_DWORD *)(a3 + 52) = 0;
    v24 = a2[4];
    v25 = *(unsigned int *)(v24 + 40);
    v26 = *(unsigned int *)(v24 + 44);
    *(_DWORD *)(a3 + 32) = v26;
    v27 = v26 + 8;
    if (v26 + 8 <= v25)
      goto LABEL_13;
    v28 = v25 + (v25 >> 2);
    if (v28 >= 0x10)
      v29 = v28 + 1;
    else
      v29 = 16;
    if (v29 <= v27)
      v30 = v26 + 8;
    else
      v30 = v29;
    if (!HIDWORD(v30))
    {
      v31 = *(const void **)(v24 + 32);
      v32 = (void *)WTF::fastMalloc((WTF *)v30);
      *(_DWORD *)(v24 + 40) = v30;
      *(_QWORD *)(v24 + 32) = v32;
      memcpy(v32, v31, v26);
      if (v31)
      {
        if (*(const void **)(v24 + 32) == v31)
        {
          *(_QWORD *)(v24 + 32) = 0;
          *(_DWORD *)(v24 + 40) = 0;
        }
        WTF::fastFree((unint64_t)v31, v33, v34, v35, v36, v37, v38, v39);
      }
LABEL_13:
      *(_DWORD *)(v24 + 44) = v27;
      goto LABEL_14;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x198CD60A0);
  }
  *(_DWORD *)(*(_QWORD *)(v16 + 32) + *(int *)(a3 + 32) + 4) = v17;
  v19 = (_QWORD *)(a3 + 16);
  v18 = *(_QWORD *)(a3 + 16);
  v20 = *(_DWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 8) = 1;
  if (v18)
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  *v19 = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *v15 = -1;
  *(_QWORD *)(a3 + 40) = -1;
  *(_DWORD *)(a3 + 48) = v20;
  *(_DWORD *)(a3 + 52) = 0;
LABEL_14:
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addCatchToUnreachable(_BYTE *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  size_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  size_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  const void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  const void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  const void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[28];

  v11 = a3;
  if (*(_DWORD *)(a5 + 8) == 4)
  {
    v15 = (_QWORD *)(a5 + 16);
    v14 = *(_QWORD *)(a5 + 16);
    v16 = *(_DWORD *)(a5 + 36);
    v17 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 14616);
    v18 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 52);
    v19 = *(_QWORD *)(a5 + 48);
    *(_QWORD *)(a5 + 8) = 5;
    if (v14)
    {
      *(_QWORD *)(a5 + 16) = 0;
      *(_DWORD *)(a5 + 24) = 0;
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
    *v15 = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 32) = -1;
    *(_DWORD *)(a5 + 36) = v16;
    *(_DWORD *)(a5 + 40) = -1;
    *(_DWORD *)(a5 + 44) = v17 - v18;
    *(_QWORD *)(a5 + 48) = v19;
  }
  if (*(_DWORD *)(a4 + 32))
    v20 = 0;
  else
    v20 = a4 + 8;
  v21 = *(_DWORD *)(v20 + 8);
  if (v21)
  {
    v22 = 0;
    v23 = *(_DWORD *)(a6 + 12);
    do
    {
      if (v23 == *(_DWORD *)(a6 + 8))
      {
        WTF::Vector<JSC::Wasm::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (WTF *)(v23 + 1), (unint64_t)v101);
        v23 = *(_DWORD *)(a6 + 12);
        v21 = *(_DWORD *)(v20 + 8);
      }
      *(_DWORD *)(a6 + 12) = ++v23;
      ++v22;
    }
    while (v22 < v21);
  }
  v24 = *(unsigned int *)(a5 + 48);
  *a2 = v24;
  v25 = v24 + v21;
  if (HIDWORD(v25))
    goto LABEL_78;
  *a2 = v25;
  if (v21 >= 1)
  {
    v26 = a2[1];
    if (v26 <= v25)
      v26 = v25;
    a2[1] = v26;
  }
  v27 = *((_QWORD *)a2 + 4);
  v28 = *(_DWORD *)(v27 + 44);
  v29 = *(unsigned int *)(a5 + 28);
  if ((_DWORD)v29 == *(_DWORD *)(a5 + 24))
  {
    v30 = v29 + (v29 >> 2);
    if (v30 >= 0x10)
      v31 = v30 + 1;
    else
      v31 = 16;
    if (v31 <= v29 + 1)
      v32 = v29 + 1;
    else
      v32 = v31;
    if (v32 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198CD64ECLL);
    }
    v33 = *(const void **)(a5 + 16);
    v34 = (void *)WTF::fastMalloc((WTF *)(4 * v32));
    *(_DWORD *)(a5 + 24) = v32;
    *(_QWORD *)(a5 + 16) = v34;
    memcpy(v34, v33, 4 * v29);
    if (v33)
    {
      if (*(const void **)(a5 + 16) == v33)
      {
        *(_QWORD *)(a5 + 16) = 0;
        *(_DWORD *)(a5 + 24) = 0;
      }
      WTF::fastFree((unint64_t)v33, v35, v36, v37, v38, v39, v40, v41);
    }
    *(_DWORD *)(*(_QWORD *)(a5 + 16) + 4 * *(unsigned int *)(a5 + 28)) = v28;
    v27 = *((_QWORD *)a2 + 4);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a5 + 16) + 4 * v29) = v28;
  }
  ++*(_DWORD *)(a5 + 28);
  v42 = *(unsigned int *)(v27 + 40);
  v43 = *(unsigned int *)(v27 + 44);
  v44 = v43 + 8;
  if (v43 + 8 > v42)
  {
    v65 = v42 + (v42 >> 2);
    if (v65 >= 0x10)
      v66 = v65 + 1;
    else
      v66 = 16;
    if (v66 <= v44)
      v67 = v43 + 8;
    else
      v67 = v66;
    if (HIDWORD(v67))
    {
      __break(0xC471u);
      JUMPOUT(0x198CD64F4);
    }
    v68 = *(const void **)(v27 + 32);
    v69 = (void *)WTF::fastMalloc((WTF *)v67);
    *(_DWORD *)(v27 + 40) = v67;
    *(_QWORD *)(v27 + 32) = v69;
    memcpy(v69, v68, v43);
    if (v68)
    {
      if (*(const void **)(v27 + 32) == v68)
      {
        *(_QWORD *)(v27 + 32) = 0;
        *(_DWORD *)(v27 + 40) = 0;
      }
      WTF::fastFree((unint64_t)v68, v70, v71, v72, v73, v74, v75, v76);
    }
  }
  *(_DWORD *)(v27 + 44) = v44;
  v45 = *((_QWORD *)a2 + 4);
  v46 = (_QWORD *)(v45 + 136);
  v47 = *(_DWORD *)(a5 + 36);
  v48 = *(_DWORD *)(a5 + 44);
  v49 = **((_DWORD **)a2 + 2) - *(_DWORD *)(v45 + 52);
  v50 = *(_DWORD *)(v45 + 44);
  v51 = a2[2];
  *(_DWORD *)v101 = 0;
  *(_DWORD *)&v101[4] = v47;
  *(_DWORD *)&v101[8] = v48;
  *(_DWORD *)&v101[12] = v49;
  *(_DWORD *)&v101[16] = v50;
  *(_DWORD *)&v101[20] = v51;
  *(_DWORD *)&v101[24] = v11;
  v52 = *(unsigned int *)(v45 + 148);
  if ((_DWORD)v52 == *(_DWORD *)(v45 + 144))
  {
    v53 = (__int128 *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v52 + 1, (unint64_t)v101);
    v54 = (_OWORD *)(*(_QWORD *)(v45 + 136) + 28 * *(unsigned int *)(v45 + 148));
    v55 = *v53;
    v56 = *(__int128 *)((char *)v53 + 12);
  }
  else
  {
    v54 = (_OWORD *)(*v46 + 28 * v52);
    v55 = *(_OWORD *)v101;
    v56 = *(_OWORD *)&v101[12];
  }
  *(_OWORD *)((char *)v54 + 12) = v56;
  *v54 = v55;
  ++*(_DWORD *)(v45 + 148);
  v57 = *((_QWORD *)a2 + 4);
  v58 = *(unsigned int *)(v57 + 40);
  v59 = *(unsigned int *)(v57 + 44);
  v60 = v59 + 4;
  if (v59 + 4 > v58)
  {
    v77 = v58 + (v58 >> 2);
    if (v77 >= 0x10)
      v78 = v77 + 1;
    else
      v78 = 16;
    if (v78 <= v60)
      v79 = v59 + 4;
    else
      v79 = v78;
    if (HIDWORD(v79))
    {
      __break(0xC471u);
      JUMPOUT(0x198CD64FCLL);
    }
    v80 = *(const void **)(v57 + 32);
    v81 = (void *)WTF::fastMalloc((WTF *)v79);
    *(_DWORD *)(v57 + 40) = v79;
    *(_QWORD *)(v57 + 32) = v81;
    memcpy(v81, v80, v59);
    if (v80)
    {
      if (*(const void **)(v57 + 32) == v80)
      {
        *(_QWORD *)(v57 + 32) = 0;
        *(_DWORD *)(v57 + 40) = 0;
      }
      WTF::fastFree((unint64_t)v80, v82, v83, v84, v85, v86, v87, v88);
    }
  }
  *(_DWORD *)(v57 + 44) = v60;
  v61 = *a2;
  v62 = *((_QWORD *)a2 + 4);
  v63 = *(unsigned int *)(v62 + 60);
  v64 = a2[13];
  if ((_DWORD)v64 != a2[12])
  {
    *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v64) = v59;
    goto LABEL_39;
  }
  v89 = v64 + (v64 >> 2);
  v90 = v89 >= 0x10 ? v89 + 1 : 16;
  v91 = v90 <= v64 + 1 ? v64 + 1 : v90;
  if (v91 >> 30)
  {
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x198CD64E4);
  }
  v92 = (const void *)*((_QWORD *)a2 + 5);
  v93 = (void *)WTF::fastMalloc((WTF *)(4 * v91));
  a2[12] = v91;
  *((_QWORD *)a2 + 5) = v93;
  memcpy(v93, v92, 4 * v64);
  if (v92)
  {
    if (*((const void **)a2 + 5) == v92)
    {
      *((_QWORD *)a2 + 5) = 0;
      a2[12] = 0;
    }
    WTF::fastFree((unint64_t)v92, v94, v95, v96, v97, v98, v99, v100);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * a2[13]) = v59;
  v62 = *((_QWORD *)a2 + 4);
LABEL_39:
  ++a2[13];
  *(_DWORD *)(*(_QWORD *)(v62 + 32) + v59) = v61 + ((unint64_t)(v63 + 1) >> 1);
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addCatchAllToUnreachable(_BYTE *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  const void **v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  int v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  size_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  const void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  const void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  const void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[28];

  if (*(_DWORD *)(a3 + 8) == 4)
  {
    v12 = (const void **)(a3 + 16);
    v11 = *(_QWORD *)(a3 + 16);
    v13 = *(_DWORD *)(a3 + 36);
    v14 = a2 + 8;
    v15 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 14616);
    v16 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 52);
    v17 = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 8) = 0x100000005;
    if (v11)
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 24) = 0;
      v94 = v17;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      v17 = v94;
    }
    v18 = 0;
    v19 = 0;
    *(_DWORD *)(a3 + 32) = -1;
    *(_DWORD *)(a3 + 36) = v13;
    *v12 = 0;
    v12[1] = 0;
    *(_DWORD *)(a3 + 40) = -1;
    *(_DWORD *)(a3 + 44) = v15 - v16;
    *(_QWORD *)(a3 + 48) = v17;
    *a2 = v17;
    v20 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 44);
    v21 = (_DWORD *)(a3 + 28);
  }
  else
  {
    v12 = (const void **)(a3 + 16);
    v18 = *(_DWORD **)(a3 + 16);
    *(_DWORD *)(a3 + 12) = 1;
    v21 = (_DWORD *)(a3 + 28);
    v19 = *(unsigned int *)(a3 + 28);
    v22 = *(_DWORD *)(a3 + 24);
    *a2 = *(_DWORD *)(a3 + 48);
    v14 = a2 + 8;
    v23 = *((_QWORD *)a2 + 4);
    v20 = *(_DWORD *)(v23 + 44);
    if ((_DWORD)v19 != v22)
    {
      v18[v19] = v20;
      goto LABEL_19;
    }
  }
  v24 = v19 + (v19 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= v19 + 1)
    v26 = v19 + 1;
  else
    v26 = v25;
  if (v26 >> 30)
  {
    __break(0xC471u);
    goto LABEL_65;
  }
  v27 = (void *)WTF::fastMalloc((WTF *)(4 * v26));
  *(_DWORD *)(a3 + 24) = v26;
  *(_QWORD *)(a3 + 16) = v27;
  memcpy(v27, v18, 4 * v19);
  if (v18)
  {
    if (*v12 == v18)
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 24) = 0;
    }
    WTF::fastFree((unint64_t)v18, v28, v29, v30, v31, v32, v33, v34);
  }
  *((_DWORD *)*v12 + *v21) = v20;
  v23 = *(_QWORD *)v14;
LABEL_19:
  ++*v21;
  v35 = *(unsigned int *)(v23 + 40);
  v36 = *(unsigned int *)(v23 + 44);
  v37 = v36 + 8;
  if (v36 + 8 > v35)
  {
    v58 = v35 + (v35 >> 2);
    if (v58 >= 0x10)
      v59 = v58 + 1;
    else
      v59 = 16;
    if (v59 <= v37)
      v60 = v36 + 8;
    else
      v60 = v59;
    if (HIDWORD(v60))
    {
      __break(0xC471u);
      JUMPOUT(0x198CD68ECLL);
    }
    v61 = *(const void **)(v23 + 32);
    v62 = (void *)WTF::fastMalloc((WTF *)v60);
    *(_DWORD *)(v23 + 40) = v60;
    *(_QWORD *)(v23 + 32) = v62;
    memcpy(v62, v61, v36);
    if (v61)
    {
      if (*(const void **)(v23 + 32) == v61)
      {
        *(_QWORD *)(v23 + 32) = 0;
        *(_DWORD *)(v23 + 40) = 0;
      }
      WTF::fastFree((unint64_t)v61, v63, v64, v65, v66, v67, v68, v69);
    }
  }
  *(_DWORD *)(v23 + 44) = v37;
  v38 = *((_QWORD *)a2 + 4);
  v39 = (_QWORD *)(v38 + 136);
  v40 = *(_DWORD *)(a3 + 36);
  v41 = *(_DWORD *)(a3 + 44);
  v42 = **((_DWORD **)a2 + 2) - *(_DWORD *)(v38 + 52);
  v43 = *(_DWORD *)(v38 + 44);
  v44 = a2[2];
  *(_DWORD *)v95 = 1;
  *(_DWORD *)&v95[4] = v40;
  *(_DWORD *)&v95[8] = v41;
  *(_DWORD *)&v95[12] = v42;
  *(_DWORD *)&v95[16] = v43;
  *(_DWORD *)&v95[20] = v44;
  *(_DWORD *)&v95[24] = 0;
  v45 = *(unsigned int *)(v38 + 148);
  if ((_DWORD)v45 == *(_DWORD *)(v38 + 144))
  {
    v46 = (__int128 *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v45 + 1, (unint64_t)v95);
    v47 = (_OWORD *)(*(_QWORD *)(v38 + 136) + 28 * *(unsigned int *)(v38 + 148));
    v48 = *v46;
    v49 = *(__int128 *)((char *)v46 + 12);
  }
  else
  {
    v47 = (_OWORD *)(*v39 + 28 * v45);
    v48 = *(_OWORD *)v95;
    v49 = *(_OWORD *)&v95[12];
  }
  *(_OWORD *)((char *)v47 + 12) = v49;
  *v47 = v48;
  ++*(_DWORD *)(v38 + 148);
  v50 = *(_QWORD *)v14;
  v51 = *(unsigned int *)(*(_QWORD *)v14 + 40);
  v52 = *(unsigned int *)(*(_QWORD *)v14 + 44);
  v53 = v52 + 4;
  if (v52 + 4 > v51)
  {
    v70 = v51 + (v51 >> 2);
    if (v70 >= 0x10)
      v71 = v70 + 1;
    else
      v71 = 16;
    if (v71 <= v53)
      v72 = v52 + 4;
    else
      v72 = v71;
    if (HIDWORD(v72))
    {
      __break(0xC471u);
      JUMPOUT(0x198CD68F4);
    }
    v73 = *(const void **)(v50 + 32);
    v74 = (void *)WTF::fastMalloc((WTF *)v72);
    *(_DWORD *)(v50 + 40) = v72;
    *(_QWORD *)(v50 + 32) = v74;
    memcpy(v74, v73, v52);
    if (v73)
    {
      if (*(const void **)(v50 + 32) == v73)
      {
        *(_QWORD *)(v50 + 32) = 0;
        *(_DWORD *)(v50 + 40) = 0;
      }
      WTF::fastFree((unint64_t)v73, v75, v76, v77, v78, v79, v80, v81);
    }
  }
  *(_DWORD *)(v50 + 44) = v53;
  v54 = *a2;
  v55 = *((_QWORD *)a2 + 4);
  v56 = *(unsigned int *)(v55 + 60);
  v57 = a2[13];
  if ((_DWORD)v57 != a2[12])
  {
    *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v57) = v52;
    goto LABEL_26;
  }
  v82 = v57 + (v57 >> 2);
  if (v82 >= 0x10)
    v83 = v82 + 1;
  else
    v83 = 16;
  if (v83 <= v57 + 1)
    v84 = v57 + 1;
  else
    v84 = v83;
  if (v84 >> 30)
  {
    __break(0xC471u);
LABEL_65:
    JUMPOUT(0x198CD68E4);
  }
  v85 = (const void *)*((_QWORD *)a2 + 5);
  v86 = (void *)WTF::fastMalloc((WTF *)(4 * v84));
  a2[12] = v84;
  *((_QWORD *)a2 + 5) = v86;
  memcpy(v86, v85, 4 * v57);
  if (v85)
  {
    if (*((const void **)a2 + 5) == v85)
    {
      *((_QWORD *)a2 + 5) = 0;
      a2[12] = 0;
    }
    WTF::fastFree((unint64_t)v85, v87, v88, v89, v90, v91, v92, v93);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * a2[13]) = v52;
  v55 = *((_QWORD *)a2 + 4);
LABEL_26:
  ++a2[13];
  *(_DWORD *)(*(_QWORD *)(v55 + 32) + v52) = v54 + ((unint64_t)(v56 + 1) >> 1);
  *a1 = 0;
  a1[8] = 0;
}

__int128 *JSC::Wasm::IPIntGenerator::addDelegateToUnreachable(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  __int128 *result;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[28];

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(v8 + 44);
  v10 = *(unsigned int *)(a4 + 28);
  if ((_DWORD)v10 == *(_DWORD *)(a4 + 24))
  {
    v38 = v10 + (v10 >> 2);
    if (v38 >= 0x10)
      v39 = v38 + 1;
    else
      v39 = 16;
    if (v39 <= v10 + 1)
      v40 = v10 + 1;
    else
      v40 = v39;
    if (v40 >> 30)
      goto LABEL_34;
    v41 = *(const void **)(a4 + 16);
    v42 = (void *)WTF::fastMalloc((WTF *)(4 * v40));
    *(_DWORD *)(a4 + 24) = v40;
    *(_QWORD *)(a4 + 16) = v42;
    memcpy(v42, v41, 4 * v10);
    if (v41)
    {
      if (*(const void **)(a4 + 16) == v41)
      {
        *(_QWORD *)(a4 + 16) = 0;
        *(_DWORD *)(a4 + 24) = 0;
      }
      WTF::fastFree((unint64_t)v41, v43, v44, v45, v46, v47, v48, v49);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * *(unsigned int *)(a4 + 28)) = v9;
    v8 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * v10) = v9;
  }
  ++*(_DWORD *)(a4 + 28);
  v11 = *(unsigned int *)(v8 + 40);
  v12 = *(unsigned int *)(v8 + 44);
  v13 = v12 + 8;
  if (v12 + 8 <= v11)
    goto LABEL_4;
  v26 = v11 + (v11 >> 2);
  if (v26 >= 0x10)
    v27 = v26 + 1;
  else
    v27 = 16;
  if (v27 <= v13)
    v28 = v12 + 8;
  else
    v28 = v27;
  if (HIDWORD(v28))
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x198CD6B1CLL);
  }
  v29 = *(const void **)(v8 + 32);
  v30 = (void *)WTF::fastMalloc((WTF *)v28);
  *(_DWORD *)(v8 + 40) = v28;
  *(_QWORD *)(v8 + 32) = v30;
  memcpy(v30, v29, v12);
  if (v29)
  {
    if (*(const void **)(v8 + 32) == v29)
    {
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 0;
    }
    WTF::fastFree((unint64_t)v29, v31, v32, v33, v34, v35, v36, v37);
  }
LABEL_4:
  *(_DWORD *)(v8 + 44) = v13;
  if (*(_DWORD *)(a3 + 8) == 4)
    v14 = *(_DWORD *)(a3 + 52);
  else
    v14 = 0;
  v15 = *(_QWORD *)(a2 + 32);
  result = (__int128 *)(v15 + 136);
  v17 = *(_DWORD *)(a4 + 36);
  v18 = *(_DWORD *)(a4 + 44);
  v19 = **(_DWORD **)(a2 + 16) - *(_DWORD *)(v15 + 52);
  v20 = *(_DWORD *)(v15 + 44);
  v21 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v50 = 2;
  *(_DWORD *)&v50[4] = v17;
  *(_DWORD *)&v50[8] = v18;
  *(_DWORD *)&v50[12] = v19;
  *(_DWORD *)&v50[16] = v20;
  *(_DWORD *)&v50[20] = v21;
  *(_DWORD *)&v50[24] = v14;
  v22 = *(unsigned int *)(v15 + 148);
  if ((_DWORD)v22 == *(_DWORD *)(v15 + 144))
  {
    result = (__int128 *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v22 + 1, (unint64_t)v50);
    v23 = (_OWORD *)(*(_QWORD *)(v15 + 136) + 28 * *(unsigned int *)(v15 + 148));
    v24 = *result;
    v25 = *(__int128 *)((char *)result + 12);
  }
  else
  {
    v23 = (_OWORD *)(*(_QWORD *)result + 28 * v22);
    v24 = *(_OWORD *)v50;
    v25 = *(_OWORD *)&v50[12];
  }
  *(_OWORD *)((char *)v23 + 12) = v25;
  *v23 = v24;
  ++*(_DWORD *)(v15 + 148);
  *a1 = 0;
  a1[8] = 0;
  return result;
}

void JSC::Wasm::IPIntGenerator::addEndToUnreachable(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  size_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  BOOL v76;
  uint64_t v77;
  size_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  char v85;
  size_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _BYTE *v96;
  unint64_t v97;
  unint64_t v98;
  const void *v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107;
  _BYTE *v108;
  int v109;
  size_t v110;
  _BYTE *v111;
  size_t v112;
  unint64_t v113;
  size_t v114;
  void *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  const void *v119;
  void *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void *v131;
  _BYTE *v132;
  __int128 v133;
  _BYTE v134[256];
  _BYTE *v135;
  uint64_t v136;
  _BYTE v137[24];

  v11 = *(_QWORD *)(a3 + 808);
  if (*(_DWORD *)(v11 + 12))
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (uint64_t *)(*(_QWORD *)v11 + v12);
      v15 = *v14;
      v16 = v14[1];
      *(_QWORD *)&v133 = v15;
      *((_QWORD *)&v133 + 1) = v16;
      v17 = *(_DWORD *)(a3 + 12);
      if (v17 == *(_DWORD *)(a3 + 8))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::Wasm::Value>(a3, &v133, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v18 = (_QWORD *)(*(_QWORD *)a3 + 24 * v17);
        *v18 = v15;
        v18[1] = v16;
        ++*(_DWORD *)(a3 + 12);
      }
      ++v13;
      v19 = *(unsigned int *)(v11 + 12);
      v12 += 16;
    }
    while (v13 < v19);
  }
  else
  {
    LODWORD(v19) = 0;
  }
  v20 = *(_DWORD *)(a3 + 816);
  v21 = *(unsigned int *)(a3 + 836);
  v22 = 4 * v21;
  if ((_DWORD)v21)
  {
    if (v21 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198CD7550);
    }
    v23 = (void *)WTF::fastMalloc((WTF *)(4 * v21));
    memcpy(v23, *(const void **)(a3 + 824), 4 * *(unsigned int *)(a3 + 836));
    LODWORD(v19) = *(_DWORD *)(v11 + 12);
  }
  else
  {
    v23 = 0;
  }
  v24 = *(_DWORD *)(a3 + 840);
  v25 = *(_DWORD *)(a3 + 844);
  v26 = *(_DWORD *)(a3 + 848);
  v27 = *(unsigned int *)(a3 + 856);
  *(_DWORD *)a2 = v27;
  v28 = v27 + (int)v19;
  if (HIDWORD(v28))
  {
    __break(0xC471u);
    JUMPOUT(0x198CD7558);
  }
  *(_DWORD *)a2 = v28;
  if ((int)v19 >= 1)
  {
    v29 = *(_DWORD *)(a2 + 4);
    if (v29 <= v28)
      v29 = v28;
    *(_DWORD *)(a2 + 4) = v29;
  }
  switch(v20)
  {
    case 0:
      v31 = *(_QWORD *)(a2 + 32);
      v32 = *(unsigned int *)(v31 + 164);
      if ((_DWORD)v32 != *(_DWORD *)(v31 + 160))
        goto LABEL_153;
      v97 = v32 + (v32 >> 2);
      if (v97 >= 0x10)
        v98 = v97 + 1;
      else
        v98 = 16;
      if (v98 <= v32 + 1)
        v35 = v32 + 1;
      else
        v35 = v98;
      if (v35 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198CD7598);
      }
      goto LABEL_161;
    case 1:
      goto LABEL_20;
    case 2:
      if ((_DWORD)v21)
      {
        v41 = (unsigned int *)v23;
        do
        {
          v42 = *v41++;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v42) = v25;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v42 + 4) = v26;
          v22 -= 4;
        }
        while (v22);
      }
      goto LABEL_167;
    case 3:
      v43 = *(_QWORD *)(a2 + 32);
      v44 = *(unsigned int *)(v43 + 164);
      if ((_DWORD)v44)
      {
        v45 = *(unsigned int **)(v43 + 152);
        v46 = 4 * v44;
        do
        {
          v47 = *v45++;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v47) = **(_DWORD **)(a2 + 16)
                                                                      + ~*(_DWORD *)(*(_QWORD *)(a2 + 32) + 52);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v47 + 4) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 44);
          v46 -= 4;
        }
        while (v46);
        v43 = *(_QWORD *)(a2 + 32);
      }
      if (*(_DWORD *)(v43 + 160))
      {
        if (*(_DWORD *)(v43 + 164))
          *(_DWORD *)(v43 + 164) = 0;
        v48 = *(_QWORD *)(v43 + 152);
        if (v48)
        {
          *(_QWORD *)(v43 + 152) = 0;
          *(_DWORD *)(v43 + 160) = 0;
          WTF::fastFree(v48, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((_DWORD)v21)
      {
        v49 = (unsigned int *)v23;
        do
        {
          v50 = *v49++;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v50) = **(_DWORD **)(a2 + 16)
                                                                      + ~*(_DWORD *)(*(_QWORD *)(a2 + 32) + 52);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v50 + 4) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 44);
          v22 -= 4;
        }
        while (v22);
      }
      v51 = *(_QWORD *)(a2 + 32);
      v52 = **(_QWORD **)(a2 + 16);
      if (*(_QWORD *)(v51 + 24) < v52)
        goto LABEL_219;
      *(_QWORD *)(v51 + 24) = v52;
      v53 = *(_DWORD *)(a3 + 816);
      v54 = *(_QWORD *)(a3 + 808);
      v55 = 12;
      if (v53 == 2)
        v55 = 8;
      v56 = *(unsigned int *)(v54 + v55);
      *(_QWORD *)&v133 = v134;
      DWORD2(v133) = 16;
      HIDWORD(v133) = v56;
      if (v56 >= 0x11)
      {
        if (v56 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x198CD7590);
        }
        v57 = WTF::fastMalloc((WTF *)(16 * v56));
        DWORD2(v133) = v56;
        *(_QWORD *)&v133 = v57;
        v53 = *(_DWORD *)(a3 + 816);
        v54 = *(_QWORD *)(a3 + 808);
      }
      v132 = a1;
      v76 = v53 == 2;
      v58 = v53 == 2;
      v59 = 12;
      if (v76)
        v59 = 8;
      if (*(_DWORD *)(v54 + v59))
      {
        v60 = 0;
        do
        {
          if (v58)
            v61 = *(_DWORD *)(v54 + 12) + v60;
          else
            v61 = v60;
          if (v60 >= HIDWORD(v133))
          {
            __break(0xC471u);
            JUMPOUT(0x198CD7548);
          }
          *(_OWORD *)(v133 + 16 * v60++) = *(_OWORD *)(*(_QWORD *)v54 + 16 * v61);
          v58 = *(_DWORD *)(a3 + 816) == 2;
          v54 = *(_QWORD *)(a3 + 808);
          if (*(_DWORD *)(a3 + 816) == 2)
            v62 = 8;
          else
            v62 = 12;
        }
        while (v60 < *(unsigned int *)(v54 + v62));
      }
      v63 = *(_QWORD *)(a2 + 32);
      v135 = v137;
      v136 = 16;
      if (!HIDWORD(v133))
      {
        v65 = 0;
        v92 = v137;
LABEL_183:
        v108 = &v92[v65];
        goto LABEL_191;
      }
      v130 = v63;
      v131 = v23;
      v64 = 0;
      LODWORD(v65) = 0;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      break;
    case 4:
    case 5:
      v30 = *(_DWORD *)(a2 + 8);
      if (v30)
      {
        *(_DWORD *)(a2 + 8) = v30 - 1;
LABEL_20:
        if (v24 == -1)
        {
          if ((_DWORD)v21)
          {
            v36 = (int *)v23;
            do
            {
              v37 = *v36;
              LODWORD(v133) = *v36;
              v38 = *(_QWORD *)(a2 + 32);
              v39 = (_QWORD *)(v38 + 152);
              v40 = *(unsigned int *)(v38 + 164);
              if ((_DWORD)v40 == *(_DWORD *)(v38 + 160))
                *(_DWORD *)(*(_QWORD *)(v38 + 152) + 4 * *(unsigned int *)(v38 + 164)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v133);
              else
                *(_DWORD *)(*v39 + 4 * v40) = v37;
              ++*(_DWORD *)(v38 + 164);
              ++v36;
              v22 -= 4;
            }
            while (v22);
          }
        }
        else
        {
          v31 = *(_QWORD *)(a2 + 32);
          v32 = *(unsigned int *)(v31 + 164);
          if ((_DWORD)v32 == *(_DWORD *)(v31 + 160))
          {
            v33 = v32 + (v32 >> 2);
            if (v33 >= 0x10)
              v34 = v33 + 1;
            else
              v34 = 16;
            if (v34 <= v32 + 1)
              v35 = v32 + 1;
            else
              v35 = v34;
            if (v35 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x198CD6CB0);
            }
LABEL_161:
            v99 = *(const void **)(v31 + 152);
            v100 = (void *)WTF::fastMalloc((WTF *)(4 * v35));
            *(_DWORD *)(v31 + 160) = v35;
            *(_QWORD *)(v31 + 152) = v100;
            memcpy(v100, v99, 4 * v32);
            if (v99)
            {
              if (*(const void **)(v31 + 152) == v99)
              {
                *(_QWORD *)(v31 + 152) = 0;
                *(_DWORD *)(v31 + 160) = 0;
              }
              WTF::fastFree((unint64_t)v99, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            *(_DWORD *)(*(_QWORD *)(v31 + 152) + 4 * *(unsigned int *)(v31 + 164)) = *(_DWORD *)(a3 + 840);
          }
          else
          {
LABEL_153:
            *(_DWORD *)(*(_QWORD *)(v31 + 152) + 4 * v32) = *(_DWORD *)(a3 + 840);
          }
          ++*(_DWORD *)(v31 + 164);
        }
        goto LABEL_167;
      }
      __break(0xC471u);
      goto LABEL_219;
    default:
      goto LABEL_167;
  }
  do
  {
    v69 = *(unsigned __int8 *)(v133 + v64);
    if (v69 == 255)
    {
      if ((_DWORD)v68 == 2)
        goto LABEL_75;
LABEL_93:
      v77 = (v68 + 1);
      v78 = v65;
      if ((_DWORD)v65 == (_DWORD)v136)
      {
        v79 = v65 + ((unint64_t)v65 >> 2);
        if (v79 >= 0x10)
          v80 = v79 + 1;
        else
          v80 = 16;
        if (v80 <= (unint64_t)v65 + 1)
          v81 = v65 + 1;
        else
          v81 = v80;
        v82 = v135;
        if (v81 < 0x11)
        {
          v135 = v137;
          LODWORD(v136) = 16;
          v83 = v137;
        }
        else
        {
          if (HIDWORD(v81))
          {
            __break(0xC471u);
            JUMPOUT(0x198CD7560);
          }
          v83 = (_BYTE *)WTF::fastMalloc((WTF *)v81);
          LODWORD(v136) = v81;
          v135 = v83;
        }
        memcpy(v83, v82, v78);
        if (v137 != v82 && v82)
        {
          if (v135 == v82)
          {
            v135 = 0;
            LODWORD(v136) = 0;
          }
          WTF::fastFree((unint64_t)v82, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v135[HIDWORD(v136)] = v68;
      }
      else
      {
        v135[v65] = v68;
      }
      goto LABEL_141;
    }
    v76 = v69 != 254 || (_DWORD)v68 == 2;
    if (!v76)
      goto LABEL_93;
    if (v69 == 253)
    {
      if (v67 == 1)
        goto LABEL_75;
    }
    else if (v69 != 252 || v67 == 1)
    {
LABEL_75:
      v70 = v65;
      if ((_DWORD)v65 == (_DWORD)v136)
      {
        v71 = v65 + ((unint64_t)v65 >> 2);
        if (v71 >= 0x10)
          v72 = v71 + 1;
        else
          v72 = 16;
        if (v72 <= (unint64_t)v65 + 1)
          v73 = v65 + 1;
        else
          v73 = v72;
        v74 = v135;
        if (v73 < 0x11)
        {
          v135 = v137;
          LODWORD(v136) = 16;
          v75 = v137;
        }
        else
        {
          if (HIDWORD(v73))
          {
            __break(0xC471u);
            JUMPOUT(0x198CD7568);
          }
          v75 = (_BYTE *)WTF::fastMalloc((WTF *)v73);
          LODWORD(v136) = v73;
          v135 = v75;
        }
        memcpy(v75, v74, v70);
        if (v137 != v74 && v74)
        {
          if (v135 == v74)
          {
            v135 = 0;
            LODWORD(v136) = 0;
          }
          WTF::fastFree((unint64_t)v74, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v135[HIDWORD(v136)] = 3;
        v77 = v68;
      }
      else
      {
        v135[v65] = 3;
        v77 = v68;
      }
      goto LABEL_141;
    }
    v85 = v67 + 2;
    v86 = v65;
    if ((_DWORD)v65 == (_DWORD)v136)
    {
      v87 = v65 + ((unint64_t)v65 >> 2);
      if (v87 >= 0x10)
        v88 = v87 + 1;
      else
        v88 = 16;
      if (v88 <= (unint64_t)v65 + 1)
        v89 = v65 + 1;
      else
        v89 = v88;
      v90 = v135;
      if (v89 < 0x11)
      {
        v135 = v137;
        LODWORD(v136) = 16;
        v91 = v137;
      }
      else
      {
        if (HIDWORD(v89))
          goto LABEL_220;
        v91 = (_BYTE *)WTF::fastMalloc((WTF *)v89);
        LODWORD(v136) = v89;
        v135 = v91;
      }
      memcpy(v91, v90, v86);
      if (v137 != v90 && v90)
      {
        if (v135 == v90)
        {
          v135 = 0;
          LODWORD(v136) = 0;
        }
        WTF::fastFree((unint64_t)v90, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      v135[HIDWORD(v136)] = v85;
      v77 = v68;
      ++v67;
    }
    else
    {
      v135[v65] = v85;
      v77 = v68;
      ++v67;
    }
LABEL_141:
    v65 = ++HIDWORD(v136);
    ++v66;
    v64 += 16;
    v68 = v77;
  }
  while (v66 < HIDWORD(v133));
  v92 = v135;
  a1 = v132;
  if ((_DWORD)v65 != (_DWORD)v136)
  {
    v63 = v130;
    v23 = v131;
    goto LABEL_183;
  }
  v93 = v65 + (v65 >> 2);
  if (v93 >= 0x10)
    v94 = v93 + 1;
  else
    v94 = 16;
  if (v94 <= v65 + 1)
    v95 = v65 + 1;
  else
    v95 = v94;
  v63 = v130;
  v23 = v131;
  if (v95 < 0x11)
  {
    v135 = v137;
    LODWORD(v136) = 16;
    v96 = v137;
  }
  else
  {
    if (HIDWORD(v95))
    {
      __break(0xC471u);
      JUMPOUT(0x198CD75A0);
    }
    v96 = (_BYTE *)WTF::fastMalloc((WTF *)v95);
    LODWORD(v136) = v95;
    v135 = v96;
  }
  memcpy(v96, v92, v65);
  if (v137 != v92 && v92)
  {
    if (v135 == v92)
    {
      v135 = 0;
      LODWORD(v136) = 0;
    }
    WTF::fastFree((unint64_t)v92, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v108 = &v135[HIDWORD(v136)];
LABEL_191:
  *v108 = 4;
  v109 = HIDWORD(v136);
  v110 = *(unsigned int *)(v63 + 44);
  *(_DWORD *)(v63 + 48) = v110;
  v111 = v135;
  v112 = (v109 + 1);
  HIDWORD(v136) = v109 + 1;
  if (v109 != -1)
  {
    v113 = v110 + v112;
    v114 = *(unsigned int *)(v63 + 40);
    if (v110 + v112 > v114)
    {
      v115 = v23;
      v116 = v114 + (v114 >> 2);
      if (v116 >= 0x10)
        v117 = v116 + 1;
      else
        v117 = 16;
      if (v117 <= v113)
        v118 = v110 + v112;
      else
        v118 = v117;
      if (HIDWORD(v118))
      {
        __break(0xC471u);
        JUMPOUT(0x198CD7588);
      }
      v119 = *(const void **)(v63 + 32);
      v120 = (void *)WTF::fastMalloc((WTF *)v118);
      *(_DWORD *)(v63 + 40) = v118;
      *(_QWORD *)(v63 + 32) = v120;
      memcpy(v120, v119, v110);
      v23 = v115;
      a1 = v132;
      if (v119)
      {
        if (*(const void **)(v63 + 32) == v119)
        {
          *(_QWORD *)(v63 + 32) = 0;
          *(_DWORD *)(v63 + 40) = 0;
        }
        WTF::fastFree((unint64_t)v119, v121, v122, v123, v124, v125, v126, v127);
      }
    }
    v128 = *(unsigned int *)(v63 + 44);
    if (v113 < v128)
    {
      __break(0xC471u);
      JUMPOUT(0x198CD7580);
    }
    memcpy((void *)(*(_QWORD *)(v63 + 32) + v128), v111, v112);
    *(_DWORD *)(v63 + 44) = v113;
    v111 = v135;
  }
  if (v137 != v111 && v111)
  {
    v135 = 0;
    LODWORD(v136) = 0;
    WTF::fastFree((unint64_t)v111, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v129 = v133;
  if (v134 != (_BYTE *)v133 && (_QWORD)v133)
  {
    *(_QWORD *)&v133 = 0;
    DWORD2(v133) = 0;
    WTF::fastFree(v129, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_167:
  v101 = *(_QWORD *)(a2 + 32);
  v102 = **(_QWORD **)(a2 + 16);
  if (*(_QWORD *)(v101 + 24) <= v102)
  {
LABEL_219:
    __break(1u);
LABEL_220:
    __break(0xC471u);
    JUMPOUT(0x198CD7578);
  }
  if (*(_BYTE *)(*(_QWORD *)(v101 + 16) + v102) != 11)
  {
    v103 = *(unsigned int *)(v101 + 164);
    if ((_DWORD)v103)
    {
      v104 = *(unsigned int **)(v101 + 152);
      v105 = 4 * v103;
      do
      {
        v106 = *v104++;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v106) = **(_DWORD **)(a2 + 16)
                                                                     + ~*(_DWORD *)(*(_QWORD *)(a2 + 32) + 52);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32) + v106 + 4) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 44);
        v105 -= 4;
      }
      while (v105);
      v101 = *(_QWORD *)(a2 + 32);
    }
    if (*(_DWORD *)(v101 + 160))
    {
      if (*(_DWORD *)(v101 + 164))
        *(_DWORD *)(v101 + 164) = 0;
      v107 = *(_QWORD *)(v101 + 152);
      if (v107)
      {
        *(_QWORD *)(v101 + 152) = 0;
        *(_DWORD *)(v101 + 160) = 0;
        WTF::fastFree(v107, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  *a1 = 0;
  a1[8] = 0;
  if (v23)
    WTF::fastFree((unint64_t)v23, (void *)a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Wasm::IPIntGenerator::addCallCommonData(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  WTF *v21;
  char *v23;
  _BYTE *v24;
  uint64_t v26;
  char v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  WTF *v40;
  WTF *v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  WTF *v46;
  uint64_t v47;
  unsigned int v48;
  _BYTE *v49;
  unint64_t v50;
  size_t v51;
  unint64_t v52;
  _WORD *v53;
  WTF *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  WTF *v64;
  WTF *v65;
  char *v67;
  uint64_t v69;
  char v70;
  size_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  WTF *v75;
  WTF *v76;
  unsigned int v77;
  size_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  WTF *v82;
  WTF *v83;
  _BYTE *v84;
  uint64_t v85;
  unint64_t v86;
  size_t v87;
  unint64_t v88;
  WTF *v89;
  uint64_t v90;
  _BYTE *v91;
  char v92;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  const void *v97;
  void *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  const void *v102;
  void *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  const void *v107;
  void *v108;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[16];

  v111 = (WTF *)v113;
  v113[0] = 15;
  v112 = 0x100000010;
  if (!a2[2])
  {
    v35 = a1;
    v11 = 0;
    v13 = 1;
    goto LABEL_84;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  do
  {
    v14 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16 * (v12 + a2[3]));
    if (v14 == 255)
    {
      if (v9 == 8)
      {
LABEL_5:
        v15 = v13;
        if (v13 == (_DWORD)v112)
        {
          v16 = v13 + 1;
          v17 = v15 + (v15 >> 2);
          if (v17 >= 0x10)
            v18 = v17 + 1;
          else
            v18 = 16;
          if (v18 <= v16)
            v19 = v15 + 1;
          else
            v19 = v18;
          v20 = v111;
          if (v19 < 0x11)
          {
            v111 = (WTF *)v113;
            LODWORD(v112) = 16;
            v21 = (WTF *)v113;
          }
          else
          {
            if (HIDWORD(v19))
            {
              __break(0xC471u);
              JUMPOUT(0x198CD7F1CLL);
            }
            v21 = (WTF *)WTF::fastMalloc((WTF *)v19);
            LODWORD(v112) = v19;
            v111 = v21;
          }
          memcpy(v21, v20, v15);
          if (v113 != (_BYTE *)v20 && v20)
          {
            if (v111 == v20)
            {
              v111 = 0;
              LODWORD(v112) = 0;
            }
            WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          }
          v24 = (char *)v111 + HIDWORD(v112);
        }
        else
        {
          v24 = (char *)v111 + v13;
        }
        *v24 = v11 & 1 | 0xC;
        v13 = ++HIDWORD(v112);
        ++v11;
      }
      else
      {
LABEL_23:
        v110 = v9;
        if (v13 == (_DWORD)v112)
        {
          v23 = WTF::Vector<unsigned char,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v111, (WTF *)(v13 + 1), (unint64_t)&v110);
          *((_BYTE *)v111 + HIDWORD(v112)) = *v23;
        }
        else
        {
          *((_BYTE *)v111 + v13) = v9;
        }
        ++v9;
        v13 = ++HIDWORD(v112);
      }
      v26 = v10;
      goto LABEL_51;
    }
    if (v14 == 254 && v9 != 8)
      goto LABEL_23;
    if (v14 == 253)
    {
      if (v10 == 4)
        goto LABEL_5;
    }
    else if (v14 != 252 || v10 == 4)
    {
      goto LABEL_5;
    }
    v26 = (v10 + 1);
    v27 = v10 + 8;
    v28 = v13;
    if (v13 == (_DWORD)v112)
    {
      v29 = v13 + 1;
      v30 = v28 + (v28 >> 2);
      if (v30 >= 0x10)
        v31 = v30 + 1;
      else
        v31 = 16;
      if (v31 <= v29)
        v32 = v28 + 1;
      else
        v32 = v31;
      v33 = v111;
      if (v32 < 0x11)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 16;
        v34 = (WTF *)v113;
      }
      else
      {
        if (HIDWORD(v32))
        {
          __break(0xC471u);
          JUMPOUT(0x198CD7F2CLL);
        }
        v34 = (WTF *)WTF::fastMalloc((WTF *)v32);
        LODWORD(v112) = v32;
        v111 = v34;
      }
      memcpy(v34, v33, v28);
      if (v113 != (_BYTE *)v33 && v33)
      {
        if (v111 == v33)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v33, a2, a3, a4, a5, a6, a7, a8);
      }
      *((_BYTE *)v111 + HIDWORD(v112)) = v27;
    }
    else
    {
      *((_BYTE *)v111 + v13) = v27;
    }
    v13 = ++HIDWORD(v112);
LABEL_51:
    ++v12;
    v10 = v26;
  }
  while (v12 < a2[2]);
  if ((v11 & 1) != 0)
  {
    v36 = v13;
    v35 = a1;
    if (v13 == (_DWORD)v112)
    {
      v37 = v13 + ((unint64_t)v13 >> 2);
      if (v37 >= 0x10)
        v38 = v37 + 1;
      else
        v38 = 16;
      if (v38 <= (unint64_t)v13 + 1)
        v39 = v13 + 1;
      else
        v39 = v38;
      v40 = v111;
      if (v39 < 0x11)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 16;
        v41 = (WTF *)v113;
      }
      else
      {
        if (HIDWORD(v39))
        {
          __break(0xC471u);
          JUMPOUT(0x198CD7F44);
        }
        v41 = (WTF *)WTF::fastMalloc((WTF *)v39);
        LODWORD(v112) = v39;
        v111 = v41;
      }
      memcpy(v41, v40, v36);
      if (v113 != (_BYTE *)v40 && v40)
      {
        if (v111 == v40)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v40, a2, a3, a4, a5, a6, a7, a8);
      }
      v42 = (char *)v111 + HIDWORD(v112);
    }
    else
    {
      v42 = (char *)v111 + v13;
    }
    *v42 = 14;
    v13 = ++HIDWORD(v112);
  }
  else
  {
    v35 = a1;
  }
LABEL_84:
  v43 = *(_QWORD *)(v35 + 32);
  v44 = *(unsigned int *)(v43 + 40);
  v45 = *(unsigned int *)(v43 + 44);
  v46 = (WTF *)(v45 + v13);
  if ((unint64_t)v46 > v44)
  {
    v94 = v44 + (v44 >> 2);
    if (v94 >= 0x10)
      v95 = v94 + 1;
    else
      v95 = 16;
    if (v95 <= (unint64_t)v46)
      v96 = (unint64_t)v46;
    else
      v96 = v95;
    if (HIDWORD(v96))
    {
      __break(0xC471u);
      JUMPOUT(0x198CD7F4CLL);
    }
    v97 = *(const void **)(v43 + 32);
    v98 = (void *)WTF::fastMalloc((WTF *)v96);
    *(_DWORD *)(v43 + 40) = v96;
    *(_QWORD *)(v43 + 32) = v98;
    memcpy(v98, v97, v45);
    if (v97)
    {
      if (*(const void **)(v43 + 32) == v97)
      {
        *(_QWORD *)(v43 + 32) = 0;
        *(_DWORD *)(v43 + 40) = 0;
      }
      WTF::fastFree((unint64_t)v97, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(v43 + 44) = (_DWORD)v46;
  v47 = *(_QWORD *)(v35 + 32);
  v48 = HIDWORD(v112);
  if (HIDWORD(v112))
  {
    v49 = (_BYTE *)(*(_QWORD *)(v47 + 32) + v45);
    do
    {
      *v49 = *((_BYTE *)v111 + v48 - 1);
      if (!HIDWORD(v112))
        goto LABEL_232;
      ++v49;
      v48 = HIDWORD(v112) - 1;
      HIDWORD(v112) = v48;
    }
    while (v48);
    v47 = *(_QWORD *)(v35 + 32);
  }
  v50 = *(unsigned int *)(v47 + 40);
  v51 = *(unsigned int *)(v47 + 44);
  v52 = v51 + 4;
  if (v51 + 4 > v50)
  {
    v99 = v50 + (v50 >> 2);
    if (v99 >= 0x10)
      v100 = v99 + 1;
    else
      v100 = 16;
    if (v100 <= v52)
      v101 = v51 + 4;
    else
      v101 = v100;
    if (HIDWORD(v101))
    {
      __break(0xC471u);
      JUMPOUT(0x198CD7F54);
    }
    v102 = *(const void **)(v47 + 32);
    v103 = (void *)WTF::fastMalloc((WTF *)v101);
    *(_DWORD *)(v47 + 40) = v101;
    *(_QWORD *)(v47 + 32) = v103;
    memcpy(v103, v102, v51);
    if (v102)
    {
      if (*(const void **)(v47 + 32) == v102)
      {
        *(_QWORD *)(v47 + 32) = 0;
        *(_DWORD *)(v47 + 40) = 0;
      }
      WTF::fastFree((unint64_t)v102, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(v47 + 44) = v52;
  v53 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 32) + 32) + v51);
  *v53 = (v11 + 1) & 0xFFFE;
  v53[1] = a2[2];
  if ((_DWORD)v112)
  {
    if (HIDWORD(v112))
      HIDWORD(v112) = 0;
    v54 = v111;
    if (v113 != (_BYTE *)v111 && v111)
    {
      v111 = 0;
      LODWORD(v112) = 0;
      WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
      if (!v111)
      {
LABEL_97:
        v111 = (WTF *)v113;
        LODWORD(v112) = 16;
      }
    }
    else if (!v111)
    {
      goto LABEL_97;
    }
  }
  if (a2[3])
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    while (1)
    {
      v59 = *(unsigned __int8 *)(*(_QWORD *)a2 + v55);
      if (v59 == 255)
      {
        if (v56 == 8)
          goto LABEL_102;
      }
      else if (v59 != 254 || v56 == 8)
      {
        if (v59 == 253)
        {
          if (v57 != 4)
            goto LABEL_129;
        }
        else if (v59 == 252 && v57 != 4)
        {
LABEL_129:
          v69 = (v57 + 1);
          v70 = v57 + 8;
          v71 = HIDWORD(v112);
          if (HIDWORD(v112) == (_DWORD)v112)
          {
            v72 = HIDWORD(v112) + ((unint64_t)HIDWORD(v112) >> 2);
            if (v72 >= 0x10)
              v73 = v72 + 1;
            else
              v73 = 16;
            if (v73 <= (unint64_t)HIDWORD(v112) + 1)
              v74 = HIDWORD(v112) + 1;
            else
              v74 = v73;
            v75 = v111;
            if (v74 < 0x11)
            {
              v111 = (WTF *)v113;
              LODWORD(v112) = 16;
              v76 = (WTF *)v113;
            }
            else
            {
              if (HIDWORD(v74))
              {
                __break(0xC471u);
                JUMPOUT(0x198CD7F34);
              }
              v76 = (WTF *)WTF::fastMalloc((WTF *)v74);
              LODWORD(v112) = v74;
              v111 = v76;
            }
            memcpy(v76, v75, v71);
            if (v113 != (_BYTE *)v75 && v75)
            {
              if (v111 == v75)
              {
                v111 = 0;
                LODWORD(v112) = 0;
              }
              WTF::fastFree((unint64_t)v75, a2, a3, a4, a5, a6, a7, a8);
            }
            *((_BYTE *)v111 + HIDWORD(v112)) = v70;
          }
          else
          {
            *((_BYTE *)v111 + HIDWORD(v112)) = v70;
          }
          v77 = ++HIDWORD(v112);
          goto LABEL_147;
        }
LABEL_102:
        v60 = HIDWORD(v112);
        if (HIDWORD(v112) == (_DWORD)v112)
        {
          v61 = HIDWORD(v112) + ((unint64_t)HIDWORD(v112) >> 2);
          if (v61 >= 0x10)
            v62 = v61 + 1;
          else
            v62 = 16;
          if (v62 <= (unint64_t)HIDWORD(v112) + 1)
            v63 = HIDWORD(v112) + 1;
          else
            v63 = v62;
          v64 = v111;
          if (v63 < 0x11)
          {
            v111 = (WTF *)v113;
            LODWORD(v112) = 16;
            v65 = (WTF *)v113;
          }
          else
          {
            if (HIDWORD(v63))
            {
              __break(0xC471u);
              JUMPOUT(0x198CD7F24);
            }
            v65 = (WTF *)WTF::fastMalloc((WTF *)v63);
            LODWORD(v112) = v63;
            v111 = v65;
          }
          memcpy(v65, v64, v60);
          if (v113 != (_BYTE *)v64 && v64)
          {
            if (v111 == v64)
            {
              v111 = 0;
              LODWORD(v112) = 0;
            }
            WTF::fastFree((unint64_t)v64, a2, a3, a4, a5, a6, a7, a8);
          }
          *((_BYTE *)v111 + HIDWORD(v112)) = 12;
        }
        else
        {
          *((_BYTE *)v111 + HIDWORD(v112)) = 12;
        }
        goto LABEL_146;
      }
      v110 = v56;
      if (HIDWORD(v112) == (_DWORD)v112)
      {
        v67 = WTF::Vector<unsigned char,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v111, (WTF *)(HIDWORD(v112) + 1), (unint64_t)&v110);
        *((_BYTE *)v111 + HIDWORD(v112)) = *v67;
      }
      else
      {
        *((_BYTE *)v111 + HIDWORD(v112)) = v56;
      }
      ++v56;
LABEL_146:
      v77 = ++HIDWORD(v112);
      v69 = v57;
LABEL_147:
      ++v58;
      v55 += 16;
      v57 = v69;
      if (v58 >= a2[3])
        goto LABEL_159;
    }
  }
  v77 = HIDWORD(v112);
LABEL_159:
  v78 = v77;
  if (v77 == (_DWORD)v112)
  {
    v79 = v77 + ((unint64_t)v77 >> 2);
    if (v79 >= 0x10)
      v80 = v79 + 1;
    else
      v80 = 16;
    if (v80 <= (unint64_t)v77 + 1)
      v81 = v77 + 1;
    else
      v81 = v80;
    v82 = v111;
    if (v81 < 0x11)
    {
      v111 = (WTF *)v113;
      LODWORD(v112) = 16;
      v83 = (WTF *)v113;
    }
    else
    {
      if (HIDWORD(v81))
      {
        __break(0xC471u);
        JUMPOUT(0x198CD7F3CLL);
      }
      v83 = (WTF *)WTF::fastMalloc((WTF *)v81);
      LODWORD(v112) = v81;
      v111 = v83;
    }
    memcpy(v83, v82, v78);
    if (v113 != (_BYTE *)v82 && v82)
    {
      if (v111 == v82)
      {
        v111 = 0;
        LODWORD(v112) = 0;
      }
      WTF::fastFree((unint64_t)v82, a2, a3, a4, a5, a6, a7, a8);
    }
    v84 = (char *)v111 + HIDWORD(v112);
  }
  else
  {
    v84 = (char *)v111 + v77;
  }
  *v84 = 13;
  ++HIDWORD(v112);
  v85 = *(_QWORD *)(a1 + 32);
  v86 = *(unsigned int *)(v85 + 40);
  v87 = *(unsigned int *)(v85 + 44);
  v88 = v87 + HIDWORD(v112);
  if (v88 > v86)
  {
    v104 = v86 + (v86 >> 2);
    if (v104 >= 0x10)
      v105 = v104 + 1;
    else
      v105 = 16;
    if (v105 <= v88)
      v106 = v87 + HIDWORD(v112);
    else
      v106 = v105;
    if (HIDWORD(v106))
    {
LABEL_232:
      __break(0xC471u);
      JUMPOUT(0x198CD7F14);
    }
    v107 = *(const void **)(v85 + 32);
    v108 = (void *)WTF::fastMalloc((WTF *)v106);
    *(_DWORD *)(v85 + 40) = v106;
    *(_QWORD *)(v85 + 32) = v108;
    memcpy(v108, v107, v87);
    if (v107)
    {
      if (*(const void **)(v85 + 32) == v107)
      {
        *(_QWORD *)(v85 + 32) = 0;
        *(_DWORD *)(v85 + 40) = 0;
      }
      WTF::fastFree((unint64_t)v107, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(v85 + 44) = v88;
  v89 = v111;
  v90 = HIDWORD(v112);
  if (HIDWORD(v112))
  {
    v91 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + v87);
    do
    {
      v92 = *(_BYTE *)v89;
      v89 = (WTF *)((char *)v89 + 1);
      *v91++ = v92;
      --v90;
    }
    while (v90);
    v89 = v111;
  }
  if (v113 != (_BYTE *)v89 && v89 != 0)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v89, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Wasm::IPIntGenerator::addCall(_BYTE *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  char v29;

  v8 = a3;
  if (*(_DWORD *)(a4 + 32))
    v11 = 0;
  else
    v11 = (unsigned int *)(a4 + 8);
  v12 = v11[3];
  if (v12)
  {
    v14 = 0;
    v15 = *(_DWORD *)(a5 + 12);
    do
    {
      if (v15 == *(_DWORD *)(a5 + 8))
      {
        WTF::Vector<JSC::Wasm::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, (WTF *)(v15 + 1), (unint64_t)&v29);
        v15 = *(_DWORD *)(a5 + 12);
        v12 = v11[3];
      }
      *(_DWORD *)(a5 + 12) = ++v15;
      ++v14;
    }
    while (v14 < v12);
  }
  v16 = v12 - v11[2];
  v17 = *a2 + (uint64_t)v16;
  if (HIDWORD(v17))
    goto LABEL_27;
  *a2 = v17;
  if (v16 >= 1)
  {
    if (a2[1] > v17)
      LODWORD(v17) = a2[1];
    a2[1] = v17;
  }
  v18 = *((_QWORD *)a2 + 4);
  v19 = *(unsigned int *)(v18 + 40);
  v20 = *(unsigned int *)(v18 + 44);
  v21 = v20 + 5;
  if (v20 + 5 > v19)
  {
    v23 = v19 + (v19 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v21)
      v25 = v20 + 5;
    else
      v25 = v24;
    if (!HIDWORD(v25))
    {
      v26 = *(const void **)(v18 + 32);
      v27 = (void *)WTF::fastMalloc((WTF *)v25);
      *(_DWORD *)(v18 + 40) = v25;
      *(_QWORD *)(v18 + 32) = v27;
      memcpy(v27, v26, v20);
      if (v26)
      {
        if (*(const void **)(v18 + 32) == v26)
        {
          *(_QWORD *)(v18 + 32) = 0;
          *(_DWORD *)(v18 + 40) = 0;
        }
        WTF::fastFree((unint64_t)v26, v28, a3, a4, a5, a6, a7, a8);
      }
      goto LABEL_15;
    }
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x198CD80F8);
  }
LABEL_15:
  *(_DWORD *)(v18 + 44) = v21;
  v22 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 32) + v20;
  *(_BYTE *)v22 = **((_BYTE **)a2 + 2) - *(_BYTE *)(*((_QWORD *)a2 + 2) + 14616);
  *(_DWORD *)(v22 + 1) = v8;
  JSC::Wasm::IPIntGenerator::addCallCommonData((uint64_t)a2, v11, a3, a4, a5, a6, a7, a8);
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::IPIntGenerator::addCallIndirect(_BYTE *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const void *v32;
  void *v33;
  void *v34;
  char v35;
  uint64_t v36;

  v9 = a3;
  if (*(_DWORD *)(a4 + 32))
    v12 = 0;
  else
    v12 = (unsigned int *)(a4 + 8);
  v13 = v12[3];
  if (v13)
  {
    v15 = 0;
    v16 = *(_DWORD *)(a5 + 12);
    do
    {
      if (v16 == *(_DWORD *)(a5 + 8))
      {
        WTF::Vector<JSC::Wasm::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, (WTF *)(v16 + 1), (unint64_t)&v35);
        v16 = *(_DWORD *)(a5 + 12);
        v13 = v12[3];
      }
      *(_DWORD *)(a5 + 12) = ++v16;
      ++v15;
    }
    while (v15 < v13);
  }
  v17 = v13 + ~v12[2];
  v18 = *a2 + (uint64_t)v17;
  if (HIDWORD(v18))
    goto LABEL_30;
  *a2 = v18;
  if (v17 >= 1)
  {
    if (a2[1] > v18)
      LODWORD(v18) = a2[1];
    a2[1] = v18;
  }
  v19 = *((_QWORD *)a2 + 4);
  v20 = *(unsigned int *)(v19 + 40);
  v21 = *(unsigned int *)(v19 + 44);
  v22 = v21 + 9;
  if (v21 + 9 > v20)
  {
    v29 = v20 + (v20 >> 2);
    if (v29 >= 0x10)
      v30 = v29 + 1;
    else
      v30 = 16;
    if (v30 <= v22)
      v31 = v21 + 9;
    else
      v31 = v30;
    if (!HIDWORD(v31))
    {
      v32 = *(const void **)(v19 + 32);
      v33 = (void *)WTF::fastMalloc((WTF *)v31);
      *(_DWORD *)(v19 + 40) = v31;
      *(_QWORD *)(v19 + 32) = v33;
      memcpy(v33, v32, v21);
      if (v32)
      {
        if (*(const void **)(v19 + 32) == v32)
        {
          *(_QWORD *)(v19 + 32) = 0;
          *(_DWORD *)(v19 + 40) = 0;
        }
        WTF::fastFree((unint64_t)v32, v34, a3, a4, a5, a6, a7, a8);
      }
      goto LABEL_15;
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x198CD82F4);
  }
LABEL_15:
  *(_DWORD *)(v19 + 44) = v22;
  v23 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 32) + v21;
  *(_BYTE *)v23 = **((_DWORD **)a2 + 2) - *(_DWORD *)(*((_QWORD *)a2 + 2) + 14616);
  *(_DWORD *)(v23 + 1) = v9;
  v24 = *((_QWORD *)a2 + 4);
  v25 = (_QWORD *)(v24 + 112);
  v36 = a4;
  v26 = *(unsigned int *)(v24 + 124);
  if ((_DWORD)v26 == *(_DWORD *)(v24 + 120))
  {
    v28 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v36);
    v27 = *(unsigned int *)(v24 + 124);
    *(_QWORD *)(*(_QWORD *)(v24 + 112) + 8 * v27) = *v28;
  }
  else
  {
    *(_QWORD *)(*v25 + 8 * v26) = a4;
    LODWORD(v27) = v26;
  }
  *(_DWORD *)(v24 + 124) = v27 + 1;
  *(_DWORD *)(v23 + 5) = v26;
  JSC::Wasm::IPIntGenerator::addCallCommonData((uint64_t)a2, v12, a3, a4, a5, a6, a7, a8);
  *a1 = 0;
  a1[8] = 0;
}

uint64_t std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 8))
  {
    v9 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  return a1;
}

JSC::Wasm::EntryPlan *JSC::Wasm::IPIntPlan::IPIntPlan(JSC::Wasm::EntryPlan *a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5)
{
  uint64_t v6;
  float v7;

  v6 = JSC::Wasm::EntryPlan::EntryPlan((uint64_t)a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_1E35B59B0;
  *(_QWORD *)(v6 + 72) = &unk_1E35B5A18;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_QWORD *)(v6 + 432) = 0;
  if (JSC::Wasm::EntryPlan::parseAndValidateModule(v6, *(const void **)(v6 + 80), *(unsigned int *)(v6 + 92), 0.0, v7))JSC::Wasm::EntryPlan::prepare(a1);
  return a1;
}

{
  uint64_t v6;
  float v7;

  v6 = JSC::Wasm::EntryPlan::EntryPlan((uint64_t)a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_1E35B59B0;
  *(_QWORD *)(v6 + 72) = &unk_1E35B5A18;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_QWORD *)(v6 + 432) = 0;
  if (JSC::Wasm::EntryPlan::parseAndValidateModule(v6, *(const void **)(v6 + 80), *(unsigned int *)(v6 + 92), 0.0, v7))JSC::Wasm::EntryPlan::prepare(a1);
  return a1;
}

uint64_t JSC::Wasm::IPIntPlan::IPIntPlan(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  v8 = *a5;
  *a5 = 0;
  v9 = *(_QWORD **)(a1 + 24);
  *v9 = a2;
  v9[1] = v8;
  *(_QWORD *)(a1 + 32) = 0x100000001;
  *(_QWORD *)(a1 + 72) = &unk_1E35B56A0;
  *(_QWORD *)a1 = off_1E35B5640;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v10 = *(unsigned int **)(a1 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 160) = a1 + 72;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  CC_SHA1_Init((CC_SHA1_CTX *)(a1 + 232));
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  if ((_QWORD)xmmword_1ECF4C290)
    WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
  *(_BYTE *)(a1 + 352) = 1;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 353) = 0;
  *(_QWORD *)a1 = off_1E35B59B0;
  *(_QWORD *)(a1 + 72) = &unk_1E35B5A18;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = a4;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 354) = 1;
  JSC::Wasm::EntryPlan::prepare((JSC::Wasm::EntryPlan *)a1);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 132);
  return a1;
}

uint64_t JSC::Wasm::IPIntPlan::prepareImpl(JSC::Wasm::IPIntPlan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::Wasm::FunctionIPIntMetadataGenerator **v30;
  uint64_t v31;
  JSC::Wasm::FunctionIPIntMetadataGenerator *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  const void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  const void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  int v86;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  const char *v97;
  int v98;
  unint64_t v99;
  void *__dst;
  int v101;

  v9 = *((_QWORD *)this + 2);
  v10 = *(unsigned int *)(v9 + 132);
  if (*((_DWORD *)this + 94) >= v10)
    goto LABEL_8;
  if (v10 >> 29
    || (v11 = (const void *)*((_QWORD *)this + 46),
        v12 = *((unsigned int *)this + 95),
        WTF::tryFastMalloc((WTF *)(8 * v10), &__dst),
        (v13 = __dst) == 0))
  {
    v75 = (unsigned __int8 *)this + 13;
    if (__ldaxr((unsigned __int8 *)this + 13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v75))
    {
      goto LABEL_60;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
LABEL_60:
    v99 = v10;
    __dst = "Failed allocating enough space for ";
    v101 = 35;
    v97 = "WebAssembly functions";
    v98 = 21;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__dst, &v99, (uint64_t)&v97, (int **)&v96);
    v84 = v96;
    if (!v96)
    {
LABEL_80:
      __break(0xC471u);
      JUMPOUT(0x198CD897CLL);
    }
LABEL_61:
    v85 = *((_QWORD *)this + 7);
    v96 = 0;
    if (v85
      || (*((_QWORD *)this + 7) = v84,
          *((_BYTE *)this + 64) = 0,
          (*(void (**)(JSC::Wasm::IPIntPlan *))(*(_QWORD *)this + 48))(this),
          v84 = v96,
          v96 = 0,
          v84))
    {
      if (*(_DWORD *)v84 == 2)
      {
        WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
        WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
      }
      else
      {
        *(_DWORD *)v84 -= 2;
      }
    }
    v86 = __ldxr(v75);
    if (v86 == 1)
    {
      if (!__stlxr(0, v75))
        return 0;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v75, 0, v78, v79, v80, v81, v82, v83);
    return 0;
  }
  *((_DWORD *)this + 94) = v10;
  *((_QWORD *)this + 46) = v13;
  memcpy(v13, v11, 8 * v12);
  if (v11)
  {
    if (*((const void **)this + 46) == v11)
    {
      *((_QWORD *)this + 46) = 0;
      *((_DWORD *)this + 94) = 0;
    }
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_8:
  v14 = *(unsigned int *)(v9 + 132);
  v15 = *((unsigned int *)this + 95);
  if (v15 >= v14)
  {
    if ((_DWORD)v15 != (_DWORD)v14)
    {
      v30 = (JSC::Wasm::FunctionIPIntMetadataGenerator **)(*((_QWORD *)this + 46) + 8 * v14);
      v31 = 8 * v15 - 8 * v14;
      do
      {
        v32 = *v30;
        *v30 = 0;
        if (v32)
        {
          JSC::Wasm::FunctionIPIntMetadataGenerator::~FunctionIPIntMetadataGenerator(v32, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
        }
        ++v30;
        v31 -= 8;
      }
      while (v31);
    }
  }
  else
  {
    v16 = *((unsigned int *)this + 94);
    if (v16 < v14)
    {
      v17 = v16 + (v16 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v14)
        v19 = *(unsigned int *)(v9 + 132);
      else
        v19 = v18;
      if (v19 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198CD8984);
      }
      v20 = (const void *)*((_QWORD *)this + 46);
      v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
      *((_DWORD *)this + 94) = v19;
      *((_QWORD *)this + 46) = v21;
      memcpy(v21, v20, 8 * v15);
      if (v20)
      {
        if (*((const void **)this + 46) == v20)
        {
          *((_QWORD *)this + 46) = 0;
          *((_DWORD *)this + 94) = 0;
        }
        WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    v29 = *((_QWORD *)this + 46);
    if (v29)
      bzero((void *)(v29 + 8 * *((unsigned int *)this + 95)), 8 * v14 - 8 * *((unsigned int *)this + 95));
  }
  *((_DWORD *)this + 95) = v14;
  result = JSC::Wasm::EntryPlan::tryReserveCapacity<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>((uint64_t)this, (uint64_t)this + 408, *(unsigned int *)(v9 + 132), (uint64_t)" WebAssembly functions", 23);
  if ((_DWORD)result)
  {
    WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 408, *(unsigned int *)(v9 + 132), v42, v43, v44, v45, v46, v47);
    if (*((_QWORD *)this + 48))
      return 1;
    v54 = *(unsigned int *)(v9 + 132);
    if (*((_DWORD *)this + 100) >= v54)
    {
LABEL_37:
      v59 = *(unsigned int *)(v9 + 132);
      v60 = *((unsigned int *)this + 101);
      if (v60 >= v59)
      {
        WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>>::destruct((unsigned int **)(*((_QWORD *)this + 49) + 8 * v59), *((_QWORD *)this + 49) + 8 * v60, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        v61 = *((unsigned int *)this + 100);
        if (v61 < v59)
        {
          v62 = v61 + (v61 >> 2);
          if (v62 >= 0x10)
            v63 = v62 + 1;
          else
            v63 = 16;
          if (v63 <= v59)
            v64 = v59;
          else
            v64 = v63;
          if (v64 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198CD898CLL);
          }
          v65 = (const void *)*((_QWORD *)this + 49);
          v66 = (void *)WTF::fastMalloc((WTF *)(8 * v64));
          *((_DWORD *)this + 100) = v64;
          *((_QWORD *)this + 49) = v66;
          memcpy(v66, v65, 8 * v60);
          if (v65)
          {
            if (*((const void **)this + 49) == v65)
            {
              *((_QWORD *)this + 49) = 0;
              *((_DWORD *)this + 100) = 0;
            }
            WTF::fastFree((unint64_t)v65, v67, v68, v69, v70, v71, v72, v73);
          }
        }
        v74 = *((_QWORD *)this + 49);
        if (v74)
          bzero((void *)(v74 + 8 * *((unsigned int *)this + 101)), 8 * v59 - 8 * *((unsigned int *)this + 101));
      }
      *((_DWORD *)this + 101) = v59;
      return 1;
    }
    if (!(v54 >> 29))
    {
      v55 = (const void *)*((_QWORD *)this + 49);
      v56 = *((unsigned int *)this + 101);
      WTF::tryFastMalloc((WTF *)(8 * v54), &__dst);
      v57 = __dst;
      if (__dst)
      {
        *((_DWORD *)this + 100) = v54;
        *((_QWORD *)this + 49) = v57;
        memcpy(v57, v55, 8 * v56);
        if (v55)
        {
          if (*((const void **)this + 49) == v55)
          {
            *((_QWORD *)this + 49) = 0;
            *((_DWORD *)this + 100) = 0;
          }
          WTF::fastFree((unint64_t)v55, v58, v48, v49, v50, v51, v52, v53);
        }
        goto LABEL_37;
      }
    }
    v75 = (unsigned __int8 *)this + 13;
    if (__ldaxr((unsigned __int8 *)this + 13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v75))
    {
      goto LABEL_76;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
LABEL_76:
    v99 = v54;
    __dst = "Failed allocating enough space for ";
    v101 = 35;
    v97 = " WebAssembly functions";
    v98 = 22;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__dst, &v99, (uint64_t)&v97, (int **)&v96);
    v84 = v96;
    if (!v96)
      goto LABEL_80;
    goto LABEL_61;
  }
  return result;
}

uint64_t JSC::Wasm::EntryPlan::tryReserveCapacity<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;

  v9 = WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(a2, a3);
  if ((v9 & 1) != 0)
    return v9;
  v11 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
LABEL_6:
  WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((uint64_t)"Failed allocating enough space for ", 36, a3, a4, a5, (int **)&v35);
  JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v35, 0, v13, v14, v15, v16, v17);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = __ldxr(v11);
  if (v26 == 1)
  {
    if (!__stlxr(0, v11))
      return v9;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v19, v20, v21, v22, v23, v24);
  return v9;
}

void WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;

  v10 = *(unsigned int *)(a1 + 12);
  if (v10 >= a2)
  {
    WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)(*(_QWORD *)a1 + 8 * a2), *(_QWORD *)a1 + 8 * v10, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned int *)(a1 + 8) < a2)
      WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    if (*(_QWORD *)a1)
      bzero((void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), 8 * a2 - 8 * *(unsigned int *)(a1 + 12));
  }
  *(_DWORD *)(a1 + 12) = a2;
}

void JSC::Wasm::IPIntPlan::compileFunction(JSC::Wasm::IPIntPlan *this, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const JSC::Wasm::Type *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::Wasm::TypeDefinition *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const JSC::Wasm::Type *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint8x8_t v33;
  unint64_t v34;
  JSC::Wasm::TypeDefinition *v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  void *v53;
  unint64_t v54;
  int v55;
  int v56;
  WTF::StringImpl *v57;
  char v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  int v65;
  WTF **v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  int v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  char *v87;
  unsigned int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  WTF **v96;
  uint64_t *v97;
  uint64_t v98;
  float v99;
  _BYTE *v100;
  BOOL v101;
  unint64_t v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  WTF *v112;
  unsigned int v114;
  unsigned int v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char v119;
  _QWORD *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t *v129;
  char *v130;
  unsigned int v131;
  __n128 v132;
  WTF *v133;
  char *v134;
  char *v135;
  void *v136;
  int v137;
  uint64_t v138;
  _BYTE *v139;
  __int128 v140;
  int v141;
  char *v142;
  char *v143;
  _DWORD *v144;
  WTF *v145;
  int v146;
  uint64_t v147;
  _BYTE *v148;
  __int128 v149;
  int v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  WTF *v154;
  void *v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  WTF::StringImpl **v163;
  char *v164;
  WTF::StringImpl *v165;
  unsigned int v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  unsigned int v169;
  uint64_t v170;
  WTF *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  unint64_t v175;
  WTF *v176;
  WTF *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  char *v184;
  unint64_t v185;
  WTF *v187;
  WTF *v188;
  JSC::Wasm::FunctionIPIntMetadataGenerator *v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 *v198;
  void **v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  int v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  WTF::StringImpl *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  int v244;
  uint64_t v245;
  void **v246;
  JSC::Wasm::FunctionIPIntMetadataGenerator *v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  _DWORD *v259;
  uint64_t v260;
  WTF::StringImpl *v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int *v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unsigned int *v280;
  unsigned int v281;
  unint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  int v296;
  unsigned int v297;
  BOOL v298;
  int v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  int v310;
  unsigned __int8 *v311;
  WTF::AtomStringImpl *v313;
  WTF::StringImpl *v314;
  uint64_t v315;
  int v316;
  WTF *v317;
  uint64_t v318;
  _BYTE *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  WTF *v331;
  WTF *v332;
  char *v333;
  uint64_t i;
  void **v336;
  int v337;
  int v338;
  BOOL v339;
  BOOL v340;
  int v341;
  char v342;
  _BOOL4 v343;
  const void *v344;
  uint64_t v345;
  JSC::Wasm::Callee *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  WTF::AtomStringImpl *v361;
  WTF::StringImpl *v362;
  uint64_t v363;
  unint64_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int *v380;
  WTF *v381;
  unint64_t CachedUnrolling;
  unsigned int *v383;
  WTF *v384;
  unint64_t v385;
  const JSC::Wasm::TypeDefinition *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  const JSC::Wasm::TypeDefinition *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  WTF *v398;
  WTF *v399;
  uint64_t v400;
  unint64_t v401;
  int v402;
  uint64_t v403;
  unsigned int v404;
  void **p_dst;
  int v406;
  WTF::StringImpl *v407;
  unsigned int *v408;
  unint64_t v409;
  void *v410;
  char v411;
  unsigned int v412;
  unsigned int v413;
  WTF::StringImpl **v414;
  WTF *v415;
  uint64_t v416;
  _BYTE v417[384];
  WTF *v418;
  uint64_t v419;
  _BYTE v420[13824];
  WTF *v421;
  uint64_t v422;
  _BYTE v423[256];
  JSC::Wasm::TypeDefinition *v424;
  uint64_t v425;
  __int128 v426;
  uint64_t v427;
  unsigned __int8 v428;
  __int128 v429;
  WTF::StringImpl *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  JSC::Wasm::FunctionIPIntMetadataGenerator *v434;
  WTF *v435;
  uint64_t v436;
  __int16 v437;
  void *__dst;
  uint64_t v439;
  _BYTE v440[384];
  WTF *v441;
  uint64_t v442;
  _BYTE v443[384];
  int v444;
  _BYTE v445[28];
  int v446;
  __n128 v447;
  uint64_t v448;
  int v449[3];

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v10 = *(_QWORD *)(v2 + 16);
  if (*(_DWORD *)(v10 + 132) <= v3)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDAA9CLL);
  }
  v11 = v3;
  if (*(_DWORD *)(v10 + 52) <= v3)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDAAA4);
  }
  v12 = v2;
  v13 = v3;
  v14 = *(_QWORD *)(v10 + 120);
  v15 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v3);
  v16 = (JSC::Wasm::TypeDefinition *)v15;
  v404 = v3;
  v403 = v3;
  if (*(_DWORD *)(v15 + 32) == 4)
  {
    v380 = *(unsigned int **)(v15 + 8);
    v381 = *(WTF **)v380;
    v16 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v380 + 8) + 8 * v380[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v16))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v15, (unint64_t)v3, v4, v5, (uint64_t)v6, v7, v8, v9);
      if ((_BYTE)v3)
      {
        v16 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v16 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v16, v381, v4, v5, v6, v7, v8, v9);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v15, v16, v386, v387, v388, v389, v390, v391);
      }
      v11 = v404;
      v13 = v403;
    }
  }
  if (*((_DWORD *)v16 + 8) == 5)
    v16 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v16 + 1);
  if (*(_DWORD *)(v12 + 148) <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDAAACLL);
  }
  v402 = *(_DWORD *)(*(_QWORD *)(v12 + 16) + 36);
  v17 = *(_QWORD *)(v12 + 136) + 16 * v13;
  v18 = *(_QWORD *)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)v17 = 0;
    *(_DWORD *)(v17 + 8) = 0;
    WTF::fastFree(v18, v3, v4, v5, (uint64_t)v6, v7, v8, v9);
  }
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  v19 = v14 + 40 * v13;
  v20 = *(unsigned int **)(v19 + 16);
  v21 = *(unsigned int *)(v19 + 28);
  v22 = *(_QWORD *)(v12 + 16);
  v431 = 0;
  v430 = 0;
  v432 = 0;
  v433 = v22;
  v23 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)v23 = v11;
  *(_BYTE *)(v23 + 4) = 0;
  *(_QWORD *)(v23 + 8) = 0x8000000000000000;
  *(_QWORD *)(v23 + 16) = v20;
  *(_QWORD *)(v23 + 24) = v21;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  *(_QWORD *)(v23 + 80) = v23 + 96;
  *(_QWORD *)(v23 + 88) = 16;
  *(_OWORD *)(v23 + 112) = 0u;
  *(_OWORD *)(v23 + 128) = 0u;
  *(_OWORD *)(v23 + 144) = 0u;
  *(_QWORD *)(v23 + 160) = 0;
  v437 = 0;
  v434 = (JSC::Wasm::FunctionIPIntMetadataGenerator *)v23;
  v435 = 0;
  v436 = 0;
  v407 = 0;
  v408 = v20;
  v409 = v21;
  v34 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v34 != -1)
  {
    __dst = v449;
    p_dst = &__dst;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v410 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v411 = 0;
  v412 = 0;
  v413 = 0;
  v414 = &v430;
  v415 = (WTF *)v417;
  v416 = 16;
  v418 = (WTF *)v420;
  v419 = 16;
  v421 = (WTF *)v423;
  v422 = 16;
  if (*((_DWORD *)v16 + 8) == 4)
  {
    v383 = (unsigned int *)*((_QWORD *)v16 + 1);
    v384 = *(WTF **)v383;
    v35 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v383 + 8) + 8 * v383[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v35))
    {
      v385 = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v16, (unint64_t)v24, v25, v26, (uint64_t)v27, v28, v29, v30);
      if ((_BYTE)v24)
      {
        v35 = (JSC::Wasm::TypeDefinition *)v385;
      }
      else
      {
        v35 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v35, v384, v25, v26, v27, v28, v29, v30);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v16, v35, v392, v393, v394, v395, v396, v397);
      }
    }
  }
  else
  {
    v35 = v16;
  }
  if (*((_DWORD *)v35 + 8) == 5)
    v35 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v35 + 1);
  v424 = v35;
  v425 = v22;
  v426 = 0u;
  v427 = 0x8000000000000000;
  v429 = 0u;
  v428 = 0;
  v36 = v414;
  v414[2] = (WTF::StringImpl *)&v407;
  if (!*((_DWORD *)v35 + 8))
  {
    v38 = *((unsigned int *)v35 + 4);
    v37 = *((unsigned int *)v35 + 5);
    if ((_DWORD)v38)
    {
      v39 = 0;
      v40 = *((_DWORD *)v35 + 5);
      v41 = *((unsigned int *)v35 + 4);
      do
      {
        if (*(unsigned __int8 *)(*((_QWORD *)v35 + 1) + 16 * v40) == 251)
          ++v39;
        ++v40;
        --v41;
      }
      while (v41);
      if (v39)
        goto LABEL_28;
    }
    if ((_DWORD)v37)
    {
      v42 = 0;
      v43 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
      do
      {
        v44 = *v43;
        v43 += 16;
        if (v44 == 251)
          ++v42;
        --v37;
      }
      while (v37);
      if (v42)
LABEL_28:
        *((_BYTE *)v36 + 57) = 1;
    }
    v45 = v36[4];
    *((_DWORD *)v45 + 15) += v38;
    *((_DWORD *)v45 + 17) = v38;
    v46 = (v38 + 1);
    v47 = *((unsigned int *)v45 + 23);
    if (v47 < v46)
    {
      v48 = *((unsigned int *)v45 + 22);
      if (v48 < v46)
      {
        v49 = v48 + (v48 >> 2);
        if (v49 >= 0x10)
          v50 = v49 + 1;
        else
          v50 = 16;
        if (v50 <= v46)
          v51 = (v38 + 1);
        else
          v51 = v50;
        v52 = (char *)*((_QWORD *)v45 + 10);
        if (v51 < 0x11)
        {
          v53 = (char *)v45 + 96;
          *((_QWORD *)v45 + 10) = (char *)v45 + 96;
          *((_DWORD *)v45 + 22) = 16;
        }
        else
        {
          if (HIDWORD(v51))
          {
            __break(0xC471u);
            JUMPOUT(0x198CDAAF4);
          }
          v53 = (void *)WTF::fastMalloc((WTF *)v51);
          *((_DWORD *)v45 + 22) = v51;
          *((_QWORD *)v45 + 10) = v53;
        }
        memcpy(v53, v52, v47);
        if ((char *)v45 + 96 != v52 && v52)
        {
          if (*((char **)v45 + 10) == v52)
          {
            *((_QWORD *)v45 + 10) = 0;
            *((_DWORD *)v45 + 22) = 0;
          }
          WTF::fastFree((unint64_t)v52, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
        }
      }
    }
    *((_DWORD *)v45 + 23) = v46;
    if ((_DWORD)v38)
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      do
      {
        v57 = v36[4];
        if ((~*(_DWORD *)(*((_QWORD *)v35 + 1) + 16 * (v54 + *((_DWORD *)v35 + 5))) & 0xFELL) != 0)
        {
          if (v55 <= 7)
          {
            if (v54 >= *((unsigned int *)v57 + 23))
            {
              __break(0xC471u);
              JUMPOUT(0x198CDAA84);
            }
            v58 = v55++ + 8;
            goto LABEL_59;
          }
          ++*((_DWORD *)v57 + 18);
          if (v54 >= *((unsigned int *)v57 + 23))
          {
            __break(0xC471u);
            JUMPOUT(0x198CDAA94);
          }
        }
        else
        {
          if (v56 <= 7)
          {
            if (v54 >= *((unsigned int *)v57 + 23))
            {
              __break(0xC471u);
              JUMPOUT(0x198CDAA7CLL);
            }
            v58 = v56++;
            goto LABEL_59;
          }
          ++*((_DWORD *)v57 + 18);
          if (v54 >= *((unsigned int *)v57 + 23))
          {
            __break(0xC471u);
            JUMPOUT(0x198CDAA8CLL);
          }
        }
        v58 = 12;
LABEL_59:
        *(_BYTE *)(*((_QWORD *)v57 + 10) + v54++) = v58;
      }
      while (v38 != v54);
    }
    v59 = v36[4];
    v60 = *((unsigned int *)v59 + 23);
    if (!(_DWORD)v60)
    {
      __break(0xC471u);
      JUMPOUT(0x198CDAAB4);
    }
    *(_BYTE *)(v60 + *((_QWORD *)v59 + 10) - 1) = 13;
    v61 = v407;
    v62 = v409 - (_QWORD)v407;
    if (v409 <= (unint64_t)v407)
      goto LABEL_530;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = &v418;
    v407 = (WTF::StringImpl *)((char *)v407 + 1);
    v67 = 5;
    if (v62 < 5)
      v67 = v62;
    v68 = v67 - 1;
    v69 = (char *)v61 + (_QWORD)v408;
    v70 = (char *)v61 + 2;
    do
    {
      LODWORD(v71) = v69[v63];
      v65 |= (v71 & 0x7F) << v64;
      if ((v71 & 0x80000000) == 0)
        goto LABEL_69;
      if (v68 == v63)
        goto LABEL_530;
      LOBYTE(v71) = (_BYTE)v70 + v63;
      v407 = (WTF::StringImpl *)&v70[v63];
      v64 += 7;
      ++v63;
    }
    while (v62 != v63);
LABEL_68:
    __break(1u);
LABEL_69:
    if ((_DWORD)v63 == 4 && v71 >= 0x10u)
    {
LABEL_530:
      v333 = "can't get local groups count";
      i = 29;
      goto LABEL_467;
    }
    v72 = *((unsigned int *)v35 + 4);
    v73 = v422;
    v400 = (uint64_t)v66;
    if (v422 >= v72)
    {
LABEL_71:
      v74 = HIDWORD(v422);
      v75 = v72 + HIDWORD(v422);
      if (v75 > v73)
      {
        v331 = v421;
        if (v75 < 0x11)
        {
          v421 = (WTF *)v423;
          LODWORD(v422) = 16;
          v332 = (WTF *)v423;
        }
        else
        {
          if (v75 >> 28)
            goto LABEL_552;
          v332 = (WTF *)WTF::fastMalloc((WTF *)(16 * v75));
          LODWORD(v422) = v75;
          v421 = v332;
        }
        memcpy(v332, v331, 16 * v74);
        if (v423 != (_BYTE *)v331 && v331)
        {
          if (v421 == v331)
          {
            v421 = 0;
            LODWORD(v422) = 0;
          }
          WTF::fastFree((unint64_t)v331, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
        }
      }
      if ((_DWORD)v72)
      {
        v76 = 0;
        v77 = HIDWORD(v422);
        do
        {
          *((_OWORD *)v421 + v77) = *(_OWORD *)(*((_QWORD *)v35 + 1) + 16 * (v76 + *((_DWORD *)v35 + 5)));
          v77 = ++HIDWORD(v422);
          ++v76;
        }
        while (v72 != v76);
      }
      v78 = *((unsigned int *)v35 + 4);
      if (v65)
      {
        v401 = 0;
        v79 = 0;
        while (1)
        {
          LODWORD(v63) = v409;
          v80 = v407;
          v81 = v409 - (_QWORD)v407;
          if (v409 <= (unint64_t)v407)
            goto LABEL_515;
          v82 = 0;
          v83 = 0;
          LODWORD(v66) = 0;
          if (v81 >= 5)
            v81 = 5;
          v84 = v81 - 1;
          v407 = (WTF::StringImpl *)((char *)v407 + 1);
          v71 = (char *)v80 + (_QWORD)v408;
          while (1)
          {
            v85 = v71[v82];
            v66 = (WTF **)(((v85 & 0x7F) << v83) | v66);
            if ((v85 & 0x80000000) == 0)
              break;
            if (v84 == v82)
              goto LABEL_515;
            v407 = (WTF::StringImpl *)((char *)v80 + v82++ + 2);
            v83 += 7;
            if (!(WTF::StringImpl *)((char *)v80 + v82 - v409))
              goto LABEL_68;
          }
          if ((_DWORD)v82 == 4 && v71[v82] >= 0x10u)
          {
LABEL_515:
            v117 = "can't get Function's number of locals in group ";
            v118 = 48;
            goto LABEL_179;
          }
          v78 += v66;
          if (v78 >= 0xC351)
          {
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long>("Function's number of locals is too big ", (unint64_t *)&v407, 40, v78, " maximum ", 10, 50000, &__dst, *(float *)&v31);
            goto LABEL_180;
          }
          if ((unint64_t)v80 + v82 + 1 >= v409
            || (v86 = v425,
                v87 = (char *)v80 + v82,
                v407 = (WTF::StringImpl *)(v87 + 2),
                v88 = *((char *)v408 + (_QWORD)v87 + 1),
                (v88 & 0x80000000) != 0)
            || (v89 = v88 | (v88 >> 6 << 7),
                !JSC::Wasm::isValidTypeKind<signed char>((char)(v88 | ((v88 >> 6) << 7)))))
          {
LABEL_178:
            v117 = "can't get Function local's type in group ";
            v118 = 42;
LABEL_179:
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v117, (unint64_t *)&v407, v118, v79, &__dst, *(float *)&v31);
            goto LABEL_180;
          }
          if (!BYTE1(dword_1ECF4C7B0))
          {
            if ((v89 + 29) < 2u)
              goto LABEL_178;
LABEL_93:
            v90 = 0;
            goto LABEL_94;
          }
          v90 = (char)v89;
          v91 = (char)v89 + 22;
          if (v91 <= 9 && (((1 << v91) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
          {
            v92 = 227;
LABEL_117:
            if (BYTE1(dword_1ECF4C7B0))
              v101 = v90 == 0;
            else
              v101 = 1;
            if (v101)
              goto LABEL_178;
            v102 = v401;
            if (v92 == 228)
              v102 = v401 + 1;
            v401 = v102;
            if (v92 == 228)
              v92 = 228;
            else
              v92 = 227;
            goto LABEL_95;
          }
          if ((v89 + 29) >= 2u)
            goto LABEL_93;
          v103 = v407;
          v63 = v409 - (_QWORD)v407;
          if (v409 <= (unint64_t)v407)
            goto LABEL_178;
          v104 = 0;
          v105 = 0;
          v106 = 5;
          if (v63 < 5)
            v106 = v409 - (_QWORD)v407;
          v107 = v106 - 1;
          v407 = (WTF::StringImpl *)((char *)v407 + 1);
          v108 = (char *)v103 + (_QWORD)v408;
          v71 = (char *)v103 + 2;
          v109 = 7;
          while (1)
          {
            v110 = v108[v104];
            v105 |= (v110 & 0x7F) << (v109 - 7);
            if ((v110 & 0x80000000) == 0)
              break;
            if (v107 == v104)
              goto LABEL_178;
            v407 = (WTF::StringImpl *)&v71[v104];
            v109 += 7;
            if (v63 == ++v104)
              goto LABEL_68;
          }
          if ((_DWORD)v104 == 4)
          {
            if ((v110 & 0x40) == 0)
            {
              if (v108[v104] > 7u)
                goto LABEL_178;
              goto LABEL_137;
            }
            if ((v110 & 0xF8) != 0x78)
              goto LABEL_178;
          }
          if (v109 <= 0x1F && (v110 & 0x40) != 0)
          {
            v105 |= -1 << v109;
LABEL_169:
            v90 = (int)v105;
            v116 = (int)v105 + 22;
            if (v116 > 9 || ((1 << v116) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
              goto LABEL_178;
            goto LABEL_94;
          }
LABEL_137:
          if ((v105 & 0x80000000) != 0)
            goto LABEL_169;
          if (v105 >= *(_DWORD *)(v86 + 100))
          {
            if (!v411)
              goto LABEL_178;
            v111 = v412;
            if (v105 < v412 || v105 >= v413)
              goto LABEL_178;
          }
          else if (!v411 || (v111 = v412, v105 < v412))
          {
            v90 = *(_QWORD *)(*(_QWORD *)(v86 + 88) + 8 * v105);
            goto LABEL_94;
          }
          JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v105 - v111), v26, (uint64_t)v27, v28, v29, v30, (unsigned int **)&__dst);
          v90 = (unint64_t)__dst;
          __dst = 0;
          if (v90)
          {
            do
            {
              v114 = __ldaxr((unsigned int *)v90);
              v115 = v114 - 1;
            }
            while (__stlxr(v115, (unsigned int *)v90));
            if (!v115)
            {
              atomic_store(1u, (unsigned int *)v90);
              WTF::fastFree(v90, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
            }
          }
LABEL_94:
          v92 = v89;
          if (v89 - 252 >= 4)
          {
            if (v89 - 239 < 2)
            {
              if (BYTE1(dword_1ECF4C7B0))
                goto LABEL_178;
            }
            else
            {
              if (v89 != 251)
              {
                if (v89 - 227 > 1)
                  goto LABEL_178;
                goto LABEL_117;
              }
              if (!HIBYTE(dword_1ECF4C7B0))
                goto LABEL_178;
              *((_BYTE *)v414 + 57) = 1;
              v92 = 251;
            }
          }
LABEL_95:
          if (v78 > v422)
          {
            v398 = v421;
            v98 = HIDWORD(v422);
            if (v78 < 0x11)
            {
              v421 = (WTF *)v423;
              LODWORD(v422) = 16;
              v100 = v423;
            }
            else
            {
              WTF::tryFastMalloc((WTF *)(16 * v78), &__dst);
              v100 = __dst;
              if (!__dst)
              {
                JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral>("can't allocate enough memory for function's ", (unint64_t *)&v407, 45, v78, " locals", 8, &__dst, v99);
                goto LABEL_180;
              }
              LODWORD(v422) = v78;
              v421 = (WTF *)__dst;
            }
            memcpy(v100, v398, 16 * v98);
            if (v423 != (_BYTE *)v398 && v398)
            {
              if (v421 == v398)
              {
                v421 = 0;
                LODWORD(v422) = 0;
              }
              WTF::fastFree((unint64_t)v398, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
            }
          }
          v93 = HIDWORD(v422);
          v94 = (unint64_t)v66 + HIDWORD(v422);
          if (v94 > v422)
          {
            v399 = v421;
            if (v94 < 0x11)
            {
              v421 = (WTF *)v423;
              LODWORD(v422) = 16;
              v112 = (WTF *)v423;
            }
            else
            {
              if (v94 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x198CDAAC4);
              }
              v112 = (WTF *)WTF::fastMalloc((WTF *)(16 * v94));
              LODWORD(v422) = v94;
              v421 = v112;
            }
            memcpy(v112, v399, 16 * v93);
            if (v423 != (_BYTE *)v399 && v399)
            {
              if (v421 == v399)
              {
                v421 = 0;
                LODWORD(v422) = 0;
              }
              WTF::fastFree((unint64_t)v399, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
            }
          }
          if ((_DWORD)v66)
          {
            v95 = HIDWORD(v422);
            v96 = v66;
            do
            {
              v97 = (uint64_t *)((char *)v421 + 16 * v95);
              *v97 = v92;
              v97[1] = v90;
              v95 = ++HIDWORD(v422);
              v96 = (WTF **)((char *)v96 - 1);
            }
            while (v96);
          }
          *((_DWORD *)v414[4] + 15) += (_DWORD)v66;
          if (++v79 == v65)
            goto LABEL_182;
        }
      }
      v401 = 0;
LABEL_182:
      if (BYTE1(dword_1ECF4C7B0))
      {
        if (v401 > DWORD2(v426))
        {
          if (v401 >> 30)
            goto LABEL_532;
          v344 = (const void *)v426;
          v345 = HIDWORD(v426);
          WTF::tryFastMalloc((WTF *)(4 * v401), &__dst);
          if (!__dst)
            goto LABEL_532;
          DWORD2(v426) = v401;
          *(_QWORD *)&v426 = __dst;
          memcpy(__dst, v344, 4 * v345);
          if (v344)
          {
            if ((const void *)v426 == v344)
            {
              *(_QWORD *)&v426 = 0;
              DWORD2(v426) = 0;
            }
            WTF::fastFree((unint64_t)v344, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
          }
        }
        if (v427 < 0)
          v124 = 63;
        else
          v124 = *(_QWORD *)(2 * v427);
        if (v124 < v78)
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v427, v78, 0);
        v125 = *((unsigned int *)v35 + 4);
        if ((_DWORD)v125)
        {
          v126 = 0;
          v127 = *((_DWORD *)v35 + 5);
          v128 = *((_QWORD *)v35 + 1);
          do
          {
            if (*(unsigned __int8 *)(v128 + 16 * (v127 + v126)) == 228)
            {
              if (v427 >= 0)
                v129 = (uint64_t *)(2 * v427 + 8);
              else
                v129 = &v427;
              *(uint64_t *)((char *)v129 + ((v126 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v126;
            }
            ++v126;
          }
          while (v125 != v126);
        }
      }
      *((_DWORD *)v414[4] + 13) = *(_QWORD *)v414[2];
      __dst = v440;
      v439 = 16;
      v441 = (WTF *)v443;
      v442 = 16;
      v444 = 0;
      if (*((_DWORD *)v424 + 8))
        v130 = 0;
      else
        v130 = (char *)v424 + 8;
      *(_QWORD *)v445 = v130;
      *(_DWORD *)&v445[8] = 3;
      *(_OWORD *)&v445[12] = 0uLL;
      v446 = 0;
      v447.n128_u64[0] = -1;
      v447.n128_u64[1] = -1;
      v448 = 0;
      v131 = HIDWORD(v419);
      if (HIDWORD(v419) == (_DWORD)v419)
      {
        v132.n128_u64[0] = WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::IPIntControlType,JSC::Wasm::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>(v400, (unint64_t)&__dst, v25, v26, (uint64_t)v27, v28, v29, v30).n128_u64[0];
      }
      else
      {
        v133 = v418;
        v134 = (char *)v418 + 864 * HIDWORD(v419);
        v135 = v134 + 16;
        *(_QWORD *)v134 = v134 + 16;
        *((_QWORD *)v134 + 1) = 16;
        v136 = __dst;
        if (__dst == v440)
        {
          if (HIDWORD(v439))
          {
            v138 = 24 * HIDWORD(v439);
            v139 = v440;
            do
            {
              v140 = *(_OWORD *)v139;
              *((_QWORD *)v135 + 2) = *((_QWORD *)v139 + 2);
              *(_OWORD *)v135 = v140;
              v135 += 24;
              v139 += 24;
              v138 -= 24;
            }
            while (v138);
          }
        }
        else
        {
          __dst = v440;
          *(_QWORD *)v134 = v136;
          v137 = v439;
          LODWORD(v439) = 16;
          *((_DWORD *)v134 + 2) = v137;
        }
        v141 = HIDWORD(v439);
        HIDWORD(v439) = 0;
        *((_DWORD *)v134 + 3) = v141;
        v142 = (char *)v133 + 864 * v131;
        v143 = v142 + 416;
        *((_QWORD *)v142 + 50) = v142 + 416;
        v144 = v142 + 412;
        *((_QWORD *)v142 + 51) = 16;
        v145 = v441;
        if (v441 == (WTF *)v443)
        {
          if (HIDWORD(v442))
          {
            v147 = 24 * HIDWORD(v442);
            v148 = v443;
            do
            {
              v149 = *(_OWORD *)v148;
              *((_QWORD *)v143 + 2) = *((_QWORD *)v148 + 2);
              *(_OWORD *)v143 = v149;
              v143 += 24;
              v148 += 24;
              v147 -= 24;
            }
            while (v147);
          }
        }
        else
        {
          v441 = (WTF *)v443;
          *((_QWORD *)v142 + 50) = v145;
          v146 = v442;
          LODWORD(v442) = 16;
          *((_DWORD *)v142 + 102) = v146;
        }
        v150 = HIDWORD(v442);
        HIDWORD(v442) = 0;
        *v144 = v150;
        v151 = (char *)v133 + 864 * v131;
        *((_DWORD *)v151 + 200) = v444;
        *(_OWORD *)(v151 + 808) = *(_OWORD *)v445;
        *((_QWORD *)v151 + 104) = 0;
        *((_QWORD *)v151 + 103) = 0;
        v152 = *(_QWORD *)&v445[16];
        *(_QWORD *)&v445[16] = 0;
        *((_QWORD *)v151 + 103) = v152;
        LODWORD(v152) = *(_DWORD *)&v445[24];
        *(_DWORD *)&v445[24] = 0;
        *((_DWORD *)v151 + 208) = v152;
        LODWORD(v152) = v446;
        v446 = 0;
        *((_DWORD *)v151 + 209) = v152;
        v132 = v447;
        *((_QWORD *)v151 + 107) = v448;
        *(__n128 *)(v151 + 840) = v132;
        ++HIDWORD(v419);
      }
      v153 = *(_QWORD *)&v445[16];
      if (*(_QWORD *)&v445[16])
      {
        *(_QWORD *)&v445[16] = 0;
        *(_DWORD *)&v445[24] = 0;
        WTF::fastFree(v153, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
      }
      v154 = v441;
      if (v443 != (_BYTE *)v441 && v441)
      {
        v441 = 0;
        LODWORD(v442) = 0;
        WTF::fastFree((unint64_t)v154, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
      }
      v155 = __dst;
      if (v440 != __dst && __dst)
      {
        __dst = 0;
        LODWORD(v439) = 0;
        WTF::fastFree((unint64_t)v155, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
      }
      while (HIDWORD(v419))
      {
        v156 = v407;
        *(_QWORD *)&v429 = v407;
        if ((unint64_t)v407 >= v409)
        {
          v333 = "can't decode opcode";
          i = 20;
          goto LABEL_467;
        }
        v407 = (WTF::StringImpl *)((char *)v407 + 1);
        v157 = *((unsigned __int8 *)v156 + (_QWORD)v408);
        if (v157 == 255
          || ((JSC::Wasm::isValidOpType<unsigned char>(unsigned char)::valid[v157 >> 3] >> (v157 & 7)) & 1) == 0)
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("invalid opcode ", (unint64_t *)&v407, 16, v157, &__dst, *(float *)&v31);
          goto LABEL_180;
        }
        v428 = *((_BYTE *)v156 + (_QWORD)v408);
        if (BYTE5(qword_1ECF4C789))
        {
          v158 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey);
          if (v158 != -1)
          {
            __dst = v449;
            p_dst = &__dst;
            std::__call_once(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::singleton(void)::$_0 &&>>);
          }
          v159 = v428;
          v160 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag);
          if (v160 != -1)
          {
            __dst = v449;
            p_dst = &__dst;
            std::__call_once(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::$_0 &&>>);
          }
          v161 = (unint64_t *)((char *)&JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter + 8 * v159 + 952);
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 + 1, v161));
        }
        if (DWORD2(v429))
          JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseUnreachableExpression(&__dst, (uint64_t)&v407, v25, v132.n128_f64[0], v31, v32, v33, v157, (uint64_t)v27, v28, v29, v30);
        else
          JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseExpression((int)&__dst, (int)&v407);
        if ((_BYTE)v439)
          goto LABEL_180;
      }
      v163 = v414;
      if (*((_DWORD *)v424 + 8))
        v164 = 0;
      else
        v164 = (char *)v424 + 8;
      v122 = v404;
      v123 = v403;
      if (*((_BYTE *)v414 + 57))
      {
        v165 = v414[3];
        v166 = *(_DWORD *)v414[4];
        if (*((_DWORD *)v165 + 33) <= v166)
        {
          __break(0xC471u);
          JUMPOUT(0x198CDAAE4);
        }
        v167 = *((_QWORD *)v165 + 15) + 40 * v166;
        *(_BYTE *)(v167 + 32) |= 1u;
      }
      if (HIDWORD(v416) == *((_DWORD *)v164 + 3))
      {
        v168 = v163[3];
        v169 = *(_DWORD *)v163[4];
        if (*((_DWORD *)v168 + 33) <= v169)
        {
          __break(0xC471u);
          JUMPOUT(0x198CDAACCLL);
        }
        v170 = *((_QWORD *)v168 + 15) + 40 * v169;
        *(_BYTE *)(v170 + 32) |= 8u;
        if ((_BYTE)v437)
        {
          v120 = v434;
          *((_DWORD *)v434 + 16) = (HIDWORD(v431) + 1) & 0xFFFFFFFE;
          if (HIDWORD(v436))
          {
            v171 = v435;
            v172 = v120[4];
            v173 = 4 * HIDWORD(v436);
            do
            {
              v174 = *(_DWORD *)v171;
              v171 = (WTF *)((char *)v171 + 4);
              *(_DWORD *)(v172 + v174) += *((_DWORD *)v120 + 16);
              v173 -= 4;
            }
            while (v173);
          }
        }
        else
        {
          v120 = v434;
        }
        v121 = 0;
        *((_DWORD *)v120 + 14) = HIDWORD(v430)
                               + (*((_DWORD *)v120 + 16) >> 1)
                               + (((unint64_t)*((unsigned int *)v120 + 15) + 1) >> 1);
        v434 = 0;
        v119 = 1;
        goto LABEL_254;
      }
LABEL_552:
      __break(0xC471u);
      JUMPOUT(0x198CDA688);
    }
    v317 = v421;
    v318 = HIDWORD(v422);
    if (v72 >= 0x11)
    {
      if (!(v72 >> 28))
      {
        WTF::tryFastMalloc((WTF *)(16 * v72), &__dst);
        v319 = __dst;
        if (__dst)
        {
          LODWORD(v422) = v72;
          v421 = (WTF *)__dst;
          goto LABEL_441;
        }
        LODWORD(v72) = *((_DWORD *)v35 + 4);
      }
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>("can't allocate enough memory for function's ", (unint64_t *)&v407, 45, v72, " arguments", 11, &__dst, *(float *)&v31);
      goto LABEL_180;
    }
    v319 = v423;
    v421 = (WTF *)v423;
    LODWORD(v422) = 16;
LABEL_441:
    memcpy(v319, v317, 16 * v318);
    if (v423 != (_BYTE *)v317 && v317)
    {
      if (v421 == v317)
      {
        v421 = 0;
        LODWORD(v422) = 0;
      }
      WTF::fastFree((unint64_t)v317, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
    }
    v72 = *((unsigned int *)v35 + 4);
    v73 = v422;
    goto LABEL_71;
  }
  v333 = "type signature was not a function signature";
  for (i = 44; ; i = 74)
  {
LABEL_467:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v333, (unint64_t *)&v407, i, &__dst, *(float *)&v31);
LABEL_180:
    v119 = 0;
    v120 = __dst;
    v121 = 1;
    v122 = v404;
    v123 = v403;
LABEL_254:
    p_dst = (void **)v120;
    v406 = v121;
    if ((v427 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v427, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
    v175 = v426;
    if ((_QWORD)v426)
    {
      *(_QWORD *)&v426 = 0;
      DWORD2(v426) = 0;
      WTF::fastFree(v175, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
    }
    v176 = v421;
    if (v423 != (_BYTE *)v421 && v421)
    {
      v421 = 0;
      LODWORD(v422) = 0;
      WTF::fastFree((unint64_t)v176, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
    }
    v177 = v418;
    if (HIDWORD(v419))
    {
      v178 = 0;
      v179 = 864 * HIDWORD(v419);
      do
      {
        v180 = (char *)v177 + v178;
        v181 = *(_QWORD *)((char *)v177 + v178 + 824);
        if (v181)
        {
          *((_QWORD *)v180 + 103) = 0;
          *((_DWORD *)v180 + 208) = 0;
          WTF::fastFree(v181, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
        }
        v182 = *((_QWORD *)v180 + 50);
        if (v180 + 416 != (char *)v182 && v182 != 0)
        {
          *((_QWORD *)v180 + 50) = 0;
          *(_DWORD *)((char *)v177 + v178 + 408) = 0;
          WTF::fastFree(v182, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
        }
        v184 = (char *)v177 + v178;
        v185 = *(_QWORD *)((char *)v177 + v178);
        if ((WTF *)((char *)v177 + v178 + 16) != (WTF *)v185 && v185 != 0)
        {
          *(_QWORD *)v184 = 0;
          *((_DWORD *)v184 + 2) = 0;
          WTF::fastFree(v185, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
        }
        v178 += 864;
      }
      while (v179 != v178);
      v177 = v418;
    }
    if (v420 != (_BYTE *)v177 && v177)
    {
      v418 = 0;
      LODWORD(v419) = 0;
      WTF::fastFree((unint64_t)v177, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
    }
    v187 = v415;
    if (v417 != (_BYTE *)v415 && v415)
    {
      v415 = 0;
      LODWORD(v416) = 0;
      WTF::fastFree((unint64_t)v187, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
    }
    v188 = v435;
    if (v435)
    {
      v435 = 0;
      LODWORD(v436) = 0;
      WTF::fastFree((unint64_t)v188, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
    }
    v189 = v434;
    v434 = 0;
    if (v189)
    {
      JSC::Wasm::FunctionIPIntMetadataGenerator::~FunctionIPIntMetadataGenerator(v189, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
      WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
    }
    if ((v119 & 1) == 0)
    {
      v311 = (unsigned __int8 *)(v12 + 13);
      if (__ldaxr((unsigned __int8 *)(v12 + 13)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v311))
      {
        goto LABEL_475;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 13);
LABEL_475:
      if (*(_QWORD *)(v12 + 56))
        goto LABEL_508;
      if (v406 != 1)
        goto LABEL_531;
      v336 = p_dst;
      if (p_dst)
      {
        v337 = *((_DWORD *)p_dst + 1);
        *(_DWORD *)p_dst += 2;
      }
      else
      {
        v337 = 0;
      }
      v338 = 0;
      do
      {
        ++v338;
        v339 = v122 > 9;
        LODWORD(v122) = v122 / 0xA;
      }
      while (v339);
      if (v338 < 0
        || ((v340 = __OFADD__(v338, 23), v341 = v338 + 23, !v340) ? (v342 = 0) : (v342 = 1),
            v337 < 0 || (v342 & 1) != 0 || __OFADD__(v337, v341)))
      {
        v407 = 0;
      }
      else
      {
        v343 = !v336 || ((_BYTE)v336[2] & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((v337 + v341), v343, (uint64_t)v336, ", in function at index ", 0x17u, v123, (int **)&v407);
        v362 = v407;
        if (v407)
        {
          v363 = *(_QWORD *)(v12 + 56);
          v407 = 0;
          if (v363
            || (*(_QWORD *)(v12 + 56) = v362,
                *(_BYTE *)(v12 + 64) = 0,
                (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12),
                v362 = v407,
                v407 = 0,
                v362))
          {
            if (*(_DWORD *)v362 == 2)
            {
              WTF::StringImpl::~StringImpl(v362, v361, v25, v26, (uint64_t)v27, v28, v29, v30);
              WTF::fastFree(v364, v365, v366, v367, v368, v369, v370, v371);
              if (v336)
              {
LABEL_506:
                if (*(_DWORD *)v336 == 2)
                {
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v336, v361, v25, v26, (uint64_t)v27, v28, v29, v30);
                  WTF::fastFree(v372, v373, v374, v375, v376, v377, v378, v379);
                }
                else
                {
                  *(_DWORD *)v336 -= 2;
                }
              }
LABEL_508:
              *(_DWORD *)(v12 + 360) = *(_DWORD *)(*(_QWORD *)(v12 + 16) + 132);
              goto LABEL_432;
            }
            *(_DWORD *)v362 -= 2;
          }
          if (v336)
            goto LABEL_506;
          goto LABEL_508;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x198CDAB08);
    }
    if (!HIBYTE(word_1ECF4C7B4))
      goto LABEL_349;
    v198 = (unsigned __int8 *)(v12 + 13);
    if (__ldaxr((unsigned __int8 *)(v12 + 13)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v198))
    {
      goto LABEL_293;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 13);
LABEL_293:
    if (!v406)
      break;
LABEL_531:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_532:
    v333 = "can't allocate enough memory for tracking function's local initialization";
  }
  v200 = p_dst;
  v201 = (unint64_t)p_dst[1];
  if ((v201 & 0x8000000000000000) != 0)
  {
    v322 = __clz(__rbit64(v201));
    v202 = 63;
    if (v322 >= 0x3F)
      v206 = 63;
    else
      v206 = v322;
    goto LABEL_300;
  }
  v202 = *(_QWORD *)(2 * v201);
  if ((unint64_t)(v202 + 63) >= 0x40)
  {
    v203 = *(_QWORD *)(2 * v201 + 8);
    if (v203)
    {
      v204 = __clz(__rbit64(v203));
      if (v204 < 0x40)
      {
        v205 = 0;
        goto LABEL_299;
      }
    }
    if ((unint64_t)(v202 + 63) >> 6 != 1)
    {
      v320 = 0;
      while (1)
      {
        v321 = *(_QWORD *)(2 * v201 + 0x10 + 8 * v320);
        if (v321)
        {
          v204 = __clz(__rbit64(v321));
          if (v204 <= 0x3F)
            break;
        }
        if (((unint64_t)(v202 + 63) >> 6) - 1 == ++v320)
          goto LABEL_301;
      }
      v205 = v320 + 1;
LABEL_299:
      v206 = v204 + (v205 << 6);
LABEL_300:
      while (v206 != v202)
      {
        LODWORD(v430) = *(_DWORD *)v200 + *(_DWORD *)(*(_QWORD *)(v12 + 16) + 36);
        v449[0] = v206;
        v212 = *(_QWORD *)(v12 + 432);
        if (!v212)
          goto LABEL_312;
        v213 = *(_DWORD *)(v212 - 8);
        v214 = 9 * ((~((_DWORD)v206 << 15) + v206) ^ ((~((_DWORD)v206 << 15) + v206) >> 10));
        v215 = (v214 ^ (v214 >> 6)) + ~((v214 ^ (v214 >> 6)) << 11);
        v216 = v213 & (v215 ^ HIWORD(v215));
        v217 = *(_DWORD *)(v212 + 16 * v216);
        if (v217 != (_DWORD)v206)
        {
          v218 = 1;
          while (v217 != -1)
          {
            v216 = ((_DWORD)v216 + v218) & v213;
            v217 = *(_DWORD *)(v212 + 16 * v216);
            ++v218;
            if (v217 == (_DWORD)v206)
              goto LABEL_311;
          }
          v216 = *(unsigned int *)(v212 - 4);
        }
LABEL_311:
        if (v216 != *(_DWORD *)(v212 - 4))
        {
          v226 = (WTF::StringImpl *)(v212 + 16 * v216);
        }
        else
        {
LABEL_312:
          __dst = 0;
          WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>((uint64_t *)(v12 + 432), v449, (uint64_t *)&__dst, v26, (uint64_t)v27, v28, v29, v30, (uint64_t)&v407);
          v226 = v407;
          if (__dst)
            WTF::fastFree((unint64_t)__dst - 16, v219, v220, v221, v222, v223, v224, v225);
        }
        WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::add((uint64_t *)v226 + 1, (int *)&v430, (uint64_t)&v407);
        v227 = v206 + 1;
        v228 = (unint64_t)v200[1];
        if ((v228 & 0x8000000000000000) != 0)
        {
          v236 = __clz(__rbit64(v228 >> v227)) + v227;
          if (v236 >= 0x3F)
            v206 = 63;
          else
            v206 = v236;
          continue;
        }
        v229 = 2 * v228;
        v206 = *(_QWORD *)(2 * v228);
        v230 = v206 + 63;
        v231 = v227 >> 6;
        if (v227 >> 6 < (unint64_t)(v206 + 63) >> 6)
        {
          v232 = *(_QWORD *)(v229 + 8 * v231 + 8);
          if (!v232 || (v233 = __clz(__rbit64(v232 >> v227)) + (v227 & 0x3F), v233 >= 0x40))
          {
            if (v231 + 1 == v230 >> 6)
              continue;
            v234 = v229 + 16;
            while (1)
            {
              v235 = *(_QWORD *)(v234 + 8 * v231);
              if (v235)
              {
                v233 = __clz(__rbit64(v235));
                if (v233 <= 0x3F)
                  break;
              }
              if ((v230 >> 6) - 1 == ++v231)
                goto LABEL_320;
            }
            ++v231;
          }
          v206 = v233 + (v231 << 6);
        }
LABEL_320:
        ;
      }
    }
  }
LABEL_301:
  v122 = v404;
  v123 = v403;
  if (*((_BYTE *)v200 + 4))
  {
    v207 = *(_QWORD *)(v12 + 16);
    v208 = (*(_DWORD *)v200 + *(_DWORD *)(v207 + 36));
    v209 = *(_QWORD *)(v207 + 328);
    v210 = (_QWORD *)(2 * v209);
    v211 = v209 < 0 ? 63 : *v210;
    if (v211 > v208)
    {
      v237 = (_QWORD *)(v207 + 328);
      v238 = 1 << (*(_BYTE *)v200 + *(_BYTE *)(v207 + 36));
      v239 = v210 + 1;
      if (v209 >= 0)
        v240 = v239;
      else
        v240 = v237;
      v241 = (_QWORD *)((char *)v240 + ((v208 >> 3) & 0x1FFFFFF8));
      while (1)
      {
        v242 = *v241;
        if ((*v241 & v238) != 0)
          break;
        v243 = __ldxr(v241);
        if (v243 == v242)
        {
          if (!__stxr(v242 | v238, v241))
            break;
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  v244 = __ldxr(v198);
  if (v244 != 1)
  {
    __clrex();
    goto LABEL_347;
  }
  if (__stlxr(0, v198))
LABEL_347:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v12 + 13), 0, v25, v26, (uint64_t)v27, v28, v29, v30);
  if (v406)
    goto LABEL_531;
LABEL_349:
  if (*(_DWORD *)(v12 + 380) <= v122)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDAABCLL);
  }
  v245 = *(_QWORD *)(v12 + 368);
  v246 = p_dst;
  p_dst = 0;
  v247 = *(JSC::Wasm::FunctionIPIntMetadataGenerator **)(v245 + 8 * v123);
  *(_QWORD *)(v245 + 8 * v123) = v246;
  if (v247)
  {
    JSC::Wasm::FunctionIPIntMetadataGenerator::~FunctionIPIntMetadataGenerator(v247, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
    WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
  }
  v256 = *(_QWORD *)(v12 + 384);
  if (v256)
  {
    v257 = *(_QWORD **)(v256 + 8 * v123);
    goto LABEL_413;
  }
  if (*(_DWORD *)(v12 + 380) <= v122)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDAAD4);
  }
  v258 = (v402 + v122);
  v259 = *(_DWORD **)(*(_QWORD *)(v12 + 368) + 8 * v123);
  v260 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 248);
  if (*(_DWORD *)(v260 + 52) > v258)
    v261 = (WTF::StringImpl *)(*(_QWORD *)(v260 + 40) + 16 * v258);
  else
    v261 = 0;
  do
    v262 = __ldaxr((unsigned int *)v260);
  while (__stlxr(v262 + 1, (unsigned int *)v260));
  v407 = v261;
  v408 = (unsigned int *)v260;
  v257 = (_QWORD *)WTF::fastMalloc((WTF *)0xD0);
  JSC::Wasm::IPIntCallee::IPIntCallee((uint64_t)v257, v259, v258, (unint64_t *)&v407, v263, v264, v265, v266);
  v274 = v408;
  v408 = 0;
  if (v274)
  {
    do
    {
      v275 = __ldaxr(v274);
      v276 = v275 - 1;
    }
    while (__stlxr(v276, v274));
    if (!v276)
    {
      atomic_store(1u, v274);
      __dst = v274;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&__dst, v267, v268, v269, v270, v271, v272, v273);
    }
  }
  if (BYTE1(dword_1ECF4C240))
  {
    if (!HIBYTE(dword_1ECF4C7B0))
      goto LABEL_367;
    if (!HIBYTE(word_1ECF4C79E))
    {
      v277 = *(_QWORD *)(v12 + 16);
      if (*(_DWORD *)(v277 + 132) <= v122)
      {
        __break(0xC471u);
        JUMPOUT(0x198CDAAECLL);
      }
      if ((*(_BYTE *)(*(_QWORD *)(v277 + 120) + 40 * v123 + 32) & 1) == 0)
      {
LABEL_367:
        v278 = atomic_load(&JSC::LLInt::inPlaceInterpreterEntryThunk(void)::onceKey);
        if (v278 != -1)
        {
          v407 = (WTF::StringImpl *)&v430;
          __dst = &v407;
          std::__call_once(&JSC::LLInt::inPlaceInterpreterEntryThunk(void)::onceKey, &__dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::inPlaceInterpreterEntryThunk(void)::$_0 &&>>);
        }
        v279 = JSC::LLInt::inPlaceInterpreterEntryThunk(void)::codeRef;
        v280 = (unsigned int *)JSC::LLInt::inPlaceInterpreterEntryThunk(void)::codeRef;
        if (JSC::LLInt::inPlaceInterpreterEntryThunk(void)::codeRef)
        {
          do
            v281 = __ldaxr(v280);
          while (__stlxr(v281 + 1, v280));
        }
        v257[9] = v279;
        __dst = v257;
        if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
        {
          goto LABEL_390;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
LABEL_390:
        WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::add(&qword_1ECF53D80, (uint64_t *)&__dst, v268, v269, v270, v271, v272, v273, (uint64_t)&v407);
        v296 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
        if (v296 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
          {
LABEL_395:
            if (v280)
            {
              do
              {
                v297 = __ldaxr(v280);
                v298 = --v297 == 0;
              }
              while (__stlxr(v297, v280));
              goto LABEL_407;
            }
            goto LABEL_409;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v288, v289, v290, v291, v292, v293);
        goto LABEL_395;
      }
    }
    v284 = atomic_load(&JSC::LLInt::inPlaceInterpreterEntryThunkSIMD(void)::onceKey);
    if (v284 != -1)
    {
      v407 = (WTF::StringImpl *)&v430;
      __dst = &v407;
      std::__call_once(&JSC::LLInt::inPlaceInterpreterEntryThunkSIMD(void)::onceKey, &__dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::inPlaceInterpreterEntryThunkSIMD(void)::$_0 &&>>);
    }
    v285 = JSC::LLInt::inPlaceInterpreterEntryThunkSIMD(void)::codeRef;
    v280 = (unsigned int *)JSC::LLInt::inPlaceInterpreterEntryThunkSIMD(void)::codeRef;
    if (JSC::LLInt::inPlaceInterpreterEntryThunkSIMD(void)::codeRef)
    {
      do
        v286 = __ldaxr(v280);
      while (__stlxr(v286 + 1, v280));
    }
    v257[9] = v285;
    __dst = v257;
    if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
    {
      goto LABEL_400;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
LABEL_400:
    WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::add(&qword_1ECF53D80, (uint64_t *)&__dst, v268, v269, v270, v271, v272, v273, (uint64_t)&v407);
    v299 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
    if (v299 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
      {
LABEL_405:
        if (v280)
        {
          do
          {
            v300 = __ldaxr(v280);
            v298 = --v300 == 0;
          }
          while (__stlxr(v300, v280));
LABEL_407:
          if (v298)
          {
            atomic_store(1u, v280);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v280, v295, v288, v289, v290, v291, v292, v293);
            WTF::fastFree(v353, v354, v355, v356, v357, v358, v359, v360);
          }
          goto LABEL_409;
        }
        goto LABEL_409;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v288, v289, v290, v291, v292, v293);
    goto LABEL_405;
  }
  v257[9] = qword_1ECF53318;
  __dst = v257;
  if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
  {
    __clrex();
LABEL_382:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
    goto LABEL_383;
  }
  if (__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
    goto LABEL_382;
LABEL_383:
  WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::add(&qword_1ECF53D80, (uint64_t *)&__dst, v268, v269, v270, v271, v272, v273, (uint64_t)&v407);
  v294 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
  if (v294 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
      goto LABEL_409;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v288, v289, v290, v291, v292, v293);
LABEL_409:
  if (*(_DWORD *)(v12 + 404) <= v122)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDAADCLL);
  }
  v301 = *(_QWORD *)(v12 + 392);
  v302 = *(_QWORD *)(v301 + 8 * v123);
  *(_QWORD *)(v301 + 8 * v123) = v257;
  if (v302)
  {
    do
    {
      v303 = __ldaxr((unsigned int *)v302);
      v304 = v303 - 1;
    }
    while (__stlxr(v304, (unsigned int *)v302));
    if (!v304)
    {
      atomic_store(1u, (unsigned int *)v302);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v302, v288, v289, v290, v291, v292, v293);
      if (*(_BYTE *)(v302 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v302, v346, v347, v348, v349, v350, v351, v352);
    }
  }
LABEL_413:
  if (*(_BYTE *)(v12 + 355) == 1)
    goto LABEL_414;
  v305 = *(_QWORD *)(v12 + 128);
  if (!v305)
    goto LABEL_414;
  v306 = *(_DWORD *)(v305 - 8);
  v307 = 9 * ((~((_DWORD)v122 << 15) + v122) ^ ((~((_DWORD)v122 << 15) + v122) >> 10));
  v308 = v306 & (((v307 ^ (v307 >> 6)) + ~((v307 ^ (v307 >> 6)) << 11)) ^ (((v307 ^ (v307 >> 6))
                                                                          + ~((v307 ^ (v307 >> 6)) << 11)) >> 16));
  v309 = *(_DWORD *)(v305 + 4 * v308);
  if (v309 == (_DWORD)v122)
  {
LABEL_422:
    if (JSC::Wasm::IPIntPlan::ensureEntrypoint((JSC::Wasm::IPIntPlan *)v12, (JSC::Wasm::IPIntCallee *)v257, v122))
      goto LABEL_414;
    v311 = (unsigned __int8 *)(v12 + 13);
    if (__ldaxr((unsigned __int8 *)(v12 + 13)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v311))
    {
LABEL_427:
      v407 = (WTF::StringImpl *)"JIT is disabled, but the entrypoint for ";
      LODWORD(v408) = 40;
      v449[0] = v122;
      __dst = " requires JIT";
      LODWORD(v439) = 13;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v407, (unsigned int *)v449, (uint64_t)&__dst, (int **)&v430);
      v314 = v430;
      if (!v430)
      {
        __break(0xC471u);
        JUMPOUT(0x198CDAAFCLL);
      }
      v315 = *(_QWORD *)(v12 + 56);
      v430 = 0;
      if (v315
        || (*(_QWORD *)(v12 + 56) = v314,
            *(_BYTE *)(v12 + 64) = 0,
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12),
            v314 = v430,
            v430 = 0,
            v314))
      {
        if (*(_DWORD *)v314 == 2)
        {
          WTF::StringImpl::~StringImpl(v314, v313, v25, v26, (uint64_t)v27, v28, v29, v30);
          WTF::fastFree(v323, v324, v325, v326, v327, v328, v329, v330);
        }
        else
        {
          *(_DWORD *)v314 -= 2;
        }
      }
LABEL_432:
      v316 = __ldxr(v311);
      if (v316 == 1)
      {
        if (!__stlxr(0, v311))
          goto LABEL_414;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v311, 0, v25, v26, (uint64_t)v27, v28, v29, v30);
      goto LABEL_414;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 13);
    goto LABEL_427;
  }
  v310 = 1;
  while (v309 != -1)
  {
    v308 = (v308 + v310) & v306;
    v309 = *(_DWORD *)(v305 + 4 * v308);
    ++v310;
    if (v309 == (_DWORD)v122)
      goto LABEL_422;
  }
LABEL_414:
  if (v406 != -1)
    ((void (*)(WTF::StringImpl **, void ***))off_1E35B5A40[v406])(&v407, &p_dst);
}

BOOL JSC::Wasm::IPIntPlan::ensureEntrypoint(JSC::Wasm::IPIntPlan *this, JSC::Wasm::IPIntCallee *a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v9;
  JSC::Wasm::TypeDefinition *v10;
  unint64_t v11;
  pthread_key_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  pthread_key_t *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  unsigned int v36;
  JSC::Wasm::Callee *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *p_start;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  WTF::StringImpl **v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  JSC::Compilation *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  JSC::Wasm::InternalFunction *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  char v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int *v157;
  WTF *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t CachedUnrolling;
  uint64_t v167;
  uint64_t v168;
  const JSC::Wasm::Type *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  const JSC::Wasm::TypeDefinition *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  JSC::Wasm::InternalFunction *v189;
  WTF *v190;
  WTF **v191;
  size_t len;
  uint64_t v193;
  WTF *v194;
  _BYTE v195[128];
  unsigned int v196;
  char v197;
  int v198;
  unsigned int v199;
  __int128 start;
  __int128 v201;
  uint64_t v202;
  _BYTE v203[32];
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  WTF *v207;
  _BYTE v208[128];
  unsigned int v209;
  int v210;
  int v211;
  char v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  _BYTE *v216;
  char v217;
  uint64_t v218;
  int v219;
  _BYTE *v220;
  char v221;
  uint64_t v222;
  int v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  WTF::StringImpl **v227;
  unsigned int *v228;
  __int128 v229;
  _BYTE v230[128];
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 105) <= a3)
  {
    __break(0xC471u);
    goto LABEL_110;
  }
  v5 = a3;
  if (*(_QWORD *)(*((_QWORD *)this + 51) + 8 * a3))
    return 1;
  if (!BYTE1(dword_1ECF4C240))
    return 0;
  v7 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v7 + 52) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDB348);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * a3);
  v10 = (JSC::Wasm::TypeDefinition *)v9;
  if (*(_DWORD *)(v9 + 32) == 4)
  {
    v157 = *(unsigned int **)(v9 + 8);
    v158 = *(WTF **)v157;
    v10 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v157 + 8) + 8 * v157[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v10))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v9, v159, v160, v161, v162, v163, v164, v165);
      if (v173)
      {
        v10 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v10 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v10, v158, v167, v168, v169, v170, v171, v172);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v9, v10, v174, v175, v176, v177, v178, v179);
      }
    }
  }
  if (*((_DWORD *)v10 + 8) == 5)
    v10 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v10 + 1);
  v203[0] = 0;
  v203[24] = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0x8000000080000000;
  v207 = (WTF *)v208;
  v209 = 128;
  v11 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v11 != -1)
  {
    v191 = &v190;
    v227 = (WTF::StringImpl **)&v191;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v227, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v12 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v20 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v20)
  {
    v20 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v20, v12);
  }
  v21 = *(WTF **)v20;
  if (*(_QWORD *)v20 != v20 + 8)
  {
    v22 = *(_DWORD *)(v20 + 136);
    if (v209 < v22)
    {
      if (v207 && v207 != (WTF *)v208)
      {
        WTF::fastFree((unint64_t)v207, v13, v14, v15, v16, v17, v18, v19);
        v21 = *(WTF **)v20;
        v22 = *(_DWORD *)(v20 + 136);
      }
      v207 = v21;
      v209 = v22;
      *(_QWORD *)v20 = v20 + 8;
      *(_DWORD *)(v20 + 136) = 128;
    }
  }
  v212 = 1;
  v210 = 0;
  v211 = 0;
  v213 = 0u;
  v214 = 0u;
  v215 = 0u;
  v216 = v203;
  v217 = 16;
  v218 = 0;
  v219 = 0x10000;
  v220 = v203;
  v221 = 17;
  v222 = 0;
  v223 = 0x20000;
  v224 = 0;
  v226 = 0;
  v225 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  v24 = JSC::NativeCallee::NativeCallee(v23, 1, 1);
  *(_BYTE *)(v24 + 6) = 6;
  *(_QWORD *)(v24 + 8) = 0x4000000000000000;
  *(_QWORD *)(v24 + 16) = 0;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  if (*((_DWORD *)this + 37) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDB350);
  }
  JSC::Wasm::createJSToWasmWrapper((uint64_t)v203, v23, (uint64_t)a2, (unsigned __int8 **)v10, *((_QWORD *)this + 17) + 16 * v5, *((_QWORD *)this + 2), 0, a3, (uint64_t *)&v189);
  v191 = 0;
  len = 0;
  v193 = 0;
  v194 = (WTF *)v195;
  v196 = 128;
  v25 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v25 != -1)
  {
    v227 = &v188;
    v190 = (WTF *)&v227;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v190, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v26 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v34 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v34)
  {
    v34 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v34, v26);
  }
  v35 = *(WTF **)v34;
  if (*(_QWORD *)v34 != v34 + 8)
  {
    v36 = *(_DWORD *)(v34 + 136);
    if (v196 < v36)
    {
      if (v194 && v194 != (WTF *)v195)
      {
        WTF::fastFree((unint64_t)v194, v27, v28, v29, v30, v31, v32, v33);
        v35 = *(WTF **)v34;
        v36 = *(_DWORD *)(v34 + 136);
      }
      v194 = v35;
      v196 = v36;
      *(_QWORD *)v34 = v34 + 8;
      *(_DWORD *)(v34 + 136) = 128;
    }
  }
  v197 = 1;
  v198 = 0;
  v199 = 12;
  start = 0u;
  v201 = 0u;
  v202 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v191, (uint64_t)v203, 0, v29, v30, v31, v32, v33);
  v6 = (_BYTE)v198 != 0;
  if ((_BYTE)v198)
  {
    if (byte_1ECF4C288)
    {
      v120 = 1;
    }
    else
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        if (DWORD1(v201))
        {
          v44 = (uint64_t *)*((_QWORD *)&start + 1);
          v45 = 8 * DWORD1(v201);
          do
          {
            v46 = *v44++;
            (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v46 + 16))(v46, &v191);
            v45 -= 8;
          }
          while (v45);
        }
        p_start = &start;
        if (HIDWORD(v202))
        {
          v107 = (uint64_t *)*((_QWORD *)&v201 + 1);
          v108 = 8 * HIDWORD(v202);
          do
          {
            v109 = *v107++;
            (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v109 + 16))(v109, &v191);
            v108 -= 8;
          }
          while (v108);
        }
        v48 = v199;
        v49 = len;
        *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v199 / 2] += len;
        ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v48);
        sys_icache_invalidate((void *)start, v49);
        v57 = (unsigned int *)v191;
        if (v191)
        {
          do
            v156 = __ldaxr(v57);
          while (__stlxr(v156 + 1, v57));
          p_start = (__int128 *)(v57 + 2);
        }
        v58 = *(WTF::StringImpl ***)p_start;
        v227 = *(WTF::StringImpl ***)p_start;
        v228 = v57;
        if (byte_1ECF4C2A2)
        {
          JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v191, (uint64_t)&v227, 0, 0);
          if (v57)
          {
            do
LABEL_40:
              v59 = __ldaxr(v57);
            while (__stlxr(v59 + 1, v57));
            v60 = v228;
            v228 = 0;
            if (v60)
            {
              do
              {
                v61 = __ldaxr(v60);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, v60));
              if (!v62)
              {
                atomic_store(1u, v60);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v60, v50, v51, v52, v53, v54, v55, v56);
                WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
              }
            }
          }
        }
        else if (v57)
        {
          goto LABEL_40;
        }
        v63 = 0;
LABEL_46:
        v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        v72 = v64;
        *v64 = v58;
        if (v57)
        {
          do
            v73 = __ldaxr(v57);
          while (__stlxr(v73 + 1, v57));
          v64[1] = v57;
          v64[2] = 0;
          do
          {
            v74 = __ldaxr(v57);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v57));
          if (!v75)
          {
            atomic_store(1u, v57);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v57, (uint64_t)v65, v66, v67, v68, v69, v70, v71);
            WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
          }
        }
        else
        {
          v64[1] = 0;
          v64[2] = 0;
        }
        v76 = (JSC::Compilation *)*((_QWORD *)v189 + 6);
        *((_QWORD *)v189 + 6) = v72;
        if (v76)
        {
          JSC::Compilation::~Compilation(v76, v65, v66, v67, v68, v69, v70, v71);
          WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
        }
        if (v63)
        {
          v85 = v190;
          v190 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 1)
              WTF::fastFree((unint64_t)v85, v65, v66, v67, v68, v69, v70, v71);
            else
              --*(_DWORD *)v85;
          }
          v86 = v188;
          v188 = 0;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
            {
              WTF::StringImpl::~StringImpl(v86, (WTF::AtomStringImpl *)v65, v66, v67, v68, v69, v70, v71);
              WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
            }
            else
            {
              *(_DWORD *)v86 -= 2;
            }
          }
        }
        JSC::Wasm::JSEntrypointJITCallee::setEntrypoint((_QWORD *)v23, (uint64_t *)v189 + 6, v66, v67, v68, v69, v70, v71);
        if (*((_DWORD *)this + 105) > a3)
        {
          v87 = *((_QWORD *)this + 51);
          v88 = *(_QWORD *)(v87 + 8 * v5);
          *(_QWORD *)(v87 + 8 * v5) = v23;
          if (v88)
          {
            do
              v89 = __ldaxr((unsigned int *)v88);
            while (__stlxr(v89 - 1, (unsigned int *)v88));
            if (v89 == 1)
            {
              atomic_store(1u, (unsigned int *)v88);
              JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v88, v38, v39, v40, v41, v42, v43);
              if (*(_BYTE *)(v88 + 4) == 1)
                JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v88, v37, v38, v39, v40, v41, v42, v43);
            }
          }
          v23 = 0;
          goto LABEL_66;
        }
        __break(0xC471u);
LABEL_110:
        JUMPOUT(0x198CDB340);
      }
      v120 = HIBYTE(word_1ECF4C286) != 0;
    }
    v227 = (WTF::StringImpl **)off_1E3572250;
    v228 = (unsigned int *)v230;
    v229 = xmmword_199122F80;
    v230[0] = 0;
    JSC::Wasm::TypeDefinition::dump(v10, (WTF::PrintStream *)&v227);
    ((void (*)(WTF::StringImpl ***))v227[5])(&v227);
    v136 = (unint64_t)v228;
    if (v228)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v228, v229, (uint64_t *)&v188);
      v136 = (unint64_t)v228;
      if (v228 == (unsigned int *)v230)
      {
LABEL_93:
        WTF::String::ascii((WTF::String *)&v188, (int8x16_t **)&v190);
        JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v191, v120, 0, 0, "JS->WebAssembly entrypoint[%i] %s", (WTF **)&v227, a3);
        v58 = v227;
        v57 = v228;
        if (v228)
        {
          do
            v152 = __ldaxr(v57);
          while (__stlxr(v152 + 1, v57));
          v153 = v228;
          v228 = 0;
          if (v153)
          {
            do
            {
              v154 = __ldaxr(v153);
              v155 = v154 - 1;
            }
            while (__stlxr(v155, v153));
            if (!v155)
            {
              atomic_store(1u, v153);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v153, v145, v146, v147, v148, v149, v150, v151);
              WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
            }
          }
        }
        v63 = 1;
        goto LABEL_46;
      }
    }
    else
    {
      v188 = 0;
    }
    WTF::fastFree(v136, v129, v130, v131, v132, v133, v134, v135);
    goto LABEL_93;
  }
LABEL_66:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v191, v37, v38, v39, v40, v41, v42, v43);
  v97 = v189;
  v189 = 0;
  if (v97)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v97, v90, v91, v92, v93, v94, v95, v96);
    WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
  }
  if (v23)
  {
    do
    {
      v118 = __ldaxr((unsigned int *)v23);
      v119 = v118 - 1;
    }
    while (__stlxr(v119, (unsigned int *)v23));
    if (!v119)
    {
      atomic_store(1u, (unsigned int *)v23);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v23, v91, v92, v93, v94, v95, v96);
      if (*(_BYTE *)(v23 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v23, (JSC::Wasm::Callee *)v90, v91, v92, v93, v94, v95, v96);
    }
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v203, v90, v91, v92, v93, v94, v95, v96);
  return v6;
}

void JSC::Wasm::IPIntPlan::didCompleteCompilation(JSC::Wasm::IPIntPlan *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  WTF *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  unint64_t v61;
  const char *v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int *v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  WTF *v92;
  int v93;
  _DWORD *v94;
  WTF *v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _BOOL4 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  JSC::ExecutableAllocator *v126;
  WTF::AtomStringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  WTF::StringImpl *v149;
  unsigned int v150;
  unsigned int v151;
  const char *v152;
  WTF *v153;
  uint64_t v154;
  _BYTE v155[64];
  const char **v156;
  int v157;
  char v158;

  JSC::Wasm::EntryPlan::generateStubsIfNecessary(this, a2, a3, a4, a5, a6, a7, a8);
  if (*((_QWORD *)this + 48))
    v16 = 1;
  else
    v16 = *((_DWORD *)this + 95) == 0;
  if (v16)
    goto LABEL_128;
  *((_QWORD *)this + 48) = *((_QWORD *)this + 49);
  v17 = *((_QWORD *)this + 2);
  v18 = *(_QWORD *)(v17 + 328);
  if ((v18 & 0x8000000000000000) != 0)
  {
    if ((v18 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_128;
    v152 = 0;
    v153 = (WTF *)v155;
    v154 = 16;
    v148 = __clz(__rbit64(v18));
    v22 = 63;
    if (v148 >= 0x3F)
      v27 = 63;
    else
      v27 = v148;
    goto LABEL_14;
  }
  v19 = (uint64_t *)(2 * v18);
  v20 = ((unint64_t)(*(_QWORD *)(2 * v18) + 63) >> 6);
  do
  {
    if (!(v20 * 8))
      goto LABEL_128;
  }
  while (!v19[v20--]);
  v152 = 0;
  v153 = (WTF *)v155;
  v154 = 16;
  v22 = *v19;
  v23 = *v19 + 63;
  if (v23 < 0x40)
    goto LABEL_121;
  v24 = v19[1];
  if (v24)
  {
    v25 = __clz(__rbit64(v24));
    if (v25 < 0x40)
    {
      v26 = 0;
LABEL_13:
      v27 = v25 + (v26 << 6);
LABEL_14:
      if (v27 == v22)
        goto LABEL_121;
      while (1)
      {
        LODWORD(v149) = v27;
        WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::add((uint64_t *)&v152, (int *)&v149, (uint64_t)&v156);
        if (v158)
        {
          v28 = HIDWORD(v154);
          if (HIDWORD(v154) == (_DWORD)v154)
          {
            v29 = WTF::Vector<unsigned int,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v153, HIDWORD(v154) + 1, (unint64_t)&v149);
            v28 = HIDWORD(v154);
            v30 = v153;
            v31 = *(_DWORD *)v29;
          }
          else
          {
            v30 = v153;
            v31 = (int)v149;
          }
          *((_DWORD *)v30 + v28) = v31;
          ++HIDWORD(v154);
        }
        v32 = v27 + 1;
        v33 = *(_QWORD *)(v17 + 328);
        if ((v33 & 0x8000000000000000) != 0)
        {
          v41 = __clz(__rbit64(v33 >> v32)) + v32;
          if (v41 >= 0x3F)
            v27 = 63;
          else
            v27 = v41;
          goto LABEL_25;
        }
        v34 = 2 * v33;
        v27 = *(_QWORD *)(2 * v33);
        v35 = v27 + 63;
        v36 = v32 >> 6;
        if (v32 >> 6 < (unint64_t)(v27 + 63) >> 6)
        {
          v37 = *(_QWORD *)(v34 + 8 * v36 + 8);
          if (!v37 || (v38 = __clz(__rbit64(v37 >> v32)) + (v32 & 0x3F), v38 >= 0x40))
          {
            if (v36 + 1 == v35 >> 6)
              goto LABEL_25;
            v39 = v34 + 16;
            while (1)
            {
              v40 = *(_QWORD *)(v39 + 8 * v36);
              if (v40)
              {
                v38 = __clz(__rbit64(v40));
                if (v38 <= 0x3F)
                  break;
              }
              if ((v35 >> 6) - 1 == ++v36)
                goto LABEL_25;
            }
            ++v36;
          }
          v27 = v38 + (v36 << 6);
        }
LABEL_25:
        if (v27 == v22)
        {
          v42 = HIDWORD(v154);
          if (!HIDWORD(v154))
            goto LABEL_121;
          if (!*((_QWORD *)this + 54))
          {
            HIDWORD(v154) = 0;
            goto LABEL_121;
          }
          while (2)
          {
            v43 = *((_DWORD *)v153 + --v42);
            HIDWORD(v154) = v42;
            v44 = *((_QWORD *)this + 54);
            if (!v44)
              goto LABEL_60;
            v45 = *(_DWORD *)(v44 - 8);
            v46 = 9 * ((v43 + ~(v43 << 15)) ^ ((v43 + ~(v43 << 15)) >> 10));
            v47 = (v46 ^ (v46 >> 6)) + ~((v46 ^ (v46 >> 6)) << 11);
            v48 = v45 & (v47 ^ HIWORD(v47));
            v49 = *(_DWORD *)(v44 + 16 * v48);
            if (v49 != v43)
            {
              v50 = 1;
              while (v49 != -1)
              {
                v48 = ((_DWORD)v48 + v50) & v45;
                v49 = *(_DWORD *)(v44 + 16 * v48);
                ++v50;
                if (v49 == v43)
                  goto LABEL_46;
              }
              v48 = *(unsigned int *)(v44 - 4);
            }
LABEL_46:
            if (v48 == *(_DWORD *)(v44 - 4))
              goto LABEL_60;
            v51 = *(_DWORD **)(v44 + 16 * v48 + 8);
            if (v51)
            {
              v52 = *(v51 - 1);
              v53 = &v51[v52];
              if (*(v51 - 3))
              {
                v54 = v51;
                if ((_DWORD)v52)
                {
                  v55 = 4 * v52;
                  v54 = v51;
                  do
                  {
                    if (*v54 < 0xFFFFFFFE)
                      goto LABEL_57;
                    ++v54;
                    v55 -= 4;
                  }
                  while (v55);
                  v54 = v53;
                }
LABEL_57:
                if (v51)
                  v56 = &v51[*(v51 - 1)];
                else
                  v56 = 0;
                if (v56 == v54)
                {
LABEL_60:
                  if (!v42)
                    goto LABEL_121;
                  continue;
                }
LABEL_70:
                v61 = *v54;
                v62 = v152;
                if (v152)
                {
                  v63 = *((_DWORD *)v152 - 2);
                  v64 = 9 * ((v61 + ~((_DWORD)v61 << 15)) ^ ((v61 + ~((_DWORD)v61 << 15)) >> 10));
                  v65 = v63 & (((v64 ^ (v64 >> 6)) + ~((v64 ^ (v64 >> 6)) << 11)) ^ (((v64 ^ (v64 >> 6))
                                                                                    + ~((v64 ^ (v64 >> 6)) << 11)) >> 16));
                  v66 = *(_DWORD *)&v152[4 * v65];
                  if (v66 != (_DWORD)v61)
                  {
                    v67 = 1;
                    while (v66 != -1)
                    {
                      v65 = (v65 + v67) & v63;
                      v66 = *(_DWORD *)&v152[4 * v65];
                      ++v67;
                      if (v66 == (_DWORD)v61)
                        goto LABEL_111;
                    }
                    goto LABEL_76;
                  }
LABEL_111:
                  v94 = v54 + 1;
                  v54 = v53;
                  if (v94 != v53)
                  {
                    v54 = v94;
                    while (*v54 >= 0xFFFFFFFE)
                    {
                      if (++v54 == v53)
                      {
                        v54 = v53;
                        break;
                      }
                    }
                  }
                  if (v54 == v56)
                  {
                    v42 = HIDWORD(v154);
                    if (!HIDWORD(v154))
                      goto LABEL_121;
                    continue;
                  }
                  goto LABEL_70;
                }
LABEL_76:
                v68 = *((_QWORD *)this + 2);
                v69 = *(_QWORD *)(v68 + 328);
                v70 = (unint64_t *)(2 * v69);
                if (v69 < 0)
                  v71 = 63;
                else
                  v71 = *v70;
                if (v71 > v61)
                {
                  v72 = (_QWORD *)(v68 + 328);
                  v73 = 1 << v61;
                  v74 = v70 + 1;
                  if (v69 >= 0)
                    v75 = v74;
                  else
                    v75 = v72;
                  v76 = (_QWORD *)((char *)v75 + ((v61 >> 3) & 0x1FFFFFF8));
                  while (1)
                  {
                    v77 = *v76;
                    if ((*v76 & v73) != 0)
                      break;
                    v78 = __ldxr(v76);
                    if (v78 == v77)
                    {
                      if (!__stxr(v77 | v73, v76))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                  LODWORD(v61) = *v54;
                  v62 = v152;
                }
                LODWORD(v156) = v61;
                if (v62)
                  goto LABEL_92;
                v79 = WTF::fastMalloc((WTF *)0x30);
                *(_QWORD *)&v80 = -1;
                *((_QWORD *)&v80 + 1) = -1;
                *(_OWORD *)(v79 + 16) = v80;
                *(_OWORD *)(v79 + 32) = v80;
                v152 = (const char *)(v79 + 16);
                *(_DWORD *)(v79 + 12) = 8;
                *((_DWORD *)v152 - 2) = 7;
                *((_DWORD *)v152 - 4) = 0;
                *((_DWORD *)v152 - 3) = 0;
                v62 = v152;
                if (v152)
LABEL_92:
                  v60 = *((_DWORD *)v62 - 2);
                else
                  v60 = 0;
                v81 = (int)v156;
                v82 = 9
                    * (((_DWORD)v156 + ~((_DWORD)v156 << 15)) ^ (((_DWORD)v156 + ~((_DWORD)v156 << 15)) >> 10));
                v83 = (v82 ^ (v82 >> 6)) + ~((v82 ^ (v82 >> 6)) << 11);
                v84 = (v83 ^ HIWORD(v83)) & v60;
                v10 = (int *)&v62[4 * v84];
                v85 = *v10;
                if (*v10 != -1)
                {
                  v86 = 0;
                  v87 = 1;
                  while (v85 != (_DWORD)v156)
                  {
                    if (v85 == -2)
                      v86 = v10;
                    v84 = (v84 + v87) & v60;
                    v10 = (int *)&v62[4 * v84];
                    v85 = *v10;
                    ++v87;
                    if (*v10 == -1)
                    {
                      if (v86)
                      {
                        *v86 = -1;
                        --*((_DWORD *)v152 - 4);
                        v81 = (int)v156;
                        v10 = v86;
                      }
                      goto LABEL_101;
                    }
                  }
                  goto LABEL_111;
                }
LABEL_101:
                *v10 = v81;
                if (v152)
                  v57 = *((_DWORD *)v152 - 3) + 1;
                else
                  v57 = 1;
                *((_DWORD *)v152 - 3) = v57;
                if (v152)
                  v58 = *((_DWORD *)v152 - 3);
                else
                  v58 = 0;
                v88 = (*((_DWORD *)v152 - 4) + v58);
                v89 = *((unsigned int *)v152 - 1);
                if (v89 > 0x400)
                {
                  if (v89 > 2 * v88)
                    goto LABEL_107;
                }
                else
                {
                  if (3 * v89 > 4 * v88)
                    goto LABEL_107;
                  if (!(_DWORD)v89)
                  {
                    v59 = 8;
LABEL_68:
                    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v152, v59, v10);
LABEL_107:
                    v90 = HIDWORD(v154);
                    if (HIDWORD(v154) == (_DWORD)v154)
                    {
                      v91 = WTF::Vector<unsigned int,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v153, HIDWORD(v154) + 1, (unint64_t)&v156);
                      v90 = HIDWORD(v154);
                      v92 = v153;
                      v93 = *(_DWORD *)v91;
                    }
                    else
                    {
                      v92 = v153;
                      v93 = (int)v156;
                    }
                    *((_DWORD *)v92 + v90) = v93;
                    ++HIDWORD(v154);
                    goto LABEL_111;
                  }
                }
                v59 = (_DWORD)v89 << (6 * *((_DWORD *)v152 - 3) >= (2 * v89));
                goto LABEL_68;
              }
              v54 = &v51[v52];
            }
            else
            {
              v54 = 0;
              v52 = 0;
            }
            break;
          }
          v53 = &v51[v52];
          goto LABEL_57;
        }
      }
    }
  }
  v136 = (v23 >> 6) - 1;
  if (!v136)
    goto LABEL_121;
  v137 = 0;
  v138 = v19 + 2;
  do
  {
    v139 = v138[v137];
    if (v139)
    {
      v25 = __clz(__rbit64(v139));
      if (v25 <= 0x3F)
      {
        v26 = v137 + 1;
        goto LABEL_13;
      }
    }
    ++v137;
  }
  while (v136 != v137);
LABEL_121:
  v95 = v153;
  if (v155 != (_BYTE *)v153 && v153 != 0)
  {
    v153 = 0;
    LODWORD(v154) = 0;
    WTF::fastFree((unint64_t)v95, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  }
  if (v152)
    WTF::fastFree((unint64_t)(v152 - 16), v9, (uint64_t)v10, v11, v12, v13, v14, v15);
LABEL_128:
  if (*((_BYTE *)this + 355) == 1)
    return;
  v150 = 0;
  v97 = *((_QWORD *)this + 2);
  if (!*(_DWORD *)(v97 + 132))
  {
LABEL_152:
    v114 = *((unsigned int *)this + 37);
    if ((_DWORD)v114)
    {
      v115 = *((_QWORD *)this + 17);
      v116 = v115 + 16 * v114;
      do
      {
        v117 = *(unsigned int *)(v115 + 12);
        if ((_DWORD)v117)
        {
          v118 = 32 * v117;
          v119 = *(_QWORD *)v115 + 8;
          do
          {
            v120 = *(_QWORD *)(v119 + 8);
            v121 = *(unsigned int *)(*((_QWORD *)this + 2) + 36);
            v122 = v120 >= v121;
            v123 = v120 - v121;
            if (v122)
            {
              v125 = *(_QWORD *)(*((_QWORD *)this + 48) + 8 * v123);
              v152 = 0;
              v156 = &v152;
              JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v125, (uint64_t **)&v156);
              v124 = (unint64_t)v152;
            }
            else
            {
              if (v120 >= *((unsigned int *)this + 27))
              {
                __break(0xC471u);
                JUMPOUT(0x198CDBD08);
              }
              v124 = *(_QWORD *)(*((_QWORD *)this + 12) + 16 * v120);
            }
            v126 = *(JSC::ExecutableAllocator **)(v119 - 8);
            if (*(_BYTE *)v119)
            {
              if (*(_BYTE *)v119 != 1)
                goto LABEL_188;
              JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(*(JSC::ExecutableAllocator **)(v119 - 8), *(_QWORD *)(v119 - 8), v124);
            }
            else
            {
              v126 = (JSC::ExecutableAllocator *)((char *)v126 - 4);
              JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v126, (unint64_t)v126, v124);
            }
            sys_icache_invalidate(v126, 4uLL);
            v119 += 32;
            v118 -= 32;
          }
          while (v118);
        }
        v115 += 16;
      }
      while (v115 != v116);
    }
    return;
  }
  v98 = 0;
  v99 = 0;
  while (2)
  {
    v100 = *((_DWORD *)this + 105);
    if (v100 <= v99)
    {
      __break(0xC471u);
      JUMPOUT(0x198CDBD10);
    }
    if (*(_QWORD *)(*((_QWORD *)this + 51) + 8 * v98))
      goto LABEL_148;
    v101 = *((_QWORD *)this + 16);
    if (!v101)
      goto LABEL_139;
    v102 = *(_DWORD *)(v101 - 8);
    v103 = 9 * ((v99 + ~((_DWORD)v99 << 15)) ^ ((v99 + ~((_DWORD)v99 << 15)) >> 10));
    v104 = v102 & (((v103 ^ (v103 >> 6)) + ~((v103 ^ (v103 >> 6)) << 11)) ^ (((v103 ^ (v103 >> 6))
                                                                            + ~((v103 ^ (v103 >> 6)) << 11)) >> 16));
    v105 = *(_DWORD *)(v101 + 4 * v104);
    if (v105 != (_DWORD)v99)
    {
      v106 = 1;
      while (v105 != -1)
      {
        v104 = (v104 + v106) & v102;
        v105 = *(_DWORD *)(v101 + 4 * v104);
        ++v106;
        if (v105 == (_DWORD)v99)
          goto LABEL_146;
      }
LABEL_139:
      v107 = *(_QWORD *)(v97 + 320);
      v108 = (_QWORD *)(2 * v107);
      v109 = v107 < 0 ? 63 : *v108;
      v110 = (*(_DWORD *)(v97 + 36) + v99);
      if (v109 <= v110)
        goto LABEL_148;
      v111 = (_QWORD *)(v97 + 320);
      v112 = v108 + 1;
      if (v107 >= 0)
        v111 = v112;
      if (((*(_QWORD *)((char *)v111 + ((v110 >> 3) & 0x1FFFFFF8)) >> v110) & 1) == 0)
      {
LABEL_148:
        if (v100 <= v99)
        {
          __break(0xC471u);
          JUMPOUT(0x198CDBD18);
        }
        if (*(_QWORD *)(*((_QWORD *)this + 51) + 8 * v99))
        {
          WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::add<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>&>((uint64_t *)this + 53, (int *)&v150, (unsigned int **)(*((_QWORD *)this + 51) + 8 * v99), v11, v12, v13, v14, v15, (uint64_t)&v152);
          LODWORD(v99) = v150;
        }
        v98 = (v99 + 1);
        v150 = v99 + 1;
        v97 = *((_QWORD *)this + 2);
        v99 = v98;
        if (*(_DWORD *)(v97 + 132) <= v98)
          goto LABEL_152;
        continue;
      }
    }
    break;
  }
LABEL_146:
  v113 = JSC::Wasm::IPIntPlan::ensureEntrypoint(this, *(JSC::Wasm::IPIntCallee **)(*((_QWORD *)this + 48) + 8 * v98), v99);
  LODWORD(v99) = v150;
  if (v113)
  {
    v100 = *((_DWORD *)this + 105);
    goto LABEL_148;
  }
  v152 = "JIT is disabled, but the entrypoint for ";
  LODWORD(v153) = 40;
  v151 = v150;
  v156 = (const char **)" requires JIT";
  v157 = 13;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v152, &v151, (uint64_t)&v156, (int **)&v149);
  v134 = v149;
  if (!v149)
  {
LABEL_188:
    __break(0xC471u);
    JUMPOUT(0x198CDBD00);
  }
  v135 = *((_QWORD *)this + 7);
  v149 = 0;
  if (v135
    || (*((_QWORD *)this + 7) = v134,
        *((_BYTE *)this + 64) = 0,
        (*(void (**)(JSC::Wasm::IPIntPlan *))(*(_QWORD *)this + 48))(this),
        v134 = v149,
        v149 = 0,
        v134))
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, v127, v128, v129, v130, v131, v132, v133);
      WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
}

void WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::add<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>&>(uint64_t *a1@<X0>, int *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a1, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
  v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
  v19 = (v18 ^ HIWORD(v18)) & v15;
  v20 = v13 + 16 * v19;
  v21 = *(_DWORD *)v20;
  if (*(_DWORD *)v20 != -1)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v16)
      {
        if ((v14 & 1) != 0)
          v37 = 0;
        else
          v37 = *(unsigned int *)(v13 - 4);
        v36 = 0;
        v35 = v13 + 16 * v37;
        goto LABEL_24;
      }
      if (v21 == -2)
        v22 = v20;
      v19 = (v19 + v23) & v15;
      v20 = v13 + 16 * v19;
      v21 = *(_DWORD *)v20;
      ++v23;
    }
    while (*(_DWORD *)v20 != -1);
    if (v22)
    {
      *(_DWORD *)v22 = -1;
      *(_QWORD *)(v22 + 8) = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = *a2;
      v20 = v22;
    }
  }
  *(_DWORD *)v20 = v16;
  v24 = *a3;
  if (*a3)
  {
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  v26 = *(unsigned int **)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v24;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v26, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  v29 = *a1;
  if (*a1)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v31 = *a1;
  if (*a1)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 > 2 * v33)
      goto LABEL_23;
LABEL_26:
    v20 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a1, (int *)v20);
    v31 = *a1;
    if (*a1)
      v34 = *(unsigned int *)(v31 - 4);
    else
      v34 = 0;
    goto LABEL_23;
  }
  if (3 * v34 <= 4 * v33)
    goto LABEL_26;
LABEL_23:
  v35 = v31 + 16 * v34;
  v36 = 1;
LABEL_24:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 16) = v36;
}

void JSC::Wasm::IPIntPlan::work(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 352) == 2)
    JSC::Wasm::EntryPlan::compileFunctions(a1, a2);
}

uint64_t JSC::Wasm::IPIntPlan::didReceiveFunctionData()
{
  return 1;
}

uint64_t `non-virtual thunk to'JSC::Wasm::IPIntPlan::didReceiveFunctionData()
{
  return 1;
}

void WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
  v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
  v19 = (v18 ^ HIWORD(v18)) & v15;
  v20 = v13 + 16 * v19;
  v21 = *(_DWORD *)v20;
  if (*(_DWORD *)v20 != -1)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v16)
      {
        if ((v14 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v13 - 4);
        v34 = 0;
        v35 = v13 + 16 * v28;
        goto LABEL_34;
      }
      if (v21 == -2)
        v22 = v20;
      v19 = (v19 + v23) & v15;
      v20 = v13 + 16 * v19;
      v21 = *(_DWORD *)v20;
      ++v23;
    }
    while (*(_DWORD *)v20 != -1);
    if (v22)
    {
      *(_DWORD *)v22 = -1;
      *(_QWORD *)(v22 + 8) = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = *a2;
      v20 = v22;
    }
  }
  *(_DWORD *)v20 = v16;
  v24 = *a3;
  *a3 = 0;
  v25 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v24;
  if (v25)
    WTF::fastFree(v25 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v26 = *a1;
  if (*a1)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v29 = *a1;
  if (*a1)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
      goto LABEL_25;
  }
  else if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v33 = 8;
LABEL_30:
      v20 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v33, (int *)v20);
      v29 = *a1;
      if (*a1)
        v32 = *(unsigned int *)(v29 - 4);
      else
        v32 = 0;
      goto LABEL_33;
    }
LABEL_25:
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
    goto LABEL_30;
  }
LABEL_33:
  v35 = v29 + 16 * v32;
  v34 = 1;
LABEL_34:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 16) = v34;
}

unint64_t *JSC::Wasm::IndexOrName::IndexOrName(unint64_t *a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  JSC::Wasm::NameSection *v15;

  v9 = *a3;
  if (!*a3)
    v9 = a2 | 0x8000000000000000;
  *a1 = v9;
  a1[1] = 0;
  v10 = a3[1];
  a3[1] = 0;
  v11 = (unsigned int *)a1[1];
  a1[1] = v10;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v15 = (JSC::Wasm::NameSection *)v11;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t JSC::Wasm::makeString@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  if ((*a1 & 0x4000000000000000) != 0)
  {
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)result = 0x900000002;
    *(_QWORD *)(result + 8) = "wasm-stub";
    *(_DWORD *)(result + 16) = 4;
    *a2 = result;
  }
  else
  {
    v4 = a1[1];
    v5 = *(_DWORD *)(v4 + 20);
    if (v5)
    {
      v6 = (uint64_t *)(v4 + 8);
    }
    else
    {
      v6 = (uint64_t *)(v4 + 24);
      v5 = *(_DWORD *)(v4 + 36);
    }
    v7 = *v6;
    if (v3 < 0)
      return WTF::makeString<std::span<char8_t const,18446744073709551615ul>,WTF::ASCIILiteral,unsigned long,char>(v7, v5, (uint64_t)".wasm-function[", 16, v3 & 0x7FFFFFFFFFFFFFFFLL, 93, a2);
    else
      return WTF::makeString<std::span<char8_t const,18446744073709551615ul>,WTF::ASCIILiteral,std::span<char8_t const,18446744073709551615ul>,char>(v7, v5, (uint64_t)".wasm-function[", 0x10uLL, *(const void **)v3, *(unsigned int *)(v3 + 12), 93, (int **)a2);
  }
  return result;
}

uint64_t WTF::makeString<std::span<char8_t const,18446744073709551615ul>,WTF::ASCIILiteral,unsigned long,char>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  uint64_t result;
  char v9;
  unint64_t v10;
  uint64_t v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v10 = a5;
  v9 = a6;
  result = WTF::tryMakeString<std::span<char8_t const,18446744073709551615ul>,WTF::ASCIILiteral,unsigned long,char>(a7, a1, a2, v11, &v10, &v9);
  if (!*a7)
    __break(0xC471u);
  return result;
}

uint64_t WTF::makeString<std::span<char8_t const,18446744073709551615ul>,WTF::ASCIILiteral,std::span<char8_t const,18446744073709551615ul>,char>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, const void *a5@<X4>, unint64_t a6@<X5>, __int16 a7@<W6>, int **a8@<X8>)
{
  unint64_t v10;
  char *v12;
  size_t v14;
  unsigned int v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  _BOOL4 v19;
  size_t v20;
  unsigned int v21;
  size_t i;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  int *v27;
  _BYTE *v28;
  int **v29;
  char v30;
  _DWORD *v31;
  size_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  size_t v43;
  _BOOL4 v44;
  size_t __n;
  int *v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;

  v10 = a4;
  v12 = (char *)result;
  if (a2)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    do
    {
      v48 = (int *)v16;
      result = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v12, a2, (unint64_t *)&v48);
      if ((_DWORD)result == -1)
        break;
      v16 = (unint64_t)v48;
      v18 = result < 0x10000 ? 1 : 2;
      v14 += v18;
      v15 |= result;
    }
    while ((unint64_t)v48 < a2);
    if (v16 > a2)
      goto LABEL_83;
    v19 = v15 < 0x80;
    if (v14 >> 31)
      v17 = 0;
    else
      v17 = v14;
    if (!v10)
      goto LABEL_13;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v19 = 1;
    if (!a4)
    {
LABEL_13:
      __n = 0;
      goto LABEL_14;
    }
  }
  __n = v10 - 1;
  if ((v10 - 1) >> 31)
  {
    __break(0xC471u);
    goto LABEL_87;
  }
LABEL_14:
  if (a6)
  {
    v44 = v19;
    v20 = 0;
    v21 = 0;
    v10 = 0;
    do
    {
      v48 = (int *)v10;
      result = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)a5, a6, (unint64_t *)&v48);
      if ((_DWORD)result == -1)
        break;
      v10 = (unint64_t)v48;
      v18 = result < 0x10000 ? 1 : 2;
      v20 += v18;
      v21 |= result;
    }
    while ((unint64_t)v48 < a6);
    if (a6 < v10)
      goto LABEL_83;
    LODWORD(v18) = v21 < 0x80;
    if (v20 >> 31)
      goto LABEL_84;
    v19 = v44;
  }
  else
  {
    v10 = 0;
    v20 = 0;
    LODWORD(v18) = 1;
  }
  for (i = v20; ; i = 0)
  {
    v23 = v20 + 1;
    if (__OFADD__((_DWORD)v20, 1))
      goto LABEL_86;
    v24 = __OFADD__((_DWORD)__n, v23);
    v25 = __n + v23;
    if (v24)
      goto LABEL_86;
    v26 = (v17 + v25);
    if (__OFADD__((_DWORD)v17, v25))
      goto LABEL_86;
    if ((v19 & v18) == 1)
      break;
    if (!(_DWORD)v26)
      goto LABEL_85;
    if (v26 > 0x7FFFFFEF)
      goto LABEL_86;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * v26 + 20), &v48);
    v27 = v48;
    if (!v48)
      goto LABEL_86;
    v31 = v48 + 5;
    *v48 = 2;
    v27[1] = v26;
    *((_QWORD *)v27 + 1) = v27 + 5;
    v27[4] = 0;
    v48 = 0;
    if (!v16)
      goto LABEL_59;
    v32 = 0;
    while (1)
    {
      result = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v12, v16, (unint64_t *)&v48);
      if ((_DWORD)result == -1)
        break;
      if (v32 == v17)
        goto LABEL_59;
      LODWORD(v18) = WORD1(result);
      if (WORD1(result))
      {
        if (v18 > 0x10 || v32 + 1 >= v17)
          break;
        if (v17 <= v32)
          goto LABEL_83;
        *((_WORD *)v31 + v32) = (result >> 10) - 10304;
        v18 = v32 + 2;
        ++v32;
        result = result & 0x3FF | 0xFFFFDC00;
      }
      else
      {
        if (v17 <= v32)
          goto LABEL_83;
        v18 = v32 + 1;
      }
      *((_WORD *)v31 + v32) = result;
      v32 = v18;
      if ((unint64_t)v48 >= v16)
        goto LABEL_58;
    }
    v18 = v32;
LABEL_58:
    if (v17 >= v18)
    {
LABEL_59:
      v33 = (char *)v31 + 2 * v17;
      v12 = &v33[2 * __n];
      if ((__n & 0x7FFFFFC0) != 0)
      {
        v34 = &v33[2 * (__n & 0x7FFFFFC0)];
        v35 = 0uLL;
        do
        {
          v49.val[0] = *(int8x16_t *)a3;
          v36 = *(int8x16_t *)(a3 + 16);
          v50.val[0] = *(int8x16_t *)(a3 + 32);
          v37 = *(_OWORD *)(a3 + 48);
          a3 += 64;
          v38 = v37;
          v50.val[1] = 0uLL;
          v51.val[0] = v36;
          v49.val[1] = 0uLL;
          v39 = v33;
          vst2q_s8(v39, v49);
          v39 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v39, v51);
          v40 = v33 + 64;
          vst2q_s8(v40, v50);
          v41 = v33 + 96;
          vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
          v33 += 128;
        }
        while (v33 != v34);
        v33 = v34;
      }
      while (v33 != v12)
      {
        v42 = *(unsigned __int8 *)a3++;
        *(_WORD *)v33 = v42;
        v33 += 2;
      }
      v48 = 0;
      if (!v10)
        goto LABEL_80;
      v43 = 0;
      a3 = 4294956992;
      while (1)
      {
        result = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)a5, v10, (unint64_t *)&v48);
        if ((_DWORD)result == -1)
          break;
        if (v43 == i)
          goto LABEL_80;
        LODWORD(v18) = WORD1(result);
        if (WORD1(result))
        {
          if (v18 > 0x10 || v43 + 1 >= i)
            break;
          if (i <= v43)
            goto LABEL_83;
          *(_WORD *)&v12[2 * v43] = (result >> 10) - 10304;
          v18 = v43 + 2;
          ++v43;
          result = result & 0x3FF | 0xFFFFDC00;
        }
        else
        {
          if (i <= v43)
            goto LABEL_83;
          v18 = v43 + 1;
        }
        *(_WORD *)&v12[2 * v43] = result;
        v43 = v18;
        if ((unint64_t)v48 >= v10)
          goto LABEL_79;
      }
      v18 = v43;
LABEL_79:
      if (i >= v18)
      {
LABEL_80:
        *(_WORD *)&v12[2 * i] = a7;
        goto LABEL_81;
      }
    }
LABEL_83:
    __break(1u);
LABEL_84:
    LODWORD(v20) = 0;
    v19 = v44;
  }
  if ((_DWORD)v26)
  {
    if ((v26 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v26 + 20), &v48);
      v27 = v48;
      if (v48)
      {
        *v48 = 2;
        v27[1] = v26;
        *((_QWORD *)v27 + 1) = v27 + 5;
        v27[4] = 4;
        memcpy(v27 + 5, v12, v17);
        v28 = (char *)v27 + v17 + 20;
        if ((_DWORD)__n == 1)
        {
          *v28 = *(_BYTE *)a3;
          v29 = a8;
          v30 = a7;
        }
        else
        {
          v29 = a8;
          v30 = a7;
          if ((_DWORD)__n)
            memcpy((char *)v27 + v17 + 20, (const void *)a3, __n);
        }
        result = (uint64_t)memcpy(&v28[__n], a5, i);
        v28[__n + i] = v30;
        goto LABEL_82;
      }
    }
LABEL_86:
    *a8 = 0;
    __break(0xC471u);
LABEL_87:
    JUMPOUT(0x198CDC434);
  }
LABEL_85:
  v27 = &WTF::StringImpl::s_emptyAtomString;
  WTF::StringImpl::s_emptyAtomString += 2;
LABEL_81:
  v29 = a8;
LABEL_82:
  *v29 = v27;
  return result;
}

void JSC::Wasm::Instance::Instance(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::BitVector *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  WTF::BitVector *v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  WTF::BitVector *v57;
  uint64_t v58;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_199123080;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2[1];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 96) = 0x8000000000000000;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(unsigned int *)(v10 + 220);
  if (v11 > 0x3F)
  {
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 96), v11, 0);
    *(_QWORD *)(a1 + 104) = 0x8000000000000000;
    v12 = (WTF::BitVector *)(a1 + 104);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(_QWORD *)(v9 + 8);
    v56 = *(unsigned int *)(v10 + 220);
    if (v56 >= 0x40)
    {
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 104), v56, 0);
      v9 = *(_QWORD *)(a1 + 56);
      v10 = *(_QWORD *)(v9 + 8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 104) = 0x8000000000000000;
    v12 = (WTF::BitVector *)(a1 + 104);
  }
  *(_QWORD *)(a1 + 128) = 0x8000000000000000;
  v13 = (uint64_t *)(a1 + 128);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(a1 + 120) = 0;
  v14 = *(_QWORD *)(v9 + 8);
  v15 = *(unsigned int *)(v14 + 188);
  if (v15 >= 0x40)
  {
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 128), v15, 0);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  v16 = (_QWORD *)(a1 + 136);
  v57 = (WTF::BitVector *)(a1 + 136);
  if (*(_BYTE *)(v14 + 268))
  {
    v17 = *(unsigned int *)(v14 + 264);
    *v16 = 0x8000000000000000;
    if (v17 >= 0x40)
    {
      WTF::BitVector::resizeOutOfLine(v57, v17, 0);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  else
  {
    *v16 = 0x8000000000000000;
  }
  WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Tag const,WTF::RawPtrTraits<JSC::Wasm::Tag const>,WTF::DefaultRefDerefTraits<JSC::Wasm::Tag const>>>::FixedVector((_QWORD *)(a1 + 144), *(unsigned int *)(v14 + 84) + (unint64_t)*(unsigned int *)(v14 + 68));
  if (*(_DWORD *)(a1 + 112))
  {
    v21 = 0;
    v22 = a1 + 152;
    do
    {
      *(_OWORD *)(v22 + 32) = 0u;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(_OWORD *)(v22 + 80) = 0u;
      *(_OWORD *)(v22 + 96) = 0u;
      *(_OWORD *)v22 = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
      *(_QWORD *)(v22 + 32) = &JSC::Wasm::Instance::NullWasmCallee;
      *(_QWORD *)(v22 + 48) = 0;
      *(_BYTE *)(v22 + 56) = 0;
      *(_OWORD *)(v22 + 91) = 0u;
      *(_QWORD *)(v22 + 104) = 0;
      *(_QWORD *)(v22 + 112) = 0;
      *(_QWORD *)(v22 + 40) = 0;
      *(_WORD *)(v22 + 57) &= 0xF000u;
      *(_OWORD *)(v22 + 59) = 0u;
      *(_OWORD *)(v22 + 75) = 0u;
      *(_QWORD *)(v22 + 112) = 2;
      v58 = 2;
      JSC::DataOnlyCallLinkInfo::initialize(v22 + 40, a2, 0, 1, &v58, v18, v19, v20, 0);
      if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v58 & 0xFFFFFFFF8, v23, v24, v25, v26, v18, v19, v20);
      ++v21;
      v27 = *(unsigned int *)(a1 + 112);
      v22 += 120;
    }
    while (v21 < v27);
    v28 = 120 * v27 + 167;
  }
  else
  {
    v28 = 167;
  }
  v29 = *(_QWORD *)(a1 + 56);
  v30 = (void *)(a1 + ((v28 + 8 * *(unsigned int *)(*(_QWORD *)(v29 + 8) + 204)) & 0x1FFFFFFFFF0));
  *(_QWORD *)(a1 + 80) = v30;
  bzero(v30, 16 * *(unsigned int *)(*(_QWORD *)(v29 + 8) + 220));
  v31 = *(_QWORD *)(a1 + 56);
  v32 = *(_QWORD *)(v31 + 8);
  if (*(_DWORD *)(v32 + 220))
  {
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = *(_QWORD *)(v32 + 208) + v33;
      v36 = v12;
      if (*(_BYTE *)(v35 + 25) == 1
        || ((v37 = *(_BYTE *)(v35 + 8), BYTE1(dword_1ECF4C7B0)) ? (v38 = 29) : (v38 = 17),
            v36 = (WTF::BitVector *)(a1 + 96),
            (v38 + v37) <= 1u))
      {
        WTF::BitVector::set(v36, v34);
        v31 = *(_QWORD *)(a1 + 56);
      }
      ++v34;
      v32 = *(_QWORD *)(v31 + 8);
      v33 += 48;
    }
    while (v34 < *(unsigned int *)(v32 + 220));
  }
  bzero((void *)(a1 + 120 * *(unsigned int *)(a1 + 112) + 152), 8 * *(unsigned int *)(v32 + 204));
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v46 = *(unsigned int *)(v45 + 188);
  if ((_DWORD)v46)
  {
    v51 = 0;
    v52 = *(unsigned __int8 **)(v45 + 176);
    do
    {
      v53 = *v52;
      v52 += 80;
      if (v53 == 1)
      {
        if (*v13 >= 0)
          v54 = 2 * *v13 + 8;
        else
          v54 = a1 + 128;
        *(_QWORD *)(v54 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v51;
      }
      ++v51;
    }
    while (v46 != v51);
  }
  v47 = 0;
  v48 = 0;
  v49 = *(unsigned __int8 *)(v45 + 268);
  while (1)
  {
    if (v49)
      v50 = *(unsigned int *)(v45 + 264);
    else
      v50 = 0;
    if (v48 >= v50)
    {
      JSC::VM::registerWasmInstance((JSC::VM *)a2, (WTF::ThreadSafeWeakPtrControlBlock **)a1, v39, v40, v41, v42, v43, v44);
      return;
    }
    if (v48 >= *(unsigned int *)(v45 + 172))
      break;
    if (**(_BYTE **)(*(_QWORD *)(v45 + 160) + v47) == 1)
    {
      if (*(uint64_t *)v57 >= 0)
        v55 = 2 * *(_QWORD *)v57 + 8;
      else
        v55 = a1 + 136;
      *(_QWORD *)(v55 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v48;
    }
    ++v48;
    v47 += 16;
  }
  __break(0xC471u);
}

void JSC::Wasm::Instance::create(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v8 = *(unsigned int **)(*a3 + 8);
  v15 = v8[9];
  v9 = v8[51];
  v13 = v8[55];
  v14 = v9;
  v10 = (WTF *)JSC::Wasm::Instance::allocationSize(&v15, &v14, &v13);
  v11 = WTF::fastMalloc(v10);
  JSC::Wasm::Instance::Instance(v11, a1, a2, a3);
  *a4 = v12;
}

unint64_t JSC::Wasm::Instance::allocationSize(unint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;

  if (!is_mul_ok(*a1, 0x78uLL))
    goto LABEL_13;
  v3 = 120 * *a1;
  v4 = __CFADD__(v3, 152);
  v5 = v3 + 152;
  if (v4)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDCC84);
  }
  v6 = *a2;
  if ((unint64_t)*a2 >> 61)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDCC8CLL);
  }
  v4 = __CFADD__(v5, 8 * v6);
  v7 = v5 + 8 * v6;
  if (v4)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDCC94);
  }
  v8 = *a3;
  if ((unint64_t)*a3 >> 60)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDCC9CLL);
  }
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  result = v9 + 16 * v8;
  if (__CFADD__(v9, 16 * v8))
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198CDCC7CLL);
  }
  return result;
}

void JSC::Wasm::Instance::~Instance(JSC::Wasm::Instance *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unint64_t v10;
  JSC::CallLinkInfo *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::Wasm::Memory *v32;

  if (*((_DWORD *)this + 28))
  {
    v10 = 0;
    v11 = (JSC::Wasm::Instance *)((char *)this + 192);
    do
    {
      JSC::CallLinkInfo::~CallLinkInfo(v11, a2, a3, a4, a5, a6, a7, a8, a9);
      ++v10;
      v11 = (JSC::CallLinkInfo *)(v12 + 120);
    }
    while (v10 < *((unsigned int *)this + 28));
  }
  WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Tag const,WTF::RawPtrTraits<JSC::Wasm::Tag const>,WTF::DefaultRefDerefTraits<JSC::Wasm::Tag const>>>::~FixedVector((unsigned int **)this + 18, a2, a3, a4, a5, a6, a7, a8);
  v20 = *((_QWORD *)this + 17);
  if ((v20 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v20, v13, v14, v15, v16, v17, v18, v19);
  v21 = *((_QWORD *)this + 16);
  if ((v21 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v21, v13, v14, v15, v16, v17, v18, v19);
  WTF::HashMap<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::HashTableTraits>::~HashMap((uint64_t *)this + 15, v13, v14, v15, v16, v17, v18, v19);
  v29 = *((_QWORD *)this + 13);
  if ((v29 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v29, v22, v23, v24, v25, v26, v27, v28);
  v30 = *((_QWORD *)this + 12);
  if ((v30 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v30, v22, v23, v24, v25, v26, v27, v28);
  v31 = *((_QWORD *)this + 11);
  if (v31)
    WTF::fastFree(v31 - 16, v22, v23, v24, v25, v26, v27, v28);
  v32 = (JSC::Wasm::Memory *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v32)
    WTF::RefCounted<JSC::Wasm::Memory>::deref(v32);
  WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>::~Ref((unsigned int **)this + 7);
}

unsigned int **WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Tag const,WTF::RawPtrTraits<JSC::Wasm::Tag const>,WTF::DefaultRefDerefTraits<JSC::Wasm::Tag const>>>::~FixedVector(unsigned int **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 2);
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v12 = &v11[v10];
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr((unsigned int *)v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, (unsigned int *)v13));
          if (!v15)
          {
            atomic_store(1u, (unsigned int *)v13);
            v16 = *(unsigned int **)(v13 + 8);
            *(_QWORD *)(v13 + 8) = 0;
            if (v16)
            {
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                v20 = v13;
                WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
                v13 = v20;
              }
            }
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        ++v11;
      }
      while (v11 != v12);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t *WTF::HashMap<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v9 = *a1;
  if (*a1)
  {
    v11 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_DWORD *)(v9 + 16 * i) != -2)
        {
          v13 = v9 + 16 * i;
          v14 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unsigned int **WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  JSC::Wasm::Module *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (JSC::Wasm::Module *)v2;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v6);
    }
  }
  return a1;
}

unint64_t JSC::Wasm::Instance::extraMemoryAllocated(JSC::Wasm::Instance *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v6 = *((unsigned int *)this + 28);
  v1 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  v2 = *(unsigned int *)(v1 + 204);
  v4 = *(unsigned int *)(v1 + 220);
  v5 = v2;
  return JSC::Wasm::Instance::allocationSize(&v6, &v5, &v4);
}

_QWORD *JSC::Wasm::Instance::setGlobal(_QWORD *result, unsigned int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result + 13;
  v4 = result[13];
  v5 = result[10];
  v6 = (unint64_t *)(2 * v4);
  if (v4 < 0)
    v7 = 63;
  else
    v7 = *v6;
  if (v7 <= a2)
    goto LABEL_15;
  v8 = v6 + 1;
  if (v4 >= 0)
    v3 = v8;
  if (((*(_QWORD *)((char *)v3 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) != 0)
  {
    v9 = *(_QWORD **)(v5 + 16 * a2);
    if (v9)
    {
      v10 = result[1];
      v11 = *(v9 - 1);
      *v9 = a3;
      if ((a3 & 0xFFFE000000000002) == 0
        && a3
        && v11
        && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v11 + 7))
      {
        v12 = v10 + 192;
        return (_QWORD *)JSC::Heap::writeBarrierSlowPath(v12, v11);
      }
    }
  }
  else
  {
LABEL_15:
    v13 = 16 * a2;
    v14 = result[1];
    v11 = result[3];
    *(_QWORD *)(v5 + v13) = a3;
    if ((a3 & 0xFFFE000000000002) == 0
      && a3
      && v11
      && *(_DWORD *)(v14 + 760) >= *(unsigned __int8 *)(v11 + 7))
    {
      v12 = v14 + 192;
      return (_QWORD *)JSC::Heap::writeBarrierSlowPath(v12, v11);
    }
  }
  return result;
}

void JSC::Wasm::Instance::setFunctionWrapper(uint64_t a1, int a2, uint64_t a3)
{
  JSC::JSCellLock *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _BYTE v21[24];
  uint64_t v22;
  int v23;

  v23 = a2;
  v5 = *(JSC::JSCellLock **)(a1 + 24);
  v6 = (unsigned __int8 *)v5 + 4;
  while (1)
  {
    v7 = *v6;
    if ((v7 & 0x40) != 0)
      break;
    v8 = __ldaxr(v6);
    if (v8 == v7)
    {
      if (!__stxr(v7 | 0x40, v6))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::lockSlow(v5);
LABEL_8:
  v9 = (uint64_t *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 24);
  v22 = a3;
  if ((a3 & 0xFFFE000000000002) == 0
    && a3
    && v11
    && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v11 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v10 + 192, v11);
    v9 = (uint64_t *)(a1 + 88);
  }
  WTF::HashMap<unsigned int,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>(v9, &v23, &v22, (uint64_t)v21);
  while (1)
  {
    v19 = *v6;
    if ((v19 & 0xC0) != 0x40)
      break;
    v20 = __ldxr(v6);
    if (v20 == v19)
    {
      if (!__stxr(v19 & 0xBF, v6))
        return;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::unlockSlow(v5, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t JSC::Wasm::Instance::table(JSC::Wasm::Instance *this, unsigned int a2)
{
  uint64_t result;

  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8) + 204) > a2)
    return *((_QWORD *)this + 15 * *((unsigned int *)this + 28) + a2 + 19);
  result = 139;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::Instance::tableCopy(uint64_t this, unsigned int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  const JSC::Wasm::FuncRefTable *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  const JSC::Wasm::FuncRefTable *v21;

  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 8) + 204);
  if (v6 <= a6)
    goto LABEL_39;
  if (v6 <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDD384);
  }
  v7 = 120 * *(unsigned int *)(this + 112) + 152;
  v8 = *(_QWORD *)(this + v7 + 8 * a5);
  v9 = *(_QWORD *)(this + v7 + 8 * a6);
  if (*(unsigned __int8 *)(v8 + 13) != *(unsigned __int8 *)(v9 + 13))
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198CDD364);
  }
  v10 = a4;
  v11 = a3;
  v12 = a2;
  if (*(_BYTE *)(v8 + 13))
  {
    if (a5 == a6)
    {
      if (a2 > a3)
      {
        if (a4)
        {
          v13 = a3 - 1;
          v14 = a2 - 1;
          do
          {
            v15 = v10 - 1;
            if (*(_BYTE *)(v8 + 13) == 1)
              v16 = v8;
            else
              v16 = 0;
            if (*(_BYTE *)(v9 + 13) == 1)
              v17 = (const JSC::Wasm::FuncRefTable *)v9;
            else
              v17 = 0;
            this = JSC::Wasm::FuncRefTable::copyFunction(v16, v17, v14 + v10, v13 + v10);
            --v10;
          }
          while (v15);
        }
        return this;
      }
      if (a2 == a3)
        return this;
    }
    if (a4)
    {
      do
      {
        if (*(_BYTE *)(v8 + 13) == 1)
          v20 = v8;
        else
          v20 = 0;
        if (*(_BYTE *)(v9 + 13) == 1)
          v21 = (const JSC::Wasm::FuncRefTable *)v9;
        else
          v21 = 0;
        this = JSC::Wasm::FuncRefTable::copyFunction(v20, v21, v12++, v11++);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    if (a5 == a6)
    {
      if (a2 > a3)
      {
        if (a4)
        {
          v18 = a3 - 1;
          v19 = a2 - 1;
          do
          {
            this = JSC::Wasm::Table::copy(v8, v9, v19 + v10, v18 + v10);
            --v10;
          }
          while (v10);
        }
        return this;
      }
      if (a2 == a3)
        return this;
    }
    if (a4)
    {
      do
      {
        this = JSC::Wasm::Table::copy(v8, v9, v12++, v11++);
        --v10;
      }
      while (v10);
    }
  }
  return this;
}

BOOL JSC::Wasm::Instance::memoryInit(JSC::Wasm::Instance *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  const void *v12;
  _BOOL8 result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (!*(_BYTE *)(v5 + 268) || *(_DWORD *)(v5 + 264) <= a5)
    goto LABEL_24;
  if (__CFADD__(a3, a4))
    return 0;
  if (*(_DWORD *)(v5 + 172) <= a5)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x198CDD4E8);
  }
  v8 = *(_QWORD *)(v5 + 160) + 16 * a5;
  v9 = (char *)this + 136;
  v10 = *((_QWORD *)this + 17);
  if (v10 >= 0)
    v9 = (char *)(2 * v10 + 8);
  if (((*(_QWORD *)&v9[((unint64_t)a5 >> 3) & 0x1FFFFFF8] >> a5) & 1) != 0)
    v11 = *(_DWORD *)(*(_QWORD *)v8 + 4);
  else
    v11 = 0;
  if (a4 + a3 > v11)
    return 0;
  v12 = a4 ? (const void *)(*(_QWORD *)v8 + a3 + 20) : 0;
  if (__CFADD__(a2, a4))
    return 0;
  v14 = *((_QWORD *)this + 8);
  v15 = a4 + a2;
  v16 = *(_QWORD *)(v14 + 8);
  if (*(_BYTE *)(v16 + 5))
    v17 = atomic_load((unint64_t *)(v16 + 16));
  else
    v17 = *(_QWORD *)(v16 + 16);
  result = v17 >= v15;
  if (a4)
  {
    if (v17 >= v15)
    {
      v18 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(v14 + 8));
      memcpy((void *)(v18 + a2), v12, a4);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::Wasm::Instance::initElementSegment(uint64_t this, unsigned int a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  int *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t I64Global;
  JSC::Wasm::TypeInformation *v78;
  char **v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *Object;
  uint64_t v88;
  _BOOL4 v89;
  char **v90;
  BOOL v91;
  uint64_t v93;
  _QWORD *v94;
  uint64_t (*v95)(_QWORD *);
  uint64_t v96;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  JSC::Wasm::TypeInformation *v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  WTF *v111;
  unsigned int *v112;
  _QWORD v113[5];

  v113[3] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 60) < a6)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDDB80);
  }
  v8 = this;
  v105 = *(_QWORD *)(this + 24);
  v9 = *(unsigned int **)(v105 + 64);
  if (*v9 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDDBA0);
  }
  if ((_DWORD)a6)
  {
    v10 = a3;
    v11 = 0;
    v12 = *(_QWORD *)&v9[2 * a2 + 2];
    v13 = *(_QWORD *)(v105 + 32);
    v102 = a6;
    v103 = a5;
    v100 = v12;
    v101 = v13;
    v98 = (unint64_t *)(v13 + 1264);
    v99 = *(_QWORD *)(v13 + 56);
    v96 = this;
    while (1)
    {
      v14 = v11 + v103;
      if (v11 + v103 >= (unint64_t)*(unsigned int *)(v10 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x198CDDC50);
      }
      if (v14 >= *(unsigned int *)(v10 + 76))
        goto LABEL_103;
      v15 = v11 + a4;
      v16 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 48) + v14);
      v17 = *(_QWORD *)(*(_QWORD *)(v10 + 64) + 8 * v14);
      if (v16 != 1)
      {
        if (v16 == 2)
        {
          this = JSC::JSWebAssemblyTable::clear(v12, (int)v11 + a4);
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(v10 + 48) + v14))
          {
            v113[0] = 0;
            if (!JSC::Wasm::Instance::evaluateConstantExpression(v8, v17, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), v113, a6, a7, a8))
            {
              __break(0xC471u);
              JUMPOUT(0x198CDDC00);
            }
            I64Global = v113[0];
          }
          else
          {
            I64Global = JSC::Wasm::Instance::loadI64Global((JSC::Wasm::Instance *)v8, *(_QWORD *)(*(_QWORD *)(v10 + 64) + 8 * v14));
          }
          if (*(_BYTE *)(*(_QWORD *)(v12 + 16) + 13))
          {
            if ((I64Global & 0xFFFE000000000002) != 0)
              Object = 0;
            else
              Object = (_DWORD *)JSC::JSCell::getObject(I64Global);
            v88 = *(unsigned int *)(16 * (*Object & 0xFFFFFFFE) + 0x4C);
            v89 = *(_DWORD *)(16 * (*Object & 0xFFFFFFFE) + 0x4C) != 0;
            v90 = (char **)(16 * v88);
            if ((_DWORD)v88)
              v91 = v90 == &JSC::WebAssemblyFunctionBase::s_info;
            else
              v91 = 1;
            if (!v91)
            {
              do
              {
                v90 = (char **)v90[2];
                v89 = v90 != 0;
              }
              while (v90 != &JSC::WebAssemblyFunctionBase::s_info && v90 != 0);
            }
            if (v89)
              v93 = (uint64_t)Object;
            else
              v93 = 0;
            this = JSC::JSWebAssemblyTable::set(v12, v15, v93);
          }
          else
          {
            this = JSC::JSWebAssemblyTable::set(v12, v15, I64Global);
          }
        }
        goto LABEL_42;
      }
      v18 = JSC::Wasm::Module::typeIndexFromFunctionIndexSpace(*(_QWORD *)(v8 + 56), *(_QWORD *)(*(_QWORD *)(v10 + 64) + 8 * v14));
      v19 = *(_QWORD **)(*(_QWORD *)(v8 + 56)
                       + 8 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 64) + 8) + 6)
                       + 16);
      v20 = (int *)v19[9];
      v110 = v11 + a4;
      if (!v20)
        break;
      v21 = *v20;
      if (*v20 <= v17)
        goto LABEL_10;
      if (*(_DWORD *)(v8 + 112) <= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x198CDDBE0);
      }
      v78 = (JSC::Wasm::TypeInformation *)v18;
      v60 = *(_QWORD *)(v8 + 120 * v17 + 176);
      if ((v60 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v60 + 5) >= 0x17u)
      {
        v79 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C));
        if (v79 == &JSC::WebAssemblyFunction::s_info || v79 == &JSC::WebAssemblyWrapperFunction::s_info)
        {
          if (v79 != &JSC::WebAssemblyFunction::s_info)
          {
            __break(0xC471u);
            JUMPOUT(0x198CDDC40);
          }
          v12 = v100;
          v65 = v100;
          v66 = v11 + a4;
          goto LABEL_41;
        }
      }
      v108 = JSC::JSGlobalObject::webAssemblyWrapperFunctionStructure(v101);
      JSC::Wasm::TypeInformation::getCanonicalRTT(v78, v81, v82, v83, v84, v85, v86, &v112);
      v60 = JSC::WebAssemblyWrapperFunction::create(v99, v101, v108, v60, v17, v105, (uint64_t)v78, (uint64_t *)&v112);
      v67 = v112;
      v112 = 0;
      v12 = v100;
      if (v67)
      {
        do
        {
          v75 = __ldaxr(v67);
          v76 = v75 - 1;
        }
        while (__stlxr(v76, v67));
        if (!v76)
        {
          atomic_store(1u, v67);
          goto LABEL_48;
        }
      }
LABEL_40:
      v65 = v12;
      v66 = v15;
LABEL_41:
      this = JSC::JSWebAssemblyTable::set(v65, v66, v60);
LABEL_42:
      if (++v11 == v102)
        return this;
    }
    v21 = 0;
LABEL_10:
    v22 = v19[6];
    if (!v22)
      goto LABEL_103;
    v23 = v17 - v21;
    v24 = *(_DWORD *)(v22 - 8);
    v25 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
    v26 = (v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11);
    v27 = v24 & (v26 ^ HIWORD(v26));
    v28 = *(_DWORD *)(v22 + 16 * v27);
    if (v28 != v23)
    {
      v29 = 1;
      while (v28 != -1)
      {
        v27 = ((_DWORD)v27 + v29) & v24;
        v28 = *(_DWORD *)(v22 + 16 * v27);
        ++v29;
        if (v28 == v23)
          goto LABEL_15;
      }
LABEL_103:
      __break(0xC471u);
      JUMPOUT(0x198CDD8D4);
    }
LABEL_15:
    v30 = *(_QWORD *)(v22 + 16 * v27 + 8);
    if (!v30)
      goto LABEL_103;
    v109 = v11;
    if (v20)
    {
      v31 = *v20;
      v32 = (v17 - *v20);
      if (v17 < *v20)
      {
        __break(0xC471u);
        JUMPOUT(0x198CDDAD0);
      }
      v33 = (_DWORD *)v19[8];
      if (*v33 <= v32)
      {
LABEL_87:
        __break(0xC471u);
        JUMPOUT(0x198CDDAF0);
      }
    }
    else
    {
      v33 = (_DWORD *)v19[8];
      if (*v33 <= v17)
        goto LABEL_87;
      v31 = 0;
      v32 = v17;
    }
    v34 = v17 - v31;
    v35 = (_DWORD *)v19[7];
    if (*v35 <= (v17 - v31))
    {
      __break(0xC471u);
      JUMPOUT(0x198CDDB10);
    }
    v106 = *(_QWORD *)&v33[2 * v32 + 2];
    v107 = (JSC::Wasm::TypeInformation *)v18;
    v36 = JSC::Wasm::TypeDefinition::expand(v18);
    if (*(_DWORD *)(v36 + 32))
      v43 = 0;
    else
      v43 = v36 + 8;
    v44 = *v98;
    if ((*v98 & 1) != 0)
    {
      v94 = (_QWORD *)(v101 - 16);
      if ((v101 & 8) == 0)
        v94 = (_QWORD *)(v101 & 0xFFFFFFFFFFFFC000 | 8);
      v95 = *(uint64_t (**)(_QWORD *))(v44 & 0xFFFFFFFFFFFFFFFCLL);
      v113[0] = *v94;
      v113[1] = v101;
      v113[2] = v98;
      v44 = v95(v113);
    }
    LODWORD(v45) = 0;
    v46 = (uint64_t)&v35[2 * v34 + 2];
    v47 = *(_DWORD *)(v43 + 8);
    v48 = v17;
    do
    {
      v45 = (v45 + 1);
      v49 = v48 > 9;
      v48 /= 0xAu;
    }
    while (v49);
    if ((v45 & 0x80000000) != 0)
    {
LABEL_101:
      __break(0xC471u);
      JUMPOUT(0x198CDDC48);
    }
    if ((_DWORD)v45)
    {
      WTF::tryFastCompactMalloc((WTF *)(v45 + 20), v113);
      v50 = (int *)v113[0];
      if (!v113[0])
        goto LABEL_101;
      v51 = 0;
      v52 = (void *)(v113[0] + 20);
      *(_DWORD *)v113[0] = 2;
      v50[1] = v45;
      *((_QWORD *)v50 + 1) = v50 + 5;
      v50[4] = 4;
      do
      {
        *((_BYTE *)&v113[1] + v51-- + 4) = (v17 % 0xA) | 0x30;
        v49 = v17 > 9;
        LODWORD(v17) = v17 / 0xA;
      }
      while (v49);
      v10 = a3;
      if (v51 + 14 <= 13)
        memcpy(v52, (char *)&v113[1] + v51 + 5, -v51);
    }
    else
    {
      v50 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      v10 = a3;
    }
    v113[0] = v50;
    JSC::Wasm::TypeInformation::getCanonicalRTT(v107, v37, v38, v39, v40, v41, v42, (unsigned int **)&v111);
    v60 = JSC::WebAssemblyFunction::create(v99, v101, v44, v47, (const WTF::String *)v113, v105, v30, v106, v46, (uint64_t)v107, (unsigned int **)&v111);
    v61 = (unsigned int *)v111;
    v111 = 0;
    v8 = v96;
    v11 = v109;
    v12 = v100;
    v15 = v110;
    if (v61)
    {
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        atomic_store(1u, v61);
        WTF::fastFree((unint64_t)v61, v53, v54, v55, v56, v57, v58, v59);
      }
    }
    v64 = (WTF::StringImpl *)v113[0];
    v113[0] = 0;
    if (!v64)
      goto LABEL_40;
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
LABEL_48:
      WTF::fastFree((unint64_t)v67, v68, v69, v70, v71, v72, v73, v74);
      goto LABEL_40;
    }
    *(_DWORD *)v64 -= 2;
    goto LABEL_40;
  }
  return this;
}

uint64_t JSC::JSGlobalObject::webAssemblyWrapperFunctionStructure(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 1272);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 1272;
    return v3(v5);
  }
  return v1;
}

BOOL JSC::Wasm::Instance::evaluateConstantExpression(_BOOL8 result, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 **v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD v35[2];
  BOOL v36;

  v8 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8);
  if (*(unsigned int *)(v8 + 300) > a2)
  {
    v10 = (unsigned __int8 **)result;
    v11 = *(_QWORD *)(v8 + 288) + 16 * a2;
    v12 = *(unsigned __int8 **)result;
    if (__ldaxr(*(unsigned __int8 **)result))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
LABEL_6:
    ++*((_QWORD *)v12 + 1);
    v14 = __ldxr(v12);
    if (v14 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_11:
        v32 = v10;
        JSC::Wasm::evaluateExtendedConstExpr(v11, (uint64_t)&v32);
        v22 = v32;
        v32 = 0;
        if (!v22)
          goto LABEL_21;
        v23 = *v22;
        if (__ldaxr(*v22))
        {
          __clrex();
        }
        else if (!__stxr(1u, v23))
        {
          goto LABEL_16;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v23);
LABEL_16:
        v25 = *((_QWORD *)v23 + 1);
        v26 = v25 - 1;
        *((_QWORD *)v23 + 1) = v25 - 1;
        if (v25 == 1)
        {
          v31 = *((_QWORD *)v23 + 2);
          v28 = *((_QWORD *)v23 + 3);
          *((_QWORD *)v23 + 3) = 0;
          v27 = v31 == 0;
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
        v29 = __ldxr(v23);
        if (v29 == 1)
        {
          if (!__stlxr(0, v23))
          {
            if (v26)
              goto LABEL_21;
LABEL_27:
            v35[0] = v23;
            v35[1] = v28;
            v36 = v27;
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)v35, v15, v16, v17, v18, v19, v20, v21);
LABEL_21:
            v30 = v34;
            if (v34)
            {
              if (v34 == -1)
                return (_DWORD)v30 == 0;
            }
            else
            {
              *a5 = v33;
            }
            ((void (*)(_QWORD *, uint64_t *))off_1E35B5A50[v30])(v35, &v33);
            return (_DWORD)v30 == 0;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, v16, v17, v18, v19, v20, v21);
        if (v26)
          goto LABEL_21;
        goto LABEL_27;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_11;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::Instance::copyElementSegment(uint64_t this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::Instance *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  if (a4)
  {
    v10 = (JSC::Wasm::Instance *)this;
    v11 = 0;
    v12 = a3;
    v13 = a4;
    do
    {
      v14 = v11 + v12;
      if (v11 + v12 >= (unint64_t)*(unsigned int *)(a2 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x198CDE004);
      }
      if (v14 >= *(unsigned int *)(a2 + 76))
      {
LABEL_26:
        __break(0xC471u);
        JUMPOUT(0x198CDDFFCLL);
      }
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v14);
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v14);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v14))
      {
        if (v15 == 1)
        {
          v17 = *((_QWORD *)v10 + 11);
          if (!v17)
            goto LABEL_20;
          v18 = *(_DWORD *)(v17 - 8);
          v19 = 9 * ((~((_DWORD)v16 << 15) + v16) ^ ((~((_DWORD)v16 << 15) + v16) >> 10));
          v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
          v21 = v18 & (v20 ^ HIWORD(v20));
          v22 = *(_DWORD *)(v17 + 16 * v21);
          if (v22 == (_DWORD)v16)
          {
LABEL_14:
            v24 = *(_QWORD *)(v17 + 16 * v21 + 8);
            if (!v24)
              v24 = 2;
          }
          else
          {
            v23 = 1;
            while (v22 != -1)
            {
              v21 = ((_DWORD)v21 + v23) & v18;
              v22 = *(_DWORD *)(v17 + 16 * v21);
              ++v23;
              if (v22 == (_DWORD)v16)
                goto LABEL_14;
            }
LABEL_20:
            v24 = 2;
          }
LABEL_21:
          *(_QWORD *)(a5 + 8 * v11) = v24;
          goto LABEL_22;
        }
        if (v15 != 2)
        {
          v25 = 0;
          this = JSC::Wasm::Instance::evaluateConstantExpression((_BOOL8)v10, v16, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), &v25, a6, a7, a8);
          if ((this & 1) == 0)
            goto LABEL_26;
          v24 = v25;
          goto LABEL_21;
        }
        *(_QWORD *)(a5 + 8 * v11) = 2;
      }
      else
      {
        this = JSC::Wasm::Instance::loadI64Global(v10, v16);
        *(_QWORD *)(a5 + 8 * v11) = this;
      }
LABEL_22:
      ++v11;
    }
    while (v11 != v13);
  }
  return this;
}

uint64_t JSC::Wasm::Instance::tableInit(JSC::Wasm::Instance *this, int a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v13;

  v8 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*(_DWORD *)(v8 + 188) <= a5)
    goto LABEL_12;
  if (*(_DWORD *)(v8 + 204) <= a6)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDE0D4);
  }
  v9 = (char *)this + 128;
  v10 = *((_QWORD *)this + 16);
  if (v10 >= 0)
    v9 = (char *)(2 * v10 + 8);
  if (((*(_QWORD *)&v9[((unint64_t)a5 >> 3) & 0x1FFFFFF8] >> a5) & 1) == 0 || (v11 = *(_QWORD *)(v8 + 176)) == 0)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x198CDE0B4);
  }
  v13 = (_BYTE *)(v11 + 80 * a5);
  if (*v13 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDE0F4);
  }
  return JSC::Wasm::Instance::initElementSegment((uint64_t)this, a6, (uint64_t)v13, a2, a3, a4, a7, a8);
}

uint64_t JSC::Wasm::Instance::setTable(uint64_t result, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 56) + 8) + 204) <= a2)
  {
    result = 408;
    __break(0xC471u);
  }
  else
  {
    v3 = *a3;
    *a3 = 0;
    *(_QWORD *)(120 * *(unsigned int *)(result + 112) + 8 * a2 + result + 152) = v3;
  }
  return result;
}

void JSC::Wasm::Instance::setTag(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;

  v8 = *(_DWORD **)(a1 + 144);
  if (*v8 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDE1E0);
  }
  v9 = &v8[2 * a2];
  v10 = *a3;
  *a3 = 0;
  v11 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v10;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v14 = *(unsigned int **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          v17 = v11;
          WTF::fastFree((unint64_t)v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v11 = v17;
        }
      }
      WTF::fastFree(v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::Wasm::parseAndCompileBytecode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  pthread_key_t *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const JSC::Wasm::Type *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  int v30;
  void **v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  char v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  JSC::Wasm::TypeDefinition *v39;
  JSC::Wasm::LLIntGenerator *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  JSC::Wasm::TypeDefinition *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  WTF *v66;
  char *v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  char *v73;
  uint64_t v74;
  void ***v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  char *v94;
  int v95;
  __int128 v96;
  void **v97;
  int v98;
  char *v99;
  char *v100;
  _DWORD *v101;
  WTF *v102;
  uint64_t v103;
  int v104;
  char *v105;
  int v106;
  int *v107;
  char *v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  WTF *v112;
  JSC::Wasm::WasmOpcodeCounter *v113;
  uint64_t v114;
  unint64_t v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  JSC::Wasm::LLIntGenerator *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  void *v133;
  int v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  unint64_t v141;
  pthread_key_t *v142;
  JSC::Wasm::FunctionCodeBlockGenerator *v143;
  size_t v144;
  void *v145;
  int v146;
  void *v147;
  int v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  JSC::Wasm::FunctionCodeBlockGenerator *v169;
  unint64_t v170;
  WTF *v171;
  WTF *v172;
  WTF *v173;
  WTF *v174;
  WTF *v175;
  uint64_t v176;
  WTF *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v186;
  unint64_t v187;
  JSC::Wasm::FunctionCodeBlockGenerator *v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  unint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  int v202;
  unint64_t v203;
  uint64_t v204;
  char *v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t *v215;
  char v216;
  int v217;
  BOOL v218;
  int v219;
  unsigned int v220;
  char *v221;
  uint64_t v222;
  WTF::AtomStringImpl *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  JSC::Wasm::FunctionCodeBlockGenerator *v230;
  uint64_t v231;
  unsigned __int8 *v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void **v241;
  void *v242;
  unsigned int v243;
  uint64_t v244;
  _BYTE *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  WTF *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  float v254;
  _BYTE *v255;
  unsigned int v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  WTF *v265;
  uint64_t *v266;
  BOOL v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  WTF *v278;
  char *v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  int v283;
  uint64_t v284;
  unsigned int *v285;
  uint64_t v286;
  unsigned int v287;
  unsigned int v288;
  unint64_t v289;
  unint64_t v290;
  const void *v291;
  uint64_t v292;
  void *v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int *v296;
  WTF *v297;
  unint64_t CachedUnrolling;
  JSC::Wasm::LLIntGenerator *v299;
  WTF::AtomStringImpl *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  int v308;
  const JSC::Wasm::TypeDefinition *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  JSC::Wasm::FunctionCodeBlockGenerator *v317;
  WTF *v318;
  WTF *v319;
  unint64_t v320;
  unint64_t v321;
  unsigned int v322;
  uint64_t *v323;
  uint64_t v324;
  JSC::Wasm::FunctionCodeBlockGenerator *v325;
  char v326;
  void ***v327;
  uint64_t v328;
  unint64_t v329;
  void *v330;
  char v331;
  unsigned int v332;
  unsigned int v333;
  JSC::Wasm::LLIntGenerator *v334;
  WTF *v335;
  uint64_t v336;
  _BYTE v337[384];
  WTF *v338;
  uint64_t v339;
  _BYTE v340[13952];
  WTF *v341;
  uint64_t v342;
  _BYTE v343[256];
  JSC::Wasm::TypeDefinition *v344;
  uint64_t v345;
  __int128 v346;
  uint64_t v347;
  unsigned __int8 v348;
  __int128 v349;
  void *__src[3];
  JSC::Wasm::FunctionCodeBlockGenerator *v351;
  char v352;
  int v353;
  void **v354;
  int v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  WTF *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  WTF *v366;
  uint64_t v367;
  _BYTE v368[32];
  uint64_t v369;
  WTF *v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD v373[2];
  void **p_dst;
  int v375;
  unsigned int v376;
  int v377;
  void *__dst;
  uint64_t p_p_dst;
  _QWORD v380[48];
  WTF *v381;
  uint64_t v382;
  _BYTE v383[384];
  int v384;
  uint64_t v385;
  int v386;
  char *v387;
  int v388;
  _DWORD *v389;
  _QWORD v390[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  v324 = v12;
  v13 = WTF::fastMalloc((WTF *)0xA0);
  *(_DWORD *)v13 = v4;
  *(_QWORD *)(v13 + 9) = 0;
  *(_QWORD *)(v13 + 4) = 0;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_QWORD *)(v13 + 152) = 0x8000000000000000;
  memset(__src, 0, 21);
  v351 = (JSC::Wasm::FunctionCodeBlockGenerator *)v13;
  v352 = 0;
  v353 = 152;
  v354 = __src;
  v355 = 0;
  v358 = 0u;
  v357 = 0u;
  v356 = 0u;
  v359 = 0;
  v360 = v6;
  v361 = v4;
  v364 = 0;
  v363 = 0;
  v362 = 0;
  v365 = 0xC0000000C0000000;
  v366 = (WTF *)v368;
  v367 = 8;
  v369 = 0;
  v370 = (WTF *)&v372;
  v371 = 2;
  v373[0] = 0;
  *(_QWORD *)((char *)v373 + 7) = 0;
  v14 = atomic_load(&_MergedGlobals_52);
  if (v14 != -1)
  {
    v327 = &p_dst;
    __dst = &v327;
    std::__call_once(&_MergedGlobals_52, &__dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::threadSpecificBuffer(void)::$_0 &&>>);
  }
  v15 = (pthread_key_t *)qword_1ECF59030;
  v16 = (uint64_t)pthread_getspecific(*(_QWORD *)qword_1ECF59030);
  if (!v16)
    v16 = WTF::ThreadSpecific<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,(WTF::CanBeGCThread)0>::set(v15);
  v17 = *(void **)v16;
  v18 = *(_DWORD *)(v16 + 8);
  v19 = *(_DWORD *)(v16 + 12);
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v27 = (uint64_t)pthread_getspecific(*v15);
  if (!v27)
    v27 = WTF::ThreadSpecific<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,(WTF::CanBeGCThread)0>::set(v15);
  v28 = *(_QWORD *)v27;
  if (*(_QWORD *)v27)
  {
    *(_QWORD *)v27 = 0;
    *(_DWORD *)(v27 + 8) = 0;
    WTF::fastFree(v28, v20, v21, v22, (uint64_t)v23, v24, v25, v26);
  }
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  if (HIDWORD(__src[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x198CDFA10);
  }
  if (v19)
  {
    __break(0xC471u);
    JUMPOUT(0x198CDFA30);
  }
  v29 = __src[0];
  if (__src[0])
  {
    __src[0] = 0;
    LODWORD(__src[1]) = 0;
    WTF::fastFree((unint64_t)v29, v20, v21, v22, (uint64_t)v23, v24, v25, v26);
  }
  __src[0] = v17;
  __src[1] = (void *)v18;
  *((_DWORD *)v351 + 1) = 4;
  v373[0] = 0x400000004;
  v30 = (int)__src[2];
  v31 = v354;
  if (__src == v354)
  {
    v32 = 0;
    v33 = 0;
    v355 = (int)__src[2];
    v353 = 143;
    LOBYTE(v327) = -113;
  }
  else
  {
    v315 = *((_DWORD *)v354 + 3);
    if (v315)
    {
      *((_DWORD *)v354 + 3) = 0;
      v315 = HIDWORD(__src[1]);
    }
    memcpy(*v31, v17, v315);
    *((_DWORD *)v31 + 3) = HIDWORD(__src[1]);
    v316 = LODWORD(__src[2]);
    v32 = HIDWORD(__src[1]);
    v355 = v30;
    v353 = 143;
    LOBYTE(v327) = -113;
    if (HIDWORD(__src[1]) > LODWORD(__src[2]))
    {
      ++LODWORD(__src[2]);
      *((_BYTE *)__src[0] + v316) = -113;
      goto LABEL_18;
    }
    v33 = HIDWORD(__src[1]);
  }
  if (v33 == LODWORD(__src[1]))
  {
    v251 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)__src, (WTF *)(v32 + 1), (unint64_t)&v327);
    v32 = HIDWORD(__src[1]);
    v34 = __src[0];
    v35 = *v251;
  }
  else
  {
    v34 = __src[0];
    v35 = -113;
  }
  v34[v32] = v35;
  v36 = 1;
  *(int32x2_t *)((char *)&__src[1] + 4) = vadd_s32(*(int32x2_t *)((char *)&__src[1] + 4), (int32x2_t)0x100000001);
LABEL_18:
  v327 = 0;
  v328 = v11;
  v329 = v10;
  v37 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v37 != -1)
  {
    __dst = &v325;
    p_dst = &__dst;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v330 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v331 = 0;
  v332 = 0;
  v333 = 0;
  v38 = (uint64_t)&v327;
  v334 = (JSC::Wasm::LLIntGenerator *)__src;
  v335 = (WTF *)v337;
  v336 = 16;
  v338 = (WTF *)v340;
  v339 = 16;
  v341 = (WTF *)v343;
  v342 = 16;
  if (*(_DWORD *)(v8 + 32) == 4)
  {
    v296 = *(unsigned int **)(v8 + 8);
    v297 = *(WTF **)v296;
    v39 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v296 + 8) + 8 * v296[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v39))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v8, (unint64_t)v20, v21, v22, (uint64_t)v23, v24, v25, v26);
      if ((_BYTE)v20)
      {
        v39 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v39 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v39, v297, v21, v22, v23, v24, v25, v26);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v8, v39, v309, v310, v311, v312, v313, v314);
      }
      v38 = (uint64_t)&v327;
    }
  }
  else
  {
    v39 = (JSC::Wasm::TypeDefinition *)v8;
  }
  if (*((_DWORD *)v39 + 8) == 5)
    v39 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v39 + 1);
  v344 = v39;
  v346 = 0u;
  v345 = v6;
  v347 = 0x8000000000000000;
  v348 = 0;
  v349 = 0u;
  v40 = v334;
  *((_QWORD *)v334 + 13) = &v327;
  if (*((_DWORD *)v39 + 8))
  {
    v279 = "type signature was not a function signature";
    v280 = 44;
LABEL_377:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v279, (unint64_t *)&v327, v280, &__dst, *(float *)&v36);
    goto LABEL_251;
  }
  v42 = *((unsigned int *)v39 + 4);
  v41 = *((unsigned int *)v39 + 5);
  if ((_DWORD)v42)
  {
    v43 = 0;
    v44 = *((_DWORD *)v39 + 5);
    v45 = *((unsigned int *)v39 + 4);
    do
    {
      if (*(unsigned __int8 *)(*((_QWORD *)v39 + 1) + 16 * v44) == 251)
        ++v43;
      ++v44;
      --v45;
    }
    while (v45);
    if (v43)
      goto LABEL_259;
  }
  if (!(_DWORD)v41)
    goto LABEL_32;
  v231 = 0;
  v232 = (unsigned __int8 *)*((_QWORD *)v39 + 1);
  do
  {
    v233 = *v232;
    v232 += 16;
    if (v233 == 251)
      ++v231;
    --v41;
  }
  while (v41);
  if (v231)
  {
LABEL_259:
    *((_BYTE *)v40 + 254) = 1;
    v234 = *((_DWORD *)v40 + 4);
    __dst = v40;
    LODWORD(p_p_dst) = v234;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)v40 + 10, &__dst, v21, v22, (uint64_t)v23, v24, v25, v26);
    *((_DWORD *)v40 + 9) = 152;
    LOBYTE(__dst) = -104;
    v235 = *((unsigned int *)v40 + 3);
    v236 = *((unsigned int *)v40 + 4);
    if (v235 > v236)
    {
      *((_DWORD *)v40 + 4) = v236 + 1;
      *(_BYTE *)(*(_QWORD *)v40 + v236) = -104;
    }
    else
    {
      if ((_DWORD)v235 == *((_DWORD *)v40 + 2))
        *(_BYTE *)(*(_QWORD *)v40 + *((unsigned int *)v40 + 3)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, (WTF *)(v235 + 1), (unint64_t)&__dst);
      else
        *(_BYTE *)(*(_QWORD *)v40 + v235) = -104;
      v36 = 1;
      *(int32x2_t *)((char *)v40 + 12) = vadd_s32(*(int32x2_t *)((char *)v40 + 12), (int32x2_t)0x100000001);
    }
    v46 = v344;
    v40 = v334;
    v42 = *((unsigned int *)v344 + 4);
  }
  else
  {
LABEL_32:
    v46 = v39;
  }
  *(_DWORD *)(*((_QWORD *)v40 + 3) + 12) = v42;
  v47 = *((unsigned int *)v40 + 35);
  if (v47 >= v42)
    goto LABEL_48;
  v48 = *((unsigned int *)v40 + 34);
  v49 = *((_QWORD *)v40 + 16);
  if (v48 < v42)
  {
    v50 = v48 + (v48 >> 2);
    if (v50 >= 0x10)
      v51 = v50 + 1;
    else
      v51 = 16;
    if (v51 <= v42)
      v52 = v42;
    else
      v52 = v51;
    if (v52 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198CE0058);
    }
    v53 = WTF::fastMalloc((WTF *)(4 * v52));
    *((_DWORD *)v40 + 34) = v52;
    *((_QWORD *)v40 + 16) = v53;
    if ((_DWORD)v47)
    {
      v54 = 4 * v47;
      v55 = (_DWORD *)v53;
      v56 = (int *)v49;
      do
      {
        v57 = *v56++;
        *v55++ = v57;
        v54 -= 4;
      }
      while (v54);
    }
    if (!v49)
      goto LABEL_46;
    if (v53 == v49)
    {
      *((_QWORD *)v40 + 16) = 0;
      *((_DWORD *)v40 + 34) = 0;
    }
    WTF::fastFree(v49, v20, v21, v22, (uint64_t)v23, v24, v25, v26);
    v49 = *((_QWORD *)v40 + 16);
  }
  v53 = v49;
  if (v49)
  {
LABEL_46:
    v58 = *((unsigned int *)v40 + 35);
    if ((_DWORD)v58 != (_DWORD)v42)
      memset_pattern16((void *)(v53 + 4 * v58), &unk_19915A570, (4 * v42 - 4 * v58) & 0xFFFFFFFFFFFFFFFCLL);
  }
LABEL_48:
  *((_DWORD *)v40 + 35) = v42;
  v59 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v59 != -1)
  {
    __dst = v390;
    p_dst = &__dst;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  v60 = HIDWORD(qword_1EE3430D8);
  LODWORD(v390[0]) = HIDWORD(qword_1EE3430D8);
  v377 = 1;
  v375 = 0;
  p_dst = 0;
  v61 = (HIDWORD(qword_1EE3430E8) + HIDWORD(qword_1EE3430D8));
  v376 = HIDWORD(qword_1EE3430E8) + HIDWORD(qword_1EE3430D8);
  if (HIDWORD(qword_1EE3430E8) + HIDWORD(qword_1EE3430D8))
  {
    if (v61 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198CE0050);
    }
    v62 = WTF::fastMalloc((WTF *)(4 * v61));
    v375 = v61;
    p_dst = (void **)v62;
    memset_pattern16((void *)v62, &unk_19915A570, 4 * v61);
    v63 = 0;
    do
    {
      v64 = *((_DWORD *)v40 + 60);
      if (v64 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198CDFFF8);
      }
      v65 = *((_DWORD *)v40 + 61);
      if (v65 <= v64)
        v65 = v64 + 1;
      *((_DWORD *)v40 + 60) = v64 + 1;
      *((_DWORD *)v40 + 61) = v65;
      *(_DWORD *)(v62 + v63) = ~v64;
      v63 += 4;
    }
    while (4 * v61 != v63);
  }
  else
  {
    v62 = 0;
  }
  v66 = (JSC::Wasm::TypeDefinition *)((char *)v46 + 8);
  __dst = v40;
  p_p_dst = (uint64_t)&p_dst;
  v380[0] = &v377;
  if (*((_DWORD *)v46 + 8))
    v67 = 0;
  else
    v67 = (char *)v46 + 8;
  if (!*((_DWORD *)v67 + 2))
    goto LABEL_75;
  v68 = 0;
  v69 = 0;
  do
  {
    v70 = *(unsigned __int8 *)(*((_QWORD *)v46 + 1) + 16 * (v68 + *((_DWORD *)v46 + 5)));
    if ((v70 - 254) < 2)
      goto LABEL_63;
    v243 = v70 - 192;
    if (v243 > 0x3D)
      goto LABEL_70;
    if (((1 << v243) & 0x3800000000000000) != 0)
    {
      JSC::Wasm::LLIntGenerator::addArguments(JSC::Wasm::TypeDefinition const&)::$_0::operator()((uint64_t *)&__dst, v68, v390, v61);
      goto LABEL_70;
    }
    if (((1 << v243) & 0xE7C01C001C001) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198CDF5F0);
    }
    if (((1 << v243) & 0x1801800000000) != 0)
    {
LABEL_63:
      if (v69 >= v60)
      {
        v72 = v377++;
        if (v68 >= *((unsigned int *)v40 + 35))
        {
          __break(0xC471u);
          JUMPOUT(0x198CE0048);
        }
        v71 = v72 + 5;
      }
      else
      {
        if (v376 <= v69)
        {
          __break(0xC471u);
          JUMPOUT(0x198CE0038);
        }
        if (v68 >= *((unsigned int *)v40 + 35))
        {
          __break(0xC471u);
          JUMPOUT(0x198CE0040);
        }
        v71 = *((_DWORD *)p_dst + v69++);
      }
      *(_DWORD *)(*((_QWORD *)v40 + 16) + 4 * v68) = v71;
    }
LABEL_70:
    ++v68;
    if (*((_DWORD *)v46 + 8))
      v73 = 0;
    else
      v73 = (char *)v46 + 8;
  }
  while (v68 < *((unsigned int *)v73 + 2));
  v62 = (unint64_t)p_dst;
  v38 = (uint64_t)&v327;
LABEL_75:
  *(_DWORD *)(*((_QWORD *)v40 + 3) + 4) += v61;
  if (v62)
  {
    p_dst = 0;
    v375 = 0;
    WTF::fastFree(v62, v20, v21, v22, (uint64_t)v23, v24, v25, v26);
  }
  v74 = (uint64_t)v327;
  v75 = (void ***)(v329 - (_QWORD)v327);
  if (v329 <= (unint64_t)v327)
    goto LABEL_445;
  v76 = 0;
  LODWORD(v77) = 0;
  LODWORD(v78) = 0;
  v79 = (unint64_t)&v338;
  v327 = (void ***)((char *)v327 + 1);
  v80 = v328 + v74;
  v81 = v74 + 2;
  while (1)
  {
    v82 = *(char *)(v80 + v76);
    v78 = ((v82 & 0x7F) << v77) | v78;
    if ((v82 & 0x80000000) == 0)
      break;
    if ((unint64_t)v75 >= 5)
      v246 = 5;
    else
      v246 = (uint64_t)v75;
    if (v246 - 1 == v76)
      goto LABEL_445;
    v327 = (void ***)(v81 + v76);
    v77 = (v77 + 7);
    if (v75 == (void ***)++v76)
    {
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }
  }
  if ((_DWORD)v76 == 4 && *(unsigned __int8 *)(v80 + v76) >= 0x10u)
  {
LABEL_445:
    v279 = "can't get local groups count";
    v280 = 29;
    goto LABEL_377;
  }
  v83 = *((unsigned int *)v39 + 4);
  v84 = v342;
  if (v342 < v83)
  {
    v66 = v341;
    v244 = HIDWORD(v342);
    if (v83 >= 0x11)
    {
      if (!(v83 >> 28))
      {
        WTF::tryFastMalloc((WTF *)(16 * v83), &__dst);
        v245 = __dst;
        if (__dst)
        {
          LODWORD(v342) = v83;
          v341 = (WTF *)__dst;
          goto LABEL_291;
        }
        LODWORD(v83) = *((_DWORD *)v39 + 4);
      }
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>("can't allocate enough memory for function's ", (unint64_t *)&v327, 45, v83, " arguments", 11, &__dst, *(float *)&v36);
      goto LABEL_251;
    }
    v245 = v343;
    v341 = (WTF *)v343;
    LODWORD(v342) = 16;
LABEL_291:
    memcpy(v245, v66, 16 * v244);
    if (v343 != (_BYTE *)v66 && v66)
    {
      if (v341 == v66)
      {
        v341 = 0;
        LODWORD(v342) = 0;
      }
      WTF::fastFree((unint64_t)v66, v20, v21, v22, (uint64_t)v23, v24, v25, v26);
    }
    v83 = *((unsigned int *)v39 + 4);
    v84 = v342;
  }
  v85 = HIDWORD(v342);
  v86 = v83 + HIDWORD(v342);
  if (v86 > v84)
  {
    v66 = v341;
    if (v86 < 0x11)
    {
      v341 = (WTF *)v343;
      LODWORD(v342) = 16;
      v265 = (WTF *)v343;
    }
    else
    {
      if (v86 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x198CE0088);
      }
      v265 = (WTF *)WTF::fastMalloc((WTF *)(16 * v86));
      LODWORD(v342) = v86;
      v341 = v265;
    }
    memcpy(v265, v66, 16 * v85);
    if (v343 != (_BYTE *)v66 && v66)
    {
      if (v341 == v66)
      {
        v341 = 0;
        LODWORD(v342) = 0;
      }
      WTF::fastFree((unint64_t)v66, v20, v21, v22, (uint64_t)v23, v24, v25, v26);
    }
  }
  if ((_DWORD)v83)
  {
    v87 = 0;
    v88 = HIDWORD(v342);
    do
    {
      *((_OWORD *)v341 + v88) = *(_OWORD *)(*((_QWORD *)v39 + 1) + 16 * (v87 + *((_DWORD *)v39 + 5)));
      v88 = ++HIDWORD(v342);
      ++v87;
    }
    while (v83 != v87);
  }
  v79 = *((unsigned int *)v39 + 4);
  v40 = (JSC::Wasm::LLIntGenerator *)g_config;
  v62 = 0;
  if ((_DWORD)v78)
  {
    v22 = 0;
    v322 = v78;
    while (1)
    {
      v76 = v329;
      v75 = v327;
      v198 = v329 - (_QWORD)v327;
      if (v329 <= (unint64_t)v327)
        goto LABEL_448;
      v199 = 0;
      v200 = 0;
      LODWORD(v201) = 0;
      v77 = v328;
      v327 = (void ***)((char *)v327 + 1);
      while (1)
      {
        v202 = *((char *)v75 + v328 + v199);
        v201 = ((v202 & 0x7F) << v200) | v201;
        if ((v202 & 0x80000000) == 0)
          break;
        v252 = 5;
        if (v198 < 5)
          v252 = v198;
        if (v252 - 1 == v199)
          goto LABEL_448;
        v327 = (void ***)((char *)v75 + v199++ + 2);
        v200 += 7;
        if (!(void ***)((char *)v75 + v199 - v329))
          goto LABEL_299;
      }
      if ((_DWORD)v199 == 4 && *((unsigned __int8 *)v75 + v328 + v199) >= 0x10u)
      {
LABEL_448:
        v221 = "can't get Function's number of locals in group ";
        v222 = 48;
LABEL_250:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v221, (unint64_t *)&v327, v222, v22, &__dst, *(float *)&v36);
LABEL_251:
        v230 = (JSC::Wasm::FunctionCodeBlockGenerator *)__dst;
        goto LABEL_252;
      }
      v203 = v79 + v201;
      if (v203 >= 0xC351)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long>("Function's number of locals is too big ", (unint64_t *)&v327, 40, v203, " maximum ", 10, 50000, &__dst, *(float *)&v36);
        goto LABEL_251;
      }
      LODWORD(v323) = v22;
      if ((unint64_t)v75 + v199 + 1 >= v329)
        goto LABEL_249;
      v204 = v345;
      v205 = (char *)v75 + v199;
      v327 = (void ***)(v205 + 2);
      v206 = v205[v328 + 1];
      if ((v206 & 0x80000000) != 0)
        goto LABEL_249;
      v38 = v206 | (v206 >> 6 << 7);
      if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v206 | ((v206 >> 6) << 7))))
        goto LABEL_249;
      if (!BYTE1(dword_1ECF4C7B0))
        break;
      v208 = (char)v38;
      v209 = (char)v38 + 22;
      if (v209 <= 9 && (((1 << v209) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
      {
        v210 = 227;
        goto LABEL_345;
      }
      if ((v38 + 29) >= 2u)
        goto LABEL_229;
      LODWORD(__dst) = 0;
      if (!WTF::LEBDecoder::decodeInt32(v328, v329, (uint64_t *)&v327, (int *)&__dst))
        goto LABEL_249;
      v208 = (int)__dst;
      if ((__dst & 0x80000000) != 0)
      {
        if ((unint64_t)((int)__dst + 22) > 9
          || ((1 << (__dst + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
        {
          goto LABEL_249;
        }
        goto LABEL_230;
      }
      if (__dst >= *(_DWORD *)(v204 + 100))
      {
        if (!v331)
          goto LABEL_249;
        v268 = v332;
        if (__dst < v332 || __dst >= v333)
          goto LABEL_249;
LABEL_421:
        JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(__dst - v268), v207, (uint64_t)v23, v24, v25, v26, (unsigned int **)&__dst);
        v208 = (unint64_t)__dst;
        __dst = 0;
        if (v208)
        {
          do
          {
            v294 = __ldaxr((unsigned int *)v208);
            v295 = v294 - 1;
          }
          while (__stlxr(v295, (unsigned int *)v208));
          if (!v295)
          {
            atomic_store(1u, (unsigned int *)v208);
            WTF::fastFree(v208, v20, v21, v207, (uint64_t)v23, v24, v25, v26);
          }
        }
        goto LABEL_230;
      }
      if (v331)
      {
        v268 = v332;
        if (__dst >= v332)
          goto LABEL_421;
      }
      v208 = *(_QWORD *)(*(_QWORD *)(v204 + 88) + 8 * __dst);
LABEL_230:
      v210 = v38;
      if (v38 - 252 < 4)
        goto LABEL_231;
      if (v38 - 239 < 2)
      {
        if (BYTE1(dword_1ECF4C7B0))
          goto LABEL_249;
        goto LABEL_231;
      }
      if (v38 == 251)
      {
        if (!HIBYTE(dword_1ECF4C7B0))
          goto LABEL_249;
        v299 = v334;
        *((_BYTE *)v334 + 254) = 1;
        JSC::Wasm::LLIntGenerator::addCrash((JSC::Wasm::LLIntGenerator *)&__dst, (uint64_t)v299, v21, v207, (uint64_t)v23, v24, v25, v26);
        if ((_BYTE)p_p_dst)
        {
          v317 = (JSC::Wasm::FunctionCodeBlockGenerator *)__dst;
          __dst = 0;
          v325 = v317;
          v326 = 1;
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&__dst, v300, v301, v302, v303, v304, v305, v306);
          if (v326)
            goto LABEL_253;
          goto LABEL_153;
        }
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&__dst, v300, v301, v302, v303, v304, v305, v306);
        v210 = 251;
        v38 = 251;
        goto LABEL_231;
      }
      if (v38 - 227 > 1)
        goto LABEL_249;
LABEL_345:
      if (BYTE1(dword_1ECF4C7B0))
        v267 = v208 == 0;
      else
        v267 = 1;
      if (v267)
      {
LABEL_249:
        v221 = "can't get Function local's type in group ";
        v222 = 42;
        LODWORD(v22) = (_DWORD)v323;
        goto LABEL_250;
      }
      if (v210 == 228)
        ++v62;
      v38 = v210;
LABEL_231:
      v321 = v62;
      if (v203 > v342)
      {
        v318 = v341;
        v253 = HIDWORD(v342);
        if (v203 < 0x11)
        {
          v255 = v343;
          v341 = (WTF *)v343;
          LODWORD(v342) = 16;
        }
        else
        {
          WTF::tryFastMalloc((WTF *)(16 * v203), &__dst);
          v255 = __dst;
          if (!__dst)
          {
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral>("can't allocate enough memory for function's ", (unint64_t *)&v327, 45, v203, " locals", 8, &__dst, v254);
            goto LABEL_251;
          }
          LODWORD(v342) = v203;
          v341 = (WTF *)__dst;
        }
        memcpy(v255, v318, 16 * v253);
        if (v343 != (_BYTE *)v318 && v318)
        {
          if (v341 == v318)
          {
            v341 = 0;
            LODWORD(v342) = 0;
          }
          WTF::fastFree((unint64_t)v318, v20, v21, v207, (uint64_t)v23, v24, v25, v26);
        }
      }
      v320 = v203;
      v211 = HIDWORD(v342);
      v212 = HIDWORD(v342) + v201;
      if (v212 > v342)
      {
        v319 = v341;
        if (v212 < 0x11)
        {
          v341 = (WTF *)v343;
          LODWORD(v342) = 16;
          v278 = (WTF *)v343;
        }
        else
        {
          if (v212 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x198CE0078);
          }
          v278 = (WTF *)WTF::fastMalloc((WTF *)(16 * v212));
          LODWORD(v342) = v212;
          v341 = v278;
        }
        memcpy(v278, v319, 16 * v211);
        if (v343 != (_BYTE *)v319 && v319)
        {
          if (v341 == v319)
          {
            v341 = 0;
            LODWORD(v342) = 0;
          }
          WTF::fastFree((unint64_t)v319, v20, v21, v207, (uint64_t)v23, v24, v25, v26);
        }
      }
      if ((_DWORD)v201)
      {
        v213 = HIDWORD(v342);
        v214 = v201;
        do
        {
          v215 = (uint64_t *)((char *)v341 + 16 * v213);
          *v215 = v210;
          v215[1] = v208;
          v213 = ++HIDWORD(v342);
          --v214;
        }
        while (v214);
      }
      v66 = v334;
      *(_DWORD *)(*((_QWORD *)v334 + 3) + 4) += v201;
      if (BYTE1(dword_1ECF4C7B0))
        v216 = 29;
      else
        v216 = 17;
      v79 = v320;
      v62 = v321;
      if ((v216 + v38) <= 1u)
      {
        for (; (_DWORD)v201; LODWORD(v201) = v201 - 1)
        {
          v281 = *((_DWORD *)v66 + 60);
          if (v281 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x198CE0080);
          }
          v282 = *((_DWORD *)v66 + 61);
          if (v282 <= v281)
            v282 = v281 + 1;
          *((_DWORD *)v66 + 60) = v281 + 1;
          *((_DWORD *)v66 + 61) = v282;
          v283 = ~v281;
          LODWORD(__dst) = v283;
          v284 = *((unsigned int *)v66 + 43);
          if ((_DWORD)v284 == *((_DWORD *)v66 + 42))
          {
            WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister>((uint64_t)v66 + 160, (unint64_t)&__dst, v21, v207, (uint64_t)v23, v24, v25, v26);
          }
          else
          {
            *(_DWORD *)(*((_QWORD *)v66 + 20) + 4 * v284) = v283;
            ++*((_DWORD *)v66 + 43);
          }
        }
      }
      else
      {
        v217 = *((_DWORD *)v66 + 60);
        v218 = __CFADD__(v217, (_DWORD)v201);
        v219 = v217 + v201;
        if (v218)
        {
          __break(0xC471u);
          JUMPOUT(0x198CE0070);
        }
        *((_DWORD *)v66 + 60) = v219;
      }
      v220 = *((_DWORD *)v66 + 60);
      if (*((_DWORD *)v66 + 61) < v220)
        *((_DWORD *)v66 + 61) = v220;
      v22 = ((_DWORD)v323 + 1);
      v78 = v322;
      if ((_DWORD)v22 == v322)
        goto LABEL_87;
    }
    if ((v38 + 29) < 2u)
      goto LABEL_249;
LABEL_229:
    v208 = 0;
    goto LABEL_230;
  }
LABEL_87:
  if (BYTE1(dword_1ECF4C7B0))
  {
    if (v62 > DWORD2(v346))
    {
      v289 = v62;
      if (v62 >> 30
        || (v290 = v79,
            v291 = (const void *)v346,
            v292 = HIDWORD(v346),
            WTF::tryFastMalloc((WTF *)(4 * v289), &__dst),
            !__dst))
      {
        v279 = "can't allocate enough memory for tracking function's local initialization";
        v280 = 74;
        goto LABEL_377;
      }
      DWORD2(v346) = v289;
      *(_QWORD *)&v346 = __dst;
      memcpy(__dst, v291, 4 * v292);
      v79 = v290;
      if (v291)
      {
        if ((const void *)v346 == v291)
        {
          *(_QWORD *)&v346 = 0;
          DWORD2(v346) = 0;
        }
        WTF::fastFree((unint64_t)v291, v293, v21, v22, (uint64_t)v23, v24, v25, v26);
      }
    }
    if (v347 < 0)
      v89 = 63;
    else
      v89 = *(_QWORD *)(2 * v347);
    if (v89 < v79)
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v347, v79, 0);
    v90 = *((unsigned int *)v39 + 4);
    if ((_DWORD)v90)
    {
      v91 = 0;
      v92 = *((_DWORD *)v39 + 5);
      v93 = *((_QWORD *)v39 + 1);
      do
      {
        if (*(unsigned __int8 *)(v93 + 16 * (v92 + v91)) == 228)
        {
          v266 = &v347;
          if (v347 >= 0)
            v266 = (uint64_t *)(2 * v347 + 8);
          *(uint64_t *)((char *)v266 + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v91;
        }
        ++v91;
      }
      while (v90 != v91);
    }
  }
  v79 = (unint64_t)v334;
  if (*((_DWORD *)v334 + 43))
  {
    v256 = JSC::Wasm::LLIntGenerator::jsNullConstant(v334);
    v264 = *(unsigned int *)(v79 + 172);
    if ((_DWORD)v264)
    {
      v285 = *(unsigned int **)(v79 + 160);
      v286 = 4 * v264;
      v287 = v256;
      do
      {
        v288 = *v285++;
        JSC::WasmMov::emit<JSC::Wasm::LLIntGenerator>(v79, v288, v287, v259, v260, v261, v262, v263);
        v286 -= 4;
      }
      while (v286);
    }
    WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((_QWORD *)(v79 + 160), v257, v258, v259, v260, v261, v262, v263);
    v79 = (unint64_t)v334;
  }
  v38 = (uint64_t)&__dst;
  v62 = (unint64_t)v380;
  __dst = v380;
  p_p_dst = 16;
  v66 = (WTF *)v383;
  v381 = (WTF *)v383;
  v382 = 16;
  v384 = 0;
  v323 = &v385;
  if (*((_DWORD *)v344 + 8))
    v94 = 0;
  else
    v94 = (char *)v344 + 8;
  v95 = *(_DWORD *)(v79 + 240);
  JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits>::newLabel(v390, v79, v21, v22, (uint64_t)v23, v24, v25, v26);
  v386 = 1;
  v387 = v94;
  v388 = v95;
  v389 = (_DWORD *)v390[0];
  LODWORD(v79) = HIDWORD(v339);
  if (HIDWORD(v339) == (_DWORD)v339)
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry>((uint64_t)&v338, (unint64_t)&__dst);
  }
  else
  {
    v78 = (unint64_t)v338;
    v75 = (void ***)((char *)v338 + 872 * HIDWORD(v339));
    v77 = (uint64_t)(v75 + 2);
    *v75 = (void **)(v75 + 2);
    v75[1] = (void **)16;
    v97 = (void **)__dst;
    if (__dst == v380)
    {
      v76 = HIDWORD(p_p_dst);
      if (HIDWORD(p_p_dst))
      {
LABEL_300:
        v247 = 24 * v76;
        v248 = v62;
        do
        {
          v96 = *(_OWORD *)v248;
          *(_QWORD *)(v77 + 16) = *(_QWORD *)(v248 + 16);
          *(_OWORD *)v77 = v96;
          v77 += 24;
          v248 += 24;
          v247 -= 24;
        }
        while (v247);
      }
    }
    else
    {
      __dst = v380;
      *v75 = v97;
      v307 = p_p_dst;
      LODWORD(p_p_dst) = 16;
      *((_DWORD *)v75 + 2) = v307;
    }
    v98 = HIDWORD(p_p_dst);
    HIDWORD(p_p_dst) = 0;
    *((_DWORD *)v75 + 3) = v98;
    v99 = (char *)(v78 + 872 * v79);
    v100 = v99 + 416;
    *((_QWORD *)v99 + 50) = v99 + 416;
    v101 = v99 + 412;
    *((_QWORD *)v99 + 51) = 16;
    v102 = v381;
    if (v381 == v66)
    {
      if (HIDWORD(v382))
      {
        v249 = 24 * HIDWORD(v382);
        v250 = v66;
        do
        {
          v96 = *(_OWORD *)v250;
          *((_QWORD *)v100 + 2) = *((_QWORD *)v250 + 2);
          *(_OWORD *)v100 = v96;
          v100 += 24;
          v250 = (WTF *)((char *)v250 + 24);
          v249 -= 24;
        }
        while (v249);
      }
    }
    else
    {
      v381 = v66;
      *((_QWORD *)v99 + 50) = v102;
      v308 = v382;
      LODWORD(v382) = 16;
      *((_DWORD *)v99 + 102) = v308;
    }
    v103 = v38 + 848;
    v104 = HIDWORD(v382);
    HIDWORD(v382) = 0;
    *v101 = v104;
    v105 = (char *)(v78 + 872 * v79);
    *((_DWORD *)v105 + 200) = v384;
    v105[808] = 0;
    *((_DWORD *)v105 + 210) = -1;
    v106 = v386;
    if (v386 != -1)
    {
      v107 = (int *)(v105 + 840);
      ((void (*)(_QWORD *, char *, uint64_t *))off_1E35B5A90[v386])(v390, v105 + 808, v323);
      *v107 = v106;
    }
    v108 = (char *)(v78 + 872 * v79);
    v109 = *(_QWORD *)v103;
    *((_DWORD *)v108 + 214) = *(_DWORD *)(v103 + 8);
    *((_QWORD *)v108 + 106) = v109;
    v110 = v389;
    v389 = 0;
    *((_QWORD *)v108 + 108) = v110;
    ++HIDWORD(v339);
  }
  v111 = v389;
  v389 = 0;
  if (v111)
    --*v111;
  if (v386 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E35B5A60[v386])(v390, v323);
  v386 = -1;
  v112 = v381;
  if (v66 != v381 && v381)
  {
    v381 = 0;
    LODWORD(v382) = 0;
    WTF::fastFree((unint64_t)v112, v20, v21, v22, (uint64_t)v23, v24, v25, v26);
  }
  v113 = (JSC::Wasm::WasmOpcodeCounter *)__dst;
  if ((void *)v62 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(p_p_dst) = 0;
    WTF::fastFree((unint64_t)v113, v20, v21, v22, (uint64_t)v23, v24, v25, v26);
  }
  if (!HIDWORD(v339))
  {
LABEL_127:
    if (*((_DWORD *)v344 + 8))
      v117 = 0;
    else
      v117 = (uint64_t)v344 + 8;
    if (HIDWORD(v336) != *(_DWORD *)(v117 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x198CDFB88);
    }
    v118 = v334;
    if (*((_BYTE *)v334 + 254))
    {
      v269 = *((_QWORD *)v334 + 14);
      v270 = *((_DWORD *)v334 + 30);
      if (*(_DWORD *)(v269 + 132) <= v270)
      {
        __break(0xC471u);
        JUMPOUT(0x198CE0090);
      }
      v271 = *(_QWORD *)(v269 + 120) + 40 * v270;
      *(_BYTE *)(v271 + 32) |= 1u;
    }
    if (*((_BYTE *)v118 + 252))
    {
      v272 = *((_QWORD *)v118 + 14);
      v273 = *((_DWORD *)v118 + 30);
      if (*(_DWORD *)(v272 + 132) <= v273)
      {
        __break(0xC471u);
        JUMPOUT(0x198CE0098);
      }
      v274 = *(_QWORD *)(v272 + 120) + 40 * v273;
      *(_BYTE *)(v274 + 32) |= 2u;
    }
    if (*((_BYTE *)v118 + 253))
    {
      v275 = *((_QWORD *)v118 + 14);
      v276 = *((_DWORD *)v118 + 30);
      if (*(_DWORD *)(v275 + 132) <= v276)
      {
        __break(0xC471u);
        JUMPOUT(0x198CE00A0);
      }
      v277 = *(_QWORD *)(v275 + 120) + 40 * v276;
      *(_BYTE *)(v277 + 32) |= 4u;
    }
    v119 = *((_QWORD *)v118 + 14);
    v120 = *((_DWORD *)v118 + 30);
    if (*(_DWORD *)(v119 + 132) <= v120)
    {
      __break(0xC471u);
      JUMPOUT(0x198CE0060);
    }
    v121 = *(_QWORD *)(v119 + 120) + 40 * v120;
    *(_BYTE *)(v121 + 32) |= 8u;
    if (*(_DWORD *)(v117 + 12))
    {
      JSC::Wasm::LLIntGenerator::callInformationForCallee((uint64_t)&__dst, (uint64_t)v118, v117, v22, (uint64_t)v23, v24, v25, v26);
      if (HIDWORD(p_p_dst))
      {
        v129 = 0;
        v130 = 24 * HIDWORD(v336) - 24 * HIDWORD(p_p_dst) + 16;
        do
        {
          v131 = *(unsigned int *)((char *)v335 + v130);
          v132 = *((_DWORD *)__dst + v129);
          if ((_DWORD)v131 != v132
            && (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>((uint64_t)v118, *((_DWORD *)__dst + v129), *(unsigned int *)((char *)v335 + v130), v124, v125, v126, v127, v128) & 1) == 0&& (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)v118, v132, v131, v124, v125, v126, v127, v128) & 1) == 0)
          {
            JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)v118, v132, v131, v124, v125, v126, v127, v128);
          }
          ++v129;
          v130 += 24;
        }
        while (v129 < HIDWORD(p_p_dst));
      }
      v133 = __dst;
      if (v380 != __dst && __dst != 0)
      {
        __dst = 0;
        LODWORD(p_p_dst) = 0;
        WTF::fastFree((unint64_t)v133, v122, v123, v124, v125, v126, v127, v128);
      }
      v135 = *((_DWORD *)v118 + 4);
      __dst = v118;
      LODWORD(p_p_dst) = v135;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)v118 + 10, &__dst, v123, v124, v125, v126, v127, v128);
      v136 = -106;
      *((_DWORD *)v118 + 9) = 150;
      LOBYTE(__dst) = -106;
      v137 = *((unsigned int *)v118 + 3);
      v138 = *((unsigned int *)v118 + 4);
      if (v137 <= v138)
      {
        if ((_DWORD)v137 != *((_DWORD *)v118 + 2))
        {
          v139 = *(_QWORD *)v118;
          v140 = -106;
LABEL_151:
          *(_BYTE *)(v139 + v137) = v140;
LABEL_152:
          *(int32x2_t *)((char *)v118 + 12) = vadd_s32(*(int32x2_t *)((char *)v118 + 12), (int32x2_t)0x100000001);
LABEL_153:
          if (!v351)
          {
            __break(0xC471u);
            JUMPOUT(0x198CDFBA8);
          }
          if (HIDWORD(v373[0]) == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x198CE0068);
          }
          *((_DWORD *)v351 + 2) = (HIDWORD(v373[0]) + 1) & 0xFFFFFFFE;
          v141 = atomic_load(&_MergedGlobals_52);
          if (v141 != -1)
          {
            __dst = &v325;
            p_dst = &__dst;
            std::__call_once(&_MergedGlobals_52, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::threadSpecificBuffer(void)::$_0 &&>>);
          }
          v142 = (pthread_key_t *)qword_1ECF59030;
          v143 = v351;
          BYTE4(__src[2]) = 1;
          v144 = HIDWORD(__src[1]);
          if (HIDWORD(__src[1]))
          {
            v145 = (void *)WTF::fastMalloc((WTF *)HIDWORD(__src[1]));
            v146 = HIDWORD(__src[1]);
          }
          else
          {
            v146 = 0;
            v145 = 0;
          }
          if (v146 != (_DWORD)v144)
          {
            __break(0xC471u);
            JUMPOUT(0x198CDFBC8);
          }
          memcpy(v145, __src[0], v144);
          v147 = __src[0];
          __src[0] = 0;
          v148 = (int)__src[1];
          __src[1] = 0;
          v149 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v149 = v145;
          *(_DWORD *)(v149 + 8) = v144;
          *(_DWORD *)(v149 + 12) = v144;
          v157 = *((_QWORD *)v143 + 7);
          *((_QWORD *)v143 + 7) = v149;
          if (v157)
          {
            v158 = *(_QWORD *)v157;
            if (*(_QWORD *)v157)
            {
              *(_QWORD *)v157 = 0;
              *(_DWORD *)(v157 + 8) = 0;
              WTF::fastFree(v158, v150, v151, v152, v153, v154, v155, v156);
            }
            WTF::fastFree(v157, v150, v151, v152, v153, v154, v155, v156);
            v149 = *((_QWORD *)v143 + 7);
          }
          *((_QWORD *)v143 + 8) = *(_QWORD *)v149;
          v166 = (uint64_t)pthread_getspecific(*v142);
          if (!v166)
            v166 = WTF::ThreadSpecific<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,(WTF::CanBeGCThread)0>::set(v142);
          v167 = *(_QWORD *)v166;
          if (*(_QWORD *)v166)
          {
            *(_QWORD *)v166 = 0;
            *(_DWORD *)(v166 + 8) = 0;
            WTF::fastFree(v167, v159, v160, v161, v162, v163, v164, v165);
          }
          v168 = 0;
          *(_QWORD *)v166 = v147;
          *(_DWORD *)(v166 + 8) = v148;
          *(_DWORD *)(v166 + 12) = 0;
          v169 = v351;
          v351 = 0;
          goto LABEL_169;
        }
        goto LABEL_322;
      }
    }
    else
    {
      v237 = *((_DWORD *)v118 + 4);
      __dst = v118;
      LODWORD(p_p_dst) = v237;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)v118 + 10, &__dst, v117, v22, (uint64_t)v23, v24, v25, v26);
      v136 = -103;
      *((_DWORD *)v118 + 9) = 153;
      LOBYTE(__dst) = -103;
      v137 = *((unsigned int *)v118 + 3);
      v138 = *((unsigned int *)v118 + 4);
      if (v137 <= v138)
      {
        if ((_DWORD)v137 != *((_DWORD *)v118 + 2))
        {
          v139 = *(_QWORD *)v118;
          v140 = -103;
          goto LABEL_151;
        }
LABEL_322:
        *(_BYTE *)(*(_QWORD *)v118 + *((unsigned int *)v118 + 3)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v118, (WTF *)(v137 + 1), (unint64_t)&__dst);
        goto LABEL_152;
      }
    }
    *((_DWORD *)v118 + 4) = v138 + 1;
    *(_BYTE *)(*(_QWORD *)v118 + v138) = v136;
    goto LABEL_153;
  }
  while (2)
  {
    v114 = (uint64_t)v327;
    *(_QWORD *)&v349 = v327;
    if ((unint64_t)v327 >= v329)
    {
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't decode opcode", (unint64_t *)&v327, 20, &p_dst, *(float *)&v36);
      goto LABEL_281;
    }
    v327 = (void ***)((char *)v327 + 1);
    v115 = *(unsigned __int8 *)(v328 + v114);
    if (v115 == 255
      || ((JSC::Wasm::isValidOpType<unsigned char>(unsigned char)::valid[v115 >> 3] >> (v115 & 7)) & 1) == 0)
    {
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("invalid opcode ", (unint64_t *)&v327, 16, v115, &p_dst, *(float *)&v36);
LABEL_281:
      LOBYTE(v375) = 1;
      goto LABEL_283;
    }
    v348 = *(_BYTE *)(v328 + v114);
    if (*((_BYTE *)v40 + 1934))
    {
      v242 = JSC::Wasm::WasmOpcodeCounter::singleton(v113);
      JSC::Wasm::WasmOpcodeCounter::increment((uint64_t)v242, v348);
    }
    if (DWORD2(v349))
      JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseUnreachableExpression(&__dst, (uint64_t)&v327, v21, v115, (uint64_t)v23, v24, v25, v26, *(double *)&v96, *(float *)&v36);
    else
      v113 = (JSC::Wasm::WasmOpcodeCounter *)JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseExpression((WTF *)&__dst);
    if (!(_BYTE)p_p_dst)
    {
      if (!HIDWORD(v339))
        goto LABEL_127;
      continue;
    }
    break;
  }
  v241 = (void **)__dst;
  __dst = 0;
  p_dst = v241;
  LOBYTE(v375) = 1;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&__dst, v116, v21, v22, (uint64_t)v23, v24, v25, v26);
LABEL_283:
  v230 = (JSC::Wasm::FunctionCodeBlockGenerator *)p_dst;
LABEL_252:
  v325 = v230;
  v326 = 1;
LABEL_253:
  v169 = v325;
  v325 = 0;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v325, v223, v224, v225, v226, v227, v228, v229);
  v168 = 1;
LABEL_169:
  *(_QWORD *)v324 = v169;
  *(_DWORD *)(v324 + 8) = v168;
  if ((v347 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v347, v159, v160, v161, v162, v163, v164, v165);
  v170 = v346;
  if ((_QWORD)v346)
  {
    *(_QWORD *)&v346 = 0;
    DWORD2(v346) = 0;
    WTF::fastFree(v170, v159, v160, v161, v162, v163, v164, v165);
  }
  v171 = v341;
  if (v343 != (_BYTE *)v341 && v341)
  {
    v341 = 0;
    LODWORD(v342) = 0;
    WTF::fastFree((unint64_t)v171, v159, v160, v161, v162, v163, v164, v165);
  }
  if (HIDWORD(v339))
    WTF::VectorTypeOperations<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::ControlEntry>::destruct(v338, (_QWORD *)v338 + 109 * HIDWORD(v339), v160, v161, v162, v163, v164, v165);
  v172 = v338;
  if (v340 != (_BYTE *)v338 && v338)
  {
    v338 = 0;
    LODWORD(v339) = 0;
    WTF::fastFree((unint64_t)v172, v159, v160, v161, v162, v163, v164, v165);
  }
  v173 = v335;
  if (v337 != (_BYTE *)v335 && v335)
  {
    v335 = 0;
    LODWORD(v336) = 0;
    WTF::fastFree((unint64_t)v173, v159, v160, v161, v162, v163, v164, v165);
  }
  v174 = v370;
  if (&v372 != (uint64_t *)v370 && v370)
  {
    v370 = 0;
    LODWORD(v371) = 0;
    WTF::fastFree((unint64_t)v174, v159, v160, v161, v162, v163, v164, v165);
  }
  if (v369)
    WTF::fastFree(v369 - 16, v159, v160, v161, v162, v163, v164, v165);
  v175 = v366;
  if (v368 != (_BYTE *)v366 && v366)
  {
    v366 = 0;
    LODWORD(v367) = 0;
    WTF::fastFree((unint64_t)v175, v159, v160, v161, v162, v163, v164, v165);
  }
  v176 = v364;
  if (v364)
  {
    v238 = *(unsigned int *)(v364 - 4);
    if ((_DWORD)v238)
    {
      v239 = v364 + 8;
      do
      {
        if (*(_QWORD *)(v239 - 8) != -1)
        {
          v240 = *(_QWORD *)v239;
          if (*(_QWORD *)v239)
          {
            *(_QWORD *)v239 = 0;
            *(_DWORD *)(v239 + 8) = 0;
            WTF::fastFree(v240, v159, v160, v161, v162, v163, v164, v165);
          }
        }
        v239 += 24;
        --v238;
      }
      while (v238);
    }
    WTF::fastFree(v176 - 16, v159, v160, v161, v162, v163, v164, v165);
  }
  v177 = v362;
  if (v362)
  {
    v362 = 0;
    LODWORD(v363) = 0;
    WTF::fastFree((unint64_t)v177, v159, v160, v161, v162, v163, v164, v165);
  }
  if (*((_QWORD *)&v357 + 1))
  {
    v178 = 0;
    do
    {
      if (HIDWORD(v358) <= v178 >> 5)
      {
        __break(0xC471u);
        JUMPOUT(0x198CE0028);
      }
      ++v178;
    }
    while (*((_QWORD *)&v357 + 1) != v178);
  }
  if (HIDWORD(v358))
  {
    v179 = 0;
    do
      WTF::fastFree(*(_QWORD *)(v358 + 8 * v179++), v159, v160, v161, v162, v163, v164, v165);
    while (v179 < HIDWORD(v358));
  }
  v180 = v358;
  if ((_QWORD)v358)
  {
    *(_QWORD *)&v358 = 0;
    DWORD2(v358) = 0;
    WTF::fastFree(v180, v159, v160, v161, v162, v163, v164, v165);
  }
  v181 = v356;
  if ((_QWORD)v356)
  {
    v182 = 0;
    do
    {
      if (v182 >> 5 >= DWORD1(v357))
      {
        __break(0xC471u);
        JUMPOUT(0x198CE0030);
      }
      v183 = *(_QWORD *)(*((_QWORD *)&v356 + 1) + 8 * (v182 >> 5)) + ((v182 & 0x1F) << 6);
      v184 = *(_QWORD *)(v183 + 16);
      if (v183 + 32 != v184 && v184 != 0)
      {
        *(_QWORD *)(v183 + 16) = 0;
        *(_DWORD *)(v183 + 24) = 0;
        WTF::fastFree(v184, v159, v160, v161, v162, v163, v164, v165);
        v181 = v356;
      }
      ++v182;
    }
    while (v182 < v181);
  }
  if (DWORD1(v357))
  {
    v186 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)&v356 + 1) + 8 * v186++), v159, v160, v161, v162, v163, v164, v165);
    while (v186 < DWORD1(v357));
  }
  v187 = *((_QWORD *)&v356 + 1);
  if (*((_QWORD *)&v356 + 1))
  {
    *((_QWORD *)&v356 + 1) = 0;
    LODWORD(v357) = 0;
    WTF::fastFree(v187, v159, v160, v161, v162, v163, v164, v165);
  }
  v188 = v351;
  v351 = 0;
  if (v188)
  {
    JSC::Wasm::FunctionCodeBlockGenerator::~FunctionCodeBlockGenerator(v188, v159, v160, v161, v162, v163, v164, v165);
    WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
  }
  v197 = __src[0];
  if (__src[0])
  {
    __src[0] = 0;
    LODWORD(__src[1]) = 0;
    WTF::fastFree((unint64_t)v197, v159, v160, v161, v162, v163, v164, v165);
  }
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32Sub@<X0>(_DWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  char v19;
  char v20;
  char v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  _DWORD *v29;
  int v30;

  v9 = result[60];
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = (uint64_t)result;
    v14 = result[61];
    if (v14 <= v9)
      v14 = v9 + 1;
    result[60] = v9 + 1;
    result[61] = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_22;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (v16
      && ((int)a3 <= 0x3FFFFFFF
        ? (v17 = (a3 + 128) < 0x90)
        : (v17 = (a3 - 1073741808) < 0x80),
          v17))
    {
      v18 = result[4];
      v29 = result;
      v30 = v18;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v29, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 1);
      v19 = 15 - v9;
      if (v9 >= -1073741824)
        v19 = ~(_BYTE)v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v19);
      v20 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v20 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v20);
      v21 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v21 = v10;
      result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v21);
    }
    else
    {
LABEL_22:
      if (v9 >= -1073741824)
        v22 = (v9 + 64) >> 6 < 0x201;
      else
        v22 = (v9 + 1073774528) < 0x8000;
      if (!v22)
        goto LABEL_39;
      v23 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v23 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v23)
        goto LABEL_39;
      v24 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v24 = (a3 + 0x8000) >> 6 < 0x201;
      if (v24)
      {
        v25 = result[4];
        v29 = result;
        v30 = v25;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v29, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 141);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 1);
        v26 = 63 - v9;
        if (v9 >= -1073741824)
          v26 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v26);
        v27 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v27 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v27);
        v28 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v28 = v10;
        result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v28);
      }
      else
      {
LABEL_39:
        result = (_DWORD *)JSC::WasmI32Sub::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(result, ~v9, a2, a3, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Mul@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  _DWORD *v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = (_DWORD *)result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_21;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_21;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v28 = result;
      v29 = v18;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v28, a3, (uint64_t)a4, a5, a6, a7, a8);
      v12[9] = 2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)v12, 2);
      v19 = 15 - v9;
      if (v9 >= -1073741824)
        v19 = ~(_BYTE)v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)v12, v19);
      v20 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v20 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)v12, v20);
      v21 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v21 = v10;
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)v12, v21);
    }
    else
    {
LABEL_21:
      v22 = a2;
      v23 = a3;
      result = JSC::WasmI32Mul::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a3);
      if ((result & 1) == 0)
        result = JSC::WasmI32Mul::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(v12, ~v9, v22, v23, v24, v25, v26, v27);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32DivS@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI32DivS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32DivU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI32DivU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32RemS@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI32RemS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32RemU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI32RemU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32And@<X0>(_DWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  char v19;
  char v20;
  char v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  _DWORD *v29;
  int v30;

  v9 = result[60];
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = (uint64_t)result;
    v14 = result[61];
    if (v14 <= v9)
      v14 = v9 + 1;
    result[60] = v9 + 1;
    result[61] = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_22;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (v16
      && ((int)a3 <= 0x3FFFFFFF
        ? (v17 = (a3 + 128) < 0x90)
        : (v17 = (a3 - 1073741808) < 0x80),
          v17))
    {
      v18 = result[4];
      v29 = result;
      v30 = v18;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v29, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 7;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 7);
      v19 = 15 - v9;
      if (v9 >= -1073741824)
        v19 = ~(_BYTE)v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v19);
      v20 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v20 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v20);
      v21 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v21 = v10;
      result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v21);
    }
    else
    {
LABEL_22:
      if (v9 >= -1073741824)
        v22 = (v9 + 64) >> 6 < 0x201;
      else
        v22 = (v9 + 1073774528) < 0x8000;
      if (!v22)
        goto LABEL_39;
      v23 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v23 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v23)
        goto LABEL_39;
      v24 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v24 = (a3 + 0x8000) >> 6 < 0x201;
      if (v24)
      {
        v25 = result[4];
        v29 = result;
        v30 = v25;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v29, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 7;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 141);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 7);
        v26 = 63 - v9;
        if (v9 >= -1073741824)
          v26 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v26);
        v27 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v27 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v27);
        v28 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v28 = v10;
        result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v28);
      }
      else
      {
LABEL_39:
        result = (_DWORD *)JSC::WasmI32And::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(result, ~v9, a2, a3, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32Or@<X0>(_DWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  char *v35;
  _DWORD *v36;
  int v37;

  v9 = result[60];
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = (uint64_t)result;
    v14 = result[61];
    if (v14 <= v9)
      v14 = v9 + 1;
    result[60] = v9 + 1;
    result[61] = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_30;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (v16
      && ((int)a3 <= 0x3FFFFFFF
        ? (v17 = (a3 + 128) < 0x90)
        : (v17 = (a3 - 1073741808) < 0x80),
          v17))
    {
      v18 = result[4];
      v36 = result;
      v37 = v18;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v36, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 8;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 8);
      v19 = 15 - v9;
      if (v9 >= -1073741824)
        v19 = ~(_BYTE)v9;
      LOBYTE(v36) = v19;
      v20 = *(unsigned int *)(v12 + 12);
      v21 = *(unsigned int *)(v12 + 16);
      if (v20 > v21)
      {
        *(_DWORD *)(v12 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v21) = v19;
        v22 = *(_DWORD *)(v12 + 12);
        v23 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v20 == *(_DWORD *)(v12 + 8))
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v20 + 1), (unint64_t)&v36);
        else
          *(_BYTE *)(*(_QWORD *)v12 + v20) = v19;
        v22 = *(_DWORD *)(v12 + 12) + 1;
        v23 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v22;
        *(_DWORD *)(v12 + 16) = v23;
      }
      v24 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v24 = a2;
      LOBYTE(v36) = v24;
      if (v22 > v23)
      {
        *(_DWORD *)(v12 + 16) = v23 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v23) = v24;
      }
      else
      {
        v25 = v22;
        if (v22 == *(_DWORD *)(v12 + 8))
        {
          v35 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v22 + 1), (unint64_t)&v36);
          v25 = *(unsigned int *)(v12 + 12);
          v26 = *(_QWORD *)v12;
          v24 = *v35;
        }
        else
        {
          v26 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v26 + v25) = v24;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
      v27 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v27 = v10;
      result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v27);
    }
    else
    {
LABEL_30:
      if (v9 >= -1073741824)
        v28 = (v9 + 64) >> 6 < 0x201;
      else
        v28 = (v9 + 1073774528) < 0x8000;
      if (!v28)
        goto LABEL_49;
      v29 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v29 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v29)
        goto LABEL_49;
      v30 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v30 = (a3 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = result[4];
        v36 = result;
        v37 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v36, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 8;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 141);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 8);
        v32 = 63 - v9;
        if (v9 >= -1073741824)
          v32 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v32);
        v33 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v33 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v33);
        v34 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v34 = v10;
        result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v34);
      }
      else
      {
LABEL_49:
        result = (_DWORD *)JSC::WasmI32Or::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(result, ~v9, a2, a3, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Xor@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_32;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_32;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v38 = result;
      v39 = v18;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v38, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 9;
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 9);
      v19 = 15 - v9;
      if (v9 >= -1073741824)
        v19 = ~(_BYTE)v9;
      LOBYTE(v38) = v19;
      v20 = *(unsigned int *)(v12 + 12);
      v21 = *(unsigned int *)(v12 + 16);
      if (v20 > v21)
      {
        *(_DWORD *)(v12 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v21) = v19;
        v22 = *(_DWORD *)(v12 + 12);
        v23 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v20 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v20 + 1), (unint64_t)&v38);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v20) = v19;
        }
        v22 = *(_DWORD *)(v12 + 12) + 1;
        v23 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v22;
        *(_DWORD *)(v12 + 16) = v23;
      }
      v24 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v24 = a2;
      LOBYTE(v38) = v24;
      if (v22 > v23)
      {
        *(_DWORD *)(v12 + 16) = v23 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v23) = v24;
        v27 = *(_DWORD *)(v12 + 12);
        v28 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v25 = v22;
        if (v22 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v22 + 1), (unint64_t)&v38);
          v25 = *(unsigned int *)(v12 + 12);
          v26 = *(_QWORD *)v12;
          v24 = *(_BYTE *)result;
        }
        else
        {
          v26 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v26 + v25) = v24;
        v27 = *(_DWORD *)(v12 + 12) + 1;
        v28 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v27;
        *(_DWORD *)(v12 + 16) = v28;
      }
      v29 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v29 = v10;
      LOBYTE(v38) = v29;
      if (v27 > v28)
      {
        *(_DWORD *)(v12 + 16) = v28 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v28) = v29;
      }
      else
      {
        v30 = v27;
        if (v27 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v27 + 1), (unint64_t)&v38);
          v30 = *(unsigned int *)(v12 + 12);
          v31 = *(_QWORD *)v12;
          v29 = *(_BYTE *)result;
        }
        else
        {
          v31 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v31 + v30) = v29;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_32:
      v32 = a2;
      v33 = a3;
      result = JSC::WasmI32Xor::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a3);
      if ((result & 1) == 0)
        result = JSC::WasmI32Xor::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>((_DWORD *)v12, ~v9, v32, v33, v34, v35, v36, v37);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32Shl@<X0>(_DWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  char *v47;
  _DWORD *v48;
  int v49;

  v9 = result[60];
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = (uint64_t)result;
    v14 = result[61];
    if (v14 <= v9)
      v14 = v9 + 1;
    result[60] = v9 + 1;
    result[61] = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_37;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (v16
      && ((int)a3 <= 0x3FFFFFFF
        ? (v17 = (a3 + 128) < 0x90)
        : (v17 = (a3 - 1073741808) < 0x80),
          v17))
    {
      v18 = result[4];
      v48 = result;
      v49 = v18;
      result = JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v48, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 10;
      LOBYTE(v48) = 10;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 10;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = (_DWORD *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v48);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 10;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v48) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = (_DWORD *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v48);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v48) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = (_DWORD *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v48);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v48) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = (_DWORD *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v48);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_37:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_63;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_63;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = result[4];
        v48 = result;
        v49 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v48, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 10;
        LOBYTE(v48) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v48);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v47;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 10);
        v44 = 63 - v9;
        if (v9 >= -1073741824)
          v44 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v44);
        v45 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v45 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v45);
        v46 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v46 = v10;
        result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v46);
      }
      else
      {
LABEL_63:
        result = (_DWORD *)JSC::WasmI32Shl::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(result, ~v9, a2, a3, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32ShrU@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_37;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (v16
      && ((int)a3 <= 0x3FFFFFFF
        ? (v17 = (a3 + 128) < 0x90)
        : (v17 = (a3 - 1073741808) < 0x80),
          v17))
    {
      v18 = *(_DWORD *)(result + 16);
      v54 = result;
      v55 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v54, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 11;
      LOBYTE(v54) = 11;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 11;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v54);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 11;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v54) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v54);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v54) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v54);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v54) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v54);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_37:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_68;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_68;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v54 = result;
        v55 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v54, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 11;
        LOBYTE(v54) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v52 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v54);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v52;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 11;
        LOBYTE(v54) = 11;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 11;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v54);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v53;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_68:
        result = JSC::WasmI32ShrU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(result, ~v9, a2, a3, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32ShrS@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_36;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_36;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v42 = result;
      v43 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v42, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 12;
      LOBYTE(v42) = 12;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 12;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v42);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 12;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v42) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v42);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v42) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v42);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v42) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v42);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_36:
      v36 = a2;
      v37 = a3;
      result = JSC::WasmI32ShrS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a3);
      if ((result & 1) == 0)
        result = JSC::WasmI32ShrS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v9, v36, v37, v38, v39, v40, v41);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Rotr@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 13;
      LOBYTE(v66) = 13;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 13;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 13;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 13;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 13;
        LOBYTE(v66) = 13;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 13;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 13;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 13;
        LOBYTE(v66) = 13;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 13;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Rotl@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 14;
      LOBYTE(v66) = 14;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 14;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 14;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 14;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 14;
        LOBYTE(v66) = 14;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 14;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 14;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 14;
        LOBYTE(v66) = 14;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 14;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Eq@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_36;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_36;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v42 = result;
      v43 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v42, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 15;
      LOBYTE(v42) = 15;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 15;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v42);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 15;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v42) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v42);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v42) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v42);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v42) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v42);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_36:
      v36 = a2;
      v37 = a3;
      result = JSC::WasmI32Eq::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a3);
      if ((result & 1) == 0)
        result = JSC::WasmI32Eq::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v9, v36, v37, v38, v39, v40, v41);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Ne@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_36;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_36;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v42 = result;
      v43 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v42, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 16;
      LOBYTE(v42) = 16;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 16;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v42);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 16;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v42) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v42);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v42) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v42);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v42) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v42);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_36:
      v36 = a2;
      v37 = a3;
      result = JSC::WasmI32Ne::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a3);
      if ((result & 1) == 0)
        result = JSC::WasmI32Ne::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v9, v36, v37, v38, v39, v40, v41);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32LtS@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_36;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_36;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v42 = result;
      v43 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v42, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 17;
      LOBYTE(v42) = 17;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 17;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v42);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 17;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v42) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v42);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v42) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v42);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v42) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v42);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_36:
      v36 = a2;
      v37 = a3;
      result = JSC::WasmI32LtS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a3);
      if ((result & 1) == 0)
        result = JSC::WasmI32LtS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v9, v36, v37, v38, v39, v40, v41);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32LeS@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI32LeS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32LtU@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_37;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (v16
      && ((int)a3 <= 0x3FFFFFFF
        ? (v17 = (a3 + 128) < 0x90)
        : (v17 = (a3 - 1073741808) < 0x80),
          v17))
    {
      v18 = *(_DWORD *)(result + 16);
      v54 = result;
      v55 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v54, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 19;
      LOBYTE(v54) = 19;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 19;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v54);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 19;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v54) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v54);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v54) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v54);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v54) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v54);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_37:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_66;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_66;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v54 = result;
        v55 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v54, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 19;
        LOBYTE(v54) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v52 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v54);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v52;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 19;
        LOBYTE(v54) = 19;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 19;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v54);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v53;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_66:
        result = JSC::WasmI32LtU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(result, ~v9, a2, a3, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32LeU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI32LeU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32GtS@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_36;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_36;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v42 = result;
      v43 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v42, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 21;
      LOBYTE(v42) = 21;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 21;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v42);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 21;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v42) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v42);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v42) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v42);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v42) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v42);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_36:
      v36 = a2;
      v37 = a3;
      result = JSC::WasmI32GtS::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a3);
      if ((result & 1) == 0)
        result = JSC::WasmI32GtS::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v9, v36, v37, v38, v39, v40, v41);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32GeS@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI32GeS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32GtU@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_36;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_36;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v42 = result;
      v43 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v42, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 23;
      LOBYTE(v42) = 23;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 23;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v42);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 23;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v42) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v42);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v42) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v42);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v42) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v42);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_36:
      v36 = a2;
      v37 = a3;
      result = JSC::WasmI32GtU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a3);
      if ((result & 1) == 0)
        result = JSC::WasmI32GtU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v9, v36, v37, v38, v39, v40, v41);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32GeU@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_36;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_36;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v42 = result;
      v43 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v42, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 24;
      LOBYTE(v42) = 24;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 24;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v42);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 24;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v42) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v42);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v42) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v42);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v42) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v42);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_36:
      v36 = a2;
      v37 = a3;
      result = JSC::WasmI32GeU::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a3);
      if ((result & 1) == 0)
        result = JSC::WasmI32GeU::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v9, v36, v37, v38, v39, v40, v41);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Clz@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 25;
      LOBYTE(v57) = 25;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 25;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 25;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 25;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 25;
        LOBYTE(v57) = 25;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 25;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 25;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 25;
        LOBYTE(v57) = 25;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 25;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Ctz@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 26;
      LOBYTE(v57) = 26;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 26;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 26;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 26;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 26;
        LOBYTE(v57) = 26;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 26;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 26;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 26;
        LOBYTE(v57) = 26;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 26;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Popcnt@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 27;
      LOBYTE(v57) = 27;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 27;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 27;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 27;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 27;
        LOBYTE(v57) = 27;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 27;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 27;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 27;
        LOBYTE(v57) = 27;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 27;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Eqz@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = *(_DWORD *)(result + 240);
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v12 = *(_DWORD *)(result + 244);
    if (v12 <= v10)
      v12 = v10 + 1;
    *(_DWORD *)(result + 240) = v10 + 1;
    *(_DWORD *)(result + 244) = v12;
    v13 = ~v10;
    *a3 = ~v10;
    v14 = a2;
    result = JSC::WasmI32Eqz::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(result, ~v10, a2, a4, a5, a6, a7, a8);
    if ((result & 1) == 0)
    {
      result = JSC::WasmI32Eqz::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v11, v13, v14, v15, v16, v17, v18, v19);
      if ((result & 1) == 0)
        result = JSC::WasmI32Eqz::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v11, v13, v14, v20, v21, v22, v23, v24);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64Add@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64Add::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64Sub@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64Sub::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64Mul@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64Mul::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64DivS@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 32;
      LOBYTE(v66) = 32;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 32;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 32;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 32;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 32;
        LOBYTE(v66) = 32;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 32;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 32;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 32;
        LOBYTE(v66) = 32;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 32;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64DivU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64DivU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64RemS@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 34;
      LOBYTE(v66) = 34;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 34;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 34;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 34;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 34;
        LOBYTE(v66) = 34;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 34;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 34;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 34;
        LOBYTE(v66) = 34;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 34;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64RemU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64RemU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64And@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64And::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64Or@<X0>(_DWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char *v38;
  char *v39;
  _DWORD *v40;
  int v41;

  v9 = result[60];
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = (uint64_t)result;
    v14 = result[61];
    if (v14 <= v9)
      v14 = v9 + 1;
    result[60] = v9 + 1;
    result[61] = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_7;
    v32 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v32 = (a2 + 128) < 0x90;
    if (!v32)
      goto LABEL_7;
    v33 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v33 = (a3 + 128) < 0x90;
    if (v33)
    {
      v34 = result[4];
      v40 = result;
      v41 = v34;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v40, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 37;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 37);
      v35 = 15 - v9;
      if (v9 >= -1073741824)
        v35 = ~(_BYTE)v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v35);
      v36 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v36 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v36);
      v37 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v37 = v10;
      result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v37);
    }
    else
    {
LABEL_7:
      if (v9 >= -1073741824)
        v16 = (v9 + 64) >> 6 < 0x201;
      else
        v16 = (v9 + 1073774528) < 0x8000;
      if (!v16)
        goto LABEL_48;
      v17 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v17 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v17)
        goto LABEL_48;
      v18 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v18 = (a3 + 0x8000) >> 6 < 0x201;
      if (v18)
      {
        v19 = result[4];
        v40 = result;
        v41 = v19;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v40, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 37;
        LOBYTE(v40) = -115;
        v20 = *(unsigned int *)(v12 + 12);
        v21 = *(unsigned int *)(v12 + 16);
        if (v20 > v21)
        {
          *(_DWORD *)(v12 + 16) = v21 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v21) = -115;
          v24 = *(_DWORD *)(v12 + 12);
          v25 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v20 == *(_DWORD *)(v12 + 8))
          {
            v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v20 + 1), (unint64_t)&v40);
            v20 = *(unsigned int *)(v12 + 12);
            v22 = *(_QWORD *)v12;
            v23 = *v38;
          }
          else
          {
            v22 = *(_QWORD *)v12;
            v23 = -115;
          }
          *(_BYTE *)(v22 + v20) = v23;
          v24 = *(_DWORD *)(v12 + 12) + 1;
          v25 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v24;
          *(_DWORD *)(v12 + 16) = v25;
        }
        v26 = 37;
        LOBYTE(v40) = 37;
        if (v24 > v25)
        {
          *(_DWORD *)(v12 + 16) = v25 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v25) = 37;
        }
        else
        {
          v27 = v24;
          if (v24 == *(_DWORD *)(v12 + 8))
          {
            v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v24 + 1), (unint64_t)&v40);
            v27 = *(unsigned int *)(v12 + 12);
            v28 = *(_QWORD *)v12;
            v26 = *v39;
          }
          else
          {
            v28 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v28 + v27) = v26;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v29 = 63 - v9;
        if (v9 >= -1073741824)
          v29 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v29);
        v30 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v30 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v30);
        v31 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v31 = v10;
        result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v31);
      }
      else
      {
LABEL_48:
        result = (_DWORD *)JSC::WasmI64Or::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)result, ~v9, a2, a3, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64Xor@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64Xor::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64Shl@<X0>(_DWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char *v38;
  char *v39;
  _DWORD *v40;
  int v41;

  v9 = result[60];
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = (uint64_t)result;
    v14 = result[61];
    if (v14 <= v9)
      v14 = v9 + 1;
    result[60] = v9 + 1;
    result[61] = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_7;
    v32 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v32 = (a2 + 128) < 0x90;
    if (!v32)
      goto LABEL_7;
    v33 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v33 = (a3 + 128) < 0x90;
    if (v33)
    {
      v34 = result[4];
      v40 = result;
      v41 = v34;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v40, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 39;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 39);
      v35 = 15 - v9;
      if (v9 >= -1073741824)
        v35 = ~(_BYTE)v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v35);
      v36 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v36 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v36);
      v37 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v37 = v10;
      result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v37);
    }
    else
    {
LABEL_7:
      if (v9 >= -1073741824)
        v16 = (v9 + 64) >> 6 < 0x201;
      else
        v16 = (v9 + 1073774528) < 0x8000;
      if (!v16)
        goto LABEL_48;
      v17 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v17 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v17)
        goto LABEL_48;
      v18 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v18 = (a3 + 0x8000) >> 6 < 0x201;
      if (v18)
      {
        v19 = result[4];
        v40 = result;
        v41 = v19;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v40, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 39;
        LOBYTE(v40) = -115;
        v20 = *(unsigned int *)(v12 + 12);
        v21 = *(unsigned int *)(v12 + 16);
        if (v20 > v21)
        {
          *(_DWORD *)(v12 + 16) = v21 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v21) = -115;
          v24 = *(_DWORD *)(v12 + 12);
          v25 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v20 == *(_DWORD *)(v12 + 8))
          {
            v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v20 + 1), (unint64_t)&v40);
            v20 = *(unsigned int *)(v12 + 12);
            v22 = *(_QWORD *)v12;
            v23 = *v38;
          }
          else
          {
            v22 = *(_QWORD *)v12;
            v23 = -115;
          }
          *(_BYTE *)(v22 + v20) = v23;
          v24 = *(_DWORD *)(v12 + 12) + 1;
          v25 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v24;
          *(_DWORD *)(v12 + 16) = v25;
        }
        v26 = 39;
        LOBYTE(v40) = 39;
        if (v24 > v25)
        {
          *(_DWORD *)(v12 + 16) = v25 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v25) = 39;
        }
        else
        {
          v27 = v24;
          if (v24 == *(_DWORD *)(v12 + 8))
          {
            v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v24 + 1), (unint64_t)&v40);
            v27 = *(unsigned int *)(v12 + 12);
            v28 = *(_QWORD *)v12;
            v26 = *v39;
          }
          else
          {
            v28 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v28 + v27) = v26;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v29 = 63 - v9;
        if (v9 >= -1073741824)
          v29 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v29);
        v30 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v30 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v30);
        v31 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v31 = v10;
        result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v31);
      }
      else
      {
LABEL_48:
        result = (_DWORD *)JSC::WasmI64Shl::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)result, ~v9, a2, a3, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64ShrU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64ShrU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64ShrS@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64ShrS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64Rotr@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 42;
      LOBYTE(v66) = 42;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 42;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 42;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 42;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 42;
        LOBYTE(v66) = 42;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 42;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 42;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 42;
        LOBYTE(v66) = 42;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 42;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64Rotl@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 43;
      LOBYTE(v66) = 43;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 43;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 43;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 43;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 43;
        LOBYTE(v66) = 43;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 43;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 43;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 43;
        LOBYTE(v66) = 43;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 43;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64Eq@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64Eq::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64Ne@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64Ne::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64LtS@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64LtS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64LeS@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64LeS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64LtU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64LtU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64LeU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64LeU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64GtS@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64GtS::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64GeS@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 51;
      LOBYTE(v66) = 51;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 51;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 51;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 51;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 51;
        LOBYTE(v66) = 51;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 51;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 51;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 51;
        LOBYTE(v66) = 51;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 51;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64GtU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64GtU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64GeU@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmI64GeU::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64Clz@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 54;
      LOBYTE(v57) = 54;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 54;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 54;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 54;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 54;
        LOBYTE(v57) = 54;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 54;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 54;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 54;
        LOBYTE(v57) = 54;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 54;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64Ctz@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 55;
      LOBYTE(v57) = 55;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 55;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 55;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 55;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 55;
        LOBYTE(v57) = 55;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 55;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 55;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 55;
        LOBYTE(v57) = 55;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 55;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64Popcnt@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 56;
      LOBYTE(v57) = 56;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 56;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 56;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 56;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 56;
        LOBYTE(v57) = 56;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 56;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 56;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 56;
        LOBYTE(v57) = 56;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 56;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64Eqz@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 57;
      LOBYTE(v57) = 57;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 57;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 57;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 57;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 57;
        LOBYTE(v57) = 57;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 57;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 57;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 57;
        LOBYTE(v57) = 57;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 57;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Add@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 58;
      LOBYTE(v66) = 58;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 58;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 58;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 58;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 58;
        LOBYTE(v66) = 58;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 58;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 58;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 58;
        LOBYTE(v66) = 58;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 58;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Sub@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 59;
      LOBYTE(v66) = 59;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 59;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 59;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 59;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 59;
        LOBYTE(v66) = 59;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 59;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 59;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 59;
        LOBYTE(v66) = 59;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 59;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF32Mul@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmF32Mul::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Div@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 61;
      LOBYTE(v66) = 61;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 61;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 61;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 61;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 61;
        LOBYTE(v66) = 61;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 61;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 61;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 61;
        LOBYTE(v66) = 61;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 61;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Min@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 62;
      LOBYTE(v66) = 62;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 62;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 62;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 62;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 62;
        LOBYTE(v66) = 62;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 62;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 62;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 62;
        LOBYTE(v66) = 62;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 62;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Max@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 63;
      LOBYTE(v66) = 63;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 63;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 63;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 63;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 63;
        LOBYTE(v66) = 63;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 63;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 63;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 63;
        LOBYTE(v66) = 63;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 63;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Abs@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 64;
      LOBYTE(v57) = 64;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 64;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 64;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 64;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 64;
        LOBYTE(v57) = 64;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 64;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 64;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 64;
        LOBYTE(v57) = 64;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 64;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Neg@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 65;
      LOBYTE(v57) = 65;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 65;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 65;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 65;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 65;
        LOBYTE(v57) = 65;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 65;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 65;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 65;
        LOBYTE(v57) = 65;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 65;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Copysign@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 66;
      LOBYTE(v66) = 66;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 66;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 66;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 66;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 66;
        LOBYTE(v66) = 66;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 66;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 66;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 66;
        LOBYTE(v66) = 66;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 66;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Ceil@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 67;
      LOBYTE(v57) = 67;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 67;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 67;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 67;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 67;
        LOBYTE(v57) = 67;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 67;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 67;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 67;
        LOBYTE(v57) = 67;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 67;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Floor@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 68;
      LOBYTE(v57) = 68;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 68;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 68;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 68;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 68;
        LOBYTE(v57) = 68;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 68;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 68;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 68;
        LOBYTE(v57) = 68;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 68;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Trunc@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 69;
      LOBYTE(v57) = 69;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 69;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 69;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 69;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 69;
        LOBYTE(v57) = 69;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 69;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 69;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 69;
        LOBYTE(v57) = 69;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 69;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Nearest@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 70;
      LOBYTE(v57) = 70;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 70;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 70;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 70;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 70;
        LOBYTE(v57) = 70;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 70;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 70;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 70;
        LOBYTE(v57) = 70;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 70;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Sqrt@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 71;
      LOBYTE(v57) = 71;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 71;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 71;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 71;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 71;
        LOBYTE(v57) = 71;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 71;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 71;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 71;
        LOBYTE(v57) = 71;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 71;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF32Eq@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmF32Eq::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF32Ne@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmF32Ne::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Lt@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 74;
      LOBYTE(v66) = 74;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 74;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 74;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 74;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 74;
        LOBYTE(v66) = 74;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 74;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 74;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 74;
        LOBYTE(v66) = 74;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 74;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Le@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 75;
      LOBYTE(v66) = 75;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 75;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 75;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 75;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 75;
        LOBYTE(v66) = 75;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 75;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 75;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 75;
        LOBYTE(v66) = 75;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 75;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Gt@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 76;
      LOBYTE(v66) = 76;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 76;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 76;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 76;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 76;
        LOBYTE(v66) = 76;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 76;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 76;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 76;
        LOBYTE(v66) = 76;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 76;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF32Ge@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 77;
      LOBYTE(v66) = 77;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 77;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 77;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 77;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 77;
        LOBYTE(v66) = 77;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 77;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 77;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 77;
        LOBYTE(v66) = 77;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 77;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64Add@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmF64Add::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64Sub@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmF64Sub::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Mul@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_36;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_36;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v42 = result;
      v43 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v42, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 80;
      LOBYTE(v42) = 80;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 80;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v42);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 80;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v42) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v42);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v42) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v42);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v42) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v42);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_36:
      v36 = a2;
      v37 = a3;
      result = JSC::WasmF64Mul::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(result, ~v9, a2, a3, a5, a6, a7, a8);
      if ((result & 1) == 0)
        result = JSC::WasmF64Mul::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v12, ~v9, v36, v37, v38, v39, v40, v41);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64Div@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmF64Div::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Min@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 82;
      LOBYTE(v66) = 82;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 82;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 82;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 82;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 82;
        LOBYTE(v66) = 82;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 82;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 82;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 82;
        LOBYTE(v66) = 82;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 82;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Max@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 83;
      LOBYTE(v66) = 83;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 83;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 83;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 83;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 83;
        LOBYTE(v66) = 83;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 83;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 83;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 83;
        LOBYTE(v66) = 83;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 83;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64Abs@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF64Abs::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64Neg@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF64Neg::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Copysign@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 86;
      LOBYTE(v66) = 86;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 86;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 86;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 86;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 86;
        LOBYTE(v66) = 86;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 86;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 86;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 86;
        LOBYTE(v66) = 86;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 86;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Ceil@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 87;
      LOBYTE(v57) = 87;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 87;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 87;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 87;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 87;
        LOBYTE(v57) = 87;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 87;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 87;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 87;
        LOBYTE(v57) = 87;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 87;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Floor@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 88;
      LOBYTE(v57) = 88;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 88;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 88;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 88;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 88;
        LOBYTE(v57) = 88;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 88;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 88;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 88;
        LOBYTE(v57) = 88;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 88;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Trunc@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 89;
      LOBYTE(v57) = 89;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 89;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 89;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 89;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 89;
        LOBYTE(v57) = 89;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 89;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 89;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 89;
        LOBYTE(v57) = 89;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 89;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Nearest@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 90;
      LOBYTE(v57) = 90;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 90;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 90;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 90;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 90;
        LOBYTE(v57) = 90;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 90;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 90;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 90;
        LOBYTE(v57) = 90;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 90;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Sqrt@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 91;
      LOBYTE(v57) = 91;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 91;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 91;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 91;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 91;
        LOBYTE(v57) = 91;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 91;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 91;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 91;
        LOBYTE(v57) = 91;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 91;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64Eq@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmF64Eq::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64Ne@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmF64Ne::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Lt@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 94;
      LOBYTE(v66) = 94;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 94;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 94;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 94;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 94;
        LOBYTE(v66) = 94;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 94;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 94;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 94;
        LOBYTE(v66) = 94;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 94;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Le@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 95;
      LOBYTE(v66) = 95;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 95;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 95;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 95;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 95;
        LOBYTE(v66) = 95;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 95;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 95;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 95;
        LOBYTE(v66) = 95;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 95;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64Gt@<X0>(uint64_t result@<X0>, signed int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  signed int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = result;
    v14 = *(_DWORD *)(result + 244);
    if (v14 <= v9)
      v14 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_35;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (!v16)
      goto LABEL_35;
    v17 = (a3 - 1073741808) < 0x80;
    if ((int)a3 <= 0x3FFFFFFF)
      v17 = (a3 + 128) < 0x90;
    if (v17)
    {
      v18 = *(_DWORD *)(result + 16);
      v66 = result;
      v67 = v18;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 96;
      LOBYTE(v66) = 96;
      v19 = *(unsigned int *)(v12 + 12);
      v20 = *(unsigned int *)(v12 + 16);
      if (v19 > v20)
      {
        *(_DWORD *)(v12 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v20) = 96;
        v21 = *(_DWORD *)(v12 + 12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v19 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v19 + 1), (unint64_t)&v66);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v19) = 96;
        }
        v21 = *(_DWORD *)(v12 + 12) + 1;
        v22 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v21;
        *(_DWORD *)(v12 + 16) = v22;
      }
      v23 = 15 - v9;
      if (v9 >= -1073741824)
        v23 = ~(_BYTE)v9;
      LOBYTE(v66) = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(v12 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v22) = v23;
        v26 = *(_DWORD *)(v12 + 12);
        v27 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v21 + 1), (unint64_t)&v66);
          v24 = *(unsigned int *)(v12 + 12);
          v25 = *(_QWORD *)v12;
          v23 = *(_BYTE *)result;
        }
        else
        {
          v25 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(v12 + 12) + 1;
        v27 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v26;
        *(_DWORD *)(v12 + 16) = v27;
      }
      v28 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v28 = a2;
      LOBYTE(v66) = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(v12 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v28;
        v31 = *(_DWORD *)(v12 + 12);
        v32 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v26 + 1), (unint64_t)&v66);
          v29 = *(unsigned int *)(v12 + 12);
          v30 = *(_QWORD *)v12;
          v28 = *(_BYTE *)result;
        }
        else
        {
          v30 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(v12 + 12) + 1;
        v32 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v31;
        *(_DWORD *)(v12 + 16) = v32;
      }
      v33 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v33 = v10;
      LOBYTE(v66) = v33;
      if (v31 > v32)
      {
        *(_DWORD *)(v12 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v32) = v33;
      }
      else
      {
        v34 = v31;
        if (v31 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v31 + 1), (unint64_t)&v66);
          v34 = *(unsigned int *)(v12 + 12);
          v35 = *(_QWORD *)v12;
          v33 = *(_BYTE *)result;
        }
        else
        {
          v35 = *(_QWORD *)v12;
        }
        *(_BYTE *)(v35 + v34) = v33;
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_35:
      if (v9 >= -1073741824)
        v36 = (v9 + 64) >> 6 < 0x201;
      else
        v36 = (v9 + 1073774528) < 0x8000;
      if (!v36)
        goto LABEL_60;
      v37 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v37 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v37)
        goto LABEL_60;
      v38 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v38 = (a3 + 0x8000) >> 6 < 0x201;
      if (v38)
      {
        v39 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v39;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 96;
        LOBYTE(v66) = -115;
        v40 = *(unsigned int *)(v12 + 12);
        v41 = *(unsigned int *)(v12 + 16);
        if (v40 > v41)
        {
          *(_DWORD *)(v12 + 16) = v41 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v41) = -115;
          v44 = *(_DWORD *)(v12 + 12);
          v45 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v40 == *(_DWORD *)(v12 + 8))
          {
            v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v40 + 1), (unint64_t)&v66);
            v40 = *(unsigned int *)(v12 + 12);
            v42 = *(_QWORD *)v12;
            v43 = *v64;
          }
          else
          {
            v42 = *(_QWORD *)v12;
            v43 = -115;
          }
          *(_BYTE *)(v42 + v40) = v43;
          v44 = *(_DWORD *)(v12 + 12) + 1;
          v45 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v44;
          *(_DWORD *)(v12 + 16) = v45;
        }
        v46 = 96;
        LOBYTE(v66) = 96;
        if (v44 > v45)
        {
          *(_DWORD *)(v12 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v45) = 96;
        }
        else
        {
          v47 = v44;
          if (v44 == *(_DWORD *)(v12 + 8))
          {
            v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v44 + 1), (unint64_t)&v66);
            v47 = *(unsigned int *)(v12 + 12);
            v48 = *(_QWORD *)v12;
            v46 = *v65;
          }
          else
          {
            v48 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v48 + v47) = v46;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        v49 = 63 - v9;
        if (v9 >= -1073741824)
          v49 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v49);
        v50 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v50 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v50);
        v51 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v51 = v10;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v51);
      }
      else
      {
LABEL_60:
        v52 = *(_DWORD *)(result + 16);
        v66 = result;
        v67 = v52;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v66, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 96;
        LOBYTE(v66) = -114;
        v53 = *(unsigned int *)(v12 + 12);
        v54 = *(unsigned int *)(v12 + 16);
        if (v53 > v54)
        {
          *(_DWORD *)(v12 + 16) = v54 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v54) = -114;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = *(_DWORD *)(v12 + 16);
        }
        else
        {
          if ((_DWORD)v53 == *(_DWORD *)(v12 + 8))
          {
            v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v53 + 1), (unint64_t)&v66);
            v53 = *(unsigned int *)(v12 + 12);
            v55 = *(_QWORD *)v12;
            v56 = *v62;
          }
          else
          {
            v55 = *(_QWORD *)v12;
            v56 = -114;
          }
          *(_BYTE *)(v55 + v53) = v56;
          v57 = *(_DWORD *)(v12 + 12) + 1;
          v58 = *(_DWORD *)(v12 + 16) + 1;
          *(_DWORD *)(v12 + 12) = v57;
          *(_DWORD *)(v12 + 16) = v58;
        }
        v59 = 96;
        LOBYTE(v66) = 96;
        if (v57 > v58)
        {
          *(_DWORD *)(v12 + 16) = v58 + 1;
          *(_BYTE *)(*(_QWORD *)v12 + v58) = 96;
        }
        else
        {
          v60 = v57;
          if (v57 == *(_DWORD *)(v12 + 8))
          {
            v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v66);
            v60 = *(unsigned int *)(v12 + 12);
            v61 = *(_QWORD *)v12;
            v59 = *v63;
          }
          else
          {
            v61 = *(_QWORD *)v12;
          }
          *(_BYTE *)(v61 + v60) = v59;
          *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, ~v9);
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, a2);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v12, v10);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64Ge@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = result[60];
  if (v6 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = result[61];
    if (v7 <= v6)
      v7 = v6 + 1;
    result[60] = v6 + 1;
    result[61] = v7;
    v8 = ~v6;
    *a4 = v8;
    result = (_DWORD *)JSC::WasmF64Ge::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v8, a2, a3);
    *a5 = 0;
    a5[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32TruncSF32@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 98;
      LOBYTE(v57) = 98;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 98;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 98;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 98;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 98;
        LOBYTE(v57) = 98;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 98;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 98;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 98;
        LOBYTE(v57) = 98;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 98;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32TruncSF64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmI32TruncSF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32TruncUF32@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 100;
      LOBYTE(v57) = 100;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 100;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 100;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 100;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 100;
        LOBYTE(v57) = 100;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 100;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 100;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 100;
        LOBYTE(v57) = 100;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 100;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32TruncUF64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmI32TruncUF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32WrapI64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmI32WrapI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64TruncSF32@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmI64TruncSF32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64TruncSF64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmI64TruncSF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64TruncUF32@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 105;
      LOBYTE(v57) = 105;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 105;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 105;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 105;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 105;
        LOBYTE(v57) = 105;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 105;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 105;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 105;
        LOBYTE(v57) = 105;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 105;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64TruncUF64@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 106;
      LOBYTE(v57) = 106;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 106;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 106;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 106;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 106;
        LOBYTE(v57) = 106;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 106;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 106;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 106;
        LOBYTE(v57) = 106;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 106;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64ExtendSI32@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmI64ExtendSI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64ExtendUI32@<X0>(_DWORD *result@<X0>, int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  _BOOL4 v29;
  int v30;
  char v31;
  char v32;
  char *v33;
  char *v34;
  _DWORD *v35;
  int v36;

  v9 = result[60];
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = (uint64_t)result;
    v13 = result[61];
    if (v13 <= v9)
      v13 = v9 + 1;
    result[60] = v9 + 1;
    result[61] = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_7;
    v29 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v29 = (a2 + 128) < 0x90;
    if (v29)
    {
      v30 = result[4];
      v35 = result;
      v36 = v30;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v35, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 108;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, 108);
      v31 = 15 - v9;
      if (v9 >= -1073741824)
        v31 = ~(_BYTE)v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v31);
      v32 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v32 = a2;
      result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v32);
    }
    else
    {
LABEL_7:
      if (v9 >= -1073741824)
        v15 = (v9 + 64) >> 6 < 0x201;
      else
        v15 = (v9 + 1073774528) < 0x8000;
      if (!v15)
        goto LABEL_38;
      v16 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v16 = (a2 + 0x8000) >> 6 < 0x201;
      if (v16)
      {
        v17 = result[4];
        v35 = result;
        v36 = v17;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v35, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 108;
        LOBYTE(v35) = -115;
        v18 = *(unsigned int *)(v11 + 12);
        v19 = *(unsigned int *)(v11 + 16);
        if (v18 > v19)
        {
          *(_DWORD *)(v11 + 16) = v19 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v19) = -115;
          v22 = *(_DWORD *)(v11 + 12);
          v23 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v18 == *(_DWORD *)(v11 + 8))
          {
            v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v18 + 1), (unint64_t)&v35);
            v18 = *(unsigned int *)(v11 + 12);
            v20 = *(_QWORD *)v11;
            v21 = *v33;
          }
          else
          {
            v20 = *(_QWORD *)v11;
            v21 = -115;
          }
          *(_BYTE *)(v20 + v18) = v21;
          v22 = *(_DWORD *)(v11 + 12) + 1;
          v23 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v22;
          *(_DWORD *)(v11 + 16) = v23;
        }
        v24 = 108;
        LOBYTE(v35) = 108;
        if (v22 > v23)
        {
          *(_DWORD *)(v11 + 16) = v23 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v23) = 108;
        }
        else
        {
          v25 = v22;
          if (v22 == *(_DWORD *)(v11 + 8))
          {
            v34 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v22 + 1), (unint64_t)&v35);
            v25 = *(unsigned int *)(v11 + 12);
            v26 = *(_QWORD *)v11;
            v24 = *v34;
          }
          else
          {
            v26 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v26 + v25) = v24;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v27 = 63 - v9;
        if (v9 >= -1073741824)
          v27 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v27);
        v28 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v28 = a2;
        result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v28);
      }
      else
      {
LABEL_38:
        result = (_DWORD *)JSC::WasmI64ExtendUI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)result, ~v9, a2, a4, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF32ConvertSI32@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF32ConvertSI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF32ConvertUI32@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF32ConvertUI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF32ConvertSI64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF32ConvertSI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF32ConvertUI64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF32ConvertUI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF32DemoteF64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF32DemoteF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF32ReinterpretI32@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF32ReinterpretI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addF64ConvertSI32@<X0>(uint64_t result@<X0>, int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_16;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v25 = result;
      v26 = v16;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v25, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 115;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, 115);
      v17 = 15 - v9;
      if (v9 >= -1073741824)
        v17 = ~(_BYTE)v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v17);
      v18 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v18 = a2;
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v18);
    }
    else
    {
LABEL_16:
      v19 = a2;
      result = JSC::WasmF64ConvertSI32::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((_DWORD *)result, ~v9, a2, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
        result = JSC::WasmF64ConvertSI32::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v11, ~v9, v19, v20, v21, v22, v23, v24);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64ConvertUI32@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF64ConvertUI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64ConvertSI64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF64ConvertSI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64ConvertUI64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF64ConvertUI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64PromoteF32@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF64PromoteF32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addF64ReinterpretI64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmF64ReinterpretI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32ReinterpretF32@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmI32ReinterpretF32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI64ReinterpretF64@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v10 = result[60];
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result[61];
    if (v11 <= v10)
      v11 = v10 + 1;
    result[60] = v10 + 1;
    result[61] = v11;
    v12 = ~v10;
    *a3 = v12;
    result = (_DWORD *)JSC::WasmI64ReinterpretF64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>(result, v12, a2, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Extend8S@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 123;
      LOBYTE(v57) = 123;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 123;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 123;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 123;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 123;
        LOBYTE(v57) = 123;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 123;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 123;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 123;
        LOBYTE(v57) = 123;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 123;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI32Extend16S@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 124;
      LOBYTE(v57) = 124;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 124;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 124;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 124;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 124;
        LOBYTE(v57) = 124;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 124;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 124;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 124;
        LOBYTE(v57) = 124;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 124;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64Extend8S@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 125;
      LOBYTE(v57) = 125;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 125;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 125;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 125;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 125;
        LOBYTE(v57) = 125;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 125;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 125;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 125;
        LOBYTE(v57) = 125;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 125;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64Extend16S@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 126;
      LOBYTE(v57) = 126;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 126;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 126;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 126;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 126;
        LOBYTE(v57) = 126;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 126;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 126;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 126;
        LOBYTE(v57) = 126;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 126;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::addI64Extend32S@<X0>(uint64_t result@<X0>, signed int a2@<W1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  uint64_t v11;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;

  v9 = *(_DWORD *)(result + 240);
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    v13 = *(_DWORD *)(result + 244);
    if (v13 <= v9)
      v13 = v9 + 1;
    *(_DWORD *)(result + 240) = v9 + 1;
    *(_DWORD *)(result + 244) = v13;
    *a3 = ~v9;
    v14 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v14 = (v9 + 16) < 0x90;
    if (!v14)
      goto LABEL_26;
    v15 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v15 = (a2 + 128) < 0x90;
    if (v15)
    {
      v16 = *(_DWORD *)(result + 16);
      v57 = result;
      v58 = v16;
      result = (uint64_t)JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(v11 + 36) = 127;
      LOBYTE(v57) = 127;
      v17 = *(unsigned int *)(v11 + 12);
      v18 = *(unsigned int *)(v11 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(v11 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v18) = 127;
        v19 = *(_DWORD *)(v11 + 12);
        v20 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v17 + 1), (unint64_t)&v57);
          *(_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v11 + v17) = 127;
        }
        v19 = *(_DWORD *)(v11 + 12) + 1;
        v20 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v19;
        *(_DWORD *)(v11 + 16) = v20;
      }
      v21 = 15 - v9;
      if (v9 >= -1073741824)
        v21 = ~(_BYTE)v9;
      LOBYTE(v57) = v21;
      if (v19 > v20)
      {
        *(_DWORD *)(v11 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v20) = v21;
        v24 = *(_DWORD *)(v11 + 12);
        v25 = *(_DWORD *)(v11 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v19 + 1), (unint64_t)&v57);
          v22 = *(unsigned int *)(v11 + 12);
          v23 = *(_QWORD *)v11;
          v21 = *(_BYTE *)result;
        }
        else
        {
          v23 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(v11 + 12) + 1;
        v25 = *(_DWORD *)(v11 + 16) + 1;
        *(_DWORD *)(v11 + 12) = v24;
        *(_DWORD *)(v11 + 16) = v25;
      }
      v26 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      LOBYTE(v57) = v26;
      if (v24 > v25)
      {
        *(_DWORD *)(v11 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)v11 + v25) = v26;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(v11 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v24 + 1), (unint64_t)&v57);
          v27 = *(unsigned int *)(v11 + 12);
          v28 = *(_QWORD *)v11;
          v26 = *(_BYTE *)result;
        }
        else
        {
          v28 = *(_QWORD *)v11;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_26:
      if (v9 >= -1073741824)
        v29 = (v9 + 64) >> 6 < 0x201;
      else
        v29 = (v9 + 1073774528) < 0x8000;
      if (!v29)
        goto LABEL_46;
      v30 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v30 = (a2 + 0x8000) >> 6 < 0x201;
      if (v30)
      {
        v31 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v31;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 127;
        LOBYTE(v57) = -115;
        v32 = *(unsigned int *)(v11 + 12);
        v33 = *(unsigned int *)(v11 + 16);
        if (v32 > v33)
        {
          *(_DWORD *)(v11 + 16) = v33 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v33) = -115;
          v36 = *(_DWORD *)(v11 + 12);
          v37 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v32 == *(_DWORD *)(v11 + 8))
          {
            v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v32 + 1), (unint64_t)&v57);
            v32 = *(unsigned int *)(v11 + 12);
            v34 = *(_QWORD *)v11;
            v35 = *v55;
          }
          else
          {
            v34 = *(_QWORD *)v11;
            v35 = -115;
          }
          *(_BYTE *)(v34 + v32) = v35;
          v36 = *(_DWORD *)(v11 + 12) + 1;
          v37 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v36;
          *(_DWORD *)(v11 + 16) = v37;
        }
        v38 = 127;
        LOBYTE(v57) = 127;
        if (v36 > v37)
        {
          *(_DWORD *)(v11 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v37) = 127;
        }
        else
        {
          v39 = v36;
          if (v36 == *(_DWORD *)(v11 + 8))
          {
            v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v36 + 1), (unint64_t)&v57);
            v39 = *(unsigned int *)(v11 + 12);
            v40 = *(_QWORD *)v11;
            v38 = *v56;
          }
          else
          {
            v40 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v40 + v39) = v38;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        v41 = 63 - v9;
        if (v9 >= -1073741824)
          v41 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v41);
        v42 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v42 = a2;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v11, v42);
      }
      else
      {
LABEL_46:
        v43 = *(_DWORD *)(result + 16);
        v57 = result;
        v58 = v43;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(result + 40), &v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 + 36) = 127;
        LOBYTE(v57) = -114;
        v44 = *(unsigned int *)(v11 + 12);
        v45 = *(unsigned int *)(v11 + 16);
        if (v44 > v45)
        {
          *(_DWORD *)(v11 + 16) = v45 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v45) = -114;
          v48 = *(_DWORD *)(v11 + 12);
          v49 = *(_DWORD *)(v11 + 16);
        }
        else
        {
          if ((_DWORD)v44 == *(_DWORD *)(v11 + 8))
          {
            v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v44 + 1), (unint64_t)&v57);
            v44 = *(unsigned int *)(v11 + 12);
            v46 = *(_QWORD *)v11;
            v47 = *v53;
          }
          else
          {
            v46 = *(_QWORD *)v11;
            v47 = -114;
          }
          *(_BYTE *)(v46 + v44) = v47;
          v48 = *(_DWORD *)(v11 + 12) + 1;
          v49 = *(_DWORD *)(v11 + 16) + 1;
          *(_DWORD *)(v11 + 12) = v48;
          *(_DWORD *)(v11 + 16) = v49;
        }
        v50 = 127;
        LOBYTE(v57) = 127;
        if (v48 > v49)
        {
          *(_DWORD *)(v11 + 16) = v49 + 1;
          *(_BYTE *)(*(_QWORD *)v11 + v49) = 127;
        }
        else
        {
          v51 = v48;
          if (v48 == *(_DWORD *)(v11 + 8))
          {
            v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, (WTF *)(v48 + 1), (unint64_t)&v57);
            v51 = *(unsigned int *)(v11 + 12);
            v52 = *(_QWORD *)v11;
            v50 = *v54;
          }
          else
          {
            v52 = *(_QWORD *)v11;
          }
          *(_BYTE *)(v52 + v51) = v50;
          *(int32x2_t *)(v11 + 12) = vadd_s32(*(int32x2_t *)(v11 + 12), (int32x2_t)0x100000001);
        }
        JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, ~v9);
        result = JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(v11, a2);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

_DWORD *JSC::Wasm::LLIntGenerator::addI32Add@<X0>(_DWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v9;
  int v10;
  uint64_t v12;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  char v19;
  char v20;
  char v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  _DWORD *v29;
  int v30;

  v9 = result[60];
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    v12 = (uint64_t)result;
    v14 = result[61];
    if (v14 <= v9)
      v14 = v9 + 1;
    result[60] = v9 + 1;
    result[61] = v14;
    *a4 = ~v9;
    v15 = (v9 + 1073741936) < 0x80;
    if (v9 >= -1073741824)
      v15 = (v9 + 16) < 0x90;
    if (!v15)
      goto LABEL_22;
    v16 = (a2 - 1073741808) < 0x80;
    if (a2 <= 0x3FFFFFFF)
      v16 = (a2 + 128) < 0x90;
    if (v16
      && ((int)a3 <= 0x3FFFFFFF
        ? (v17 = (a3 + 128) < 0x90)
        : (v17 = (a3 - 1073741808) < 0x80),
          v17))
    {
      v18 = result[4];
      v29 = result;
      v30 = v18;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v29, a3, (uint64_t)a4, a5, a6, a7, a8);
      *(_DWORD *)(v12 + 36) = 236;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 236);
      v19 = 15 - v9;
      if (v9 >= -1073741824)
        v19 = ~(_BYTE)v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v19);
      v20 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v20 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v20);
      v21 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v21 = v10;
      result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v21);
    }
    else
    {
LABEL_22:
      if (v9 >= -1073741824)
        v22 = (v9 + 64) >> 6 < 0x201;
      else
        v22 = (v9 + 1073774528) < 0x8000;
      if (!v22)
        goto LABEL_39;
      v23 = (a2 - 1073741760) < 0x8000;
      if (a2 <= 0x3FFFFFFF)
        v23 = (a2 + 0x8000) >> 6 < 0x201;
      if (!v23)
        goto LABEL_39;
      v24 = (a3 - 1073741760) < 0x8000;
      if ((int)a3 <= 0x3FFFFFFF)
        v24 = (a3 + 0x8000) >> 6 < 0x201;
      if (v24)
      {
        v25 = result[4];
        v29 = result;
        v30 = v25;
        JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(result + 10, &v29, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_DWORD *)(v12 + 36) = 236;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 141);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, 236);
        v26 = 63 - v9;
        if (v9 >= -1073741824)
          v26 = ~(_WORD)v9;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v26);
        v27 = a2 + 64;
        if (a2 <= 0x3FFFFFFF)
          v27 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v27);
        v28 = v10 + 64;
        if (v10 <= 0x3FFFFFFF)
          v28 = v10;
        result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v12, v28);
      }
      else
      {
LABEL_39:
        result = (_DWORD *)JSC::WasmI32Add::emit<(JSC::OpcodeSize)4,JSC::Wasm::LLIntGenerator,(JSC::FitsAssertion)0,true>(result, ~v9, a2, a3, a5, a6, a7, a8);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  return result;
}

void JSC::Wasm::LLIntGenerator::callInformationForCaller(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unint64_t v41;
  WTF *v42;
  int *v43;
  unsigned int v44;
  WTF *v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  int v57;
  WTF *v58;
  WTF *v60;
  unsigned int v62;
  unsigned int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  unsigned int v70;
  unsigned __int8 *v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  WTF **v83;
  WTF *v84;
  int v85;
  unsigned int v86;
  _BYTE v87[32];
  WTF *v88;
  int v89;
  unsigned int v90;
  _BYTE v91[32];
  WTF *v92;
  int v93;
  unsigned int v94;
  _BYTE v95[40];

  v6 = *(_DWORD *)(a2 + 240);
  v7 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v7 != -1)
  {
    v83 = &v88;
    v92 = (WTF *)&v83;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  v8 = HIDWORD(qword_1EE3430D8);
  v9 = HIDWORD(qword_1EE3430E8);
  v10 = *((_DWORD *)a3 + 3);
  if (v10)
  {
    v11 = 0;
    v62 = 0;
    v63 = 0;
    v64 = *a3;
    v65 = *((unsigned int *)a3 + 3);
    while (1)
    {
      v67 = *v64;
      v64 += 16;
      v66 = v67;
      if ((v67 - 254) < 2)
        goto LABEL_61;
      v79 = v66 - 192;
      if (v79 <= 0x3D)
        break;
LABEL_65:
      if (!--v65)
        goto LABEL_5;
    }
    if (((1 << v79) & 0x3800000000000000) != 0)
    {
      v68 = v62 >= HIDWORD(qword_1EE3430E8);
      if (v62 < HIDWORD(qword_1EE3430E8))
        ++v62;
    }
    else
    {
      if (((1 << v79) & 0xE7C01C001C001) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198CF8248);
      }
      if (((1 << v79) & 0x1801800000000) == 0)
        goto LABEL_65;
LABEL_61:
      v68 = v63 >= HIDWORD(qword_1EE3430D8);
      if (v63 < HIDWORD(qword_1EE3430D8))
        ++v63;
    }
    if (v68)
      ++v11;
    goto LABEL_65;
  }
  v11 = 0;
LABEL_5:
  v12 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = *((_DWORD *)a3 + 3);
    v17 = *((unsigned int *)a3 + 2);
    while (1)
    {
      v18 = (*a3)[16 * v16];
      if ((v18 - 254) < 2)
        goto LABEL_8;
      v76 = v18 - 192;
      if (v76 <= 0x3D)
        break;
LABEL_12:
      ++v16;
      if (!--v17)
        goto LABEL_13;
    }
    if (((1 << v76) & 0x3800000000000000) != 0)
    {
      v19 = v14 >= HIDWORD(qword_1EE3430E8);
      if (v14 < HIDWORD(qword_1EE3430E8))
        ++v14;
    }
    else
    {
      if (((1 << v76) & 0xE7C01C001C001) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198CF81D8);
      }
      if (((1 << v76) & 0x1801800000000) == 0)
        goto LABEL_12;
LABEL_8:
      v19 = v15 >= HIDWORD(qword_1EE3430D8);
      if (v15 < HIDWORD(qword_1EE3430D8))
        ++v15;
    }
    if (v19)
      ++v13;
    goto LABEL_12;
  }
  v13 = 0;
LABEL_13:
  if (v13 <= v11)
    v13 = v11;
  v20 = (v13 + 1) & 0xFFFFFFFE;
  v21 = (*(_DWORD *)(a2 + 240) + 1) & 0xFFFFFFFE;
  *(_DWORD *)(a2 + 240) = v21;
  if ((int)v12 + 1 > v10)
    v10 = v12 + 1;
  v22 = v8 + v9 + v10 + v20 + 6;
  v19 = __CFADD__(v21, v22);
  v23 = v21 + v22;
  if (v19)
  {
    __break(0xC471u);
    JUMPOUT(0x198CF836CLL);
  }
  v24 = (v23 + 1) & 0xFFFFFFFE;
  *(_DWORD *)(a2 + 240) = v24;
  if (*(_DWORD *)(a2 + 244) < v24)
    *(_DWORD *)(a2 + 244) = v24;
  v92 = (WTF *)v95;
  v93 = 8;
  v94 = v12;
  if (v12 >= 9)
  {
    if (v12 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198CF838CLL);
    }
    v25 = (WTF *)WTF::fastMalloc((WTF *)(4 * v12));
    v93 = v12;
    v92 = v25;
    LODWORD(v12) = v94;
  }
  else
  {
    v25 = (WTF *)v95;
  }
  v82 = v6;
  if ((_DWORD)v12)
    memset_pattern16(v25, &unk_19915A570, 4 * v12);
  v26 = *((unsigned int *)a3 + 3);
  v88 = (WTF *)v91;
  v89 = 8;
  v90 = v26;
  if (v26 >= 9)
  {
    if (v26 >> 30)
    {
LABEL_134:
      __break(0xC471u);
      JUMPOUT(0x198CF8178);
    }
    v27 = (WTF *)WTF::fastMalloc((WTF *)(4 * v26));
    v89 = v26;
    v88 = v27;
    LODWORD(v26) = v90;
  }
  else
  {
    v27 = (WTF *)v91;
  }
  if ((_DWORD)v26)
    memset_pattern16(v27, &unk_19915A570, 4 * v26);
  v28 = *(_DWORD *)(a2 + 240);
  v29 = v28 - 6;
  v30 = v28 - 6 - v20;
  v31 = v30 - v8;
  v32 = v30 - v8 - v9;
  v33 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v35 = (uint64_t)*a3;
    v36 = v92;
    v37 = v29 - v20;
    v38 = v30 - v8;
    while (1)
    {
      v39 = *(unsigned __int8 *)(v35 + 16 * (v34 + *((_DWORD *)a3 + 3)));
      if ((v39 - 254) < 2)
        break;
      v78 = v39 - 192;
      if (v78 > 0x3D)
        goto LABEL_35;
      if (((1 << v78) & 0x3800000000000000) != 0)
      {
        if (v38 > v32)
        {
          if (v34 >= v94)
          {
            __break(0xC471u);
            JUMPOUT(0x198CF8364);
          }
          v40 = v38--;
          goto LABEL_34;
        }
        if (v34 >= v94)
        {
          __break(0xC471u);
          JUMPOUT(0x198CF82DCLL);
        }
LABEL_76:
        v40 = v29--;
        goto LABEL_34;
      }
      if (((1 << v78) & 0xE7C01C001C001) != 0)
        goto LABEL_134;
      if (((1 << v78) & 0x1801800000000) != 0)
        break;
LABEL_35:
      if (++v34 >= v33)
        goto LABEL_36;
    }
    if (v37 <= v31)
    {
      if (v34 >= v94)
      {
        __break(0xC471u);
        JUMPOUT(0x198CF835CLL);
      }
      goto LABEL_76;
    }
    if (v34 >= v94)
    {
      __break(0xC471u);
      JUMPOUT(0x198CF8354);
    }
    v40 = v37--;
LABEL_34:
    *((_DWORD *)v36 + v34) = -v40;
    v33 = *((unsigned int *)a3 + 2);
    goto LABEL_35;
  }
LABEL_36:
  v41 = *((unsigned int *)a3 + 3);
  v42 = v88;
  if ((_DWORD)v41)
  {
    v69 = 0;
    v70 = v30 + v11;
    v71 = *a3;
    v72 = v30 - v8;
    do
    {
      v74 = *v71;
      v71 += 16;
      v73 = v74;
      if ((v74 - 254) >= 2)
      {
        v77 = v73 - 192;
        if (v77 > 0x3D)
          goto LABEL_73;
        if (((1 << v77) & 0x3800000000000000) != 0)
        {
          if (v72 > v32)
          {
            if (v69 >= v90)
            {
              __break(0xC471u);
              JUMPOUT(0x198CF837CLL);
            }
            v75 = v72--;
            goto LABEL_72;
          }
          if (v69 >= v90)
          {
            __break(0xC471u);
            JUMPOUT(0x198CF82ECLL);
          }
          goto LABEL_118;
        }
        if (((1 << v77) & 0xE7C01C001C001) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198CF81A8);
        }
        if (((1 << v77) & 0x1801800000000) == 0)
          goto LABEL_73;
      }
      if (v30 > v31)
      {
        if (v69 >= v90)
        {
          __break(0xC471u);
          JUMPOUT(0x198CF8374);
        }
        v75 = v30--;
        goto LABEL_72;
      }
      if (v69 >= v90)
      {
        __break(0xC471u);
        JUMPOUT(0x198CF8384);
      }
LABEL_118:
      v75 = v70--;
LABEL_72:
      *((_DWORD *)v42 + v69) = -v75;
      v41 = *((unsigned int *)a3 + 3);
LABEL_73:
      ++v69;
    }
    while (v69 < v41);
  }
  *(_DWORD *)(a2 + 240) = v82;
  v43 = (int *)v87;
  v83 = (WTF **)a2;
  v84 = (WTF *)v87;
  v85 = 8;
  if (v42 == (WTF *)v91)
  {
    v44 = v90;
    if (v90)
      memcpy(v87, v91, 4 * v90);
  }
  else
  {
    v88 = (WTF *)v91;
    v84 = v42;
    v80 = v89;
    v44 = v90;
    v89 = 8;
    v85 = v80;
  }
  v90 = 0;
  v86 = v44;
  *(_DWORD *)a1 = v28;
  *(_DWORD *)(a1 + 4) = v20;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  v45 = v92;
  if (v92 == (WTF *)v95)
  {
    v46 = v94;
    if (v94)
      memcpy((void *)(a1 + 24), v95, 4 * v94);
  }
  else
  {
    v92 = (WTF *)v95;
    *(_QWORD *)(a1 + 8) = v45;
    v81 = v93;
    v46 = v94;
    v93 = 8;
    *(_DWORD *)(a1 + 16) = v81;
  }
  v94 = 0;
  *(_DWORD *)(a1 + 20) = v46;
  v47 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v47 = off_1E35B5AD0;
  v55 = (_DWORD *)(v47 + 32);
  *(_QWORD *)(v47 + 8) = v83;
  *(_QWORD *)(v47 + 16) = v47 + 32;
  *(_QWORD *)(v47 + 24) = 8;
  if (v84 == (WTF *)v87)
  {
    if (v86)
    {
      v56 = 4 * v86;
      do
      {
        v57 = *v43++;
        *v55++ = v57;
        v56 -= 4;
      }
      while (v56);
    }
  }
  else
  {
    *(_QWORD *)(v47 + 16) = v84;
    *(_DWORD *)(v47 + 24) = v85;
  }
  *(_DWORD *)(v47 + 28) = v86;
  *(_QWORD *)(a1 + 56) = v47;
  v58 = v88;
  if (v91 != (_BYTE *)v88 && v88 != 0)
  {
    v88 = 0;
    v89 = 0;
    WTF::fastFree((unint64_t)v58, v48, v49, v50, v51, v52, v53, v54);
  }
  v60 = v92;
  if (v95 != (_BYTE *)v92 && v92 != 0)
  {
    v92 = 0;
    v93 = 0;
    WTF::fastFree((unint64_t)v60, v48, v49, v50, v51, v52, v53, v54);
  }
}

_DWORD *JSC::Wasm::LLIntGenerator::callInformationForCallee(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int **v10;
  uint64_t v11;
  _DWORD *result;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  char **v65;
  char *v66;

  v10 = (int **)(a2 + 216);
  v11 = *(unsigned int *)(a2 + 228);
  if (!(_DWORD)v11)
  {
    v17 = *(unsigned int *)(a3 + 12);
    if (v17 >= 3)
    {
      if (v17 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198CF88D4);
      }
      v57 = WTF::fastMalloc((WTF *)(4 * v17));
      *(_DWORD *)(a2 + 224) = v17;
      *(_QWORD *)(a2 + 216) = v57;
    }
    v18 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
    if (v18 != -1)
    {
      v66 = &v64;
      v65 = &v66;
      std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v65, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
    }
    v19 = HIDWORD(qword_1EE3430D8);
    v20 = *(_DWORD *)(a3 + 12);
    if (!v20)
    {
      v21 = 0;
LABEL_11:
      v22 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = *(_DWORD *)(a3 + 12);
        while (1)
        {
          v27 = *(unsigned __int8 *)(*(_QWORD *)a3 + 16 * v26);
          if ((v27 - 254) < 2)
            goto LABEL_14;
          v53 = v27 - 192;
          if (v53 <= 0x3D)
            break;
LABEL_18:
          ++v26;
          if (!--v22)
            goto LABEL_19;
        }
        if (((1 << v53) & 0x3800000000000000) != 0)
        {
          v28 = v24 >= HIDWORD(qword_1EE3430E8);
          if (v24 < HIDWORD(qword_1EE3430E8))
            ++v24;
        }
        else
        {
          if (((1 << v53) & 0xE7C01C001C001) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198CF87A8);
          }
          if (((1 << v53) & 0x1801800000000) == 0)
            goto LABEL_18;
LABEL_14:
          v28 = v25 >= HIDWORD(qword_1EE3430D8);
          if (v25 < HIDWORD(qword_1EE3430D8))
            ++v25;
        }
        if (v28)
          ++v23;
        goto LABEL_18;
      }
      v23 = 0;
LABEL_19:
      if (!v20)
      {
LABEL_29:
        v39 = *(unsigned int *)(a2 + 228);
        result = (_DWORD *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        *(_DWORD *)(a1 + 12) = v39;
        if (v39 >= 3)
        {
          if (v39 >> 30)
          {
LABEL_86:
            __break(0xC471u);
            JUMPOUT(0x198CF8690);
          }
          result = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v39));
          *(_DWORD *)(a1 + 8) = v39;
          *(_QWORD *)a1 = result;
          v39 = *(unsigned int *)(a2 + 228);
        }
        if ((_DWORD)v39)
        {
          v40 = *v10;
          v41 = 4 * v39;
          do
          {
            v42 = *v40++;
            *result++ = v42;
            v41 -= 4;
          }
          while (v41);
        }
        return result;
      }
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = (HIDWORD(qword_1EE3430E8) + HIDWORD(qword_1EE3430D8));
      if (v23 <= v21)
        v33 = v21;
      else
        v33 = v23;
      v34 = ((v33 + 1) | 1) - v21;
      v35 = HIDWORD(qword_1EE3430D8);
      while (1)
      {
        v36 = *(unsigned __int8 *)(*(_QWORD *)a3 + v29);
        if ((v36 - 254) < 2)
          goto LABEL_25;
        v50 = v36 - 192;
        if (v50 <= 0x3D)
          break;
LABEL_49:
        v37 = v31;
LABEL_28:
        ++v30;
        v29 += 16;
        v31 = v37;
        if (v30 >= *(unsigned int *)(a3 + 12))
          goto LABEL_29;
      }
      if (((1 << v50) & 0x3800000000000000) != 0)
      {
        if (v35 < v32)
        {
          v51 = v35 + 1;
          LODWORD(v66) = -5 - v35;
          v52 = *(unsigned int *)(a2 + 228);
          if ((_DWORD)v52 == *(_DWORD *)(a2 + 224))
          {
            v60 = v32;
            v62 = v34;
            WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v10, (unint64_t)&v66, a3, a4, a5, a6, a7, a8);
            v34 = v62;
            v32 = v60;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(a2 + 216) + 4 * v52) = -5 - v35;
            ++*(_DWORD *)(a2 + 228);
          }
          v35 = v51;
          goto LABEL_49;
        }
      }
      else
      {
        if (((1 << v50) & 0xE7C01C001C001) != 0)
          goto LABEL_86;
        if (((1 << v50) & 0x1801800000000) == 0)
          goto LABEL_49;
LABEL_25:
        if (v31 < v19)
        {
          v37 = (v31 + 1);
          LODWORD(v66) = -5 - v31;
          v38 = *(unsigned int *)(a2 + 228);
          if ((_DWORD)v38 == *(_DWORD *)(a2 + 224))
          {
            v58 = v32;
            v61 = v34;
            WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v10, (unint64_t)&v66, a3, a4, a5, a6, a7, a8);
            v34 = v61;
            v32 = v58;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(a2 + 216) + 4 * v38) = -5 - v31;
            ++*(_DWORD *)(a2 + 228);
          }
          goto LABEL_28;
        }
      }
      v55 = v34 + 1;
      LODWORD(v66) = v34 + 5;
      v56 = *(unsigned int *)(a2 + 228);
      if ((_DWORD)v56 == *(_DWORD *)(a2 + 224))
      {
        v63 = v32;
        WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v10, (unint64_t)&v66, a3, a4, a5, a6, a7, a8);
        v32 = v63;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a2 + 216) + 4 * v56) = v34 + 5;
        ++*(_DWORD *)(a2 + 228);
      }
      v34 = v55;
      goto LABEL_49;
    }
    v21 = 0;
    v43 = 0;
    v44 = 0;
    v45 = *(unsigned __int8 **)a3;
    v46 = *(unsigned int *)(a3 + 12);
    while (1)
    {
      v48 = *v45;
      v45 += 16;
      v47 = v48;
      if ((v48 - 254) < 2)
        goto LABEL_37;
      v54 = v47 - 192;
      if (v54 <= 0x3D)
        break;
LABEL_41:
      if (!--v46)
        goto LABEL_11;
    }
    if (((1 << v54) & 0x3800000000000000) != 0)
    {
      v49 = v43 >= HIDWORD(qword_1EE3430E8);
      if (v43 < HIDWORD(qword_1EE3430E8))
        ++v43;
    }
    else
    {
      if (((1 << v54) & 0xE7C01C001C001) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198CF8824);
      }
      if (((1 << v54) & 0x1801800000000) == 0)
        goto LABEL_41;
LABEL_37:
      v49 = v44 >= HIDWORD(qword_1EE3430D8);
      if (v44 < HIDWORD(qword_1EE3430D8))
        ++v44;
    }
    if (v49)
      ++v21;
    goto LABEL_41;
  }
  result = (_DWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v11;
  if (v11 <= 2)
  {
    v13 = *v10;
    v14 = (uint64_t)&(*v10)[v11];
    goto LABEL_4;
  }
  if (v11 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x198CF88DCLL);
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v11));
  *(_DWORD *)(a1 + 8) = v11;
  *(_QWORD *)a1 = result;
  v59 = *(unsigned int *)(a2 + 228);
  if ((_DWORD)v59)
  {
    v13 = *(int **)(a2 + 216);
    v14 = (uint64_t)&v13[v59];
    do
    {
LABEL_4:
      v15 = *v13++;
      *result++ = v15;
    }
    while (v13 != (int *)v14);
  }
  return result;
}

uint64_t *JSC::Wasm::LLIntGenerator::addArguments(JSC::Wasm::TypeDefinition const&)::$_0::operator()(uint64_t *result, unsigned int a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;

  v4 = *result;
  v5 = *a3;
  if (v5 >= a4)
  {
    v9 = (_DWORD *)result[2];
    v10 = (*v9)++;
    if (*(_DWORD *)(v4 + 140) > a2)
    {
      v8 = v10 + 5;
      v7 = *(_QWORD *)(v4 + 128);
      goto LABEL_7;
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198CF895CLL);
  }
  v6 = result[1];
  *a3 = v5 + 1;
  if (*(_DWORD *)(v6 + 12) <= v5)
    goto LABEL_10;
  if (*(_DWORD *)(v4 + 140) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198CF8964);
  }
  v7 = *(_QWORD *)(v4 + 128);
  v8 = *(_DWORD *)(*(_QWORD *)v6 + 4 * v5);
LABEL_7:
  *(_DWORD *)(v7 + 4 * a2) = v8;
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::jsNullConstant(JSC::Wasm::LLIntGenerator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  JSC::Wasm::LLIntGenerator *v6;
  JSC::Wasm::LLIntGenerator *v7;
  uint64_t v8;

  if (*((_DWORD *)this + 38) == 0x3FFFFFFF)
  {
    v2 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 38) = *(_DWORD *)(v2 + 52) + 0x40000000;
    v8 = 2;
    v3 = *(unsigned int *)(v2 + 52);
    if ((_DWORD)v3 == *(_DWORD *)(v2 + 48))
    {
      v7 = this;
      WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,long long>(v2 + 40, &v8);
      this = v7;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8 * v3) = 2;
      *(_DWORD *)(v2 + 52) = v3 + 1;
    }
    if (BYTE1(dword_1ECF4C270))
    {
      v6 = this;
      v4 = *((_QWORD *)this + 3);
      v5 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v5 == *(_DWORD *)(v4 + 32))
      {
        WTF::Vector<JSC::Wasm::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type const&>(v4 + 24, (unint64_t)&JSC::Wasm::Types::Externref);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)(v4 + 24) + 16 * v5) = JSC::Wasm::Types::Externref;
        ++*(_DWORD *)(v4 + 36);
      }
      this = v6;
    }
  }
  return *((unsigned int *)this + 38);
}

uint64_t JSC::WasmMov::emit<JSC::Wasm::LLIntGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

_QWORD *WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(_QWORD *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  if (*((_DWORD *)result + 2))
  {
    if (*((_DWORD *)result + 3))
      *((_DWORD *)result + 3) = 0;
    v9 = result + 2;
    v8 = *result;
    if (result + 2 == (_QWORD *)*result)
    {
      if (v8)
        return result;
      goto LABEL_6;
    }
    if (!v8
      || (*result = 0,
          *((_DWORD *)result + 2) = 0,
          v10 = result + 2,
          v11 = result,
          WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8),
          v9 = v10,
          result = v11,
          !*v11))
    {
LABEL_6:
      *result = v9;
      *((_DWORD *)result + 2) = 8;
    }
  }
  return result;
}

void JSC::Wasm::LLIntGenerator::addConstantWithoutPush(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  *(_QWORD *)&v52 = a2;
  *((_QWORD *)&v52 + 1) = a3;
  if (!a4)
  {
    if (*(_DWORD *)(a1 + 156) == 0x3FFFFFFF)
    {
      v42 = *(_QWORD *)(a1 + 24);
      v43 = (_QWORD *)(v42 + 40);
      *(_DWORD *)(a1 + 156) = *(_DWORD *)(v42 + 52) + 0x40000000;
      v44 = *(unsigned int *)(v42 + 52);
      if ((_DWORD)v44 == *(_DWORD *)(v42 + 48))
      {
        WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1);
        v44 = *(unsigned int *)(v42 + 52);
        v45 = (_QWORD *)(*(_QWORD *)(v42 + 40) + 8 * v44);
      }
      else
      {
        v45 = (_QWORD *)(*v43 + 8 * v44);
      }
      *v45 = 0;
      *(_DWORD *)(v42 + 52) = v44 + 1;
      if (BYTE1(dword_1ECF4C270))
      {
        v46 = *(_QWORD *)(a1 + 24);
        v47 = *(unsigned int *)(v46 + 36);
        if ((_DWORD)v47 == *(_DWORD *)(v46 + 32))
        {
          WTF::Vector<JSC::Wasm::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type const&>(v46 + 24, (unint64_t)&JSC::Wasm::Types::I32);
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(v46 + 24) + 16 * v47) = JSC::Wasm::Types::I32;
          ++*(_DWORD *)(v46 + 36);
        }
      }
    }
    return;
  }
  if (a4 == 2)
  {
    if (*(_DWORD *)(a1 + 152) == 0x3FFFFFFF)
    {
      v48 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(v48 + 52) + 0x40000000;
      v53 = 2;
      v49 = *(unsigned int *)(v48 + 52);
      if ((_DWORD)v49 == *(_DWORD *)(v48 + 48))
      {
        WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,long long>(v48 + 40, &v53);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v48 + 40) + 8 * v49) = 2;
        *(_DWORD *)(v48 + 52) = v49 + 1;
      }
      if (BYTE1(dword_1ECF4C270))
      {
        v50 = *(_QWORD *)(a1 + 24);
        v51 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v51 == *(_DWORD *)(v50 + 32))
        {
          WTF::Vector<JSC::Wasm::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type const&>(v50 + 24, (unint64_t)&JSC::Wasm::Types::Externref);
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(v50 + 24) + 16 * v51) = JSC::Wasm::Types::Externref;
          ++*(_DWORD *)(v50 + 36);
        }
      }
    }
    return;
  }
  v7 = (uint64_t *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 208);
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 52);
  if (v6
    || (WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::VirtualRegister>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::VirtualRegister,WTF::IntHash<long long>,JSC::Wasm::LLIntGenerator::ConstantMapHashTraits,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::Wasm::LLIntGenerator::ConstantMapHashTraits>::rehash((uint64_t *)(a1 + 208), 8u), (v6 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != a4)
    {
      if (v15 == 2)
        v16 = v14;
      v13 = (v13 + v17) & v9;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
      if (!*v14)
      {
        if (v16)
        {
          *v16 = 0;
          *((_DWORD *)v16 + 2) = 0x3FFFFFFF;
          --*(_DWORD *)(*v7 - 16);
          v14 = v16;
        }
        goto LABEL_13;
      }
    }
    return;
  }
LABEL_13:
  *v14 = a4;
  *((_DWORD *)v14 + 2) = v8 + 0x40000000;
  v18 = *v7;
  if (*v7)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v7;
  if (*v7)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_19;
    goto LABEL_44;
  }
  if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v41 = 8;
LABEL_42:
      WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::VirtualRegister>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::VirtualRegister,WTF::IntHash<long long>,JSC::Wasm::LLIntGenerator::ConstantMapHashTraits,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::Wasm::LLIntGenerator::ConstantMapHashTraits>::rehash((uint64_t *)(a1 + 208), v41);
      goto LABEL_19;
    }
LABEL_44:
    v41 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_42;
  }
LABEL_19:
  v24 = *(_QWORD *)(a1 + 24);
  v25 = *(unsigned int *)(v24 + 52);
  if ((_DWORD)v25 == *(_DWORD *)(v24 + 48))
  {
    v29 = v25 + (v25 >> 2);
    if (v29 >= 0x10)
      v30 = v29 + 1;
    else
      v30 = 16;
    if (v30 <= v25 + 1)
      v31 = v25 + 1;
    else
      v31 = v30;
    if (v31 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v32 = *(const void **)(v24 + 40);
    v33 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
    *(_DWORD *)(v24 + 48) = v31;
    *(_QWORD *)(v24 + 40) = v33;
    memcpy(v33, v32, 8 * v25);
    if (v32)
    {
      if (*(const void **)(v24 + 40) == v32)
      {
        *(_QWORD *)(v24 + 40) = 0;
        *(_DWORD *)(v24 + 48) = 0;
      }
      WTF::fastFree((unint64_t)v32, v34, v35, v36, v37, v38, v39, v40);
    }
    v25 = *(unsigned int *)(v24 + 52);
    v26 = (_QWORD *)(*(_QWORD *)(v24 + 40) + 8 * v25);
  }
  else
  {
    v26 = (_QWORD *)(*(_QWORD *)(v24 + 40) + 8 * v25);
  }
  *v26 = a4;
  *(_DWORD *)(v24 + 52) = v25 + 1;
  if (BYTE1(dword_1ECF4C270))
  {
    v27 = *(_QWORD *)(a1 + 24);
    v28 = *(unsigned int *)(v27 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v27 + 32))
    {
      WTF::Vector<JSC::Wasm::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type const&>(v27 + 24, (unint64_t)&v52);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)(v27 + 24) + 16 * v28) = v52;
      ++*(_DWORD *)(v27 + 36);
    }
  }
}

uint64_t JSC::Wasm::LLIntGenerator::zeroConstant(JSC::Wasm::LLIntGenerator *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  JSC::Wasm::LLIntGenerator *v8;
  JSC::Wasm::LLIntGenerator *v9;

  if (*((_DWORD *)this + 39) == 0x3FFFFFFF)
  {
    v2 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 39) = *(_DWORD *)(v2 + 52) + 0x40000000;
    v3 = *(unsigned int *)(v2 + 52);
    if ((_DWORD)v3 == *(_DWORD *)(v2 + 48))
    {
      v7 = v2;
      v9 = this;
      WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 40, v3 + 1);
      v2 = v7;
      this = v9;
      v3 = *(unsigned int *)(v7 + 52);
      v4 = (_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v3);
    }
    else
    {
      v4 = (_QWORD *)(*(_QWORD *)(v2 + 40) + 8 * v3);
    }
    *v4 = 0;
    *(_DWORD *)(v2 + 52) = v3 + 1;
    if (BYTE1(dword_1ECF4C270))
    {
      v8 = this;
      v5 = *((_QWORD *)this + 3);
      v6 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v6 == *(_DWORD *)(v5 + 32))
      {
        WTF::Vector<JSC::Wasm::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type const&>(v5 + 24, (unint64_t)&JSC::Wasm::Types::I32);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)(v5 + 24) + 16 * v6) = JSC::Wasm::Types::I32;
        ++*(_DWORD *)(v5 + 36);
      }
      this = v8;
    }
  }
  return *((unsigned int *)this + 39);
}

uint64_t JSC::Wasm::LLIntGenerator::setLocal(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  _BYTE *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  char v34;
  char **v35;
  char *v36;

  v8 = a4;
  v11 = (_BYTE *)result;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 12) > a3)
  {
    if (*(_DWORD *)(a2 + 140) <= a3)
    {
      __break(0xC471u);
      return result;
    }
    v13 = *(_DWORD *)(*(_QWORD *)(a2 + 128) + 4 * a3);
  }
  else
  {
    v12 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
    if (v12 != -1)
    {
      v36 = &v34;
      v35 = &v36;
      std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
    }
    v13 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 12) - (HIDWORD(qword_1EE3430D8) + a3 + HIDWORD(qword_1EE3430E8)) - 5;
  }
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(unsigned int *)(v14 + 68);
  if ((_DWORD)v15)
  {
    v32 = v11;
    v33 = ~*(_DWORD *)(a2 + 240);
    v16 = v13;
    v17 = -v15;
    do
    {
      v18 = *(_QWORD *)(v14 + 56) + 24 * (v17 + *(unsigned int *)(v14 + 68));
      v20 = *(_DWORD *)(v18 + 16);
      v19 = (_DWORD *)(v18 + 16);
      if (v20 == v13)
      {
        v21 = v33 + v15;
        if ((JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, v33 + (int)v15, v13, a4, a5, a6, a7, a8) & 1) == 0&& (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, v21, v13, a4, a5, a6, a7, a8) & 1) == 0)
        {
          JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v21, v13, a4, a5, a6, a7, a8);
        }
        *v19 = v33 + v15;
      }
      ++v17;
      LODWORD(v15) = v15 - 1;
    }
    while ((_DWORD)v15);
    v11 = v32;
  }
  else
  {
    v16 = v13;
  }
  result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a2, v16, v8, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a2, v16, v8, v22, v23, v24, v25, v26);
    if ((result & 1) == 0)
      result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, v16, v8, v27, v28, v29, v30, v31);
  }
  *v11 = 0;
  v11[8] = 0;
  return result;
}

uint64_t JSC::Wasm::LLIntGenerator::splitStack(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t result;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  __int128 v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE v38[392];

  v11 = *(_DWORD *)(a3 + 12) - a2;
  v36 = v38;
  v37 = 16;
  if (a2 >= 0x11)
  {
    if (a2 >= 0xAAAAAAB)
      goto LABEL_38;
    v30 = a2;
    LODWORD(v37) = 24 * a2 / 0x18;
    v36 = (_BYTE *)WTF::fastMalloc((WTF *)(24 * a2));
    v31 = 0;
  }
  else
  {
    if (!a2)
      goto LABEL_3;
    v30 = a2;
    v31 = 0;
  }
  v32 = 24 * v11;
  do
  {
    v33 = *(_QWORD *)a3 + v32;
    v34 = &v36[24 * v31];
    v35 = *(_OWORD *)v33;
    *((_QWORD *)v34 + 2) = *(_QWORD *)(v33 + 16);
    *(_OWORD *)v34 = v35;
    v31 = ++HIDWORD(v37);
    v32 += 24;
    --v30;
  }
  while (v30);
LABEL_3:
  result = a4 + 16;
  v13 = *(_QWORD *)a4;
  if (*(_QWORD *)a4 != a4 + 16)
  {
    if (v13)
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      WTF::fastFree(v13, v38, a3, a4, a5, a6, a7, a8);
    }
    result = a4 + 16;
    *(_QWORD *)a4 = a4 + 16;
  }
  if (v36 == v38)
  {
    v14 = HIDWORD(v37);
    if (HIDWORD(v37))
      result = (uint64_t)memcpy((void *)result, v38, 24 * ((24 * (unint64_t)HIDWORD(v37) - 24) / 0x18) + 24);
    v15 = v37;
  }
  else
  {
    *(_QWORD *)a4 = v36;
    v15 = v37;
    v14 = HIDWORD(v37);
  }
  *(_DWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 12) = v14;
  *(_DWORD *)(a3 + 12) = v11;
  v16 = *(unsigned int *)(a4 + 12);
  v17 = *(unsigned int *)(a1 + 240);
  v18 = v17 >= v16;
  v19 = v17 - v16;
  if (!v18 || HIDWORD(v19))
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x198CF9494);
  }
  *(_DWORD *)(a1 + 240) = v19;
  v20 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v20)
  {
    v22 = ~(_DWORD)v19;
    v23 = -v20;
    do
    {
      v24 = v22 + v20;
      v25 = *(_QWORD *)a3 + 24 * (v23 + *(unsigned int *)(a3 + 12));
      v28 = *(_DWORD *)(v25 + 16);
      v27 = (unsigned int *)(v25 + 16);
      v26 = v28;
      if (v22 + (_DWORD)v20 != v28 && (int)v26 <= 0x3FFFFFFF)
      {
        result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(a1, v24, v26, a4, a5, a6, a7, a8);
        if ((result & 1) == 0)
        {
          result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(a1, v24, v26, a4, a5, a6, a7, a8);
          if ((result & 1) == 0)
            result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a1, v24, v26, a4, a5, a6, a7, a8);
        }
        *v27 = v24;
      }
      ++v23;
      LODWORD(v20) = v20 - 1;
    }
    while ((_DWORD)v20);
    LODWORD(v19) = *(_DWORD *)(a1 + 240);
  }
  v21 = *(unsigned int *)(a4 + 12) + (unint64_t)v19;
  if (HIDWORD(v21))
  {
    __break(0xC471u);
    JUMPOUT(0x198CF949CLL);
  }
  *(_DWORD *)(a1 + 240) = v21;
  return result;
}

void JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits>::newEmittedLabel(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;

  JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits>::newLabel(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = *a1;
  v11 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(v10, a2, v11, v12, v13, v14, v15, v16);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(unsigned int *)(v17 + 84);
  if ((_DWORD)v18)
  {
    v19 = *(unsigned int *)(v17 + 84);
    if (v11 == *(_DWORD *)(*(_QWORD *)(v17 + 72) + 4 * v18 - 4))
      return;
  }
  else
  {
    v19 = 0;
  }
  v21 = v11;
  v20 = (_QWORD *)(v17 + 72);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 80))
    *(_DWORD *)(*(_QWORD *)(v17 + 72) + 4 * *(unsigned int *)(v17 + 84)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v19 + 1, (unint64_t)&v21);
  else
    *(_DWORD *)(*v20 + 4 * v19) = v11;
  ++*(_DWORD *)(v17 + 84);
  *(_DWORD *)(a2 + 36) = 152;
}

void JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits>::newLabel(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v10 = *(_QWORD *)(a2 + 56);
  if (v10)
  {
    while (1)
    {
      v11 = v10 - 1;
      v12 = (v10 - 1) >> 5;
      if (v12 >= *(unsigned int *)(a2 + 76))
        break;
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v12);
      if (!*(_DWORD *)(v13 + ((unint64_t)(v11 & 0x1F) << 6)))
      {
        v14 = v13 + ((unint64_t)(v11 & 0x1F) << 6);
        v15 = *(_QWORD *)(v14 + 16);
        v16 = v14 + 32 == v15 || v15 == 0;
        --v10;
        if (!v16)
        {
          *(_QWORD *)(v14 + 16) = 0;
          *(_DWORD *)(v14 + 24) = 0;
          WTF::fastFree(v15, (void *)a2, a3, a4, a5, a6, a7, a8);
          v10 = *(_QWORD *)(a2 + 56) - 1;
        }
        *(_QWORD *)(a2 + 56) = v10;
        if (v10)
          continue;
      }
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_21:
    JUMPOUT(0x198CF9720);
  }
LABEL_10:
  *(_QWORD *)(a2 + 56) = v10 + 1;
  v17 = v10 >> 5;
  v18 = *(unsigned int *)(a2 + 76);
  if (v10 >> 5 >= v18)
  {
    v23 = WTF::fastMalloc((WTF *)0x800);
    v26 = v23;
    v24 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v24 == *(_DWORD *)(a2 + 72))
    {
      v25 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::GenericLabel<JSC::Wasm::GeneratorTraits>,32ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 64, v24 + 1, (unint64_t)&v26);
      v24 = *(unsigned int *)(a2 + 76);
      *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v24) = *v25;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v24) = v23;
    }
    v18 = (v24 + 1);
    *(_DWORD *)(a2 + 76) = v18;
    v10 = *(_QWORD *)(a2 + 56) - 1;
    v17 = v10 >> 5;
  }
  if (v17 >= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198CF9728);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v17) + ((v10 & 0x1F) << 6);
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_DWORD *)(v19 + 4) = -1;
  *(_BYTE *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = v19 + 32;
  *(_QWORD *)(v19 + 24) = 8;
  v20 = *(_QWORD *)(a2 + 56) - 1;
  if (v20 >> 5 >= *(unsigned int *)(a2 + 76))
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * (v20 >> 5));
  v22 = v20 & 0x1F;
  ++*(_DWORD *)(v21 + (v22 << 6));
  *a1 = v21 + (v22 << 6);
}

void JSC::Wasm::LLIntGenerator::addElse(_BYTE *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unsigned __int8 v32[4];
  int v33;
  _DWORD *v34;
  uint64_t v35;

  v11 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v11)
  {
    v24 = ~a2[60];
    v25 = -v11;
    v31 = v24;
    do
    {
      v26 = v24 + v11;
      v27 = *(_QWORD *)a4 + 24 * (v25 + *(unsigned int *)(a4 + 12));
      v30 = *(_DWORD *)(v27 + 16);
      v29 = (unsigned int *)(v27 + 16);
      v28 = v30;
      if (v24 + (_DWORD)v11 != v30)
      {
        if ((JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>((uint64_t)a2, v26, v28, a4, a5, a6, a7, a8) & 1) == 0&& (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a2, v26, v28, a4, a5, a6, a7, a8) & 1) == 0)
        {
          JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a2, v26, v28, a4, a5, a6, a7, a8);
        }
        *v29 = v26;
        v24 = v31;
      }
      ++v25;
      LODWORD(v11) = v11 - 1;
    }
    while ((_DWORD)v11);
  }
  v12 = *(_QWORD *)(a3 + 56);
  *(_BYTE *)(v12 + 8) = 1;
  v13 = *(unsigned int *)(v12 + 4);
  if ((_DWORD)v13 == -1)
    v14 = v12;
  else
    v14 = *(unsigned int *)(v12 + 4);
  if ((_DWORD)v13 == -1)
    v15 = 1;
  else
    v15 = 2;
  if (v13 == 0xFFFFFFFFLL)
    v16 = 1;
  else
    v16 = 2;
  v32[0] = v16;
  v33 = 0;
  v34 = a2;
  v35 = v14;
  if ((JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>((uint64_t)a2, v32, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    v32[0] = v15;
    v33 = 0;
    v34 = a2;
    v35 = v14;
    if ((JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a2, v32, v17, v18, v19, v20, v21, v22) & 1) == 0)
    {
      v32[0] = v15;
      v33 = 0;
      v34 = a2;
      v35 = v14;
      JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a2, (uint64_t)v32);
    }
  }
  JSC::Wasm::LLIntGenerator::addElseToUnreachable(a1, (uint64_t)a2, a3, v18, v19, v20, v21, v22);
}

uint64_t JSC::Wasm::LLIntGenerator::materializeConstantsAndLocals(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v10 = result;
    v11 = ~*(_DWORD *)(result + 240);
    v12 = -v8;
    do
    {
      v13 = v11 + v8;
      v14 = *(_QWORD *)a2 + 24 * (v12 + *(unsigned int *)(a2 + 12));
      v17 = *(_DWORD *)(v14 + 16);
      v16 = (unsigned int *)(v14 + 16);
      v15 = v17;
      if (v11 + (_DWORD)v8 != v17)
      {
        result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>(v10, v13, v15, a4, a5, a6, a7, a8);
        if ((result & 1) == 0)
        {
          result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>(v10, v13, v15, a4, a5, a6, a7, a8);
          if ((result & 1) == 0)
            result = JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(v10, v13, v15, a4, a5, a6, a7, a8);
        }
        *v16 = v13;
      }
      ++v12;
      LODWORD(v8) = v8 - 1;
    }
    while ((_DWORD)v8);
  }
  return result;
}

uint64_t JSC::WasmJmp::emit<JSC::Wasm::LLIntGenerator>(_DWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = *a2;
  v19 = *((_QWORD *)a2 + 2);
  result = JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, (unsigned __int8 *)&v18, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    v18 = v16;
    v19 = v17;
    result = JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, (unsigned __int8 *)&v18, v10, v11, v12, v13, v14, v15);
    if ((result & 1) == 0)
    {
      v18 = v16;
      v19 = v17;
      return JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a1, (uint64_t)&v18);
    }
  }
  return result;
}

void JSC::Wasm::LLIntGenerator::addElseToUnreachable(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;

  *(_DWORD *)(a2 + 240) = *(_DWORD *)(*(_QWORD *)(a3 + 40) + 8) + *(_DWORD *)(a3 + 48);
  if (*(_DWORD *)(a3 + 32) == 3)
  {
    v11 = *(_DWORD *)(a2 + 16);
    JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(*(_QWORD *)a3, a2, v11, a4, a5, a6, a7, a8);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(unsigned int *)(v12 + 84);
    if ((_DWORD)v13)
    {
      v14 = *(unsigned int *)(v12 + 84);
      if (v11 == *(_DWORD *)(*(_QWORD *)(v12 + 72) + 4 * v13 - 4))
        goto LABEL_7;
    }
    else
    {
      v14 = 0;
    }
    v22 = v11;
    v15 = (_QWORD *)(v12 + 72);
    if ((_DWORD)v13 == *(_DWORD *)(v12 + 80))
      *(_DWORD *)(*(_QWORD *)(v12 + 72) + 4 * *(unsigned int *)(v12 + 84)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v14 + 1, (unint64_t)&v22);
    else
      *(_DWORD *)(*v15 + 4 * v14) = v11;
    ++*(_DWORD *)(v12 + 84);
    *(_DWORD *)(a2 + 36) = 152;
LABEL_7:
    v16 = *(_QWORD *)(a3 + 40);
    v17 = *(_DWORD *)(a2 + 240) - *(_DWORD *)(v16 + 8);
    v18 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(a3 + 56) = 0;
    v19 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v19 != 2)
    {
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, uint64_t))off_1E35B5A60[v19])(&v23, a3);
        v20 = *(_DWORD **)(a3 + 56);
        *(_DWORD *)(a3 + 32) = 2;
        *(_QWORD *)(a3 + 40) = v16;
        *(_DWORD *)(a3 + 48) = v17;
        *(_QWORD *)(a3 + 56) = v18;
        if (v20)
          --*v20;
        goto LABEL_11;
      }
      *(_DWORD *)(a3 + 32) = 2;
    }
    *(_DWORD *)(a3 + 48) = v17;
    *(_QWORD *)(a3 + 56) = v18;
LABEL_11:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v21 = std::__throw_bad_variant_access[abi:sn180100]();
  JSC::Wasm::LLIntGenerator::finalizePreviousBlockForCatch(v21);
}

uint64_t JSC::Wasm::LLIntGenerator::finalizePreviousBlockForCatch(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned __int8 v35[4];
  int v36;
  _DWORD *v37;
  uint64_t v38;

  if (*(_DWORD *)(a2 + 32) == 5)
  {
    v31 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v31)
    {
      v32 = ~*(_DWORD *)(a2 + 48);
      v33 = 24 * v31;
      v34 = (unsigned int *)(*(_QWORD *)a3 + 16);
      do
      {
        JSC::WasmMov::emit<JSC::Wasm::LLIntGenerator>((uint64_t)a1, v32, *v34, a4, a5, a6, a7, a8);
        *v34 = v32;
        v34 += 6;
        --v32;
        v33 -= 24;
      }
      while (v33);
    }
  }
  else
  {
    v11 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v11)
    {
      v24 = ~a1[60];
      v25 = -v11;
      do
      {
        v26 = v24 + v11;
        v27 = *(_QWORD *)a3 + 24 * (v25 + *(unsigned int *)(a3 + 12));
        v30 = *(_DWORD *)(v27 + 16);
        v29 = (unsigned int *)(v27 + 16);
        v28 = v30;
        if (v24 + (_DWORD)v11 != v30)
        {
          if ((JSC::WasmMov::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, v26, v28, a4, a5, a6, a7, a8) & 1) == 0&& (JSC::WasmMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, v26, v28, a4, a5, a6, a7, a8) & 1) == 0)
          {
            JSC::WasmMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, v26, v28, a4, a5, a6, a7, a8);
          }
          *v29 = v26;
        }
        ++v25;
        LODWORD(v11) = v11 - 1;
      }
      while ((_DWORD)v11);
    }
  }
  v12 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(v12 + 8) = 1;
  v13 = *(unsigned int *)(v12 + 4);
  if ((_DWORD)v13 == -1)
    v14 = v12;
  else
    v14 = *(unsigned int *)(v12 + 4);
  if ((_DWORD)v13 == -1)
    v15 = 1;
  else
    v15 = 2;
  if (v13 == 0xFFFFFFFFLL)
    v16 = 1;
  else
    v16 = 2;
  v35[0] = v16;
  v36 = 0;
  v37 = a1;
  v38 = v14;
  result = JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, v35, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    v35[0] = v15;
    v36 = 0;
    v37 = a1;
    v38 = v14;
    result = JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::Wasm::LLIntGenerator>((uint64_t)a1, v35, v18, v19, v20, v21, v22, v23);
    if ((result & 1) == 0)
    {
      v35[0] = v15;
      v36 = 0;
      v37 = a1;
      v38 = v14;
      return JSC::WasmJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::Wasm::LLIntGenerator>(a1, (uint64_t)v35);
    }
  }
  return result;
}

__int128 *JSC::Wasm::LLIntGenerator::addCatchToUnreachable(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  _BOOL4 v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  _BOOL4 v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  unsigned int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int16 v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  unsigned int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  __int128 *result;
  uint64_t v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  _BYTE *v107;
  _BYTE v108[28];
  uint64_t v109;

  v11 = a3;
  *(_BYTE *)(a2 + 252) = 1;
  JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits>::newLabel(&v109, a2, a3, a4, a5, a6, a7, a8);
  v14 = v109;
  v15 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(v109, a2, v15, v16, v17, v18, v19, v20);
  v27 = *(_QWORD *)(a2 + 24);
  v28 = *(unsigned int *)(v27 + 84);
  if ((_DWORD)v28)
  {
    v29 = *(unsigned int *)(v27 + 84);
    if (v15 == *(_DWORD *)(*(_QWORD *)(v27 + 72) + 4 * v28 - 4))
      goto LABEL_7;
  }
  else
  {
    v29 = 0;
  }
  *(_DWORD *)v108 = v15;
  v30 = (_QWORD *)(v27 + 72);
  if ((_DWORD)v28 == *(_DWORD *)(v27 + 80))
    *(_DWORD *)(*(_QWORD *)(v27 + 72) + 4 * *(unsigned int *)(v27 + 84)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v29 + 1, (unint64_t)v108);
  else
    *(_DWORD *)(*v30 + 4 * v29) = v15;
  ++*(_DWORD *)(v27 + 84);
  *(_DWORD *)(a2 + 36) = 152;
LABEL_7:
  v31 = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(a2 + 240) = v31;
  if (v31 == -1)
    goto LABEL_129;
  v32 = *(_DWORD *)(a2 + 244);
  if (v32 <= v31)
    v32 = v31 + 1;
  *(_DWORD *)(a2 + 240) = v31 + 1;
  *(_DWORD *)(a2 + 244) = v32;
  if (*(_DWORD *)(a5 + 32) == 4)
  {
    ++*(_DWORD *)v14;
    v33 = *(_QWORD *)a5;
    v34 = *(unsigned int *)(a5 + 8) | ((unint64_t)~v31 << 32);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = v33;
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 16) = v14;
    *(_QWORD *)(a5 + 24) = v34;
    *(_DWORD *)(a5 + 32) = 5;
    *(_DWORD *)(a5 + 48) = v31;
  }
  v107 = a1;
  if (*(_DWORD *)(a4 + 32))
    v35 = 0;
  else
    v35 = a4 + 8;
  if (*(_DWORD *)(v35 + 8))
  {
    v36 = 0;
    do
    {
      v37 = *(_DWORD *)(a2 + 240);
      if (v37 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198CFA664);
      }
      v38 = *(_DWORD *)(a2 + 244);
      if (v38 <= v37)
        v38 = v37 + 1;
      *(_DWORD *)(a2 + 240) = v37 + 1;
      *(_DWORD *)(a2 + 244) = v38;
      v39 = ~v37;
      *(_DWORD *)v108 = v39;
      v40 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v40 == *(_DWORD *)(a6 + 8))
        *(_DWORD *)(*(_QWORD *)a6 + 4 * *(unsigned int *)(a6 + 12)) = *(_DWORD *)WTF::Vector<JSC::VirtualRegister,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v40 + 1), (unint64_t)v108, v22, v23, v24, v25, v26);
      else
        *(_DWORD *)(*(_QWORD *)a6 + 4 * v40) = v39;
      v41 = *(_DWORD *)(a6 + 12) + 1;
      *(_DWORD *)(a6 + 12) = v41;
      ++v36;
      if (*(_DWORD *)(a4 + 32))
        v42 = 0;
      else
        v42 = a4 + 8;
      v43 = *(_DWORD *)(v42 + 8);
    }
    while (v36 < v43);
    if (v41)
      goto LABEL_28;
  }
  else
  {
    v43 = 0;
    if (*(_DWORD *)(a6 + 12))
    {
LABEL_28:
      LODWORD(v44) = -**(_DWORD **)a6;
      goto LABEL_31;
    }
  }
  LODWORD(v44) = 0;
LABEL_31:
  if (v11 > 0xFF)
  {
    if (HIWORD(v11))
      goto LABEL_75;
    v46 = v44 | v43;
  }
  else
  {
    v45 = (v31 + 16) < 0x90;
    if (v31 < -1073741824)
      v45 = (v31 + 1073741936) < 0x80;
    v46 = v44 | v43;
    if (v45 && v46 <= 0xFF)
    {
      v47 = *(_DWORD *)(a2 + 16);
      *(_QWORD *)v108 = a2;
      *(_DWORD *)&v108[8] = v47;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), v108, v21, v22, v23, v24, v25, v26);
      *(_DWORD *)(a2 + 36) = 224;
      v108[0] = -32;
      v53 = *(unsigned int *)(a2 + 12);
      v54 = *(unsigned int *)(a2 + 16);
      if (v53 > v54)
      {
        *(_DWORD *)(a2 + 16) = v54 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v54) = -32;
        v55 = *(_DWORD *)(a2 + 12);
        v56 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v53 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v53 + 1), (unint64_t)v108);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v53) = -32;
        v55 = *(_DWORD *)(a2 + 12) + 1;
        v56 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v55;
        *(_DWORD *)(a2 + 16) = v56;
      }
      v108[0] = v11;
      if (v55 > v56)
      {
        *(_DWORD *)(a2 + 16) = v56 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v56) = v11;
        v57 = *(_DWORD *)(a2 + 12);
        v58 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if (v55 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v55 + 1), (unint64_t)v108);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v55) = v11;
        v57 = *(_DWORD *)(a2 + 12) + 1;
        v58 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v57;
        *(_DWORD *)(a2 + 16) = v58;
      }
      v59 = 15 - v31;
      if (v31 >= -1073741824)
        v59 = ~(_BYTE)v31;
      v108[0] = v59;
      if (v57 > v58)
      {
        *(_DWORD *)(a2 + 16) = v58 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v58) = v59;
        v62 = *(_DWORD *)(a2 + 12);
        v63 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v60 = v57;
        if (v57 == *(_DWORD *)(a2 + 8))
        {
          v104 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v57 + 1), (unint64_t)v108);
          v60 = *(unsigned int *)(a2 + 12);
          v61 = *(_QWORD *)a2;
          v59 = *v104;
        }
        else
        {
          v61 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v61 + v60) = v59;
        v62 = *(_DWORD *)(a2 + 12) + 1;
        v63 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v62;
        *(_DWORD *)(a2 + 16) = v63;
      }
      v108[0] = v43;
      if (v62 > v63)
      {
        *(_DWORD *)(a2 + 16) = v63 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v63) = v43;
        v64 = *(_DWORD *)(a2 + 12);
        v65 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if (v62 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v62 + 1), (unint64_t)v108);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v62) = v43;
        v64 = *(_DWORD *)(a2 + 12) + 1;
        v65 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v64;
        *(_DWORD *)(a2 + 16) = v65;
      }
      v108[0] = v44;
      if (v64 > v65)
      {
        *(_DWORD *)(a2 + 16) = v65 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v65) = v44;
      }
      else
      {
        if (v64 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v64 + 1), (unint64_t)v108);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v64) = v44;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
      goto LABEL_84;
    }
  }
  v66 = (v31 + 1073774528) < 0x8000;
  if (v31 >= -1073741824)
    v66 = (v31 + 64) >> 6 < 0x201;
  if (!v66 || HIWORD(v46))
  {
LABEL_75:
    v78 = *(_DWORD *)(a2 + 16);
    *(_QWORD *)v108 = a2;
    *(_DWORD *)&v108[8] = v78;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), v108, v21, v22, v23, v24, v25, v26);
    *(_DWORD *)(a2 + 36) = 224;
    v79 = -114;
    v108[0] = -114;
    v80 = *(unsigned int *)(a2 + 12);
    v81 = *(unsigned int *)(a2 + 16);
    if (v80 <= v81)
    {
      if ((_DWORD)v80 == *(_DWORD *)(a2 + 8))
      {
        v102 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v80 + 1), (unint64_t)v108);
        v80 = *(unsigned int *)(a2 + 12);
        v82 = *(_QWORD *)a2;
        v83 = *v102;
      }
      else
      {
        v82 = *(_QWORD *)a2;
        v83 = -114;
      }
      *(_BYTE *)(v82 + v80) = v83;
      v84 = *(_DWORD *)(a2 + 12) + 1;
      v85 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v84;
      *(_DWORD *)(a2 + 16) = v85;
      goto LABEL_79;
    }
    goto LABEL_118;
  }
  v67 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)v108 = a2;
  *(_DWORD *)&v108[8] = v67;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), v108, v21, v22, v23, v24, v25, v26);
  *(_DWORD *)(a2 + 36) = 224;
  v108[0] = -115;
  v68 = *(unsigned int *)(a2 + 12);
  v69 = *(unsigned int *)(a2 + 16);
  if (v68 > v69)
  {
    *(_DWORD *)(a2 + 16) = v69 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v69) = -115;
    v72 = *(_DWORD *)(a2 + 12);
    v73 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if ((_DWORD)v68 == *(_DWORD *)(a2 + 8))
    {
      v105 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v68 + 1), (unint64_t)v108);
      v68 = *(unsigned int *)(a2 + 12);
      v70 = *(_QWORD *)a2;
      v71 = *v105;
    }
    else
    {
      v70 = *(_QWORD *)a2;
      v71 = -115;
    }
    *(_BYTE *)(v70 + v68) = v71;
    v72 = *(_DWORD *)(a2 + 12) + 1;
    v73 = *(_DWORD *)(a2 + 16) + 1;
    *(_DWORD *)(a2 + 12) = v72;
    *(_DWORD *)(a2 + 16) = v73;
  }
  v74 = -32;
  v108[0] = -32;
  if (v72 > v73)
  {
    *(_DWORD *)(a2 + 16) = v73 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v73) = -32;
  }
  else
  {
    v75 = v72;
    if (v72 == *(_DWORD *)(a2 + 8))
    {
      v106 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v72 + 1), (unint64_t)v108);
      v75 = *(unsigned int *)(a2 + 12);
      v76 = *(_QWORD *)a2;
      v74 = *v106;
    }
    else
    {
      v76 = *(_QWORD *)a2;
    }
    *(_BYTE *)(v76 + v75) = v74;
    *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, (unsigned __int16)v11);
  v77 = 63 - v31;
  if (v31 >= -1073741824)
    v77 = ~(_WORD)v31;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v77);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, (unsigned __int16)v43);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, (unsigned __int16)v44);
  while (1)
  {
LABEL_84:
    if (*(_DWORD *)(a4 + 32))
      v89 = 0;
    else
      v89 = a4 + 8;
    if (*(_DWORD *)(v89 + 8))
    {
      v44 = 0;
      v43 = 419442691;
      while (1)
      {
        if (v44 >= *(unsigned int *)(a6 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x198CFA66CLL);
        }
        if (*(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 16 * (v44 + *(_DWORD *)(a4 + 20)))
           - 227 > 0x1C)
          break;
        if (((1 << (*(_BYTE *)(*(_QWORD *)(a4 + 8) + 16 * (v44 + *(_DWORD *)(a4 + 20))) + 29)) & 0x19003003) == 0)
        {
          v91 = *(_DWORD *)(*(_QWORD *)a6 + 4 * v44);
          if (*(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 16 * (v44 + *(_DWORD *)(a4 + 20))) == 252)
          {
            JSC::WasmF64ReinterpretI64::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>((_DWORD *)a2, v91, *(_DWORD *)(*(_QWORD *)a6 + 4 * v44), v48, v49, v50, v51, v52);
          }
          else
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 16 * (v44 + *(_DWORD *)(a4 + 20))) != 253)
              break;
            JSC::WasmF32ReinterpretI32::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::Wasm::LLIntGenerator>((_DWORD *)a2, v91, *(_DWORD *)(*(_QWORD *)a6 + 4 * v44), v48, v49, v50, v51, v52);
          }
        }
        ++v44;
        if (*(_DWORD *)(a4 + 32))
          v90 = 0;
        else
          v90 = a4 + 8;
        if (v44 >= *(unsigned int *)(v90 + 8))
          goto LABEL_101;
      }
LABEL_129:
      __break(0xC471u);
      JUMPOUT(0x198CFA58CLL);
    }
LABEL_101:
    if (*(_DWORD *)(a5 + 32) == 5)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_118:
    *(_DWORD *)(a2 + 16) = v81 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v81) = v79;
    v84 = *(_DWORD *)(a2 + 12);
    v85 = *(_DWORD *)(a2 + 16);
LABEL_79:
    v86 = -32;
    v108[0] = -32;
    if (v84 > v85)
    {
      *(_DWORD *)(a2 + 16) = v85 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v85) = -32;
    }
    else
    {
      v87 = v84;
      if (v84 == *(_DWORD *)(a2 + 8))
      {
        v103 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v84 + 1), (unint64_t)v108);
        v87 = *(unsigned int *)(a2 + 12);
        v88 = *(_QWORD *)a2;
        v86 = *v103;
      }
      else
      {
        v88 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v88 + v87) = v86;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
    JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a2, v11);
    JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a2, ~v31);
    JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a2, v43);
    JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a2, v44);
  }
  *(_DWORD *)a5 = 0;
  v92 = *(_QWORD *)(a2 + 24);
  v93 = *(_QWORD *)(a5 + 8);
  *(_BYTE *)(v93 + 8) = 1;
  LODWORD(v93) = *(_DWORD *)(v93 + 4);
  v94 = *(_QWORD *)(a5 + 16);
  *(_BYTE *)(v94 + 8) = 1;
  LODWORD(v94) = *(_DWORD *)(v94 + 4);
  *(_BYTE *)(v14 + 8) = 1;
  v95 = *(_DWORD *)(v14 + 4);
  v96 = *(_DWORD *)(a2 + 248);
  *(_DWORD *)v108 = 0;
  *(_DWORD *)&v108[4] = v93;
  *(_DWORD *)&v108[8] = v94;
  *(_DWORD *)&v108[12] = v95;
  *(_DWORD *)&v108[16] = 0;
  *(_DWORD *)&v108[20] = v96;
  *(_DWORD *)&v108[24] = v11;
  result = (__int128 *)(v92 + 136);
  v98 = *(unsigned int *)(v92 + 148);
  if ((_DWORD)v98 == *(_DWORD *)(v92 + 144))
  {
    result = (__int128 *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v98 + 1, (unint64_t)v108);
    v99 = (_OWORD *)(*(_QWORD *)(v92 + 136) + 28 * *(unsigned int *)(v92 + 148));
    v100 = *result;
    v101 = *(__int128 *)((char *)result + 12);
  }
  else
  {
    v99 = (_OWORD *)(*(_QWORD *)result + 28 * v98);
    v100 = *(_OWORD *)v108;
    v101 = *(_OWORD *)&v108[12];
  }
  *(_OWORD *)((char *)v99 + 12) = v101;
  *v99 = v100;
  ++*(_DWORD *)(v92 + 148);
  *v107 = 0;
  v107[8] = 0;
  --*(_DWORD *)v14;
  return result;
}

void JSC::Wasm::LLIntGenerator::addCatchAllToUnreachable(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  _DWORD *v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 *v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  _BYTE v82[28];
  uint64_t v83;

  *(_BYTE *)(a2 + 252) = 1;
  JSC::BytecodeGeneratorBase<JSC::Wasm::GeneratorTraits>::newLabel(&v83, a2, a3, a4, a5, a6, a7, a8);
  v11 = v83;
  v12 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(v83, a2, v12, v13, v14, v15, v16, v17);
  v24 = *(_QWORD *)(a2 + 24);
  v25 = *(unsigned int *)(v24 + 84);
  if ((_DWORD)v25)
  {
    v26 = *(unsigned int *)(v24 + 84);
    if (v12 == *(_DWORD *)(*(_QWORD *)(v24 + 72) + 4 * v25 - 4))
      goto LABEL_7;
  }
  else
  {
    v26 = 0;
  }
  *(_DWORD *)v82 = v12;
  v27 = (_QWORD *)(v24 + 72);
  if ((_DWORD)v25 == *(_DWORD *)(v24 + 80))
    *(_DWORD *)(*(_QWORD *)(v24 + 72) + 4 * *(unsigned int *)(v24 + 84)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v26 + 1, (unint64_t)v82);
  else
    *(_DWORD *)(*v27 + 4 * v26) = v12;
  ++*(_DWORD *)(v24 + 84);
  *(_DWORD *)(a2 + 36) = 152;
LABEL_7:
  v28 = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(a2 + 240) = v28;
  if (v28 == -1)
  {
    __break(0xC471u);
    return;
  }
  v29 = *(_DWORD *)(a2 + 244);
  if (v29 <= v28)
    v29 = v28 + 1;
  *(_DWORD *)(a2 + 240) = v28 + 1;
  *(_DWORD *)(a2 + 244) = v29;
  v30 = *(_DWORD *)(a3 + 32);
  if (v30 != 5)
  {
    if (v30 != 4)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_64;
    }
    ++*(_DWORD *)v11;
    v31 = *(_QWORD *)a3;
    v32 = *(unsigned int *)(a3 + 8) | ((unint64_t)~v28 << 32);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v31;
    *(_QWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 24) = v32;
    *(_DWORD *)(a3 + 32) = 5;
    *(_DWORD *)(a3 + 48) = v28;
  }
  *(_DWORD *)a3 = 1;
  v33 = (v28 + 1073741936) < 0x80;
  if (v28 >= -1073741824)
    v33 = (v28 + 16) < 0x90;
  if (!v33)
  {
    if (v28 >= -1073741824)
      v42 = (v28 + 64) >> 6 < 0x201;
    else
      v42 = (v28 + 1073774528) < 0x8000;
    v43 = (_DWORD *)(a2 + 40);
    if (!v42)
    {
      v56 = *(_DWORD *)(a2 + 16);
      *(_QWORD *)v82 = a2;
      *(_DWORD *)&v82[8] = v56;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v43, v82, v18, v19, v20, v21, v22, v23);
      *(_DWORD *)(a2 + 36) = 225;
      v82[0] = -114;
      v57 = *(unsigned int *)(a2 + 12);
      v58 = *(unsigned int *)(a2 + 16);
      if (v57 > v58)
      {
        *(_DWORD *)(a2 + 16) = v58 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v58) = -114;
        v61 = *(_DWORD *)(a2 + 12);
        v62 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v57 == *(_DWORD *)(a2 + 8))
        {
          v80 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v57 + 1), (unint64_t)v82);
          v57 = *(unsigned int *)(a2 + 12);
          v59 = *(_QWORD *)a2;
          v60 = *v80;
        }
        else
        {
          v59 = *(_QWORD *)a2;
          v60 = -114;
        }
        *(_BYTE *)(v59 + v57) = v60;
        v61 = *(_DWORD *)(a2 + 12) + 1;
        v62 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v61;
        *(_DWORD *)(a2 + 16) = v62;
      }
      v63 = -31;
      v82[0] = -31;
      if (v61 > v62)
      {
        *(_DWORD *)(a2 + 16) = v62 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v62) = -31;
      }
      else
      {
        v64 = v61;
        if (v61 == *(_DWORD *)(a2 + 8))
        {
          v81 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v61 + 1), (unint64_t)v82);
          v64 = *(unsigned int *)(a2 + 12);
          v65 = *(_QWORD *)a2;
          v63 = *v81;
        }
        else
        {
          v65 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v65 + v64) = v63;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
      JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::write(a2, ~v28);
      goto LABEL_50;
    }
    v44 = *(_DWORD *)(a2 + 16);
    *(_QWORD *)v82 = a2;
    *(_DWORD *)&v82[8] = v44;
    JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=(v43, v82, v18, v19, v20, v21, v22, v23);
    *(_DWORD *)(a2 + 36) = 225;
    v45 = -115;
    v82[0] = -115;
    v46 = *(unsigned int *)(a2 + 12);
    v47 = *(unsigned int *)(a2 + 16);
    if (v46 <= v47)
    {
      if ((_DWORD)v46 == *(_DWORD *)(a2 + 8))
      {
        v78 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v46 + 1), (unint64_t)v82);
        v46 = *(unsigned int *)(a2 + 12);
        v48 = *(_QWORD *)a2;
        v49 = *v78;
      }
      else
      {
        v48 = *(_QWORD *)a2;
        v49 = -115;
      }
      *(_BYTE *)(v48 + v46) = v49;
      v50 = *(_DWORD *)(a2 + 12) + 1;
      v51 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v50;
      *(_DWORD *)(a2 + 16) = v51;
LABEL_34:
      v52 = -31;
      v82[0] = -31;
      if (v50 > v51)
      {
        *(_DWORD *)(a2 + 16) = v51 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v51) = -31;
      }
      else
      {
        v53 = v50;
        if (v50 == *(_DWORD *)(a2 + 8))
        {
          v79 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v50 + 1), (unint64_t)v82);
          v53 = *(unsigned int *)(a2 + 12);
          v54 = *(_QWORD *)a2;
          v52 = *v79;
        }
        else
        {
          v54 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v54 + v53) = v52;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
      v55 = 63 - v28;
      if (v28 >= -1073741824)
        v55 = ~(_WORD)v28;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v55);
      goto LABEL_50;
    }
LABEL_64:
    *(_DWORD *)(a2 + 16) = v47 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v47) = v45;
    v50 = *(_DWORD *)(a2 + 12);
    v51 = *(_DWORD *)(a2 + 16);
    goto LABEL_34;
  }
  v34 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)v82 = a2;
  *(_DWORD *)&v82[8] = v34;
  JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>::MutableRef::operator=((_DWORD *)(a2 + 40), v82, v18, v19, v20, v21, v22, v23);
  *(_DWORD *)(a2 + 36) = 225;
  v82[0] = -31;
  v35 = *(unsigned int *)(a2 + 12);
  v36 = *(unsigned int *)(a2 + 16);
  if (v35 > v36)
  {
    *(_DWORD *)(a2 + 16) = v36 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v36) = -31;
    v37 = *(_DWORD *)(a2 + 12);
    v38 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if ((_DWORD)v35 == *(_DWORD *)(a2 + 8))
      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v35 + 1), (unint64_t)v82);
    else
      *(_BYTE *)(*(_QWORD *)a2 + v35) = -31;
    v37 = *(_DWORD *)(a2 + 12) + 1;
    v38 = *(_DWORD *)(a2 + 16) + 1;
    *(_DWORD *)(a2 + 12) = v37;
    *(_DWORD *)(a2 + 16) = v38;
  }
  v39 = 15 - v28;
  if (v28 >= -1073741824)
    v39 = ~(_BYTE)v28;
  v82[0] = v39;
  if (v37 > v38)
  {
    *(_DWORD *)(a2 + 16) = v38 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v38) = v39;
  }
  else
  {
    v40 = v37;
    if (v37 == *(_DWORD *)(a2 + 8))
    {
      v77 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v37 + 1), (unint64_t)v82);
      v40 = *(unsigned int *)(a2 + 12);
      v41 = *(_QWORD *)a2;
      v39 = *v77;
    }
    else
    {
      v41 = *(_QWORD *)a2;
    }
    *(_BYTE *)(v41 + v40) = v39;
    *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
  }
LABEL_50:
  v66 = *(_QWORD *)(a2 + 24);
  v67 = *(_QWORD *)(a3 + 8);
  *(_BYTE *)(v67 + 8) = 1;
  LODWORD(v67) = *(_DWORD *)(v67 + 4);
  v68 = *(_QWORD *)(a3 + 16);
  *(_BYTE *)(v68 + 8) = 1;
  LODWORD(v68) = *(_DWORD *)(v68 + 4);
  *(_BYTE *)(v11 + 8) = 1;
  v69 = *(_DWORD *)(v11 + 4);
  v70 = *(_DWORD *)(a2 + 248);
  *(_DWORD *)v82 = 1;
  *(_DWORD *)&v82[4] = v67;
  *(_DWORD *)&v82[8] = v68;
  *(_DWORD *)&v82[12] = v69;
  *(_DWORD *)&v82[16] = 0;
  *(_DWORD *)&v82[20] = v70;
  *(_DWORD *)&v82[24] = 0;
  v71 = (_QWORD *)(v66 + 136);
  v72 = *(unsigned int *)(v66 + 148);
  if ((_DWORD)v72 == *(_DWORD *)(v66 + 144))
  {
    v73 = (__int128 *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)v82);
    v74 = (_OWORD *)(*(_QWORD *)(v66 + 136) + 28 * *(unsigned int *)(v66 + 148));
    v75 = *v73;
    v76 = *(__int128 *)((char *)v73 + 12);
  }
  else
  {
    v74 = (_OWORD *)(*v71 + 28 * v72);
    v75 = *(_OWORD *)v82;
    v76 = *(_OWORD *)&v82[12];
  }
  *(_OWORD *)((char *)v74 + 12) = v76;
  *v74 = v75;
  ++*(_DWORD *)(v66 + 148);
  *a1 = 0;
  a1[8] = 0;
  --*(_DWORD *)v11;
}

